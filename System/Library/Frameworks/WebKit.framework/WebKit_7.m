void sub_1989220F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)v4 = 0;
      if (v6) {
        WTF::RefCounted<WebCore::ApplePayError>::deref(v6 + 8, a2);
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

_DWORD *IPC::ArgumentCoder<std::optional<WebCore::ApplePayPaymentOrderDetails>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayPaymentOrderDetails> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 32);
  result = (_DWORD *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198922264);
    }
    *(unsigned char *)result = 1;
    if (*(unsigned char *)(a2 + 32))
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
      return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (_DWORD *)IPC::ArgumentCoder<std::optional<WebCore::ApplePayPaymentOrderDetails>,void>::decode<IPC::Decoder>(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198922284);
    }
    *(unsigned char *)result = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::ApplePayPaymentOrderDetails>,void>::decode<IPC::Decoder>@<X0>(WTF::StringImpl **a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if ((unint64_t)v4 <= v6)
  {
LABEL_34:
    v21 = 0;
    v22 = 0;
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      if (v4)
      {
        (*(void (**)(WTF::StringImpl *))(*(void *)v23 + 16))(v23);
        v22 = *a1;
        v21 = a1[1];
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
    }
    goto LABEL_35;
  }
  uint64_t v7 = (unsigned __int8 *)v5 + v6;
  a1[2] = (WTF::StringImpl *)(v7 + 1);
  if (!v5)
  {
    v21 = v4;
    v22 = 0;
LABEL_35:
    int v4 = 0;
    uint64_t v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24)
    {
      if (v21)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v24 + 16))(v24, v22, v21);
        uint64_t v5 = *a1;
        int v4 = a1[1];
      }
      else
      {
        int v4 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_36;
  }
  unsigned int v8 = *v7;
  if (v8 < 2)
  {
    if (!v8)
    {
      LOBYTE(v28) = 0;
      unsigned __int8 v30 = 0;
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 32) = 0;
      char v15 = 1;
LABEL_32:
      *(unsigned char *)(a2 + 40) = v15;
      return std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v5);
    }
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v37);
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v35);
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v33);
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v31);
    v9 = *a1;
    if (!*a1)
    {
      int v13 = 0;
      LOBYTE(v28) = 0;
      unsigned __int8 v30 = 0;
      if (v32)
      {
        v25 = v31;
        v31 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 != 2)
          {
            int v13 = 0;
            *(_DWORD *)v25 -= 2;
            goto LABEL_11;
          }
          WTF::StringImpl::destroy(v25, v5);
        }
        int v13 = 0;
      }
LABEL_11:
      if (v34)
      {
        v14 = v33;
        v33 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy(v14, v5);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
      }
      if (v36)
      {
        v16 = v35;
        v35 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2) {
            WTF::StringImpl::destroy(v16, v5);
          }
          else {
            *(_DWORD *)v16 -= 2;
          }
        }
      }
      if (v38)
      {
        v17 = v37;
        v37 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::destroy(v17, v5);
            if (!v9)
            {
LABEL_42:
              uint64_t v5 = *a1;
              v26 = a1[1];
              *a1 = 0;
              a1[1] = 0;
              v27 = a1[3];
              if (v27 && v26)
              {
                (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v27 + 16))(v27, v5);
                int v13 = v30;
              }
            }
LABEL_29:
            if (v13)
            {
              long long v18 = v28;
              long long v19 = v29;
              long long v28 = 0u;
              long long v29 = 0u;
              *(_OWORD *)a2 = v18;
              *(_OWORD *)(a2 + 16) = v19;
              char v15 = 1;
              *(unsigned char *)(a2 + 32) = 1;
            }
            else
            {
              char v15 = 0;
              *(unsigned char *)a2 = 0;
            }
            goto LABEL_32;
          }
          *(_DWORD *)v17 -= 2;
        }
      }
      if (!v9) {
        goto LABEL_42;
      }
      goto LABEL_29;
    }
    if (v38)
    {
      v10 = v37;
      v37 = 0;
      if (v36)
      {
        v11 = v35;
        v35 = 0;
        if (v34)
        {
          v12 = v33;
          v33 = 0;
          if (v32)
          {
            *(void *)&long long v28 = v10;
            *((void *)&v28 + 1) = v11;
            *(void *)&long long v29 = v12;
            *((void *)&v29 + 1) = v31;
            int v13 = 1;
            unsigned __int8 v30 = 1;
            goto LABEL_11;
          }
        }
      }
    }
    __break(1u);
    goto LABEL_34;
  }
LABEL_36:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (uint64_t)a1[3];
  if (result && v4) {
    uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v5);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 40) = 0;
  return result;
}

void sub_1989225D0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, char a18)
{
}

unint64_t WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1 > a3 || (unint64_t)v5 + *(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > (unint64_t)a2) {
      a2 = (WTF *)v10;
    }
    WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  else
  {
    unint64_t v6 = a3 - (void)v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > (unint64_t)a2) {
      a2 = (WTF *)v8;
    }
    WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void **WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, WTF *this)
{
  if (*((unsigned int *)result + 2) < (unint64_t)this)
  {
    int v2 = (int)this;
    if ((unint64_t)this >> 32)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = (uint64_t)result;
      int v4 = *result;
      size_t v5 = *((unsigned int *)result + 3);
      unint64_t v6 = (void *)WTF::fastMalloc(this);
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = v6;
      uint64_t result = (void **)memcpy(v6, v4, v5);
      if (v4)
      {
        if (*(void **)v3 == v4)
        {
          *(void *)uint64_t v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ApplePayInstallmentItem>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7) {
    goto LABEL_37;
  }
  unint64_t v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v19 = v6;
    uint64_t v20 = 0;
    goto LABEL_38;
  }
  unsigned int v9 = *v8;
  if (v9 >= 5) {
    goto LABEL_39;
  }
  for (unsigned int i = v9 | 0x100; ; unsigned int i = 0)
  {
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v34);
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v32);
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v30);
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v28);
    uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v26);
    uint64_t v13 = *(void *)a2;
    if (!*(void *)a2) {
      break;
    }
    if (i > 0xFF)
    {
      if (v35)
      {
        v14 = v34;
        char v34 = 0;
        if (v33)
        {
          char v15 = v32;
          char v32 = 0;
          if (v31)
          {
            v16 = v30;
            unsigned __int8 v30 = 0;
            if (v29)
            {
              v17 = v28;
              long long v28 = 0;
              if (v27)
              {
                long long v18 = v26;
                *(unsigned char *)a1 = i;
                *(void *)(a1 + 8) = v14;
                *(void *)(a1 + 16) = v15;
                *(void *)(a1 + 24) = v16;
                *(void *)(a1 + 32) = v17;
                *(void *)(a1 + 40) = v18;
                *(unsigned char *)(a1 + 48) = 1;
                goto LABEL_13;
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_37:
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v21 = *((void *)a2 + 3);
    if (v21)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
        uint64_t v20 = *(void *)a2;
        unint64_t v19 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v19 = 0;
        uint64_t v20 = 0;
      }
    }
LABEL_38:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v22 = *((void *)a2 + 3);
    if (v22)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v22 + 16))(v22, v20, v19);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_39:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v23 = *((void *)a2 + 3);
    if (v23 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v5);
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (v27)
  {
    uint64_t result = v26;
    v26 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_13:
  if (v29)
  {
    uint64_t result = v28;
    long long v28 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v31)
  {
    uint64_t result = v30;
    unsigned __int8 v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v33)
  {
    uint64_t result = v32;
    char v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v35)
  {
    uint64_t result = v34;
    char v34 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        if (v13) {
          return result;
        }
        goto LABEL_45;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v13) {
    return result;
  }
LABEL_45:
  uint64_t v24 = *(void *)a2;
  uint64_t v25 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result)
  {
    if (v25) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v24);
    }
  }
  return result;
}

void sub_198922B04(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14, WTF::StringImpl *a15, char a16)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (*(unsigned char *)(v16 - 40))
  {
    long long v18 = *(WTF::StringImpl **)(v16 - 48);
    *(void *)(v16 - 48) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, a2);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplePayInstallmentItem>(unsigned int *a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  unsigned int v4 = a1[3];
  unsigned int v5 = v4 + 1;
  uint64_t v6 = *(void *)a1 + 48 * v4;
  *(unsigned char *)uint64_t v6 = *(unsigned char *)result;
  uint64_t v7 = *(void *)(result + 8);
  *(void *)(result + 8) = 0;
  *(void *)(v6 + 8) = v7;
  uint64_t v8 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  *(void *)(v6 + 16) = v8;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(v6 + 24) = v9;
  uint64_t v10 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(v6 + 32) = v10;
  uint64_t v11 = *(void *)(result + 40);
  *(void *)(result + 40) = 0;
  *(void *)(v6 + 40) = v11;
  a1[3] = v5;
  return result;
}

unint64_t WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x198922DD4);
    }
    int v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    unsigned int v4 = (WTF::StringImpl *)(*(void *)result + 48 * *((unsigned int *)result + 3));
    int v5 = 48 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)int v2 = v6;
    unint64_t result = WTF::VectorMover<false,WebCore::ApplePayInstallmentItem>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)int v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ApplePayInstallmentItem>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  for (; result != a2; a3 += 48)
  {
    *(unsigned char *)a3 = *(unsigned char *)result;
    uint64_t v5 = *((void *)result + 1);
    *((void *)result + 1) = 0;
    *(void *)(a3 + 8) = v5;
    uint64_t v6 = *((void *)result + 2);
    *((void *)result + 2) = 0;
    *(void *)(a3 + 16) = v6;
    uint64_t v7 = *((void *)result + 3);
    *((void *)result + 3) = 0;
    *(void *)(a3 + 24) = v7;
    uint64_t v8 = *((void *)result + 4);
    *((void *)result + 4) = 0;
    *(void *)(a3 + 32) = v8;
    uint64_t v9 = *((void *)result + 5);
    *((void *)result + 5) = 0;
    *(void *)(a3 + 40) = v9;
    WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem(result, a2);
    unint64_t result = (WTF::StringImpl *)(v10 + 48);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::ApplePayInstallmentConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayInstallmentConfiguration> const&>(IPC::Encoder *a1, char *a2)
{
  int v4 = a2[96];
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198922FFCLL);
    }
    unsigned char *result = 1;
    if (a2[96])
    {
      char v7 = *a2;
      uint64_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v9)
      {
        __break(0xC471u);
        JUMPOUT(0x19892301CLL);
      }
      *uint64_t v8 = v7;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2 + 1);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2 + 2);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2 + 3);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2 + 4);
      IPC::Encoder::operator<<<BOOL>(a1, a2 + 40);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2 + 6);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2 + 7);
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *((unsigned int *)a2 + 19));
      unsigned int v10 = *((_DWORD *)a2 + 19);
      if (v10)
      {
        uint64_t v11 = *((void *)a2 + 8);
        uint64_t v12 = v11 + 48 * v10;
        do
        {
          char v16 = *(unsigned char *)v11;
          IPC::Encoder::operator<<<BOOL>(a1, &v16);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(v11 + 8));
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(v11 + 16));
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(v11 + 24));
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(v11 + 32));
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(v11 + 40));
          v11 += 48;
        }
        while (v11 != v12);
      }
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2 + 10);
      char v15 = a2[88];
      return (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, &v15);
    }
    else
    {
      uint64_t v13 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::VectorArgumentCoder<false,WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v13, v14);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19892303CLL);
    }
    unsigned char *result = 0;
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 72 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::ApplicationManifest::Icon,void>::encode(a1, v6);
      v6 += 72;
      v7 -= 72;
    }
    while (v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ApplicationManifest::Icon>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::URL>(a2, &v34);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v4, (uint64_t)&v31);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v29);
  unint64_t v5 = *((void *)a2 + 1);
  uint64_t v6 = *(WTF::StringImpl **)a2;
  unint64_t v7 = *((void *)a2 + 2) - *(void *)a2;
  if (v5 <= v7) {
    goto LABEL_32;
  }
  uint64_t v8 = (unsigned __int8 *)v6 + v7;
  *((void *)a2 + 2) = v8 + 1;
  if (!v6)
  {
    unint64_t v17 = v5;
    long long v18 = 0;
    goto LABEL_33;
  }
  unsigned int v9 = *v8;
  if (v9 > 7) {
    goto LABEL_34;
  }
  for (unsigned int i = v9 | 0x100; ; unsigned int i = 0)
  {
    if (v37)
    {
      uint64_t v11 = v34;
      char v34 = 0;
      uint64_t v23 = v11;
      long long v24 = v35;
      long long v25 = v36;
      LODWORD(v35) = v35 & 0xFFFFFFFE;
      if (v33)
      {
        v26[0] = v31;
        uint64_t v12 = v32;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        v26[1] = v12;
        if (v30)
        {
          uint64_t v13 = v29;
          char v29 = 0;
          char v27 = v13;
          if (i > 0xFF) {
            break;
          }
        }
      }
    }
    __break(1u);
LABEL_32:
    unint64_t v17 = 0;
    long long v18 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v19 = *((void *)a2 + 3);
    if (v19)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        long long v18 = *(WTF::StringImpl **)a2;
        unint64_t v17 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v17 = 0;
        long long v18 = 0;
      }
    }
LABEL_33:
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v20 = *((void *)a2 + 3);
    if (v20)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
        uint64_t v6 = *(WTF::StringImpl **)a2;
        unint64_t v5 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
      }
    }
LABEL_34:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (!result
      || !v5
      || (unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v6), !*(void *)a2))
    {
      *a1 = 0;
      a1[72] = 0;
      goto LABEL_17;
    }
    LOBYTE(v9) = 0;
  }
  char v28 = v9;
  std::__optional_destruct_base<WebCore::ApplicationManifest::Icon,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplicationManifest::Icon>((uint64_t)a1, (uint64_t)&v23);
  char v15 = v27;
  char v27 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v14);
  unint64_t result = v23;
  uint64_t v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_17:
  if (v30)
  {
    unint64_t result = v29;
    char v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v33) {
    unint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v6);
  }
  if (v37)
  {
    unint64_t result = v34;
    char v34 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (!a1[72])
  {
    uint64_t v21 = *(WTF::StringImpl **)a2;
    uint64_t v22 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result)
    {
      if (v22) {
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
      }
                                                                                                  + 16))(result, v21);
    }
  }
  return result;
}

void sub_1989233B8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  std::__optional_destruct_base<WebCore::ApplicationManifest::Icon,false>::~__optional_destruct_base[abi:sn180100](v25, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplicationManifest::Icon>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WTF::URL::URL(*(void *)a1 + 72 * *(unsigned int *)(a1 + 12), (uint64_t *)v3);
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 48) = 0;
  uint64_t v5 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = 0;
  *(void *)(v4 + 40) = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 48);
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v4 + 48) = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 52);
  *(_DWORD *)(v3 + 52) = 0;
  *(_DWORD *)(v4 + 52) = v5;
  uint64_t v6 = *(void *)(v3 + 56);
  *(void *)(v3 + 56) = 0;
  *(void *)(v4 + 56) = v6;
  *(unsigned char *)(v4 + 64) = *(unsigned char *)(v3 + 64);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 72 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x38E38E4)
    {
      __break(0xC471u);
      JUMPOUT(0x198923694);
    }
    unint64_t v3 = *(WTF::StringImpl **)a1;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)a1 + 72 * *(unsigned int *)(a1 + 12));
    int v5 = 72 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(72 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x48;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::ApplicationManifest::Icon>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ApplicationManifest::Icon>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    uint64_t v6 = 0;
    do
    {
      unint64_t v7 = (char *)v5 + v6;
      WTF::URL::URL(a3 + v6, (uint64_t *)((char *)v5 + v6));
      *(void *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      uint64_t v10 = *(void *)((char *)v5 + v6 + 40);
      *((void *)v7 + 5) = 0;
      *(void *)(v9 + 40) = v10;
      LODWORD(v10) = *(_DWORD *)((char *)v5 + v6 + 48);
      *((_DWORD *)v7 + 12) = 0;
      *(_DWORD *)(v9 + 48) = v10;
      LODWORD(v10) = *(_DWORD *)((char *)v5 + v6 + 52);
      *((_DWORD *)v7 + 13) = 0;
      *(_DWORD *)(v9 + 52) = v10;
      uint64_t v11 = *(void *)((char *)v5 + v6 + 56);
      *((void *)v7 + 7) = 0;
      *(void *)(v9 + 56) = v11;
      *(unsigned char *)(v9 + 64) = *((unsigned char *)v5 + v6 + 64);
      uint64_t v12 = *(WTF::StringImpl **)((char *)v5 + v6 + 56);
      *((void *)v7 + 7) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v8);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v7 + 40), v8);
      unint64_t result = *(WTF::StringImpl **)v7;
      *(void *)unint64_t v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v6 += 72;
    }
    while ((WTF::StringImpl *)((char *)v5 + v6) != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::ApplicationManifest::Icon,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    unint64_t v3 = *(WTF::StringImpl **)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, a2);
    int v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

unsigned int *WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  if (result[2] > this)
  {
    uint64_t v3 = (uint64_t)result;
    unint64_t v4 = result[3];
    if (v4 > this)
    {
      unint64_t result = (unsigned int *)WTF::VectorDestructor<true,WebCore::ApplicationManifest::Icon>::destruct((WTF::StringImpl *)(*(void *)result + 72 * this), (WTF::StringImpl *)(*(void *)result + 72 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    int v5 = *(WTF::StringImpl **)v3;
    if (this)
    {
      if (this >= 0x38E38E4)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v6 = (WTF *)(72 * this);
      unint64_t result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF8) / 0x48;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        unint64_t result = (unsigned int *)WTF::VectorMover<false,WebCore::ApplicationManifest::Icon>::move(v5, (WTF::StringImpl *)((char *)v5 + 72 * v4), (uint64_t)result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = v5 << 6;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::ApplicationManifest::Shortcut,void>::encode(a1, v6);
      v6 += 8;
      v7 -= 64;
    }
    while (v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::ScreenOrientationLockType>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ScreenOrientationLockType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::ScreenOrientationLockType,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v2, v1);
        a1 = v14;
        uint64_t v11 = *v14;
        unint64_t v10 = v14[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
  }
  else
  {
    uint64_t v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      unsigned int v5 = *v4;
      int v6 = 1;
      goto LABEL_4;
    }
    unint64_t v10 = v1;
    uint64_t v11 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v13 = a1[3];
  if (v13 && v10) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
  }
  unsigned int v5 = 0;
  int v6 = 0;
LABEL_4:
  BOOL v7 = v5 < 8;
  unsigned int v8 = v5 | 0x100;
  if ((v6 & v7) != 0) {
    return v8;
  }
  else {
    return 0;
  }
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ApplicationManifest::Shortcut>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v25);
  IPC::Decoder::decode<WTF::URL>(a2, &v21);
  uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v18, a2);
  if (!*(void *)a2) {
    goto LABEL_28;
  }
  if (!v26) {
    goto LABEL_27;
  }
  int v6 = v25;
  uint64_t v25 = 0;
  uint64_t v13 = v6;
  if (!v24 || (BOOL v7 = v21, v21 = 0, v14 = v7, v15 = v22, v16 = v23, LODWORD(v22) = v22 & 0xFFFFFFFE, !v20))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    *a1 = 0;
    a1[64] = 0;
    goto LABEL_13;
  }
  v17[0] = v18;
  uint64_t v8 = v19;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  v17[1] = v8;
  std::__optional_destruct_base<WebCore::ApplicationManifest::Shortcut,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplicationManifest::Shortcut>((uint64_t)a1, (uint64_t *)&v13);
  WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v9);
  unint64_t v10 = v14;
  uint64_t v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v5);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_13:
  if (v20) {
    uint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v5);
  }
  if (v24)
  {
    uint64_t result = v21;
    uint64_t v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v26)
  {
    uint64_t result = v25;
    uint64_t v25 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (!a1[64])
  {
    uint64_t v11 = *(void *)a2;
    uint64_t v12 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result)
    {
      if (v12) {
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v11);
      }
    }
  }
  return result;
}

void sub_198923CDC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  std::__optional_destruct_base<WebCore::ApplicationManifest::Shortcut,false>::~__optional_destruct_base[abi:sn180100](v26, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplicationManifest::Shortcut>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unint64_t v4 = *(void *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6);
  uint64_t v5 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  *(void *)unint64_t v4 = v5;
  WTF::URL::URL(v4 + 8, (uint64_t *)(v3 + 8));
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 56) = 0;
  uint64_t v6 = *(void *)(v3 + 48);
  *(void *)(v3 + 48) = 0;
  *(void *)(v4 + 48) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 56);
  *(_DWORD *)(v3 + 56) = 0;
  *(_DWORD *)(v4 + 56) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 60);
  *(_DWORD *)(v3 + 60) = 0;
  *(_DWORD *)(v4 + 60) = v6;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

void sub_198923E58(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  unint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 26))
  {
    uint64_t v3 = result;
    unint64_t v4 = *(WTF::StringImpl **)result;
    uint64_t v5 = (WTF::StringImpl **)(*(void *)result + ((unint64_t)*(unsigned int *)(result + 12) << 6));
    uint64_t v6 = WTF::fastMalloc((WTF *)(a2 << 6));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    WTF::VectorMover<false,WebCore::ApplicationManifest::Shortcut>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ApplicationManifest::Shortcut>::move(WTF::StringImpl *result, WTF::StringImpl **a2, uint64_t a3)
{
  if (result != (WTF::StringImpl *)a2)
  {
    uint64_t v5 = (uint64_t)result + 48;
    do
    {
      unint64_t v7 = (WTF::StringImpl **)(v5 - 48);
      uint64_t v6 = *(void *)(v5 - 48);
      *(void *)(v5 - 48) = 0;
      *(void *)a3 = v6;
      WTF::URL::URL(a3 + 8, (uint64_t *)(v5 - 40));
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      uint64_t v8 = *(void *)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)(a3 + 48) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(a3 + 56) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(a3 + 60) = v8;
      WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, v9);
      uint64_t v11 = *(WTF::StringImpl **)(v5 - 40);
      *(void *)(v5 - 40) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      uint64_t result = *v7;
      void *v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      a3 += 64;
      v5 += 64;
    }
    while (v7 + 8 != a2);
  }
  return result;
}

void sub_19892409C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  unint64_t v4 = *v2;
  *int v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::ApplicationManifest::Shortcut,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 48, a2);
    unint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      uint64_t result = (uint64_t)WTF::VectorDestructor<true,WebCore::ApplicationManifest::Shortcut>::destruct((WTF::StringImpl *)(*(void *)result + (a2 << 6)), (WTF::StringImpl *)(*(void *)result + (v4 << 6)));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >> 26)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = WTF::fastMalloc((WTF *)(a2 << 6));
      *(_DWORD *)(v3 + 8) = a2;
      *(void *)uint64_t v3 = result;
      if ((WTF::StringImpl *)result != v5) {
        uint64_t result = (uint64_t)WTF::VectorMover<false,WebCore::ApplicationManifest::Shortcut>::move(v5, (WTF::StringImpl **)v5 + 8 * (unint64_t)v4, result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(char **)a2;
    do
    {
      char v7 = *v6++;
      char v8 = v7;
      unint64_t result = IPC::Encoder::operator<<<BOOL>(a1, &v8);
      --v5;
    }
    while (v5);
  }
  return result;
}

unint64_t WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > (unint64_t)a2) {
      a2 = (WTF *)v10;
    }
    WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > (unint64_t)a2) {
      a2 = (WTF *)v8;
    }
    WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 32);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989243C8);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 32))
    {
      IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)a2);
      uint64_t v8 = *(void *)(a2 + 16);
      return (unsigned char *)IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v8);
    }
    else
    {
      unint64_t v7 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<WebCore::NotificationDirection,void>::decode<IPC::Decoder>(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989243E8);
    }
    unsigned char *result = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::NotificationDirection,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      uint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        uint64_t v8 = *v12;
        unint64_t v7 = v12[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_6;
  }
  int v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
    }
    goto LABEL_7;
  }
  unsigned int v5 = *v4;
  if (v5 >= 3)
  {
LABEL_7:
    unsigned int v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  int v6 = 1;
  return v5 | (v6 << 8);
}

void *IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::UUID>>,void>::decode<IPC::Decoder>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    unsigned char *result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      long long v15 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        unint64_t result = v15;
        uint64_t v11 = *v15;
        unint64_t v10 = v15[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_12;
  }
  int v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v10 = v3;
    uint64_t v11 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    unsigned char *result = 0;
    result[1] = 0;
    uint64_t v13 = result[3];
    if (v13)
    {
      uint64_t v14 = result;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        unint64_t result = v14;
        uint64_t v4 = *v14;
        unint64_t v3 = v14[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      unint64_t result = (void *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>((IPC::Decoder *)result, (uint64_t)v16);
      char v8 = v17;
      if (v17)
      {
        long long v9 = v16[1];
        *(_OWORD *)a2 = v16[0];
        *(_OWORD *)(a2 + 16) = v9;
        char v8 = 1;
        *(unsigned char *)(a2 + 32) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 32) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 48) = v8;
    return result;
  }
LABEL_13:
  unsigned char *result = 0;
  result[1] = 0;
  unint64_t result = (void *)result[3];
  if (result && v3) {
    unint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 48) = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::PermissionName,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v2, v1);
        a1 = v14;
        uint64_t v11 = *v14;
        unint64_t v10 = v14[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
  }
  else
  {
    uint64_t v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      unsigned int v5 = *v4;
      int v6 = 1;
      goto LABEL_4;
    }
    unint64_t v10 = v1;
    uint64_t v11 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v13 = a1[3];
  if (v13 && v10) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
  }
  unsigned int v5 = 0;
  int v6 = 0;
LABEL_4:
  BOOL v7 = v5 < 0xF;
  unsigned int v8 = v5 | 0x100;
  if ((v6 & v7) != 0) {
    return v8;
  }
  else {
    return 0;
  }
}

unsigned char *IPC::ArgumentCoder<WTF::RefPtr<WebCore::ReportBody,WTF::RawPtrTraits<WebCore::ReportBody>,WTF::DefaultRefDerefTraits<WebCore::ReportBody>>,void>::encode<IPC::Encoder,WebCore::ReportBody>(IPC::Encoder *a1, WebCore::TestReportBody **a2)
{
  uint64_t v4 = *a2;
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (v6)
    {
      unsigned char *result = 0;
      return result;
    }
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x198924B04);
  }
  if (!v6) {
    goto LABEL_17;
  }
  unsigned char *result = 1;
  BOOL v7 = *a2;
  if ((*(unsigned int (**)(WebCore::TestReportBody *))(*(void *)v7 + 24))(v7) == 2)
  {
    LOBYTE(v9) = 0;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)&v9);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v7 + 2);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v7 + 3);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v7 + 4);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v7 + 5);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v7 + 6);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v7 + 7);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v7 + 8);
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *((unsigned char *)v7 + 72));
    IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *((_WORD *)v7 + 37));
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *((void *)v7 + 10));
    return (unsigned char *)IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *((void *)v7 + 11));
  }
  if (!(*(unsigned int (**)(WebCore::TestReportBody *))(*(void *)v7 + 24))(v7))
  {
    LOBYTE(v9) = 1;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)&v9);
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *((unsigned char *)v7 + 12));
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v7 + 2);
    unsigned int v8 = (uint64_t *)((char *)v7 + 56);
    return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v8);
  }
  if ((*(unsigned int (**)(WebCore::TestReportBody *))(*(void *)v7 + 24))(v7) == 1)
  {
    LOBYTE(v9) = 2;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)&v9);
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *((unsigned char *)v7 + 12));
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v7 + 2);
    LOBYTE(v9) = *((unsigned char *)v7 + 56);
    return (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, (char *)&v9);
  }
  if ((*(unsigned int (**)(WebCore::TestReportBody *))(*(void *)v7 + 24))(v7) == 4)
  {
    LOBYTE(v9) = 3;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)&v9);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v7 + 2);
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *((double *)v7 + 3));
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v7 + 4);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v7 + 5);
    uint64_t v9 = *((void *)v7 + 6);
    IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (uint64_t)&v9);
    uint64_t v9 = *((void *)v7 + 7);
    return IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (uint64_t)&v9);
  }
  unint64_t result = (unsigned char *)(*(uint64_t (**)(WebCore::TestReportBody *))(*(void *)v7 + 24))(v7);
  if (result == 6)
  {
    LOBYTE(v9) = 4;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)&v9);
    unsigned int v8 = (uint64_t *)WebCore::TestReportBody::message(v7);
    return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v8);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *((unsigned int *)a2 + 3));
  uint64_t v5 = *((unsigned int *)a2 + 3);
  if (v5)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = v6 + 16 * v5;
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v6);
      unint64_t result = IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(v6 + 8));
      v6 += 16;
    }
    while (v6 != v7);
  }
  return result;
}

IPC::Decoder *IPC::Decoder::decode<WebCore::SpeechRecognitionAlternativeData>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v17);
  unint64_t v5 = *((void *)a2 + 1);
  uint64_t v6 = *(WTF::StringImpl **)a2;
  unint64_t v7 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
  if (v5 >= v7 && v5 - v7 > 7)
  {
    uint64_t v9 = (uint64_t *)((char *)v6 + v7);
    *((void *)a2 + 2) = v9 + 1;
    if (v6)
    {
      uint64_t v6 = (WTF::StringImpl *)v18;
      if (!v18) {
        goto LABEL_20;
      }
      uint64_t v10 = *v9;
      *(void *)a1 = v17;
      *(void *)(a1 + 8) = v10;
      *(unsigned char *)(a1 + 16) = 1;
      return result;
    }
    unint64_t v11 = v5;
    uint64_t v12 = 0;
  }
  else
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t result = (IPC::Decoder *)*((void *)a2 + 3);
    if (result) {
      goto LABEL_21;
    }
  }
  while (1)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v13 = *((void *)a2 + 3);
    if (!v13) {
      break;
    }
    if (!v11) {
      break;
    }
    unint64_t result = (IPC::Decoder *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v13 + 16))(v13, v12);
    if (!*(void *)a2) {
      break;
    }
    uint64_t v6 = (WTF::StringImpl *)v18;
    if (v18) {
      char v17 = 0;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    if (v5)
    {
      (*(void (**)(IPC::Decoder *, WTF::StringImpl *, unint64_t))(*(void *)result + 16))(result, v6, v5);
      uint64_t v12 = *(WTF::StringImpl **)a2;
      unint64_t v11 = *((void *)a2 + 1);
    }
    else
    {
      unint64_t v11 = 0;
      uint64_t v12 = 0;
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (v18)
  {
    long long v16 = v17;
    char v17 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v12);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
  }
  uint64_t v14 = *(WTF::StringImpl **)a2;
  uint64_t v15 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (IPC::Decoder *)*((void *)a2 + 3);
  if (result)
  {
    if (v15) {
      return (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, WTF::StringImpl *))(*(void *)result + 16))(result, v14);
    }
  }
  return result;
}

void sub_198924D3C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198924EBCLL);
    }
    unint64_t v3 = result;
    uint64_t v4 = *(WTF::StringImpl **)result;
    uint64_t v5 = (WTF::StringImpl *)(*(void *)result + 16 * *((unsigned int *)result + 3));
    uint64_t v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(16 * a2));
    *((_DWORD *)v3 + 2) = v2;
    *(void *)unint64_t v3 = v6;
    unint64_t result = WTF::VectorMover<false,WebCore::SpeechRecognitionAlternativeData>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)v3 == v4)
      {
        *(void *)unint64_t v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v4, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::SpeechRecognitionAlternativeData>::move(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  if (result != a2)
  {
    uint64_t v5 = (WTF::StringImpl **)result;
    do
    {
      uint64_t v6 = *v5;
      *uint64_t v5 = 0;
      *a3 = v6;
      a3[1] = v5[1];
      unint64_t result = *v5;
      *uint64_t v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v5 += 2;
      a3 += 2;
    }
    while (v5 != (WTF::StringImpl **)a2);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 24 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebCore::WebLockManagerSnapshot::Info,void>::encode(a1, v6);
      v6 += 24;
      v7 -= 24;
    }
    while (v7);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  char v28 = 0;
  uint64_t v29 = 0;
  if (result >= 0xAAAA)
  {
    do
    {
      IPC::Decoder::decode<WebCore::WebLockManagerSnapshot::Info>((uint64_t)&v24, a1);
      if (!v27) {
        goto LABEL_29;
      }
      if (HIDWORD(v29) == v29)
      {
        WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WebLockManagerSnapshot::Info>((unsigned int *)&v28, (unint64_t)&v24);
      }
      else
      {
        int v14 = HIDWORD(v29) + 1;
        uint64_t v15 = (char *)v28 + 24 * HIDWORD(v29);
        uint64_t v16 = v24;
        uint64_t v24 = 0;
        *(void *)uint64_t v15 = v16;
        v15[8] = v25;
        uint64_t v17 = v26;
        uint64_t v26 = 0;
        *((void *)v15 + 2) = v17;
        HIDWORD(v29) = v14;
      }
      unint64_t result = std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v24, v7);
      --v6;
    }
    while (v6);
    unsigned int v18 = HIDWORD(v29);
    uint64_t v19 = v28;
    if (v29 > HIDWORD(v29))
    {
      char v20 = v28;
      if (HIDWORD(v29))
      {
        if (HIDWORD(v29) >= 0xAAAAAAB)
        {
          __break(0xC471u);
          return result;
        }
        unsigned int v21 = 24 * HIDWORD(v29);
        long long v22 = (WTF *)WTF::fastMalloc((WTF *)(24 * HIDWORD(v29)));
        LODWORD(v29) = v21 / 0x18;
        char v28 = v22;
        char v20 = v19;
        if (v22 != v19)
        {
          WTF::VectorMover<false,WebCore::WebLockManagerSnapshot::Info>::move(v19, (WTF::StringImpl *)((char *)v19 + 24 * v18), (uint64_t)v22);
          char v20 = v28;
        }
      }
      if (v19)
      {
        if (v20 == v19)
        {
          char v28 = 0;
          LODWORD(v29) = 0;
        }
        WTF::fastFree(v19, v5);
        uint64_t v19 = v28;
      }
      else
      {
        uint64_t v19 = v20;
      }
    }
    *(void *)a2 = v19;
    uint64_t v23 = v29;
    char v28 = 0;
    uint64_t v29 = 0;
    *(void *)(a2 + 8) = v23;
    goto LABEL_14;
  }
  if (result)
  {
    LODWORD(v29) = 24 * (int)result / 0x18u;
    char v28 = (WTF *)WTF::fastMalloc((WTF *)(24 * result));
    while (1)
    {
      IPC::Decoder::decode<WebCore::WebLockManagerSnapshot::Info>((uint64_t)&v24, a1);
      if (!v27) {
        break;
      }
      if (HIDWORD(v29) == v29)
      {
        WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WebLockManagerSnapshot::Info>((unsigned int *)&v28, (unint64_t)&v24);
      }
      else
      {
        int v8 = HIDWORD(v29) + 1;
        unint64_t v9 = (char *)v28 + 24 * HIDWORD(v29);
        uint64_t v10 = v24;
        uint64_t v24 = 0;
        *(void *)unint64_t v9 = v10;
        v9[8] = v25;
        uint64_t v11 = v26;
        uint64_t v26 = 0;
        *((void *)v9 + 2) = v11;
        HIDWORD(v29) = v8;
      }
      std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v24, v7);
      if (!--v6)
      {
        uint64_t v12 = v28;
        uint64_t v13 = v29;
        goto LABEL_13;
      }
    }
LABEL_29:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v24, v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
LABEL_13:
    char v28 = 0;
    uint64_t v29 = 0;
    *(void *)a2 = v12;
    *(void *)(a2 + 8) = v13;
LABEL_14:
    *(unsigned char *)(a2 + 16) = 1;
  }
  return WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v5);
}

void sub_19892521C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v14);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::WebLockManagerSnapshot::Info>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v14);
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::UserStyleLevel>((uint64_t *)a2);
  unint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v12);
  uint64_t v7 = *(void *)a2;
  if (*(void *)a2)
  {
    if (v15)
    {
      int v8 = v14;
      int v14 = 0;
      if (v4 > 0xFFu)
      {
        if (v13)
        {
          unint64_t v9 = v12;
          *(void *)a1 = v8;
          *(unsigned char *)(a1 + 8) = v4;
          *(void *)(a1 + 16) = v9;
          *(unsigned char *)(a1 + 24) = 1;
          goto LABEL_6;
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (v13)
  {
    unint64_t result = v12;
    uint64_t v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_6:
  if (v15)
  {
    unint64_t result = v14;
    int v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        if (v7) {
          return result;
        }
        goto LABEL_19;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v7) {
    return result;
  }
LABEL_19:
  uint64_t v10 = *(void *)a2;
  uint64_t v11 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result)
  {
    if (v11) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v10);
    }
  }
  return result;
}

void sub_198925394(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100](v12, a2);
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WebLockManagerSnapshot::Info>(unsigned int *a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  unsigned int v4 = a1[3];
  unsigned int v5 = v4 + 1;
  uint64_t v6 = *(void *)a1 + 24 * v4;
  uint64_t v7 = *(void *)result;
  *(void *)unint64_t result = 0;
  *(void *)uint64_t v6 = v7;
  *(unsigned char *)(v6 + 8) = *(unsigned char *)(result + 8);
  uint64_t v8 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  *(void *)(v6 + 16) = v8;
  a1[3] = v5;
  return result;
}

unint64_t WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1989255B8);
    }
    int v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    unsigned int v4 = (WTF::StringImpl *)(*(void *)result + 24 * *((unsigned int *)result + 3));
    int v5 = 24 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)int v2 = v6;
    unint64_t result = WTF::VectorMover<false,WebCore::WebLockManagerSnapshot::Info>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)int v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::WebLockManagerSnapshot::Info>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    do
    {
      uint64_t v6 = *(WTF::StringImpl **)v5;
      *(void *)int v5 = 0;
      *(void *)a3 = v6;
      *(unsigned char *)(a3 + 8) = *((unsigned char *)v5 + 8);
      uint64_t v7 = *((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      *(void *)(a3 + 16) = v7;
      unint64_t v8 = (WTF::StringImpl *)*((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, a2);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      unint64_t result = *(WTF::StringImpl **)v5;
      *(void *)int v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      int v5 = (WTF::StringImpl *)((char *)v5 + 24);
      a3 += 24;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::WebLockManagerSnapshot::Info,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v3 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    unsigned int v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

unsigned char *IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(IPC::Encoder *a1, JSC::ArrayBuffer **a2)
{
  unsigned int v4 = *a2;
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (v6)
    {
      unsigned char *result = 1;
      uint64_t v7 = JSC::ArrayBuffer::span(*a2);
      unint64_t v9 = v8;
      if (!v8)
      {
        uint64_t v12 = 0;
        goto LABEL_7;
      }
      if (!((unint64_t)v8 >> 32))
      {
        uint64_t v10 = v7;
        uint64_t v11 = WTF::fastMalloc(v8);
        uint64_t v12 = (void *)v11;
        char v13 = 0;
        do
        {
          *((unsigned char *)v13 + v11) = *((unsigned char *)v13 + v10);
          char v13 = (WTF *)((char *)v13 + 1);
        }
        while (v9 != v13);
LABEL_7:
        unint64_t result = (unsigned char *)IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v12, v9);
        if (v12)
        {
          return (unsigned char *)WTF::fastFree((WTF *)v12, v14);
        }
        return result;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1989257D4);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1989257F4);
  }
  unsigned char *result = 0;
  return result;
}

void sub_198925800(_Unwind_Exception *exception_object, void *a2)
{
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::AuthenticationExtensionsClientOutputs>,void>::encode<IPC::Encoder,std::optional<WebCore::AuthenticationExtensionsClientOutputs> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 80);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989258C4);
    }
    goto LABEL_30;
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x198925A1CLL);
  }
  unsigned char *result = 1;
  if (!*(unsigned char *)(a2 + 80)) {
    goto LABEL_39;
  }
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)a2);
  int v7 = *(unsigned __int8 *)(a2 + 3);
  unint64_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v7)
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x198925A3CLL);
    }
    *unint64_t v8 = 1;
    if (!*(unsigned char *)(a2 + 3)) {
      goto LABEL_39;
    }
    IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 2));
  }
  else
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x198925ABCLL);
    }
    *unint64_t v8 = 0;
  }
  int v10 = *(unsigned __int8 *)(a2 + 32);
  uint64_t v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v10)
  {
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x198925A5CLL);
    }
    unsigned char *v11 = 1;
    if (!*(unsigned char *)(a2 + 32)) {
      goto LABEL_39;
    }
    IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 8));
    IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, (JSC::ArrayBuffer **)(a2 + 16));
    IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 24));
  }
  else
  {
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x198925ADCLL);
    }
    unsigned char *v11 = 0;
  }
  int v13 = *(unsigned __int8 *)(a2 + 72);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v13)
  {
    if (!v14)
    {
      __break(0xC471u);
      JUMPOUT(0x1989259E4);
    }
    goto LABEL_30;
  }
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198925A7CLL);
  }
  unsigned char *result = 1;
  if (!*(unsigned char *)(a2 + 72)) {
    goto LABEL_39;
  }
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 40));
  int v15 = *(unsigned __int8 *)(a2 + 64);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v15)
  {
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x198925AFCLL);
    }
LABEL_30:
    unsigned char *result = 0;
    return result;
  }
  if (!v16)
  {
    __break(0xC471u);
    JUMPOUT(0x198925A9CLL);
  }
  unsigned char *result = 1;
  if (!*(unsigned char *)(a2 + 64))
  {
LABEL_39:
    uint64_t v17 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
    return (unsigned char *)IPC::Decoder::decode<WebCore::AuthenticatorTransport>(v17);
  }
  IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, (JSC::ArrayBuffer **)(a2 + 48));

  return IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, (JSC::ArrayBuffer **)(a2 + 56));
}

uint64_t IPC::Decoder::decode<WebCore::AuthenticatorTransport>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      uint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        a1 = v12;
        uint64_t v8 = *v12;
        unint64_t v7 = v12[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_7;
  }
  int v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_7:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      uint64_t v11 = a1;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v8, v7);
        a1 = v11;
        uint64_t v2 = *v11;
        unint64_t v1 = v11[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v5 = *v4;
  if (v5 < 7) {
    return v5 | 0x100;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v1) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v2);
    }
    return 0;
  }
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>>(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,0ul>(result, a2, a3);
  }
  if (*(_DWORD *)(a2 + 128))
  {
    uint64_t result = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,0ul>(result, a2, a3);
  }
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,0ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  int v4 = a1;
  if (a3 != 1)
  {
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,0ul,1ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 128) != 1)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,0ul,1ul>(a1, a2, a3);
  }
  IPC::ArgumentCoder<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,void>::encode<IPC::Encoder,JSC::ArrayBuffer>(a1, (JSC::ArrayBuffer **)a2);

  return (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WebCore::AuthenticationExtensionsClientOutputs>,void>::encode<IPC::Encoder,std::optional<WebCore::AuthenticationExtensionsClientOutputs> const&>(v4, a2 + 8);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 2)
  {
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,0ul,1ul,2ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 128) != 2)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,0ul,1ul,2ul>(a1, a2, a3);
  }

  return (IPC::Encoder *)IPC::ArgumentCoder<WebCore::AuthenticatorAttestationResponseData,void>::encode(a1, (JSC::ArrayBuffer **)a2);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,0ul,1ul,2ul>(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 3)
  {
    if (*(_DWORD *)(a2 + 128) == 3)
    {
      return (IPC::Encoder *)IPC::ArgumentCoder<WebCore::AuthenticatorAssertionResponseData,void>::encode(result, (JSC::ArrayBuffer **)a2);
    }
    else
    {
      unint64_t v3 = (IPC::Decoder *)std::__throw_bad_variant_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,void>::decode<IPC::Decoder>(v3, v4);
    }
  }
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::variant<decltype(nullptr),WebCore::AuthenticatorResponseBaseData,WebCore::AuthenticatorAttestationResponseData,WebCore::AuthenticatorAssertionResponseData>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  unint64_t v4 = *((void *)result + 1);
  uint64_t v5 = *(void *)result;
  unint64_t v6 = *((void *)result + 2) - *(void *)result;
  if (v4 <= v6)
  {
LABEL_71:
    unint64_t v31 = 0;
    uint64_t v32 = 0;
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v33 = *((void *)v2 + 3);
    if (v33)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v33 + 16))(v33, v5, v4);
        uint64_t v32 = *(void **)v2;
        unint64_t v31 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v31 = 0;
        uint64_t v32 = 0;
      }
    }
    goto LABEL_72;
  }
  unint64_t v7 = (unsigned char *)(v5 + v6);
  *((void *)result + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v31 = v4;
    uint64_t v32 = 0;
LABEL_72:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)v2 + 3);
    if (result && v31) {
      uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, void *))(*(void *)result + 16))(result, v32);
    }
    goto LABEL_4;
  }
  unsigned int v8 = *v7;
  if (v8 >= 4)
  {
LABEL_4:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 136) = 0;
    return result;
  }
  if (!*v7)
  {
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 128) = 0;
    *(unsigned char *)(a2 + 136) = 1;
    return result;
  }
  if (v8 == 1)
  {
    IPC::Decoder::decode<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>((WTF *)&v42, result);
    IPC::Decoder::decode<std::optional<WebCore::AuthenticationExtensionsClientOutputs>>(&v50, v2);
    if (!*(void *)v2)
    {
      LOBYTE(v45) = 0;
      LOBYTE(v47) = 0;
LABEL_12:
      if (v52) {
        std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v50);
      }
      if ((_BYTE)v43 && v42) {
        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v42);
      }
      if ((_BYTE)v47
        || (char v34 = *(void **)v2,
            uint64_t v35 = *((void *)v2 + 1),
            *(void *)uint64_t v2 = 0,
            *((void *)v2 + 1) = 0,
            (uint64_t v36 = *((void *)v2 + 3)) != 0)
        && v35
        && ((*(void (**)(uint64_t, void *))(*(void *)v36 + 16))(v36, v34), (_BYTE)v47))
      {
        std::__variant_detail::__alt<1ul,WebCore::AuthenticatorResponseBaseData>::__alt[abi:sn180100]<WebCore::AuthenticatorResponseBaseData>(a2, &v45);
        char v12 = 1;
        *(_DWORD *)(a2 + 128) = 1;
      }
      else
      {
        char v12 = 0;
        *(unsigned char *)a2 = 0;
      }
      *(unsigned char *)(a2 + 136) = v12;
      return (IPC::Decoder *)std::__optional_destruct_base<WebCore::AuthenticatorResponseBaseData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v45);
    }
    uint64_t v5 = v43;
    if ((_BYTE)v43)
    {
      uint64_t v9 = v42;
      v42 = 0;
      v63 = v9;
      uint64_t v5 = v52;
      if (v52)
      {
        std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_base[abi:sn180100](v64, (uint64_t)&v50);
        uint64_t v10 = (uint64_t)v63;
        v63 = 0;
        uint64_t v45 = v10;
        std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_base[abi:sn180100](v46, (uint64_t)v64);
        LOBYTE(v47) = 1;
        std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v64);
        uint64_t v11 = v63;
        v63 = 0;
        if (v11) {
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v11);
        }
        goto LABEL_12;
      }
    }
    goto LABEL_70;
  }
  if (v8 == 2)
  {
    IPC::Decoder::decode<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>((WTF *)&v61, result);
    IPC::Decoder::decode<std::optional<WebCore::AuthenticationExtensionsClientOutputs>>(&v63, v2);
    IPC::Decoder::decode<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>((WTF *)&v59, v2);
    IPC::Decoder::decode<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>((WTF *)&v57, v2);
    IPC::Decoder::decode<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v42, (uint64_t *)v2);
    if (!*(void *)v2)
    {
      LOBYTE(v45) = 0;
      char v49 = 0;
      if (v44 && v42) {
        WTF::fastFree(v42, v13);
      }
      goto LABEL_30;
    }
    uint64_t v5 = v62;
    if (v62)
    {
      uint64_t v14 = v61;
      v61 = 0;
      v50 = v14;
      uint64_t v5 = v65;
      if (v65)
      {
        std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_base[abi:sn180100](v51, (uint64_t)&v63);
        uint64_t v5 = v60;
        if (v60)
        {
          int v15 = v59;
          v59 = 0;
          *(void *)&long long v53 = v15;
          uint64_t v5 = v58;
          if (v58)
          {
            uint64_t v16 = v57;
            v57 = 0;
            *((void *)&v53 + 1) = v16;
            uint64_t v5 = v44;
            if (v44)
            {
              uint64_t v17 = v42;
              v42 = 0;
              *((void *)&v54 + 1) = v43;
              uint64_t v18 = (uint64_t)v50;
              *(void *)&long long v54 = v17;
              v50 = 0;
              uint64_t v45 = v18;
              std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_base[abi:sn180100](v46, (uint64_t)v51);
              long long v47 = v53;
              uint64_t v19 = *((void *)&v54 + 1);
              *(void *)&long long v48 = v54;
              long long v54 = 0uLL;
              *((void *)&v48 + 1) = v19;
              char v49 = 1;
              long long v53 = 0uLL;
              std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v51);
              char v20 = v50;
              v50 = 0;
              if (v20) {
                WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v20);
              }
LABEL_30:
              if (v58 && v57) {
                WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v57);
              }
              if (v60 && v59) {
                WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v59);
              }
              if (v65) {
                std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v63);
              }
              if (v62 && v61) {
                WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v61);
              }
              if (v49
                || (unsigned int v21 = *(void **)v2,
                    uint64_t v37 = *((void *)v2 + 1),
                    *(void *)uint64_t v2 = 0,
                    *((void *)v2 + 1) = 0,
                    (uint64_t v38 = *((void *)v2 + 3)) != 0)
                && v37
                && ((*(void (**)(uint64_t, void *))(*(void *)v38 + 16))(v38, v21), v49))
              {
                std::__variant_detail::__alt<2ul,WebCore::AuthenticatorAttestationResponseData>::__alt[abi:sn180100]<WebCore::AuthenticatorAttestationResponseData>(a2, &v45);
                *(_DWORD *)(a2 + 128) = 2;
                char v22 = 1;
              }
              else
              {
                char v22 = 0;
                *(unsigned char *)a2 = 0;
              }
              *(unsigned char *)(a2 + 136) = v22;
              return (IPC::Decoder *)std::__optional_destruct_base<WebCore::AuthenticatorAttestationResponseData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v45, v21);
            }
          }
        }
      }
    }
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  IPC::Decoder::decode<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>((WTF *)&v42, result);
  IPC::Decoder::decode<std::optional<WebCore::AuthenticationExtensionsClientOutputs>>(&v63, v2);
  IPC::Decoder::decode<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>((WTF *)&v61, v2);
  IPC::Decoder::decode<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>((WTF *)&v59, v2);
  IPC::Decoder::decode<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>((WTF *)&v57, v2);
  IPC::Decoder::decode<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>((WTF *)&v55, v2);
  if (!*(void *)v2)
  {
    LOBYTE(v45) = 0;
    char v49 = 0;
    if (!v56) {
      goto LABEL_53;
    }
    uint64_t v29 = v55;
    if (!v55) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  uint64_t v5 = v43;
  if (!(_BYTE)v43) {
    goto LABEL_70;
  }
  uint64_t v23 = v42;
  v42 = 0;
  v50 = v23;
  uint64_t v5 = v65;
  if (!v65) {
    goto LABEL_70;
  }
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_base[abi:sn180100](v51, (uint64_t)&v63);
  uint64_t v5 = v62;
  if (!v62) {
    goto LABEL_70;
  }
  uint64_t v24 = v61;
  v61 = 0;
  *(void *)&long long v53 = v24;
  uint64_t v5 = v60;
  if (!v60) {
    goto LABEL_70;
  }
  char v25 = v59;
  v59 = 0;
  *((void *)&v53 + 1) = v25;
  uint64_t v5 = v58;
  if (!v58) {
    goto LABEL_70;
  }
  uint64_t v26 = v57;
  v57 = 0;
  *(void *)&long long v54 = v26;
  uint64_t v5 = v56;
  if (!v56) {
    goto LABEL_70;
  }
  char v27 = v55;
  v55 = 0;
  uint64_t v28 = (uint64_t)v50;
  *((void *)&v54 + 1) = v27;
  v50 = 0;
  uint64_t v45 = v28;
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_base[abi:sn180100](v46, (uint64_t)v51);
  long long v47 = v53;
  long long v48 = v54;
  char v49 = 1;
  long long v53 = 0u;
  long long v54 = 0u;
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v51);
  uint64_t v29 = v50;
  v50 = 0;
  if (v29) {
LABEL_52:
  }
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v29);
LABEL_53:
  if (v58 && v57) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v57);
  }
  if (v60 && v59) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v59);
  }
  if (v62 && v61) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v61);
  }
  if (v65) {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v63);
  }
  if ((_BYTE)v43 && v42) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v42);
  }
  if (v49
    || (v39 = *(void **)v2,
        uint64_t v40 = *((void *)v2 + 1),
        *(void *)uint64_t v2 = 0,
        *((void *)v2 + 1) = 0,
        (uint64_t v41 = *((void *)v2 + 3)) != 0)
    && v40
    && ((*(void (**)(uint64_t, void *))(*(void *)v41 + 16))(v41, v39), v49))
  {
    std::__variant_detail::__alt<3ul,WebCore::AuthenticatorAssertionResponseData>::__alt[abi:sn180100]<WebCore::AuthenticatorAssertionResponseData>(a2, &v45);
    *(_DWORD *)(a2 + 128) = 3;
    char v30 = 1;
  }
  else
  {
    char v30 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 136) = v30;
  return (IPC::Decoder *)std::__optional_destruct_base<WebCore::AuthenticatorAssertionResponseData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v45);
}

void sub_19892644C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,WTF *a46,uint64_t a47)
{
}

uint64_t std::__optional_destruct_base<WebCore::AuthenticatorResponseBaseData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100](a1 + 8);
    uint64_t v2 = *(WTF::DeferrableRefCountedBase **)a1;
    *(void *)a1 = 0;
    if (v2) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v2);
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::AuthenticatorAttestationResponseData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 128))
  {
    unint64_t v3 = *(WTF **)(a1 + 112);
    if (v3)
    {
      *(void *)(a1 + 112) = 0;
      *(_DWORD *)(a1 + 120) = 0;
      WTF::fastFree(v3, a2);
    }
    unint64_t v4 = *(WTF::DeferrableRefCountedBase **)(a1 + 104);
    *(void *)(a1 + 104) = 0;
    if (v4) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v4);
    }
    uint64_t v5 = *(WTF::DeferrableRefCountedBase **)(a1 + 96);
    *(void *)(a1 + 96) = 0;
    if (v5) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v5);
    }
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100](a1 + 8);
    unint64_t v6 = *(WTF::DeferrableRefCountedBase **)a1;
    *(void *)a1 = 0;
    if (v6) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::AuthenticatorAssertionResponseData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128))
  {
    uint64_t v2 = *(WTF::DeferrableRefCountedBase **)(a1 + 120);
    *(void *)(a1 + 120) = 0;
    if (v2) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v2);
    }
    unint64_t v3 = *(WTF::DeferrableRefCountedBase **)(a1 + 112);
    *(void *)(a1 + 112) = 0;
    if (v3) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v3);
    }
    unint64_t v4 = *(WTF::DeferrableRefCountedBase **)(a1 + 104);
    *(void *)(a1 + 104) = 0;
    if (v4) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v4);
    }
    uint64_t v5 = *(WTF::DeferrableRefCountedBase **)(a1 + 96);
    *(void *)(a1 + 96) = 0;
    if (v5) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v5);
    }
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100](a1 + 8);
    unint64_t v6 = *(WTF::DeferrableRefCountedBase **)a1;
    *(void *)a1 = 0;
    if (v6) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
    }
  }
  return a1;
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::BufferSource>,void>::encode<IPC::Encoder,std::optional<WebCore::BufferSource> const&>(IPC::Encoder *a1, unsigned __int8 *a2)
{
  int v4 = a2[16];
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989268C8);
    }
    unsigned char *result = 1;
    if (a2[16])
    {
      unsigned int v8 = (const void *)WebCore::BufferSource::span((WebCore::BufferSource *)a2);
      return (unsigned char *)IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v8, v7);
    }
    else
    {
      uint64_t v9 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::Decoder::decode<WebCore::AuthenticationExtensionsClientInputs::PRFValues>(v9);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989268E8);
    }
    unsigned char *result = 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::AuthenticationExtensionsClientInputs::PRFValues>(unsigned char *a1, uint64_t *a2)
{
  IPC::Decoder::decode<WebCore::BufferSource>(v16, a2);
  uint64_t result = IPC::Decoder::decode<std::optional<WebCore::BufferSource>>(v12, a2);
  if (!*a2) {
    goto LABEL_20;
  }
  if (!v18
    || (uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v7, (uint64_t)v16), !v15))
  {
    __break(1u);
LABEL_20:
    *a1 = 0;
    a1[40] = 0;
    goto LABEL_10;
  }
  std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100](v9, (uint64_t)v12);
  uint64_t result = std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues>((uint64_t)a1, (uint64_t)v7);
  if (v11)
  {
    if (v10 != -1) {
      uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9B4628[v10])(&v19, v9);
    }
    int v10 = -1;
  }
  if (v8 != -1) {
    uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9B4628[v8])(&v19, v7);
  }
LABEL_10:
  if (v15 && v14 && v13 != -1) {
    uint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9B4628[v13])(v7, v12);
  }
  if (v18 && v17 != -1) {
    uint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9B4628[v17])(v7, v16);
  }
  if (!a1[40])
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result)
    {
      if (v6) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
      }
    }
  }
  return result;
}

void sub_198926A88(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v13);
  if (v14)
  {
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::AuthenticationExtensionsClientInputs::PRFValues>(v10, (uint64_t *)a2);
    char v5 = v12;
    if (v12)
    {
      if (!v14)
      {
        __break(1u);
        return result;
      }
      uint64_t v6 = v13;
      int v13 = 0;
      *(void *)a1 = v6;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 8, (uint64_t)v10);
      std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a1 + 24), (uint64_t)&v11);
      char v5 = 1;
    }
    else
    {
      *(unsigned char *)a1 = 0;
    }
    *(unsigned char *)(a1 + 48) = v5;
    uint64_t result = std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)v10);
    if (v14)
    {
      uint64_t result = v13;
      int v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 48) = 0;
  }
  if (!*(unsigned char *)(a1 + 48))
  {
    uint64_t v8 = *(void *)a2;
    uint64_t v9 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result)
    {
      if (v9) {
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v8);
      }
    }
  }
  return result;
}

void sub_198926C9C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, char a17)
{
  std::__optional_destruct_base<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,false>::~__optional_destruct_base[abi:sn180100](v17, a2);
  _Unwind_Resume(a1);
}

unsigned char *WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = (void *)(*(void *)a1 + 48 * v4);
  uint64_t v7 = *v3;
  *unint64_t v3 = 0;
  *uint64_t v6 = v7;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v6 + 1), (uint64_t)(v3 + 1));
  uint64_t result = std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v5 + 48 * v4 + 24), (uint64_t)(v3 + 3));
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void sub_198926DE4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v18 = v16 + 48 * v15;
  unsigned int v21 = *(_DWORD *)(v18 + 16);
  char v20 = (_DWORD *)(v18 + 16);
  uint64_t v19 = v21;
  if (v21 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9B4628[v19])(&a13, v13);
  }
  *char v20 = -1;
  char v22 = *v14;
  WTF::DeferrableRefCountedBase *v14 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, a2);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0x5555556)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    unsigned int v4 = (WTF::StringImpl *)(*(void *)result + 48 * *(unsigned int *)(result + 12));
    int v5 = 48 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)uint64_t v2 = v6;
    WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    uint64_t v6 = 0;
    do
    {
      unint64_t v7 = (char *)v5 + v6;
      uint64_t v8 = *(void *)((char *)v5 + v6);
      *(void *)((char *)v5 + v6) = 0;
      *(void *)(a3 + v6) = v8;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a3 + v6 + 8, (uint64_t)v5 + v6 + 8);
      std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a3 + v6 + 24), (uint64_t)v5 + v6 + 24);
      if (*((unsigned char *)v5 + v6 + 40))
      {
        uint64_t v10 = *(unsigned int *)((char *)v5 + v6 + 32);
        if (v10 != -1) {
          ((void (*)(char *, char *))off_1EE9B4628[v10])(&v12, v7 + 24);
        }
        *(_DWORD *)((char *)v5 + v6 + 32) = -1;
      }
      uint64_t v11 = *((unsigned int *)v7 + 4);
      if (v11 != -1) {
        ((void (*)(char *, char *))off_1EE9B4628[v11])(&v13, (char *)v5 + v6 + 8);
      }
      *((_DWORD *)v7 + 4) = -1;
      uint64_t result = *(WTF::StringImpl **)v7;
      *(void *)unint64_t v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v6 += 48;
    }
    while (v7 + 48 != (char *)a2);
  }
  return result;
}

void sub_1989270C8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, char a12)
{
  uint64_t v16 = v12 + v13;
  uint64_t v17 = *(unsigned int *)(v12 + v13 + 16);
  if (v17 != -1) {
    (*(void (**)(char *, uint64_t))(v14 + 8 * v17))(&a12, v16 + 8);
  }
  *(_DWORD *)(v16 + 16) = -1;
  uint64_t v18 = *(WTF::StringImpl **)(v12 + v13);
  *(void *)(v12 + v13) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, a2);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(unsigned char *)(a1 + 40))
    {
      uint64_t v3 = *(unsigned int *)(a1 + 32);
      if (v3 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9B4628[v3])(&v7, a1 + 24);
      }
      *(_DWORD *)(a1 + 32) = -1;
    }
    uint64_t v4 = *(unsigned int *)(a1 + 16);
    if (v4 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B4628[v4])(&v8, a1 + 8);
    }
    *(_DWORD *)(a1 + 16) = -1;
    int v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

unsigned int *WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  if (result[2] > this)
  {
    uint64_t v3 = (uint64_t)result;
    unint64_t v4 = result[3];
    if (v4 > this)
    {
      uint64_t result = (unsigned int *)WTF::VectorDestructor<true,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::destruct((uint64_t *)(*(void *)result + 48 * this), (uint64_t *)(*(void *)result + 48 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    int v5 = *(WTF::StringImpl **)v3;
    if (this)
    {
      if (this >= 0x5555556)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v6 = (WTF *)(48 * this);
      uint64_t result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF0) / 0x30;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        uint64_t result = (unsigned int *)WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::move(v5, (WTF::StringImpl *)((char *)v5 + 48 * v4), (uint64_t)result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  uint64_t result = (_DWORD *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (v6)
    {
      *(unsigned char *)uint64_t result = 0;
      return result;
    }
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x198927380);
  }
  if (!v6) {
    goto LABEL_10;
  }
  *(unsigned char *)uint64_t result = 1;
  if (!*(unsigned char *)(a2 + 8))
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_10;
  }

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(IPC::Encoder *a1, uint64_t *a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *((unsigned int *)a2 + 3));
  uint64_t v5 = *((unsigned int *)a2 + 3);
  if (v5)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = v6 + 16 * v5;
    do
    {
      IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)v6);
      unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(v6 + 8));
      v6 += 16;
    }
    while (v6 != v7);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(char **)a2;
    uint64_t v7 = 40 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::PublicKeyCredentialDescriptor,void>::encode(a1, v6);
      v6 += 40;
      v7 -= 40;
    }
    while (v7);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>,void>::encode<IPC::Encoder,std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria> const&>(IPC::Encoder *a1, char *a2)
{
  int v4 = a2[6];
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989275A8);
    }
    unsigned char *result = 1;
    if (!a2[6]) {
      goto LABEL_26;
    }
    int v7 = a2[1];
    char v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (v7)
    {
      if (!v9)
      {
        __break(0xC471u);
        JUMPOUT(0x1989275C8);
      }
      *char v8 = 1;
      if (!a2[1]) {
        goto LABEL_26;
      }
      char v15 = *a2;
      IPC::Encoder::operator<<<BOOL>(a1, &v15);
    }
    else
    {
      if (!v9)
      {
        __break(0xC471u);
        JUMPOUT(0x198927628);
      }
      *char v8 = 0;
    }
    int v10 = a2[3];
    uint64_t v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v10)
    {
      if (!v12)
      {
        __break(0xC471u);
        JUMPOUT(0x198927648);
      }
      unsigned char *v11 = 0;
      goto LABEL_18;
    }
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x1989275E8);
    }
    unsigned char *v11 = 1;
    if (a2[3])
    {
      char v16 = a2[2];
      IPC::Encoder::operator<<<BOOL>(a1, &v16);
LABEL_18:
      IPC::Encoder::operator<<<BOOL>(a1, a2 + 4);
      char v14 = a2[5];
      return (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, &v14);
    }
LABEL_26:
    uint64_t v13 = std::__throw_bad_optional_access[abi:sn180100]();
    return (unsigned char *)IPC::ArgumentCoder<std::optional<WebCore::AuthenticationExtensionsClientInputs>,void>::encode<IPC::Encoder,std::optional<WebCore::AuthenticationExtensionsClientInputs>&>(v13);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x198927608);
  }
  unsigned char *result = 0;
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::AuthenticationExtensionsClientInputs>,void>::encode<IPC::Encoder,std::optional<WebCore::AuthenticationExtensionsClientInputs>&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 144);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198927714);
    }
    goto LABEL_31;
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19892785CLL);
  }
  unsigned char *result = 1;
  if (!*(unsigned char *)(a2 + 144)) {
    goto LABEL_41;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  int v7 = *(unsigned __int8 *)(a2 + 56);
  char v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v7)
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x19892787CLL);
    }
    *char v8 = 1;
    if (!*(unsigned char *)(a2 + 56)) {
      goto LABEL_41;
    }
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
    IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 24));
    IPC::ArgumentCoder<std::optional<WebCore::BufferSource>,void>::encode<IPC::Encoder,std::optional<WebCore::BufferSource> const&>(a1, (unsigned __int8 *)(a2 + 32));
  }
  else
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1989278FCLL);
    }
    *char v8 = 0;
  }
  int v10 = *(unsigned __int8 *)(a2 + 136);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v10)
  {
    if (!v11)
    {
      __break(0xC471u);
      JUMPOUT(0x1989277A8);
    }
    goto LABEL_31;
  }
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x19892789CLL);
  }
  unsigned char *result = 1;
  if (!*(unsigned char *)(a2 + 136)) {
    goto LABEL_41;
  }
  int v12 = *(unsigned __int8 *)(a2 + 104);
  uint64_t v13 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v12)
  {
    if (!v14)
    {
      __break(0xC471u);
      JUMPOUT(0x1989278BCLL);
    }
    *uint64_t v13 = 1;
    if (!*(unsigned char *)(a2 + 104)) {
      goto LABEL_41;
    }
    IPC::ArgumentCoder<WebCore::AuthenticationExtensionsClientInputs::PRFValues,void>::encode(a1, (WebCore::BufferSource *)(a2 + 64));
  }
  else
  {
    if (!v14)
    {
      __break(0xC471u);
      JUMPOUT(0x19892791CLL);
    }
    *uint64_t v13 = 0;
  }
  int v15 = *(unsigned __int8 *)(a2 + 128);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v15)
  {
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x19892793CLL);
    }
LABEL_31:
    unsigned char *result = 0;
    return result;
  }
  if (!v16)
  {
    __break(0xC471u);
    JUMPOUT(0x1989278DCLL);
  }
  unsigned char *result = 1;
  if (!*(unsigned char *)(a2 + 128))
  {
LABEL_41:
    uint64_t v20 = std::__throw_bad_optional_access[abi:sn180100]();
    return (unsigned char *)IPC::Decoder::decode<WebCore::PublicKeyCredentialCreationOptions::Parameters>(v20);
  }
  unint64_t result = (unsigned char *)IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 124));
  unsigned int v17 = *(_DWORD *)(a2 + 124);
  if (v17)
  {
    uint64_t v18 = *(uint64_t **)(a2 + 112);
    uint64_t v19 = &v18[6 * v17];
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v18);
      unint64_t result = IPC::ArgumentCoder<WebCore::AuthenticationExtensionsClientInputs::PRFValues,void>::encode(a1, (WebCore::BufferSource *)(v18 + 1));
      v18 += 6;
    }
    while (v18 != v19);
  }
  return result;
}

unint64_t IPC::Decoder::decode<WebCore::PublicKeyCredentialCreationOptions::Parameters>(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::UserStyleLevel>(a2);
  unint64_t result = IPC::Decoder::decode<long long>((IPC::Decoder *)a2);
  if (*a2)
  {
    if (v4 > 0xFFu && v6)
    {
      *(unsigned char *)a1 = v4;
      *(void *)(a1 + 8) = result;
      *(unsigned char *)(a1 + 16) = 1;
      return result;
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v7 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = a2[3];
  if (result) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t v9 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v9();
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    uint64_t v2 = result;
    if (result[3] > a2) {
      result[3] = a2;
    }
    unint64_t result = *(unsigned int **)result;
    if (a2)
    {
      v2[2] = a2;
      unint64_t result = (unsigned int *)WTF::fastRealloc((WTF *)result, (void *)(16 * a2));
      *(void *)uint64_t v2 = result;
    }
    else if (result)
    {
      *(void *)uint64_t v2 = 0;
      v2[2] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, 0);
    }
  }
  return result;
}

WTF *IPC::Decoder::decode<WebCore::PublicKeyCredentialDescriptor>(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::UserStyleLevel>(a2);
  IPC::Decoder::decode<WebCore::BufferSource>(v17, a2);
  unint64_t result = IPC::Decoder::decode<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v15, a2);
  if (*a2)
  {
    if (v4 > 0xFFu)
    {
      v10[0] = v4;
      if (v19)
      {
        unint64_t result = (WTF *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v11, (uint64_t)v17);
        if (v16)
        {
          uint64_t v13 = v15[0];
          uint64_t v14 = v15[1];
          *(unsigned char *)a1 = v10[0];
          unint64_t result = (WTF *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 8, (uint64_t)&v11);
          *(void *)(a1 + 24) = v13;
          uint64_t v7 = v14;
          uint64_t v13 = 0;
          uint64_t v14 = 0;
          *(void *)(a1 + 32) = v7;
          *(unsigned char *)(a1 + 40) = 1;
          if (v12 != -1) {
            unint64_t result = (WTF *)((uint64_t (*)(char *, uint64_t *))off_1EE9B4628[v12])(&v20, &v11);
          }
          goto LABEL_7;
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (v16)
  {
    unint64_t result = v15[0];
    if (v15[0]) {
      unint64_t result = (WTF *)WTF::fastFree(v15[0], v6);
    }
  }
LABEL_7:
  if (v19 && v18 != -1) {
    unint64_t result = (WTF *)((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9B4628[v18])(v10, v17);
  }
  if (!*(unsigned char *)(a1 + 40))
  {
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = (WTF *)a2[3];
    if (result)
    {
      if (v9) {
        return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(void *)result + 16))(result, v8);
      }
    }
  }
  return result;
}

void sub_198927C24(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, WTF *a12, int a13, WTF *a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,int a21,int a22,int a23,char a24)
{
  std::__optional_destruct_base<WebCore::PublicKeyCredentialDescriptor,false>::~__optional_destruct_base[abi:sn180100](v24, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PublicKeyCredentialDescriptor>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 40 * *(unsigned int *)(a1 + 12);
  *(unsigned char *)uint64_t v4 = *(unsigned char *)v3;
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor(v4 + 8, v3 + 8);
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  uint64_t v6 = *(void *)(v3 + 24);
  *(void *)(v3 + 24) = 0;
  *(void *)(v4 + 24) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 32);
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v4 + 32) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 36);
  *(_DWORD *)(v3 + 36) = 0;
  *(_DWORD *)(v4 + 36) = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x198927EB4);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = (WTF *)(*(void *)a1 + 40 * *(unsigned int *)(a1 + 12));
    int v5 = 40 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::PublicKeyCredentialDescriptor>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF *WTF::VectorMover<false,WebCore::PublicKeyCredentialDescriptor>::move(WTF *result, WTF *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v15 = v3;
    uint64_t v16 = v4;
    unint64_t v7 = result;
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = a3 + v8;
      unint64_t v10 = (char *)v7 + v8;
      *(unsigned char *)(a3 + v8) = *((unsigned char *)v7 + v8);
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a3 + v8 + 8, (uint64_t)v7 + v8 + 8);
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      uint64_t v12 = *(void *)((char *)v7 + v8 + 24);
      *((void *)v10 + 3) = 0;
      *(void *)(v9 + 24) = v12;
      LODWORD(v12) = *(_DWORD *)((char *)v7 + v8 + 32);
      *((_DWORD *)v10 + 8) = 0;
      *(_DWORD *)(v9 + 32) = v12;
      LODWORD(v12) = *(_DWORD *)((char *)v7 + v8 + 36);
      *((_DWORD *)v10 + 9) = 0;
      *(_DWORD *)(v9 + 36) = v12;
      uint64_t result = *(WTF **)((char *)v7 + v8 + 24);
      if (result)
      {
        *((void *)v10 + 3) = 0;
        *((_DWORD *)v10 + 8) = 0;
        uint64_t result = (WTF *)WTF::fastFree(result, v11);
      }
      uint64_t v13 = *((unsigned int *)v10 + 4);
      if (v13 != -1) {
        uint64_t result = (WTF *)((uint64_t (*)(char *, char *))off_1EE9B4628[v13])(&v14, (char *)v7 + v8 + 8);
      }
      *((_DWORD *)v10 + 4) = -1;
      v8 += 40;
    }
    while ((WTF *)((char *)v7 + v8) != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::PublicKeyCredentialDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(WTF **)(a1 + 24);
    if (v3)
    {
      *(void *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      WTF::fastFree(v3, a2);
    }
    uint64_t v4 = *(unsigned int *)(a1 + 16);
    if (v4 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B4628[v4])(&v6, a1 + 8);
    }
    *(_DWORD *)(a1 + 16) = -1;
  }
  return a1;
}

void WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t this)
{
  if (*(unsigned int *)(a1 + 8) > this)
  {
    unint64_t v4 = *(unsigned int *)(a1 + 12);
    if (v4 > this)
    {
      WTF::VectorDestructor<true,WebCore::PublicKeyCredentialDescriptor>::destruct((WebCore::PublicKeyCredentialDescriptor *)(*(void *)a1 + 40 * this), (WebCore::PublicKeyCredentialDescriptor *)(*(void *)a1 + 40 * v4));
      *(_DWORD *)(a1 + 12) = this;
      LODWORD(v4) = this;
    }
    int v5 = *(WTF **)a1;
    if (this)
    {
      if (this >= 0x6666667)
      {
        __break(0xC471u);
        return;
      }
      char v6 = (WTF *)(40 * this);
      uint64_t v7 = WTF::fastMalloc(v6);
      *(_DWORD *)(a1 + 8) = (v6 & 0xFFFFFFF8) / 0x28;
      *(void *)a1 = v7;
      if ((WTF *)v7 != v5) {
        WTF::VectorMover<false,WebCore::PublicKeyCredentialDescriptor>::move(v5, (WTF *)((char *)v5 + 40 * v4), v7);
      }
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, (void *)this);
    }
  }
}

unint64_t IPC::ArgumentCoder<std::span<unsigned short const,18446744073709551615ul>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, const void *a2, uint64_t a3)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a3);
  if (a3)
  {
    uint64_t v7 = (void *)IPC::Encoder::grow(a1, 2uLL, 2 * a3);
    if (v8 < 2 * a3)
    {
      unint64_t result = 831;
      __break(0xC471u);
    }
    else
    {
      return (unint64_t)memcpy(v7, a2, 2 * a3);
    }
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 56 * v5;
    do
    {
      unsigned __int8 v8 = *(_DWORD *)(v6 + 52);
      IPC::Encoder::operator<<<BOOL>(a1, (char *)&v8);
      unint64_t result = IPC::ArgumentCoder<std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath>,void>::encode<IPC::Encoder,std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(a1, v6, v8);
      v6 += 56;
      v7 -= 56;
    }
    while (v7);
  }
  return result;
}

WTF *IPC::VectorArgumentCoder<false,WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a1[1];
  unint64_t v6 = *a1;
  unint64_t v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v21 = 0;
    unint64_t v22 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v23 = a1[3];
    if (v23)
    {
      if (v5)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v23 + 16))(v23, v6, v5);
        unint64_t v22 = *a1;
        unint64_t v21 = a1[1];
      }
      else
      {
        unint64_t v21 = 0;
        unint64_t v22 = 0;
      }
    }
    goto LABEL_28;
  }
  uint64_t v9 = (unint64_t *)(v6 + v7);
  a1[2] = (unint64_t)(v9 + 1);
  if (!v6)
  {
    unint64_t v21 = v5;
    unint64_t v22 = 0;
LABEL_28:
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (WTF *)a1[3];
    if (result)
    {
      if (v21) {
        unint64_t result = (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(void *)result + 16))(result, v22);
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return result;
  }
  unint64_t v10 = *v9;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  if (v10 >= 0x4924) {
    goto LABEL_30;
  }
  if (!v10)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
LABEL_18:
    uint64_t v37 = 0;
    *(void *)a3 = v16;
    HIDWORD(v38) = 0;
    *(void *)(a3 + 8) = v17;
    goto LABEL_19;
  }
  LODWORD(v38) = 56 * (int)v10 / 0x38u;
  uint64_t v37 = (WTF *)WTF::fastMalloc((WTF *)(56 * v10));
  while (1)
  {
    IPC::ArgumentCoder<std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath>,void>::decode<IPC::Decoder>(a1, (uint64_t)v48);
    if (!v49)
    {
      a2 = (void *)*a1;
      unint64_t v19 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v20 = a1[3];
      if (!v20) {
        goto LABEL_24;
      }
      if (v19) {
        (*(void (**)(unint64_t, void *))(*(void *)v20 + 16))(v20, a2);
      }
    }
    if (*a1) {
      break;
    }
    unint64_t v33 = a1[3];
    unint64_t v34 = a1[1];
    LOBYTE(v39) = 0;
    char v43 = 0;
    *a1 = 0;
    a1[1] = 0;
    if (!v33) {
      goto LABEL_25;
    }
    if (!v34) {
      goto LABEL_25;
    }
    (*(void (**)(unint64_t, void))(*(void *)v33 + 16))(v33, 0);
    if (!v43) {
      goto LABEL_25;
    }
LABEL_14:
    if (HIDWORD(v38) == v38)
    {
      WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PathSegment>((uint64_t)&v37, (unint64_t)&v39);
    }
    else
    {
      int v11 = HIDWORD(v38) + 1;
      uint64_t v12 = (char *)v37 + 56 * HIDWORD(v38);
      long long v14 = v40;
      long long v13 = v41;
      long long v15 = v39;
      *((void *)v12 + 6) = v42;
      *((_OWORD *)v12 + 1) = v14;
      *((_OWORD *)v12 + 2) = v13;
      *(_OWORD *)uint64_t v12 = v15;
      HIDWORD(v38) = v11;
    }
    if (!--v10)
    {
      uint64_t v16 = v37;
      uint64_t v17 = v38;
      goto LABEL_18;
    }
  }
  if (v49)
  {
    WebCore::PathSegment::PathSegment();
    long long v39 = v44;
    long long v40 = v45;
    long long v41 = v46;
    uint64_t v42 = v47;
    char v43 = 1;
    goto LABEL_14;
  }
LABEL_38:
  __break(1u);
LABEL_39:
  a2 = (void *)*a1;
  unint64_t v31 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  unint64_t v32 = a1[3];
  if (!v32)
  {
LABEL_24:
    *a1 = 0;
    a1[1] = 0;
LABEL_25:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    goto LABEL_20;
  }
  if (v31) {
    (*(void (**)(unint64_t, void *))(*(void *)v32 + 16))(v32, a2);
  }
  while (1)
  {
    if (*a1)
    {
      if (!v49) {
        goto LABEL_38;
      }
      WebCore::PathSegment::PathSegment();
      long long v39 = v44;
      long long v40 = v45;
      long long v41 = v46;
      uint64_t v42 = v47;
      char v43 = 1;
    }
    else
    {
      unint64_t v35 = a1[3];
      unint64_t v36 = a1[1];
      LOBYTE(v39) = 0;
      char v43 = 0;
      *a1 = 0;
      a1[1] = 0;
      if (!v35) {
        goto LABEL_25;
      }
      if (!v36) {
        goto LABEL_25;
      }
      (*(void (**)(unint64_t, void))(*(void *)v35 + 16))(v35, 0);
      if (!v43) {
        goto LABEL_25;
      }
    }
    if (HIDWORD(v38) == v38)
    {
      WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PathSegment>((uint64_t)&v37, (unint64_t)&v39);
    }
    else
    {
      int v24 = HIDWORD(v38) + 1;
      char v25 = (char *)v37 + 56 * HIDWORD(v38);
      long long v27 = v40;
      long long v26 = v41;
      long long v28 = v39;
      *((void *)v25 + 6) = v42;
      *((_OWORD *)v25 + 1) = v27;
      *((_OWORD *)v25 + 2) = v26;
      *(_OWORD *)char v25 = v28;
      HIDWORD(v38) = v24;
    }
    if (!--v10) {
      break;
    }
LABEL_30:
    IPC::ArgumentCoder<std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath>,void>::decode<IPC::Decoder>(a1, (uint64_t)v48);
    if (!v49) {
      goto LABEL_39;
    }
  }
  WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v37, HIDWORD(v38));
  uint64_t v29 = v37;
  uint64_t v37 = 0;
  *(void *)a3 = v29;
  uint64_t v30 = v38;
  HIDWORD(v38) = 0;
  *(void *)(a3 + 8) = v30;
LABEL_19:
  *(unsigned char *)(a3 + 16) = 1;
LABEL_20:
  unint64_t result = v37;
  if (v37)
  {
    uint64_t v37 = 0;
    LODWORD(v38) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void sub_1989286B4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PathSegment>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 56 * *(unsigned int *)(a1 + 12);
  long long v5 = *(_OWORD *)v3;
  long long v6 = *(_OWORD *)(v3 + 16);
  long long v7 = *(_OWORD *)(v3 + 32);
  *(void *)(v4 + 48) = *(void *)(v3 + 48);
  *(_OWORD *)(v4 + 16) = v6;
  *(_OWORD *)(v4 + 32) = v7;
  *(_OWORD *)uint64_t v4 = v5;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 56 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x4924925)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unint64_t v3 = *(WTF **)result;
      uint64_t v4 = *(unsigned int *)(result + 12);
      unsigned int v5 = 56 * a2;
      unint64_t result = WTF::fastMalloc((WTF *)(56 * a2));
      *(_DWORD *)(v2 + 8) = v5 / 0x38;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        uint64_t v7 = 56 * v4;
        unint64_t v8 = v3;
        do
        {
          long long v9 = *(_OWORD *)v8;
          long long v10 = *((_OWORD *)v8 + 1);
          long long v11 = *((_OWORD *)v8 + 2);
          *(void *)(result + 48) = *((void *)v8 + 6);
          *(_OWORD *)(result + 16) = v10;
          *(_OWORD *)(result + 32) = v11;
          *(_OWORD *)unint64_t result = v9;
          result += 56;
          unint64_t v8 = (WTF *)((char *)v8 + 56);
          v7 -= 56;
        }
        while (v7);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(unsigned int *)(result + 12);
    if (v3 > a2)
    {
      *(_DWORD *)(result + 12) = a2;
      LODWORD(v3) = a2;
    }
    uint64_t v4 = *(WTF **)result;
    if (a2)
    {
      if (a2 >= 0x4924925)
      {
        __break(0xC471u);
        return result;
      }
      unsigned int v5 = 56 * a2;
      unint64_t result = WTF::fastMalloc((WTF *)(56 * a2));
      *(_DWORD *)(v2 + 8) = v5 / 0x38;
      *(void *)uint64_t v2 = result;
      if (v3 && (WTF *)result != v4)
      {
        uint64_t v6 = 56 * v3;
        uint64_t v7 = v4;
        do
        {
          long long v8 = *(_OWORD *)v7;
          long long v9 = *((_OWORD *)v7 + 1);
          long long v10 = *((_OWORD *)v7 + 2);
          *(void *)(result + 48) = *((void *)v7 + 6);
          *(_OWORD *)(result + 16) = v9;
          *(_OWORD *)(result + 32) = v10;
          *(_OWORD *)unint64_t result = v8;
          result += 56;
          uint64_t v7 = (WTF *)((char *)v7 + 56);
          v6 -= 56;
        }
        while (v6);
      }
    }
    if (v4)
    {
      if (*(WTF **)v2 == v4)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(__int16 **)a2;
    uint64_t v7 = *(void *)a2 + 16 * v5;
    long long v8 = v6;
    do
    {
      __int16 v9 = *v8;
      v8 += 8;
      IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, v9);
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v6 + 1);
      uint64_t v6 = v8;
    }
    while (v8 != (__int16 *)v7);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = &v6[2 * v5];
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v6);
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v6 + 1);
      v6 += 2;
    }
    while (v6 != v7);
  }
  return result;
}

IPC::Decoder *IPC::Decoder::decode<WebCore::HTTPHeaderMap::CommonHeader>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = (*((void *)a2 + 2) + 1) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 < v7 || v6 - v7 <= 1)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v16 = *((void *)a2 + 3);
    if (v16)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
        uint64_t v15 = *(void *)a2;
        unint64_t v14 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_13;
  }
  __int16 v9 = (unsigned __int16 *)(v5 + v7);
  *((void *)a2 + 2) = v9 + 1;
  if (!v5)
  {
    unint64_t v14 = v6;
    uint64_t v15 = 0;
LABEL_13:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v17 = *((void *)a2 + 3);
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v15, v14);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_14:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v18 = *((void *)a2 + 3);
    if (v18 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v5);
    }
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v22);
    if (!*(void *)a2) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  unsigned int v10 = *v9;
  if (v10 >= 0x5F) {
    goto LABEL_14;
  }
  unint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v22);
  if (!*(void *)a2) {
    goto LABEL_17;
  }
  if (v23)
  {
    long long v13 = v22;
    *(_WORD *)a1 = v10;
    *(void *)(a1 + 8) = v13;
    *(unsigned char *)(a1 + 16) = 1;
    return result;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (v23)
  {
    unint64_t v21 = v22;
    unint64_t v22 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v12);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
  }
  uint64_t v19 = *(void *)a2;
  uint64_t v20 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (IPC::Decoder *)*((void *)a2 + 3);
  if (result)
  {
    if (v20) {
      return (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v19);
    }
  }
  return result;
}

void sub_198928CD8(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::HTTPHeaderMap::CommonHeader,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTTPHeaderMap::CommonHeader>(uint64_t a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  int v5 = v4 + 1;
  uint64_t v6 = *(void *)a1 + 16 * v4;
  *(_WORD *)uint64_t v6 = *(_WORD *)result;
  uint64_t v7 = *(void *)(result + 8);
  *(void *)(result + 8) = 0;
  *(void *)(v6 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

unint64_t WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 6) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 6;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 6) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 6;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 28))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(WTF **)result;
    uint64_t v5 = *(unsigned int *)(result + 12);
    uint64_t v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    if (v5)
    {
      unint64_t v8 = (WTF *)((char *)v4 + 16 * v5);
      unint64_t v9 = v4;
      do
      {
        *(_WORD *)uint64_t v6 = *(_WORD *)v9;
        uint64_t v10 = *((void *)v9 + 1);
        *((void *)v9 + 1) = 0;
        *(void *)(v6 + 8) = v10;
        uint64_t v11 = v6;
        WebCore::ExceptionData::~ExceptionData(v9);
        unint64_t v9 = (WTF *)((char *)v9 + 16);
        uint64_t v6 = v11 + 16;
      }
      while (v9 != v8);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::HTTPHeaderMap::CommonHeader,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    unint64_t v2 = *(unsigned int *)(result + 12);
    if (v2 > a2)
    {
      uint64_t v3 = result;
      unint64_t v4 = a2;
      WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::CommonHeader>::destruct((WebCore::ExceptionData *)(*(void *)result + 16 * a2), (WebCore::ExceptionData *)(*(void *)result + 16 * v2));
      a2 = v4;
      unint64_t result = v3;
      *(_DWORD *)(v3 + 12) = v4;
      LODWORD(v2) = v4;
    }
    uint64_t v5 = *(WTF **)result;
    if (a2)
    {
      uint64_t v6 = *(WTF **)result;
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v7 = result;
      int v8 = a2;
      uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2));
      unint64_t result = v7;
      *(_DWORD *)(v7 + 8) = v8;
      *(void *)uint64_t v7 = v9;
      uint64_t v5 = v6;
      if (v2 && (WTF *)v9 != v6)
      {
        uint64_t v10 = (WTF *)((char *)v6 + 16 * v2);
        uint64_t v11 = v6;
        do
        {
          *(_WORD *)uint64_t v9 = *(_WORD *)v11;
          uint64_t v12 = *((void *)v11 + 1);
          *((void *)v11 + 1) = 0;
          *(void *)(v9 + 8) = v12;
          WebCore::ExceptionData::~ExceptionData(v11);
          uint64_t v5 = v6;
          unint64_t result = v7;
          uint64_t v11 = (WebCore::ExceptionData *)((char *)v11 + 16);
          v9 += 16;
        }
        while (v11 != v10);
      }
    }
    if (v5)
    {
      if (*(WTF **)result == v5)
      {
        *(void *)unint64_t result = 0;
        *(_DWORD *)(result + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::HTTPHeaderMap::UncommonHeader>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v11);
  unint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v9);
  uint64_t v6 = *(void *)a2;
  if (*(void *)a2)
  {
    if (v12)
    {
      uint64_t v7 = v11;
      uint64_t v11 = 0;
      if (v10)
      {
        int v8 = v9;
        *(void *)a1 = v7;
        *(void *)(a1 + 8) = v8;
        *(unsigned char *)(a1 + 16) = 1;
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (v10)
  {
    unint64_t result = v9;
    uint64_t v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_5:
  if (v12)
  {
    unint64_t result = v11;
    uint64_t v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (!v6) {
    return (WTF::StringImpl *)IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void sub_198929144(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::HTTPHeaderMap::UncommonHeader,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t *WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTTPHeaderMap::UncommonHeader>(uint64_t a1, unint64_t a2)
{
  unint64_t result = (uint64_t *)WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  int v5 = v4 + 1;
  uint64_t v6 = (void *)(*(void *)a1 + 16 * v4);
  uint64_t v7 = *result;
  uint64_t *result = 0;
  *uint64_t v6 = v7;
  uint64_t v8 = result[1];
  result[1] = 0;
  v6[1] = v8;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

unint64_t WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v8 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v8 + 1 > a2) {
      a2 = v8 + 1;
    }
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 + 1 > a2) {
      a2 = v7 + 1;
    }
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 28))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(WTF **)result;
    uint64_t v5 = *(unsigned int *)(result + 12);
    uint64_t v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    if (v5)
    {
      unint64_t v8 = (void *)v6;
      uint64_t v9 = v4;
      do
      {
        uint64_t v10 = *(void *)v9;
        *(void *)uint64_t v9 = 0;
        *unint64_t v8 = v10;
        uint64_t v11 = *((void *)v9 + 1);
        *((void *)v9 + 1) = 0;
        v8[1] = v11;
        WebCore::HTTPHeaderMap::UncommonHeader::~UncommonHeader(v9);
        uint64_t v9 = (WTF *)(v12 + 16);
        v8 += 2;
      }
      while (v9 != (WTF *)((char *)v4 + 16 * v5));
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::HTTPHeaderMap::UncommonHeader,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

void WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) > a2)
  {
    unint64_t v4 = *(unsigned int *)(a1 + 12);
    if (v4 > a2)
    {
      WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::UncommonHeader>::destruct((WebCore::HTTPHeaderMap::UncommonHeader *)(*(void *)a1 + 16 * a2), (WebCore::HTTPHeaderMap::UncommonHeader *)(*(void *)a1 + 16 * v4));
      *(_DWORD *)(a1 + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF **)a1;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v6 = (WTF *)WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = a2;
      *(void *)a1 = v6;
      if (v4 && v6 != v5)
      {
        unint64_t v7 = (WTF *)((char *)v5 + 16 * v4);
        unint64_t v8 = v5;
        do
        {
          uint64_t v9 = *(void *)v8;
          *(void *)unint64_t v8 = 0;
          *(void *)uint64_t v6 = v9;
          uint64_t v10 = *((void *)v8 + 1);
          *((void *)v8 + 1) = 0;
          *((void *)v6 + 1) = v10;
          uint64_t v11 = v6;
          WebCore::HTTPHeaderMap::UncommonHeader::~UncommonHeader(v8);
          unint64_t v8 = (WTF *)((char *)v8 + 16);
          uint64_t v6 = (WTF *)((char *)v11 + 16);
        }
        while (v8 != v7);
      }
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, (void *)a2);
    }
  }
}

unsigned char *IPC::ArgumentCoder<WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6) {
    goto LABEL_8;
  }
  unsigned char *result = v4 == 0;
  if (!v4) {
    return result;
  }
  if (!*a2)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x19892954CLL);
  }

  return (unsigned char *)IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, a2);
}

unint64_t IPC::ArgumentCoder<WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits>,void>::decode<IPC::Decoder>(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      uint64_t v17 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        a1 = v17;
        uint64_t v12 = *v17;
        unint64_t v11 = v17[1];
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_13;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = (uint64_t)(v4 + 1);
  if (!v2)
  {
    unint64_t v11 = v1;
    uint64_t v12 = 0;
LABEL_13:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v14 = a1[3];
    if (v14)
    {
      uint64_t v16 = a1;
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        a1 = v16;
        uint64_t v2 = *v16;
        unint64_t v1 = v16[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_14;
  }
  unsigned int v5 = *v4;
  if (v5 < 2)
  {
    if (v5)
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
    }
    else
    {
      uint64_t v8 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
      unint64_t v7 = v8 & 0xFFFFFFFFFFFFFF00;
      if (v9) {
        uint64_t v6 = v8;
      }
      else {
        uint64_t v6 = 0;
      }
      if (!v9) {
        unint64_t v7 = 0;
      }
    }
    return v7 | v6;
  }
LABEL_14:
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v15 = a1[3];
  if (v15)
  {
    if (v1) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v2);
    }
    uint64_t v6 = 0;
    unint64_t v7 = 0;
  }
  return v7 | v6;
}

uint64_t IPC::ArgumentCoder<WebCore::ResourceRequestRequester,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      uint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        uint64_t v9 = *v12;
        unint64_t v8 = v12[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
    goto LABEL_7;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v8 = v1;
    uint64_t v9 = 0;
LABEL_7:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11 && v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
    }
    goto LABEL_8;
  }
  unsigned int v5 = *v4;
  if (v5 >= 0xA)
  {
LABEL_8:
    unsigned int v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  int v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t std::__optional_destruct_base<WebCore::ResourceRequestBase::RequestData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 152))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 128, a2);
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(a1 + 112));
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(a1 + 96));
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 88);
    *(void *)(a1 + 88) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    unsigned int v5 = *(WTF::StringImpl **)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    int v6 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v3);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::ArgumentCoder<WebCore::ResourceErrorBaseType,void>::decode<IPC::Decoder>(void *a1)
{
  __int16 v3 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v3);
  if (v3 >= 5u || HIBYTE(v3) == 0) {
    return 0;
  }
  else {
    return v3 | 0x100u;
  }
}

void IPC::ArgumentCoder<WTF::RetainPtr<NSError>,void>::decode<NSError,NSError*>(uint64_t a1, const void ***a2)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v4 = (const void *)objc_opt_class();
  cf[0] = v4;
  if (v4) {
    CFRetain(v4);
  }
  WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v7, cf, 1);
  WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=(a2 + 7, &v7);
  IPC::decodeRequiringAllowedClasses<NSError,NSError*>(a1, (IPC::Decoder *)a2);
  if (v7) {
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(v7, v5);
  }
  CFTypeRef v6 = cf[0];
  cf[0] = 0;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1989299D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::ResourceError::IPCData>,void>::encode<IPC::Encoder,std::optional<WebCore::ResourceError::IPCData>>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (*(unsigned char *)(a2 + 24))
    {
      return IPC::ArgumentCoder<WebCore::ResourceError::IPCData,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::Decoder::decode<WebCore::ResourceError::IPCData>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

void IPC::Decoder::decode<WebCore::ResourceError::IPCData>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<WebCore::ResourceError::IPCData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a1 + 24))
  {
    IPC::Decoder::markInvalid(a2);
  }
}

unsigned char *IPC::ArgumentCoder<std::optional<float>,void>::encode<IPC::Encoder,std::optional<float> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 4);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198929B74);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 4))
    {
      float v7 = *(float *)a2;
      return (unsigned char *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v7);
    }
    else
    {
      uint64_t v8 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::VectorArgumentCoder<false,WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198929B94);
    }
    unsigned char *result = 0;
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = 40 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebCore::GrammarDetail,void>::encode(a1, v6);
      v6 += 5;
      v7 -= 40;
    }
    while (v7);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v23 = 0;
  int v24 = 0;
  if (result >= 0x6666)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::GrammarDetail>(a1, (uint64_t)&v17);
      if (!v22) {
        break;
      }
      if (HIDWORD(v24) == v24)
      {
        WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GrammarDetail>((uint64_t)&v23, (unint64_t)&v17);
      }
      else
      {
        uint64_t v13 = v23 + 40 * HIDWORD(v24);
        *(_OWORD *)uint64_t v13 = v17;
        *(void *)(v13 + 16) = 0;
        *(void *)(v13 + 24) = 0;
        uint64_t v14 = v18;
        uint64_t v18 = 0;
        *(void *)(v13 + 16) = v14;
        LODWORD(v14) = v19;
        int v19 = 0;
        *(_DWORD *)(v13 + 24) = v14;
        LODWORD(v14) = v20;
        int v20 = 0;
        *(_DWORD *)(v13 + 28) = v14;
        uint64_t v15 = v21;
        uint64_t v21 = 0;
        *(void *)(v13 + 32) = v15;
        ++HIDWORD(v24);
      }
      std::__optional_destruct_base<WebCore::GrammarDetail,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17, v7);
      if (!--v6)
      {
        WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v23, HIDWORD(v24));
        *(void *)a2 = v23;
        uint64_t v16 = v24;
        uint64_t v23 = 0;
        int v24 = 0;
        *(void *)(a2 + 8) = v16;
        goto LABEL_14;
      }
    }
  }
  else
  {
    if (!result)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
LABEL_13:
      uint64_t v23 = 0;
      int v24 = 0;
      *(void *)a2 = v11;
      *(void *)(a2 + 8) = v12;
LABEL_14:
      *(unsigned char *)(a2 + 16) = 1;
      return WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v5);
    }
    LODWORD(v24) = 40 * (int)result / 0x28u;
    uint64_t v23 = WTF::fastMalloc((WTF *)(40 * result));
    while (1)
    {
      IPC::Decoder::decode<WebCore::GrammarDetail>(a1, (uint64_t)&v17);
      if (!v22) {
        break;
      }
      if (HIDWORD(v24) == v24)
      {
        WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GrammarDetail>((uint64_t)&v23, (unint64_t)&v17);
      }
      else
      {
        uint64_t v8 = v23 + 40 * HIDWORD(v24);
        *(_OWORD *)uint64_t v8 = v17;
        *(void *)(v8 + 16) = 0;
        *(void *)(v8 + 24) = 0;
        uint64_t v9 = v18;
        uint64_t v18 = 0;
        *(void *)(v8 + 16) = v9;
        LODWORD(v9) = v19;
        int v19 = 0;
        *(_DWORD *)(v8 + 24) = v9;
        LODWORD(v9) = v20;
        int v20 = 0;
        *(_DWORD *)(v8 + 28) = v9;
        uint64_t v10 = v21;
        uint64_t v21 = 0;
        *(void *)(v8 + 32) = v10;
        ++HIDWORD(v24);
      }
      std::__optional_destruct_base<WebCore::GrammarDetail,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17, v7);
      if (!--v6)
      {
        uint64_t v11 = v23;
        uint64_t v12 = v24;
        goto LABEL_13;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  std::__optional_destruct_base<WebCore::GrammarDetail,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17, v7);
  return WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v5);
}

void sub_198929E1C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__optional_destruct_base<WebCore::GrammarDetail,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, v16);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::GrammarDetail>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::GrammarDetail,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 40))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198929EBC(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::GrammarDetail,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GrammarDetail>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 40 * *(unsigned int *)(a1 + 12);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v3;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  uint64_t v5 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  *(void *)(v4 + 16) = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v4 + 24) = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 28);
  *(_DWORD *)(v3 + 28) = 0;
  *(_DWORD *)(v4 + 28) = v5;
  uint64_t v6 = *(void *)(v3 + 32);
  *(void *)(v3 + 32) = 0;
  *(void *)(v4 + 32) = v6;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x19892A0B4);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)a1 + 40 * *(unsigned int *)(a1 + 12));
    int v5 = 40 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::GrammarDetail>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebCore::GrammarDetail>::move(uint64_t result, WTF::StringImpl *a2, uint64_t a3)
{
  if ((WTF::StringImpl *)result != a2)
  {
    uint64_t v5 = result + 16;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)(v5 - 16);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v6 = *(void *)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)(a3 + 16) = v6;
      LODWORD(v6) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(a3 + 24) = v6;
      LODWORD(v6) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(a3 + 28) = v6;
      uint64_t v7 = *(void *)(v5 + 16);
      *(void *)(v5 + 16) = 0;
      *(void *)(a3 + 32) = v7;
      unint64_t v8 = *(WTF::StringImpl **)(v5 + 16);
      *(void *)(v5 + 16) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, a2);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      uint64_t v9 = v5 - 16;
      unint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      v5 += 40;
      a3 += 40;
    }
    while ((WTF::StringImpl *)(v9 + 40) != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::GrammarDetail,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    unint64_t v3 = *(WTF::StringImpl **)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
  }
  return a1;
}

unsigned int *WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  if (result[2] > this)
  {
    uint64_t v3 = (uint64_t)result;
    unint64_t v4 = result[3];
    if (v4 > this)
    {
      unint64_t result = (unsigned int *)WTF::VectorDestructor<true,WebCore::GrammarDetail>::destruct(*(void *)result + 40 * this, (WTF::StringImpl *)(*(void *)result + 40 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    uint64_t v5 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x6666667)
      {
        __break(0xC471u);
        JUMPOUT(0x19892A2CCLL);
      }
      uint64_t v6 = (WTF *)(40 * this);
      unint64_t result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF8) / 0x28;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        unint64_t result = (unsigned int *)WTF::VectorMover<false,WebCore::GrammarDetail>::move((uint64_t)v5, (WTF *)((char *)v5 + 40 * v4), (uint64_t)result);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

uint64_t WTF::VectorDestructor<true,WebCore::GrammarDetail>::destruct(uint64_t result, WTF::StringImpl *a2)
{
  if ((WTF::StringImpl *)result != a2)
  {
    uint64_t v3 = result + 16;
    do
    {
      unint64_t v4 = *(WTF::StringImpl **)(v3 + 16);
      *(void *)(v3 + 16) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      unint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
      uint64_t v5 = (WTF::StringImpl *)(v3 + 24);
      v3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::GrammarDetail>::destruct(*(void *)a1, (WTF::StringImpl *)(*(void *)a1 + 40 * v3));
  }
  unint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL> const&>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a2 + 40))
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_8:
    IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL> const&,0ul>(a1, a2, a3);
    return;
  }
  size_t v3 = *(unsigned int *)(a2 + 12);
  unint64_t v4 = *(const void **)a2;

  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v4, v3);
}

void IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL> const&,0ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 40) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
    }
    else
    {
      size_t v3 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
      IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,void>::decode<IPC::Decoder>(v3, v4);
    }
  }
}

void IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,void>::decode<IPC::Decoder>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      uint64_t v13 = v2;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v5, v4);
        uint64_t v2 = v13;
        uint64_t v10 = *v13;
        unint64_t v9 = v13[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_14;
  }
  uint64_t v7 = (unsigned char *)(v5 + v6);
  a1[2] = v7 + 1;
  if (!v5)
  {
    unint64_t v9 = v4;
    uint64_t v10 = 0;
LABEL_14:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v12 = v2[3];
    if (v12 && v9) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
    }
    goto LABEL_15;
  }
  if (*v7 >= 2u)
  {
LABEL_15:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  if (*v7)
  {
    IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,void>::decode<IPC::Decoder,0ul>(a2, (IPC::Decoder *)a1);
  }
  else
  {
    IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a1, v14);
    char v8 = v15;
    if (v15)
    {
      *(void *)a2 = v14[0];
      *(void *)(a2 + 8) = v14[1];
      *(_DWORD *)(a2 + 40) = 0;
      char v8 = 1;
    }
    else
    {
      *(unsigned char *)a2 = 0;
    }
    *(unsigned char *)(a2 + 48) = v8;
  }
}

void IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,void>::decode<IPC::Decoder,0ul>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::URL>(a2, v5);
  if (v6)
  {
    WTF::URL::URL(a1, (uint64_t *)v5);
    *(_DWORD *)(a1 + 40) = 1;
    *(unsigned char *)(a1 + 48) = 1;
    if (v6)
    {
      unint64_t v4 = v5[0];
      v5[0] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, v3);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 48) = 0;
  }
}

void sub_19892A628(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::IntConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::IntConstraint> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 48);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19892A728);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 48))
    {
      char v8 = *(unsigned char *)(a2 + 8);
      IPC::Encoder::operator<<<BOOL>(a1, &v8);
      IPC::ArgumentCoder<std::optional<WebCore::PackedColor::RGBA>,void>::encode<IPC::Encoder,std::optional<WebCore::PackedColor::RGBA>>(a1, a2 + 12);
      IPC::ArgumentCoder<std::optional<WebCore::PackedColor::RGBA>,void>::encode<IPC::Encoder,std::optional<WebCore::PackedColor::RGBA>>(a1, a2 + 20);
      IPC::ArgumentCoder<std::optional<WebCore::PackedColor::RGBA>,void>::encode<IPC::Encoder,std::optional<WebCore::PackedColor::RGBA>>(a1, a2 + 28);
      return IPC::ArgumentCoder<std::optional<WebCore::PackedColor::RGBA>,void>::encode<IPC::Encoder,std::optional<WebCore::PackedColor::RGBA>>(a1, a2 + 36);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<std::optional<WebCore::DoubleConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::DoubleConstraint> const&>(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19892A748);
    }
    unsigned char *result = 0;
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::DoubleConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::DoubleConstraint> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 80);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19892A818);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 80))
    {
      char v8 = *(unsigned char *)(a2 + 8);
      IPC::Encoder::operator<<<BOOL>(a1, &v8);
      IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 16);
      IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 32);
      IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 48);
      return IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 64);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<std::optional<WebCore::BooleanConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::BooleanConstraint> const&>(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19892A838);
    }
    unsigned char *result = 0;
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::BooleanConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::BooleanConstraint> const&>(IPC::Encoder *a1, unsigned char *a2)
{
  int v4 = a2[16];
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19892A8F0);
    }
    unsigned char *result = 1;
    if (a2[16])
    {
      char v8 = a2[8];
      IPC::Encoder::operator<<<BOOL>(a1, &v8);
      IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 9);
      return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 11);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<std::optional<WebCore::StringConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::StringConstraint> const&>(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19892A910);
    }
    unsigned char *result = 0;
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebCore::StringConstraint>,void>::encode<IPC::Encoder,std::optional<WebCore::StringConstraint> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 48);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19892A9C8);
    }
    *uint64_t v5 = 1;
    if (*(unsigned char *)(a2 + 48))
    {
      char v9 = *(unsigned char *)(a2 + 8);
      IPC::Encoder::operator<<<BOOL>(a1, &v9);
      IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 16);
      IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 32);
    }
    else
    {
      uint64_t v7 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> const&>(v7, v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19892A9E8);
    }
    *uint64_t v5 = 0;
  }
}

void IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unsigned __int8 v4 = *(_DWORD *)(a2 + 40);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v4);
  IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> const&>(a1, a2, v4);
}

void IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> const&>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a2 + 40))
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_8:
    IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> const&,0ul>(a1, a2, a3);
    return;
  }
  size_t v3 = *(unsigned int *)(a2 + 12);
  unsigned __int8 v4 = *(const void **)a2;

  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v4, v3);
}

void IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> const&,0ul>(IPC::Encoder *this, uint64_t a2, uint64_t a3)
{
  if (a3 != 2)
  {
    if (a3 != 1) {
      return;
    }
    if (*(_DWORD *)(a2 + 40) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, (uint64_t *)a2);
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(this, *(void *)(a2 + 8));
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(this, *(void *)(a2 + 16));
      IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(this, a2 + 24);
      return;
    }
LABEL_12:
    uint64_t v5 = (unsigned char *)std::__throw_bad_variant_access[abi:sn180100]();
    IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::decode<IPC::Decoder>(v5, v6);
    return;
  }
  if (*(_DWORD *)(a2 + 40) != 2) {
    goto LABEL_12;
  }

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, (uint64_t *)a2);
}

void IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  unsigned __int16 v4 = IPC::Decoder::decode<unsigned char>(a2);
  if (v4 < 0x100u || v4 >= 3u)
  {
    *a1 = 0;
    a1[48] = 0;
  }
  else
  {
    IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::decode<IPC::Decoder>((uint64_t)a1, a2, v4);
  }
}

void IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::decode<IPC::Decoder>(uint64_t a1, IPC::Decoder *a2, uint64_t a3)
{
  if (a3)
  {
    IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::decode<IPC::Decoder,0ul>(a1, a2, a3);
  }
  else
  {
    IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v5);
    char v4 = v6;
    if (v6)
    {
      *(void *)a1 = v5[0];
      *(void *)(a1 + 8) = v5[1];
      *(_DWORD *)(a1 + 40) = 0;
      char v4 = 1;
    }
    else
    {
      *(unsigned char *)a1 = 0;
    }
    *(unsigned char *)(a1 + 48) = v4;
  }
}

void IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::decode<IPC::Decoder,0ul>(uint64_t a1, IPC::Decoder *a2, uint64_t a3)
{
  if (a3 == 1)
  {
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v25);
    unint64_t v5 = IPC::Decoder::decode<long long>(a2);
    char v7 = v6;
    unint64_t v8 = IPC::Decoder::decode<long long>(a2);
    char v10 = v9;
    IPC::Decoder::decode<std::optional<WTF::WallTime>>((uint64_t *)a2, &v29);
    LODWORD(v12) = v26;
    if (!*(void *)a2) {
      goto LABEL_18;
    }
    if ((_BYTE)v26)
    {
      uint64_t v12 = v25;
      char v25 = 0;
      if (v7)
      {
        if (v10 && BYTE8(v30))
        {
          uint64_t v13 = v29;
          char v14 = v30;
          *(void *)a1 = v12;
          *(void *)(a1 + 8) = v5;
          *(void *)(a1 + 16) = v8;
          *(void *)(a1 + 24) = v13;
          *(unsigned char *)(a1 + 32) = v14;
          char v15 = 1;
          *(_DWORD *)(a1 + 40) = 1;
LABEL_8:
          *(unsigned char *)(a1 + 48) = v15;
          return;
        }
      }
    }
LABEL_17:
    __break(1u);
LABEL_18:
    if (v12)
    {
      int v24 = v25;
      char v25 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v11);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
    }
    uint64_t v18 = *(WTF::StringImpl **)a2;
    uint64_t v19 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v20 = *((void *)a2 + 3);
    if (v20)
    {
      if (v19) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v20 + 16))(v20, v18);
      }
    }
    char v15 = 0;
    *(unsigned char *)a1 = 0;
    goto LABEL_8;
  }
  if (a3 != 2) {
    goto LABEL_27;
  }
  IPC::Decoder::decode<WTF::URL>(a2, &v29);
  uint64_t v11 = *(WTF::StringImpl **)a2;
  LODWORD(v12) = v32;
  if (!*(void *)a2)
  {
    if (v32)
    {
      uint64_t v21 = v29;
      uint64_t v29 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, 0);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
    }
    uint64_t v22 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v23 = *((void *)a2 + 3);
    if (v23 && v22) {
      (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
    }
LABEL_27:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 48) = 0;
    return;
  }
  if (!v32) {
    goto LABEL_17;
  }
  char v25 = v29;
  long long v26 = v30;
  long long v27 = v31;
  char v28 = 1;
  WTF::URL::URL(a1, (uint64_t *)&v25);
  *(_DWORD *)(a1 + 40) = 2;
  *(unsigned char *)(a1 + 48) = 1;
  if (v28)
  {
    long long v17 = v25;
    char v25 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
}

void sub_19892AE94(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::reinsert(uint64_t a1, int *a2)
{
  int v3 = *a2;
  if (a1) {
    int v4 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v4 = 0;
  }
  int v5 = 0;
  unsigned int v6 = 9 * ((v3 + ~(v3 << 15)) ^ ((v3 + ~(v3 << 15)) >> 10));
  unsigned int v7 = ((v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11)) ^ (((v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11)) >> 16);
  do
  {
    uint64_t v8 = v7 & v4;
    unsigned int v7 = ++v5 + v8;
  }
  while (*(_DWORD *)(a1 + (v8 << 6)));
  uint64_t v9 = a1 + (v8 << 6);
  char v10 = *(const void **)(v9 + 40);
  *(void *)(v9 + 40) = 0;
  if (v10)
  {
    CFRelease(v10);
    int v3 = *a2;
  }
  *(_DWORD *)uint64_t v9 = v3;
  long long v11 = *(_OWORD *)(a2 + 2);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 6);
  *(_OWORD *)(v9 + 8) = v11;
  uint64_t v12 = *((void *)a2 + 5);
  *((void *)a2 + 5) = 0;
  *(void *)(v9 + 40) = v12;
  *(_OWORD *)(v9 + 48) = *((_OWORD *)a2 + 3);
  return v9;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = v6 + 32 * v5;
    do
    {
      IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, v6);
      unint64_t result = IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, v6 + 16);
      v6 += 32;
    }
    while (v6 != v7);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (result >= 0x8000)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::PlatformTimeRanges::Range>((uint64_t)&v19, a1);
      if (!v21) {
        break;
      }
      int v14 = HIDWORD(v23);
      if (HIDWORD(v23) == v23)
      {
        char v15 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::TextRectAndRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v22, HIDWORD(v23) + 1, (unint64_t)&v19);
        int v14 = HIDWORD(v23);
        uint64_t v16 = (_OWORD *)((char *)v22 + 32 * HIDWORD(v23));
        long long v17 = v15[1];
        _OWORD *v16 = *v15;
      }
      else
      {
        uint64_t v16 = (_OWORD *)((char *)v22 + 32 * HIDWORD(v23));
        long long v17 = v20;
        _OWORD *v16 = v19;
      }
      v16[1] = v17;
      HIDWORD(v23) = v14 + 1;
      if (!--v6)
      {
        WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v22, (v14 + 1));
        *(void *)a2 = v22;
        uint64_t v18 = v23;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        *(void *)(a2 + 8) = v18;
        goto LABEL_14;
      }
    }
  }
  else
  {
    if (!result)
    {
      int v12 = 0;
      int v13 = 0;
      uint64_t v9 = 0;
LABEL_13:
      uint64_t v22 = 0;
      *(void *)a2 = v9;
      HIDWORD(v23) = 0;
      *(_DWORD *)(a2 + 8) = v13;
      *(_DWORD *)(a2 + 12) = v12;
LABEL_14:
      *(unsigned char *)(a2 + 16) = 1;
      goto LABEL_21;
    }
    LODWORD(v23) = result;
    uint64_t v22 = (WTF *)WTF::fastMalloc((WTF *)(32 * result));
    while (1)
    {
      IPC::Decoder::decode<WebCore::PlatformTimeRanges::Range>((uint64_t)&v19, a1);
      if (!v21) {
        break;
      }
      int v7 = HIDWORD(v23);
      if (HIDWORD(v23) == v23)
      {
        uint64_t v8 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::TextRectAndRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v22, HIDWORD(v23) + 1, (unint64_t)&v19);
        int v7 = HIDWORD(v23);
        uint64_t v9 = v22;
        char v10 = (_OWORD *)((char *)v22 + 32 * HIDWORD(v23));
        long long v11 = v8[1];
        _OWORD *v10 = *v8;
      }
      else
      {
        uint64_t v9 = v22;
        char v10 = (_OWORD *)((char *)v22 + 32 * HIDWORD(v23));
        long long v11 = v20;
        _OWORD *v10 = v19;
      }
      v10[1] = v11;
      int v12 = v7 + 1;
      HIDWORD(v23) = v12;
      if (!--v6)
      {
        int v13 = v23;
        goto LABEL_13;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
LABEL_21:
  unint64_t result = (unint64_t)v22;
  if (v22)
  {
    uint64_t v22 = 0;
    LODWORD(v23) = 0;
    return WTF::fastFree((WTF *)result, v5);
  }
  return result;
}

void sub_19892B1C4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16)
{
  if (a15) {
    WTF::fastFree(a15, a2);
  }
  _Unwind_Resume(exception_object);
}

int64_t IPC::Decoder::decode<WebCore::PlatformTimeRanges::Range>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::MediaTime>(a2, (uint64_t)v12);
  int64_t result = IPC::Decoder::decode<WTF::MediaTime>(a2, (uint64_t)v10);
  if (*(void *)a2)
  {
    if (v13)
    {
      *(void *)&long long v8 = v12[0];
      *(void *)((char *)&v8 + 5) = *(void *)((char *)v12 + 5);
      if (v11)
      {
        *(void *)&long long v9 = v10[0];
        *(void *)((char *)&v9 + 5) = *(void *)((char *)v10 + 5);
        *(_OWORD *)a1 = v8;
        *(_OWORD *)(a1 + 16) = v9;
        *(unsigned char *)(a1 + 32) = 1;
        return result;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  int64_t result = *((void *)a2 + 3);
  if (result) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v7();
  }
  return result;
}

uint64_t WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    int v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      *(_DWORD *)(result + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF **)result;
    if (a2)
    {
      if (a2 >> 27)
      {
        __break(0xC471u);
        return result;
      }
      int64_t result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v4 && (WTF *)result != v5)
      {
        uint64_t v6 = 32 * v4;
        int v7 = v5;
        do
        {
          long long v8 = *(_OWORD *)v7;
          long long v9 = *((_OWORD *)v7 + 1);
          int v7 = (WTF *)((char *)v7 + 32);
          *(_OWORD *)int64_t result = v8;
          *(_OWORD *)(result + 16) = v9;
          result += 32;
          v6 -= 32;
        }
        while (v6);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    int v7 = &v6[2 * v5];
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v6);
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v6 + 1);
      v6 += 2;
    }
    while (v6 != v7);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  long long v26 = 0;
  uint64_t v27 = 0;
  if (result >= 0x10000)
  {
    do
    {
      IPC::Decoder::decode<WebCore::DataListSuggestion>((uint64_t)&v23, a1);
      if (!v25) {
        goto LABEL_20;
      }
      if (HIDWORD(v27) == v27)
      {
        WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::DataListSuggestion>((unsigned int *)&v26, (unint64_t)&v23);
      }
      else
      {
        int v14 = HIDWORD(v27) + 1;
        char v15 = (void *)((char *)v26 + 16 * HIDWORD(v27));
        uint64_t v16 = v23;
        uint64_t v23 = 0;
        *char v15 = v16;
        uint64_t v17 = v24;
        uint64_t v24 = 0;
        v15[1] = v17;
        HIDWORD(v27) = v14;
      }
      unint64_t result = std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v23, v7);
      --v6;
    }
    while (v6);
    uint64_t v18 = HIDWORD(v27);
    long long v19 = v26;
    if (v27 > HIDWORD(v27))
    {
      long long v20 = v26;
      if (HIDWORD(v27))
      {
        if (HIDWORD(v27) >> 28)
        {
          __break(0xC471u);
          return result;
        }
        char v21 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v27)));
        LODWORD(v27) = v18;
        long long v26 = v21;
        long long v20 = v19;
        if (v21 != v19)
        {
          WTF::VectorMover<false,WebCore::HTTPHeaderField>::move(v19, (WTF::StringImpl *)((char *)v19 + 16 * v18), (WTF::StringImpl **)v21);
          long long v20 = v26;
        }
      }
      if (v19)
      {
        if (v20 == v19)
        {
          long long v26 = 0;
          LODWORD(v27) = 0;
        }
        WTF::fastFree(v19, v5);
        long long v19 = v26;
      }
      else
      {
        long long v19 = v20;
      }
    }
    *(void *)a2 = v19;
    uint64_t v22 = v27;
    long long v26 = 0;
    uint64_t v27 = 0;
    *(void *)(a2 + 8) = v22;
    goto LABEL_14;
  }
  if (result)
  {
    LODWORD(v27) = result;
    long long v26 = (WTF *)WTF::fastMalloc((WTF *)(16 * result));
    while (1)
    {
      IPC::Decoder::decode<WebCore::DataListSuggestion>((uint64_t)&v23, a1);
      if (!v25) {
        break;
      }
      if (HIDWORD(v27) == v27)
      {
        WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::DataListSuggestion>((unsigned int *)&v26, (unint64_t)&v23);
      }
      else
      {
        int v8 = HIDWORD(v27) + 1;
        long long v9 = (void *)((char *)v26 + 16 * HIDWORD(v27));
        uint64_t v10 = v23;
        uint64_t v23 = 0;
        void *v9 = v10;
        uint64_t v11 = v24;
        uint64_t v24 = 0;
        v9[1] = v11;
        HIDWORD(v27) = v8;
      }
      std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v23, v7);
      if (!--v6)
      {
        int v12 = v26;
        uint64_t v13 = v27;
        goto LABEL_13;
      }
    }
LABEL_20:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v23, v7);
  }
  else
  {
    int v12 = 0;
    uint64_t v13 = 0;
LABEL_13:
    long long v26 = 0;
    uint64_t v27 = 0;
    *(void *)a2 = v12;
    *(void *)(a2 + 8) = v13;
LABEL_14:
    *(unsigned char *)(a2 + 16) = 1;
  }
  return WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v5);
}

void sub_19892B634(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::DataListSuggestion>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v13);
  unint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v11);
  uint64_t v6 = *(void *)a2;
  if (*(void *)a2)
  {
    if (v14)
    {
      uint64_t v7 = v13;
      uint64_t v13 = 0;
      if (v12)
      {
        uint64_t v8 = v11;
        *(void *)a1 = v7;
        *(void *)(a1 + 8) = v8;
        *(unsigned char *)(a1 + 16) = 1;
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (v12)
  {
    unint64_t result = v11;
    uint64_t v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_5:
  if (v14)
  {
    unint64_t result = v13;
    uint64_t v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (v6) {
          return result;
        }
        goto LABEL_18;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v6) {
    return result;
  }
LABEL_18:
  uint64_t v9 = *(void *)a2;
  uint64_t v10 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result)
  {
    if (v10) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v9);
    }
  }
  return result;
}

void sub_19892B78C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100](v12, a2);
  _Unwind_Resume(a1);
}

uint64_t *WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::DataListSuggestion>(unsigned int *a1, unint64_t a2)
{
  unint64_t result = (uint64_t *)WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = a1[3];
  unsigned int v5 = v4 + 1;
  uint64_t v6 = (void *)(*(void *)a1 + 16 * v4);
  uint64_t v7 = *result;
  uint64_t *result = 0;
  *uint64_t v6 = v7;
  uint64_t v8 = result[1];
  result[1] = 0;
  v6[1] = v8;
  a1[3] = v5;
  return result;
}

unint64_t WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      uint64_t v4 = *(WTF::StringImpl **)result;
      uint64_t v5 = (WTF::StringImpl *)(*(void *)result + 16 * *((unsigned int *)result + 3));
      uint64_t v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(16 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *(void *)unint64_t v3 = v6;
      unint64_t result = WTF::VectorMover<false,WebCore::HTTPHeaderField>::move(v4, v5, v6);
      if (v4)
      {
        if (*(WTF::StringImpl **)v3 == v4)
        {
          *(void *)unint64_t v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (WTF::StringImpl *)WTF::fastFree(v4, v7);
      }
    }
  }
  return result;
}

unsigned int *IPC::ArgumentCoder<std::variant<WTF::String,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::encode<IPC::Encoder,std::variant<WTF::String,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&>(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<WTF::String,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::encode<IPC::Encoder,std::variant<WTF::String,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&,0ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 8))
  {
    a1 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WTF::String,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::encode<IPC::Encoder,std::variant<WTF::String,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&,0ul>(a1, a2, a3);
  }

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((IPC::Encoder *)a1, (uint64_t *)a2);
}

unsigned int *IPC::ArgumentCoder<std::variant<WTF::String,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::encode<IPC::Encoder,std::variant<WTF::String,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>> const&,0ul>(unsigned int *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 8) == 1)
    {
      unint64_t v3 = *(atomic_uint **)a2;
      return IPC::ArgumentCoder<WebCore::SharedBuffer,void>::encode((IPC::Encoder *)result, v3);
    }
    else
    {
      uint64_t v4 = std::__throw_bad_variant_access[abi:sn180100]();
      return (unsigned int *)IPC::VectorArgumentCoder<false,WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v4);
    }
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 32 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebCore::PasteboardCustomData::Entry,void>::encode(a1, v6);
      v6 += 32;
      v7 -= 32;
    }
    while (v7);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  long long v19 = 0;
  uint64_t v20 = 0;
  if (result >= 0x8000)
  {
    do
    {
      IPC::Decoder::decode<WebCore::PasteboardCustomData::Entry>(v17, a1);
      if (!v18) {
        goto LABEL_20;
      }
      if (HIDWORD(v20) == v20)
      {
        WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PasteboardCustomData::Entry>((unsigned int *)&v19, (unint64_t)v17);
      }
      else
      {
        WebCore::PasteboardCustomData::Entry::Entry();
        ++HIDWORD(v20);
      }
      unint64_t result = std::__optional_destruct_base<WebCore::PasteboardCustomData::Entry,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v11);
      --v6;
    }
    while (v6);
    uint64_t v12 = HIDWORD(v20);
    uint64_t v13 = v19;
    if (v20 > HIDWORD(v20))
    {
      char v14 = v19;
      if (HIDWORD(v20))
      {
        if (HIDWORD(v20) >> 27)
        {
          __break(0xC471u);
          return result;
        }
        char v15 = (WTF *)WTF::fastMalloc((WTF *)(32 * HIDWORD(v20)));
        LODWORD(v20) = v12;
        long long v19 = v15;
        char v14 = v13;
        if (v15 != v13)
        {
          WTF::VectorMover<false,WebCore::PasteboardCustomData::Entry>::move(v13, (WTF::StringImpl *)((char *)v13 + 32 * v12), (uint64_t)v15);
          char v14 = v19;
        }
      }
      if (v13)
      {
        if (v14 == v13)
        {
          long long v19 = 0;
          LODWORD(v20) = 0;
        }
        WTF::fastFree(v13, v5);
        uint64_t v13 = v19;
      }
      else
      {
        uint64_t v13 = v14;
      }
    }
    *(void *)a2 = v13;
    uint64_t v16 = v20;
    long long v19 = 0;
    uint64_t v20 = 0;
    *(void *)(a2 + 8) = v16;
    goto LABEL_14;
  }
  if (result)
  {
    LODWORD(v20) = result;
    long long v19 = (WTF *)WTF::fastMalloc((WTF *)(32 * result));
    while (1)
    {
      IPC::Decoder::decode<WebCore::PasteboardCustomData::Entry>(v17, a1);
      if (!v18) {
        break;
      }
      if (HIDWORD(v20) == v20)
      {
        WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PasteboardCustomData::Entry>((unsigned int *)&v19, (unint64_t)v17);
      }
      else
      {
        WebCore::PasteboardCustomData::Entry::Entry();
        ++HIDWORD(v20);
      }
      std::__optional_destruct_base<WebCore::PasteboardCustomData::Entry,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v8);
      if (!--v6)
      {
        unint64_t v9 = v19;
        uint64_t v10 = v20;
        goto LABEL_13;
      }
    }
LABEL_20:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    std::__optional_destruct_base<WebCore::PasteboardCustomData::Entry,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v7);
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
LABEL_13:
    long long v19 = 0;
    uint64_t v20 = 0;
    *(void *)a2 = v9;
    *(void *)(a2 + 8) = v10;
LABEL_14:
    *(unsigned char *)(a2 + 16) = 1;
  }
  return WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v5);
}

void sub_19892BC6C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::__optional_destruct_base<WebCore::PasteboardCustomData::Entry,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebCore::PasteboardCustomData::Entry>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v32);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v30);
  unint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *(WTF::StringImpl **)a2;
  unint64_t v6 = *((void *)a2 + 2) - *(void *)a2;
  if (v4 <= v6) {
    goto LABEL_45;
  }
  uint64_t v7 = (char *)v5 + v6;
  *((void *)a2 + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v16 = v4;
    uint64_t v17 = 0;
    goto LABEL_46;
  }
  if (*v7 < 2u)
  {
    if (*v7)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a2, (uint64_t)&v23);
      int v11 = v24;
      if ((_BYTE)v24)
      {
        uint64_t v27 = v23;
        int v11 = 1;
        int v28 = 1;
        goto LABEL_14;
      }
    }
    else
    {
      IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v23);
      int v11 = v24;
      if ((_BYTE)v24)
      {
        uint64_t v27 = v23;
        int v28 = 0;
        int v11 = 1;
        goto LABEL_14;
      }
    }
    LOBYTE(v27) = 0;
LABEL_14:
    unsigned __int8 v29 = v11;
    if (!v11) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  while (1)
  {
    LOBYTE(v27) = 0;
    unsigned __int8 v29 = 0;
LABEL_5:
    uint64_t v8 = *(WTF::StringImpl **)a2;
    uint64_t v9 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v10 = *((void *)a2 + 3);
    if (v10 && v9) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v10 + 16))(v10, v8);
    }
LABEL_15:
    if (!*(void *)a2)
    {
      *a1 = 0;
      a1[32] = 0;
      goto LABEL_29;
    }
    uint64_t v5 = (WTF::StringImpl *)v33;
    if (v33)
    {
      uint64_t v5 = (WTF::StringImpl *)v31;
      if (v31)
      {
        uint64_t v5 = (WTF::StringImpl *)v29;
        if (v29) {
          break;
        }
      }
    }
    __break(1u);
LABEL_45:
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v18 = *((void *)a2 + 3);
    if (v18)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v18 + 16))(v18, v5, v4);
        uint64_t v17 = *(WTF::StringImpl **)a2;
        unint64_t v16 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
      }
    }
LABEL_46:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v19 = *((void *)a2 + 3);
    if (v19 && v16) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v19 + 16))(v19, v17);
    }
  }
  WebCore::PasteboardCustomData::Entry::Entry();
  WebCore::PasteboardCustomData::Entry::Entry();
  a1[32] = 1;
  if (v26 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v26])(&v34, &v25);
  }
  int v26 = -1;
  uint64_t v12 = v24;
  uint64_t v24 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v8);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = v23;
  uint64_t v23 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v8);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
LABEL_29:
  if (v29 && v28 != -1) {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v28])(&v23, &v27);
  }
  if (v31)
  {
    char v14 = v30;
    long long v30 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v8);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  if (v33)
  {
    char v15 = v32;
    unsigned __int8 v32 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v8);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
  if (!a1[32])
  {
    uint64_t v20 = *(WTF::StringImpl **)a2;
    uint64_t v21 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v22 = *((void *)a2 + 3);
    if (v22)
    {
      if (v21) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v22 + 16))(v22, v20);
      }
    }
  }
}

void sub_19892BFE8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, int a12, int a13, char a14, int a15, int a16, int a17, char a18, WTF::StringImpl *a19, char a20)
{
  std::__optional_destruct_base<WebCore::PasteboardCustomData::Entry,false>::~__optional_destruct_base[abi:sn180100](v20, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PasteboardCustomData::Entry>(unsigned int *a1, unint64_t a2)
{
  WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t result = WebCore::PasteboardCustomData::Entry::Entry();
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x19892C2B0);
    }
    unint64_t v3 = result;
    unint64_t v4 = *(WTF::StringImpl **)result;
    uint64_t v5 = (WTF::StringImpl *)(*(void *)result + 32 * *((unsigned int *)result + 3));
    uint64_t v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *((_DWORD *)v3 + 2) = v2;
    *(void *)unint64_t v3 = v6;
    uint64_t result = WTF::VectorMover<false,WebCore::PasteboardCustomData::Entry>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)v3 == v4)
      {
        *(void *)unint64_t v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v4, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::PasteboardCustomData::Entry>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v12 = v3;
    uint64_t v13 = v4;
    unint64_t v7 = result;
    do
    {
      WebCore::PasteboardCustomData::Entry::Entry();
      uint64_t v9 = *((unsigned int *)v7 + 6);
      if (v9 != -1) {
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v9])(&v11, (char *)v7 + 16);
      }
      *((_DWORD *)v7 + 6) = -1;
      unint64_t v10 = (WTF::StringImpl *)*((void *)v7 + 1);
      *((void *)v7 + 1) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v8);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      uint64_t result = *(WTF::StringImpl **)v7;
      *(void *)unint64_t v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      a3 += 32;
      unint64_t v7 = (WTF::StringImpl *)((char *)v7 + 32);
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::PasteboardCustomData::Entry,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 24);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v3])(&v7, a1 + 16);
    }
    *(_DWORD *)(a1 + 24) = -1;
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t *WTF::Ref<WebCore::DecomposedGlyphs,WTF::RawPtrTraits<WebCore::DecomposedGlyphs>,WTF::DefaultRefDerefTraits<WebCore::DecomposedGlyphs>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    char v5 = 0;
    uint64_t v6 = *(void *)(v3 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5) {
      MEMORY[0x19972E8D0](v6);
    }
    int v7 = 1;
    uint64_t v8 = *(void *)(v6 + 8) - 1;
    *(void *)(v6 + 8) = v8;
    if (v8)
    {
      uint64_t v9 = 0;
      BOOL v10 = 1;
    }
    else
    {
      uint64_t v11 = *(void *)(v6 + 16);
      uint64_t v9 = *(void *)(v6 + 24);
      *(void *)(v6 + 24) = 0;
      BOOL v10 = v11 != 0;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      uint64_t v12 = v8;
      uint64_t v13 = v9;
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
      uint64_t v8 = v12;
      uint64_t v9 = v13;
    }
    if (!v8)
    {
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      if (!v10) {
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  return a1;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  unsigned int v5 = *(_DWORD *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(unsigned char **)a2;
    uint64_t v7 = 944 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebCore::MediaTrackConstraintSetMap,void>::encode(a1, v6);
      v6 += 944;
      v7 -= 944;
    }
    while (v7);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaTrackConstraintSetMap>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t result = WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(*(void *)a1 + 944 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 944 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x456C7A)
    {
      __break(0xC471u);
      JUMPOUT(0x19892C730);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = *(void *)a1 + 944 * *(unsigned int *)(a1 + 12);
    int v5 = 944 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(944 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x3B0;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::MediaTrackConstraintSetMap>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebCore::MediaTrackConstraintSetMap>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(a3, v5);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5 + 728, v6);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5 + 672, v7);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5 + 616, v8);
      uint64_t result = std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5 + 560, v9);
      a3 += 944;
      v5 += 944;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      uint64_t result = WTF::VectorDestructor<true,WebCore::MediaTrackConstraintSetMap>::destruct(*(void *)result + 944 * a2, (char *)(*(void *)result + 944 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF **)v3;
    if (a2)
    {
      if (a2 >= 0x456C7A)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v6 = (WTF *)(944 * a2);
      uint64_t result = WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF0) / 0x3B0;
      *(void *)uint64_t v3 = result;
      if ((WTF *)result != v5) {
        uint64_t result = WTF::VectorMover<false,WebCore::MediaTrackConstraintSetMap>::move((uint64_t)v5, (uint64_t)v5 + 944 * v4, result);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

WebCore::Region *WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!*a1)
  {
    int v3 = 0;
    int v4 = 0;
LABEL_3:
    unsigned int v5 = 8;
    goto LABEL_4;
  }
  int v3 = *(_DWORD *)(v2 - 4);
  int v4 = *(_DWORD *)(v2 - 12);
  if (!v3) {
    goto LABEL_3;
  }
  unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
LABEL_4:
  uint64_t v6 = v5;
  uint64_t result = (WebCore::Region *)WTF::fastMalloc((WTF *)((32 * v5) | 0x10));
  unint64_t v9 = result;
  unint64_t v10 = (char *)result + 16;
  if (v5)
  {
    uint64_t result = (WebCore::Region *)((char *)result + 24);
    do
    {
      *((unsigned char *)result - 8) = -1;
      uint64_t result = (WebCore::Region *)(WebCore::Region::Region(result) + 32);
      --v6;
    }
    while (v6);
  }
  *a1 = (uint64_t)v10;
  *((_DWORD *)v9 + 3) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v12 = (unsigned char *)(v2 + 32 * i);
      int v13 = *v12;
      if (v13 != 254)
      {
        if (v13 == 255)
        {
          WebCore::Region::~Region((WebCore::Region *)(v2 + 32 * i + 8));
        }
        else
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          int v16 = 0;
          unsigned int v17 = 9 * ((~(v13 << 15) + v13) ^ ((~(v13 << 15) + v13) >> 10));
          unsigned int v18 = ((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) ^ (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) >> 16);
          do
          {
            uint64_t v19 = v18 & v15;
            unsigned int v18 = ++v16 + v19;
          }
          while (*(unsigned __int8 *)(v14 + 32 * v19) != 255);
          uint64_t v20 = (unsigned char *)(v14 + 32 * v19);
          WebCore::Region::~Region((WebCore::Region *)(v20 + 8));
          *uint64_t v20 = *v12;
          WebCore::Region::Region();
          WebCore::Region::~Region((WebCore::Region *)(v2 + 32 * i + 8));
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }

  return (WebCore::Region *)WTF::fastFree((WTF *)(v2 - 16), v8);
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 96 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::TextManipulationToken,void>::encode(a1, v6);
      v6 += 96;
      v7 -= 96;
    }
    while (v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::TextManipulationToken>(uint64_t a1, IPC::Decoder *a2)
{
  int v4 = (unsigned char *)IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebCore::MediaUniqueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::decode(a2);
  uint64_t v6 = v5;
  if (!v5)
  {
    long long v40 = *(WTF::StringImpl **)a2;
    uint64_t v41 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v42 = *((void *)a2 + 3);
    if (v42 && v41 != 0) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v42 + 16))(v42, v40);
    }
  }
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v67);
  unint64_t v7 = *((void *)a2 + 1);
  unint64_t v8 = *(WTF::StringImpl **)a2;
  unint64_t v9 = *((void *)a2 + 2) - *(void *)a2;
  if (v7 <= v9)
  {
    unint64_t v44 = 0;
    long long v45 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v46 = *((void *)a2 + 3);
    if (v46)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v46 + 16))(v46);
        long long v45 = *(WTF::StringImpl **)a2;
        unint64_t v44 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v44 = 0;
        long long v45 = 0;
      }
    }
    goto LABEL_73;
  }
  unint64_t v10 = (unsigned __int8 *)v8 + v9;
  *((void *)a2 + 2) = v10 + 1;
  if (!v8)
  {
    unint64_t v44 = v7;
    long long v45 = 0;
LABEL_73:
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v47 = *((void *)a2 + 3);
    if (v47)
    {
      if (v44)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v47 + 16))(v47, v45, v44);
        unint64_t v8 = *(WTF::StringImpl **)a2;
        unint64_t v7 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v7 = 0;
        unint64_t v8 = 0;
      }
    }
    goto LABEL_74;
  }
  unsigned int v11 = *v10;
  if (v11 >= 2)
  {
LABEL_74:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result && v7) {
      unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
    }
                                                                                                  + 16))(result, v8);
    v65[0] = 0;
    unsigned __int8 v66 = 0;
LABEL_46:
    unsigned __int8 v31 = (WTF::StringImpl *)*((void *)a2 + 1);
    if (!v66)
    {
      uint64_t v19 = 0;
      uint64_t v18 = 0;
      long long v48 = *(WTF::StringImpl **)a2;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v49 = *((void *)a2 + 3);
      if (!v49) {
        goto LABEL_77;
      }
      if (!v31)
      {
        uint64_t v19 = 0;
        uint64_t v18 = 0;
        goto LABEL_77;
      }
      unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v49 + 16))(v49, v48);
      unsigned __int8 v31 = (WTF::StringImpl *)*((void *)a2 + 1);
    }
    unsigned __int8 v32 = *(WTF::StringImpl **)a2;
    unint64_t v33 = *((void *)a2 + 2) - *(void *)a2;
    if ((unint64_t)v31 <= v33)
    {
      uint64_t v19 = 0;
      uint64_t v59 = *((void *)a2 + 3);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v18 = 0;
      if (v59 && v31)
      {
        (*(void (**)(uint64_t))(*(void *)v59 + 16))(v59);
        uint64_t v18 = *(void *)a2;
        uint64_t v19 = (WTF::StringImpl *)*((void *)a2 + 1);
      }
    }
    else
    {
      char v34 = (unsigned __int8 *)v32 + v33;
      uint64_t v18 = (uint64_t)(v34 + 1);
      *((void *)a2 + 2) = v34 + 1;
      if (v32)
      {
        uint64_t v19 = (WTF::StringImpl *)*v34;
        if (v19 > 1) {
          goto LABEL_78;
        }
        int v35 = 0;
        BOOL v36 = v19 != 0;
        if (!v6) {
          goto LABEL_98;
        }
LABEL_51:
        unsigned __int8 v60 = v4;
        uint64_t v19 = (WTF::StringImpl *)v68;
        if (!v68) {
          goto LABEL_98;
        }
        uint64_t v37 = v67;
        v67 = 0;
        v61 = v37;
        uint64_t v19 = (WTF::StringImpl *)v66;
        if (!v66) {
          goto LABEL_98;
        }
        int v4 = v62;
        unint64_t result = (WTF::StringImpl *)std::__optional_move_base<WebCore::TextManipulationTokenInfo,false>::__optional_move_base[abi:sn180100]((uint64_t)v62, (uint64_t)v65);
        if (v35) {
          goto LABEL_98;
        }
        BOOL v64 = v36;
        uint64_t v38 = v61;
        v61 = 0;
        *(void *)a1 = v60;
        *(void *)(a1 + 8) = v38;
        std::__optional_move_base<WebCore::TextManipulationTokenInfo,false>::__optional_move_base[abi:sn180100](a1 + 16, (uint64_t)v62);
        *(unsigned char *)(a1 + 88) = v64;
        *(unsigned char *)(a1 + 96) = 1;
        std::__optional_destruct_base<WebCore::TextManipulationTokenInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v62, v39);
        unint64_t result = v61;
        v61 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v32);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        goto LABEL_58;
      }
      uint64_t v19 = v31;
      uint64_t v18 = 0;
    }
LABEL_77:
    unsigned __int8 v31 = 0;
    unsigned __int8 v32 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result) {
      goto LABEL_99;
    }
    goto LABEL_78;
  }
  if (!v11)
  {
    LOBYTE(v60) = 0;
    char v63 = 0;
    std::__optional_move_base<WebCore::TextManipulationTokenInfo,false>::__optional_move_base[abi:sn180100]((uint64_t)v65, (uint64_t)&v60);
    goto LABEL_44;
  }
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v81);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v79);
  unint64_t result = IPC::Decoder::decode<WTF::URL>(a2, &v75);
  unint64_t v13 = *((void *)a2 + 1);
  uint64_t v14 = *(WTF::StringImpl **)a2;
  unint64_t v15 = *((void *)a2 + 2) - *(void *)a2;
  if (v13 <= v15)
  {
    unint64_t v52 = 0;
    long long v53 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v54 = *((void *)a2 + 3);
    if (v54)
    {
      if (v13)
      {
        (*(void (**)(uint64_t))(*(void *)v54 + 16))(v54);
        long long v53 = *(WTF::StringImpl **)a2;
        unint64_t v52 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v52 = 0;
        long long v53 = 0;
      }
    }
    goto LABEL_84;
  }
  int v16 = (unsigned __int8 *)v14 + v15;
  *((void *)a2 + 2) = v16 + 1;
  if (!v14)
  {
    unint64_t v52 = v13;
    long long v53 = 0;
LABEL_84:
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v55 = *((void *)a2 + 3);
    if (v55)
    {
      if (v52)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v55 + 16))(v55, v53, v52);
        uint64_t v14 = *(WTF::StringImpl **)a2;
        unint64_t v13 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_85;
  }
  unsigned int v17 = *v16;
  if (v17 <= 1)
  {
    uint64_t v18 = 0;
    uint64_t v19 = (WTF::StringImpl *)(v17 != 0);
    goto LABEL_10;
  }
LABEL_85:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v56 = *((void *)a2 + 3);
  if (!v56
    || !v13
    || (unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v56 + 16))(v56, v14), !*(void *)a2))
  {
    LOBYTE(v60) = 0;
    char v63 = 0;
LABEL_27:
    if (v78)
    {
      uint64_t v27 = v75;
      v75 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, v14);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
    }
    if (v80)
    {
      int v28 = v79;
      v79 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2) {
          WTF::StringImpl::destroy(v28, v14);
        }
        else {
          *(_DWORD *)v28 -= 2;
        }
      }
    }
    if (v82)
    {
      unsigned __int8 v29 = v81;
      v81 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, v14);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
    }
    if (!v63)
    {
      uint64_t v24 = *(WTF::StringImpl **)a2;
      uint64_t v57 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v58 = *((void *)a2 + 3);
      if (!v58
        || !v57
        || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v58 + 16))(v58, v24), !v63))
      {
        char v30 = 0;
        v65[0] = 0;
        goto LABEL_45;
      }
    }
    std::__optional_destruct_base<WebCore::TextManipulationTokenInfo,false>::__optional_destruct_base[abi:sn180100]<WebCore::TextManipulationTokenInfo>((uint64_t)v65, (uint64_t *)&v60);
LABEL_44:
    char v30 = 1;
LABEL_45:
    unsigned __int8 v66 = v30;
    unint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::TextManipulationTokenInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60, v24);
    goto LABEL_46;
  }
  uint64_t v19 = 0;
  uint64_t v18 = 1;
LABEL_10:
  if (v82)
  {
    uint64_t v20 = v81;
    v81 = 0;
    v69 = v20;
    if (v80)
    {
      uint64_t v21 = v79;
      v79 = 0;
      v70 = v21;
      if (v78)
      {
        uint64_t v22 = v75;
        v75 = 0;
        v71 = v22;
        long long v72 = v76;
        long long v73 = v77;
        LODWORD(v76) = v76 & 0xFFFFFFFE;
        if (!v18)
        {
          char v74 = (char)v19;
          std::__optional_destruct_base<WebCore::TextManipulationTokenInfo,false>::__optional_destruct_base[abi:sn180100]<WebCore::TextManipulationTokenInfo>((uint64_t)&v60, (uint64_t *)&v69);
          uint64_t v23 = v71;
          v71 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v14);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
          uint64_t v25 = v70;
          v70 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2) {
              WTF::StringImpl::destroy(v25, v14);
            }
            else {
              *(_DWORD *)v25 -= 2;
            }
          }
          int v26 = v69;
          v69 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2) {
              WTF::StringImpl::destroy(v26, v14);
            }
            else {
              *(_DWORD *)v26 -= 2;
            }
          }
          goto LABEL_27;
        }
      }
    }
  }
LABEL_98:
  while (1)
  {
    __break(1u);
LABEL_99:
    if (v19)
    {
      (*(void (**)(WTF::StringImpl *, uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v18, v19);
      unsigned __int8 v32 = *(WTF::StringImpl **)a2;
      unsigned __int8 v31 = (WTF::StringImpl *)*((void *)a2 + 1);
    }
    else
    {
      unsigned __int8 v31 = 0;
      unsigned __int8 v32 = 0;
    }
LABEL_78:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (!result) {
      break;
    }
    if (!v31) {
      break;
    }
    unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
                                                                                                + 16))(result, v32);
    uint64_t v19 = *(WTF::StringImpl **)a2;
    if (!*(void *)a2) {
      break;
    }
    BOOL v36 = 0;
    int v35 = 1;
    if (v6) {
      goto LABEL_51;
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 96) = 0;
LABEL_58:
  if (v66) {
    unint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::TextManipulationTokenInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v65, v32);
  }
  if (v68)
  {
    unint64_t result = v67;
    v67 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v32);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64_t v50 = *(WTF::StringImpl **)a2;
    uint64_t v51 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result)
    {
      if (v51) {
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
      }
                                                                                                  + 16))(result, v50);
    }
  }
  return result;
}

void sub_19892D2C4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,WTF::StringImpl *a31,char a32,WTF::StringImpl *a33,WTF::StringImpl *a34,WTF::StringImpl *a35)
{
  std::__optional_destruct_base<WebCore::TextManipulationTokenInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  if (a32)
  {
    uint64_t v37 = a31;
    a31 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v36);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextManipulationToken>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = (void *)(*(void *)a1 + 96 * v4);
  *uint64_t v6 = *(void *)v3;
  uint64_t v7 = *(void *)(v3 + 8);
  *(void *)(v3 + 8) = 0;
  v6[1] = v7;
  std::__optional_move_base<WebCore::TextManipulationTokenInfo,false>::__optional_move_base[abi:sn180100]((uint64_t)(v6 + 2), v3 + 16);
  *(unsigned char *)(v5 + 96 * v4 + 88) = *(unsigned char *)(v3 + 88);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

void sub_19892D540(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  unsigned int v4 = *v2;
  *uint64_t v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 96 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0x2AAAAAB)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    unsigned int v4 = (WTF::StringImpl *)(*(void *)result + 96 * *(unsigned int *)(result + 12));
    int v5 = 96 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(96 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFE0) / 0x60;
    *(void *)uint64_t v2 = v6;
    WTF::VectorMover<false,WebCore::TextManipulationToken>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::TextManipulationToken>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = a3 + 16;
    uint64_t v5 = (uint64_t)result + 16;
    do
    {
      uint64_t v6 = v5 - 16;
      *(void *)(v4 - 16) = *(void *)(v5 - 16);
      uint64_t v7 = *(void *)(v5 - 8);
      *(void *)(v5 - 8) = 0;
      *(void *)(v4 - 8) = v7;
      std::__optional_move_base<WebCore::TextManipulationTokenInfo,false>::__optional_move_base[abi:sn180100](v4, v5);
      *(unsigned char *)(v4 + 72) = *(unsigned char *)(v5 + 72);
      std::__optional_destruct_base<WebCore::TextManipulationTokenInfo,false>::~__optional_destruct_base[abi:sn180100](v5, v8);
      unint64_t result = *(WTF::StringImpl **)(v5 - 8);
      *(void *)(v5 - 8) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v4 += 96;
      v5 += 96;
    }
    while ((WTF::StringImpl *)(v6 + 96) != a2);
  }
  return result;
}

void sub_19892D770(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *(WTF::StringImpl **)(v2 - 8);
  *(void *)(v2 - 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::TextManipulationToken,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 96))
  {
    std::__optional_destruct_base<WebCore::TextManipulationTokenInfo,false>::~__optional_destruct_base[abi:sn180100](a1 + 16, a2);
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::TextManipulationTokenInfo>,void>::encode<IPC::Encoder,std::optional<WebCore::TextManipulationTokenInfo> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 64);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19892D8BCLL);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 64))
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
      return (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 56));
    }
    else
    {
      uint64_t v7 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<WTF::OptionSet<WebCore::DragOperation>,void>::decode<IPC::Decoder>(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19892D8DCLL);
    }
    unsigned char *result = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::OptionSet<WebCore::DragOperation>,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v2, v1);
        a1 = v14;
        uint64_t v11 = *v14;
        unint64_t v10 = v14[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
  }
  else
  {
    int v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      unsigned int v5 = *v4;
      int v6 = 1;
      goto LABEL_4;
    }
    unint64_t v10 = v1;
    uint64_t v11 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v13 = a1[3];
  if (v13 && v10) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
  }
  unsigned int v5 = 0;
  int v6 = 0;
LABEL_4:
  BOOL v7 = v5 < 0x40;
  unsigned int v8 = v5 | 0x100;
  if ((v6 & v7) != 0) {
    return v8;
  }
  else {
    return 0;
  }
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::KeyboardScroll>,void>::encode<IPC::Encoder,std::optional<WebCore::KeyboardScroll> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 28);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19892DAC8);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 28))
    {
      IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)a2);
      IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)(a2 + 8));
      IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)(a2 + 16));
      char v9 = *(unsigned char *)(a2 + 24);
      IPC::Encoder::operator<<<BOOL>(a1, &v9);
      char v10 = *(unsigned char *)(a2 + 25);
      return (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, &v10);
    }
    else
    {
      BOOL v7 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v7, v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19892DAE8);
    }
    unsigned char *result = 0;
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = 8 * v5;
    do
    {
      uint64_t v8 = *v6++;
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebCore::TransformOperation,void>::encode(a1, v8);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::TransformOperation,void>::decode(a1, a2);
  if (!*(unsigned char *)(a1 + 8))
  {
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    unint64_t v3 = result;
    unint64_t v4 = result[3];
    if (v4 > a2)
    {
      uint64_t result = WTF::VectorDestructor<true,WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>>::destruct((_DWORD *)(*(void *)result + 8 * a2), (_DWORD **)(*(void *)result + 8 * v4));
      v3[3] = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        uint64_t result = (unsigned int *)WTF::fastRealloc(v5, (void *)(8 * a2));
        *(void *)unint64_t v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(void *)unint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        uint64_t result = (unsigned int *)memcpy(result, v5, 8 * v4);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)unint64_t v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::encode<IPC::Encoder,std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> const&>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::encode<IPC::Encoder,std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> const&,0ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 28))
  {
    a1 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::encode<IPC::Encoder,std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> const&,0ul>(a1, a2, a3);
  }

  return (uint64_t *)IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode((IPC::Encoder *)a1, (float *)a2);
}

uint64_t *IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::encode<IPC::Encoder,std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> const&,0ul>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1)
  {
    return IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::encode<IPC::Encoder,std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> const&,0ul,1ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 28) != 1)
  {
    a1 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::encode<IPC::Encoder,std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> const&,0ul,1ul>(a1, a2, a3);
  }

  return (uint64_t *)IPC::ArgumentCoder<WebCore::Gradient::RadialData,void>::encode((IPC::Encoder *)a1, (float *)a2);
}

uint64_t *IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::encode<IPC::Encoder,std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> const&,0ul,1ul>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 2)
  {
    if (*(_DWORD *)(a2 + 28) == 2)
    {
      unint64_t v4 = (IPC::Encoder *)result;
      IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>((IPC::Encoder *)result, *(float *)a2);
      IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v4, *(float *)(a2 + 4));
      float v5 = *(float *)(a2 + 8);
      return (uint64_t *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v4, v5);
    }
    else
    {
      uint64_t v6 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> const&,0ul>(v6, v7, v8);
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData> const&,0ul>(uint64_t *result, _DWORD *a2, uint64_t a3)
{
  if (a3 != 2)
  {
    if (a3 != 1) {
      return result;
    }
    if (a2[7] == 1)
    {
      uint64_t v3 = *result;
      unint64_t v4 = result[2];
      unint64_t v5 = *result + v4;
      unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      BOOL v7 = v6 >= v5;
      unint64_t v8 = v6 - v5;
      if (v7)
      {
        unint64_t v9 = v8 + v4;
        unint64_t v10 = v8 + v4 + 4;
        if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > result[1])
        {
          result[1] = 0;
        }
        else
        {
          *(_DWORD *)(v3 + v9) = *a2;
          result[2] = v10;
          uint64_t v3 = *result;
          unint64_t v4 = v10;
        }
      }
      unint64_t v12 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v13 = v12 - (v3 + v4);
      if (v12 >= v3 + v4)
      {
        unint64_t v14 = v12 - v3;
        unint64_t v15 = v13 + v4 + 4;
        if (v14 > 0xFFFFFFFFFFFFFFFBLL || v15 > result[1])
        {
          result[1] = 0;
        }
        else
        {
          *(_DWORD *)(v3 + v14) = a2[1];
          result[2] = v15;
          uint64_t v3 = *result;
          unint64_t v4 = v15;
        }
      }
      unint64_t v17 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v18 = v17 - (v3 + v4);
      if (v17 >= v3 + v4)
      {
        unint64_t v19 = v17 - v3;
        unint64_t v20 = v18 + v4 + 4;
        if (v19 > 0xFFFFFFFFFFFFFFFBLL || v20 > result[1])
        {
          result[1] = 0;
        }
        else
        {
          *(_DWORD *)(v3 + v19) = a2[2];
          result[2] = v20;
          uint64_t v3 = *result;
          unint64_t v4 = v20;
        }
      }
      uint64_t v22 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v22 >= v3 + v4)
      {
        uint64_t v23 = (char *)v22 - v3;
        if ((unint64_t)v22 - v3 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v23 + 4) > result[1])
        {
          result[1] = 0;
        }
        else
        {
          _DWORD *v22 = a2[3];
          result[2] = (uint64_t)(v23 + 4);
          uint64_t v3 = *result;
          unint64_t v4 = (unint64_t)(v23 + 4);
        }
      }
      uint64_t v24 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v24 >= v3 + v4)
      {
        uint64_t v25 = (char *)v24 - v3;
        if ((unint64_t)v24 - v3 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v25 + 4) > result[1])
        {
          result[1] = 0;
        }
        else
        {
          _DWORD *v24 = a2[4];
          result[2] = (uint64_t)(v25 + 4);
          uint64_t v3 = *result;
          unint64_t v4 = (unint64_t)(v25 + 4);
        }
      }
      int v26 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v26 >= v3 + v4)
      {
        uint64_t v27 = (char *)v26 - v3;
        if ((unint64_t)v26 - v3 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v27 + 4) > result[1])
        {
          result[1] = 0;
        }
        else
        {
          _DWORD *v26 = a2[5];
          result[2] = (uint64_t)(v27 + 4);
          uint64_t v3 = *result;
          unint64_t v4 = (unint64_t)(v27 + 4);
        }
      }
      unint64_t v28 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      if (v28 >= v3 + v4)
      {
        uint64_t v29 = v28 - v3;
        if (v28 - v3 <= 0xFFFFFFFFFFFFFFFBLL)
        {
          unint64_t v30 = v29 + 4;
          if (v29 + 4 <= (unint64_t)result[1])
          {
            int v31 = a2[6];
LABEL_59:
            *(_DWORD *)(v3 + v29) = v31;
            result[2] = v30;
            return result;
          }
        }
        goto LABEL_62;
      }
      return result;
    }
LABEL_61:
    uint64_t result = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_62;
  }
  if (a2[7] != 2) {
    goto LABEL_61;
  }
  uint64_t v3 = *result;
  unint64_t v32 = result[2];
  unint64_t v33 = *result + v32;
  unint64_t v34 = (v33 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v7 = v34 >= v33;
  unint64_t v35 = v34 - v33;
  if (v7)
  {
    unint64_t v36 = v35 + v32;
    unint64_t v37 = v35 + v32 + 4;
    if (v36 > 0xFFFFFFFFFFFFFFFBLL || v37 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v36) = *a2;
      result[2] = v37;
      uint64_t v3 = *result;
      unint64_t v32 = v37;
    }
  }
  unint64_t v39 = (v3 + v32 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v40 = v39 - (v3 + v32);
  if (v39 >= v3 + v32)
  {
    unint64_t v41 = v39 - v3;
    unint64_t v42 = v40 + v32 + 4;
    if (v41 > 0xFFFFFFFFFFFFFFFBLL || v42 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v41) = a2[1];
      result[2] = v42;
      uint64_t v3 = *result;
      unint64_t v32 = v42;
    }
  }
  unint64_t v44 = (v3 + v32 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v44 >= v3 + v32)
  {
    uint64_t v29 = v44 - v3;
    unint64_t v30 = v44 - v3 + 4;
    if (v44 - v3 <= 0xFFFFFFFFFFFFFFFBLL && v30 <= result[1])
    {
      int v31 = a2[2];
      goto LABEL_59;
    }
LABEL_62:
    result[1] = 0;
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::decode<IPC::Decoder>@<X0>(unint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  unint64_t v4 = result[1];
  unint64_t v5 = *result;
  unint64_t v6 = result[2] - *result;
  if (v4 <= v6)
  {
LABEL_13:
    unint64_t v14 = 0;
    unint64_t v15 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v16 = v2[3];
    if (v16)
    {
      if (v4)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v16 + 16))(v16, v5, v4);
        unint64_t v15 = *v2;
        unint64_t v14 = v2[1];
      }
      else
      {
        unint64_t v14 = 0;
        unint64_t v15 = 0;
      }
    }
    goto LABEL_14;
  }
  BOOL v7 = (unsigned char *)(v5 + v6);
  result[2] = (unint64_t)(v7 + 1);
  if (!v5)
  {
    unint64_t v14 = v4;
    unint64_t v15 = 0;
LABEL_14:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t result = (unint64_t *)v2[3];
    if (result)
    {
      if (v14) {
        uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v15);
      }
    }
    goto LABEL_15;
  }
  uint64_t v8 = *v7;
  if (v8 >= 3)
  {
LABEL_15:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 32) = 0;
    return result;
  }
  if (!*v7)
  {
    unint64_t v9 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(result);
    uint64_t v11 = v10;
    if (!v10)
    {
      unint64_t v17 = *v2;
      unint64_t v18 = v2[1];
      *uint64_t v2 = 0;
      v2[1] = 0;
      unint64_t v19 = v2[3];
      if (v19)
      {
        if (v18) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v19 + 16))(v19, v17);
        }
      }
    }
    uint64_t result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(v2);
    unint64_t v4 = v12;
    if (!v12)
    {
      unint64_t v20 = *v2;
      unint64_t v21 = v2[1];
      *uint64_t v2 = 0;
      v2[1] = 0;
      unint64_t v22 = v2[3];
      if (v22)
      {
        if (v21)
        {
          uint64_t v24 = result;
          (*(void (**)(unint64_t, unint64_t))(*(void *)v22 + 16))(v22, v20);
          unint64_t v4 = 0;
          uint64_t result = v24;
        }
      }
    }
    unint64_t v5 = *v2;
    if (!*v2)
    {
      unint64_t v23 = v2[1];
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t result = (unint64_t *)v2[3];
      if (result && v23) {
        uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, void))(*result + 16))(result, 0);
      }
      char v13 = 0;
      *(unsigned char *)a2 = 0;
      goto LABEL_11;
    }
    if (v11 && v4)
    {
      *(void *)a2 = v9;
      *(void *)(a2 + 8) = result;
      char v13 = 1;
      *(_DWORD *)(a2 + 28) = 0;
LABEL_11:
      *(unsigned char *)(a2 + 32) = v13;
      return result;
    }
    __break(1u);
    goto LABEL_13;
  }

  return IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::decode<IPC::Decoder,0ul>(a2, result, v8);
}

unint64_t *IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::decode<IPC::Decoder,0ul>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (a3 == 1)
  {
    uint64_t result = (unint64_t *)IPC::Decoder::decode<WebCore::Gradient::RadialData>((uint64_t)v6, a2);
    char v5 = v7;
    if (v7)
    {
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(_OWORD *)(a1 + 12) = *(_OWORD *)&v6[12];
      char v5 = 1;
      *(_DWORD *)(a1 + 28) = 1;
    }
    else
    {
      *(unsigned char *)a1 = 0;
    }
    *(unsigned char *)(a1 + 32) = v5;
  }
  else
  {
    return IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::decode<IPC::Decoder,0ul,1ul>(a1, a2);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::Gradient::RadialData>(uint64_t a1, unint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::Gradient::RadialData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a1 + 28))
  {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<std::variant<WebCore::Gradient::LinearData,WebCore::Gradient::RadialData,WebCore::Gradient::ConicData>,void>::decode<IPC::Decoder,0ul,1ul>(uint64_t a1, unint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
  uint64_t v7 = v5;
  if (!(_BYTE)v5)
  {
    unint64_t v5 = *a2;
    unint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v15 = a2[3];
    if (v15 && v6 != 0)
    {
      unint64_t v19 = result;
      (*(void (**)(unint64_t, unint64_t))(*(void *)v15 + 16))(v15, v5);
      uint64_t result = v19;
      uint64_t v7 = 0;
    }
  }
  unint64_t v8 = a2[1];
  unint64_t v9 = *a2;
  unint64_t v10 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v8 >= v10 && v8 - v10 > 3)
  {
    unsigned __int8 v12 = (int *)(v9 + v10);
    a2[2] = (unint64_t)(v12 + 1);
    if (v9)
    {
      if (v7)
      {
        int v13 = *v12;
        *(void *)a1 = result;
        *(_DWORD *)(a1 + 8) = v13;
        *(_DWORD *)(a1 + 28) = 2;
        char v14 = 1;
LABEL_10:
        *(unsigned char *)(a1 + 32) = v14;
        return result;
      }
      __break(1u);
      goto LABEL_20;
    }
    unint64_t v6 = v8;
    unint64_t v5 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    unint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v17 = a2[3];
    if (v17)
    {
      if (v8)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v17 + 16))(v17, v9, v8);
        unint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        unint64_t v5 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (unint64_t *)a2[3];
  if (!result)
  {
LABEL_18:
    char v14 = 0;
    *(unsigned char *)a1 = 0;
    goto LABEL_10;
  }
LABEL_20:
  if (!v6) {
    goto LABEL_18;
  }
  uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v5);
  if (!*a2)
  {
    uint64_t result = (unint64_t *)a2[3];
    unint64_t v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    if (result)
    {
      if (v18) {
        uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, void))(*result + 16))(result, 0);
      }
    }
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

WebCore::Pattern *WTF::RefCounted<WebCore::Pattern>::deref(WebCore::Pattern *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebCore::Pattern::~Pattern(result);
    return (WebCore::Pattern *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,void>::encode<IPC::Encoder,std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>> const&,0ul,1ul>(uint64_t *result, uint64_t a2, int a3, uint64_t a4)
{
  if (a4 == 2)
  {
    if (a3 == 2)
    {
      unint64_t v5 = (IPC::Encoder *)result;
      uint64_t v10 = WebCore::SourceImage::imageIdentifier((WebCore::SourceImage *)(a2 + 8));
      IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v5, &v10);
      IPC::Encoder::operator<<<BOOL>(v5, (char *)(a2 + 48));
      IPC::Encoder::operator<<<BOOL>(v5, (char *)(a2 + 49));
      return (uint64_t *)IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(v5, (double *)(a2 + 56));
    }
    else
    {
      unint64_t v6 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>> const&,0ul,1ul>(v6, v7, v8, v9);
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>> const&,0ul,1ul>(uint64_t *result, uint64_t a2, int a3, uint64_t a4)
{
  if (a4 == 2)
  {
    if (a3 == 2)
    {
      unint64_t v5 = result;
      uint64_t v6 = WebCore::SourceImage::imageIdentifier((WebCore::SourceImage *)(a2 + 8));
      unint64_t v7 = v5[2];
      unint64_t v8 = *v5 + v7;
      unint64_t v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
      BOOL v10 = v9 >= v8;
      unint64_t v11 = v9 - v8;
      if (v10)
      {
        unint64_t v12 = v11 + v7;
        unint64_t v13 = v11 + v7 + 8;
        if (v12 > 0xFFFFFFFFFFFFFFF7 || v13 > v5[1])
        {
          v5[1] = 0;
        }
        else
        {
          *(void *)(*v5 + v12) = v6;
          void v5[2] = v13;
          unint64_t v7 = v13;
        }
      }
      if (v7 >= v5[1] || (*(unsigned char *)(*v5 + v7) = *(unsigned char *)(a2 + 48), void v5[2] = v7 + 1, v7 + 1 >= v5[1]))
      {
        v5[1] = 0;
      }
      else
      {
        *(unsigned char *)(*v5 + v7 + 1) = *(unsigned char *)(a2 + 49);
        void v5[2] = v7 + 2;
      }
      return IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(v5, (void *)(a2 + 56));
    }
    else
    {
      uint64_t v15 = std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,void>::decode<IPC::Decoder,0ul,1ul>(v15);
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,void>::decode<IPC::Decoder,0ul,1ul>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::SourceImage>(v45, a2);
  unint64_t v4 = a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[2] - *a2;
  if (v4 <= v6)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v26 = a2[3];
    if (v26)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v26 + 16))(v26);
        uint64_t v25 = *a2;
        uint64_t v24 = a2[1];
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
      }
    }
    goto LABEL_33;
  }
  unint64_t v7 = (unsigned __int8 *)(v5 + v6);
  uint64_t v8 = v5 + v6 + 1;
  a2[2] = v8;
  if (!v5)
  {
    uint64_t v24 = v4;
    uint64_t v25 = 0;
LABEL_33:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v27 = a2[3];
    if (v27 && v24)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25, v24);
      unsigned int v9 = 0;
      uint64_t v5 = *a2;
      unint64_t v4 = a2[1];
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0;
      unsigned int v9 = 0;
    }
    goto LABEL_35;
  }
  unsigned int v9 = *v7;
  if (v9 < 2)
  {
    int v10 = 0;
    char v11 = 1;
    goto LABEL_5;
  }
LABEL_35:
  *a2 = 0;
  a2[1] = 0;
  uint64_t v28 = a2[3];
  if (!v28 || !v4)
  {
    char v12 = 0;
    uint64_t v29 = 0;
    uint64_t v5 = 0;
    int v10 = 1;
LABEL_37:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v30 = a2[3];
    if (v30 && v29)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v5, v29);
      unsigned int v15 = 0;
      uint64_t v5 = *a2;
      unint64_t v4 = a2[1];
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0;
      unsigned int v15 = 0;
    }
    goto LABEL_39;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v5);
  char v11 = 0;
  uint64_t v5 = *a2;
  unint64_t v4 = a2[1];
  int v10 = 1;
  uint64_t v8 = a2[2];
LABEL_5:
  if (v9) {
    char v12 = v11;
  }
  else {
    char v12 = 0;
  }
  unint64_t v13 = v8 - v5;
  if (v4 <= v13)
  {
    uint64_t v29 = 0;
    uint64_t v39 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v4 && v39)
    {
      (*(void (**)(uint64_t))(*(void *)v39 + 16))(v39);
      uint64_t v5 = *a2;
      uint64_t v29 = a2[1];
    }
    else
    {
      uint64_t v5 = 0;
    }
    goto LABEL_37;
  }
  char v14 = (unsigned __int8 *)(v5 + v13);
  a2[2] = (uint64_t)(v14 + 1);
  if (!v5)
  {
    uint64_t v29 = v4;
    goto LABEL_37;
  }
  unsigned int v15 = *v14;
  if (v15 < 2)
  {
    int v16 = 0;
    char v17 = 1;
    goto LABEL_12;
  }
LABEL_39:
  *a2 = 0;
  a2[1] = 0;
  uint64_t v31 = a2[3];
  if (v31 && v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v5);
  }
  char v17 = 0;
  int v16 = 1;
LABEL_12:
  if (v15) {
    char v18 = v17;
  }
  else {
    char v18 = 0;
  }
  IPC::ArgumentCoder<WebCore::AffineTransform,void>::decode(a2, (uint64_t)v51);
  int v19 = v53;
  if (!v53)
  {
    uint64_t v32 = *a2;
    uint64_t v33 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v34 = a2[3];
    if (v34)
    {
      if (v33)
      {
        int v35 = v19;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32);
        int v19 = v35;
      }
    }
  }
  uint64_t v20 = *a2;
  if (*a2)
  {
    if (!v10 && !v16)
    {
      if (v19)
      {
        *(_OWORD *)&v54[6] = v51[0];
        *(_OWORD *)&v54[22] = v51[1];
        *(_OWORD *)&v54[38] = v52;
        long long v41 = *(_OWORD *)v54;
        v40[0] = v12;
        v40[1] = v18;
        long long v42 = *(_OWORD *)&v54[16];
        *(_OWORD *)char v43 = *(_OWORD *)&v54[32];
        *(void *)&v43[14] = *((void *)&v52 + 1);
        char v44 = 1;
        if (v50)
        {
          uint64_t result = WebCore::Pattern::create();
          uint64_t v22 = *(void *)&v51[0];
          goto LABEL_22;
        }
      }
    }
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v22 = 0;
  uint64_t v36 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result)
  {
    if (v36)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 16))(result, 0);
      if (*a2) {
        goto LABEL_47;
      }
    }
    uint64_t v22 = 0;
  }
LABEL_22:
  if (v50)
  {
    if (v49)
    {
      if (v48 != -1) {
        uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t *))off_1EE9B4B40[v48])(v40, &v47);
      }
      int v48 = -1;
    }
    if (v46 != -1) {
      uint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9B4B40[v46])(v40, v45);
    }
  }
  if (v20)
  {
    *(void *)(a1 + 8) = v22;
    *(_DWORD *)(a1 + 72) = 2;
    char v23 = 1;
    goto LABEL_28;
  }
LABEL_48:
  uint64_t v37 = *a2;
  uint64_t v38 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result && v38) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v37);
  }
  char v23 = 0;
  *(unsigned char *)a1 = 0;
LABEL_28:
  *(unsigned char *)(a1 + 80) = v23;
  return result;
}

void sub_19892EC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, int a19, int a20,uint64_t a21,int a22,int a23,char a24,int a25,__int16 a26,char a27,char a28)
{
  if ((_BYTE)a26)
  {
    if (a24)
    {
      if (a22 != -1) {
        ((void (*)(char *, uint64_t *))off_1EE9B4B40[a22])(&a10, &a21);
      }
      a22 = -1;
    }
    if (a20 != -1) {
      ((void (*)(char *, char *))off_1EE9B4B40[a20])(&a10, &a18);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WTF::RefPtr<WebCore::ThreadSafeDataBufferImpl,WTF::RawPtrTraits<WebCore::ThreadSafeDataBufferImpl>,WTF::DefaultRefDerefTraits<WebCore::ThreadSafeDataBufferImpl>>,void>::encode<IPC::Encoder,WebCore::ThreadSafeDataBufferImpl>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (v6)
    {
      unsigned char *result = 0;
      return result;
    }
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x19892EDB0);
  }
  if (!v6) {
    goto LABEL_8;
  }
  unsigned char *result = 1;
  unint64_t v7 = *(const void **)(*a2 + 8);
  size_t v8 = *(unsigned int *)(*a2 + 20);

  return (unsigned char *)IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v7, v8);
}

unint64_t WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Length>(uint64_t a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((int *)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 12);
  *(_DWORD *)uint64_t v4 = 0;
  *(_WORD *)(v4 + 5) = 0;
  unsigned int v5 = *(unsigned __int8 *)(result + 4);
  *(unsigned char *)(v4 + 4) = v5;
  *(unsigned char *)(v4 + 5) = *(unsigned char *)(result + 5);
  if (v5 <= 0xD)
  {
    int v6 = 1 << v5;
    if ((v6 & 0x7FC) != 0)
    {
      int v7 = *(unsigned __int8 *)(result + 6);
      *(unsigned char *)(v4 + 6) = v7;
      if (v7)
      {
        *(_DWORD *)uint64_t v4 = *(_DWORD *)result;
        goto LABEL_10;
      }
      int v8 = *(_DWORD *)result;
    }
    else
    {
      if ((v6 & 0x3003) != 0)
      {
        *(_DWORD *)uint64_t v4 = 0;
        goto LABEL_10;
      }
      int v8 = *(_DWORD *)result;
      *(_DWORD *)unint64_t result = 0;
    }
    *(_DWORD *)uint64_t v4 = v8;
  }
LABEL_10:
  *(unsigned char *)(result + 4) = 0;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

int *WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19892EFDCLL);
    }
    unint64_t v3 = result;
    uint64_t v4 = *(int **)result;
    uint64_t v5 = (int *)(*(void *)result + 8 * result[3]);
    uint64_t v6 = WTF::fastMalloc((WTF *)(8 * a2));
    v3[2] = v2;
    *(void *)unint64_t v3 = v6;
    unint64_t result = WTF::VectorMover<false,WebCore::Length>::move(v4, v5, v6);
    if (v4)
    {
      if (*(int **)v3 == v4)
      {
        *(void *)unint64_t v3 = 0;
        v3[2] = 0;
      }
      return (int *)WTF::fastFree((WTF *)v4, v7);
    }
  }
  return result;
}

int *WTF::VectorMover<false,WebCore::Length>::move(int *result, int *a2, uint64_t a3)
{
  for (; result != a2; result += 2)
  {
    *(_DWORD *)a3 = 0;
    *(_WORD *)(a3 + 5) = 0;
    unsigned int v3 = *((unsigned __int8 *)result + 4);
    *(unsigned char *)(a3 + 4) = v3;
    *(unsigned char *)(a3 + 5) = *((unsigned char *)result + 5);
    if (v3 <= 0xD)
    {
      int v4 = 1 << v3;
      if ((v4 & 0x7FC) != 0)
      {
        int v5 = *((unsigned __int8 *)result + 6);
        *(unsigned char *)(a3 + 6) = v5;
        if (!v5)
        {
          int v6 = *result;
LABEL_10:
          *(_DWORD *)a3 = v6;
          goto LABEL_11;
        }
        *(_DWORD *)a3 = *result;
      }
      else
      {
        if ((v4 & 0x3003) == 0)
        {
          int v6 = *result;
          unsigned char *result = 0;
          goto LABEL_10;
        }
        *(_DWORD *)a3 = 0;
      }
    }
LABEL_11:
    *((unsigned char *)result + 4) = 0;
    a3 += 8;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::SVGPathByteStream,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unsigned int v3 = *(_DWORD **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v3) {
      WTF::RefCounted<WebCore::SVGPathByteStream::Data>::deref(v3, a2);
    }
    WTF::WeakPtrFactory<WebCore::SVGPathByteStream,WTF::SingleThreadWeakPtrImpl>::~WeakPtrFactory((WTF **)a1, a2);
  }
  return a1;
}

uint64_t IPC::ArgumentCoder<IPC::WebCore_PixelBuffer_Subclass,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      char v11 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v2, v1);
        a1 = v11;
        uint64_t v8 = *v11;
        unint64_t v7 = v11[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_7;
  }
  int v4 = (unsigned char *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_7:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
    }
    goto LABEL_8;
  }
  if (*v4)
  {
LABEL_8:
    int v5 = 0;
    return (v5 << 8);
  }
  int v5 = 1;
  return (v5 << 8);
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 24 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebCore::CDMMediaCapability,void>::encode(a1, v6);
      v6 += 24;
      v7 -= 24;
    }
    while (v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::CDMMediaCapability>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v27);
  unint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v25);
  unint64_t v5 = *((void *)a2 + 1);
  uint64_t v6 = *(WTF::StringImpl **)a2;
  unint64_t v7 = *((void *)a2 + 2) - *(void *)a2;
  if (v5 <= v7) {
    goto LABEL_24;
  }
  uint64_t v8 = (unsigned __int8 *)v6 + v7;
  *((void *)a2 + 2) = v8 + 1;
  if (!v6)
  {
    unint64_t v16 = v5;
    char v17 = 0;
    goto LABEL_25;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2) {
    goto LABEL_26;
  }
  if (v9)
  {
    __int16 v29 = 0;
    unint64_t result = (WTF::StringImpl *)IPC::Decoder::operator>><BOOL>(a2, &v29);
    if (HIBYTE(v29))
    {
      unsigned int v9 = v29;
      unsigned int v10 = 0x10000;
    }
    else
    {
      uint64_t v6 = *(WTF::StringImpl **)a2;
      unint64_t v5 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
      if (result && v5) {
        unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v6);
      }
      unsigned int v9 = 0;
      unsigned int v10 = 0;
    }
    int v11 = 256;
  }
  else
  {
    int v11 = 0;
    unsigned int v10 = 0x10000;
  }
  while (1)
  {
    if (!HIWORD(v10))
    {
      uint64_t v6 = *(WTF::StringImpl **)a2;
      unint64_t v5 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
      if (result)
      {
        if (v5)
        {
          unsigned int v23 = v9;
          int v24 = v11;
          unsigned int v20 = v10;
          unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v6);
          unsigned int v9 = v23;
          int v11 = v24;
          unsigned int v10 = v20;
        }
      }
    }
    char v12 = *(WTF::StringImpl **)a2;
    if (!*(void *)a2) {
      break;
    }
    if (v28)
    {
      unint64_t v13 = v27;
      uint64_t v27 = 0;
      if (v26)
      {
        unsigned int v14 = v9 | v10 | v11;
        unsigned int v15 = v25;
        uint64_t v25 = 0;
        if (HIWORD(v14))
        {
          *(void *)a1 = v13;
          *(void *)(a1 + 8) = v15;
          *(_WORD *)(a1 + 16) = v14;
          *(unsigned char *)(a1 + 24) = 1;
          goto LABEL_15;
        }
      }
    }
    __break(1u);
LABEL_24:
    unint64_t v16 = 0;
    char v17 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v18 = *((void *)a2 + 3);
    if (v18)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v18 + 16))(v18, v6);
        char v17 = *(WTF::StringImpl **)a2;
        unint64_t v16 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v16 = 0;
        char v17 = 0;
      }
    }
LABEL_25:
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v19 = *((void *)a2 + 3);
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v19 + 16))(v19, v17, v16);
        uint64_t v6 = *(WTF::StringImpl **)a2;
        unint64_t v5 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
      }
    }
LABEL_26:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result && v5) {
      unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
    }
                                                                                                  + 16))(result, v6);
    unsigned int v10 = 0;
    unsigned int v9 = 0;
    int v11 = 0;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (v26)
  {
    unint64_t result = v25;
    uint64_t v25 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_15:
  if (v28)
  {
    unint64_t result = v27;
    uint64_t v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        if (v12) {
          return result;
        }
        goto LABEL_35;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v12) {
    return result;
  }
LABEL_35:
  unint64_t v21 = *(WTF::StringImpl **)a2;
  uint64_t v22 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result)
  {
    if (v22) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
    }
                                                                                                + 16))(result, v21);
  }
  return result;
}

void sub_19892F554(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, WTF::StringImpl *a12, char a13)
{
  std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100](v13, a2);
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CDMMediaCapability>(unsigned int *a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = *(void *)a1 + 24 * a1[3];
  uint64_t v5 = *(void *)result;
  *(void *)unint64_t result = 0;
  *(void *)uint64_t v4 = v5;
  uint64_t v6 = *(void *)(result + 8);
  *(void *)(result + 8) = 0;
  *(void *)(v4 + 8) = v6;
  *(_WORD *)(v4 + 16) = *(_WORD *)(result + 16);
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x19892F7ACLL);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)result + 24 * *((unsigned int *)result + 3));
    int v5 = 24 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)uint64_t v2 = v6;
    unint64_t result = WTF::VectorMover<false,WebCore::CDMMediaCapability>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::CDMMediaCapability>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    do
    {
      uint64_t v6 = *(WTF::StringImpl **)v5;
      *(void *)int v5 = 0;
      *(void *)a3 = v6;
      uint64_t v7 = *((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      *(void *)(a3 + 8) = v7;
      *(_WORD *)(a3 + 16) = *((_WORD *)v5 + 8);
      unint64_t v8 = (WTF::StringImpl *)*((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, a2);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      unint64_t result = *(WTF::StringImpl **)v5;
      *(void *)int v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      int v5 = (WTF::StringImpl *)((char *)v5 + 24);
      a3 += 24;
    }
    while (v5 != a2);
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::CDMMediaCapability>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    unint64_t v3 = (WTF::StringImpl **)result;
    do
    {
      uint64_t v4 = v3[1];
      v3[1] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      unint64_t result = *v3;
      *unint64_t v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 3;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::CDMMediaCapability>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 24 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::VideoConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::VideoConfiguration> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 40);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19892FA2CLL);
    }
    goto LABEL_23;
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19892FB00);
  }
  unsigned char *result = 1;
  if (!*(unsigned char *)(a2 + 40)) {
    goto LABEL_32;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 8));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 12));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 24));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 32));
  int v7 = *(unsigned __int8 *)(a2 + 35);
  unint64_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v7)
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x19892FB20);
    }
    *unint64_t v8 = 1;
    if (!*(unsigned char *)(a2 + 35)) {
      goto LABEL_32;
    }
    char v16 = *(unsigned char *)(a2 + 34);
    IPC::Encoder::operator<<<BOOL>(a1, &v16);
  }
  else
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x19892FB80);
    }
    *unint64_t v8 = 0;
  }
  int v10 = *(unsigned __int8 *)(a2 + 37);
  int v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v10)
  {
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x19892FBA0);
    }
    unsigned char *v11 = 0;
    goto LABEL_18;
  }
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x19892FB40);
  }
  unsigned char *v11 = 1;
  if (!*(unsigned char *)(a2 + 37))
  {
LABEL_32:
    uint64_t v15 = std::__throw_bad_optional_access[abi:sn180100]();
    return (unsigned char *)IPC::ArgumentCoder<std::optional<WebCore::AudioConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::AudioConfiguration> const&>(v15);
  }
  char v17 = *(unsigned char *)(a2 + 36);
  IPC::Encoder::operator<<<BOOL>(a1, &v17);
LABEL_18:
  int v13 = *(unsigned __int8 *)(a2 + 39);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v13)
  {
    if (!v14)
    {
      __break(0xC471u);
      JUMPOUT(0x19892FB60);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 39))
    {
      char v18 = *(unsigned char *)(a2 + 38);
      return (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, &v18);
    }
    goto LABEL_32;
  }
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x19892FBC0);
  }
LABEL_23:
  unsigned char *result = 0;
  return result;
}

void IPC::ArgumentCoder<std::optional<WebCore::AudioConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::AudioConfiguration> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 48);
  int v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19892FC98);
    }
    *int v5 = 1;
    if (*(unsigned char *)(a2 + 48))
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
      IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(a1, a2 + 16);
      IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, a2 + 32);
      IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 40));
    }
    else
    {
      int v7 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::ArgumentCoder<std::optional<WebCore::ResourceResponseData>,void>::encode<IPC::Encoder,std::optional<WebCore::ResourceResponseData>>(v7, v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19892FCB8);
    }
    *int v5 = 0;
  }
}

void IPC::ArgumentCoder<std::optional<WebCore::ResourceResponseData>,void>::encode<IPC::Encoder,std::optional<WebCore::ResourceResponseData>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 280);
  int v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (v6)
    {
      *int v5 = 0;
      return;
    }
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x19892FD60);
  }
  if (!v6) {
    goto LABEL_11;
  }
  *int v5 = 1;
  if (!*(unsigned char *)(a2 + 280))
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_11;
  }

  IPC::ArgumentCoder<WebCore::ResourceResponseData,void>::encode(a1, a2);
}

void IPC::ArgumentCoder<std::optional<WebCore::ResourceResponseData>,void>::decode<IPC::Decoder>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      char v16 = v2;
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t v2 = v16;
        uint64_t v11 = *v16;
        unint64_t v10 = v16[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_12;
  }
  int v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = v7 + 1;
  if (!v5)
  {
    unint64_t v10 = v4;
    uint64_t v11 = 0;
LABEL_12:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v13 = v2[3];
    if (v13)
    {
      uint64_t v15 = v2;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t v2 = v15;
        uint64_t v5 = *v15;
        unint64_t v4 = v15[1];
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v8 = *v7;
  if (v8 >= 2)
  {
LABEL_13:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v14 = v2[3];
    if (v14 && v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v5);
    }
    goto LABEL_14;
  }
  if (v8)
  {
    IPC::Decoder::decode<WebCore::ResourceResponseData>(v17, (IPC::Decoder *)a1);
    if (v18)
    {
      WebCore::ResourceResponseData::ResourceResponseData((uint64_t)a2, (uint64_t)v17);
      a2[280] = 1;
      goto LABEL_7;
    }
LABEL_14:
    *a2 = 0;
    a2[288] = 0;
    return;
  }
  v17[0] = 0;
  char v18 = 0;
  std::__optional_move_base<WebCore::ResourceResponseData,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v17);
LABEL_7:
  a2[288] = 1;
  if (v18) {
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v17, v9);
  }
}

void sub_19892FF50(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  if (a46) {
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&a11, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::NetworkLoadMetrics>,void>::encode<IPC::Encoder,std::optional<WebCore::NetworkLoadMetrics> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 128);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198930010);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 128))
    {
      return IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<short,void>::decode<IPC::Decoder>(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198930030);
    }
    unsigned char *result = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<short,void>::decode<IPC::Decoder>(IPC::Decoder *a1)
{
  unint64_t v1 = *((void *)a1 + 1);
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = ((*((void *)a1 + 2) + 1) & 0xFFFFFFFFFFFFFFFELL) - *(void *)a1;
  BOOL v4 = v1 >= v3;
  unint64_t v5 = v1 - v3;
  if (!v4 || v5 <= 1)
  {
    IPC::Decoder::markInvalid(a1);
    LODWORD(v2) = 0;
LABEL_9:
    int v10 = 0;
    int v9 = 0;
    return v10 | v2 | v9;
  }
  uint64_t v7 = (__int16 *)(v2 + v3);
  *((void *)a1 + 2) = v7 + 1;
  if (!v2) {
    goto LABEL_9;
  }
  __int16 v8 = *v7;
  int v9 = *v7 & 0xFF00;
  int v10 = v8;
  LODWORD(v2) = 0x10000;
  return v10 | v2 | v9;
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::NetworkLoadMetrics>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  BOOL v4 = (WTF::StringImpl *)*a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = a1[3];
    if (v16)
    {
      uint64_t v19 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
        a1 = v19;
        uint64_t v15 = *v19;
        unint64_t v14 = v19[1];
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_11;
  }
  uint64_t v6 = (unsigned __int8 *)v4 + v5;
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v14 = v3;
    uint64_t v15 = 0;
LABEL_11:
    unint64_t v3 = 0;
    BOOL v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v17 = a1[3];
    if (v17)
    {
      char v18 = a1;
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v15, v14);
        a1 = v18;
        BOOL v4 = (WTF::StringImpl *)*v18;
        unint64_t v3 = v18[1];
      }
      else
      {
        unint64_t v3 = 0;
        BOOL v4 = 0;
      }
    }
    goto LABEL_12;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebCore::NetworkLoadMetrics>(a1, (uint64_t)v20);
      char v8 = v26;
      if (v26)
      {
        long long v10 = v20[3];
        *(_OWORD *)(a2 + 32) = v20[2];
        *(_OWORD *)(a2 + 48) = v10;
        *(_OWORD *)(a2 + 64) = v20[4];
        long long v11 = v20[1];
        *(_OWORD *)a2 = v20[0];
        *(_OWORD *)(a2 + 16) = v11;
        uint64_t v12 = v22;
        *(void *)(a2 + 80) = v21;
        *(void *)(a2 + 88) = v12;
        *(_OWORD *)(a2 + 96) = v23;
        uint64_t v13 = v25;
        uint64_t v22 = 0;
        uint64_t v25 = 0;
        *(void *)(a2 + 112) = v24;
        *(void *)(a2 + 120) = v13;
        char v8 = 1;
        *(unsigned char *)(a2 + 128) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      LOBYTE(v20[0]) = 0;
      char v26 = 0;
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 128) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 136) = v8;
    return std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, v4);
  }
LABEL_12:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result && v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 136) = 0;
  return result;
}

void *IPC::ArgumentCoder<WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  uint64_t result = (void *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v7) {
    goto LABEL_8;
  }
  *(unsigned char *)uint64_t result = (v5 | v4) == 0;
  if (!(v5 | v4)) {
    return result;
  }
  if (*(_OWORD *)a2 == 0)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x198930344);
  }

  return IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, a2);
}

uint64_t IPC::ArgumentCoder<WebCore::FetchOptionsDestination,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      uint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        uint64_t v9 = *v12;
        unint64_t v8 = v12[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
    goto LABEL_7;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v8 = v1;
    uint64_t v9 = 0;
LABEL_7:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11 && v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
    }
    goto LABEL_8;
  }
  unsigned int v5 = *v4;
  if (v5 >= 0x15)
  {
LABEL_8:
    unsigned int v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  int v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t IPC::ArgumentCoder<WebCore::FetchOptionsCache,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      uint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        uint64_t v9 = *v12;
        unint64_t v8 = v12[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
    goto LABEL_7;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v8 = v1;
    uint64_t v9 = 0;
LABEL_7:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11 && v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
    }
    goto LABEL_8;
  }
  unsigned int v5 = *v4;
  if (v5 >= 6)
  {
LABEL_8:
    unsigned int v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  int v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t IPC::ArgumentCoder<WebCore::ReferrerPolicy,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      uint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        uint64_t v9 = *v12;
        unint64_t v8 = v12[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
    goto LABEL_7;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v8 = v1;
    uint64_t v9 = 0;
LABEL_7:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11 && v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
    }
    goto LABEL_8;
  }
  unsigned int v5 = *v4;
  if (v5 >= 9)
  {
LABEL_8:
    unsigned int v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  int v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t IPC::ArgumentCoder<WebCore::StyleAppearance,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      uint64_t v13 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v2, v1);
        a1 = v13;
        uint64_t v9 = *v13;
        unint64_t v8 = v13[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
    goto LABEL_6;
  }
  uint64_t v4 = (char *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v8 = v1;
    uint64_t v9 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11 && v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
    }
    goto LABEL_7;
  }
  unint64_t v5 = *v4;
  if (v5 > 0x21)
  {
LABEL_7:
    int v6 = 0;
    int v7 = 0;
    return v6 | (v7 << 8);
  }
  int v6 = byte_1994F5E68[v5];
  int v7 = byte_1994F5E8A[v5];
  return v6 | (v7 << 8);
}

unint64_t IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, const void *a2, uint64_t a3)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a3);
  if (a3)
  {
    return IPC::Encoder::encodeSpan<float const,18446744073709551615ul>(a1, a2, a3);
  }
  return result;
}

void *IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v3 = a1[2];
  unint64_t v4 = *a1 + v3;
  unint64_t v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v8 + 8;
    if (v8 > 0xFFFFFFFFFFFFFFF7 || v9 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(void *)(*a1 + v8) = a3;
      a1[2] = v9;
    }
  }
  if (a3) {
    return (void *)IPC::StreamConnectionEncoder::encodeSpan<float const,18446744073709551615ul>(a1, a2, a3);
  }
  return a1;
}

void *IPC::Decoder::decode<std::span<float const,18446744073709551615ul>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    return (void *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void *IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::decode<IPC::Decoder>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v3 < v5 || v3 - v5 <= 7)
  {
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v17 = result[3];
    if (v17)
    {
      char v18 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
        unint64_t result = v18;
        uint64_t v16 = *v18;
        unint64_t v15 = v18[1];
      }
      else
      {
        unint64_t v15 = 0;
        uint64_t v16 = 0;
      }
    }
    goto LABEL_19;
  }
  unint64_t v7 = (unint64_t *)(v4 + v5);
  unint64_t v8 = v7 + 1;
  result[2] = v7 + 1;
  if (!v4)
  {
    unint64_t v15 = v3;
    uint64_t v16 = 0;
LABEL_19:
    void *result = 0;
    result[1] = 0;
    unint64_t result = (void *)result[3];
    if (result && v15) {
      unint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, unint64_t))(*result + 16))(result, v16, v15);
    }
    goto LABEL_22;
  }
  unint64_t v9 = *v7;
  if (v9)
  {
    if (v9 >> 62)
    {
LABEL_22:
      char v14 = 0;
      *(unsigned char *)a2 = 0;
      goto LABEL_16;
    }
    unint64_t v10 = (((unint64_t)v8 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v4;
    unint64_t v11 = 4 * v9;
    if (v3 < v10 || v3 - v10 < v11)
    {
      unint64_t result = (void *)IPC::Decoder::markInvalid((IPC::Decoder *)result);
      goto LABEL_22;
    }
    uint64_t v13 = v4 + v10;
    result[2] = v13 + v11;
    *(void *)a2 = v13;
    *(void *)(a2 + 8) = v9;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  char v14 = 1;
LABEL_16:
  *(unsigned char *)(a2 + 16) = v14;
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<std::optional<WebCore::FilterEffectGeometry>,void>::encode<IPC::Encoder,std::optional<WebCore::FilterEffectGeometry> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 20))
  {
    char v7 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v7);
    if (*(unsigned char *)(a2 + 20))
    {
      return IPC::Encoder::operator<<<WebCore::FilterEffectGeometry const&>(a1, a2);
    }
    else
    {
      unint64_t v5 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::Encoder::operator<<<WebCore::FilterEffectGeometry const&>(v5, v6);
    }
  }
  else
  {
    char v8 = 0;
    return (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(a1, &v8);
  }
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::FilterEffectGeometry const&>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)a2);
  char v5 = *(unsigned char *)(a2 + 16);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  return a1;
}

unint64_t *IPC::Decoder::decode<WebCore::FilterEffectGeometry>(uint64_t a1, unint64_t *a2)
{
  unint64_t result = IPC::Decoder::decode<WebCore::FloatRect>(a2, (uint64_t)&v15);
  unint64_t v5 = a2[1];
  unint64_t v6 = *a2;
  unint64_t v7 = a2[2] - *a2;
  if (v5 <= v7)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v12 = a2[3];
    if (v12)
    {
      if (v5)
      {
        (*(void (**)(unint64_t))(*(void *)v12 + 16))(v12);
        unint64_t v11 = *a2;
        unint64_t v10 = a2[1];
      }
      else
      {
        unint64_t v10 = 0;
        unint64_t v11 = 0;
      }
    }
    goto LABEL_8;
  }
  char v8 = (unsigned __int8 *)(v6 + v7);
  a2[2] = (unint64_t)(v8 + 1);
  if (!v6)
  {
    unint64_t v10 = v5;
    unint64_t v11 = 0;
LABEL_8:
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v13 = a2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        unint64_t v6 = *a2;
        unint64_t v5 = a2[1];
      }
      else
      {
        unint64_t v5 = 0;
        unint64_t v6 = 0;
      }
    }
    goto LABEL_9;
  }
  unsigned int v9 = *v8;
  if (v9 < 0x10)
  {
    if (v16)
    {
      *(_OWORD *)a1 = v15;
      *(unsigned char *)(a1 + 16) = v9;
      *(unsigned char *)(a1 + 20) = 1;
      return result;
    }
LABEL_26:
    __break(1u);
    return result;
  }
LABEL_9:
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = (unint64_t *)a2[3];
  if (result)
  {
    if (v5)
    {
      unint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v6);
      if (*a2) {
        goto LABEL_26;
      }
      unint64_t v5 = a2[1];
      unint64_t result = (unint64_t *)a2[3];
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 20) = 0;
  *a2 = 0;
  a2[1] = 0;
  if (result && v5)
  {
    char v14 = *(uint64_t (**)(void))(*result + 16);
    return (unint64_t *)v14();
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,void>::encode<IPC::Encoder,std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 8);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198930E84);
    }
    unsigned char *result = 0;
    return result;
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x198930E44);
  }
  unsigned char *result = 1;
  if (!*((unsigned char *)a2 + 8))
  {
    char v16 = (unsigned char *)std::__throw_bad_optional_access[abi:sn180100]();
    return (unsigned char *)IPC::ArgumentCoder<std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,void>::decode<IPC::Decoder>(v16, v17);
  }
  if (*a2) {
    int v7 = *(_DWORD *)(*a2 - 12);
  }
  else {
    int v7 = 0;
  }
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v8 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198930E64);
  }
  *(_DWORD *)unint64_t result = v7;
  uint64_t v9 = *a2;
  if (*a2)
  {
    uint64_t v10 = *(unsigned int *)(v9 - 4);
    uint64_t v11 = v9 + 24 * v10;
    if (*(_DWORD *)(v9 - 12))
    {
      uint64_t v12 = *a2;
      if (v10)
      {
        uint64_t v13 = 24 * v10;
        uint64_t v12 = v9;
        while ((unint64_t)(*(void *)v12 + 1) <= 1)
        {
          v12 += 24;
          v13 -= 24;
          if (!v13)
          {
            uint64_t v12 = v11;
            break;
          }
        }
      }
      if (v9) {
        goto LABEL_18;
      }
      goto LABEL_22;
    }
    uint64_t v12 = v9 + 24 * v10;
  }
  else
  {
    uint64_t v12 = 0;
    LODWORD(v10) = 0;
  }
  uint64_t v11 = v9 + 24 * v10;
  if (v9)
  {
LABEL_18:
    uint64_t v14 = v9 + 24 * *(unsigned int *)(v9 - 4);
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v14 = 0;
LABEL_23:
  while (v12 != v14)
  {
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v12);
    unint64_t result = (unsigned char *)IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(v12 + 8), *(unsigned int *)(v12 + 20));
    uint64_t v15 = v12 + 24;
    uint64_t v12 = v11;
    if (v15 != v11)
    {
      uint64_t v12 = v15;
      while ((unint64_t)(*(void *)v12 + 1) <= 1)
      {
        v12 += 24;
        if (v12 == v11)
        {
          uint64_t v12 = v11;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<BOOL>(a2);
  if ((unsigned __int16)result <= 0xFFu)
  {
    *a1 = 0;
    a1[16] = 0;
  }
  else
  {
    if ((_BYTE)result)
    {
      uint64_t result = IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>((uint64_t)&v6, a2);
      char v5 = v7;
      if (v7)
      {
        *(void *)a1 = v6;
        char v5 = 1;
        a1[8] = 1;
      }
      else
      {
        *a1 = 0;
      }
    }
    else
    {
      *a1 = 0;
      a1[8] = 0;
      char v5 = 1;
    }
    a1[16] = v5;
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(uint64_t result, IPC::Decoder *a2)
{
  unint64_t v3 = (unsigned char *)result;
  unint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = ((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a2;
  if (v4 < v6 || v4 - v6 <= 3)
  {
LABEL_69:
    unint64_t v32 = 0;
    uint64_t v33 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v34 = *((void *)a2 + 3);
    if (v34)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v34 + 16))(v34, v5, v4);
        uint64_t v33 = *(void *)a2;
        unint64_t v32 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v32 = 0;
        uint64_t v33 = 0;
      }
    }
    goto LABEL_70;
  }
  unint64_t v8 = (int *)(v5 + v6);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v32 = v4;
    uint64_t v33 = 0;
LABEL_70:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v35 = *((void *)a2 + 3);
    if (v35 && v32) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v33);
    }
    *unint64_t v3 = 0;
    v3[8] = 0;
LABEL_72:
    uint64_t v36 = *(void *)a2;
    uint64_t v37 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result)
    {
      if (v37) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v36);
      }
    }
    return result;
  }
  int v9 = *v8;
  uint64_t v44 = 0;
  int v38 = v9;
  if (!v9)
  {
    uint64_t v31 = 0;
LABEL_62:
    *(void *)unint64_t v3 = v31;
    v3[8] = 1;
    goto LABEL_66;
  }
  int v10 = 0;
  while (2)
  {
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v42);
    if (!v43)
    {
      *unint64_t v3 = 0;
      v3[8] = 0;
      goto LABEL_64;
    }
    uint64_t result = IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, &v39);
    if (!v41)
    {
      *unint64_t v3 = 0;
      v3[8] = 0;
      int v13 = 1;
      goto LABEL_15;
    }
    uint64_t v5 = v43;
    if (!v43)
    {
      __break(1u);
      goto LABEL_69;
    }
    if ((unint64_t)v42 + 1 < 2)
    {
LABEL_13:
      *unint64_t v3 = 0;
      v3[8] = 0;
      int v13 = 1;
      goto LABEL_14;
    }
    uint64_t v14 = v44;
    if (v44
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&v44, 0), (uint64_t v14 = v44) != 0))
    {
      int v15 = *(_DWORD *)(v14 - 8);
    }
    else
    {
      int v15 = 0;
    }
    unsigned int v16 = *((_DWORD *)v42 + 4);
    if (v16 >= 0x100) {
      unsigned int v17 = v16 >> 8;
    }
    else {
      unsigned int v17 = WTF::StringImpl::hashSlowCase(v42);
    }
    char v18 = 0;
    for (int i = 1; ; ++i)
    {
      unsigned int v20 = v17 & v15;
      uint64_t v21 = v14 + 24 * (v17 & v15);
      uint64_t v22 = *(WTF **)v21;
      if (*(void *)v21 == -1)
      {
        char v18 = (void *)(v14 + 24 * v20);
        goto LABEL_36;
      }
      if (!v22) {
        break;
      }
      uint64_t result = WTF::equal(v22, v42, v12);
      if (result) {
        goto LABEL_13;
      }
LABEL_36:
      unsigned int v17 = i + v20;
    }
    if (v18)
    {
      v18[1] = 0;
      v18[2] = 0;
      *char v18 = 0;
      --*(_DWORD *)(v44 - 16);
      uint64_t v21 = (uint64_t)v18;
    }
    long long v23 = v42;
    long long v42 = 0;
    uint64_t v24 = *(WTF::StringImpl **)v21;
    *(void *)uint64_t v21 = v23;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v11);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    uint64_t v25 = v39;
    uint64_t v26 = v40;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t result = *(void *)(v21 + 8);
    if (result)
    {
      *(void *)(v21 + 8) = 0;
      *(_DWORD *)(v21 + 16) = 0;
      uint64_t result = WTF::fastFree((WTF *)result, v11);
    }
    *(void *)(v21 + 8) = v25;
    *(void *)(v21 + 16) = v26;
    if (v44) {
      int v27 = *(_DWORD *)(v44 - 12) + 1;
    }
    else {
      int v27 = 1;
    }
    *(_DWORD *)(v44 - 12) = v27;
    if (v44) {
      int v28 = *(_DWORD *)(v44 - 12);
    }
    else {
      int v28 = 0;
    }
    uint64_t v29 = (*(_DWORD *)(v44 - 16) + v28);
    unint64_t v30 = *(unsigned int *)(v44 - 4);
    if (v30 > 0x400)
    {
      if (v30 <= 2 * v29) {
LABEL_56:
      }
        uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&v44, v21);
    }
    else if (3 * v30 <= 4 * v29)
    {
      goto LABEL_56;
    }
    int v13 = 0;
LABEL_14:
    if (v41)
    {
      uint64_t result = (uint64_t)v39;
      if (v39)
      {
        uint64_t v39 = 0;
        LODWORD(v40) = 0;
        uint64_t result = WTF::fastFree((WTF *)result, v11);
      }
    }
LABEL_15:
    if (v43)
    {
      uint64_t result = (uint64_t)v42;
      long long v42 = 0;
      if (result)
      {
        if (*(_DWORD *)result != 2)
        {
          *(_DWORD *)result -= 2;
          break;
        }
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
        if (v13) {
          goto LABEL_64;
        }
LABEL_27:
        if (++v10 == v38)
        {
          uint64_t v31 = v44;
          goto LABEL_62;
        }
        continue;
      }
    }
    break;
  }
  if (!v13) {
    goto LABEL_27;
  }
LABEL_64:
  uint64_t result = v44;
  if (v44) {
    uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v44, v11);
  }
LABEL_66:
  if (!v3[8]) {
    goto LABEL_72;
  }
  return result;
}

void sub_198931304(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, char a14, WTF::StringImpl *a15, char a16, uint64_t a17)
{
  if (v17) {
    WTF::fastFree(v17, a2);
  }
  if (a14 && a11) {
    WTF::fastFree(a11, a2);
  }
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a17) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a17, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    uint64_t v13 = v6;
    do
    {
      uint64_t v14 = *(WTF::StringImpl **)v13;
      if (*(void *)v13 != -1)
      {
        if (v14)
        {
          uint64_t v16 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, (WTF::StringImpl **)v13);
          unsigned int v17 = *(WTF **)(v16 + 8);
          if (v17)
          {
            *(void *)(v16 + 8) = 0;
            *(_DWORD *)(v16 + 16) = 0;
            WTF::fastFree(v17, v10);
          }
          char v18 = *(WTF::StringImpl **)v16;
          *(void *)uint64_t v16 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2) {
              WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v10);
            }
            else {
              *(_DWORD *)v18 -= 2;
            }
          }
          uint64_t v19 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          *(void *)uint64_t v16 = v19;
          *(void *)(v16 + 8) = 0;
          *(void *)(v16 + 16) = 0;
          uint64_t v20 = *(void *)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          *(void *)(v16 + 8) = v20;
          LODWORD(v20) = *(_DWORD *)(v13 + 16);
          *(_DWORD *)(v13 + 16) = 0;
          *(_DWORD *)(v16 + 16) = v20;
          LODWORD(v20) = *(_DWORD *)(v13 + 20);
          *(_DWORD *)(v13 + 20) = 0;
          *(_DWORD *)(v16 + 20) = v20;
          uint64_t v21 = *(WTF **)(v13 + 8);
          if (v21)
          {
            *(void *)(v13 + 8) = 0;
            *(_DWORD *)(v13 + 16) = 0;
            WTF::fastFree(v21, v10);
          }
          uint64_t v22 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v10);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v11 = v16;
          }
        }
        else
        {
          int v15 = *(WTF **)(v13 + 8);
          if (v15)
          {
            *(void *)(v13 + 8) = 0;
            *(_DWORD *)(v13 + 16) = 0;
            WTF::fastFree(v15, v10);
            uint64_t v14 = *(WTF::StringImpl **)v13;
          }
          *(void *)uint64_t v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v10);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
      }
      v13 += 24;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t IPC::ArgumentCoder<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,void>::encode<IPC::Encoder,WebCore::Font>(IPC::Encoder *this, uint64_t *a2)
{
  if (*a2)
  {
    int v4 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
    if (v5)
    {
      unsigned char *v4 = 1;
      uint64_t v6 = *a2;
      IPC::ArgumentCoder<WebCore::FontInternalAttributes,void>::encode(this, v6 + 240);
      return (uint64_t)IPC::ArgumentCoder<WebCore::FontPlatformData,void>::encode(this, v6 + 88);
    }
    else
    {
      uint64_t result = 831;
      __break(0xC471u);
    }
  }
  else
  {
    char v8 = 0;
    return IPC::Encoder::operator<<<BOOL>(this, &v8);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 24 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::TextList,void>::encode(a1, v6);
      v6 += 24;
      v7 -= 24;
    }
    while (v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::TextList>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = *(WTF::StringImpl **)a2;
  unint64_t v7 = *((void *)a2 + 1);
  unint64_t v8 = v5 - (void)v6;
  if (v7 <= v8)
  {
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v25 = *((void *)a2 + 3);
    if (v25)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
        uint64_t v24 = *(WTF::StringImpl **)a2;
        unint64_t v23 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v24 = 0;
      }
    }
    goto LABEL_18;
  }
  uint64_t v9 = (unsigned __int8 *)v6 + v8;
  *((void *)a2 + 2) = v9 + 1;
  if (!v6)
  {
    unint64_t v23 = v7;
    uint64_t v24 = 0;
LABEL_18:
    unint64_t v7 = 0;
    uint64_t v6 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v26 = *((void *)a2 + 3);
    if (v26)
    {
      if (v23)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v26 + 16))(v26, v24, v23);
        uint64_t v6 = *(WTF::StringImpl **)a2;
        unint64_t v7 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v6 = 0;
      }
    }
    goto LABEL_19;
  }
  unsigned int v10 = *v9;
  if (v10 < 3)
  {
    unsigned int v11 = v10 | 0x100;
    goto LABEL_5;
  }
LABEL_19:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v27 = *((void *)a2 + 3);
  if (v27 && v7) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v27 + 16))(v27, v6);
  }
  unsigned int v11 = 0;
LABEL_5:
  uint64_t result = (uint64_t)IPC::Decoder::decode<WTF::AtomString>(a2, &v39);
  unsigned int v17 = *(WTF::StringImpl **)a2;
  if (!*(void *)a2)
  {
    if (v40)
    {
      int v28 = v39;
      uint64_t v39 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::destroy(v28, v13);
          uint64_t v29 = *(WTF::StringImpl **)a2;
LABEL_26:
          uint64_t v30 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v31 = *((void *)a2 + 3);
          if (v31 && v30) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v31 + 16))(v31, v29);
          }
          LOBYTE(v11) = 0;
LABEL_9:
          uint64_t result = IPC::Decoder::decode<unsigned int>(a2);
          unint64_t v18 = *((void *)a2 + 1);
          uint64_t v19 = *(WTF::StringImpl **)a2;
          unint64_t v20 = *((void *)a2 + 2) - *(void *)a2;
          if (v18 <= v20)
          {
            uint64_t v14 = 0;
            uint64_t v15 = 0;
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v32 = *((void *)a2 + 3);
            if (v32)
            {
              uint64_t v38 = result;
              if (v18)
              {
                (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
                uint64_t v15 = *(void *)a2;
                uint64_t v14 = *((void *)a2 + 1);
              }
              else
              {
                uint64_t v14 = 0;
                uint64_t v15 = 0;
              }
              uint64_t result = v38;
            }
          }
          else
          {
            uint64_t v21 = (unsigned __int8 *)v19 + v20;
            *((void *)a2 + 2) = v21 + 1;
            if (v19)
            {
              unsigned int v22 = *v21;
              if (v22 > 1) {
                goto LABEL_30;
              }
              uint64_t v15 = 0;
              uint64_t v14 = v22 != 0;
              if (!v17) {
                goto LABEL_51;
              }
LABEL_13:
              if ((result & 0xFF00000000) == 0 || v15) {
                goto LABEL_51;
              }
              *(unsigned char *)a1 = v11;
              *(void *)(a1 + 8) = v2;
              *(_DWORD *)(a1 + 16) = result;
              *(unsigned char *)(a1 + 20) = v14;
              *(unsigned char *)(a1 + 24) = 1;
              return result;
            }
            uint64_t v14 = v18;
            uint64_t v15 = 0;
          }
          unint64_t v18 = 0;
          uint64_t v19 = 0;
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v16 = *((void *)a2 + 3);
          if (v16) {
            goto LABEL_52;
          }
          goto LABEL_30;
        }
        *(_DWORD *)v28 -= 2;
      }
    }
    uint64_t v29 = 0;
    goto LABEL_26;
  }
  if (v11 > 0xFF)
  {
    uint64_t v14 = v40;
    if (v40)
    {
      uint64_t v2 = v39;
      goto LABEL_9;
    }
  }
LABEL_51:
  while (1)
  {
    __break(1u);
LABEL_52:
    uint64_t v37 = result;
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v15, v14);
      uint64_t v19 = *(WTF::StringImpl **)a2;
      unint64_t v18 = *((void *)a2 + 1);
    }
    else
    {
      unint64_t v18 = 0;
      uint64_t v19 = 0;
    }
    uint64_t result = v37;
LABEL_30:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v33 = *((void *)a2 + 3);
    if (!v33) {
      break;
    }
    if (!v18) {
      break;
    }
    uint64_t v36 = result;
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v33 + 16))(v33, v19);
    uint64_t result = v36;
    if (!*(void *)a2) {
      break;
    }
    uint64_t v14 = 0;
    uint64_t v15 = 1;
    if (v17) {
      goto LABEL_13;
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (v17 && v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, v19);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  uint64_t v34 = *(WTF::StringImpl **)a2;
  uint64_t v35 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result)
  {
    if (v35) {
      return (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v34);
    }
  }
  return result;
}

void sub_198931AC8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v3 && v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextList>(uint64_t a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 12);
  *(unsigned char *)uint64_t v4 = *(unsigned char *)result;
  uint64_t v5 = *(void *)(result + 8);
  *(void *)(result + 8) = 0;
  *(void *)(v4 + 8) = v5;
  LOBYTE(v5) = *(unsigned char *)(result + 20);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(result + 16);
  *(unsigned char *)(v4 + 20) = v5;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x198931CC8);
    }
    unint64_t v3 = *(WTF::StringImpl **)a1;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)a1 + 24 * *(unsigned int *)(a1 + 12));
    int v5 = 24 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::TextList>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::TextList>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    do
    {
      *(unsigned char *)a3 = *(unsigned char *)v5;
      uint64_t v6 = *((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      *(void *)(a3 + 8) = v6;
      LODWORD(v6) = *((_DWORD *)v5 + 4);
      *(unsigned char *)(a3 + 20) = *((unsigned char *)v5 + 20);
      *(_DWORD *)(a3 + 16) = v6;
      unint64_t result = (WTF::StringImpl *)*((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      int v5 = (WTF::StringImpl *)((char *)v5 + 24);
      a3 += 24;
    }
    while (v5 != a2);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  if (result[2] > this)
  {
    uint64_t v3 = (uint64_t)result;
    unint64_t v4 = result[3];
    if (v4 > this)
    {
      unint64_t result = (unsigned int *)WTF::VectorDestructor<true,WebCore::TextList>::destruct((WTF::StringImpl *)(*(void *)result + 24 * this), (WTF::StringImpl *)(*(void *)result + 24 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    int v5 = *(WTF::StringImpl **)v3;
    if (this)
    {
      if (this >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v6 = (WTF *)(24 * this);
      unint64_t result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF8) / 0x18;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        unint64_t result = (unsigned int *)WTF::VectorMover<false,WebCore::TextList>::move(v5, (WTF::StringImpl *)((char *)v5 + 24 * v4), (uint64_t)result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebCore::FontPlatformSerializedData,WebCore::FontPlatformSerializedCreationData>,void>::encode<IPC::Encoder,std::variant<WebCore::FontPlatformSerializedData,WebCore::FontPlatformSerializedCreationData>,0ul>(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 416) == 1)
    {
      unint64_t v4 = result;
      IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(result, *(const void **)a2, *(unsigned int *)(a2 + 12));
      IPC::ArgumentCoder<std::optional<WebCore::FontPlatformSerializedAttributes>,void>::encode<IPC::Encoder,std::optional<WebCore::FontPlatformSerializedAttributes> const&>(v4, a2 + 16);
      return (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, (uint64_t *)(a2 + 408));
    }
    else
    {
      uint64_t v5 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)std::__optional_destruct_base<WebCore::FontPlatformSerializedData,false>::~__optional_destruct_base[abi:sn180100](v5);
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::FontPlatformSerializedData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 416))
  {
    if (*(unsigned char *)(a1 + 408)) {
      WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes((WebCore::FontPlatformSerializedAttributes *)(a1 + 24), a2);
    }
    uint64_t v3 = *(const void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3) {
      CFRelease(v3);
    }
    unint64_t v4 = *(const void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4) {
      CFRelease(v4);
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::FontPlatformSerializedCreationData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 416))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 408);
    *(void *)(a1 + 408) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    if (*(unsigned char *)(a1 + 400)) {
      WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes((WebCore::FontPlatformSerializedAttributes *)(a1 + 16), a2);
    }
    unint64_t v4 = *(WTF **)a1;
    if (*(void *)a1)
    {
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  return a1;
}

void IPC::VectorArgumentCoder<false,WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  if (v4)
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = 48 * v4;
    do
    {
      IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> const&>(a1, v5);
      v5 += 48;
      v6 -= 48;
    }
    while (v6);
  }
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (result >= 0x5555)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::FormDataElement>(v10, a2);
      if (!v12) {
        break;
      }
      if (HIDWORD(v14) == v14)
      {
        WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FormDataElement>((uint64_t)&v13, (unint64_t)v10);
      }
      else
      {
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,(std::__variant_detail::_Trait)1>::__move_constructor(v13 + 48 * HIDWORD(v14), (uint64_t)v10);
        ++HIDWORD(v14);
      }
      if (v12 && v11 != -1) {
        ((void (*)(char *, unsigned char *))off_1EE9B4768[v11])(&v15, v10);
      }
      if (!--v6)
      {
        WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v13, HIDWORD(v14));
        *(void *)a1 = v13;
        unint64_t v9 = v14;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        *(void *)(a1 + 8) = v9;
        goto LABEL_15;
      }
    }
  }
  else
  {
    if (!result)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
LABEL_14:
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
LABEL_15:
      *(unsigned char *)(a1 + 16) = 1;
      return WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v5);
    }
    LODWORD(v14) = 48 * (int)result / 0x30u;
    uint64_t v13 = WTF::fastMalloc((WTF *)(48 * result));
    while (1)
    {
      IPC::Decoder::decode<WebCore::FormDataElement>(v10, a2);
      if (!v12) {
        break;
      }
      if (HIDWORD(v14) == v14)
      {
        WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FormDataElement>((uint64_t)&v13, (unint64_t)v10);
      }
      else
      {
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,(std::__variant_detail::_Trait)1>::__move_constructor(v13 + 48 * HIDWORD(v14), (uint64_t)v10);
        ++HIDWORD(v14);
      }
      if (v12)
      {
        if (v11 != -1) {
          ((void (*)(char *, unsigned char *))off_1EE9B4768[v11])(&v15, v10);
        }
      }
      if (!--v6)
      {
        uint64_t v7 = v13;
        unint64_t v8 = v14;
        goto LABEL_14;
      }
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  return WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v5);
}

void sub_198932218(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, int a15, char a16, int a17, char a18)
{
  if (a16)
  {
    if (a14 != -1) {
      (*(void (**)(uint64_t, uint64_t *))(v18 + 8 * a14))(v19 - 49, &a9);
    }
  }
  WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a18, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebCore::FormDataElement>(unsigned char *a1, IPC::Decoder *a2)
{
  if (!a1[48]) {
    IPC::Decoder::markInvalid(a2);
  }
}

void sub_1989322A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 48))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 40);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B4768[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 40) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FormDataElement>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,(std::__variant_detail::_Trait)1>::__move_constructor(*(void *)a1 + 48 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x1989324ACLL);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    uint64_t v4 = *(void *)result + 48 * *(unsigned int *)(result + 12);
    int v5 = 48 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)uint64_t v2 = v6;
    uint64_t result = WTF::VectorMover<false,WebCore::FormDataElement>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::FormDataElement>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    uint64_t v7 = result;
    do
    {
      uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,(std::__variant_detail::_Trait)1>::__move_constructor(a3, v7);
      uint64_t v8 = *(unsigned int *)(v7 + 40);
      if (v8 != -1) {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9B4768[v8])(&v9, v7);
      }
      *(_DWORD *)(v7 + 40) = -1;
      a3 += 48;
      v7 += 48;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t this)
{
  if (*(unsigned int *)(result + 8) > this)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    int v5 = *(WTF **)result;
    if (v4 > this)
    {
      uint64_t v6 = (char *)v5 + 48 * this;
      uint64_t v7 = 48 * v4 - 48 * this;
      do
      {
        uint64_t v8 = *((unsigned int *)v6 + 10);
        if (v8 != -1) {
          uint64_t result = ((uint64_t (*)(char *, char *))off_1EE9B4768[v8])(&v10, v6);
        }
        *((_DWORD *)v6 + 10) = -1;
        v6 += 48;
        v7 -= 48;
      }
      while (v7);
      *(_DWORD *)(v3 + 12) = this;
      int v5 = *(WTF **)v3;
      LODWORD(v4) = this;
    }
    if (this)
    {
      if (this >= 0x5555556)
      {
        __break(0xC471u);
        return result;
      }
      char v9 = (WTF *)(48 * this);
      uint64_t result = WTF::fastMalloc(v9);
      *(_DWORD *)(v3 + 8) = (v9 & 0xFFFFFFF0) / 0x30;
      *(void *)uint64_t v3 = result;
      if ((WTF *)result != v5) {
        uint64_t result = WTF::VectorMover<false,WebCore::FormDataElement>::move((uint64_t)v5, (uint64_t)v5 + 48 * v4, result);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebCore::FloatPoint,WebCore::FloatSize>,void>::encode<IPC::Encoder,std::variant<WebCore::FloatPoint,WebCore::FloatSize> const&>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = a1;
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<WebCore::FloatPoint,WebCore::FloatSize>,void>::encode<IPC::Encoder,std::variant<WebCore::FloatPoint,WebCore::FloatSize> const&,0ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 8))
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WebCore::FloatPoint,WebCore::FloatSize>,void>::encode<IPC::Encoder,std::variant<WebCore::FloatPoint,WebCore::FloatSize> const&,0ul>(a1, a2, a3);
  }
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)a2);
  float v5 = *(float *)(a2 + 4);

  return (IPC::Encoder *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v4, v5);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebCore::FloatPoint,WebCore::FloatSize>,void>::encode<IPC::Encoder,std::variant<WebCore::FloatPoint,WebCore::FloatSize> const&,0ul>(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 8) == 1)
    {
      return IPC::Encoder::operator<<<WebCore::FloatPoint const&>(result, (float *)a2);
    }
    else
    {
      uint64_t v3 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::ArgumentCoder<std::tuple<WebCore::ScrollRequestType,std::variant<WebCore::FloatPoint,WebCore::FloatSize>,WebCore::ScrollType,WebCore::ScrollClamping>,void>::encode<IPC::Encoder,std::tuple<WebCore::ScrollRequestType,std::variant<WebCore::FloatPoint,WebCore::FloatSize>,WebCore::ScrollType,WebCore::ScrollClamping> const&,0ul,1ul,2ul,3ul>(v3);
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ScrollRequestType,std::variant<WebCore::FloatPoint,WebCore::FloatSize>,WebCore::ScrollType,WebCore::ScrollClamping>,void>::encode<IPC::Encoder,std::tuple<WebCore::ScrollRequestType,std::variant<WebCore::FloatPoint,WebCore::FloatSize>,WebCore::ScrollType,WebCore::ScrollClamping> const&,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  unsigned __int8 v6 = *(_DWORD *)(a2 + 12);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v6);
  IPC::ArgumentCoder<std::variant<WebCore::FloatPoint,WebCore::FloatSize>,void>::encode<IPC::Encoder,std::variant<WebCore::FloatPoint,WebCore::FloatSize> const&>(a1, a2 + 4, v6);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 16));
  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 17));
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 40 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::SnapOffset<float>,void>::encode(a1, v6);
      v6 += 40;
      v7 -= 40;
    }
    while (v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::SnapOffset<float>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<float>(a2);
  LOWORD(v44) = 0;
  IPC::Decoder::operator>><BOOL>(a2, &v44);
  int v5 = BYTE1(v44);
  if (!BYTE1(v44)) {
    goto LABEL_27;
  }
  for (char i = (char)v44; ; char i = 0)
  {
    unint64_t v6 = a2[1];
    uint64_t v7 = *a2;
    unint64_t v8 = a2[2] - *a2;
    if (v6 <= v8)
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v32 = a2[3];
      if (v32)
      {
        if (v6)
        {
          (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
          uint64_t v31 = *a2;
          uint64_t v30 = a2[1];
        }
        else
        {
          uint64_t v30 = 0;
          uint64_t v31 = 0;
        }
      }
      goto LABEL_30;
    }
    char v9 = (unsigned __int8 *)(v7 + v8);
    a2[2] = (uint64_t)(v9 + 1);
    if (!v7)
    {
      uint64_t v30 = v6;
      uint64_t v31 = 0;
LABEL_30:
      *a2 = 0;
      a2[1] = 0;
      uint64_t v33 = a2[3];
      if (v33 && v30)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v31, v30);
        unsigned int v10 = 0;
        uint64_t v7 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v7 = 0;
        unsigned int v10 = 0;
      }
      goto LABEL_32;
    }
    unsigned int v10 = *v9;
    if (v10 < 2)
    {
      int v11 = 0;
      char v12 = 1;
      goto LABEL_7;
    }
LABEL_32:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v34 = a2[3];
    if (v34 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v7);
    }
    char v12 = 0;
    int v11 = 1;
LABEL_7:
    if (v10) {
      char v13 = v12;
    }
    else {
      char v13 = 0;
    }
    unint64_t v14 = IPC::Decoder::decode<WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits>>(a2);
    char v16 = v15;
    unsigned int v17 = (unsigned __int8 *)a2[1];
    uint64_t v18 = *a2;
    unint64_t v19 = a2[2] - *a2;
    if ((unint64_t)v17 <= v19)
    {
      unint64_t v20 = 0;
      uint64_t v35 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v36 = a2[3];
      if (v36)
      {
        if (v17)
        {
          (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
          uint64_t v35 = *a2;
          unint64_t v20 = (unsigned __int8 *)a2[1];
        }
        else
        {
          unint64_t v20 = 0;
          uint64_t v35 = 0;
        }
      }
      goto LABEL_35;
    }
    unint64_t v20 = (unsigned __int8 *)(v18 + v19);
    a2[2] = (uint64_t)(v20 + 1);
    if (!v18)
    {
      unint64_t v20 = v17;
      uint64_t v35 = 0;
LABEL_35:
      *a2 = 0;
      a2[1] = 0;
      uint64_t v37 = a2[3];
      if (v37)
      {
        if (v20)
        {
          (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v37 + 16))(v37, v35, v20);
          LODWORD(v20) = 0;
          uint64_t v18 = *a2;
          unsigned int v17 = (unsigned __int8 *)a2[1];
        }
        else
        {
          unsigned int v17 = 0;
          uint64_t v18 = 0;
        }
      }
      else
      {
        unsigned int v17 = 0;
        uint64_t v18 = 0;
        LODWORD(v20) = 0;
      }
      goto LABEL_37;
    }
    LODWORD(v20) = *v20;
    if (v20 < 2)
    {
      int v21 = 0;
      char v22 = 1;
      goto LABEL_14;
    }
LABEL_37:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v38 = a2[3];
    if (v38)
    {
      int v41 = (int)v20;
      if (v17) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v18);
      }
      char v22 = 0;
      int v21 = 1;
      LODWORD(v20) = v41;
    }
    else
    {
      char v22 = 0;
      int v21 = 1;
    }
LABEL_14:
    char v23 = v20 ? v22 : 0;
    uint64_t result = IPC::Decoder::decode<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v44, (IPC::Decoder *)a2);
    if (!*a2) {
      break;
    }
    if ((v4 & 0xFF00000000) != 0 && v5 && !v11 && v16 && !v21 && v46)
    {
      uint64_t v26 = v44;
      *(_DWORD *)a1 = v4;
      *(unsigned char *)(a1 + 4) = i;
      *(unsigned char *)(a1 + 5) = v13;
      *(void *)(a1 + 8) = v14;
      *(unsigned char *)(a1 + 16) = v23;
      *(void *)(a1 + 24) = v26;
      *(void *)(a1 + 32) = v45;
      *(unsigned char *)(a1 + 40) = 1;
      return result;
    }
    __break(1u);
LABEL_27:
    uint64_t v27 = *a2;
    uint64_t v28 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v29 = a2[3];
    if (v29)
    {
      if (v28) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v27);
      }
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (v46)
  {
    long long v42 = v44;
    if (v44)
    {
      uint64_t v44 = 0;
      LODWORD(v45) = 0;
      WTF::fastFree(v42, v25);
    }
  }
  uint64_t v39 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result && v39)
  {
    unsigned __int8 v40 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v40();
  }
  return result;
}

__n128 WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SnapOffset<float>>(unsigned int *a1, unint64_t a2)
{
  uint64_t v3 = (__n128 *)WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = (__n128 *)(*(void *)a1 + 40 * a1[3]);
  __n128 result = *v3;
  v4[1].n128_u8[0] = v3[1].n128_u8[0];
  __n128 *v4 = result;
  v4[1].n128_u64[1] = 0;
  v4[2].n128_u64[0] = 0;
  unint64_t v6 = v3[1].n128_u64[1];
  v3[1].n128_u64[1] = 0;
  v4[1].n128_u64[1] = v6;
  LODWORD(v6) = v3[2].n128_u32[0];
  v3[2].n128_u32[0] = 0;
  v4[2].n128_u32[0] = v6;
  LODWORD(v6) = v3[2].n128_u32[1];
  v3[2].n128_u32[1] = 0;
  v4[2].n128_u32[1] = v6;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF *WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x198932E80);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    uint64_t v4 = (WTF *)(*(void *)result + 40 * *((unsigned int *)result + 3));
    int v5 = 40 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)uint64_t v2 = v6;
    __n128 result = WTF::VectorMover<false,WebCore::SnapOffset<float>>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF *WTF::VectorMover<false,WebCore::SnapOffset<float>>::move(WTF *result, WTF *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    do
    {
      long long v6 = *(_OWORD *)v5;
      *(unsigned char *)(a3 + 16) = *((unsigned char *)v5 + 16);
      *(_OWORD *)a3 = v6;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      uint64_t v7 = *((void *)v5 + 3);
      *((void *)v5 + 3) = 0;
      *(void *)(a3 + 24) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 8);
      *((_DWORD *)v5 + 8) = 0;
      *(_DWORD *)(a3 + 32) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 9);
      *((_DWORD *)v5 + 9) = 0;
      *(_DWORD *)(a3 + 36) = v7;
      __n128 result = (WTF *)*((void *)v5 + 3);
      if (result)
      {
        *((void *)v5 + 3) = 0;
        *((_DWORD *)v5 + 8) = 0;
        __n128 result = (WTF *)WTF::fastFree(result, a2);
      }
      int v5 = (WTF *)((char *)v5 + 40);
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

unint64_t IPC::Decoder::decodeSpan<unsigned long const>(IPC::Decoder *a1, unint64_t a2)
{
  if (a2 >> 61) {
    return 0;
  }
  unint64_t v2 = *((void *)a1 + 1);
  unint64_t v3 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  unint64_t v4 = 8 * a2;
  BOOL v6 = v2 >= v3;
  unint64_t v5 = v2 - v3;
  BOOL v6 = v6 && v5 >= v4;
  if (v6)
  {
    unint64_t v8 = (*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8;
    *((void *)a1 + 2) = v8 + v4;
  }
  else
  {
    IPC::Decoder::markInvalid(a1);
    return 0;
  }
  return v8;
}

WTF::StringImpl *IPC::ArgumentCoder<std::optional<WebCore::Color>,void>::encode<IPC::Encoder,std::optional<WebCore::Color> const&>(IPC::Encoder *a1, unsigned __int8 *a2)
{
  int v4 = a2[8];
  __n128 result = (WTF::StringImpl *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198933034);
    }
    *(unsigned char *)__n128 result = 1;
    if (a2[8])
    {
      return (WTF::StringImpl *)IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)a2);
    }
    else
    {
      uint64_t v7 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,void>::encode<IPC::Encoder,std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule> const&>(v7, v8, v9);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198933054);
    }
    *(unsigned char *)__n128 result = 0;
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,void>::encode<IPC::Encoder,std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule> const&>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,void>::encode<IPC::Encoder,std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule> const&,0ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 16))
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,void>::encode<IPC::Encoder,std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule> const&,0ul>(a1, a2, a3);
  }

  return (WTF::StringImpl *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
}

WTF::StringImpl *IPC::ArgumentCoder<std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,void>::encode<IPC::Encoder,std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule> const&,0ul>(IPC::Encoder *this, uint64_t a2, uint64_t a3)
{
  int v4 = this;
  if (a3 != 1)
  {
    return IPC::ArgumentCoder<std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,void>::encode<IPC::Encoder,std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule> const&,0ul,1ul>(this, a2, a3);
  }
  if (*(_DWORD *)(a2 + 16) != 1)
  {
    this = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,void>::encode<IPC::Encoder,std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule> const&,0ul,1ul>(this, a2, a3);
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, (uint64_t *)a2);

  return (WTF::StringImpl *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, (uint64_t *)(a2 + 8));
}

WTF::StringImpl *IPC::ArgumentCoder<std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,void>::encode<IPC::Encoder,std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule> const&,0ul,1ul>(WTF::StringImpl *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 2)
  {
    if (*(_DWORD *)(a2 + 16) == 2)
    {
      return (WTF::StringImpl *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(result, (uint64_t *)a2);
    }
    else
    {
      unint64_t v3 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,void>::decode<IPC::Decoder>(v3, v4);
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,void>::decode<IPC::Decoder>@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (WTF::StringImpl **)result;
  uint64_t v4 = (WTF::StringImpl *)*((void *)result + 1);
  uint64_t v5 = *(void *)result;
  unint64_t v6 = *((void *)result + 2) - *(void *)result;
  if ((unint64_t)v4 <= v6)
  {
    unint64_t v19 = 0;
    unint64_t v20 = 0;
    *(void *)__n128 result = 0;
    *((void *)result + 1) = 0;
    uint64_t v21 = *((void *)result + 3);
    if (v21)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, WTF::StringImpl *))(*(void *)v21 + 16))(v21, v5, v4);
        unint64_t v20 = *v2;
        unint64_t v19 = v2[1];
      }
      else
      {
        unint64_t v19 = 0;
        unint64_t v20 = 0;
      }
    }
    goto LABEL_34;
  }
  uint64_t v7 = (unsigned char *)(v5 + v6);
  *((void *)result + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v19 = v4;
    unint64_t v20 = 0;
LABEL_34:
    *unint64_t v2 = 0;
    v2[1] = 0;
    __n128 result = v2[3];
    if (result && v19) {
      __n128 result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
    }
                                                                                                  + 16))(result, v20);
    goto LABEL_4;
  }
  unsigned int v8 = *v7;
  if (v8 >= 3)
  {
LABEL_4:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    return result;
  }
  if (!*v7)
  {
    __n128 result = IPC::Decoder::decode<WTF::AtomString>(result, v26);
    LODWORD(v11) = LOBYTE(v26[1]);
    if (!*v2) {
      goto LABEL_38;
    }
    if (!LOBYTE(v26[1]))
    {
LABEL_37:
      __break(1u);
LABEL_38:
      if (v11)
      {
        char v22 = v26[0];
        v26[0] = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, v9);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
      }
      uint64_t v9 = *v2;
      uint64_t v25 = v2[1];
LABEL_54:
      *unint64_t v2 = 0;
      v2[1] = 0;
      __n128 result = v2[3];
      if (result && v25) {
        __n128 result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v9);
      }
      char v16 = 0;
      *(unsigned char *)a2 = 0;
      goto LABEL_25;
    }
    *(WTF::StringImpl **)a2 = v26[0];
    *(_DWORD *)(a2 + 16) = 0;
LABEL_24:
    char v16 = 1;
LABEL_25:
    *(unsigned char *)(a2 + 24) = v16;
    return result;
  }
  if (v8 != 1)
  {
    __n128 result = IPC::Decoder::decode<WTF::AtomString>(result, v26);
    uint64_t v9 = *v2;
    LODWORD(v11) = LOBYTE(v26[1]);
    if (!*v2)
    {
      if (LOBYTE(v26[1]))
      {
        char v23 = v26[0];
        v26[0] = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
          {
            WTF::StringImpl::destroy(v23, 0);
            uint64_t v9 = *v2;
          }
          else
          {
            *(_DWORD *)v23 -= 2;
          }
        }
      }
      uint64_t v25 = v2[1];
      goto LABEL_54;
    }
    if (!LOBYTE(v26[1])) {
      goto LABEL_37;
    }
    *(WTF::StringImpl **)a2 = v26[0];
    *(_DWORD *)(a2 + 16) = 2;
    goto LABEL_24;
  }
  IPC::Decoder::decode<WTF::AtomString>(result, &v30);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v28);
  unint64_t v10 = *v2;
  if (*v2)
  {
    LODWORD(v11) = v31;
    if (v31)
    {
      int v11 = v30;
      uint64_t v30 = 0;
      if (v29)
      {
        v26[0] = v11;
        v26[1] = v28;
        int v12 = 1;
        unsigned __int8 v27 = 1;
        goto LABEL_11;
      }
    }
    goto LABEL_37;
  }
  int v12 = 0;
  LOBYTE(v26[0]) = 0;
  unsigned __int8 v27 = 0;
  if (v29)
  {
    uint64_t v24 = v28;
    uint64_t v28 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 != 2)
      {
        int v12 = 0;
        *(_DWORD *)v24 -= 2;
        goto LABEL_11;
      }
      WTF::StringImpl::destroy(v24, v9);
    }
    int v12 = 0;
  }
LABEL_11:
  if (v31)
  {
    char v13 = v30;
    uint64_t v30 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v9);
        if (v10) {
          goto LABEL_16;
        }
LABEL_30:
        uint64_t v9 = *v2;
        unsigned int v17 = v2[1];
        *unint64_t v2 = 0;
        v2[1] = 0;
        uint64_t v18 = v2[3];
        if (v18 && v17)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v18 + 16))(v18, v9);
          int v12 = v27;
        }
        goto LABEL_16;
      }
      *(_DWORD *)v13 -= 2;
    }
  }
  if (!v10) {
    goto LABEL_30;
  }
LABEL_16:
  if (v12)
  {
    long long v14 = *(_OWORD *)v26;
    v26[0] = 0;
    v26[1] = 0;
    *(_OWORD *)a2 = v14;
    char v15 = 1;
    *(_DWORD *)(a2 + 16) = 1;
  }
  else
  {
    char v15 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 24) = v15;
  return (WTF::StringImpl *)std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v26, v9);
}

void sub_1989334C0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16)
{
}

IPC::Encoder *IPC::ArgumentCoder<WTF::Markable<WebCore::ContentSecurityPolicyResponseHeaders,WebCore::ContentSecurityPolicyResponseHeaders::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WebCore::ContentSecurityPolicyResponseHeaders,WebCore::ContentSecurityPolicyResponseHeaders::MarkableTraits> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 20);
  __n128 result = (IPC::Encoder *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6) {
    goto LABEL_7;
  }
  *(unsigned char *)__n128 result = v4;
  if (v4) {
    return result;
  }
  if (*(unsigned char *)(a2 + 20))
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x19893359CLL);
  }

  return IPC::Encoder::operator<<<WebCore::ContentSecurityPolicyResponseHeaders const&>(a1, a2);
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = 32 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebCore::ImageResource,void>::encode(a1, v6);
      v6 += 4;
      v7 -= 32;
    }
    while (v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ImageResource>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v19);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v17);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v15);
  unint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v13);
  uint64_t v6 = *(void *)a2;
  if (*(void *)a2)
  {
    if (v20)
    {
      uint64_t v7 = v19;
      unint64_t v19 = 0;
      if (v18)
      {
        unsigned int v8 = v17;
        unsigned int v17 = 0;
        if (v16)
        {
          uint64_t v9 = v15;
          char v15 = 0;
          if (v14)
          {
            unint64_t v10 = v13;
            *(void *)a1 = v7;
            *(void *)(a1 + 8) = v8;
            *(void *)(a1 + 16) = v9;
            *(void *)(a1 + 24) = v10;
            *(unsigned char *)(a1 + 32) = 1;
            goto LABEL_7;
          }
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (v14)
  {
    unint64_t result = v13;
    char v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_7:
  if (v16)
  {
    unint64_t result = v15;
    char v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v18)
  {
    unint64_t result = v17;
    unsigned int v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v20)
  {
    unint64_t result = v19;
    unint64_t v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (v6) {
          return result;
        }
        goto LABEL_30;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v6) {
    return result;
  }
LABEL_30:
  uint64_t v11 = *(void *)a2;
  uint64_t v12 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result)
  {
    if (v12) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v11);
    }
  }
  return result;
}

void sub_1989337D8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14, WTF::StringImpl *a15, char a16)
{
  std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100](v16, a2);
  _Unwind_Resume(a1);
}

uint64_t *WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ImageResource>(unsigned int *a1, unint64_t a2)
{
  unint64_t result = (uint64_t *)WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = a1[3];
  unsigned int v5 = v4 + 1;
  uint64_t v6 = (void *)(*(void *)a1 + 32 * v4);
  uint64_t v7 = *result;
  uint64_t *result = 0;
  *uint64_t v6 = v7;
  uint64_t v8 = result[1];
  result[1] = 0;
  v6[1] = v8;
  uint64_t v9 = result[2];
  result[2] = 0;
  v6[2] = v9;
  uint64_t v10 = result[3];
  result[3] = 0;
  v6[3] = v10;
  a1[3] = v5;
  return result;
}

unint64_t WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x198933A44);
    }
    unint64_t v3 = result;
    uint64_t v4 = *(WTF::StringImpl **)result;
    uint64_t v5 = (WTF::StringImpl *)(*(void *)result + 32 * *((unsigned int *)result + 3));
    uint64_t v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(32 * a2));
    *((_DWORD *)v3 + 2) = v2;
    *(void *)unint64_t v3 = v6;
    unint64_t result = WTF::VectorMover<false,WebCore::ImageResource>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)v3 == v4)
      {
        *(void *)unint64_t v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v4, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ImageResource>::move(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  if (result != a2)
  {
    uint64_t v5 = (WTF::StringImpl **)result;
    do
    {
      uint64_t v6 = *v5;
      *uint64_t v5 = 0;
      *a3 = v6;
      unint64_t v7 = v5[1];
      v5[1] = 0;
      a3[1] = v7;
      unint64_t v8 = v5[2];
      void v5[2] = 0;
      a3[2] = v8;
      unint64_t v9 = v5[3];
      v5[3] = 0;
      a3[3] = v9;
      unint64_t v10 = v5[3];
      v5[3] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, a2);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      uint64_t v11 = v5[2];
      void v5[2] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, a2);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      uint64_t v12 = v5[1];
      v5[1] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, a2);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
      unint64_t result = *v5;
      *uint64_t v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v5 += 4;
      a3 += 4;
    }
    while (v5 != (WTF::StringImpl **)a2);
  }
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::variant<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::variant<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,0ul>(result, a2, a3);
  }
  if (*(_DWORD *)(a2 + 16))
  {
    unint64_t result = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::variant<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,0ul>(result, a2, a3);
  }
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::variant<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,0ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 16) == 1)
    {
      char v6 = *(unsigned char *)a2;
      IPC::Encoder::operator<<<BOOL>(a1, &v6);
      return (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, (uint64_t *)(a2 + 8));
    }
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::variant<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,0ul,1ul>(a1, a2, a3);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::variant<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,0ul,1ul>(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 2)
  {
    if (*(_DWORD *)(a2 + 16) == 2)
    {
    }
    else
    {
      unint64_t result = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    }
    return (IPC::Encoder *)IPC::VectorArgumentCoder<false,WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(result, (uint64_t *)a2);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *((unsigned int *)a2 + 3));
  unsigned int v5 = *((_DWORD *)a2 + 3);
  if (v5)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = v6 + 24 * v5;
    do
    {
      IPC::VectorArgumentCoder<false,WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)v6);
      unint64_t result = IPC::Encoder::operator<<<BOOL>(a1, (char *)(v6 + 16));
      v6 += 24;
    }
    while (v6 != v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::SpeechRecognitionResultData>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    LOBYTE(v45) = 0;
    char v47 = 0;
    goto LABEL_31;
  }
  unint64_t v6 = v4;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  if (v4 < 0x10000)
  {
    if (!v4)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
LABEL_18:
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      uint64_t v45 = (WTF::StringImpl *)v15;
      uint64_t v46 = v16;
      goto LABEL_19;
    }
    LODWORD(v52) = v4;
    uint64_t v51 = WTF::fastMalloc((WTF *)(16 * v4));
    while (1)
    {
      IPC::Decoder::decode<WebCore::SpeechRecognitionAlternativeData>((uint64_t)&v48, a2);
      if (!v50) {
        goto LABEL_30;
      }
      if (HIDWORD(v52) != v52) {
        break;
      }
      uint64_t v7 = (uint64_t *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v51, HIDWORD(v52) + 1, (unint64_t)&v48);
      int v8 = HIDWORD(v52) + 1;
      unint64_t v9 = (void *)(v51 + 16 * HIDWORD(v52));
      uint64_t v10 = *v7;
      uint64_t *v7 = 0;
      void *v9 = v10;
      v9[1] = v7[1];
      HIDWORD(v52) = v8;
      if (v50) {
        goto LABEL_10;
      }
LABEL_14:
      if (!--v6)
      {
        uint64_t v15 = v51;
        uint64_t v16 = v52;
        goto LABEL_18;
      }
    }
    int v11 = HIDWORD(v52) + 1;
    uint64_t v12 = (WTF::StringImpl **)(v51 + 16 * HIDWORD(v52));
    char v13 = v48;
    int v48 = 0;
    WTF::StringImpl *v12 = v13;
    v12[1] = v49;
    HIDWORD(v52) = v11;
LABEL_10:
    char v14 = v48;
    int v48 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v5);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    goto LABEL_14;
  }
  do
  {
    IPC::Decoder::decode<WebCore::SpeechRecognitionAlternativeData>((uint64_t)&v48, a2);
    if (!v50)
    {
LABEL_30:
      LOBYTE(v45) = 0;
      char v47 = 0;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v5);
LABEL_31:
      uint64_t v25 = *(void *)a2;
      uint64_t v26 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
      if (result && v26) {
        unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v25);
      }
      int v17 = 0;
      goto LABEL_33;
    }
    if (HIDWORD(v52) == v52)
    {
      unint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v51, HIDWORD(v52) + 1, (unint64_t)&v48);
      int v19 = HIDWORD(v52) + 1;
      char v20 = (void *)(v51 + 16 * HIDWORD(v52));
      uint64_t v21 = *(void *)result;
      *(void *)unint64_t result = 0;
      *char v20 = v21;
      v20[1] = *((void *)result + 1);
      HIDWORD(v52) = v19;
      if (!v50) {
        goto LABEL_28;
      }
    }
    else
    {
      int v22 = HIDWORD(v52) + 1;
      char v23 = (WTF::StringImpl **)(v51 + 16 * HIDWORD(v52));
      uint64_t v24 = v48;
      int v48 = 0;
      WTF::StringImpl *v23 = v24;
      v23[1] = v49;
      HIDWORD(v52) = v22;
    }
    unint64_t result = v48;
    int v48 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
LABEL_28:
    --v6;
  }
  while (v6);
  unsigned __int8 v40 = (WTF::StringImpl *)v51;
  if (v52 <= HIDWORD(v52)) {
    goto LABEL_62;
  }
  int v41 = (WTF::StringImpl *)v51;
  if (!HIDWORD(v52)) {
    goto LABEL_57;
  }
  uint64_t v44 = HIDWORD(v52);
  if (HIDWORD(v52) >> 28)
  {
    __break(0xC471u);
    return result;
  }
  long long v42 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(16 * HIDWORD(v52)));
  LODWORD(v52) = v44;
  uint64_t v51 = (uint64_t)v42;
  int v41 = v40;
  if (v42 != (WTF::StringImpl **)v40)
  {
    WTF::VectorMover<false,WebCore::SpeechRecognitionAlternativeData>::move(v40, (WTF::StringImpl *)((char *)v40 + 16 * v44), v42);
    int v41 = (WTF::StringImpl *)v51;
  }
LABEL_57:
  if (v40)
  {
    if (v41 == v40)
    {
      uint64_t v51 = 0;
      LODWORD(v52) = 0;
    }
    WTF::fastFree(v40, v5);
    unsigned __int8 v40 = (WTF::StringImpl *)v51;
  }
  else
  {
    unsigned __int8 v40 = v41;
  }
LABEL_62:
  uint64_t v45 = v40;
  uint64_t v43 = v52;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v46 = v43;
LABEL_19:
  int v17 = 1;
  char v47 = 1;
  unint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v5);
LABEL_33:
  unint64_t v27 = *((void *)a2 + 1);
  uint64_t v28 = *(char **)a2;
  unint64_t v29 = *((void *)a2 + 2) - *(void *)a2;
  if (v27 <= v29)
  {
    uint64_t v33 = 0;
    uint64_t v32 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v37 = *((void *)a2 + 3);
    if (v37)
    {
      if (v27)
      {
        (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
        uint64_t v32 = *(void *)a2;
        uint64_t v33 = *((void *)a2 + 1);
      }
      else
      {
        uint64_t v33 = 0;
        uint64_t v32 = 0;
      }
    }
LABEL_46:
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result) {
      goto LABEL_67;
    }
    goto LABEL_47;
  }
  uint64_t v30 = &v28[v29];
  *((void *)a2 + 2) = v30 + 1;
  if (!v28)
  {
    uint64_t v33 = v27;
    uint64_t v32 = 0;
    goto LABEL_46;
  }
  unsigned int v31 = *v30;
  if (v31 > 1) {
    goto LABEL_47;
  }
  uint64_t v32 = 0;
  uint64_t v33 = v31 != 0;
  if (!v17) {
    goto LABEL_66;
  }
LABEL_37:
  uint64_t v34 = v45;
  uint64_t v35 = v46;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  if (v32)
  {
LABEL_66:
    while (1)
    {
      __break(1u);
LABEL_67:
      if (v33)
      {
        (*(void (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(void *)result + 16))(result, v32, v33);
        uint64_t v28 = *(char **)a2;
        unint64_t v27 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v27 = 0;
        uint64_t v28 = 0;
      }
LABEL_47:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
      if (!result) {
        break;
      }
      if (!v27) {
        break;
      }
      unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, char *))(*(void *)result + 16))(result, v28);
      if (!*(void *)a2) {
        break;
      }
      uint64_t v33 = 0;
      uint64_t v32 = 1;
      if (v47) {
        goto LABEL_37;
      }
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    int v36 = 1;
  }
  else
  {
    char v50 = v33;
    int v48 = 0;
    char v49 = 0;
    *(void *)a1 = v34;
    *(void *)(a1 + 8) = v35;
    *(unsigned char *)(a1 + 16) = v33;
    *(unsigned char *)(a1 + 24) = 1;
    unint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v28);
    int v36 = 0;
  }
  if (v47) {
    unint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v28);
  }
  if (v36)
  {
    uint64_t v38 = *(void *)a2;
    uint64_t v39 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result)
    {
      if (v39) {
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v38);
      }
    }
  }
  return result;
}

void sub_1989341A8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, WTF::StringImpl *a14, uint64_t a15, char a16)
{
  if (a13) {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SpeechRecognitionResultData>(uint64_t a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 12);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  uint64_t v5 = *(void *)result;
  *(void *)unint64_t result = 0;
  *(void *)uint64_t v4 = v5;
  LODWORD(v5) = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(result + 16);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1989343FCLL);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    uint64_t v4 = (void *)(*(void *)result + 24 * *(unsigned int *)(result + 12));
    int v5 = 24 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)uint64_t v2 = v6;
    unint64_t result = WTF::VectorMover<false,WebCore::SpeechRecognitionResultData>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::SpeechRecognitionResultData>::move(uint64_t result, void *a2, uint64_t a3)
{
  for (; (void *)result != a2; a3 += 24)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    uint64_t v5 = *(void *)result;
    *(void *)unint64_t result = 0;
    *(void *)a3 = v5;
    LODWORD(v5) = *(_DWORD *)(result + 8);
    *(_DWORD *)(result + 8) = 0;
    *(_DWORD *)(a3 + 8) = v5;
    LODWORD(v5) = *(_DWORD *)(result + 12);
    *(_DWORD *)(result + 12) = 0;
    *(_DWORD *)(a3 + 12) = v5;
    *(unsigned char *)(a3 + 16) = *(unsigned char *)(result + 16);
    unint64_t result = WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2)+ 24;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::VideoFrameRotation,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 1) & 0xFFFFFFFFFFFFFFFELL) - *a1;
  if (v1 >= v3 && v1 - v3 > 1)
  {
    uint64_t v5 = (_WORD *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      int v6 = 0;
      unsigned int v7 = (unsigned __int16)*v5;
      if (v7 > 0xB3)
      {
        if (v7 != 270)
        {
          int v8 = 0;
          int v9 = 0;
          if (v7 != 180) {
            return v8 | v6 | v9;
          }
        }
      }
      else if (*v5)
      {
        int v8 = 0;
        int v9 = 0;
        if (v7 != 90) {
          return v8 | v6 | v9;
        }
      }
      int v8 = v7;
      int v9 = v7 & 0xFF00;
      int v6 = 0x10000;
      return v8 | v6 | v9;
    }
    unint64_t v11 = v1;
    uint64_t v12 = 0;
  }
  else
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      uint64_t v15 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v2, v1);
        a1 = v15;
        uint64_t v12 = *v15;
        unint64_t v11 = v15[1];
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v14 = a1[3];
  if (v14 && v11) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12);
  }
  int v6 = 0;
  int v8 = 0;
  int v9 = 0;
  return v8 | v6 | v9;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    int v6 = *(float **)a2;
    uint64_t v7 = *(void *)a2 + 16 * v5;
    int v8 = v6;
    do
    {
      float v9 = *v8;
      v8 += 4;
      IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v9);
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(v6 + 2));
      int v6 = v8;
    }
    while (v8 != (float *)v7);
  }
  return result;
}

unsigned int *IPC::Decoder::decode<WebCore::GradientColorStop>(unsigned char *a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    int v8 = (int *)(v5 + v6);
    a2[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      int v9 = 0;
      int v10 = *v8;
      goto LABEL_8;
    }
    uint64_t v15 = v4;
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v17 = a2[3];
    if (v17)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v5, v4);
        uint64_t v16 = *a2;
        uint64_t v15 = a2[1];
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  int v10 = 0;
  uint64_t v18 = a2[3];
  if (v18 && v15) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
  }
  int v9 = 1;
LABEL_8:
  unint64_t result = IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, &v22);
  if (!v23)
  {
    uint64_t v12 = (void *)*a2;
    uint64_t v14 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = (unsigned int *)a2[3];
    if (result)
    {
      if (v14) {
        unint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, void *))(*(void *)result + 16))(result, v12);
      }
    }
  }
  uint64_t v13 = *a2;
  if (!*a2)
  {
    *a1 = 0;
    a1[16] = 0;
    goto LABEL_13;
  }
  if (!v9)
  {
    uint64_t v13 = v23;
    if (v23)
    {
      WebCore::Color::Color();
      *(_DWORD *)a1 = v10;
      unint64_t result = (unsigned int *)WebCore::Color::Color();
      a1[16] = 1;
      if ((*(void *)v21 & 0x8000000000000) != 0)
      {
        unint64_t result = (unsigned int *)(*(void *)v21 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result);
          unint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v12);
        }
      }
LABEL_13:
      if (!v23) {
        goto LABEL_15;
      }
      uint64_t v13 = v22;
      if ((v22 & 0x8000000000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_18:
  unint64_t result = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
  if (atomic_fetch_add((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    unint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v12);
  }
LABEL_15:
  if (!a1[16])
  {
    uint64_t v19 = *a2;
    uint64_t v20 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = (unsigned int *)a2[3];
    if (result)
    {
      if (v20) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)result + 16))(result, v19);
      }
    }
  }
  return result;
}

void sub_19893489C(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::VectorBuffer<WebCore::GradientColorStop,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2 = result;
  if (a2 < 3)
  {
    *(void *)unint64_t result = result + 16;
    *(_DWORD *)(result + 8) = 2;
  }
  else
  {
    int v3 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(void *)uint64_t v2 = result;
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GradientColorStop>(unsigned int *a1, unint64_t a2)
{
  *(_DWORD *)(*(void *)a1 + 16 * a1[3]) = *(_DWORD *)WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t result = WebCore::Color::Color();
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(unsigned int **)result;
    unint64_t v4 = (unsigned int *)(*(void *)result + 16 * result[3]);
    WTF::VectorBuffer<WebCore::GradientColorStop,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)result, a2);
    uint64_t result = WTF::VectorMover<false,WebCore::GradientColorStop>::move(v3, v4, *(void *)v2);
    if (v2 + 4 != v3 && v3 != 0)
    {
      if (*(unsigned int **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        v2[2] = 0;
      }
      return (unsigned int *)WTF::fastFree((WTF *)v3, v5);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      uint64_t result = (uint64_t)WTF::VectorDestructor<true,WebCore::GradientColorStop>::destruct((void *)(*(void *)result + 16 * a2), (void *)(*(void *)result + 16 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(unsigned int **)v3;
    if (a2)
    {
      uint64_t result = WTF::VectorBuffer<WebCore::GradientColorStop,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(v3, a2);
      if (*(unsigned int **)v3 != v5) {
        uint64_t result = (uint64_t)WTF::VectorMover<false,WebCore::GradientColorStop>::move(v5, &v5[4 * v4], *(void *)v3);
      }
    }
    if ((unsigned int *)(v3 + 16) != v5 && v5 != 0)
    {
      if (*(unsigned int **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      uint64_t result = WTF::fastFree((WTF *)v5, (void *)a2);
    }
    if (!*(void *)v3)
    {
      *(void *)uint64_t v3 = v3 + 16;
      *(_DWORD *)(v3 + 8) = 2;
    }
  }
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&,0ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 4))
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&,0ul>(a1, a2, a3);
  }
  char v4 = *(unsigned char *)a2;
  return (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(a1, &v4);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&,0ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1)
  {
    return IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&,0ul,1ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 4) != 1)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&,0ul,1ul>(a1, a2, a3);
  }
  char v4 = *(unsigned char *)a2;
  return (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(a1, &v4);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&,0ul,1ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 2)
  {
    return IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&,0ul,1ul,2ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 4) != 2)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&,0ul,1ul,2ul>(a1, a2, a3);
  }
  char v4 = *(unsigned char *)a2;
  return (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(a1, &v4);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&,0ul,1ul,2ul>(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  if (a3 != 3)
  {
    return (IPC::Encoder *)IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&,0ul,1ul,2ul,3ul>(result, a2, a3);
  }
  if (*(_DWORD *)(a2 + 4) != 3)
  {
    uint64_t result = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&,0ul,1ul,2ul,3ul>(result, a2, a3);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 4)
  {
    if (*(_DWORD *)(a2 + 4) == 4)
    {
      char v5 = *(unsigned char *)a2;
      return IPC::Encoder::operator<<<BOOL>(a1, &v5);
    }
    goto LABEL_13;
  }
  uint64_t result = *(unsigned int *)(a2 + 4);
  if (a3 == 6)
  {
    if (result == 6) {
      return result;
    }
    goto LABEL_13;
  }
  if (a3 != 5)
  {
    uint64_t v4 = a3;
    return IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul>(result, v4);
  }
  if (result != 5)
  {
LABEL_13:
    uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul>(result, v4);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul>(uint64_t result, uint64_t a2)
{
  switch(a2)
  {
    case 7:
      if (result != 7) {
        goto LABEL_8;
      }
      return result;
    case 8:
      if (result != 8) {
        goto LABEL_8;
      }
      return result;
    case 9:
      goto LABEL_9;
    case 10:
      if (result != 10) {
        goto LABEL_8;
      }
      return result;
    case 11:
      if (result != 11) {
        goto LABEL_8;
      }
      return result;
    case 12:
      if (result == 12) {
        return result;
      }
      goto LABEL_8;
    default:
      if (a2 == 13 && result != 13)
      {
        do
        {
LABEL_8:
          uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_9:
          ;
        }
        while (result != 9);
      }
      return result;
  }
}

uint64_t IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul>(uint64_t result, uint64_t a2)
{
  switch(a2)
  {
    case 7:
      if (result != 7) {
        goto LABEL_8;
      }
      return result;
    case 8:
      if (result != 8) {
        goto LABEL_8;
      }
      return result;
    case 9:
      goto LABEL_9;
    case 10:
      if (result != 10) {
        goto LABEL_8;
      }
      return result;
    case 11:
      if (result != 11) {
        goto LABEL_8;
      }
      return result;
    case 12:
      if (result == 12) {
        return result;
      }
      goto LABEL_8;
    default:
      if (a2 == 13 && result != 13)
      {
        do
        {
LABEL_8:
          uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_9:
          ;
        }
        while (result != 9);
      }
      return result;
  }
}

uint64_t IPC::Decoder::decode<WebCore::ColorInterpolationMethod::HSL>(void *a1)
{
  uint64_t v2 = IPC::Decoder::decode<WebCore::HueInterpolationMethod>(a1);
  if (!*a1)
  {
    uint64_t v3 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v2 = a1[3];
    if (!v2)
    {
LABEL_6:
      int v4 = 0;
      return v4 | v2;
    }
LABEL_8:
    if (v3) {
      (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, 0);
    }
    LOBYTE(v2) = 0;
    goto LABEL_6;
  }
  if ((unsigned __int16)v2 < 0x100u)
  {
    __break(1u);
    goto LABEL_8;
  }
  int v4 = 256;
  return v4 | v2;
}

uint64_t IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::decode<IPC::Decoder,0ul,1ul,2ul,3ul,4ul,5ul,6ul>(void *a1, uint64_t a2)
{
  switch(a2)
  {
    case 7:
      if (!*a1)
      {
        uint64_t v3 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        uint64_t v4 = a1[3];
        if (v4) {
          BOOL v5 = v3 == 0;
        }
        else {
          BOOL v5 = 1;
        }
        if (!v5) {
          (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
        }
      }
      uint64_t result = 0x700000000;
      break;
    case 8:
      if (*a1)
      {
        uint64_t result = 0x800000000;
      }
      else
      {
        uint64_t v6 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        uint64_t v7 = a1[3];
        if (v7 && v6) {
          (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0);
        }
        uint64_t result = 0x800000000;
      }
      break;
    case 9:
      if (*a1)
      {
        uint64_t result = 0x900000000;
      }
      else
      {
        uint64_t v8 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        uint64_t v9 = a1[3];
        if (v9 && v8) {
          (*(void (**)(uint64_t, void))(*(void *)v9 + 16))(v9, 0);
        }
        uint64_t result = 0x900000000;
      }
      break;
    case 10:
      if (*a1)
      {
        uint64_t result = 0xA00000000;
      }
      else
      {
        uint64_t v10 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        uint64_t v11 = a1[3];
        if (v11 && v10) {
          (*(void (**)(uint64_t, void))(*(void *)v11 + 16))(v11, 0);
        }
        uint64_t result = 0xA00000000;
      }
      break;
    case 11:
      if (*a1)
      {
        uint64_t result = 0xB00000000;
      }
      else
      {
        uint64_t v12 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        uint64_t v13 = a1[3];
        if (v13 && v12) {
          (*(void (**)(uint64_t, void))(*(void *)v13 + 16))(v13, 0);
        }
        uint64_t result = 0xB00000000;
      }
      break;
    case 12:
      if (*a1)
      {
        uint64_t result = 0xC00000000;
      }
      else
      {
        uint64_t v14 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        uint64_t v15 = a1[3];
        if (v15 && v14) {
          (*(void (**)(uint64_t, void))(*(void *)v15 + 16))(v15, 0);
        }
        uint64_t result = 0xC00000000;
      }
      break;
    case 13:
      if (*a1)
      {
        uint64_t result = 0xD00000000;
      }
      else
      {
        uint64_t v16 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        uint64_t v17 = a1[3];
        if (v17 && v16) {
          (*(void (**)(uint64_t, void))(*(void *)v17 + 16))(v17, 0);
        }
        uint64_t result = 0xD00000000;
      }
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6) {
    goto LABEL_8;
  }
  unsigned char *result = v4 == 0;
  if (!v4) {
    return result;
  }
  if (!*a2)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x198935328);
  }

  return (unsigned char *)IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, a2);
}

uint64_t *IPC::ArgumentCoder<std::optional<WTF::Seconds>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    unsigned char *result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      uint64_t v15 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t result = v15;
        uint64_t v11 = *v15;
        unint64_t v10 = v15[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_9;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v10 = v3;
    uint64_t v11 = 0;
LABEL_9:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    unsigned char *result = 0;
    result[1] = 0;
    uint64_t v13 = result[3];
    if (v13)
    {
      uint64_t v14 = result;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t result = v14;
        uint64_t v4 = *v14;
        unint64_t v3 = v14[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_10;
  }
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
LABEL_10:
    unsigned char *result = 0;
    result[1] = 0;
    uint64_t result = (uint64_t *)result[3];
    if (result && v3) {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
    }
    goto LABEL_11;
  }
  if (!v7)
  {
    *a2 = 0;
    a2[8] = 0;
    char v9 = 1;
    goto LABEL_12;
  }
  uint64_t result = (uint64_t *)IPC::Decoder::decode<WTF::Seconds>(result);
  if (!v8)
  {
LABEL_11:
    char v9 = 0;
    *a2 = 0;
    goto LABEL_12;
  }
  *(void *)a2 = result;
  char v9 = 1;
  a2[8] = 1;
LABEL_12:
  a2[16] = v9;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::HTTPHeaderField>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v10);
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v8);
  if (!*(void *)a2) {
    goto LABEL_18;
  }
  if (!v11 || !v9)
  {
    __break(1u);
LABEL_18:
    *a1 = 0;
    a1[16] = 0;
    goto LABEL_5;
  }
  uint64_t result = (WTF::StringImpl *)WebCore::HTTPHeaderField::create();
LABEL_5:
  if (v9)
  {
    uint64_t result = v8;
    char v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v11)
  {
    uint64_t result = v10;
    unint64_t v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (!a1[16])
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result)
    {
      if (v7) {
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v6);
      }
    }
  }
  return result;
}

void sub_198935604(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, char a12)
{
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100](v12, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      uint64_t result = (uint64_t)WTF::VectorDestructor<true,WebCore::HTTPHeaderField>::destruct((WTF::StringImpl *)(*(void *)result + 16 * a2), (WTF::StringImpl *)(*(void *)result + 16 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    unint64_t v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(void *)uint64_t v3 = result;
      if ((WTF::StringImpl *)result != v5) {
        uint64_t result = (uint64_t)WTF::VectorMover<false,WebCore::HTTPHeaderField>::move(v5, (WTF::StringImpl *)((char *)v5 + 16 * v4), (WTF::StringImpl **)result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>,void>::encode<IPC::Encoder,WebCore::FragmentedSharedBuffer>(IPC::Encoder *a1, WebCore::FragmentedSharedBuffer **a2)
{
  unint64_t v4 = *a2;
  uint64_t result = (IPC::Encoder *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (v6)
    {
      *(unsigned char *)uint64_t result = 0;
      return result;
    }
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x1989357F0);
  }
  if (!v6) {
    goto LABEL_8;
  }
  *(unsigned char *)uint64_t result = 1;
  uint64_t v7 = *a2;

  return IPC::ArgumentCoder<WebCore::FragmentedSharedBuffer,void>::encode(a1, v7);
}

uint64_t IPC::ArgumentCoder<WebCore::ServiceWorkerClientType,void>::decode<IPC::Decoder>(void *a1)
{
  __int16 v5 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v5);
  if (HIBYTE(v5)) {
    BOOL v1 = v5 >= 4u;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1) {
    int v2 = 0;
  }
  else {
    int v2 = v5;
  }
  int v3 = !v1;
  return v2 | (v3 << 8);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>> const&>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>> const&,0ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 32))
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>> const&,0ul>(a1, a2, a3);
  }

  return (IPC::Encoder *)IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)a2);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>> const&,0ul>(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 32) == 1)
    {
      unint64_t v4 = result;
      IPC::ArgumentCoder<WTF::UUID,void>::encode(result, (uint64_t *)a2);
      uint64_t v6 = *(void *)(a2 + 16);
      return (IPC::Encoder *)IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, &v6);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerRegistrationOptions>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerRegistrationOptions> const&>(v5);
    }
  }
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerRegistrationOptions>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerRegistrationOptions> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  uint64_t result = (IPC::Decoder *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989359B8);
    }
    *(unsigned char *)uint64_t result = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
      IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 8));
      char v9 = *(unsigned char *)(a2 + 9);
      return (IPC::Decoder *)IPC::Encoder::operator<<<BOOL>(a1, &v9);
    }
    else
    {
      uint64_t v7 = (IPC::Decoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,void>::decode<IPC::Decoder>(v7, v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989359D8);
    }
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *result@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = *((void *)result + 1);
  uint64_t v3 = *(void *)result;
  unint64_t v4 = *((void *)result + 2) - *(void *)result;
  if (v2 <= v4)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v9 = *((void *)result + 3);
    if (v9)
    {
      unint64_t v10 = result;
      uint64_t v12 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v3, v2);
        uint64_t result = v10;
        a2 = v12;
        uint64_t v8 = *(void *)v10;
        unint64_t v7 = *((void *)v10 + 1);
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_9;
  }
  uint64_t v5 = (unsigned __int8 *)(v3 + v4);
  *((void *)result + 2) = v5 + 1;
  if (!v3)
  {
    unint64_t v7 = v2;
    uint64_t v8 = 0;
LABEL_9:
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)result + 3);
    if (result && v7)
    {
      char v11 = a2;
      uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v8);
      a2 = v11;
    }
    goto LABEL_4;
  }
  unint64_t v6 = *v5;
  if (v6 >= 2)
  {
LABEL_4:
    *a2 = 0;
    a2[48] = 0;
    return result;
  }

  return IPC::ArgumentCoder<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,void>::decode<IPC::Decoder>(result, v6, (uint64_t)a2);
}

IPC::Decoder *IPC::ArgumentCoder<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    return IPC::ArgumentCoder<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,void>::decode<IPC::Decoder,0ul>(a1, a2, a3);
  }
  else
  {
    uint64_t result = (IPC::Decoder *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a1);
    if (v5)
    {
      *(void *)a3 = result;
      *(_DWORD *)(a3 + 32) = 0;
      *(unsigned char *)(a3 + 48) = 1;
    }
    else
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 48) = 0;
    }
  }
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,void>::decode<IPC::Decoder,0ul>@<X0>(IPC::Decoder *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a2 == 1)
  {
    uint64_t result = (IPC::Decoder *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(result, (uint64_t)v6);
    char v4 = v7;
    if (v7)
    {
      long long v5 = v6[1];
      *(_OWORD *)a3 = v6[0];
      *(_OWORD *)(a3 + 16) = v5;
      char v4 = 1;
      *(_DWORD *)(a3 + 32) = 1;
    }
    else
    {
      *(unsigned char *)a3 = 0;
    }
    *(unsigned char *)(a3 + 48) = v4;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 48) = 0;
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    unint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = 32 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,void>::encode<IPC::Encoder,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier> const&>(a1, v6);
      v6 += 4;
      v7 -= 32;
    }
    while (v7);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,void>::encode<IPC::Encoder,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, a2 + 1);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, a2 + 2);

  return IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, a2 + 3);
}

unint64_t IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (v5)
  {
    unint64_t v6 = result;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    if (result >= 0x8000)
    {
      uint64_t v7 = 0;
      LODWORD(v8) = 0;
      do
      {
        unint64_t result = IPC::Decoder::decode<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>>(a1, (uint64_t)&v22);
        if (!v24)
        {
          *(unsigned char *)a2 = 0;
          *(unsigned char *)(a2 + 16) = 0;
          if (!v7) {
            return result;
          }
          goto LABEL_16;
        }
        if (v8 == v26)
        {
          unint64_t result = WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v25, v8 + 1, (unint64_t)&v22);
          LODWORD(v8) = HIDWORD(v26);
          uint64_t v7 = v25;
          uint64_t v15 = (_OWORD *)((char *)v25 + 32 * HIDWORD(v26));
          long long v16 = *(_OWORD *)(result + 16);
          *uint64_t v15 = *(_OWORD *)result;
          v15[1] = v16;
        }
        else
        {
          long long v17 = v23;
          uint64_t v18 = (_OWORD *)((char *)v7 + 32 * v8);
          *uint64_t v18 = v22;
          v18[1] = v17;
        }
        uint64_t v8 = (v8 + 1);
        HIDWORD(v26) = v8;
        --v6;
      }
      while (v6);
      int v14 = v26;
      if (v26 <= v8)
      {
        unint64_t result = (unint64_t)v7;
        goto LABEL_37;
      }
      if (!v8) {
        goto LABEL_32;
      }
      if (!(v8 >> 27))
      {
        unint64_t result = WTF::fastMalloc((WTF *)(32 * v8));
        LODWORD(v26) = v8;
        uint64_t v25 = (WTF *)result;
        if ((WTF *)result == v7) {
          goto LABEL_32;
        }
        uint64_t v19 = 0;
        do
        {
          uint64_t v20 = (_OWORD *)(result + v19);
          long long v21 = *(_OWORD *)((char *)v7 + v19 + 16);
          *uint64_t v20 = *(_OWORD *)((char *)v7 + v19);
          v20[1] = v21;
          v19 += 32;
        }
        while (32 * v8 != v19);
        int v14 = v8;
        if (v7)
        {
          if ((WTF *)result == v7)
          {
LABEL_32:
            uint64_t v25 = 0;
            LODWORD(v26) = 0;
          }
          WTF::fastFree(v7, v9);
          unint64_t result = (unint64_t)v25;
          int v14 = v26;
          LODWORD(v8) = HIDWORD(v26);
        }
LABEL_37:
        *(void *)a2 = result;
        goto LABEL_14;
      }
      __break(0xC471u);
    }
    else if (result)
    {
      uint64_t v7 = (WTF *)WTF::fastMalloc((WTF *)(32 * result));
      LODWORD(v8) = 0;
      LODWORD(v26) = v6;
      uint64_t v25 = v7;
      while (1)
      {
        unint64_t result = IPC::Decoder::decode<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>>(a1, (uint64_t)&v22);
        if (!v24) {
          break;
        }
        if (v8 == v26)
        {
          unint64_t result = WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v25, v8 + 1, (unint64_t)&v22);
          LODWORD(v8) = HIDWORD(v26);
          uint64_t v7 = v25;
          unint64_t v10 = (_OWORD *)((char *)v25 + 32 * HIDWORD(v26));
          long long v11 = *(_OWORD *)(result + 16);
          _OWORD *v10 = *(_OWORD *)result;
          v10[1] = v11;
        }
        else
        {
          long long v12 = v23;
          uint64_t v13 = (_OWORD *)((char *)v7 + 32 * v8);
          *uint64_t v13 = v22;
          v13[1] = v12;
        }
        LODWORD(v8) = v8 + 1;
        HIDWORD(v26) = v8;
        if (!--v6)
        {
          int v14 = v26;
          goto LABEL_13;
        }
      }
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 16) = 0;
LABEL_16:
      uint64_t v25 = 0;
      LODWORD(v26) = 0;
      return WTF::fastFree(v7, v9);
    }
    else
    {
      LODWORD(v8) = 0;
      int v14 = 0;
      uint64_t v7 = 0;
LABEL_13:
      *(void *)a2 = v7;
LABEL_14:
      *(_DWORD *)(a2 + 8) = v14;
      *(_DWORD *)(a2 + 12) = v8;
      *(unsigned char *)(a2 + 16) = 1;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
  return result;
}

void sub_198935EFC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15)
{
  if (a15) {
    WTF::fastFree(a15, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 32))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::MessagePortIdentifier>(a1, (uint64_t)&v9);
  if (!v10)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 32) = 0;
    return result;
  }
  uint64_t result = IPC::Decoder::decode<WebCore::MessagePortIdentifier>(a1, (uint64_t)&v7);
  char v5 = v8;
  if (v8)
  {
    if (!v10)
    {
      __break(1u);
      return result;
    }
    long long v6 = v7;
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v6;
    char v5 = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 32) = v5;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::MessagePortIdentifier>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::MessagePortIdentifier,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

unint64_t WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      char v4 = *(WTF **)result;
      uint64_t v5 = *(unsigned int *)(result + 12);
      uint64_t result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v5)
      {
        uint64_t v7 = 32 * v5;
        unint64_t v8 = v4;
        do
        {
          long long v9 = *(_OWORD *)v8;
          long long v10 = *((_OWORD *)v8 + 1);
          unint64_t v8 = (WTF *)((char *)v8 + 32);
          *(_OWORD *)uint64_t result = v9;
          *(_OWORD *)(result + 16) = v10;
          result += 32;
          v7 -= 32;
        }
        while (v7);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)uint64_t v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::ExceptionCode,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      int v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v2, v1);
        a1 = v14;
        uint64_t v11 = *v14;
        unint64_t v10 = v14[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
  }
  else
  {
    char v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      unsigned int v5 = *v4;
      int v6 = 1;
      goto LABEL_4;
    }
    unint64_t v10 = v1;
    uint64_t v11 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v13 = a1[3];
  if (v13 && v10) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
  }
  unsigned int v5 = 0;
  int v6 = 0;
LABEL_4:
  BOOL v7 = v5 < 0x26;
  unsigned int v8 = v5 | 0x100;
  if ((v6 & v7) != 0) {
    return v8;
  }
  else {
    return 0;
  }
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,0ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 24))
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,0ul>(a1, a2, a3);
  }

  return (IPC::Encoder *)IPC::ArgumentCoder<WebCore::SecurityOriginData::Tuple,void>::encode(a1, (uint64_t *)a2);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,0ul>(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 24) == 1)
    {
      char v4 = result;
      IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(result, (uint64_t *)a2);
      uint64_t v6 = *(void *)(a2 + 8);
      return (IPC::Encoder *)IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, &v6);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder>(v5);
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  char v4 = result;
  unint64_t v6 = result[1];
  uint64_t v7 = *result;
  unint64_t v8 = result[2] - *result;
  if (v6 <= v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    IPC::Decoder *result = 0;
    result[1] = 0;
    uint64_t v24 = result[3];
    if (v24)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v24 + 16))(v24, v7, v6);
        uint64_t v23 = *v4;
        uint64_t v22 = v4[1];
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
      }
    }
    goto LABEL_29;
  }
  long long v9 = (unsigned char *)(v7 + v8);
  result[2] = (uint64_t)(v9 + 1);
  if (!v7)
  {
    uint64_t v22 = v6;
    uint64_t v23 = 0;
LABEL_29:
    uint64_t *v4 = 0;
    v4[1] = 0;
    uint64_t result = (uint64_t *)v4[3];
    if (result && v22) {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v23);
    }
    goto LABEL_30;
  }
  if (*v9 >= 2u)
  {
LABEL_30:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 32) = 0;
    return result;
  }
  if (*v9)
  {
    uint64_t v17 = IPC::ArgumentCoder<PAL::SessionID,void>::decode(result);
    if (v18)
    {
      uint64_t v19 = v17;
      uint64_t result = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4);
      if (*v4)
      {
        if (v20)
        {
          *(void *)a2 = v19;
          *(void *)(a2 + 8) = result;
          char v21 = 1;
          *(_DWORD *)(a2 + 24) = 1;
LABEL_26:
          *(unsigned char *)(a2 + 32) = v21;
          return result;
        }
        goto LABEL_43;
      }
    }
    else
    {
      IPC::Decoder::markInvalid((IPC::Decoder *)v4);
      IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4);
      if (*v4) {
        goto LABEL_43;
      }
    }
LABEL_44:
    uint64_t result = (uint64_t *)IPC::Decoder::markInvalid((IPC::Decoder *)v4);
    char v21 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_26;
  }
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)result, (uint64_t)&v34);
  if (!*v4)
  {
LABEL_27:
    int v13 = 0;
    LOBYTE(v28) = 0;
    char v31 = 0;
    goto LABEL_13;
  }
  if (!v35)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v34 == (WTF::StringImpl *)-1) {
    goto LABEL_27;
  }
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v4, (uint64_t)&v32);
  unint64_t v11 = IPC::Decoder::decode<std::optional<unsigned short>>(v4);
  if (*v4)
  {
    if (v35)
    {
      uint64_t v12 = v34;
      uint64_t v34 = 0;
      if (v33)
      {
        uint64_t v2 = v32;
        uint64_t v32 = 0;
        if (WORD2(v11))
        {
          int v3 = v11 & 0xFFFFFF;
          uint64_t v28 = v12;
          unint64_t v29 = v2;
          int v30 = v11 & 0xFFFFFF;
          int v13 = 1;
          char v31 = 1;
          goto LABEL_13;
        }
      }
    }
    goto LABEL_43;
  }
  LOBYTE(v28) = 0;
  char v31 = 0;
  if (v33)
  {
    unint64_t v27 = v32;
    uint64_t v32 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 != 2)
      {
        int v13 = 0;
        *(_DWORD *)v27 -= 2;
        goto LABEL_13;
      }
      WTF::StringImpl::destroy(v27, v10);
    }
  }
  int v13 = 0;
LABEL_13:
  if (v35)
  {
    int v14 = v34;
    uint64_t v34 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v10);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  if (!v13)
  {
    unint64_t v10 = (WTF::StringImpl *)*v4;
    uint64_t v25 = v4[1];
    uint64_t *v4 = 0;
    v4[1] = 0;
    uint64_t v26 = v4[3];
    if (!v26 || !v25 || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v26 + 16))(v26, v10), !v31))
    {
      char v16 = 0;
      *(unsigned char *)a2 = 0;
      goto LABEL_19;
    }
    uint64_t v2 = v29;
    int v3 = v30;
  }
  uint64_t v15 = v28;
  uint64_t v28 = 0;
  unint64_t v29 = 0;
  *(void *)a2 = v15;
  *(void *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 24) = 0;
  char v16 = 1;
LABEL_19:
  *(unsigned char *)(a2 + 32) = v16;
  return (uint64_t *)std::__optional_destruct_base<WebCore::SecurityOriginData::Tuple,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v10);
}

void sub_198936694(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__optional_destruct_base<WebCore::SecurityOriginData::Tuple,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    int v3 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    char v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::ArgumentCoder<std::optional<int>,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      uint64_t v17 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        a1 = v17;
        uint64_t v12 = *v17;
        unint64_t v11 = v17[1];
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_11;
  }
  char v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v11 = v1;
    uint64_t v12 = 0;
LABEL_11:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v14 = a1[3];
    if (v14)
    {
      char v16 = a1;
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        a1 = v16;
        uint64_t v2 = *v16;
        unint64_t v1 = v16[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_12;
  }
  unsigned int v5 = *v4;
  if (v5 < 2)
  {
    if (v5)
    {
      uint64_t v6 = IPC::Decoder::decode<unsigned int>(a1);
      uint64_t v7 = v6 & 0xFFFFFF00;
      uint64_t v8 = v6;
      uint64_t v9 = 0x100000000;
      if ((v6 & 0xFF00000000) == 0)
      {
        uint64_t v9 = 0x100000000;
        uint64_t v8 = 0;
        uint64_t v7 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v8 = 0;
      uint64_t v7 = 0;
    }
    return v8 | v9 | v7;
  }
LABEL_12:
  uint64_t v9 = 0;
  uint64_t v8 = 0;
  uint64_t v7 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v15 = a1[3];
  if (v15)
  {
    if (v1) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v2);
    }
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  return v8 | v9 | v7;
}

void *IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(void *result, unsigned char *a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (!a2[1])
  {
    if (v2 < v3)
    {
      *(unsigned char *)(*result + v2) = 0;
      result[2] = v2 + 1;
      return result;
    }
LABEL_9:
    result[1] = 0;
    return result;
  }
  if (v2 >= v3) {
    goto LABEL_9;
  }
  unint64_t v4 = v2 + 1;
  *(unsigned char *)(*result + v2) = 1;
  result[2] = v2 + 1;
  if (a2[1])
  {
    if (v4 < result[1])
    {
      *(unsigned char *)(*result + v4) = *a2;
      result[2] = v2 + 2;
      return result;
    }
    goto LABEL_9;
  }
  unsigned int v5 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
  return (void *)IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::decode<IPC::Decoder>(v5);
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v24 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        a1 = v24;
        uint64_t v11 = *v24;
        unint64_t v10 = v24[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_15;
  }
  unint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v10 = v1;
    uint64_t v11 = 0;
LABEL_15:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      uint64_t v23 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        a1 = v23;
        uint64_t v2 = *v23;
        unint64_t v1 = v23[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_16;
  }
  unsigned int v5 = *v4;
  if (v5 < 2)
  {
    if (!*v4)
    {
      unsigned int v7 = 0;
      int v8 = 0x10000;
      return v7 | v8 | v5;
    }
    if (v1 <= (unint64_t)&v4[-v2 + 1])
    {
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v17 = a1[3];
      if (v17)
      {
        uint64_t v19 = a1;
        (*(void (**)(void))(*(void *)v17 + 16))(a1[3]);
        unint64_t v15 = 0;
        uint64_t v20 = *v19;
        uint64_t v21 = v19[1];
        uint64_t v22 = v19[3];
        *uint64_t v19 = 0;
        v19[1] = 0;
        uint64_t v16 = 0;
        if (v22)
        {
          a1 = v19;
          if (v21)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
            a1 = v19;
            uint64_t v16 = *v19;
            unint64_t v15 = v19[1];
          }
        }
        else
        {
          a1 = v19;
        }
      }
    }
    else
    {
      a1[2] = v4 + 2;
      unsigned int v6 = v4[1];
      if (v6 < 0xC)
      {
        unsigned int v7 = v6 | 0x100;
LABEL_8:
        int v8 = (v7 > 0xFF) << 16;
        if (v7 >= 0x100) {
          unsigned int v7 = v7;
        }
        else {
          unsigned int v7 = 0;
        }
        unsigned int v5 = 256;
        return v7 | v8 | v5;
      }
      unint64_t v15 = v1;
      uint64_t v16 = v2;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v18 = a1[3];
    if (v18 && v15) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v18 + 16))(v18, v16, v15);
    }
    unsigned int v7 = 0;
    goto LABEL_8;
  }
LABEL_16:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v14 = a1[3];
  if (v14 && v1) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v2);
  }
  int v8 = 0;
  unsigned int v7 = 0;
  unsigned int v5 = 0;
  return v7 | v8 | v5;
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoTransferCharacteristics>,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v24 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        a1 = v24;
        uint64_t v11 = *v24;
        unint64_t v10 = v24[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_15;
  }
  unint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v10 = v1;
    uint64_t v11 = 0;
LABEL_15:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      uint64_t v23 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        a1 = v23;
        uint64_t v2 = *v23;
        unint64_t v1 = v23[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_16;
  }
  unsigned int v5 = *v4;
  if (v5 < 2)
  {
    if (!*v4)
    {
      unsigned int v7 = 0;
      int v8 = 0x10000;
      return v7 | v8 | v5;
    }
    if (v1 <= (unint64_t)&v4[-v2 + 1])
    {
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v17 = a1[3];
      if (v17)
      {
        uint64_t v19 = a1;
        (*(void (**)(void))(*(void *)v17 + 16))(a1[3]);
        unint64_t v15 = 0;
        uint64_t v20 = *v19;
        uint64_t v21 = v19[1];
        uint64_t v22 = v19[3];
        *uint64_t v19 = 0;
        v19[1] = 0;
        uint64_t v16 = 0;
        if (v22)
        {
          a1 = v19;
          if (v21)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
            a1 = v19;
            uint64_t v16 = *v19;
            unint64_t v15 = v19[1];
          }
        }
        else
        {
          a1 = v19;
        }
      }
    }
    else
    {
      a1[2] = v4 + 2;
      unsigned int v6 = v4[1];
      if (v6 < 0x11)
      {
        unsigned int v7 = v6 | 0x100;
LABEL_8:
        int v8 = (v7 > 0xFF) << 16;
        if (v7 >= 0x100) {
          unsigned int v7 = v7;
        }
        else {
          unsigned int v7 = 0;
        }
        unsigned int v5 = 256;
        return v7 | v8 | v5;
      }
      unint64_t v15 = v1;
      uint64_t v16 = v2;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v18 = a1[3];
    if (v18 && v15) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v18 + 16))(v18, v16, v15);
    }
    unsigned int v7 = 0;
    goto LABEL_8;
  }
LABEL_16:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v14 = a1[3];
  if (v14 && v1) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v2);
  }
  int v8 = 0;
  unsigned int v7 = 0;
  unsigned int v5 = 0;
  return v7 | v8 | v5;
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoMatrixCoefficients>,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v24 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        a1 = v24;
        uint64_t v11 = *v24;
        unint64_t v10 = v24[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_15;
  }
  unint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v10 = v1;
    uint64_t v11 = 0;
LABEL_15:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      uint64_t v23 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        a1 = v23;
        uint64_t v2 = *v23;
        unint64_t v1 = v23[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_16;
  }
  unsigned int v5 = *v4;
  if (v5 < 2)
  {
    if (!*v4)
    {
      unsigned int v7 = 0;
      int v8 = 0x10000;
      return v7 | v8 | v5;
    }
    if (v1 <= (unint64_t)&v4[-v2 + 1])
    {
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v17 = a1[3];
      if (v17)
      {
        uint64_t v19 = a1;
        (*(void (**)(void))(*(void *)v17 + 16))(a1[3]);
        unint64_t v15 = 0;
        uint64_t v20 = *v19;
        uint64_t v21 = v19[1];
        uint64_t v22 = v19[3];
        *uint64_t v19 = 0;
        v19[1] = 0;
        uint64_t v16 = 0;
        if (v22)
        {
          a1 = v19;
          if (v21)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
            a1 = v19;
            uint64_t v16 = *v19;
            unint64_t v15 = v19[1];
          }
        }
        else
        {
          a1 = v19;
        }
      }
    }
    else
    {
      a1[2] = v4 + 2;
      unsigned int v6 = v4[1];
      if (v6 < 0xA)
      {
        unsigned int v7 = v6 | 0x100;
LABEL_8:
        int v8 = (v7 > 0xFF) << 16;
        if (v7 >= 0x100) {
          unsigned int v7 = v7;
        }
        else {
          unsigned int v7 = 0;
        }
        unsigned int v5 = 256;
        return v7 | v8 | v5;
      }
      unint64_t v15 = v1;
      uint64_t v16 = v2;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v18 = a1[3];
    if (v18 && v15) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v18 + 16))(v18, v16, v15);
    }
    unsigned int v7 = 0;
    goto LABEL_8;
  }
LABEL_16:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v14 = a1[3];
  if (v14 && v1) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v2);
  }
  int v8 = 0;
  unsigned int v7 = 0;
  unsigned int v5 = 0;
  return v7 | v8 | v5;
}

uint64_t WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::ContentExtensions::ModifyHeadersAction>::destruct(*(void *)a1, (char *)(*(void *)a1 + 48 * v3));
  }
  unint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WebCore::ContentExtensions::ModifyHeadersAction>::destruct(uint64_t result, char *a2)
{
  if ((char *)result != a2)
  {
    unsigned int v3 = (char *)result;
    do
    {
      WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 24), a2);
      uint64_t result = WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 8), v4);
      v3 += 48;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  unint64_t v4 = *(unsigned int **)a1;
  if (v3)
  {
    uint64_t v5 = 24 * v3;
    do
    {
      uint64_t v6 = v4[4];
      if (v6 != -1) {
        ((void (*)(char *, unsigned int *))off_1EE9B5250[v6])(&v8, v4);
      }
      v4[4] = -1;
      v4 += 6;
      v5 -= 24;
    }
    while (v5);
    unint64_t v4 = *(unsigned int **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *((unsigned int *)a2 + 3));
  uint64_t v5 = *((unsigned int *)a2 + 3);
  if (v5)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = v6 + 32 * v5;
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v6);
      unint64_t result = IPC::ArgumentCoder<WebCore::ContentRuleListResults::Result,void>::encode(a1, (char *)(v6 + 8));
      v6 += 32;
    }
    while (v6 != v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v75);
  if (!v76) {
    goto LABEL_58;
  }
  unint64_t v5 = *((void *)a2 + 1);
  uint64_t v6 = *(char **)a2;
  unint64_t v7 = *((void *)a2 + 2) - *(void *)a2;
  if (v5 <= v7)
  {
    unint64_t v46 = 0;
    char v47 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v48 = *((void *)a2 + 3);
    if (v48)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v48 + 16))(v48);
        char v47 = *(WTF::StringImpl **)a2;
        unint64_t v46 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v46 = 0;
        char v47 = 0;
      }
    }
    goto LABEL_65;
  }
  char v8 = &v6[v7];
  uint64_t v9 = (uint64_t)&v6[v7 + 1];
  *((void *)a2 + 2) = v9;
  if (!v6)
  {
    unint64_t v46 = v5;
    char v47 = 0;
LABEL_65:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v49 = *((void *)a2 + 3);
    if (v49 && v46)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v49 + 16))(v49, v47, v46);
      unsigned int v10 = 0;
      uint64_t v6 = *(char **)a2;
      unint64_t v5 = *((void *)a2 + 1);
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      unsigned int v10 = 0;
    }
    goto LABEL_67;
  }
  unsigned int v10 = *v8;
  if (v10 < 2)
  {
    int v70 = 0;
    char v11 = 1;
    goto LABEL_6;
  }
LABEL_67:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v50 = *((void *)a2 + 3);
  if (!v50 || !v5)
  {
    unint64_t v51 = 0;
    uint64_t v6 = 0;
    char v69 = 0;
    int v70 = 1;
LABEL_69:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v52 = *((void *)a2 + 3);
    if (v52 && v51)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v52 + 16))(v52, v6, v51);
      unsigned int v15 = 0;
      uint64_t v6 = *(char **)a2;
      unint64_t v5 = *((void *)a2 + 1);
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      unsigned int v15 = 0;
    }
    goto LABEL_71;
  }
  (*(void (**)(uint64_t, char *))(*(void *)v50 + 16))(v50, v6);
  char v11 = 0;
  uint64_t v6 = *(char **)a2;
  unint64_t v5 = *((void *)a2 + 1);
  int v70 = 1;
  uint64_t v9 = *((void *)a2 + 2);
LABEL_6:
  if (!v10) {
    char v11 = 0;
  }
  char v69 = v11;
  unint64_t v12 = v9 - (void)v6;
  if (v5 <= v12)
  {
    unint64_t v51 = 0;
    uint64_t v64 = *((void *)a2 + 3);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    if (v5 && v64)
    {
      (*(void (**)(uint64_t))(*(void *)v64 + 16))(v64);
      uint64_t v6 = *(char **)a2;
      unint64_t v51 = *((void *)a2 + 1);
    }
    else
    {
      uint64_t v6 = 0;
    }
    goto LABEL_69;
  }
  uint64_t v13 = &v6[v12];
  uint64_t v14 = (uint64_t)&v6[v12 + 1];
  *((void *)a2 + 2) = v14;
  if (!v6)
  {
    unint64_t v51 = v5;
    goto LABEL_69;
  }
  unsigned int v15 = *v13;
  if (v15 < 2)
  {
    int v68 = 0;
    char v16 = 1;
    goto LABEL_12;
  }
LABEL_71:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v53 = *((void *)a2 + 3);
  if (!v53 || !v5)
  {
    char v17 = 0;
    unint64_t v54 = 0;
    uint64_t v6 = 0;
    int v68 = 1;
LABEL_73:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v55 = *((void *)a2 + 3);
    if (v55 && v54)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v55 + 16))(v55, v6, v54);
      unsigned int v21 = 0;
      uint64_t v6 = *(char **)a2;
      unint64_t v5 = *((void *)a2 + 1);
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      unsigned int v21 = 0;
    }
    goto LABEL_75;
  }
  (*(void (**)(uint64_t, char *))(*(void *)v53 + 16))(v53, v6);
  char v16 = 0;
  uint64_t v6 = *(char **)a2;
  unint64_t v5 = *((void *)a2 + 1);
  int v68 = 1;
  uint64_t v14 = *((void *)a2 + 2);
LABEL_12:
  if (v15) {
    char v17 = v16;
  }
  else {
    char v17 = 0;
  }
  unint64_t v18 = v14 - (void)v6;
  if (v5 <= v18)
  {
    unint64_t v54 = 0;
    uint64_t v65 = *((void *)a2 + 3);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    if (v5 && v65)
    {
      (*(void (**)(uint64_t))(*(void *)v65 + 16))(v65);
      uint64_t v6 = *(char **)a2;
      unint64_t v54 = *((void *)a2 + 1);
    }
    else
    {
      uint64_t v6 = 0;
    }
    goto LABEL_73;
  }
  uint64_t v19 = &v6[v18];
  uint64_t v20 = (uint64_t)&v6[v18 + 1];
  *((void *)a2 + 2) = v20;
  if (!v6)
  {
    unint64_t v54 = v5;
    goto LABEL_73;
  }
  unsigned int v21 = *v19;
  if (v21 < 2)
  {
    int v22 = 0;
    char v23 = 1;
    goto LABEL_19;
  }
LABEL_75:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v56 = *((void *)a2 + 3);
  if (!v56 || !v5)
  {
    char v24 = 0;
    unint64_t v57 = 0;
    uint64_t v6 = 0;
    int v22 = 1;
LABEL_77:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v58 = *((void *)a2 + 3);
    if (v58 && v57)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v58 + 16))(v58, v6, v57);
      unsigned int v28 = 0;
      uint64_t v6 = *(char **)a2;
      unint64_t v5 = *((void *)a2 + 1);
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      unsigned int v28 = 0;
    }
    goto LABEL_79;
  }
  (*(void (**)(uint64_t, char *))(*(void *)v56 + 16))(v56, v6);
  char v23 = 0;
  uint64_t v6 = *(char **)a2;
  unint64_t v5 = *((void *)a2 + 1);
  int v22 = 1;
  uint64_t v20 = *((void *)a2 + 2);
LABEL_19:
  if (v21) {
    char v24 = v23;
  }
  else {
    char v24 = 0;
  }
  unint64_t v25 = v20 - (void)v6;
  if (v5 <= v25)
  {
    unint64_t v57 = 0;
    uint64_t v66 = *((void *)a2 + 3);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    if (v5 && v66)
    {
      (*(void (**)(uint64_t))(*(void *)v66 + 16))(v66);
      uint64_t v6 = *(char **)a2;
      unint64_t v57 = *((void *)a2 + 1);
    }
    else
    {
      uint64_t v6 = 0;
    }
    goto LABEL_77;
  }
  uint64_t v26 = &v6[v25];
  uint64_t v27 = (uint64_t)&v6[v25 + 1];
  *((void *)a2 + 2) = v27;
  if (!v6)
  {
    unint64_t v57 = v5;
    goto LABEL_77;
  }
  unsigned int v28 = *v26;
  if (v28 < 2)
  {
    int v29 = 0;
    char v30 = 1;
    goto LABEL_26;
  }
LABEL_79:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v59 = *((void *)a2 + 3);
  if (!v59 || !v5)
  {
    char v31 = 0;
    unint64_t v60 = 0;
    uint64_t v6 = 0;
    int v29 = 1;
LABEL_81:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v61 = *((void *)a2 + 3);
    if (v61 && v60)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v61 + 16))(v61, v6, v60);
      unsigned int v34 = 0;
      uint64_t v6 = *(char **)a2;
      unint64_t v5 = *((void *)a2 + 1);
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      unsigned int v34 = 0;
    }
    goto LABEL_83;
  }
  (*(void (**)(uint64_t, char *))(*(void *)v59 + 16))(v59, v6);
  char v30 = 0;
  uint64_t v6 = *(char **)a2;
  unint64_t v5 = *((void *)a2 + 1);
  int v29 = 1;
  uint64_t v27 = *((void *)a2 + 2);
LABEL_26:
  if (v28) {
    char v31 = v30;
  }
  else {
    char v31 = 0;
  }
  unint64_t v32 = v27 - (void)v6;
  if (v5 <= v32)
  {
    unint64_t v60 = 0;
    uint64_t v67 = *((void *)a2 + 3);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    if (v5 && v67)
    {
      (*(void (**)(uint64_t))(*(void *)v67 + 16))(v67);
      uint64_t v6 = *(char **)a2;
      unint64_t v60 = *((void *)a2 + 1);
    }
    else
    {
      uint64_t v6 = 0;
    }
    goto LABEL_81;
  }
  char v33 = &v6[v32];
  *((void *)a2 + 2) = v33 + 1;
  if (!v6)
  {
    unint64_t v60 = v5;
    goto LABEL_81;
  }
  unsigned int v34 = *v33;
  if (v34 < 2)
  {
    uint64_t v35 = 0;
    char v36 = 1;
    goto LABEL_33;
  }
LABEL_83:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v62 = *((void *)a2 + 3);
  if (v62 && v5) {
    (*(void (**)(uint64_t, char *))(*(void *)v62 + 16))(v62, v6);
  }
  char v36 = 0;
  uint64_t v35 = 1;
LABEL_33:
  if (v34) {
    char v37 = v36;
  }
  else {
    char v37 = 0;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v6, (uint64_t)&v80);
  uint64_t v39 = *(char **)a2;
  if (*(void *)a2)
  {
    if (v70
      || (LOBYTE(v77) = v69, v68)
      || (BYTE1(v77) = v17, v22)
      || (BYTE2(v77) = v24, v29)
      || (HIBYTE(v77) = v31, v35)
      || (char v78 = v37, !v82))
    {
LABEL_57:
      __break(1u);
LABEL_58:
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 32) = 0;
      goto LABEL_59;
    }
    uint64_t v35 = v80;
    uint64_t v80 = 0;
    uint64_t v2 = v81;
    uint64_t v81 = 0;
    int v71 = v77;
    char v72 = v78;
    v79[0] = 0;
    v79[1] = 0;
    char v74 = 1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v79, v38);
  }
  else
  {
    LOBYTE(v71) = 0;
    char v74 = 0;
  }
  if (v82) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v80, v38);
  }
  if (!v39)
  {
    long long v42 = *(WTF::StringImpl **)a2;
    uint64_t v63 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result && v63) {
      unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
    }
                                                                                                  + 16))(result, v42);
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
    goto LABEL_49;
  }
  if (!v76) {
    goto LABEL_57;
  }
  unsigned __int8 v40 = v75;
  v75 = 0;
  *(void *)a1 = v40;
  *(_DWORD *)(a1 + 8) = v71;
  *(unsigned char *)(a1 + 12) = v72;
  v73[0] = 0;
  v73[1] = 0;
  *(void *)(a1 + 16) = v35;
  *(void *)(a1 + 24) = v2;
  *(unsigned char *)(a1 + 32) = 1;
  unint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v73, v38);
LABEL_49:
  if (v76)
  {
    unint64_t result = v75;
    v75 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v42);
        if (v39) {
          return result;
        }
        goto LABEL_59;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v39) {
    return result;
  }
LABEL_59:
  uint64_t v43 = *(WTF::StringImpl **)a2;
  uint64_t v44 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result) {
    BOOL v45 = v44 == 0;
  }
  else {
    BOOL v45 = 1;
  }
  if (!v45) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v43);
  }
  return result;
}

void sub_198937CB0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16)
{
  std::__optional_destruct_base<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,false>::~__optional_destruct_base[abi:sn180100](v16, a2);
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>(unsigned int *a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = *(void *)a1 + 32 * a1[3];
  uint64_t v5 = *(void *)result;
  *(void *)unint64_t result = 0;
  *(void *)uint64_t v4 = v5;
  LOBYTE(v5) = *(unsigned char *)(result + 12);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(result + 8);
  *(unsigned char *)(v4 + 12) = v5;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  uint64_t v6 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  *(void *)(v4 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(v4 + 24) = v6;
  LODWORD(v6) = *(_DWORD *)(result + 28);
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(v4 + 28) = v6;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x198937ECCLL);
    }
    unint64_t v3 = result;
    uint64_t v4 = *(WTF::StringImpl **)result;
    uint64_t v5 = (WTF::StringImpl *)(*(void *)result + 32 * *((unsigned int *)result + 3));
    uint64_t v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *((_DWORD *)v3 + 2) = v2;
    *(void *)unint64_t v3 = v6;
    unint64_t result = WTF::VectorMover<false,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)v3 == v4)
      {
        *(void *)unint64_t v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v4, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = (uint64_t)result + 16;
    do
    {
      uint64_t v7 = v5 - 16;
      uint64_t v6 = *(void *)(v5 - 16);
      *(void *)(v5 - 16) = 0;
      *(void *)a3 = v6;
      LODWORD(v6) = *(_DWORD *)(v5 - 8);
      *(unsigned char *)(a3 + 12) = *(unsigned char *)(v5 - 4);
      *(_DWORD *)(a3 + 8) = v6;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v8 = *(void *)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)(a3 + 16) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(a3 + 24) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(a3 + 28) = v8;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      unint64_t result = *(WTF::StringImpl **)(v5 - 16);
      *(void *)(v5 - 16) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v5 += 32;
      a3 += 32;
    }
    while ((WTF::StringImpl *)(v7 + 32) != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

unint64_t IPC::VectorArgumentCoder<false,std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (result >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::String,WTF::String>>(a1, (uint64_t)&v19);
      if (!v21) {
        break;
      }
      if (HIDWORD(v23) == v23)
      {
        WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WTF::String>>((uint64_t)&v22, (unint64_t)&v19);
      }
      else
      {
        int v14 = HIDWORD(v23) + 1;
        unsigned int v15 = (void *)(v22 + 16 * HIDWORD(v23));
        uint64_t v16 = v19;
        uint64_t v19 = 0;
        *unsigned int v15 = v16;
        uint64_t v17 = v20;
        uint64_t v20 = 0;
        v15[1] = v17;
        HIDWORD(v23) = v14;
      }
      std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v7);
      if (!--v6)
      {
        WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v22, HIDWORD(v23));
        *(void *)a2 = v22;
        uint64_t v18 = v23;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        *(void *)(a2 + 8) = v18;
        goto LABEL_14;
      }
    }
  }
  else
  {
    if (!result)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
LABEL_13:
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      *(void *)a2 = v12;
      *(void *)(a2 + 8) = v13;
LABEL_14:
      *(unsigned char *)(a2 + 16) = 1;
      return WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v5);
    }
    LODWORD(v23) = result;
    uint64_t v22 = WTF::fastMalloc((WTF *)(16 * result));
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::String,WTF::String>>(a1, (uint64_t)&v19);
      if (!v21) {
        break;
      }
      if (HIDWORD(v23) == v23)
      {
        WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WTF::String>>((uint64_t)&v22, (unint64_t)&v19);
      }
      else
      {
        int v8 = HIDWORD(v23) + 1;
        unint64_t v9 = (void *)(v22 + 16 * HIDWORD(v23));
        uint64_t v10 = v19;
        uint64_t v19 = 0;
        void *v9 = v10;
        uint64_t v11 = v20;
        uint64_t v20 = 0;
        v9[1] = v11;
        HIDWORD(v23) = v8;
      }
      std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v7);
      if (!--v6)
      {
        uint64_t v12 = v22;
        uint64_t v13 = v23;
        goto LABEL_13;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v7);
  return WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v5);
}

void sub_198938194(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WTF::String>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = (uint64_t *)WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  int v5 = v4 + 1;
  unint64_t v6 = (void *)(*(void *)a1 + 16 * v4);
  uint64_t v7 = *v3;
  *unint64_t v3 = 0;
  *unint64_t v6 = v7;
  uint64_t v8 = v3[1];
  v3[1] = 0;
  v6[1] = v8;
  *(_DWORD *)(a1 + 12) = v5;
  return 1;
}

unint64_t WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 28))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void **)result;
    uint64_t v5 = *(unsigned int *)(result + 12);
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    memcpy(v6, v4, 16 * v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = result[3];
    if (v4 > a2)
    {
      unint64_t result = (unsigned int *)WTF::VectorDestructor<true,WebCore::HTTPHeaderField>::destruct((WTF::StringImpl *)(*(void *)result + 16 * a2), (WTF::StringImpl *)(*(void *)result + 16 * v4));
      v3[3] = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        unint64_t result = (unsigned int *)WTF::fastRealloc(v5, (void *)(16 * a2));
        *(void *)uint64_t v3 = result;
        return result;
      }
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      unint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = a2;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        unint64_t result = (unsigned int *)memcpy(result, v5, 16 * v4);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,CGSize,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(double **)a2;
    uint64_t v7 = 16 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<CGSize,void>::encode(a1, v6);
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  return result;
}

__n128 WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (__n128 *)WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  __n128 result = *v3;
  *(__n128 *)(*(void *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

unint64_t WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1 > a3 || (unint64_t)v5 + 16 * *(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  else
  {
    unint64_t v6 = a3 - (void)v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void **WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      unint64_t v4 = *result;
      uint64_t v5 = *((unsigned int *)result + 3);
      unint64_t v6 = (void *)WTF::fastMalloc((WTF *)(16 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *unint64_t v3 = v6;
      __n128 result = (void **)memcpy(v6, v4, 16 * v5);
      if (v4)
      {
        if (*v3 == v4)
        {
          *unint64_t v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Region>(uint64_t a1, unint64_t a2)
{
  WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t result = WebCore::Region::Region();
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1989387E4);
    }
    unint64_t v3 = *(WebCore::Region **)a1;
    unint64_t v4 = (WebCore::Region *)(*(void *)a1 + 24 * *(unsigned int *)(a1 + 12));
    int v5 = 24 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::Region>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WebCore::Region **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebCore::Region>::move(WebCore::Region *a1, WebCore::Region *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    int v5 = a1;
    do
    {
      WebCore::Region::Region();
      WebCore::Region::~Region(v5);
      a3 += 24;
      int v5 = (WebCore::Region *)((char *)v5 + 24);
    }
    while (v5 != a2);
  }
}

void WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t this)
{
  if (*(unsigned int *)(a1 + 8) > this)
  {
    unint64_t v4 = *(unsigned int *)(a1 + 12);
    if (v4 > this)
    {
      int v5 = (WebCore::Region *)(*(void *)a1 + 24 * this);
      uint64_t v6 = 24 * v4 - 24 * this;
      do
      {
        WebCore::Region::~Region(v5);
        int v5 = (WebCore::Region *)(v7 + 24);
        v6 -= 24;
      }
      while (v6);
      *(_DWORD *)(a1 + 12) = this;
      LODWORD(v4) = this;
    }
    unint64_t v8 = *(WebCore::Region **)a1;
    if (this)
    {
      if (this >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return;
      }
      unint64_t v9 = (WTF *)(24 * this);
      uint64_t v10 = WTF::fastMalloc(v9);
      *(_DWORD *)(a1 + 8) = (v9 & 0xFFFFFFF8) / 0x18;
      *(void *)a1 = v10;
      if ((WebCore::Region *)v10 != v8) {
        WTF::VectorMover<false,WebCore::Region>::move(v8, (WebCore::Region *)((char *)v8 + 24 * v4), v10);
      }
    }
    if (v8)
    {
      if (*(WebCore::Region **)a1 == v8)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v8, (void *)this);
    }
  }
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 48 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::MediaControlsContextMenuItem,void>::encode(a1, v6);
      v6 += 48;
      v7 -= 48;
    }
    while (v7);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  if (result >= 0x5555)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::MediaControlsContextMenuItem>(a1, (uint64_t)&v19);
      if (!v26) {
        break;
      }
      if (HIDWORD(v28) == v28)
      {
        WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaControlsContextMenuItem>((uint64_t)&v27, (unint64_t)&v19);
      }
      else
      {
        uint64_t v14 = v27 + 48 * HIDWORD(v28);
        *(void *)uint64_t v14 = v19;
        uint64_t v15 = v20;
        uint64_t v20 = 0;
        *(void *)(v14 + 8) = v15;
        uint64_t v16 = v21;
        uint64_t v21 = 0;
        *(void *)(v14 + 16) = v16;
        *(unsigned char *)(v14 + 24) = v22;
        *(void *)(v14 + 32) = 0;
        *(void *)(v14 + 40) = 0;
        uint64_t v17 = v23;
        uint64_t v23 = 0;
        *(void *)(v14 + 32) = v17;
        LODWORD(v17) = v24;
        int v24 = 0;
        *(_DWORD *)(v14 + 40) = v17;
        LODWORD(v17) = v25;
        int v25 = 0;
        *(_DWORD *)(v14 + 44) = v17;
        ++HIDWORD(v28);
      }
      std::__optional_destruct_base<WebCore::MediaControlsContextMenuItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v7);
      if (!--v6)
      {
        WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v27, HIDWORD(v28));
        *(void *)a2 = v27;
        uint64_t v18 = v28;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        *(void *)(a2 + 8) = v18;
        goto LABEL_14;
      }
    }
  }
  else
  {
    if (!result)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
LABEL_13:
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      *(void *)a2 = v12;
      *(void *)(a2 + 8) = v13;
LABEL_14:
      *(unsigned char *)(a2 + 16) = 1;
      return WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v5);
    }
    LODWORD(v28) = 48 * (int)result / 0x30u;
    uint64_t v27 = WTF::fastMalloc((WTF *)(48 * result));
    while (1)
    {
      IPC::Decoder::decode<WebCore::MediaControlsContextMenuItem>(a1, (uint64_t)&v19);
      if (!v26) {
        break;
      }
      if (HIDWORD(v28) == v28)
      {
        WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaControlsContextMenuItem>((uint64_t)&v27, (unint64_t)&v19);
      }
      else
      {
        uint64_t v8 = v27 + 48 * HIDWORD(v28);
        *(void *)uint64_t v8 = v19;
        uint64_t v9 = v20;
        uint64_t v20 = 0;
        *(void *)(v8 + 8) = v9;
        uint64_t v10 = v21;
        uint64_t v21 = 0;
        *(void *)(v8 + 16) = v10;
        *(unsigned char *)(v8 + 24) = v22;
        *(void *)(v8 + 32) = 0;
        *(void *)(v8 + 40) = 0;
        uint64_t v11 = v23;
        uint64_t v23 = 0;
        *(void *)(v8 + 32) = v11;
        LODWORD(v11) = v24;
        int v24 = 0;
        *(_DWORD *)(v8 + 40) = v11;
        LODWORD(v11) = v25;
        int v25 = 0;
        *(_DWORD *)(v8 + 44) = v11;
        ++HIDWORD(v28);
      }
      std::__optional_destruct_base<WebCore::MediaControlsContextMenuItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v7);
      if (!--v6)
      {
        uint64_t v12 = v27;
        uint64_t v13 = v28;
        goto LABEL_13;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  std::__optional_destruct_base<WebCore::MediaControlsContextMenuItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v7);
  return WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v5);
}

void sub_198938C08(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WebCore::MediaControlsContextMenuItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 - 48, v5);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::MediaControlsContextMenuItem>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::MediaControlsContextMenuItem,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 48))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198938CA8(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::MediaControlsContextMenuItem,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaControlsContextMenuItem>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 48 * *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)v3;
  uint64_t v6 = *(void *)(v3 + 8);
  *(void *)(v3 + 8) = 0;
  *(void *)uint64_t v4 = v5;
  *(void *)(v4 + 8) = v6;
  uint64_t v7 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  *(void *)(v4 + 16) = v7;
  *(unsigned char *)(v4 + 24) = *(unsigned char *)(v3 + 24);
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  uint64_t v8 = *(void *)(v3 + 32);
  *(void *)(v3 + 32) = 0;
  *(void *)(v4 + 32) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 40);
  *(_DWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v4 + 40) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 44);
  *(_DWORD *)(v3 + 44) = 0;
  *(_DWORD *)(v4 + 44) = v8;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x198938EACLL);
    }
    unint64_t v3 = *(WTF::StringImpl **)a1;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)a1 + 48 * *(unsigned int *)(a1 + 12));
    int v5 = 48 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::MediaControlsContextMenuItem>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::MediaControlsContextMenuItem>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = (uint64_t)result + 32;
    do
    {
      uint64_t v7 = v5 - 32;
      uint64_t v6 = *(void *)(v5 - 32);
      uint64_t v8 = *(void *)(v5 - 24);
      *(void *)(v5 - 24) = 0;
      *(void *)a3 = v6;
      *(void *)(a3 + 8) = v8;
      uint64_t v9 = *(void *)(v5 - 16);
      *(void *)(v5 - 16) = 0;
      *(void *)(a3 + 16) = v9;
      *(unsigned char *)(a3 + 24) = *(unsigned char *)(v5 - 8);
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      uint64_t v10 = *(void *)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)(a3 + 32) = v10;
      LODWORD(v10) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(a3 + 40) = v10;
      LODWORD(v10) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(a3 + 44) = v10;
      WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      uint64_t v11 = *(WTF::StringImpl **)(v5 - 16);
      *(void *)(v5 - 16) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, a2);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      unint64_t result = *(WTF::StringImpl **)(v5 - 24);
      *(void *)(v5 - 24) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v5 += 48;
      a3 += 48;
    }
    while ((WTF::StringImpl *)(v7 + 48) != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::MediaControlsContextMenuItem,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 48))
  {
    WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 32, a2);
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

unsigned int *WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  if (result[2] > this)
  {
    uint64_t v3 = (uint64_t)result;
    unint64_t v4 = result[3];
    if (v4 > this)
    {
      unint64_t result = (unsigned int *)WTF::VectorDestructor<true,WebCore::MediaControlsContextMenuItem>::destruct((WTF::StringImpl *)(*(void *)result + 48 * this), (WTF::StringImpl *)(*(void *)result + 48 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    uint64_t v5 = *(WTF::StringImpl **)v3;
    if (this)
    {
      if (this >= 0x5555556)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v6 = (WTF *)(48 * this);
      unint64_t result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF0) / 0x30;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        unint64_t result = (unsigned int *)WTF::VectorMover<false,WebCore::MediaControlsContextMenuItem>::move(v5, (WTF::StringImpl *)((char *)v5 + 48 * v4), (uint64_t)result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerData> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 64);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989391C0);
    }
    *uint64_t v5 = 1;
    if (*(unsigned char *)(a2 + 64))
    {
      IPC::ArgumentCoder<WebCore::ServiceWorkerData,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v7 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerData>,void>::decode<IPC::Decoder>(v7, v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989391E0);
    }
    *uint64_t v5 = 0;
  }
}

void IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerData>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v16 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        a1 = v16;
        uint64_t v11 = *v16;
        unint64_t v10 = v16[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_14;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v10 = v3;
    uint64_t v11 = 0;
LABEL_14:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      uint64_t v15 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        a1 = v15;
        uint64_t v4 = *v15;
        unint64_t v3 = v15[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_15;
  }
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
LABEL_15:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v14 = a1[3];
    if (v14 && v3) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v4);
    }
    goto LABEL_16;
  }
  if (!v7)
  {
    LOBYTE(v17) = 0;
    char v20 = 0;
    std::__optional_move_base<WebCore::ServiceWorkerData,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)&v17);
    goto LABEL_8;
  }
  IPC::Decoder::decode<WebCore::ServiceWorkerData>(a1, (uint64_t)&v17);
  if (!v20)
  {
LABEL_16:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 72) = 0;
    return;
  }
  *(_OWORD *)a2 = v17;
  WTF::URL::URL(a2 + 16, (uint64_t *)&v18);
  *(_WORD *)(a2 + 56) = v19;
  *(unsigned char *)(a2 + 64) = 1;
LABEL_8:
  *(unsigned char *)(a2 + 72) = 1;
  if (v20)
  {
    uint64_t v9 = v18;
    uint64_t v18 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
}

void sub_1989393E0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a18 && a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::variant<WebCore::ShareableResourceHandle,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>,void>::encode<IPC::Encoder,std::variant<WebCore::ShareableResourceHandle,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>>(IPC::Encoder *a1, unint64_t a2, uint64_t a3)
{
  if (a3)
  {
    goto LABEL_4;
  }
  if (*(_DWORD *)(a2 + 24))
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_4:
    IPC::ArgumentCoder<std::variant<WebCore::ShareableResourceHandle,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>,void>::encode<IPC::Encoder,std::variant<WebCore::ShareableResourceHandle,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>,0ul>(a1, a2, a3);
    return;
  }

  IPC::ArgumentCoder<WebCore::ShareableResourceHandle,void>::encode(a1, a2);
}

void IPC::ArgumentCoder<std::variant<WebCore::ShareableResourceHandle,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>,void>::encode<IPC::Encoder,std::variant<WebCore::ShareableResourceHandle,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>,0ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 24) == 1)
    {
      IPC::ArgumentCoder<WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>,void>::encode<IPC::Encoder,WebCore::FragmentedSharedBuffer>(a1, (WebCore::FragmentedSharedBuffer **)a2);
    }
    else
    {
      unint64_t v3 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
      IPC::ArgumentCoder<std::variant<WebCore::ShareableResourceHandle,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>,void>::decode<IPC::Decoder>(v3, v4);
    }
  }
}

void IPC::ArgumentCoder<std::variant<WebCore::ShareableResourceHandle,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>,void>::decode<IPC::Decoder>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      uint64_t v13 = v2;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v5, v4);
        uint64_t v2 = v13;
        uint64_t v10 = *v13;
        unint64_t v9 = v13[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_15;
  }
  unsigned int v7 = (unsigned char *)(v5 + v6);
  a1[2] = v7 + 1;
  if (!v5)
  {
    unint64_t v9 = v4;
    uint64_t v10 = 0;
LABEL_15:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v12 = v2[3];
    if (v12 && v9) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
    }
    goto LABEL_4;
  }
  if (*v7 >= 2u)
  {
LABEL_4:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 32) = 0;
    return;
  }
  if (*v7)
  {
    IPC::Decoder::decode<WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>(&v14, (IPC::Decoder *)a1);
    char v8 = v15;
    if ((_BYTE)v15)
    {
      *(void *)a2 = v14;
      char v8 = 1;
      *(_DWORD *)(a2 + 24) = 1;
    }
    else
    {
      *(unsigned char *)a2 = 0;
    }
    *(unsigned char *)(a2 + 32) = v8;
  }
  else
  {
    IPC::Decoder::decode<WebCore::ShareableResourceHandle>((IPC::Decoder *)a1, (uint64_t)&v14);
    if (!v16) {
      goto LABEL_4;
    }
    WTF::MachSendRight::MachSendRight();
    *(_OWORD *)(a2 + 8) = v15;
    *(_DWORD *)(a2 + 24) = 0;
    *(unsigned char *)(a2 + 32) = 1;
    if (v16) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v14);
    }
  }
}

void sub_198939638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a11);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebCore::ShareableResourceHandle>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a2 + 24)) {
    IPC::Decoder::markInvalid(a1);
  }
}

void sub_198939690(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 24)) {
    WTF::MachSendRight::~MachSendRight(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerJobDataIdentifier>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerJobDataIdentifier> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198939758);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
      return (unsigned char *)IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)(a2 + 8));
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198939778);
    }
    unsigned char *result = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 12);
  uint64_t result = IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)uint64_t result = v4;
    uint64_t v7 = *(WTF ***)a2;
    uint64_t v8 = *(unsigned int *)(a2 + 8);
    uint64_t v9 = *(void *)a2 + 96 * v8;
    if (*(_DWORD *)(a2 + 12))
    {
      if (v8)
      {
        uint64_t v10 = 96 * v8;
        while (1)
        {
          uint64_t result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v7);
          if (!result) {
            break;
          }
          v7 += 12;
          v10 -= 96;
          if (!v10)
          {
            uint64_t v7 = (WTF **)v9;
            break;
          }
        }
        uint64_t v11 = (uint64_t *)v7;
        uint64_t v7 = *(WTF ***)a2;
        LODWORD(v8) = *(_DWORD *)(a2 + 8);
      }
      else
      {
        uint64_t v11 = *(uint64_t **)a2;
      }
    }
    else
    {
      uint64_t v11 = (uint64_t *)(*(void *)a2 + 96 * v8);
    }
    uint64_t v12 = (uint64_t *)&v7[12 * v8];
    while (v11 != v12)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v11);
      uint64_t result = (uint64_t)IPC::ArgumentCoder<WebCore::ServiceWorkerImportedScript,void>::encode(a1, v11 + 5);
      uint64_t v13 = v11 + 12;
      uint64_t v11 = (uint64_t *)v9;
      if (v13 != (uint64_t *)v9)
      {
        uint64_t v11 = v13;
        while (1)
        {
          uint64_t result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v11);
          if (!result) {
            break;
          }
          v11 += 12;
          if (v11 == (uint64_t *)v9)
          {
            uint64_t v11 = (uint64_t *)v9;
            break;
          }
        }
      }
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerJobDataIdentifier>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    unsigned char *result = 0;
    result[1] = 0;
    uint64_t v11 = result[3];
    if (v11)
    {
      uint64_t v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        uint64_t result = v14;
        uint64_t v10 = *v14;
        unint64_t v9 = v14[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_12;
  }
  unint64_t v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v9 = v3;
    uint64_t v10 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    unsigned char *result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      uint64_t v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        uint64_t result = v13;
        uint64_t v4 = *v13;
        unint64_t v3 = v13[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      uint64_t result = (uint64_t *)IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(result, (uint64_t)&v15);
      char v8 = v16;
      if (v16)
      {
        *(_OWORD *)a2 = v15;
        char v8 = 1;
        *(unsigned char *)(a2 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 16) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 24) = v8;
    return result;
  }
LABEL_13:
  unsigned char *result = 0;
  result[1] = 0;
  uint64_t result = (uint64_t *)result[3];
  if (result && v3) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ServiceWorkerImportedScript>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ServiceWorkerImportedScript,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 56))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198939AC4(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::ServiceWorkerImportedScript,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashMapTranslator<WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>::translate<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>,WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>> WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineAdd<WTF::URL,WebCore::ServiceWorkerImportedScript>(WTF::URL &&,WebCore::ServiceWorkerImportedScript &&)::{lambda(void)#1}>(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  WTF::URL::operator=(a1, a2);
  uint64_t v5 = *a3;
  uint64_t v6 = **a3;
  BOOL v7 = *a3;
  uint64_t *v7 = 0;
  uint64_t v17 = v6;
  WTF::URL::URL((uint64_t)v18, v7 + 1);
  unint64_t v9 = (WTF::StringImpl *)v5[6];
  v5[6] = 0;
  __int16 v19 = v9;
  uint64_t v10 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = v17;
  if (v10) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v10, v8);
  }
  WTF::URL::operator=(a1 + 48, (uint64_t)v18);
  uint64_t v12 = v19;
  __int16 v19 = 0;
  uint64_t v13 = *(WTF::StringImpl **)(a1 + 88);
  *(void *)(a1 + 88) = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, v11);
      uint64_t v14 = v19;
      __int16 v19 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v11);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
    else
    {
      *(_DWORD *)v13 -= 2;
      __int16 v19 = 0;
    }
  }
  long long v15 = v18[0];
  v18[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v11);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  return 0;
}

void sub_198939BEC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::allocateTable(unsigned int a1)
{
  uint64_t v2 = WTF::fastMalloc((WTF *)(96 * a1));
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v4 = a1;
    uint64_t v5 = (WTF::URL *)v2;
    do
    {
      WTF::URL::URL(v5);
      WTF::GenericHashTraits<WebCore::ServiceWorkerImportedScript>::emptyValue((uint64_t)v5 + 40);
      uint64_t v5 = (WTF::URL *)((char *)v5 + 96);
      --v4;
    }
    while (v4);
  }
  return v3;
}

uint64_t *WTF::GenericHashTraits<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>::assignToEmpty<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>(uint64_t a1, uint64_t a2)
{
  WTF::URL::operator=(a1, a2);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v6 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = v5;
  if (v6) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, v4);
  }
  WTF::URL::operator=(a1 + 48, a2 + 48);

  return WTF::String::operator=((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
}

WTF::StringImpl *std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>(uint64_t *a1, uint64_t a2)
{
  WTF::URL::URL((uint64_t)v20, a1);
  uint64_t v4 = a1[5];
  a1[5] = 0;
  uint64_t v21 = (unsigned int *)v4;
  WTF::URL::URL((uint64_t)v22, a1 + 6);
  uint64_t v5 = (WTF::StringImpl *)a1[11];
  a1[11] = 0;
  uint64_t v23 = v5;
  WTF::URL::operator=((uint64_t)a1, a2);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  char v8 = (unsigned int *)a1[5];
  a1[5] = v7;
  if (v8) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v8, v6);
  }
  WTF::URL::operator=((uint64_t)(a1 + 6), a2 + 48);
  unint64_t v9 = (WTF::StringImpl **)(a2 + 88);
  WTF::String::operator=(a1 + 11, (uint64_t *)(a2 + 88));
  WTF::URL::operator=(a2, (uint64_t)v20);
  uint64_t v11 = v21;
  uint64_t v21 = 0;
  uint64_t v12 = *(unsigned int **)(a2 + 40);
  *(void *)(a2 + 40) = v11;
  if (v12) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v12, v10);
  }
  WTF::URL::operator=(a2 + 48, (uint64_t)v22);
  uint64_t v14 = v23;
  uint64_t v23 = 0;
  long long v15 = *v9;
  WTF::StringImpl *v9 = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      char v16 = v23;
      uint64_t v23 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v13);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      *(_DWORD *)v15 -= 2;
      uint64_t v23 = 0;
    }
  }
  uint64_t v17 = v22[0];
  v22[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v13);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t v18 = v21;
  uint64_t v21 = 0;
  if (v18) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v18, v13);
  }
  uint64_t result = v20[0];
  v20[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198939EC0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20)
{
  if (a14) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a14, a2);
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::URL *WTF::GenericHashTraits<WebCore::ServiceWorkerImportedScript>::emptyValue(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t result = WTF::URL::URL((WTF::URL *)(a1 + 8));
  *(void *)(a1 + 48) = 0;
  return result;
}

void sub_198939F8C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::ServiceWorkerImportedScript,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(unsigned int **)a1;
    *(void *)a1 = 0;
    if (v5) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v5, a2);
    }
  }
  return a1;
}

WTF *IPC::ArgumentCoder<std::optional<WebCore::Path>,void>::encode<IPC::Encoder,std::optional<WebCore::Path> const&>(IPC::Encoder *a1, unsigned __int8 *a2)
{
  int v4 = a2[72];
  uint64_t result = (WTF *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19893A0CCLL);
    }
    *(unsigned char *)uint64_t result = 1;
    if (a2[72])
    {
      return IPC::ArgumentCoder<WebCore::Path,void>::encode(a1, (WebCore::Path *)a2);
    }
    else
    {
      uint64_t v7 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return (WTF *)IPC::ArgumentCoder<std::span<int const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v7, v8, v9);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19893A0ECLL);
    }
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::span<int const,18446744073709551615ul>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, const void *a2, uint64_t a3)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a3);
  if (a3)
  {
    uint64_t v7 = (void *)IPC::Encoder::grow(a1, 4uLL, 4 * a3);
    if (v8 < 4 * a3)
    {
      unint64_t result = 831;
      __break(0xC471u);
    }
    else
    {
      return (unint64_t)memcpy(v7, a2, 4 * a3);
    }
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *((unsigned int *)a2 + 3));
  uint64_t v5 = *((unsigned int *)a2 + 3);
  if (v5)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = v6 + 16 * v5;
    do
    {
      IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)v6);
      unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(v6 + 8));
      v6 += 16;
    }
    while (v6 != v7);
  }
  return result;
}

void *IPC::VectorArgumentCoder<false,WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(void *result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((unsigned int *)a2 + 3);
  uint64_t v4 = result[2];
  unint64_t v5 = *result + v4;
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v9 + 8;
    if (v9 > 0xFFFFFFFFFFFFFFF7 || v10 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(void *)(*result + v9) = v3;
      result[2] = v10;
      uint64_t v3 = *((unsigned int *)a2 + 3);
    }
  }
  if (v3)
  {
    uint64_t v12 = *a2;
    uint64_t v13 = *a2 + 16 * v3;
    do
    {
      IPC::StreamConnectionEncoder::operator<<<int const&>(v2, (_DWORD *)v12);
      unint64_t result = IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(v2, (void *)(v12 + 8));
      v12 += 16;
    }
    while (v12 != v13);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::span<int const,18446744073709551615ul>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::span<int const,18446744073709551615ul>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result && v5 != 0)
    {
      BOOL v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::span<int const,18446744073709551615ul>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!v5) {
    goto LABEL_14;
  }
  if (!result)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    goto LABEL_11;
  }
  if (result >> 62) {
    goto LABEL_14;
  }
  unint64_t v6 = a1[1];
  uint64_t v7 = *a1;
  unint64_t v8 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  unint64_t v9 = 4 * result;
  if (v6 < v8 || v6 - v8 < v9)
  {
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result && v6) {
      unint64_t result = (*(uint64_t (**)(unint64_t))(*(void *)result + 16))(result);
    }
    goto LABEL_14;
  }
  uint64_t v11 = v7 + v8;
  a1[2] = v11 + v9;
  if (!v7)
  {
LABEL_14:
    char v12 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_12;
  }
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = result;
LABEL_11:
  char v12 = 1;
LABEL_12:
  *(unsigned char *)(a2 + 16) = v12;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::Region::Span>(uint64_t a1, void *a2)
{
  uint64_t v4 = IPC::Decoder::decode<unsigned int>(a2);
  uint64_t result = IPC::Decoder::decode<unsigned long long>(a2);
  if (*a2)
  {
    if ((v4 & 0xFF00000000) != 0 && v6)
    {
      *(_DWORD *)a1 = v4;
      *(void *)(a1 + 8) = result;
      *(unsigned char *)(a1 + 16) = 1;
      return result;
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v7 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    unint64_t v9 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v9();
  }
  return result;
}

uint64_t WTF::VectorBuffer<WebCore::Region::Span,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2 = result;
  if (a2 < 0x11)
  {
    *(void *)uint64_t result = result + 16;
    *(_DWORD *)(result + 8) = 16;
  }
  else
  {
    int v3 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(void *)uint64_t v2 = result;
    }
  }
  return result;
}

__n128 WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Region::Span>(uint64_t a1, unint64_t a2)
{
  int v3 = (__n128 *)WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  __n128 result = *v3;
  *(__n128 *)(*(void *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

unint64_t WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    uint64_t v4 = *(unsigned int *)(result + 12);
    __n128 result = WTF::VectorBuffer<WebCore::Region::Span,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(result, a2);
    if (v4)
    {
      uint64_t v6 = *(WTF **)v2;
      uint64_t v7 = 16 * v4;
      unint64_t v8 = v3;
      do
      {
        long long v9 = *(_OWORD *)v8;
        unint64_t v8 = (WTF *)((char *)v8 + 16);
        *(_OWORD *)uint64_t v6 = v9;
        uint64_t v6 = (WTF *)((char *)v6 + 16);
        v7 -= 16;
      }
      while (v7);
    }
    if ((WTF *)(v2 + 16) != v3 && v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v5);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, void *a2)
{
  if (*(unsigned int *)(result + 8) > (unint64_t)a2)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(unsigned int *)(result + 12);
    if (v3 > (unint64_t)a2)
    {
      *(_DWORD *)(result + 12) = a2;
      LODWORD(v3) = a2;
    }
    uint64_t v4 = *(WTF **)result;
    if (a2)
    {
      __n128 result = WTF::VectorBuffer<WebCore::Region::Span,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(result, (unint64_t)a2);
      if (v3)
      {
        uint64_t v5 = *(WTF **)v2;
        if (*(WTF **)v2 != v4)
        {
          uint64_t v6 = 16 * v3;
          uint64_t v7 = v4;
          do
          {
            long long v8 = *(_OWORD *)v7;
            uint64_t v7 = (WTF *)((char *)v7 + 16);
            *(_OWORD *)uint64_t v5 = v8;
            uint64_t v5 = (WTF *)((char *)v5 + 16);
            v6 -= 16;
          }
          while (v6);
        }
      }
    }
    if ((WTF *)(v2 + 16) != v4 && v4)
    {
      if (*(WTF **)v2 == v4)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      __n128 result = WTF::fastFree(v4, a2);
    }
    if (!*(void *)v2)
    {
      *(void *)uint64_t v2 = v2 + 16;
      *(_DWORD *)(v2 + 8) = 16;
    }
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::optional<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 40);
  __n128 result = (_DWORD *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19893A84CLL);
    }
    *(unsigned char *)__n128 result = 1;
    if (*(unsigned char *)(a2 + 40))
    {
      char v8 = *(unsigned char *)a2;
      IPC::Encoder::operator<<<BOOL>(a1, &v8);
      IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 1));
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
      return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 32));
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (_DWORD *)IPC::ArgumentCoder<std::optional<WebCore::MockWebAuthenticationConfiguration::HidConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::MockWebAuthenticationConfiguration::HidConfiguration> const&>(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19893A86CLL);
    }
    *(unsigned char *)__n128 result = 0;
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::MockWebAuthenticationConfiguration::HidConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::MockWebAuthenticationConfiguration::HidConfiguration> const&>(IPC::Encoder *a1, char *a2)
{
  int v4 = a2[32];
  __n128 result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19893A9B0);
    }
    unsigned char *result = 1;
    if (a2[32])
    {
      IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)a2);
      char v7 = a2[16];
      char v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v9)
      {
        __break(0xC471u);
        JUMPOUT(0x19893A9D0);
      }
      *char v8 = v7;
      char v10 = a2[17];
      uint64_t v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v12)
      {
        __break(0xC471u);
        JUMPOUT(0x19893A9F0);
      }
      unsigned char *v11 = v10;
      char v14 = a2[18];
      IPC::Encoder::operator<<<BOOL>(a1, &v14);
      IPC::Encoder::operator<<<BOOL>(a1, a2 + 19);
      IPC::Encoder::operator<<<BOOL>(a1, a2 + 20);
      IPC::Encoder::operator<<<BOOL>(a1, a2 + 21);
      IPC::Encoder::operator<<<BOOL>(a1, a2 + 22);
      IPC::Encoder::operator<<<BOOL>(a1, a2 + 23);
      IPC::Encoder::operator<<<BOOL>(a1, a2 + 24);
      IPC::Encoder::operator<<<BOOL>(a1, a2 + 25);
      return (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, a2 + 26);
    }
    else
    {
      uint64_t v13 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<std::optional<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration> const&>(v13);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19893AA10);
    }
    unsigned char *result = 0;
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 32);
  __n128 result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19893AAD8);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 32))
    {
      char v9 = *(unsigned char *)a2;
      IPC::Encoder::operator<<<BOOL>(a1, &v9);
      IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 8);
      IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 24));
      return (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 25));
    }
    else
    {
      char v7 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::VectorArgumentCoder<false,WebCore::IdentityRequestProvider,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IdentityRequestProvider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v7, v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19893AAF8);
    }
    unsigned char *result = 0;
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::IdentityRequestProvider,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IdentityRequestProvider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(char **)a2;
    uint64_t v7 = 2 * v5;
    do
    {
      char v8 = *v6;
      v6 += 2;
      char v9 = v8;
      unint64_t result = IPC::Encoder::operator<<<BOOL>(a1, &v9);
      v7 -= 2;
    }
    while (v7);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::IdentityRequestProvider,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (v5)
  {
    unint64_t v6 = result;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    if (result >= 0x80000)
    {
      uint64_t v12 = 0;
      LODWORD(v13) = 0;
      while (1)
      {
        unint64_t result = IPC::Decoder::decode<WebCore::IdentityRequestProvider>(a1);
        __int16 v15 = result;
        char v16 = BYTE2(result);
        if ((result & 0xFFFFFF) < 0x10000) {
          break;
        }
        if (v13 == v18)
        {
          unint64_t result = WTF::Vector<WebCore::IdentityRequestProvider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v17, v13 + 1, (unint64_t)&v15);
          int v14 = HIDWORD(v18);
          uint64_t v12 = v17;
          *((_WORD *)v17 + HIDWORD(v18)) = *(_WORD *)result;
        }
        else
        {
          *((_WORD *)v12 + v13) = result;
          int v14 = HIDWORD(v18);
        }
        uint64_t v13 = (v14 + 1);
        HIDWORD(v18) = v14 + 1;
        if (!--v6)
        {
          if (v18 > v13)
          {
            if (v14 == -1)
            {
              uint64_t v17 = 0;
              LODWORD(v18) = 0;
              unint64_t result = WTF::fastFree(v12, v9);
            }
            else
            {
              LODWORD(v18) = v14 + 1;
              unint64_t result = WTF::fastRealloc(v12, (void *)(2 * v13));
              uint64_t v17 = (WTF *)result;
            }
          }
          *(void *)a2 = v17;
          *(void *)(a2 + 8) = v18;
          goto LABEL_14;
        }
      }
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 16) = 0;
      uint64_t v7 = v17;
      if (v17) {
        goto LABEL_16;
      }
    }
    else if (result)
    {
      uint64_t v7 = (WTF *)WTF::fastMalloc((WTF *)(2 * result));
      unsigned int v8 = 0;
      LODWORD(v18) = v6;
      uint64_t v17 = v7;
      while (1)
      {
        unint64_t result = IPC::Decoder::decode<WebCore::IdentityRequestProvider>(a1);
        __int16 v15 = result;
        char v16 = BYTE2(result);
        if ((result & 0xFFFFFF) < 0x10000) {
          break;
        }
        if (v8 == v18)
        {
          unint64_t result = WTF::Vector<WebCore::IdentityRequestProvider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v17, v8 + 1, (unint64_t)&v15);
          int v10 = HIDWORD(v18);
          uint64_t v7 = v17;
          *((_WORD *)v17 + HIDWORD(v18)) = *(_WORD *)result;
        }
        else
        {
          *((_WORD *)v7 + v8) = result;
          int v10 = HIDWORD(v18);
        }
        unsigned int v8 = v10 + 1;
        HIDWORD(v18) = v10 + 1;
        if (!--v6)
        {
          int v11 = v18;
          goto LABEL_13;
        }
      }
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 16) = 0;
LABEL_16:
      uint64_t v17 = 0;
      LODWORD(v18) = 0;
      return WTF::fastFree(v7, v9);
    }
    else
    {
      unsigned int v8 = 0;
      int v11 = 0;
      uint64_t v7 = 0;
LABEL_13:
      *(void *)a2 = v7;
      *(_DWORD *)(a2 + 8) = v11;
      *(_DWORD *)(a2 + 12) = v8;
LABEL_14:
      *(unsigned char *)(a2 + 16) = 1;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
  return result;
}

void sub_19893AD68(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11)
{
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::IdentityRequestProvider>(uint64_t *a1)
{
  __int16 v11 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v11);
  if (HIBYTE(v11)) {
    BOOL v2 = v11 == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    if (*a1) {
      return 0x10000;
    }
  }
  else
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
      if (*a1)
      {
        __break(1u);
        goto LABEL_23;
      }
    }
  }
  uint64_t v8 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (!v8) {
      return 0;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 16))(result, 0);
    if (*a1)
    {
LABEL_23:
      __break(1u);
      return result;
    }
    uint64_t result = 0;
    uint64_t v9 = a1[1];
    uint64_t v10 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v10 && v9)
    {
      (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
      return 0;
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::IdentityRequestProvider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1 > a3 || (unint64_t)v5 + 2 * *(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::IdentityRequestProvider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  else
  {
    unint64_t v6 = a3 - (void)v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::IdentityRequestProvider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void **WTF::Vector<WebCore::IdentityRequestProvider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 31)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      uint64_t v4 = *result;
      uint64_t v5 = *((unsigned int *)result + 3);
      unint64_t v6 = (void *)WTF::fastMalloc((WTF *)(2 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *unint64_t v3 = v6;
      uint64_t result = (void **)memcpy(v6, v4, 2 * v5);
      if (v4)
      {
        if (*v3 == v4)
        {
          *unint64_t v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 48 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::VideoPresetData,void>::encode(a1, v6);
      v6 += 48;
      v7 -= 48;
    }
    while (v7);
  }
  return result;
}

unint64_t IPC::Decoder::decode<WebCore::VideoPresetData>(uint64_t a1, unint64_t *a2)
{
  uint64_t v6 = IPC::Decoder::decode<WebCore::IntSize>(a2);
  char v8 = v7;
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a2);
  if (!v11) {
    goto LABEL_24;
  }
  unint64_t v2 = result;
  char v74 = 0;
  uint64_t v75 = 0;
  if (result >= 0x10000)
  {
    uint64_t v17 = 0;
    LODWORD(v3) = 0;
    while (1)
    {
      unint64_t result = IPC::Decoder::decode<WebCore::LinearTimingFunction::Point>((uint64_t)&v72, a2, v10);
      if (!v73) {
        break;
      }
      if (v3 == v75)
      {
        unint64_t result = WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v74, v3 + 1, (unint64_t)&v72);
        int v18 = HIDWORD(v75);
        uint64_t v17 = v74;
        __n128 v10 = *(__n128 *)result;
        *((_OWORD *)v74 + HIDWORD(v75)) = *(_OWORD *)result;
      }
      else
      {
        __n128 v10 = v72;
        *((__n128 *)v17 + v3) = v72;
        int v18 = HIDWORD(v75);
      }
      uint64_t v3 = (v18 + 1);
      HIDWORD(v75) = v18 + 1;
      if (!--v2)
      {
        if (v75 > v3)
        {
          if (v18 == -1)
          {
            char v74 = 0;
            LODWORD(v75) = 0;
            unint64_t result = WTF::fastFree(v17, v14);
          }
          else
          {
            LODWORD(v75) = v18 + 1;
            unint64_t result = WTF::fastRealloc(v17, (void *)(16 * v3));
            char v74 = (WTF *)result;
          }
        }
        uint64_t v12 = v74;
        LODWORD(v2) = v75;
        LODWORD(v3) = HIDWORD(v75);
        goto LABEL_12;
      }
    }
    uint64_t v12 = v74;
    if (v74)
    {
LABEL_23:
      char v74 = 0;
      LODWORD(v75) = 0;
      WTF::fastFree(v12, v14);
    }
LABEL_24:
    __int16 v19 = (char *)*a2;
    unint64_t v20 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = a2[3];
    if (result) {
      goto LABEL_52;
    }
    goto LABEL_25;
  }
  if (result)
  {
    uint64_t v12 = (WTF *)WTF::fastMalloc((WTF *)(16 * result));
    LODWORD(v3) = 0;
    LODWORD(v75) = v2;
    char v74 = v12;
    do
    {
      unint64_t result = IPC::Decoder::decode<WebCore::LinearTimingFunction::Point>((uint64_t)&v72, a2, v13);
      if (!v73) {
        goto LABEL_23;
      }
      if (v3 == v75)
      {
        unint64_t result = WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v74, v3 + 1, (unint64_t)&v72);
        int v15 = HIDWORD(v75);
        uint64_t v12 = v74;
        __n128 v13 = *(__n128 *)result;
        *((_OWORD *)v74 + HIDWORD(v75)) = *(_OWORD *)result;
      }
      else
      {
        __n128 v13 = v72;
        *((__n128 *)v12 + v3) = v72;
        int v15 = HIDWORD(v75);
      }
      LODWORD(v3) = v15 + 1;
      HIDWORD(v75) = v15 + 1;
      --v2;
    }
    while (v2);
    LODWORD(v2) = v75;
  }
  else
  {
    uint64_t v12 = 0;
    LODWORD(v3) = 0;
  }
LABEL_12:
  for (int i = 0; ; int i = 1)
  {
    unint64_t v20 = a2[1];
    __int16 v19 = (char *)*a2;
    unint64_t v21 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v20 >= v21 && v20 - v21 > 7)
    {
      uint64_t v23 = &v19[v21];
      a2[2] = (unint64_t)(v23 + 8);
      if (v19)
      {
        int v24 = 0;
        uint64_t v25 = *(void *)v23;
        unint64_t v26 = (unint64_t)v19;
        goto LABEL_33;
      }
      unint64_t v26 = v20;
      unint64_t v38 = 0;
    }
    else
    {
      unint64_t v26 = 0;
      unint64_t v38 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v39 = a2[3];
      if (v39)
      {
        int v69 = i;
        if (v20)
        {
          (*(void (**)(unint64_t))(*(void *)v39 + 16))(v39);
          unint64_t v38 = *a2;
          unint64_t v26 = a2[1];
        }
        else
        {
          unint64_t v26 = 0;
          unint64_t v38 = 0;
        }
        int i = v69;
      }
    }
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = a2[3];
    if (result)
    {
      int v66 = i;
      if (v26)
      {
        unint64_t result = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t))(*(void *)result
                                                                                                 + 16))(result, v38, v26);
        uint64_t v25 = 0;
        unint64_t v26 = *a2;
        unint64_t v20 = a2[1];
        int v24 = 1;
        __int16 v19 = (char *)*a2;
      }
      else
      {
        unint64_t v20 = 0;
        __int16 v19 = 0;
        uint64_t v25 = 0;
        int v24 = 1;
      }
      int i = v66;
    }
    else
    {
      unint64_t v26 = 0;
      unint64_t v20 = 0;
      __int16 v19 = 0;
      uint64_t v25 = 0;
      int v24 = 1;
    }
LABEL_33:
    unint64_t v27 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v19;
    if (v20 >= v27 && v20 - v27 > 7)
    {
      int v29 = (void *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      char v30 = (char *)(v29 + 1);
      a2[2] = (unint64_t)(v29 + 1);
      if (v19)
      {
        int v31 = 0;
        uint64_t v32 = *v29;
        goto LABEL_40;
      }
      unint64_t v26 = v20;
      unint64_t v40 = 0;
    }
    else
    {
      unint64_t v26 = 0;
      unint64_t v40 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v41 = a2[3];
      if (v41)
      {
        int v63 = v24;
        int v70 = i;
        uint64_t v58 = v25;
        if (v20)
        {
          (*(void (**)(unint64_t))(*(void *)v41 + 16))(v41);
          unint64_t v40 = *a2;
          unint64_t v26 = a2[1];
        }
        else
        {
          unint64_t v26 = 0;
          unint64_t v40 = 0;
        }
        int v24 = v63;
        int i = v70;
        uint64_t v25 = v58;
      }
    }
    *a2 = 0;
    a2[1] = 0;
    unint64_t v42 = a2[3];
    if (!v42)
    {
      uint64_t v32 = 0;
      unint64_t v26 = 0;
      __int16 v19 = 0;
      int v31 = 1;
      goto LABEL_60;
    }
    int v61 = v24;
    int v67 = i;
    uint64_t v56 = v25;
    if (!v26)
    {
      uint64_t v32 = 0;
      __int16 v19 = 0;
      int v31 = 1;
      goto LABEL_60;
    }
    unint64_t result = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t))(*(void *)v42 + 16))(v42, v40, v26);
    uint64_t v32 = 0;
    __int16 v19 = (char *)*a2;
    unint64_t v20 = a2[1];
    char v30 = (char *)a2[2];
    int v31 = 1;
    unint64_t v26 = *a2;
    int v24 = v61;
    int i = v67;
    uint64_t v25 = v56;
LABEL_40:
    unint64_t v33 = v30 - v19;
    if (v20 <= v33) {
      break;
    }
    unsigned int v34 = &v19[v33];
    a2[2] = (unint64_t)(v34 + 1);
    if (!v19)
    {
      unint64_t v26 = v20;
      goto LABEL_60;
    }
    unsigned int v35 = *v34;
    if (v35 > 1) {
      goto LABEL_62;
    }
    int v36 = 0;
    BOOL v37 = v35 != 0;
LABEL_44:
    if (v8 && !i && !v24 && !v31 && !v36)
    {
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v12;
      *(_DWORD *)(a1 + 16) = v2;
      *(_DWORD *)(a1 + 20) = v3;
      *(void *)(a1 + 24) = v25;
      *(void *)(a1 + 32) = v32;
      *(unsigned char *)(a1 + 40) = v37;
      *(unsigned char *)(a1 + 48) = 1;
      return result;
    }
    __break(1u);
LABEL_52:
    if (v20) {
      unint64_t result = (*(uint64_t (**)(unint64_t, char *))(*(void *)result + 16))(result, v19);
    }
LABEL_25:
    uint64_t v12 = 0;
  }
  int v51 = v31;
  uint64_t v54 = v32;
  uint64_t v59 = v25;
  int v64 = v24;
  int v71 = i;
  unint64_t v26 = 0;
  unint64_t v48 = a2[3];
  *a2 = 0;
  a2[1] = 0;
  if (v20 && v48)
  {
    (*(void (**)(unint64_t))(*(void *)v48 + 16))(v48);
    __int16 v19 = (char *)*a2;
    unint64_t v26 = a2[1];
  }
  else
  {
    __int16 v19 = 0;
  }
  int v24 = v64;
  int i = v71;
  uint64_t v32 = v54;
  uint64_t v25 = v59;
  int v31 = v51;
LABEL_60:
  *a2 = 0;
  a2[1] = 0;
  unint64_t v43 = a2[3];
  if (v43)
  {
    int v50 = v31;
    uint64_t v53 = v32;
    uint64_t v57 = v25;
    int v62 = v24;
    int v68 = i;
    if (v26)
    {
      (*(void (**)(unint64_t, char *, unint64_t))(*(void *)v43 + 16))(v43, v19, v26);
      unint64_t v26 = *a2;
      unint64_t v20 = a2[1];
    }
    else
    {
      unint64_t v20 = 0;
    }
    int v24 = v62;
    int i = v68;
    uint64_t v32 = v53;
    uint64_t v25 = v57;
    int v31 = v50;
  }
  else
  {
    unint64_t v20 = 0;
    unint64_t v26 = 0;
  }
LABEL_62:
  *a2 = 0;
  a2[1] = 0;
  unint64_t v44 = a2[3];
  if (v44)
  {
    if (v20)
    {
      int v49 = v31;
      uint64_t v52 = v32;
      uint64_t v55 = v25;
      int v60 = v24;
      int v65 = i;
      unint64_t result = (*(uint64_t (**)(unint64_t, unint64_t))(*(void *)v44 + 16))(v44, v26);
      int v24 = v60;
      int i = v65;
      uint64_t v32 = v52;
      uint64_t v25 = v55;
      int v31 = v49;
      if (*a2)
      {
        BOOL v37 = 0;
        int v36 = 1;
        goto LABEL_44;
      }
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (v12) {
    char v45 = i;
  }
  else {
    char v45 = 1;
  }
  if ((v45 & 1) != 0 || (unint64_t result = WTF::fastFree(v12, v19), !*(unsigned char *)(a1 + 48)))
  {
    unint64_t v46 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = a2[3];
    if (result)
    {
      if (v46)
      {
        char v47 = *(uint64_t (**)(void))(*(void *)result + 16);
        return v47();
      }
    }
  }
  return result;
}

void sub_19893B6F4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18)
{
  if (!v18) {
    a14 = 1;
  }
  if ((a14 & 1) == 0) {
    WTF::fastFree(v18, a2);
  }
  _Unwind_Resume(exception_object);
}

__n128 WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::VideoPresetData>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = *(void *)a1 + 48 * a1[3];
  uint64_t v5 = *(void *)v3;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = v5;
  uint64_t v6 = *(void *)(v3 + 8);
  *(void *)(v3 + 8) = 0;
  *(void *)(v4 + 8) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 16);
  *(_DWORD *)(v3 + 16) = 0;
  *(_DWORD *)(v4 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 20);
  *(_DWORD *)(v3 + 20) = 0;
  *(_DWORD *)(v4 + 20) = v6;
  __n128 result = *(__n128 *)(v3 + 24);
  *(unsigned char *)(v4 + 40) = *(unsigned char *)(v3 + 40);
  *(__n128 *)(v4 + 24) = result;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF *WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x19893B934);
    }
    unint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    uint64_t v4 = (WTF *)(*(void *)result + 48 * *((unsigned int *)result + 3));
    int v5 = 48 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)unint64_t v2 = v6;
    __n128 result = WTF::VectorMover<false,WebCore::VideoPresetData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)unint64_t v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF *WTF::VectorMover<false,WebCore::VideoPresetData>::move(WTF *result, WTF *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    do
    {
      uint64_t v6 = *(void *)v5;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = v6;
      uint64_t v7 = *((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      *(void *)(a3 + 8) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 4);
      *((_DWORD *)v5 + 4) = 0;
      *(_DWORD *)(a3 + 16) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 5);
      *((_DWORD *)v5 + 5) = 0;
      *(_DWORD *)(a3 + 20) = v7;
      long long v8 = *(_OWORD *)((char *)v5 + 24);
      *(unsigned char *)(a3 + 40) = *((unsigned char *)v5 + 40);
      *(_OWORD *)(a3 + 24) = v8;
      __n128 result = (WTF *)*((void *)v5 + 1);
      if (result)
      {
        *((void *)v5 + 1) = 0;
        *((_DWORD *)v5 + 4) = 0;
        __n128 result = (WTF *)WTF::fastFree(result, a2);
      }
      int v5 = (WTF *)((char *)v5 + 48);
      a3 += 48;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  uint64_t v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v5 = 48 * v3;
    uint64_t v6 = (char *)v4 + 8;
    do
    {
      uint64_t v7 = *(WTF **)v6;
      if (*(void *)v6)
      {
        *(void *)uint64_t v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
        WTF::fastFree(v7, a2);
      }
      v6 += 48;
      v5 -= 48;
    }
    while (v5);
    uint64_t v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,void>::encode<IPC::Encoder,std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties> const&>(IPC::Encoder *a1, int *a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,void>::encode<IPC::Encoder,std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties> const&,0ul>(a1, (uint64_t)a2, a3);
  }
  if (a2[16])
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,void>::encode<IPC::Encoder,std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties> const&,0ul>(a1, (uint64_t)a2, a3);
  }
  int v4 = *a2;

  return (IPC::Encoder *)IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, v4);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,void>::encode<IPC::Encoder,std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties> const&,0ul>(IPC::Encoder *this, uint64_t a2, uint64_t a3)
{
  int v4 = this;
  if (a3 != 1)
  {
    return IPC::ArgumentCoder<std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,void>::encode<IPC::Encoder,std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties> const&,0ul,1ul>(this, a2, a3);
  }
  if (*(_DWORD *)(a2 + 64) != 1)
  {
    this = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,void>::encode<IPC::Encoder,std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties> const&,0ul,1ul>(this, a2, a3);
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, (uint64_t *)a2);
  int v5 = *(_DWORD *)(a2 + 8);

  return (IPC::Encoder *)IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(v4, v5);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,void>::encode<IPC::Encoder,std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties> const&,0ul,1ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 2)
  {
    return IPC::ArgumentCoder<std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,void>::encode<IPC::Encoder,std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties> const&,0ul,1ul,2ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 64) != 2)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,void>::encode<IPC::Encoder,std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties> const&,0ul,1ul,2ul>(a1, a2, a3);
  }

  return (IPC::Encoder *)IPC::ArgumentCoder<WebCore::MockCameraProperties,void>::encode(a1, a2);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,void>::encode<IPC::Encoder,std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties> const&,0ul,1ul,2ul>(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 3)
  {
    if (*(_DWORD *)(a2 + 64) == 3)
    {
      return (IPC::Encoder *)IPC::ArgumentCoder<WebCore::MockDisplayProperties,void>::encode(result, a2);
    }
    else
    {
      uint64_t v3 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)std::__optional_destruct_base<WebCore::MockCameraProperties,false>::~__optional_destruct_base[abi:sn180100](v3, v4);
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::MockCameraProperties,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v3 = *(WTF **)(a1 + 40);
    if (v3)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      WTF::fastFree(v3, a2);
    }
    uint64_t v4 = *(void *)(a1 + 32);
    if ((v4 & 0x8000000000000) != 0)
    {
      uint64_t v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
    WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::MockDisplayProperties,false>::~__optional_destruct_base[abi:sn180100](uint64_t result, void *a2)
{
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v2 = *(void *)(result + 8);
    if ((v2 & 0x8000000000000) != 0)
    {
      uint64_t v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v3);
        uint64_t v4 = result;
        WTF::fastFree((WTF *)v3, a2);
        return v4;
      }
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::TransformOperationData>,void>::encode<IPC::Encoder,std::optional<WebCore::TransformOperationData> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 88))
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (*(unsigned char *)(a2 + 88))
    {
      return IPC::ArgumentCoder<WebCore::TransformOperationData,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<WTF::RefPtr<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,void>::encode<IPC::Encoder,WebCore::TransformOperation>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

unint64_t IPC::ArgumentCoder<WTF::RefPtr<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,void>::encode<IPC::Encoder,WebCore::TransformOperation>(IPC::Encoder *a1, uint64_t *a2)
{
  if (*a2)
  {
    char v6 = 1;
    uint64_t v5 = (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(a1, &v6);
    return (unint64_t)IPC::ArgumentCoder<WebCore::TransformOperation,void>::encode(v5, *a2);
  }
  else
  {
    unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
    if (v3)
    {
      *(unsigned char *)unint64_t result = 0;
    }
    else
    {
      unint64_t result = 831;
      __break(0xC471u);
    }
  }
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<WTF::RefPtr<WebCore::PathOperation,WTF::RawPtrTraits<WebCore::PathOperation>,WTF::DefaultRefDerefTraits<WebCore::PathOperation>>,void>::encode<IPC::Encoder,WebCore::PathOperation>(IPC::Encoder *a1, uint64_t *a2)
{
  if (*a2)
  {
    char v6 = 1;
    uint64_t v4 = (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(a1, &v6);
    return IPC::ArgumentCoder<WebCore::PathOperation,void>::encode(v4, *a2);
  }
  else
  {
    char v5 = 0;
    return (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(a1, &v5);
  }
}

IPC::Encoder *IPC::ArgumentCoder<WTF::RefPtr<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,void>::encode<IPC::Encoder,WebCore::TimingFunction>(IPC::Encoder *a1, double **a2)
{
  if (*a2)
  {
    char v6 = 1;
    uint64_t v3 = (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(a1, &v6);
    return IPC::ArgumentCoder<WebCore::TimingFunction,void>::encode(v3, *a2);
  }
  else
  {
    char v5 = 0;
    return (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(a1, &v5);
  }
}

void IPC::Decoder::decode<WebCore::AcceleratedEffect::Keyframe>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = a2[1];
  unint64_t v5 = *a2;
  unint64_t v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    a2[2] = v5 + v6 + 8;
    if (!v5)
    {
      unint64_t v22 = v4;
      unint64_t v23 = 0;
      goto LABEL_36;
    }
    int v8 = 0;
    goto LABEL_8;
  }
  while (1)
  {
    unint64_t v22 = 0;
    unint64_t v23 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v24 = a2[3];
    if (v24)
    {
      if (v4)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v24 + 16))(v24, v5, v4);
        unint64_t v23 = *a2;
        unint64_t v22 = a2[1];
      }
      else
      {
        unint64_t v22 = 0;
        unint64_t v23 = 0;
      }
    }
LABEL_36:
    *a2 = 0;
    a2[1] = 0;
    unint64_t v25 = a2[3];
    if (v25 && v22) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v25 + 16))(v25, v23);
    }
    int v8 = 1;
LABEL_8:
    IPC::Decoder::decode<WebCore::AcceleratedEffectValues>(v44, a2);
    IPC::Decoder::decode<WTF::RefPtr<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>>((unint64_t)&v42, a2);
    unint64_t v9 = a2[1];
    unint64_t v10 = *a2;
    unint64_t v11 = a2[2] - *a2;
    if (v9 <= v11)
    {
      unint64_t v26 = 0;
      unint64_t v27 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v28 = a2[3];
      if (v28)
      {
        if (v9)
        {
          (*(void (**)(unint64_t))(*(void *)v28 + 16))(v28);
          unint64_t v27 = *a2;
          unint64_t v26 = a2[1];
        }
        else
        {
          unint64_t v26 = 0;
          unint64_t v27 = 0;
        }
      }
      goto LABEL_39;
    }
    uint64_t v12 = (unsigned __int8 *)(v10 + v11);
    a2[2] = (unint64_t)(v12 + 1);
    if (!v10)
    {
      unint64_t v26 = v9;
      unint64_t v27 = 0;
LABEL_39:
      unint64_t v9 = 0;
      unint64_t v10 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v29 = a2[3];
      if (v29)
      {
        if (v26)
        {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v29 + 16))(v29, v27, v26);
          unint64_t v10 = *a2;
          unint64_t v9 = a2[1];
        }
        else
        {
          unint64_t v9 = 0;
          unint64_t v10 = 0;
        }
      }
      goto LABEL_40;
    }
    unsigned int v13 = *v12;
    if (v13 < 2)
    {
      if (v13)
      {
        unsigned __int16 v14 = IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a2);
        unsigned int v15 = (v14 > 0xFFu) << 16;
        if ((v14 & 0xFF00) != 0) {
          int v16 = v14;
        }
        else {
          int v16 = 0;
        }
        int v17 = 256;
      }
      else
      {
        int v16 = 0;
        int v17 = 0;
        unsigned int v15 = 0x10000;
      }
      goto LABEL_17;
    }
LABEL_40:
    *a2 = 0;
    a2[1] = 0;
    unint64_t v30 = a2[3];
    if (v30 && v9) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v30 + 16))(v30, v10);
    }
    unsigned int v15 = 0;
    int v16 = 0;
    int v17 = 0;
LABEL_17:
    if (!HIWORD(v15))
    {
      unint64_t v31 = *a2;
      unint64_t v32 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v33 = a2[3];
      if (v33)
      {
        if (v32) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v33 + 16))(v33, v31);
        }
      }
    }
    unsigned int v18 = IPC::Decoder::decode<WTF::OptionSet<WebCore::AcceleratedEffectProperty>>((uint64_t *)a2);
    unsigned int v41 = v18;
    unint64_t v5 = *a2;
    if (!*a2) {
      break;
    }
    if (!v8)
    {
      unint64_t v5 = v45;
      if (v45)
      {
        unint64_t v5 = v43;
        if (v43)
        {
          unint64_t v5 = v16 | v15 | v17;
          unint64_t v4 = WORD1(v5);
          if (v4)
          {
            unint64_t v4 = HIWORD(v18);
            if (v4)
            {
              WebCore::AcceleratedEffect::Keyframe::Keyframe();
              *(void *)a1 = MEMORY[0x1E4FB6B60] + 16;
              *(void *)(a1 + 8) = v37;
              WebCore::AcceleratedEffectValues::AcceleratedEffectValues(a1 + 16, (uint64_t)v38);
              *(void *)(a1 + 264) = v39;
              *(_DWORD *)(a1 + 272) = v40;
              *(unsigned char *)(a1 + 280) = 1;
              uint64_t v39 = 0;
              WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v38, v20);
              goto LABEL_25;
            }
          }
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 280) = 0;
LABEL_25:
  if (v43)
  {
    unint64_t v21 = v42;
    unint64_t v42 = 0;
    if (v21)
    {
      if (v21[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v21 + 16))(v21);
      }
      else {
        --v21[2];
      }
    }
  }
  if (v45) {
    WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v44, v19);
  }
  if (!*(unsigned char *)(a1 + 280))
  {
    unint64_t v34 = *a2;
    unint64_t v35 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v36 = a2[3];
    if (v36)
    {
      if (v35) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v36 + 16))(v36, v34);
      }
    }
  }
}

void sub_19893C280(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::AcceleratedEffect::Keyframe,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::AcceleratedEffect::Keyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AcceleratedEffect::Keyframe>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::AcceleratedEffect::Keyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 280 * *(unsigned int *)(a1 + 12);
  *(void *)uint64_t v4 = MEMORY[0x1E4FB6B60] + 16;
  *(void *)(v4 + 8) = *(void *)(v3 + 8);
  uint64_t result = WebCore::AcceleratedEffectValues::AcceleratedEffectValues(v4 + 16, v3 + 16);
  uint64_t v6 = *(void *)(v3 + 264);
  *(void *)(v3 + 264) = 0;
  *(void *)(v4 + 264) = v6;
  *(_DWORD *)(v4 + 272) = *(_DWORD *)(v3 + 272);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::AcceleratedEffect::Keyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 280 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::AcceleratedEffect::Keyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::AcceleratedEffect::Keyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebCore::AcceleratedEffect::Keyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xEA0EA1)
    {
      __break(0xC471u);
      JUMPOUT(0x19893C510);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = *(void *)a1 + 280 * *(unsigned int *)(a1 + 12);
    unsigned int v5 = 280 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(280 * a2));
    *(_DWORD *)(a1 + 8) = v5 / 0x118;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::AcceleratedEffect::Keyframe>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
}

void WTF::VectorMover<false,WebCore::AcceleratedEffect::Keyframe>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      *(void *)uint64_t v7 = MEMORY[0x1E4FB6B60] + 16;
      uint64_t v8 = a1 + v6;
      *(void *)(v7 + 8) = *(void *)(a1 + v6 + 8);
      WebCore::AcceleratedEffectValues::AcceleratedEffectValues(a3 + v6 + 16, a1 + v6 + 16);
      uint64_t v10 = *(void *)(a1 + v6 + 264);
      *(void *)(v8 + 264) = 0;
      *(void *)(v7 + 264) = v10;
      *(_DWORD *)(v7 + 272) = *(_DWORD *)(a1 + v6 + 272);
      unint64_t v11 = *(_DWORD **)(a1 + v6 + 264);
      *(void *)(v8 + 264) = 0;
      if (v11)
      {
        if (v11[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v11 + 16))(v11);
        }
        else {
          --v11[2];
        }
      }
      WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)(a1 + v6 + 16), v9);
      v6 += 280;
    }
    while (a1 + v6 != a2);
  }
}

uint64_t std::__optional_destruct_base<WebCore::AcceleratedEffect::Keyframe,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 280))
  {
    unint64_t v3 = *(_DWORD **)(a1 + 264);
    *(void *)(a1 + 264) = 0;
    if (v3)
    {
      if (v3[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v3 + 16))(v3);
      }
      else {
        --v3[2];
      }
    }
    WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)(a1 + 16), a2);
  }
  return a1;
}

void IPC::ArgumentCoder<std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>>,void>::encode<IPC::Encoder,std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>>>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    goto LABEL_4;
  }
  if (*(_DWORD *)(a2 + 24))
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_4:
    IPC::ArgumentCoder<std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>>,void>::encode<IPC::Encoder,std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>>,0ul>(a1, a2, a3);
    return;
  }

  IPC::ArgumentCoder<WebCore::CredentialBase::NonPlatformData,void>::encode(a1, a2);
}

void IPC::ArgumentCoder<std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>>,void>::encode<IPC::Encoder,std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>>,0ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 24) == 1)
    {
      unint64_t v3 = *(objc_object **)a2;
      IPC::encodeObjectDirectly<NSURLCredential>(a1, v3);
    }
    else
    {
      uint64_t v4 = std::__throw_bad_variant_access[abi:sn180100]();
      IPC::ArgumentCoder<std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>>,void>::decode<IPC::Decoder>(v4, v5);
    }
  }
}

void IPC::ArgumentCoder<std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>>,void>::decode<IPC::Decoder>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(WTF::StringImpl **)a1;
  unint64_t v6 = *(void *)(a1 + 16) - *(void *)a1;
  if (v4 <= v6)
  {
    unint64_t v30 = 0;
    unint64_t v31 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v32 = *(void *)(a1 + 24);
    if (v32)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v32 + 16))(v32, v5, v4);
        unint64_t v31 = *(WTF::StringImpl **)a1;
        unint64_t v30 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v30 = 0;
        unint64_t v31 = 0;
      }
    }
    goto LABEL_41;
  }
  uint64_t v7 = (char *)v5 + v6;
  *(void *)(a1 + 16) = v7 + 1;
  if (!v5)
  {
    unint64_t v30 = v4;
    unint64_t v31 = 0;
LABEL_41:
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v33 = *(void *)(a1 + 24);
    if (v33 && v30) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v33 + 16))(v33, v31);
    }
    goto LABEL_4;
  }
  if (*v7 >= 2u)
  {
LABEL_4:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 32) = 0;
    return;
  }
  if (*v7)
  {
    uint64_t v8 = (const void *)objc_opt_class();
    CFTypeRef v47 = v8;
    if (v8) {
      CFRetain(v8);
    }
    WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v45, &v47, 1);
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)(a1 + 56), (void **)&v45);
    IPC::decodeObjectDirectlyRequiringAllowedClasses<NSURLCredential>(a1, (uint64_t)cf);
    int v10 = LOBYTE(cf[1]);
    if (LOBYTE(cf[1]))
    {
      CFTypeRef v11 = cf[0];
      if (cf[0])
      {
        CFRetain(cf[0]);
        CFRelease(v11);
      }
    }
    else
    {
      CFTypeRef v11 = 0;
    }
    if (v45) {
      WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable((const void **)v45, v9);
    }
    CFTypeRef v23 = v47;
    CFTypeRef v47 = 0;
    if (v23)
    {
      CFRelease(v23);
      if (v10) {
        goto LABEL_30;
      }
    }
    else if (v10)
    {
LABEL_30:
      *(void *)a2 = v11;
      char v24 = 1;
      *(_DWORD *)(a2 + 24) = 1;
LABEL_31:
      *(unsigned char *)(a2 + 32) = v24;
      return;
    }
    unint64_t v27 = *(WTF::StringImpl **)a1;
    uint64_t v28 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v29 = *(void *)(a1 + 24);
    if (v29)
    {
      if (v28) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v29 + 16))(v29, v27);
      }
    }
    char v24 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_31;
  }
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v45);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v47);
  unint64_t v12 = *(void *)(a1 + 8);
  unsigned int v13 = *(WTF::StringImpl **)a1;
  unint64_t v14 = *(void *)(a1 + 16) - *(void *)a1;
  if (v12 <= v14) {
    goto LABEL_45;
  }
  unsigned int v15 = (unsigned __int8 *)v13 + v14;
  *(void *)(a1 + 16) = v15 + 1;
  if (!v13)
  {
    unint64_t v34 = v12;
    unint64_t v35 = 0;
    goto LABEL_46;
  }
  unsigned int v16 = *v15;
  if (v16 > 2) {
    goto LABEL_47;
  }
  for (unsigned int i = v16 | 0x100; ; unsigned int i = 0)
  {
    if (v46)
    {
      unsigned int v18 = v45;
      unsigned __int8 v45 = 0;
      if (v48)
      {
        CFTypeRef v19 = v47;
        CFTypeRef v47 = 0;
        if (i > 0xFF)
        {
          int v20 = 0;
          cf[0] = v18;
          cf[1] = v19;
          char v43 = v16;
          int v21 = 1;
          unsigned __int8 v44 = 1;
          goto LABEL_19;
        }
      }
    }
    __break(1u);
LABEL_45:
    unint64_t v34 = 0;
    unint64_t v35 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v36 = *(void *)(a1 + 24);
    if (v36)
    {
      if (v12)
      {
        (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
        unint64_t v35 = *(WTF::StringImpl **)a1;
        unint64_t v34 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v34 = 0;
        unint64_t v35 = 0;
      }
    }
LABEL_46:
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v37 = *(void *)(a1 + 24);
    if (v37)
    {
      if (v34)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v37 + 16))(v37, v35, v34);
        unsigned int v13 = *(WTF::StringImpl **)a1;
        unint64_t v12 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v12 = 0;
        unsigned int v13 = 0;
      }
    }
LABEL_47:
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v38 = *(void *)(a1 + 24);
    if (!v38) {
      break;
    }
    if (!v12) {
      break;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v38 + 16))(v38, v13);
    if (!*(void *)a1) {
      break;
    }
    LOBYTE(v16) = 0;
  }
  LOBYTE(cf[0]) = 0;
  unsigned __int8 v44 = 0;
  if (v48)
  {
    unsigned int v41 = (WTF::StringImpl *)v47;
    CFTypeRef v47 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 != 2)
      {
        int v21 = 0;
        *(_DWORD *)v41 -= 2;
        goto LABEL_50;
      }
      WTF::StringImpl::destroy(v41, v13);
    }
  }
  int v21 = 0;
LABEL_50:
  int v20 = 1;
LABEL_19:
  if (!v46 || (unint64_t v22 = v45, v45 = 0, !v22))
  {
LABEL_23:
    if (v20) {
      goto LABEL_51;
    }
    goto LABEL_33;
  }
  if (*(_DWORD *)v22 != 2)
  {
    *(_DWORD *)v22 -= 2;
    goto LABEL_23;
  }
  WTF::StringImpl::destroy(v22, v13);
  if (v20)
  {
LABEL_51:
    unsigned int v13 = *(WTF::StringImpl **)a1;
    uint64_t v39 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v40 = *(void *)(a1 + 24);
    if (v40 && v39)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v40 + 16))(v40, v13);
      int v21 = v44;
    }
  }
LABEL_33:
  if (v21)
  {
    long long v25 = *(_OWORD *)cf;
    cf[0] = 0;
    cf[1] = 0;
    *(_OWORD *)a2 = v25;
    *(unsigned char *)(a2 + 16) = v43;
    *(_DWORD *)(a2 + 24) = 0;
    char v26 = 1;
  }
  else
  {
    char v26 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 32) = v26;
  std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)cf, v13);
}

void sub_19893CBC0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, char a15, CFTypeRef cf, char a17)
{
}

void *IPC::VectorArgumentCoder<false,WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(void *result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 8;
    if (v8 > 0xFFFFFFFFFFFFFFF7 || v9 > result[1])
    {
      result[1] = 0;
      if (!v2) {
        return result;
      }
      goto LABEL_9;
    }
    *(void *)(*result + v8) = v2;
    result[2] = v9;
    uint64_t v2 = *(unsigned int *)(a2 + 12);
    unint64_t v3 = v9;
  }
  if (!v2) {
    return result;
  }
LABEL_9:
  CFTypeRef v11 = *(unsigned char **)a2;
  do
  {
    if (v3 >= result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v3++) = *v11;
      result[2] = v3;
    }
    ++v11;
    --v2;
  }
  while (v2);
  return result;
}

WTF *IPC::VectorArgumentCoder<false,WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (WTF *)IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  BOOL v6 = result;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  if ((unint64_t)result >= 0x100000)
  {
    while (1)
    {
      unsigned __int16 v15 = IPC::Decoder::decode<WebCore::ShapeDetection::BarcodeFormat>(a1);
      unsigned __int16 v17 = v15;
      if (v15 < 0x100u) {
        break;
      }
      int v13 = HIDWORD(v19);
      if (HIDWORD(v19) == v19)
      {
        unint64_t v14 = (unsigned char *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v18, (WTF *)(HIDWORD(v19) + 1), (unint64_t)&v17);
        int v13 = HIDWORD(v19);
        *((unsigned char *)v18 + HIDWORD(v19)) = *v14;
      }
      else
      {
        *((unsigned char *)v18 + HIDWORD(v19)) = v15;
      }
      HIDWORD(v19) = v13 + 1;
      BOOL v6 = (WTF *)((char *)v6 - 1);
      if (!v6)
      {
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v18, (void *)(v13 + 1));
        *(void *)a2 = v18;
        uint64_t v16 = v19;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(void *)(a2 + 8) = v16;
        goto LABEL_14;
      }
    }
  }
  else
  {
    if (!result)
    {
      int v10 = 0;
      int v12 = 0;
      CFTypeRef v11 = 0;
LABEL_13:
      unsigned int v18 = 0;
      *(void *)a2 = v11;
      HIDWORD(v19) = 0;
      *(_DWORD *)(a2 + 8) = v12;
      *(_DWORD *)(a2 + 12) = v10;
LABEL_14:
      *(unsigned char *)(a2 + 16) = 1;
      goto LABEL_21;
    }
    LODWORD(v19) = result;
    unsigned int v18 = (WTF *)WTF::fastMalloc(result);
    while (1)
    {
      unsigned __int16 v7 = IPC::Decoder::decode<WebCore::ShapeDetection::BarcodeFormat>(a1);
      unsigned __int16 v17 = v7;
      if (v7 < 0x100u) {
        break;
      }
      int v8 = HIDWORD(v19);
      if (HIDWORD(v19) == v19)
      {
        unint64_t v9 = (unsigned char *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v18, (WTF *)(HIDWORD(v19) + 1), (unint64_t)&v17);
        int v8 = HIDWORD(v19);
        *((unsigned char *)v18 + HIDWORD(v19)) = *v9;
      }
      else
      {
        *((unsigned char *)v18 + HIDWORD(v19)) = v7;
      }
      int v10 = v8 + 1;
      HIDWORD(v19) = v10;
      BOOL v6 = (WTF *)((char *)v6 - 1);
      if (!v6)
      {
        CFTypeRef v11 = v18;
        int v12 = v19;
        goto LABEL_13;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
LABEL_21:
  uint64_t result = v18;
  if (v18)
  {
    unsigned int v18 = 0;
    LODWORD(v19) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

void sub_19893CEBC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    BOOL v6 = *(float **)a2;
    unsigned __int16 v7 = &v6[2 * v5];
    do
    {
      IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *v6);
      unint64_t result = IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v6[1]);
      v6 += 2;
    }
    while (v6 != v7);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19893D01CLL);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      unint64_t result = (unsigned char *)IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7)
      {
        uint64_t v8 = *(void *)a2;
        uint64_t v9 = v8 + 24 * v7;
        do
        {
          IPC::VectorArgumentCoder<false,WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, v8);
          char v11 = *(unsigned char *)(v8 + 16);
          unint64_t result = (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, &v11);
          v8 += 24;
        }
        while (v8 != v9);
      }
    }
    else
    {
      uint64_t v10 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(v10);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19893D03CLL);
    }
    unsigned char *result = 0;
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(unint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  unint64_t v4 = result[1];
  unint64_t v5 = *result;
  unint64_t v6 = result[2] - *result;
  if (v4 <= v6)
  {
    unint64_t v20 = 0;
    unint64_t v21 = 0;
    unsigned char *result = 0;
    result[1] = 0;
    unint64_t v22 = result[3];
    if (v22)
    {
      if (v4)
      {
        (*(void (**)(unint64_t))(*(void *)v22 + 16))(v22);
        unint64_t v21 = *v2;
        unint64_t v20 = v2[1];
      }
      else
      {
        unint64_t v20 = 0;
        unint64_t v21 = 0;
      }
    }
    goto LABEL_23;
  }
  unsigned int v7 = (unsigned __int8 *)(v5 + v6);
  result[2] = (unint64_t)(v7 + 1);
  if (!v5)
  {
    unint64_t v20 = v4;
    unint64_t v21 = 0;
LABEL_23:
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v23 = v2[3];
    if (v23)
    {
      if (v20)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v23 + 16))(v23, v21, v20);
        unint64_t v5 = *v2;
        unint64_t v4 = v2[1];
      }
      else
      {
        unint64_t v4 = 0;
        unint64_t v5 = 0;
      }
    }
    goto LABEL_24;
  }
  unsigned int v8 = *v7;
  if (v8 < 2)
  {
    if (!v8)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 16) = 0;
      *(unsigned char *)(a2 + 24) = 1;
      return result;
    }
    unint64_t v9 = IPC::Decoder::decode<unsigned long long>(result);
    if ((_BYTE)v10)
    {
      unint64_t v11 = v9;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      if (v9 >= 0xAAAA)
      {
        do
        {
          unint64_t result = IPC::Decoder::decode<WebCore::ShapeDetection::Landmark>((uint64_t)&v34, v2);
          if (!v37) {
            goto LABEL_43;
          }
          if (HIDWORD(v39) == v39)
          {
            unint64_t result = (unint64_t *)WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::Landmark>((unsigned int *)&v38, (unint64_t)&v34);
          }
          else
          {
            char v24 = (char *)v38 + 24 * HIDWORD(v39);
            *(void *)char v24 = 0;
            *((void *)v24 + 1) = 0;
            long long v25 = v34;
            unint64_t v34 = 0;
            *(void *)char v24 = v25;
            *((_DWORD *)v24 + 2) = v35;
            LODWORD(v25) = HIDWORD(v35);
            HIDWORD(v35) = 0;
            *((_DWORD *)v24 + 3) = v25;
            v24[16] = v36;
            ++HIDWORD(v39);
          }
          if (v37)
          {
            unint64_t result = (unint64_t *)v34;
            if (v34)
            {
              unint64_t v34 = 0;
              LODWORD(v35) = 0;
              unint64_t result = (unint64_t *)WTF::fastFree((WTF *)result, v10);
            }
          }
          --v11;
        }
        while (v11);
        unsigned int v26 = HIDWORD(v39);
        unint64_t v27 = v38;
        if (v39 > HIDWORD(v39))
        {
          uint64_t v28 = v38;
          if (HIDWORD(v39))
          {
            if (HIDWORD(v39) >= 0xAAAAAAB)
            {
              __break(0xC471u);
              return result;
            }
            unsigned int v29 = 24 * HIDWORD(v39);
            unint64_t v30 = (WTF *)WTF::fastMalloc((WTF *)(24 * HIDWORD(v39)));
            LODWORD(v39) = v29 / 0x18;
            uint64_t v38 = v30;
            uint64_t v28 = v27;
            if (v30 != v27)
            {
              WTF::VectorMover<false,WebCore::ShapeDetection::Landmark>::move(v27, (WTF *)((char *)v27 + 24 * v26), (uint64_t)v30);
              uint64_t v28 = v38;
            }
          }
          if (v27)
          {
            if (v28 == v27)
            {
              uint64_t v38 = 0;
              LODWORD(v39) = 0;
            }
            WTF::fastFree(v27, v10);
            unint64_t v27 = v38;
          }
          else
          {
            unint64_t v27 = v28;
          }
        }
        unint64_t v34 = v27;
        uint64_t v33 = v39;
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        goto LABEL_21;
      }
      if (!v9)
      {
        unsigned __int16 v15 = 0;
        uint64_t v16 = 0;
LABEL_20:
        uint64_t v33 = v16;
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        unint64_t v34 = v15;
LABEL_21:
        char v17 = 1;
        char v36 = 1;
        WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v10);
        unsigned int v18 = v34;
        unint64_t v34 = 0;
        uint64_t v35 = 0;
        *(void *)a2 = v18;
        *(void *)(a2 + 8) = v33;
        *(unsigned char *)(a2 + 16) = 1;
        unint64_t result = (unint64_t *)WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v19);
        goto LABEL_46;
      }
      LODWORD(v39) = 24 * (int)v9 / 0x18u;
      uint64_t v38 = (WTF *)WTF::fastMalloc((WTF *)(24 * v9));
      while (1)
      {
        IPC::Decoder::decode<WebCore::ShapeDetection::Landmark>((uint64_t)&v34, v2);
        if (!v37) {
          break;
        }
        if (HIDWORD(v39) == v39)
        {
          WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::Landmark>((unsigned int *)&v38, (unint64_t)&v34);
        }
        else
        {
          int v12 = (char *)v38 + 24 * HIDWORD(v39);
          *(void *)int v12 = 0;
          *((void *)v12 + 1) = 0;
          int v13 = v34;
          unint64_t v34 = 0;
          *(void *)int v12 = v13;
          *((_DWORD *)v12 + 2) = v35;
          LODWORD(v13) = HIDWORD(v35);
          HIDWORD(v35) = 0;
          *((_DWORD *)v12 + 3) = v13;
          v12[16] = v36;
          ++HIDWORD(v39);
        }
        if (v37)
        {
          unint64_t v14 = v34;
          if (v34)
          {
            unint64_t v34 = 0;
            LODWORD(v35) = 0;
            WTF::fastFree(v14, v10);
          }
        }
        if (!--v11)
        {
          unsigned __int16 v15 = v38;
          uint64_t v16 = v39;
          goto LABEL_20;
        }
      }
LABEL_43:
      WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v10);
    }
    unint64_t v31 = *v2;
    unint64_t v32 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t result = (unint64_t *)v2[3];
    if (result && v32) {
      unint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v31);
    }
    char v17 = 0;
    *(unsigned char *)a2 = 0;
LABEL_46:
    *(unsigned char *)(a2 + 24) = v17;
    return result;
  }
LABEL_24:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t result = (unint64_t *)v2[3];
  if (result && v4) {
    unint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v5);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

void sub_19893D49C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14)
  {
    if (a11) {
      WTF::fastFree(a11, a2);
    }
  }
  WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a16, a2);
  _Unwind_Resume(a1);
}

void *IPC::Decoder::decode<WebCore::ShapeDetection::Landmark>(uint64_t a1, unint64_t *a2)
{
  IPC::Decoder::decode<WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v13, a2);
  __int16 v15 = 0;
  unint64_t result = IPC::Decoder::operator>><unsigned char>(a2, &v15);
  char v6 = v15;
  if (HIBYTE(v15)) {
    BOOL v7 = v15 > 2u;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = v7;
  if (v8 == 1) {
    goto LABEL_14;
  }
  while (*a2)
  {
    if (v14 && !v8)
    {
      *(WTF **)a1 = v13[0];
      *(WTF **)(a1 + 8) = v13[1];
      *(unsigned char *)(a1 + 16) = v6;
      *(unsigned char *)(a1 + 24) = 1;
      return result;
    }
    __break(1u);
LABEL_14:
    unint64_t v5 = (void *)*a2;
    unint64_t v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = (void *)a2[3];
    if (result)
    {
      int v12 = v8;
      if (v9) {
        unint64_t result = (void *)(*(uint64_t (**)(void *, void *))(*result + 16))(result, v5);
      }
      char v6 = 0;
      int v8 = v12;
    }
    else
    {
      char v6 = 0;
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (v14 && v13[0]) {
    WTF::fastFree(v13[0], v5);
  }
  unint64_t v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = (void *)a2[3];
  if (result && v10)
  {
    unint64_t v11 = *(uint64_t (**)(void))(*result + 16);
    return (void *)v11();
  }
  return result;
}

void sub_19893D634(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, uint64_t a12, char a13)
{
  if (a13)
  {
    if (a11) {
      WTF::fastFree(a11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::Landmark>(unsigned int *a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = *(void *)a1 + 24 * a1[3];
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  uint64_t v5 = *(void *)result;
  *(void *)unint64_t result = 0;
  *(void *)uint64_t v4 = v5;
  LODWORD(v5) = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(result + 16);
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF *WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x19893D840);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    uint64_t v4 = (WTF *)(*(void *)result + 24 * *((unsigned int *)result + 3));
    int v5 = 24 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)uint64_t v2 = v6;
    unint64_t result = WTF::VectorMover<false,WebCore::ShapeDetection::Landmark>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF *WTF::VectorMover<false,WebCore::ShapeDetection::Landmark>::move(WTF *result, WTF *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    do
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      uint64_t v6 = *(WTF **)v5;
      *(void *)int v5 = 0;
      *(void *)a3 = v6;
      LODWORD(v6) = *((_DWORD *)v5 + 2);
      *((_DWORD *)v5 + 2) = 0;
      *(_DWORD *)(a3 + 8) = v6;
      LODWORD(v6) = *((_DWORD *)v5 + 3);
      *((_DWORD *)v5 + 3) = 0;
      *(_DWORD *)(a3 + 12) = v6;
      *(unsigned char *)(a3 + 16) = *((unsigned char *)v5 + 16);
      unint64_t result = *(WTF **)v5;
      if (*(void *)v5)
      {
        *(void *)int v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        unint64_t result = (WTF *)WTF::fastFree(result, a2);
      }
      int v5 = (WTF *)((char *)v5 + 24);
      a3 += 24;
    }
    while (v5 != a2);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = 56 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<std::pair<WTF::URL,WebCore::CharacterRange>,void>::encode<IPC::Encoder,std::pair<WTF::URL,WebCore::CharacterRange> const&>(a1, v6);
      v6 += 7;
      v7 -= 56;
    }
    while (v7);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::pair<WTF::URL,WebCore::CharacterRange>,void>::encode<IPC::Encoder,std::pair<WTF::URL,WebCore::CharacterRange> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, a2 + 5);

  return IPC::Encoder::operator<<<unsigned long long const&>(a1, a2 + 6);
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::CharacterRange>,void>::encode<IPC::Encoder,std::optional<WebCore::CharacterRange> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19893DA2CLL);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)a2);
      return (unsigned char *)IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 8));
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<std::optional<WebCore::TextExtraction::Editable>,void>::encode<IPC::Encoder,std::optional<WebCore::TextExtraction::Editable> const&>(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19893DA4CLL);
    }
    unsigned char *result = 0;
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebCore::TextExtraction::Editable>,void>::encode<IPC::Encoder,std::optional<WebCore::TextExtraction::Editable> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 24);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19893DB18);
    }
    *uint64_t v5 = 1;
    if (*(unsigned char *)(a2 + 24))
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
      IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 16));
      IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 17));
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      IPC::Decoder::decode<std::pair<WTF::URL,WebCore::CharacterRange>>(v7, v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19893DB38);
    }
    *uint64_t v5 = 0;
  }
}

void IPC::Decoder::decode<std::pair<WTF::URL,WebCore::CharacterRange>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::URL>(a2, v13);
  if (!v14) {
    goto LABEL_15;
  }
  IPC::Decoder::decode<WebCore::CharacterRange>(a2, (uint64_t)&v11);
  int v5 = v12;
  if (v12)
  {
    if (v14)
    {
      WTF::URL::URL(a1, (uint64_t *)v13);
      *(_OWORD *)(a1 + 40) = v11;
      int v5 = 1;
      goto LABEL_6;
    }
    __break(1u);
LABEL_15:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 56) = 0;
    goto LABEL_16;
  }
  *(unsigned char *)a1 = 0;
LABEL_6:
  *(unsigned char *)(a1 + 56) = v5;
  if (v14)
  {
    uint64_t v6 = v13[0];
    v13[0] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v4);
        if (*(unsigned char *)(a1 + 56)) {
          return;
        }
        goto LABEL_16;
      }
      *(_DWORD *)v6 -= 2;
    }
  }
  if (v5) {
    return;
  }
LABEL_16:
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v9 = *((void *)a2 + 3);
  if (v9) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
  }
}

void sub_19893DC44(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (*(unsigned char *)(v18 + 56))
  {
    unint64_t v20 = *(WTF::StringImpl **)v18;
    *(void *)uint64_t v18 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, a2);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::URL,WebCore::CharacterRange>>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  WTF::URL::URL(*(void *)a1 + 56 * a1[3], (uint64_t *)v3);
  __n128 result = *(__n128 *)(v3 + 40);
  *(__n128 *)(v5 + 40) = result;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 56 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x4924925)
    {
      __break(0xC471u);
      JUMPOUT(0x19893DE68);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    int v4 = (WTF::StringImpl *)(*(void *)result + 56 * *((unsigned int *)result + 3));
    unsigned int v5 = 56 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(56 * a2));
    *((_DWORD *)v2 + 2) = v5 / 0x38;
    *(void *)uint64_t v2 = v6;
    __n128 result = WTF::VectorMover<false,std::pair<WTF::URL,WebCore::CharacterRange>>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,std::pair<WTF::URL,WebCore::CharacterRange>>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    unsigned int v5 = result;
    do
    {
      WTF::URL::URL(a3, (uint64_t *)v5);
      *(_OWORD *)(a3 + 40) = *(_OWORD *)((char *)v5 + 40);
      __n128 result = *(WTF::StringImpl **)v5;
      *(void *)unsigned int v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      a3 += 56;
      unsigned int v5 = (WTF::StringImpl *)((char *)v5 + 56);
    }
    while (v5 != a2);
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,std::pair<WTF::URL,WebCore::CharacterRange>>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    unint64_t v3 = (WTF::StringImpl **)result;
    do
    {
      __n128 result = *v3;
      *unint64_t v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 7;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,std::pair<WTF::URL,WebCore::CharacterRange>>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 56 * v3));
  }
  int v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void IPC::ArgumentCoder<std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,void>::encode<IPC::Encoder,std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData> const&>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    goto LABEL_4;
  }
  if (*(_DWORD *)(a2 + 80))
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_4:
    IPC::ArgumentCoder<std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,void>::encode<IPC::Encoder,std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData> const&,0ul>(a1, a2, a3);
    return;
  }
  char v3 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v3);
}

void IPC::ArgumentCoder<std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,void>::encode<IPC::Encoder,std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData> const&,0ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1)
  {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a2 + 80) != 1)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_8:
    IPC::ArgumentCoder<std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,void>::encode<IPC::Encoder,std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData> const&,0ul,1ul>(a1, a2, a3);
    return;
  }

  IPC::ArgumentCoder<WebCore::TextExtraction::TextItemData,void>::encode(a1, a2);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,void>::encode<IPC::Encoder,std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData> const&,0ul,1ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 2)
  {
    return IPC::ArgumentCoder<std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,void>::encode<IPC::Encoder,std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData> const&,0ul,1ul,2ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 80) != 2)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,void>::encode<IPC::Encoder,std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData> const&,0ul,1ul,2ul>(a1, a2, a3);
  }

  return IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)a2);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,void>::encode<IPC::Encoder,std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData> const&,0ul,1ul,2ul>(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 3)
  {
    if (*(_DWORD *)(a2 + 80) == 3)
    {
      int v4 = result;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(result, (uint64_t *)a2);
      return (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, (uint64_t *)(a2 + 8));
    }
    else
    {
      uint64_t v5 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::VectorArgumentCoder<false,WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v5);
    }
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *((unsigned int *)a2 + 3));
  uint64_t v5 = *((unsigned int *)a2 + 3);
  if (v5)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = 120 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::TextExtraction::Item,void>::encode(a1, v6);
      v6 += 120;
      v7 -= 120;
    }
    while (v7);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::TextExtraction::TextItemData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100](a1 + 48, a2);
    int v4 = *(WTF::StringImpl **)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, v3);
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WebCore::TextExtraction::Item>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::TextExtraction::Item,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 120))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19893E238(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::TextExtraction::Item,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

__n128 WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextExtraction::Item>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,(std::__variant_detail::_Trait)1>::__move_constructor(*(void *)a1 + 120 * *(unsigned int *)(a1 + 12), v3);
  __n128 result = *(__n128 *)(v3 + 88);
  *(__n128 *)(v4 + 88) = result;
  *(void *)(v4 + 104) = 0;
  *(void *)(v4 + 112) = 0;
  uint64_t v6 = *(void *)(v3 + 104);
  *(void *)(v3 + 104) = 0;
  *(void *)(v4 + 104) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 112);
  *(_DWORD *)(v3 + 112) = 0;
  *(_DWORD *)(v4 + 112) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 116);
  *(_DWORD *)(v3 + 116) = 0;
  *(_DWORD *)(v4 + 116) = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 120 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x2222223)
    {
      __break(0xC471u);
      JUMPOUT(0x19893E444);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    uint64_t v4 = *(void *)result + 120 * *(unsigned int *)(result + 12);
    int v5 = 120 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(120 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x78;
    *(void *)uint64_t v2 = v6;
    __n128 result = WTF::VectorMover<false,WebCore::TextExtraction::Item>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::TextExtraction::Item>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v15 = v3;
    uint64_t v16 = v4;
    uint64_t v7 = result;
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = v7 + v8;
      uint64_t v10 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,(std::__variant_detail::_Trait)1>::__move_constructor(a3 + v8, v7 + v8);
      *(_OWORD *)(v10 + 88) = *(_OWORD *)(v7 + v8 + 88);
      *(void *)(v10 + 104) = 0;
      *(void *)(v10 + 112) = 0;
      uint64_t v11 = *(void *)(v7 + v8 + 104);
      *(void *)(v9 + 104) = 0;
      *(void *)(v10 + 104) = v11;
      LODWORD(v11) = *(_DWORD *)(v7 + v8 + 112);
      *(_DWORD *)(v9 + 112) = 0;
      *(_DWORD *)(v10 + 112) = v11;
      LODWORD(v11) = *(_DWORD *)(v7 + v8 + 116);
      *(_DWORD *)(v9 + 116) = 0;
      *(_DWORD *)(v10 + 116) = v11;
      __n128 result = WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7 + v8 + 104, v12);
      uint64_t v13 = *(unsigned int *)(v7 + v8 + 80);
      if (v13 != -1) {
        __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS7_12TextItemDataENS7_18ScrollableItemDataENS7_13ImageItemDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v13])(&v14, v7 + v8);
      }
      *(_DWORD *)(v9 + 80) = -1;
      v8 += 120;
    }
    while (v7 + v8 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::TextExtraction::Item,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 120))
  {
    WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 104, a2);
    uint64_t v3 = *(unsigned int *)(a1 + 80);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS7_12TextItemDataENS7_18ScrollableItemDataENS7_13ImageItemDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v3])(&v5, a1);
    }
    *(_DWORD *)(a1 + 80) = -1;
  }
  return a1;
}

uint64_t IPC::ArgumentCoder<WebCore::MediaConstraintType,void>::decode<IPC::Decoder>(void *a1)
{
  __int16 v4 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v4);
  int v1 = HIBYTE(v4);
  if (!HIBYTE(v4)) {
    goto LABEL_5;
  }
  if ((unint64_t)(char)v4 > 0x11)
  {
    int v1 = 0;
LABEL_5:
    int v2 = 0;
    return v1 | (v2 << 8);
  }
  int v1 = byte_1994F5EAC[(char)v4];
  int v2 = byte_1994F5EBE[(char)v4];
  return v1 | (v2 << 8);
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::MediaSettingsRange>,void>::encode<IPC::Encoder,std::optional<WebCore::MediaSettingsRange> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 48);
  __n128 result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19893E6ACLL);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 48))
    {
      IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2);
      IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 16);
      return IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 32);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::FillLightMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::FillLightMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19893E6CCLL);
    }
    unsigned char *result = 0;
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::FillLightMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::FillLightMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  __n128 result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19893E78CLL);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      __n128 result = (unsigned char *)IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
      uint64_t v7 = *(unsigned int *)(a2 + 12);
      if (v7)
      {
        uint64_t v8 = *(char **)a2;
        do
        {
          char v9 = *v8++;
          char v11 = v9;
          __n128 result = (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, &v11);
          --v7;
        }
        while (v7);
      }
    }
    else
    {
      uint64_t v10 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<std::optional<WebCore::FillLightMode>,void>::decode<IPC::Decoder>(v10);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19893E7ACLL);
    }
    unsigned char *result = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::FillLightMode>,void>::decode<IPC::Decoder>(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      char v17 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        a1 = v17;
        uint64_t v12 = *v17;
        unint64_t v11 = v17[1];
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_11;
  }
  int v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = (uint64_t)(v4 + 1);
  if (!v2)
  {
    unint64_t v11 = v1;
    uint64_t v12 = 0;
LABEL_11:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v14 = a1[3];
    if (v14)
    {
      uint64_t v16 = a1;
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        a1 = v16;
        uint64_t v2 = *v16;
        unint64_t v1 = v16[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_12;
  }
  unsigned int v5 = *v4;
  if (v5 < 2)
  {
    if (v5)
    {
      unsigned __int16 v6 = IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
      int v7 = v6;
      int v8 = (v6 > 0xFFu) << 16;
      if ((v6 & 0xFF00) == 0) {
        int v7 = 0;
      }
      int v9 = 256;
    }
    else
    {
      int v7 = 0;
      int v9 = 0;
      int v8 = 0x10000;
    }
    return v7 | v8 | v9;
  }
LABEL_12:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v15 = a1[3];
  if (v15 && v1) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v2);
  }
  int v8 = 0;
  int v7 = 0;
  int v9 = 0;
  return v7 | v8 | v9;
}

WebCore::Model *WTF::RefCounted<WebCore::Model>::deref(WebCore::Model *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebCore::Model::~Model(result);
    return (WebCore::Model *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

unsigned int *IPC::Decoder::decode<WebCore::InspectorOverlayLabel::Content>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v38);
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a2, &v36);
  if (!v37)
  {
    uint64_t v18 = *(void **)a2;
    uint64_t v19 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v20 = *((void *)a2 + 3);
    if (v20)
    {
      if (v19) {
        (*(void (**)(uint64_t, void *))(*(void *)v20 + 16))(v20, v18);
      }
    }
  }
  LOWORD(v30) = 0;
  IPC::Decoder::operator>><unsigned char>(a2, &v30);
  char v4 = (char)v30;
  if (BYTE1(v30)) {
    BOOL v5 = v30 > 1u;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = v5;
  if (v6 == 1)
  {
    unint64_t v21 = *(void **)a2;
    uint64_t v22 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v23 = *((void *)a2 + 3);
    if (v23 && v22) {
      (*(void (**)(uint64_t, void *))(*(void *)v23 + 16))(v23, v21);
    }
    char v4 = 0;
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a2, &v30);
  if (!(_BYTE)v31)
  {
    int v7 = *(void **)a2;
    uint64_t v24 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v25 = *((void *)a2 + 3);
    if (v25)
    {
      if (v24) {
        (*(void (**)(uint64_t, void *))(*(void *)v25 + 16))(v25, v7);
      }
    }
  }
  unint64_t v8 = *(void *)a2;
  if (*(void *)a2)
  {
    if (v6) {
      goto LABEL_36;
    }
    char v40 = v4;
    unint64_t v8 = v31;
    if (!(_BYTE)v31) {
      goto LABEL_36;
    }
    WebCore::Color::Color();
    v34[0] = v40;
    WebCore::Color::Color();
    unsigned __int8 v35 = 1;
    if ((v41 & 0x8000000000000) != 0)
    {
      uint64_t v15 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v7);
      }
    }
  }
  else
  {
    v34[0] = 0;
    unsigned __int8 v35 = 0;
  }
  if ((_BYTE)v31)
  {
    unint64_t v8 = (unint64_t)v30;
    if (((unint64_t)v30 & 0x8000000000000) != 0) {
      goto LABEL_37;
    }
  }
  while (1)
  {
    if (!v35)
    {
      int v7 = *(void **)a2;
      uint64_t v26 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v27 = *((void *)a2 + 3);
      if (v27)
      {
        if (v26) {
          (*(void (**)(uint64_t, void *))(*(void *)v27 + 16))(v27, v7);
        }
      }
    }
    if (!*(void *)a2)
    {
      *a1 = 0;
      a1[32] = 0;
      goto LABEL_27;
    }
    unint64_t v8 = v39;
    if (v39)
    {
      int v9 = v38;
      uint64_t v38 = 0;
      unint64_t v30 = v9;
      unint64_t v8 = v37;
      if (v37)
      {
        WebCore::Color::Color();
        unint64_t v8 = v35;
        if (v35) {
          break;
        }
      }
    }
LABEL_36:
    __break(1u);
LABEL_37:
    uint64_t v14 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v7);
    }
  }
  char v32 = v34[0];
  WebCore::Color::Color();
  uint64_t v10 = v30;
  unint64_t v30 = 0;
  *(void *)a1 = v10;
  WebCore::Color::Color();
  a1[16] = v32;
  WebCore::Color::Color();
  a1[32] = 1;
  if ((v33 & 0x8000000000000) != 0)
  {
    uint64_t v16 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v7);
    }
  }
  if ((v31 & 0x8000000000000) != 0)
  {
    char v17 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v7);
    }
  }
  unint64_t v11 = v30;
  unint64_t v30 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v7);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
LABEL_27:
  __n128 result = (unsigned int *)std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v34, v7);
  if (v37)
  {
    if ((v36 & 0x8000000000000) != 0)
    {
      __n128 result = (unsigned int *)(v36 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        __n128 result = (unsigned int *)WTF::fastFree((WTF *)result, v13);
      }
    }
  }
  if (v39)
  {
    __n128 result = (unsigned int *)v38;
    uint64_t v38 = 0;
    if (result)
    {
      if (*result == 2) {
        __n128 result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v13);
      }
      else {
        *result -= 2;
      }
    }
  }
  if (!a1[32])
  {
    unint64_t v28 = *(void *)a2;
    uint64_t v29 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    __n128 result = (unsigned int *)*((void *)a2 + 3);
    if (result)
    {
      if (v29) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *, unint64_t))(*(void *)result + 16))(result, v28);
      }
    }
  }
  return result;
}

void sub_19893EDAC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, WTF::StringImpl *a19, char a20)
{
  std::__optional_destruct_base<WebCore::InspectorOverlayLabel::Content,false>::~__optional_destruct_base[abi:sn180100](v20, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorOverlayLabel::Content>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 32 * *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  *(void *)uint64_t v4 = v5;
  WebCore::Color::Color();
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(v3 + 16);
  uint64_t result = WebCore::Color::Color();
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void sub_19893EFFC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v5 = *v2;
  if ((*v2 & 0x8000000000000) != 0)
  {
    int v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  int v7 = *v3;
  *unint64_t v3 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 27))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(WTF::StringImpl **)result;
    uint64_t v5 = (WTF::StringImpl *)(*(void *)result + 32 * *(unsigned int *)(result + 12));
    uint64_t v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    WTF::VectorMover<false,WebCore::InspectorOverlayLabel::Content>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::InspectorOverlayLabel::Content>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      unint64_t v7 = (char *)v5 + v6;
      uint64_t v8 = *(void *)((char *)v5 + v6);
      *(void *)((char *)v5 + v6) = 0;
      *(void *)(a3 + v6) = v8;
      WebCore::Color::Color();
      *(unsigned char *)(a3 + v6 + 16) = *((unsigned char *)v5 + v6 + 16);
      WebCore::Color::Color();
      uint64_t v10 = *(void *)((char *)v5 + v6 + 24);
      if ((v10 & 0x8000000000000) != 0)
      {
        uint64_t v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, v9);
        }
      }
      uint64_t v11 = *((void *)v7 + 1);
      if ((v11 & 0x8000000000000) != 0)
      {
        uint64_t v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v13);
          WTF::fastFree((WTF *)v13, v9);
        }
      }
      uint64_t result = *(WTF::StringImpl **)v7;
      *(void *)unint64_t v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v9);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v6 += 32;
    }
    while (v7 + 32 != (char *)a2);
  }
  return result;
}

void sub_19893F294(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v5 = *(void *)(v2 + v3 + 8);
  if ((v5 & 0x8000000000000) != 0)
  {
    uint64_t v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  unint64_t v7 = *(WTF::StringImpl **)(v2 + v3);
  *(void *)(v2 + v3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::InspectorOverlayLabel::Content,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if ((v3 & 0x8000000000000) != 0)
    {
      unint64_t v7 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
    uint64_t v4 = *(void *)(a1 + 8);
    if ((v4 & 0x8000000000000) != 0)
    {
      uint64_t v8 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      uint64_t result = (uint64_t)WTF::VectorDestructor<true,WebCore::InspectorOverlayLabel::Content>::destruct((WTF::StringImpl *)(*(void *)result + 32 * a2), (WTF::StringImpl *)(*(void *)result + 32 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >> 27)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(void *)uint64_t v3 = result;
      if ((WTF::StringImpl *)result != v5) {
        uint64_t result = (uint64_t)WTF::VectorMover<false,WebCore::InspectorOverlayLabel::Content>::move(v5, (WTF::StringImpl *)((char *)v5 + 32 * v4), result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(float **)a2;
    uint64_t v7 = 32 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode(a1, v6);
      v6 += 8;
      v7 -= 32;
    }
    while (v7);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(float **)a2;
    uint64_t v7 = 40 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::InspectorOverlayLabel,void>::encode(a1, v6);
      v6 += 10;
      v7 -= 40;
    }
    while (v7);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (result >= 0x8000)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::FloatQuad>(a1, (uint64_t)&v19);
      if (!v21) {
        break;
      }
      int v14 = HIDWORD(v23);
      if (HIDWORD(v23) == v23)
      {
        uint64_t v15 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::TextRectAndRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v22, HIDWORD(v23) + 1, (unint64_t)&v19);
        int v14 = HIDWORD(v23);
        uint64_t v16 = (_OWORD *)((char *)v22 + 32 * HIDWORD(v23));
        long long v17 = v15[1];
        _OWORD *v16 = *v15;
      }
      else
      {
        uint64_t v16 = (_OWORD *)((char *)v22 + 32 * HIDWORD(v23));
        long long v17 = v20;
        _OWORD *v16 = v19;
      }
      v16[1] = v17;
      HIDWORD(v23) = v14 + 1;
      if (!--v6)
      {
        WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v22, (v14 + 1));
        *(void *)a2 = v22;
        uint64_t v18 = v23;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        *(void *)(a2 + 8) = v18;
        goto LABEL_14;
      }
    }
  }
  else
  {
    if (!result)
    {
      int v12 = 0;
      int v13 = 0;
      unint64_t v9 = 0;
LABEL_13:
      uint64_t v22 = 0;
      *(void *)a2 = v9;
      HIDWORD(v23) = 0;
      *(_DWORD *)(a2 + 8) = v13;
      *(_DWORD *)(a2 + 12) = v12;
LABEL_14:
      *(unsigned char *)(a2 + 16) = 1;
      goto LABEL_21;
    }
    LODWORD(v23) = result;
    uint64_t v22 = (WTF *)WTF::fastMalloc((WTF *)(32 * result));
    while (1)
    {
      IPC::Decoder::decode<WebCore::FloatQuad>(a1, (uint64_t)&v19);
      if (!v21) {
        break;
      }
      int v7 = HIDWORD(v23);
      if (HIDWORD(v23) == v23)
      {
        uint64_t v8 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::TextRectAndRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v22, HIDWORD(v23) + 1, (unint64_t)&v19);
        int v7 = HIDWORD(v23);
        unint64_t v9 = v22;
        uint64_t v10 = (_OWORD *)((char *)v22 + 32 * HIDWORD(v23));
        long long v11 = v8[1];
        _OWORD *v10 = *v8;
      }
      else
      {
        unint64_t v9 = v22;
        uint64_t v10 = (_OWORD *)((char *)v22 + 32 * HIDWORD(v23));
        long long v11 = v20;
        _OWORD *v10 = v19;
      }
      v10[1] = v11;
      int v12 = v7 + 1;
      HIDWORD(v23) = v12;
      if (!--v6)
      {
        int v13 = v23;
        goto LABEL_13;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
LABEL_21:
  unint64_t result = (unint64_t)v22;
  if (v22)
  {
    uint64_t v22 = 0;
    LODWORD(v23) = 0;
    return WTF::fastFree((WTF *)result, v5);
  }
  return result;
}

void sub_19893F6E0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16)
{
  if (a15) {
    WTF::fastFree(a15, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *IPC::Decoder::decode<WebCore::InspectorOverlayLabel>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if ((_BYTE)v5)
  {
    unint64_t v6 = v4;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    if (v4 < 0x8000)
    {
      if (v4)
      {
        LODWORD(v58) = v4;
        uint64_t v57 = WTF::fastMalloc((WTF *)(32 * v4));
        do
        {
          IPC::Decoder::decode<WebCore::InspectorOverlayLabel::Content>(&v52, a2);
          if (!(_BYTE)v56) {
            goto LABEL_21;
          }
          if (HIDWORD(v58) == v58)
          {
            WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorOverlayLabel::Content>((uint64_t)&v57, (unint64_t)&v52);
          }
          else
          {
            uint64_t v9 = v57 + 32 * HIDWORD(v58);
            uint64_t v10 = v52;
            uint64_t v52 = 0;
            *(void *)uint64_t v9 = v10;
            WebCore::Color::Color();
            *(unsigned char *)(v9 + 16) = v54;
            WebCore::Color::Color();
            ++HIDWORD(v58);
          }
          std::__optional_destruct_base<WebCore::InspectorOverlayLabel::Content,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v52, v8);
          --v6;
        }
        while (v6);
        uint64_t v11 = v57;
        int v13 = v58;
        int v12 = HIDWORD(v58);
      }
      else
      {
        int v12 = 0;
        int v13 = 0;
        uint64_t v11 = 0;
      }
      uint64_t v57 = 0;
      uint64_t v48 = v11;
LABEL_14:
      uint64_t v58 = 0;
      int v49 = v13;
      int v50 = v12;
      char v51 = 1;
      WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v5);
      goto LABEL_27;
    }
    while (1)
    {
      IPC::Decoder::decode<WebCore::InspectorOverlayLabel::Content>(&v52, a2);
      if (!(_BYTE)v56) {
        break;
      }
      if (HIDWORD(v58) == v58)
      {
        WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorOverlayLabel::Content>((uint64_t)&v57, (unint64_t)&v52);
      }
      else
      {
        uint64_t v15 = v57 + 32 * HIDWORD(v58);
        uint64_t v16 = v52;
        uint64_t v52 = 0;
        *(void *)uint64_t v15 = v16;
        WebCore::Color::Color();
        *(unsigned char *)(v15 + 16) = v54;
        WebCore::Color::Color();
        ++HIDWORD(v58);
      }
      std::__optional_destruct_base<WebCore::InspectorOverlayLabel::Content,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v52, v14);
      if (!--v6)
      {
        WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v57, HIDWORD(v58));
        uint64_t v17 = v57;
        uint64_t v57 = 0;
        uint64_t v48 = v17;
        int v13 = v58;
        int v12 = HIDWORD(v58);
        goto LABEL_14;
      }
    }
LABEL_21:
    LOBYTE(v48) = 0;
    char v51 = 0;
    std::__optional_destruct_base<WebCore::InspectorOverlayLabel::Content,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v52, v7);
    WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v18);
  }
  else
  {
    LOBYTE(v48) = 0;
    char v51 = 0;
  }
  long long v19 = *(void **)a2;
  uint64_t v20 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (unsigned int *)*((void *)a2 + 3);
  if (result) {
    BOOL v22 = v20 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (!v22) {
    goto LABEL_59;
  }
  while (1)
  {
LABEL_27:
    IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
    uint64_t v24 = v23;
    if (!v23)
    {
      uint64_t v33 = *(void **)a2;
      uint64_t v34 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v35 = *((void *)a2 + 3);
      if (v35)
      {
        if (v34) {
          (*(void (**)(uint64_t, void *))(*(void *)v35 + 16))(v35, v33);
        }
      }
    }
    IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a2, &v57);
    if (!(_BYTE)v58)
    {
      uint64_t v36 = *(void **)a2;
      uint64_t v37 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v38 = *((void *)a2 + 3);
      if (v38)
      {
        if (v37) {
          (*(void (**)(uint64_t, void *))(*(void *)v38 + 16))(v38, v36);
        }
      }
    }
    LOWORD(v52) = 0;
    IPC::Decoder::operator>><unsigned char>(a2, &v52);
    if (BYTE1(v52)) {
      BOOL v25 = v52 > 4uLL;
    }
    else {
      BOOL v25 = 1;
    }
    int v26 = v25;
    if (v26 == 1)
    {
      unsigned __int8 v39 = *(void **)a2;
      uint64_t v40 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v41 = *((void *)a2 + 3);
      if (v41)
      {
        if (v40) {
          (*(void (**)(uint64_t, void *))(*(void *)v41 + 16))(v41, v39);
        }
      }
    }
    LOWORD(v52) = 0;
    unint64_t result = (unsigned int *)IPC::Decoder::operator>><unsigned char>(a2, &v52);
    if (BYTE1(v52)) {
      BOOL v27 = v52 > 3uLL;
    }
    else {
      BOOL v27 = 1;
    }
    int v28 = v27;
    if (v28 == 1)
    {
      long long v19 = *(void **)a2;
      uint64_t v42 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      unint64_t result = (unsigned int *)*((void *)a2 + 3);
      if (result)
      {
        if (v42)
        {
          int v43 = v28;
          unint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, void *))(*(void *)result + 16))(result, v19);
          int v28 = v43;
        }
      }
    }
    uint64_t v29 = *(void **)a2;
    if (*(void *)a2)
    {
      if (v26 || v28) {
        goto LABEL_58;
      }
    }
    else
    {
      uint64_t v44 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      unint64_t result = (unsigned int *)*((void *)a2 + 3);
      if (!result
        || !v44
        || (unint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, void))(*(void *)result + 16))(result, 0), !*(void *)a2))
      {
        *(unsigned char *)a1 = 0;
        *(unsigned char *)(a1 + 40) = 0;
        goto LABEL_52;
      }
    }
    if (v51)
    {
      if (v24)
      {
        if ((_BYTE)v58)
        {
          unint64_t result = (unsigned int *)WebCore::Color::Color();
          if (v29) {
            break;
          }
        }
      }
    }
LABEL_58:
    __break(1u);
LABEL_59:
    (*(void (**)(unsigned int *, void *))(*(void *)result + 16))(result, v19);
  }
  WebCore::InspectorOverlayLabel::InspectorOverlayLabel();
  *(void *)a1 = v52;
  uint64_t v30 = v53;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  *(void *)(a1 + 8) = v30;
  *(void *)(a1 + 16) = v54;
  WebCore::Color::Color();
  *(_WORD *)(a1 + 32) = v56;
  *(unsigned char *)(a1 + 40) = 1;
  if ((v55 & 0x8000000000000) != 0)
  {
    char v32 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v32);
      WTF::fastFree((WTF *)v32, v31);
    }
  }
  unint64_t result = (unsigned int *)WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v31);
  if ((*(void *)v47 & 0x8000000000000) != 0)
  {
    unint64_t result = (unsigned int *)(*(void *)v47 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v47 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      unint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v19);
    }
  }
LABEL_52:
  if ((_BYTE)v58)
  {
    if ((v57 & 0x8000000000000) != 0)
    {
      unint64_t result = (unsigned int *)(v57 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        unint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v19);
      }
    }
  }
  if (v51) {
    unint64_t result = (unsigned int *)WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v19);
  }
  if (!*(unsigned char *)(a1 + 40))
  {
    unsigned __int8 v45 = *(void **)a2;
    uint64_t v46 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t result = (unsigned int *)*((void *)a2 + 3);
    if (result)
    {
      if (v46) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *, void *))(*(void *)result + 16))(result, v45);
      }
    }
  }
  return result;
}

void sub_19893FCBC(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::InspectorOverlayLabel,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorOverlayLabel>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)a1 + 40 * v4;
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  uint64_t v7 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  *(void *)uint64_t v6 = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v6 + 8) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v3 + 12) = 0;
  *(_DWORD *)(v6 + 12) = v7;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t result = WebCore::Color::Color();
  *(_WORD *)(v5 + 40 * v4 + 32) = *(_WORD *)(v3 + 32);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void sub_19893FED0(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0x6666667)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    uint64_t v4 = *(void *)result + 40 * *(unsigned int *)(result + 12);
    int v5 = 40 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)uint64_t v2 = v6;
    WTF::VectorMover<false,WebCore::InspectorOverlayLabel>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::InspectorOverlayLabel>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      uint64_t v6 = *(void *)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)a3 = v6;
      LODWORD(v6) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(a3 + 8) = v6;
      LODWORD(v6) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(a3 + 12) = v6;
      *(void *)(a3 + 16) = *(void *)(v5 + 16);
      WebCore::Color::Color();
      *(_WORD *)(a3 + 32) = *(_WORD *)(v5 + 32);
      uint64_t v8 = *(void *)(v5 + 24);
      if ((v8 & 0x8000000000000) != 0)
      {
        unint64_t v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, v7);
        }
      }
      uint64_t result = WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, v7);
      v5 += 40;
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

void sub_19894010C(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebCore::InspectorOverlayLabel,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if ((v3 & 0x8000000000000) != 0)
    {
      uint64_t v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
    WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, a2);
  }
  return a1;
}

unsigned int *WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  if (result[2] > this)
  {
    uint64_t v3 = (uint64_t)result;
    unint64_t v4 = result[3];
    if (v4 > this)
    {
      uint64_t result = (unsigned int *)WTF::VectorDestructor<true,WebCore::InspectorOverlayLabel>::destruct(*(void *)result + 40 * this, (void *)(*(void *)result + 40 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    uint64_t v5 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x6666667)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v6 = (WTF *)(40 * this);
      uint64_t result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF8) / 0x28;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        uint64_t result = (unsigned int *)WTF::VectorMover<false,WebCore::InspectorOverlayLabel>::move((uint64_t)v5, (uint64_t)v5 + 40 * v4, (uint64_t)result);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(float **)a2;
    uint64_t v7 = 20 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(a1, v6);
      v6 += 5;
      v7 -= 20;
    }
    while (v7);
  }
  return result;
}

unint64_t *IPC::Decoder::decode<WebCore::FloatLine>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
  uint64_t v6 = v5;
  if (!v5) {
    goto LABEL_9;
  }
  while (1)
  {
    unint64_t result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
    uint64_t v9 = v8;
    if (!v8)
    {
      unint64_t v14 = *a2;
      unint64_t v15 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v16 = a2[3];
      if (v16)
      {
        if (v15)
        {
          long long v19 = result;
          (*(void (**)(unint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14);
          uint64_t v9 = 0;
          unint64_t result = v19;
        }
      }
    }
    if (!*a2) {
      break;
    }
    if (v6 && v9)
    {
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = result;
      *(float *)(a1 + 16) = sqrtf((float)((float)(*(float *)&v4 - *(float *)&result)* (float)(*(float *)&v4 - *(float *)&result))+ (float)((float)(*((float *)&v4 + 1) - *((float *)&result + 1))* (float)(*((float *)&v4 + 1) - *((float *)&result + 1))));
      *(unsigned char *)(a1 + 20) = 1;
      return result;
    }
    __break(1u);
LABEL_9:
    unint64_t v10 = *a2;
    unint64_t v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v12 = a2[3];
    if (v12) {
      BOOL v13 = v11 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10);
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 20) = 0;
  unint64_t v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = (unint64_t *)a2[3];
  if (result && v17)
  {
    uint64_t v18 = *(uint64_t (**)(void))(*result + 16);
    return (unint64_t *)v18();
  }
  return result;
}

unint64_t WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 20 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0xCCCCCCD)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    uint64_t v4 = *(unsigned int *)(result + 12);
    int v5 = 20 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(20 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFFC) / 0x14;
    *(void *)uint64_t v2 = v6;
    if (v4)
    {
      uint64_t v8 = 20 * v4;
      unint64_t v9 = v3;
      do
      {
        long long v10 = *(_OWORD *)v9;
        *(_DWORD *)(v6 + 16) = *((_DWORD *)v9 + 4);
        *(_OWORD *)uint64_t v6 = v10;
        v6 += 20;
        unint64_t v9 = (WTF *)((char *)v9 + 20);
        v8 -= 20;
      }
      while (v8);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(unsigned int *)(result + 12);
    if (v3 > a2)
    {
      *(_DWORD *)(result + 12) = a2;
      LODWORD(v3) = a2;
    }
    uint64_t v4 = *(WTF **)result;
    if (a2)
    {
      if (a2 >= 0xCCCCCCD)
      {
        __break(0xC471u);
        return result;
      }
      int v5 = 20 * a2;
      unint64_t result = WTF::fastMalloc((WTF *)(20 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFFC) / 0x14;
      *(void *)uint64_t v2 = result;
      if (v3 && (WTF *)result != v4)
      {
        uint64_t v6 = 20 * v3;
        unint64_t v7 = v4;
        do
        {
          long long v8 = *(_OWORD *)v7;
          *(_DWORD *)(result + 16) = *((_DWORD *)v7 + 4);
          *(_OWORD *)unint64_t result = v8;
          result += 20;
          unint64_t v7 = (WTF *)((char *)v7 + 20);
          v6 -= 20;
        }
        while (v6);
      }
    }
    if (v4)
    {
      if (*(WTF **)v2 == v4)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

unint64_t *IPC::Decoder::decode<WebCore::InspectorOverlayHighlight::GridHighlightOverlay::Area>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v13);
  unint64_t result = IPC::Decoder::decode<WebCore::FloatQuad>((unint64_t *)a2, (uint64_t)v11);
  if (*(void *)a2)
  {
    if (v14)
    {
      uint64_t v6 = v13;
      BOOL v13 = 0;
      if (v12)
      {
        long long v7 = v11[1];
        *(_OWORD *)(a1 + 8) = v11[0];
        *(_OWORD *)(a1 + 24) = v7;
        *(void *)a1 = v6;
        *(unsigned char *)(a1 + 40) = 1;
        return result;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (v14)
  {
    long long v10 = v13;
    BOOL v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v5);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (unint64_t *)*((void *)a2 + 3);
  if (result)
  {
    if (v9) {
      return (unint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*result + 16))(result, v8);
    }
  }
  return result;
}

void sub_1989407E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 - 24))
  {
    uint64_t v4 = *(WTF::StringImpl **)(v2 - 32);
    *(void *)(v2 - 32) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay::Area,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  if (result[2] > this)
  {
    uint64_t v3 = (uint64_t)result;
    unint64_t v4 = result[3];
    if (v4 > this)
    {
      unint64_t result = (unsigned int *)WTF::VectorDestructor<true,WebCore::TextRecognitionBlockData>::destruct((WTF::StringImpl *)(*(void *)result + 40 * this), (WTF::StringImpl *)(*(void *)result + 40 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    int v5 = *(WTF::StringImpl **)v3;
    if (this)
    {
      if (this >= 0x6666667)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v6 = (WTF *)(40 * this);
      unint64_t result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF8) / 0x28;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        unint64_t result = (unsigned int *)WTF::VectorMover<false,WebCore::TextRecognitionBlockData>::move(v5, (WTF::StringImpl *)((char *)v5 + 40 * v4), (uint64_t)result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = 72 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,void>::encode(a1, v6);
      v6 += 9;
      v7 -= 72;
    }
    while (v7);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(float **)a2;
    uint64_t v7 = 136 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,void>::encode(a1, v6);
      v6 += 34;
      v7 -= 136;
    }
    while (v7);
  }
  return result;
}

WTF *IPC::Decoder::decode<WebCore::InspectorOverlayHighlight::GridHighlightOverlay>(uint64_t a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, &v85);
  if (!v86)
  {
    uint64_t v16 = *a2;
    uint64_t v17 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v18 = a2[3];
    if (v18 && v17 != 0) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
    }
  }
  unint64_t v6 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!v7) {
    goto LABEL_27;
  }
  unint64_t v8 = v6;
  char v82 = 0;
  uint64_t v83 = 0;
  if (v6 >= 0xCCCC)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::FloatLine>((uint64_t)v70, (unint64_t *)a2);
      if (!v70[20]) {
        goto LABEL_25;
      }
      int v20 = HIDWORD(v83);
      if (HIDWORD(v83) == v83)
      {
        unint64_t v21 = WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v82, HIDWORD(v83) + 1, (unint64_t)v70);
        int v20 = HIDWORD(v83);
        BOOL v22 = (char *)v82 + 20 * HIDWORD(v83);
        long long v23 = *(_OWORD *)v21;
        *((_DWORD *)v22 + 4) = *(_DWORD *)(v21 + 16);
      }
      else
      {
        BOOL v22 = (char *)v82 + 20 * HIDWORD(v83);
        long long v23 = *(_OWORD *)v70;
        *((_DWORD *)v22 + 4) = *(_DWORD *)&v70[16];
      }
      *(_OWORD *)BOOL v22 = v23;
      HIDWORD(v83) = v20 + 1;
      if (!--v8)
      {
        WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v82, (v20 + 1));
        char v12 = v82;
        int v3 = v83;
        int v2 = HIDWORD(v83);
        goto LABEL_13;
      }
    }
  }
  if (v6)
  {
    LODWORD(v83) = 20 * (int)v6 / 0x14u;
    char v82 = (WTF *)WTF::fastMalloc((WTF *)(20 * v6));
    while (1)
    {
      IPC::Decoder::decode<WebCore::FloatLine>((uint64_t)v70, (unint64_t *)a2);
      if (!v70[20]) {
        break;
      }
      int v10 = HIDWORD(v83);
      if (HIDWORD(v83) == v83)
      {
        unint64_t v11 = WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v82, HIDWORD(v83) + 1, (unint64_t)v70);
        int v10 = HIDWORD(v83);
        char v12 = v82;
        BOOL v13 = (char *)v82 + 20 * HIDWORD(v83);
        long long v14 = *(_OWORD *)v11;
        *((_DWORD *)v13 + 4) = *(_DWORD *)(v11 + 16);
      }
      else
      {
        char v12 = v82;
        BOOL v13 = (char *)v82 + 20 * HIDWORD(v83);
        long long v14 = *(_OWORD *)v70;
        *((_DWORD *)v13 + 4) = *(_DWORD *)&v70[16];
      }
      *(_OWORD *)BOOL v13 = v14;
      int v2 = v10 + 1;
      HIDWORD(v83) = v10 + 1;
      if (!--v8)
      {
        int v3 = v83;
        goto LABEL_13;
      }
    }
LABEL_25:
    uint64_t v24 = v82;
    if (v82)
    {
      char v82 = 0;
      LODWORD(v83) = 0;
      WTF::fastFree(v24, v9);
    }
LABEL_27:
    uint64_t v25 = *a2;
    uint64_t v26 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v27 = a2[3];
    if (v27 && v26) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25);
    }
    char v12 = 0;
    int v15 = 1;
    goto LABEL_29;
  }
  int v2 = 0;
  int v3 = 0;
  char v12 = 0;
LABEL_13:
  int v15 = 0;
LABEL_29:
  IPC::Decoder::decode<WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t *)a2, (uint64_t)&v82);
  unint64_t v28 = IPC::Decoder::decode<unsigned long long>(a2);
  if ((_BYTE)v29)
  {
    unint64_t v30 = v28;
    uint64_t v76 = 0;
    int v77 = 0;
    if (v28 < 0x6666)
    {
      if (v28)
      {
        unsigned int v31 = 40 * v28;
        uint64_t v32 = WTF::fastMalloc((WTF *)(40 * v28));
        LODWORD(v77) = v31 / 0x28;
        uint64_t v76 = v32;
        do
        {
          IPC::Decoder::decode<WebCore::InspectorOverlayHighlight::GridHighlightOverlay::Area>((uint64_t)v70, (IPC::Decoder *)a2);
          if (!(_BYTE)v72) {
            goto LABEL_61;
          }
          int v33 = HIDWORD(v77);
          if (HIDWORD(v77) == v77)
          {
            unint64_t v34 = WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v76, HIDWORD(v77) + 1, (unint64_t)v70);
            int v33 = HIDWORD(v77);
            uint64_t v35 = v76 + 40 * HIDWORD(v77);
            uint64_t v36 = *(void *)v34;
            *(void *)unint64_t v34 = 0;
            *(void *)uint64_t v35 = v36;
            long long v37 = *(_OWORD *)(v34 + 8);
            *(_OWORD *)(v35 + 24) = *(_OWORD *)(v34 + 24);
          }
          else
          {
            uint64_t v35 = v76 + 40 * HIDWORD(v77);
            uint64_t v38 = *(void *)v70;
            *(void *)int v70 = 0;
            *(void *)uint64_t v35 = v38;
            long long v37 = *(_OWORD *)&v70[8];
            *(_OWORD *)(v35 + 24) = v71;
          }
          *(_OWORD *)(v35 + 8) = v37;
          HIDWORD(v77) = v33 + 1;
          if ((_BYTE)v72)
          {
            unsigned __int8 v39 = *(WTF::StringImpl **)v70;
            *(void *)int v70 = 0;
            if (v39)
            {
              if (*(_DWORD *)v39 == 2) {
                WTF::StringImpl::destroy(v39, v29);
              }
              else {
                *(_DWORD *)v39 -= 2;
              }
            }
          }
          --v30;
        }
        while (v30);
        uint64_t v40 = v76;
        uint64_t v41 = v77;
      }
      else
      {
        uint64_t v40 = 0;
        uint64_t v41 = 0;
      }
      uint64_t v76 = 0;
      int v77 = 0;
      uint64_t v79 = v40;
      uint64_t v80 = v41;
LABEL_47:
      char v81 = 1;
      WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v29);
      goto LABEL_63;
    }
    while (1)
    {
      IPC::Decoder::decode<WebCore::InspectorOverlayHighlight::GridHighlightOverlay::Area>((uint64_t)v70, (IPC::Decoder *)a2);
      if (!(_BYTE)v72) {
        break;
      }
      int v42 = HIDWORD(v77);
      if (HIDWORD(v77) == v77)
      {
        unint64_t v43 = WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v76, HIDWORD(v77) + 1, (unint64_t)v70);
        int v42 = HIDWORD(v77);
        uint64_t v44 = v76 + 40 * HIDWORD(v77);
        uint64_t v45 = *(void *)v43;
        *(void *)unint64_t v43 = 0;
        *(void *)uint64_t v44 = v45;
        long long v46 = *(_OWORD *)(v43 + 8);
        *(_OWORD *)(v44 + 24) = *(_OWORD *)(v43 + 24);
      }
      else
      {
        uint64_t v44 = v76 + 40 * HIDWORD(v77);
        uint64_t v47 = *(void *)v70;
        *(void *)int v70 = 0;
        *(void *)uint64_t v44 = v47;
        long long v46 = *(_OWORD *)&v70[8];
        *(_OWORD *)(v44 + 24) = v71;
      }
      *(_OWORD *)(v44 + 8) = v46;
      HIDWORD(v77) = v42 + 1;
      if ((_BYTE)v72)
      {
        uint64_t v48 = *(WTF::StringImpl **)v70;
        *(void *)int v70 = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2) {
            WTF::StringImpl::destroy(v48, v29);
          }
          else {
            *(_DWORD *)v48 -= 2;
          }
        }
      }
      if (!--v30)
      {
        WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay::Area,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v76, HIDWORD(v77));
        uint64_t v79 = v76;
        int v49 = v77;
        uint64_t v76 = 0;
        int v77 = 0;
        uint64_t v80 = v49;
        goto LABEL_47;
      }
    }
LABEL_61:
    LOBYTE(v79) = 0;
    char v81 = 0;
    WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v29);
  }
  else
  {
    LOBYTE(v79) = 0;
    char v81 = 0;
  }
  int v50 = (void *)*a2;
  uint64_t v51 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = (WTF *)a2[3];
  if (result) {
    goto LABEL_92;
  }
  while (1)
  {
LABEL_63:
    unint64_t result = (WTF *)IPC::Decoder::decode<WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v76, (IPC::Decoder *)a2);
    if (!*a2)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 72) = 0;
      goto LABEL_75;
    }
    if (v86)
    {
      unint64_t result = (WTF *)WebCore::Color::Color();
      if (!v15)
      {
        *(void *)&v70[8] = v12;
        *(_DWORD *)&v70[16] = v3;
        *(_DWORD *)&v70[20] = v2;
        if (v84)
        {
          *(void *)&long long v71 = v82;
          uint64_t v53 = v83;
          char v82 = 0;
          uint64_t v83 = 0;
          *((void *)&v71 + 1) = v53;
          if (v81)
          {
            uint64_t v72 = v79;
            uint64_t v54 = v80;
            uint64_t v79 = 0;
            uint64_t v80 = 0;
            char v73 = v54;
            if (v78) {
              break;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_92:
    if (v51) {
      (*(void (**)(WTF *, void *))(*(void *)result + 16))(result, v50);
    }
  }
  uint64_t v74 = v76;
  uint64_t v55 = v77;
  uint64_t v76 = 0;
  int v77 = 0;
  uint64_t v75 = v55;
  WebCore::Color::Color();
  uint64_t v56 = *(void *)&v70[8];
  *(void *)&v70[8] = 0;
  *(void *)(a1 + 8) = v56;
  uint64_t v57 = *(void *)&v70[16];
  *(void *)&v70[16] = 0;
  *(void *)(a1 + 16) = v57;
  uint64_t v58 = v71;
  *(void *)&long long v71 = 0;
  *(void *)(a1 + 24) = v58;
  uint64_t v59 = *((void *)&v71 + 1);
  *((void *)&v71 + 1) = 0;
  *(void *)(a1 + 32) = v59;
  uint64_t v60 = v72;
  uint64_t v72 = 0;
  *(void *)(a1 + 40) = v60;
  int v61 = v73;
  char v73 = 0;
  *(void *)(a1 + 48) = v61;
  uint64_t v62 = v74;
  uint64_t v74 = 0;
  *(void *)(a1 + 56) = v62;
  int v63 = v75;
  uint64_t v75 = 0;
  *(void *)(a1 + 64) = v63;
  *(unsigned char *)(a1 + 72) = 1;
  WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v64);
  WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v72, v65);
  int v66 = (WTF *)v71;
  if ((void)v71)
  {
    *(void *)&long long v71 = 0;
    DWORD2(v71) = 0;
    WTF::fastFree(v66, v50);
  }
  unint64_t result = *(WTF **)&v70[8];
  if (*(void *)&v70[8])
  {
    *(void *)&v70[8] = 0;
    *(_DWORD *)&v70[16] = 0;
    unint64_t result = (WTF *)WTF::fastFree(result, v50);
  }
  if ((*(void *)v70 & 0x8000000000000) != 0)
  {
    unint64_t result = (WTF *)(*(void *)v70 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v70 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      unint64_t result = (WTF *)WTF::fastFree(result, v50);
    }
  }
  char v12 = 0;
LABEL_75:
  if (v78) {
    unint64_t result = (WTF *)WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v50);
  }
  if (v81) {
    unint64_t result = (WTF *)WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v50);
  }
  if (v84)
  {
    unint64_t result = v82;
    if (v82)
    {
      char v82 = 0;
      LODWORD(v83) = 0;
      unint64_t result = (WTF *)WTF::fastFree(result, v50);
    }
  }
  if (v12) {
    char v67 = v15;
  }
  else {
    char v67 = 1;
  }
  if ((v67 & 1) == 0) {
    unint64_t result = (WTF *)WTF::fastFree(v12, v50);
  }
  if (v86)
  {
    if ((v85 & 0x8000000000000) != 0)
    {
      unint64_t result = (WTF *)(v85 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v85 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)result);
        unint64_t result = (WTF *)WTF::fastFree(result, v50);
      }
    }
  }
  if (!*(unsigned char *)(a1 + 72))
  {
    uint64_t v68 = *a2;
    uint64_t v69 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = (WTF *)a2[3];
    if (result)
    {
      if (v69) {
        return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(void *)result + 16))(result, v68);
      }
    }
  }
  return result;
}

void sub_198941130(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF *a10, int a11, WTF *a12, int a13, int a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,WTF *a28,int a29,int a30,char a31)
{
  std::__optional_destruct_base<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,false>::~__optional_destruct_base[abi:sn180100](v31, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorOverlayHighlight::GridHighlightOverlay>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t result = WebCore::Color::Color();
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  uint64_t v5 = *(void *)(v3 + 8);
  *(void *)(v3 + 8) = 0;
  *(void *)(result + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 16);
  *(_DWORD *)(v3 + 16) = 0;
  *(_DWORD *)(result + 16) = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 20);
  *(_DWORD *)(v3 + 20) = 0;
  *(_DWORD *)(result + 20) = v5;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  uint64_t v6 = *(void *)(v3 + 24);
  *(void *)(v3 + 24) = 0;
  *(void *)(result + 24) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 32);
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(result + 32) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 36);
  *(_DWORD *)(v3 + 36) = 0;
  *(_DWORD *)(result + 36) = v6;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  uint64_t v7 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = 0;
  *(void *)(result + 40) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 48);
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(result + 48) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 52);
  *(_DWORD *)(v3 + 52) = 0;
  *(_DWORD *)(result + 52) = v7;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  uint64_t v8 = *(void *)(v3 + 56);
  *(void *)(v3 + 56) = 0;
  *(void *)(result + 56) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 64);
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(result + 64) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 68);
  *(_DWORD *)(v3 + 68) = 0;
  *(_DWORD *)(result + 68) = v8;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 72 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x38E38E4)
    {
      __break(0xC471u);
      JUMPOUT(0x198941518);
    }
    unint64_t v3 = *(WTF **)a1;
    unint64_t v4 = (WTF *)(*(void *)a1 + 72 * *(unsigned int *)(a1 + 12));
    int v5 = 72 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(72 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x48;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::InspectorOverlayHighlight::GridHighlightOverlay>::move(v3, v4);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF *WTF::VectorMover<false,WebCore::InspectorOverlayHighlight::GridHighlightOverlay>::move(WTF *result, WTF *a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    uint64_t v4 = 0;
    do
    {
      int v5 = (char *)v3 + v4;
      uint64_t v6 = WebCore::Color::Color();
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
      uint64_t v7 = *(void *)((char *)v3 + v4 + 8);
      *((void *)v5 + 1) = 0;
      *(void *)(v6 + 8) = v7;
      LODWORD(v7) = *(_DWORD *)((char *)v3 + v4 + 16);
      *((_DWORD *)v5 + 4) = 0;
      *(_DWORD *)(v6 + 16) = v7;
      LODWORD(v7) = *(_DWORD *)((char *)v3 + v4 + 20);
      *((_DWORD *)v5 + 5) = 0;
      *(_DWORD *)(v6 + 20) = v7;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 0;
      uint64_t v8 = *(void *)((char *)v3 + v4 + 24);
      *((void *)v5 + 3) = 0;
      *(void *)(v6 + 24) = v8;
      LODWORD(v8) = *(_DWORD *)((char *)v3 + v4 + 32);
      *((_DWORD *)v5 + 8) = 0;
      *(_DWORD *)(v6 + 32) = v8;
      LODWORD(v8) = *(_DWORD *)((char *)v3 + v4 + 36);
      *((_DWORD *)v5 + 9) = 0;
      *(_DWORD *)(v6 + 36) = v8;
      *(void *)(v6 + 40) = 0;
      *(void *)(v6 + 48) = 0;
      uint64_t v9 = *(void *)((char *)v3 + v4 + 40);
      *((void *)v5 + 5) = 0;
      *(void *)(v6 + 40) = v9;
      LODWORD(v9) = *(_DWORD *)((char *)v3 + v4 + 48);
      *((_DWORD *)v5 + 12) = 0;
      *(_DWORD *)(v6 + 48) = v9;
      LODWORD(v9) = *(_DWORD *)((char *)v3 + v4 + 52);
      *((_DWORD *)v5 + 13) = 0;
      *(_DWORD *)(v6 + 52) = v9;
      *(void *)(v6 + 56) = 0;
      *(void *)(v6 + 64) = 0;
      uint64_t v10 = *(void *)((char *)v3 + v4 + 56);
      *((void *)v5 + 7) = 0;
      *(void *)(v6 + 56) = v10;
      LODWORD(v10) = *(_DWORD *)((char *)v3 + v4 + 64);
      *((_DWORD *)v5 + 16) = 0;
      *(_DWORD *)(v6 + 64) = v10;
      LODWORD(v10) = *(_DWORD *)((char *)v3 + v4 + 68);
      *((_DWORD *)v5 + 17) = 0;
      *(_DWORD *)(v6 + 68) = v10;
      WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3 + v4 + 56, v11);
      WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3 + v4 + 40, v12);
      long long v14 = *(WTF **)((char *)v3 + v4 + 24);
      if (v14)
      {
        *((void *)v5 + 3) = 0;
        *((_DWORD *)v5 + 8) = 0;
        WTF::fastFree(v14, v13);
      }
      uint64_t result = (WTF *)*((void *)v5 + 1);
      if (result)
      {
        *((void *)v5 + 1) = 0;
        *((_DWORD *)v5 + 4) = 0;
        uint64_t result = (WTF *)WTF::fastFree(result, v13);
      }
      uint64_t v15 = *(void *)v5;
      if ((*(void *)v5 & 0x8000000000000) != 0)
      {
        uint64_t result = (WTF *)(v15 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)result);
          uint64_t result = (WTF *)WTF::fastFree(result, v13);
        }
      }
      v4 += 72;
    }
    while ((WTF *)((char *)v3 + v4) != a2);
  }
  return result;
}

uint64_t *std::__optional_destruct_base<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,false>::~__optional_destruct_base[abi:sn180100](uint64_t *a1, void *a2)
{
  if (*((unsigned char *)a1 + 72))
  {
    WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 7), a2);
    WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 5), v3);
    int v5 = (WTF *)a1[3];
    if (v5)
    {
      a1[3] = 0;
      *((_DWORD *)a1 + 8) = 0;
      WTF::fastFree(v5, v4);
    }
    uint64_t v6 = (WTF *)a1[1];
    if (v6)
    {
      a1[1] = 0;
      *((_DWORD *)a1 + 4) = 0;
      WTF::fastFree(v6, v4);
    }
    uint64_t v7 = *a1;
    if ((*a1 & 0x8000000000000) != 0)
    {
      uint64_t v9 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v4);
      }
    }
  }
  return a1;
}

unsigned int *WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  if (result[2] > this)
  {
    uint64_t v3 = (uint64_t)result;
    unint64_t v4 = result[3];
    if (v4 > this)
    {
      uint64_t result = (unsigned int *)WTF::VectorDestructor<true,WebCore::InspectorOverlayHighlight::GridHighlightOverlay>::destruct((WTF *)(*(void *)result + 72 * this), (WTF *)(*(void *)result + 72 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    int v5 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x38E38E4)
      {
        __break(0xC471u);
        JUMPOUT(0x198941828);
      }
      uint64_t v6 = (WTF *)(72 * this);
      uint64_t result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF8) / 0x48;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        uint64_t result = (unsigned int *)WTF::VectorMover<false,WebCore::InspectorOverlayHighlight::GridHighlightOverlay>::move(v5, (WTF *)((char *)v5 + 72 * v4));
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

WTF *WTF::VectorDestructor<true,WebCore::InspectorOverlayHighlight::GridHighlightOverlay>::destruct(WTF *result, WTF *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    do
    {
      WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3 + 56, a2);
      WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3 + 40, v4);
      int v5 = (WTF *)*((void *)v3 + 3);
      if (v5)
      {
        *((void *)v3 + 3) = 0;
        *((_DWORD *)v3 + 8) = 0;
        WTF::fastFree(v5, a2);
      }
      uint64_t result = (WTF *)*((void *)v3 + 1);
      if (result)
      {
        *((void *)v3 + 1) = 0;
        *((_DWORD *)v3 + 4) = 0;
        uint64_t result = (WTF *)WTF::fastFree(result, a2);
      }
      uint64_t v6 = *(void *)v3;
      if ((*(void *)v3 & 0x8000000000000) != 0)
      {
        uint64_t result = (WTF *)(v6 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)result);
          uint64_t result = (WTF *)WTF::fastFree(result, a2);
        }
      }
      uint64_t v3 = (WTF *)((char *)v3 + 72);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::InspectorOverlayHighlight::GridHighlightOverlay>::destruct(*(WTF **)a1, (WTF *)(*(void *)a1 + 72 * v3));
  }
  unint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void IPC::Decoder::decode<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay>(uint64_t a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, &v74);
  if (!v75)
  {
    uint64_t v32 = *a2;
    uint64_t v33 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v34 = a2[3];
    if (v34 && v33 != 0) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32);
    }
  }
  IPC::Decoder::decode<WebCore::FloatQuad>((unint64_t *)a2, (uint64_t)v72);
  IPC::Decoder::decode<WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t *)a2, (uint64_t)&v69);
  IPC::Decoder::decode<WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t *)a2, (uint64_t)&v66);
  IPC::Decoder::decode<WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t *)a2, (uint64_t)&v63);
  IPC::Decoder::decode<WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t *)a2, (uint64_t)&v60);
  IPC::Decoder::decode<WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t *)a2, (uint64_t)&v57);
  IPC::Decoder::decode<WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v54, (IPC::Decoder *)a2);
  if (*a2)
  {
    uint64_t v5 = v75;
    if (!v75) {
      goto LABEL_33;
    }
    WebCore::Color::Color();
    uint64_t v5 = v73;
    if (!v73) {
      goto LABEL_33;
    }
    long long v40 = v72[0];
    long long v41 = v72[1];
    uint64_t v5 = v71;
    if (!v71) {
      goto LABEL_33;
    }
    int v42 = v69;
    uint64_t v6 = v70;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    uint64_t v43 = v6;
    uint64_t v5 = v68;
    if (!v68) {
      goto LABEL_33;
    }
    uint64_t v44 = v66;
    uint64_t v7 = v67;
    int v66 = 0;
    uint64_t v67 = 0;
    uint64_t v45 = v7;
    uint64_t v5 = v65;
    if (!v65) {
      goto LABEL_33;
    }
    long long v46 = v63;
    uint64_t v8 = v64;
    int v63 = 0;
    uint64_t v64 = 0;
    uint64_t v47 = v8;
    uint64_t v5 = v62;
    if (!v62) {
      goto LABEL_33;
    }
    uint64_t v48 = v60;
    uint64_t v9 = v61;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v49 = v9;
    uint64_t v5 = v59;
    if (!v59 || (v50 = v57, v10 = v58, v57 = 0, v58 = 0, v51 = v10, (uint64_t v5 = v56) == 0))
    {
LABEL_33:
      __break(1u);
LABEL_34:
      unsigned int v31 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, v4);
      }
      goto LABEL_31;
    }
    uint64_t v52 = v54;
    uint64_t v11 = v55;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v53 = v11;
    WebCore::Color::Color();
    long long v12 = v41;
    *(_OWORD *)(a1 + 8) = v40;
    *(_OWORD *)(a1 + 24) = v12;
    BOOL v13 = v42;
    int v42 = 0;
    *(void *)(a1 + 40) = v13;
    uint64_t v14 = v43;
    uint64_t v43 = 0;
    *(void *)(a1 + 48) = v14;
    uint64_t v15 = v44;
    uint64_t v44 = 0;
    *(void *)(a1 + 56) = v15;
    uint64_t v16 = v45;
    uint64_t v45 = 0;
    *(void *)(a1 + 64) = v16;
    uint64_t v17 = v46;
    long long v46 = 0;
    *(void *)(a1 + 72) = v17;
    uint64_t v18 = v47;
    uint64_t v47 = 0;
    *(void *)(a1 + 80) = v18;
    long long v19 = v48;
    uint64_t v48 = 0;
    *(void *)(a1 + 88) = v19;
    uint64_t v20 = v49;
    uint64_t v49 = 0;
    *(void *)(a1 + 96) = v20;
    unint64_t v21 = v50;
    int v50 = 0;
    *(void *)(a1 + 104) = v21;
    uint64_t v22 = v51;
    uint64_t v51 = 0;
    *(void *)(a1 + 112) = v22;
    uint64_t v23 = v52;
    uint64_t v52 = 0;
    *(void *)(a1 + 120) = v23;
    uint64_t v24 = v53;
    uint64_t v53 = 0;
    *(void *)(a1 + 128) = v24;
    *(unsigned char *)(a1 + 136) = 1;
    WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay((WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *)&v39, v25);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 136) = 0;
  }
  if (v56) {
    WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v4);
  }
  if (v59)
  {
    uint64_t v26 = v57;
    if (v57)
    {
      uint64_t v57 = 0;
      LODWORD(v58) = 0;
      WTF::fastFree(v26, v4);
    }
  }
  if (v62)
  {
    uint64_t v27 = v60;
    if (v60)
    {
      uint64_t v60 = 0;
      LODWORD(v61) = 0;
      WTF::fastFree(v27, v4);
    }
  }
  if (v65)
  {
    unint64_t v28 = v63;
    if (v63)
    {
      int v63 = 0;
      LODWORD(v64) = 0;
      WTF::fastFree(v28, v4);
    }
  }
  if (v68)
  {
    uint64_t v29 = v66;
    if (v66)
    {
      int v66 = 0;
      LODWORD(v67) = 0;
      WTF::fastFree(v29, v4);
    }
  }
  if (v71)
  {
    unint64_t v30 = v69;
    if (v69)
    {
      uint64_t v69 = 0;
      LODWORD(v70) = 0;
      WTF::fastFree(v30, v4);
    }
  }
  if (v75)
  {
    uint64_t v5 = v74;
    if ((v74 & 0x8000000000000) != 0) {
      goto LABEL_34;
    }
  }
LABEL_31:
  if (!*(unsigned char *)(a1 + 136))
  {
    uint64_t v36 = *a2;
    uint64_t v37 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v38 = a2[3];
    if (v38)
    {
      if (v37) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v36);
      }
    }
  }
}

void sub_198941CC4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,WTF *a29,int a30,int a31,char a32,WTF *a33,int a34,int a35,char a36)
{
  if (*((unsigned char *)v36 + 136)) {
    WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay(v36, a2);
  }
  _Unwind_Resume(exception_object);
}

__n128 WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorOverlayHighlight::FlexHighlightOverlay>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = WebCore::Color::Color();
  __n128 result = *(__n128 *)(v3 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(v3 + 24);
  *(__n128 *)(v4 + 8) = result;
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 48) = 0;
  uint64_t v6 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = 0;
  *(void *)(v4 + 40) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 48);
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v4 + 48) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  *(_DWORD *)(v3 + 52) = 0;
  *(_DWORD *)(v4 + 52) = v6;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 64) = 0;
  uint64_t v7 = *(void *)(v3 + 56);
  *(void *)(v3 + 56) = 0;
  *(void *)(v4 + 56) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 64);
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v4 + 64) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 68);
  *(_DWORD *)(v3 + 68) = 0;
  *(_DWORD *)(v4 + 68) = v7;
  *(void *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0;
  uint64_t v8 = *(void *)(v3 + 72);
  *(void *)(v3 + 72) = 0;
  *(void *)(v4 + 72) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v4 + 80) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 84);
  *(_DWORD *)(v3 + 84) = 0;
  *(_DWORD *)(v4 + 84) = v8;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 96) = 0;
  uint64_t v9 = *(void *)(v3 + 88);
  *(void *)(v3 + 88) = 0;
  *(void *)(v4 + 88) = v9;
  LODWORD(v9) = *(_DWORD *)(v3 + 96);
  *(_DWORD *)(v3 + 96) = 0;
  *(_DWORD *)(v4 + 96) = v9;
  LODWORD(v9) = *(_DWORD *)(v3 + 100);
  *(_DWORD *)(v3 + 100) = 0;
  *(_DWORD *)(v4 + 100) = v9;
  *(void *)(v4 + 104) = 0;
  *(void *)(v4 + 112) = 0;
  uint64_t v10 = *(void *)(v3 + 104);
  *(void *)(v3 + 104) = 0;
  *(void *)(v4 + 104) = v10;
  LODWORD(v10) = *(_DWORD *)(v3 + 112);
  *(_DWORD *)(v3 + 112) = 0;
  *(_DWORD *)(v4 + 112) = v10;
  LODWORD(v10) = *(_DWORD *)(v3 + 116);
  *(_DWORD *)(v3 + 116) = 0;
  *(_DWORD *)(v4 + 116) = v10;
  *(void *)(v4 + 120) = 0;
  *(void *)(v4 + 128) = 0;
  uint64_t v11 = *(void *)(v3 + 120);
  *(void *)(v3 + 120) = 0;
  *(void *)(v4 + 120) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 128);
  *(_DWORD *)(v3 + 128) = 0;
  *(_DWORD *)(v4 + 128) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 132);
  *(_DWORD *)(v3 + 132) = 0;
  *(_DWORD *)(v4 + 132) = v11;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 136 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x1E1E1E2)
    {
      __break(0xC471u);
      JUMPOUT(0x1989420ACLL);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = *(void *)a1 + 136 * *(unsigned int *)(a1 + 12);
    int v5 = 136 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(136 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x88;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::InspectorOverlayHighlight::FlexHighlightOverlay>::move((uint64_t)v3, v4);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebCore::InspectorOverlayHighlight::FlexHighlightOverlay>::move(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = a1 + v4;
      uint64_t v6 = WebCore::Color::Color();
      long long v7 = *(_OWORD *)(a1 + v4 + 8);
      *(_OWORD *)(v6 + 24) = *(_OWORD *)(a1 + v4 + 24);
      *(_OWORD *)(v6 + 8) = v7;
      *(void *)(v6 + 40) = 0;
      *(void *)(v6 + 48) = 0;
      uint64_t v8 = *(void *)(a1 + v4 + 40);
      *(void *)(v5 + 40) = 0;
      *(void *)(v6 + 40) = v8;
      LODWORD(v8) = *(_DWORD *)(a1 + v4 + 48);
      *(_DWORD *)(v5 + 48) = 0;
      *(_DWORD *)(v6 + 48) = v8;
      LODWORD(v8) = *(_DWORD *)(a1 + v4 + 52);
      *(_DWORD *)(v5 + 52) = 0;
      *(_DWORD *)(v6 + 52) = v8;
      *(void *)(v6 + 56) = 0;
      *(void *)(v6 + 64) = 0;
      uint64_t v9 = *(void *)(a1 + v4 + 56);
      *(void *)(v5 + 56) = 0;
      *(void *)(v6 + 56) = v9;
      LODWORD(v9) = *(_DWORD *)(a1 + v4 + 64);
      *(_DWORD *)(v5 + 64) = 0;
      *(_DWORD *)(v6 + 64) = v9;
      LODWORD(v9) = *(_DWORD *)(a1 + v4 + 68);
      *(_DWORD *)(v5 + 68) = 0;
      *(_DWORD *)(v6 + 68) = v9;
      *(void *)(v6 + 72) = 0;
      *(void *)(v6 + 80) = 0;
      uint64_t v10 = *(void *)(a1 + v4 + 72);
      *(void *)(v5 + 72) = 0;
      *(void *)(v6 + 72) = v10;
      LODWORD(v10) = *(_DWORD *)(a1 + v4 + 80);
      *(_DWORD *)(v5 + 80) = 0;
      *(_DWORD *)(v6 + 80) = v10;
      LODWORD(v10) = *(_DWORD *)(a1 + v4 + 84);
      *(_DWORD *)(v5 + 84) = 0;
      *(_DWORD *)(v6 + 84) = v10;
      *(void *)(v6 + 88) = 0;
      *(void *)(v6 + 96) = 0;
      uint64_t v11 = *(void *)(a1 + v4 + 88);
      *(void *)(v5 + 88) = 0;
      *(void *)(v6 + 88) = v11;
      LODWORD(v11) = *(_DWORD *)(a1 + v4 + 96);
      *(_DWORD *)(v5 + 96) = 0;
      *(_DWORD *)(v6 + 96) = v11;
      LODWORD(v11) = *(_DWORD *)(a1 + v4 + 100);
      *(_DWORD *)(v5 + 100) = 0;
      *(_DWORD *)(v6 + 100) = v11;
      *(void *)(v6 + 104) = 0;
      *(void *)(v6 + 112) = 0;
      uint64_t v12 = *(void *)(a1 + v4 + 104);
      *(void *)(v5 + 104) = 0;
      *(void *)(v6 + 104) = v12;
      LODWORD(v12) = *(_DWORD *)(a1 + v4 + 112);
      *(_DWORD *)(v5 + 112) = 0;
      *(_DWORD *)(v6 + 112) = v12;
      LODWORD(v12) = *(_DWORD *)(a1 + v4 + 116);
      *(_DWORD *)(v5 + 116) = 0;
      *(_DWORD *)(v6 + 116) = v12;
      *(void *)(v6 + 120) = 0;
      *(void *)(v6 + 128) = 0;
      uint64_t v13 = *(void *)(a1 + v4 + 120);
      *(void *)(v5 + 120) = 0;
      *(void *)(v6 + 120) = v13;
      LODWORD(v13) = *(_DWORD *)(a1 + v4 + 128);
      *(_DWORD *)(v5 + 128) = 0;
      *(_DWORD *)(v6 + 128) = v13;
      LODWORD(v13) = *(_DWORD *)(a1 + v4 + 132);
      *(_DWORD *)(v5 + 132) = 0;
      *(_DWORD *)(v6 + 132) = v13;
      WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay((WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *)(a1 + v4), v14);
      v4 += 136;
    }
    while (a1 + v4 != a2);
  }
}

void WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t this)
{
  if (*(unsigned int *)(a1 + 8) > this)
  {
    unint64_t v4 = *(unsigned int *)(a1 + 12);
    if (v4 > this)
    {
      uint64_t v5 = (WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *)(*(void *)a1 + 136 * this);
      uint64_t v6 = 136 * v4 - 136 * this;
      do
      {
        WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay(v5, (void *)this);
        uint64_t v5 = (WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *)(v7 + 136);
        v6 -= 136;
      }
      while (v6);
      *(_DWORD *)(a1 + 12) = this;
      LODWORD(v4) = this;
    }
    uint64_t v8 = *(WTF **)a1;
    if (this)
    {
      if (this >= 0x1E1E1E2)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v9 = (WTF *)(136 * this);
      uint64_t v10 = WTF::fastMalloc(v9);
      *(_DWORD *)(a1 + 8) = (v9 & 0xFFFFFFF8) / 0x88;
      *(void *)a1 = v10;
      if ((WTF *)v10 != v8) {
        WTF::VectorMover<false,WebCore::InspectorOverlayHighlight::FlexHighlightOverlay>::move((uint64_t)v8, (uint64_t)v8 + 136 * v4);
      }
    }
    if (v8)
    {
      if (*(WTF **)a1 == v8)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v8, (void *)this);
    }
  }
}

void *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(void **a1)
{
  __n128 result = *a1;
  if (!result) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)result - 1);
  unint64_t v3 = &result[3 * v2];
  if (!*((_DWORD *)result - 3)) {
    return &result[3 * v2];
  }
  if (v2)
  {
    uint64_t v4 = 24 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 3;
      v4 -= 24;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = (IPC::Decoder *)result;
  unint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = *(void *)result;
  unint64_t v6 = ((*(void *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)result;
  if (v4 < v6 || v4 - v6 <= 3)
  {
LABEL_126:
    unint64_t v47 = 0;
    uint64_t v48 = 0;
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v49 = *((void *)v2 + 3);
    if (v49)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v49 + 16))(v49, v5, v4);
        uint64_t v48 = *(WTF::StringImpl **)v2;
        unint64_t v47 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v47 = 0;
        uint64_t v48 = 0;
      }
    }
    goto LABEL_127;
  }
  uint64_t v8 = (int *)(v5 + v6);
  *(void *)(result + 16) = v8 + 1;
  if (!v5)
  {
    unint64_t v47 = v4;
    uint64_t v48 = 0;
LABEL_127:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    __n128 result = *((void *)v2 + 3);
    if (result)
    {
      if (v47) {
        __n128 result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v48);
      }
    }
    *a2 = 0;
    a2[8] = 0;
    return result;
  }
  int v9 = *v8;
  uint64_t v56 = 0;
  int v50 = v9;
  if (!v9)
  {
    uint64_t v46 = 0;
LABEL_120:
    *(void *)a2 = v46;
    a2[8] = 1;
    return result;
  }
  int v10 = 0;
  while (2)
  {
    __n128 result = (uint64_t)IPC::Decoder::decode<WTF::String>(v2, (uint64_t)&v54);
    if (!v55)
    {
      *a2 = 0;
      a2[8] = 0;
      goto LABEL_122;
    }
    uint64_t v12 = (const WTF::StringImpl *)*((void *)v2 + 1);
    uint64_t v11 = *(WTF::StringImpl **)v2;
    unint64_t v13 = *((void *)v2 + 2) - *(void *)v2;
    if ((unint64_t)v12 <= v13)
    {
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v28 = *((void *)v2 + 3);
      if (!v28 || !v12) {
        goto LABEL_13;
      }
      (*(void (**)(uint64_t))(*(void *)v28 + 16))(v28);
      uint64_t v11 = *(WTF::StringImpl **)v2;
      uint64_t v12 = (const WTF::StringImpl *)*((void *)v2 + 1);
LABEL_47:
      uint64_t v29 = *((void *)v2 + 3);
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      if (v29 && v12) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v29 + 16))(v29, v11);
      }
      goto LABEL_13;
    }
    uint64_t v14 = (unsigned __int8 *)v11 + v13;
    *((void *)v2 + 2) = v14 + 1;
    if (!v11) {
      goto LABEL_47;
    }
    unsigned int v15 = *v14;
    if (v15 >= 5)
    {
LABEL_13:
      LOBYTE(v51) = 0;
      char v53 = 0;
LABEL_14:
      uint64_t v11 = *(WTF::StringImpl **)v2;
      uint64_t v16 = *((void *)v2 + 1);
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      __n128 result = *((void *)v2 + 3);
      if (!result
        || !v16
        || (__n128 result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v11),
            !v53))
      {
        *a2 = 0;
        a2[8] = 0;
        int v17 = 1;
        goto LABEL_71;
      }
      goto LABEL_65;
    }
    if (*v14)
    {
      if (v15 == 1)
      {
        unint64_t v18 = ((unint64_t)(v14 + 8) & 0xFFFFFFFFFFFFFFF8) - (void)v11;
        unint64_t v4 = (unint64_t)v12 - v18;
        if ((unint64_t)v12 >= v18 && v4 > 7)
        {
          uint64_t v20 = (unint64_t *)((char *)v11 + v18);
          unint64_t v4 = *v20;
          *((void *)v2 + 2) = v20 + 1;
          unint64_t v51 = v4;
          int v21 = 1;
          int v52 = 1;
          goto LABEL_64;
        }
        *(void *)uint64_t v2 = 0;
        *((void *)v2 + 1) = 0;
        __n128 result = *((void *)v2 + 3);
        if (!result) {
          goto LABEL_62;
        }
        (*(void (**)(void))(*(void *)result + 16))();
        uint64_t v11 = *(WTF::StringImpl **)v2;
        uint64_t v12 = (const WTF::StringImpl *)*((void *)v2 + 1);
        __n128 result = *((void *)v2 + 3);
        *(void *)uint64_t v2 = 0;
        *((void *)v2 + 1) = 0;
        if (!result || !v12) {
          goto LABEL_62;
        }
LABEL_118:
        __n128 result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v11);
        goto LABEL_62;
      }
      if (v15 == 2)
      {
        __n128 result = IPC::Decoder::decode<long long>(v2);
        if (!(_BYTE)v11)
        {
LABEL_62:
          int v21 = 0;
          goto LABEL_63;
        }
        unint64_t v51 = result;
        int v22 = 2;
        goto LABEL_39;
      }
      if (v15 != 3)
      {
        unint64_t v24 = ((unint64_t)(v14 + 8) & 0xFFFFFFFFFFFFFFF8) - (void)v11;
        unint64_t v4 = (unint64_t)v12 - v24;
        if ((unint64_t)v12 < v24 || v4 <= 7)
        {
          *(void *)uint64_t v2 = 0;
          *((void *)v2 + 1) = 0;
          __n128 result = *((void *)v2 + 3);
          if (!result) {
            goto LABEL_62;
          }
          (*(void (**)(void))(*(void *)result + 16))();
          uint64_t v11 = *(WTF::StringImpl **)v2;
          uint64_t v12 = (const WTF::StringImpl *)*((void *)v2 + 1);
          __n128 result = *((void *)v2 + 3);
          *(void *)uint64_t v2 = 0;
          *((void *)v2 + 1) = 0;
          if (!result || !v12) {
            goto LABEL_62;
          }
          goto LABEL_118;
        }
        uint64_t v26 = (unint64_t *)((char *)v11 + v24);
        unint64_t v27 = *v26;
        *((void *)v2 + 2) = v26 + 1;
        unint64_t v51 = v27;
        int v22 = 4;
        goto LABEL_39;
      }
      unint64_t v4 = v14 + 1 - (unsigned __int8 *)v11;
      if ((unint64_t)v12 <= v4)
      {
        *(void *)uint64_t v2 = 0;
        *((void *)v2 + 1) = 0;
        __n128 result = *((void *)v2 + 3);
        if (!result) {
          goto LABEL_62;
        }
        (*(void (**)(void))(*(void *)result + 16))();
        uint64_t v11 = *(WTF::StringImpl **)v2;
        uint64_t v12 = (const WTF::StringImpl *)*((void *)v2 + 1);
        __n128 result = *((void *)v2 + 3);
        *(void *)uint64_t v2 = 0;
        *((void *)v2 + 1) = 0;
        if (!result || !v12) {
          goto LABEL_62;
        }
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v11);
        uint64_t v11 = *(WTF::StringImpl **)v2;
        uint64_t v12 = (const WTF::StringImpl *)*((void *)v2 + 1);
      }
      else
      {
        unint64_t v4 = (unint64_t)(v14 + 2);
        *((void *)v2 + 2) = v14 + 2;
        unsigned int v23 = v14[1];
        if (v23 < 2)
        {
          LOBYTE(v51) = v23 != 0;
          int v22 = 3;
LABEL_39:
          int v52 = v22;
          goto LABEL_40;
        }
      }
      __n128 result = *((void *)v2 + 3);
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      if (!result || !v12) {
        goto LABEL_62;
      }
      goto LABEL_118;
    }
    __n128 result = (uint64_t)IPC::Decoder::decode<WTF::String>(v2, (uint64_t)&v57);
    int v21 = v58;
    if ((_BYTE)v58)
    {
      unint64_t v51 = v57;
      int v52 = 0;
LABEL_40:
      int v21 = 1;
      goto LABEL_64;
    }
LABEL_63:
    LOBYTE(v51) = 0;
LABEL_64:
    char v53 = v21;
    if (!v21) {
      goto LABEL_14;
    }
LABEL_65:
    uint64_t v5 = v55;
    if (!v55)
    {
      __break(1u);
      goto LABEL_126;
    }
    if ((unint64_t)v54 + 1 < 2)
    {
LABEL_67:
      *a2 = 0;
      a2[8] = 0;
      int v17 = 1;
      goto LABEL_68;
    }
    uint64_t v30 = v56;
    if (v56
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&v56),
          (uint64_t v30 = v56) != 0))
    {
      int v31 = *(_DWORD *)(v30 - 8);
    }
    else
    {
      int v31 = 0;
    }
    unsigned int v32 = *((_DWORD *)v54 + 4);
    if (v32 >= 0x100) {
      unsigned int v33 = v32 >> 8;
    }
    else {
      unsigned int v33 = WTF::StringImpl::hashSlowCase(v54);
    }
    uint64_t v34 = 0;
    for (int i = 1; ; ++i)
    {
      unsigned int v36 = v33 & v31;
      uint64_t v37 = v30 + 24 * (v33 & v31);
      uint64_t v38 = *(WTF **)v37;
      if (*(void *)v37 == -1)
      {
        uint64_t v34 = v30 + 24 * v36;
        goto LABEL_92;
      }
      if (!v38) {
        break;
      }
      __n128 result = WTF::equal(v38, v54, v12);
      if (result) {
        goto LABEL_67;
      }
LABEL_92:
      unsigned int v33 = i + v36;
    }
    if (v34)
    {
      *(void *)uint64_t v34 = 0;
      *(void *)(v34 + 8) = 0;
      *(_DWORD *)(v34 + 16) = 0;
      --*(_DWORD *)(v30 - 16);
      uint64_t v37 = v34;
    }
    uint64_t v39 = v54;
    uint64_t v54 = 0;
    long long v40 = *(WTF::StringImpl **)v37;
    *(void *)uint64_t v37 = v39;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, v11);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
    }
    __n128 result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,unsigned long long,long long,BOOL,double>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v57, (uint64_t)&v51);
    uint64_t v11 = (WTF::StringImpl *)(v37 + 8);
    uint64_t v41 = *(unsigned int *)(v37 + 16);
    if (v41 == -1)
    {
      if (v58 == -1) {
        goto LABEL_107;
      }
LABEL_104:
      uint64_t v59 = v37 + 8;
      __n128 result = ((uint64_t (*)(uint64_t *))off_1EE9B5290[v58])(&v59);
      goto LABEL_105;
    }
    if (v58 != -1) {
      goto LABEL_104;
    }
    __n128 result = ((uint64_t (*)(uint64_t *, WTF::StringImpl *))off_1EE9B4C10[v41])(&v59, v11);
    *(_DWORD *)(v37 + 16) = -1;
LABEL_105:
    if (v58 != -1) {
      __n128 result = ((uint64_t (*)(uint64_t *, unint64_t *))off_1EE9B4C10[v58])(&v59, &v57);
    }
LABEL_107:
    uint64_t v42 = v56;
    if (v56) {
      int v43 = *(_DWORD *)(v56 - 12) + 1;
    }
    else {
      int v43 = 1;
    }
    *(_DWORD *)(v56 - 12) = v43;
    uint64_t v44 = (*(_DWORD *)(v42 - 16) + v43);
    unint64_t v45 = *(unsigned int *)(v42 - 4);
    if (v45 > 0x400)
    {
      if (v45 <= 2 * v44) {
LABEL_112:
      }
        __n128 result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&v56);
    }
    else if (3 * v45 <= 4 * v44)
    {
      goto LABEL_112;
    }
    int v17 = 0;
LABEL_68:
    if (v53 && v52 != -1) {
      __n128 result = ((uint64_t (*)(unint64_t *, unint64_t *))off_1EE9B4C10[v52])(&v57, &v51);
    }
LABEL_71:
    if (v55)
    {
      __n128 result = (uint64_t)v54;
      uint64_t v54 = 0;
      if (result)
      {
        if (*(_DWORD *)result != 2)
        {
          *(_DWORD *)result -= 2;
          break;
        }
        __n128 result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
        if (v17) {
          goto LABEL_122;
        }
LABEL_78:
        if (++v10 == v50)
        {
          uint64_t v46 = v56;
          goto LABEL_120;
        }
        continue;
      }
    }
    break;
  }
  if (!v17) {
    goto LABEL_78;
  }
LABEL_122:
  __n128 result = v56;
  if (v56) {
    return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v56, v11);
  }
  return result;
}

void sub_198942CD8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, int a13, int a14, char a15, WTF::StringImpl *a16, char a17, uint64_t a18, char a19, int a20,int a21,int a22,int a23,__int16 a24,char a25,char a26)
{
  if (a21 != -1) {
    ((void (*)(char *, char *))off_1EE9B4C10[a21])(&a26, &a19);
  }
  if (a15 && a13 != -1) {
    ((void (*)(char *, char *))off_1EE9B4C10[a13])(&a26, &a11);
  }
  if (a17)
  {
    unint64_t v27 = a16;
    a16 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, a2);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }
  if (a18) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a18, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    unsigned int v2 = *(_DWORD *)(v1 - 4);
    int v3 = *(_DWORD *)(v1 - 12);
    if (v2)
    {
      unsigned int v4 = v2 << (6 * v3 >= 2 * v2);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v2 = 0;
    int v3 = 0;
  }
  unsigned int v4 = 8;
LABEL_6:
  uint64_t result = WTF::fastMalloc((WTF *)(24 * v4 + 16));
  if (v4)
  {
    uint64_t v7 = v4;
    uint64_t v8 = result + 16;
    do
    {
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 16) = 0;
      v8 += 24;
      --v7;
    }
    while (v7);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v3;
  if (v2)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v2;
    while (1)
    {
      uint64_t v11 = (WTF::StringImpl **)(v1 + 24 * v9);
      uint64_t v12 = *v11;
      if (*v11 != (WTF::StringImpl *)-1)
      {
        if (v12)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            unsigned int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            unsigned int v18 = 0;
          }
          unsigned int v19 = *((_DWORD *)v12 + 4);
          if (v19 >= 0x100) {
            int v20 = v19 >> 8;
          }
          else {
            int v20 = WTF::StringImpl::hashSlowCase(v12);
          }
          int v21 = 0;
          do
          {
            unsigned int v22 = v20 & v18;
            unsigned int v23 = (WTF::StringImpl **)(v17 + 24 * (v20 & v18));
            int v20 = ++v21 + (v20 & v18);
          }
          while (*v23);
          uint64_t v24 = v17 + 24 * v22;
          unsigned int v27 = *(_DWORD *)(v24 + 16);
          uint64_t v26 = (_DWORD *)(v24 + 16);
          uint64_t v25 = v27;
          if (v27 == -1)
          {
            _DWORD *v26 = v25;
            char *v23 = 0;
          }
          else
          {
            ((void (*)(char *, uint64_t))off_1EE9B4C10[v25])(&v37, v17 + 24 * v22 + 8);
            uint64_t v29 = *v23;
            _DWORD *v26 = -1;
            char *v23 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2) {
                WTF::StringImpl::destroy(v29, v28);
              }
              else {
                *(_DWORD *)v29 -= 2;
              }
            }
          }
          uint64_t v30 = *v11;
          WTF::StringImpl *v11 = 0;
          char *v23 = v30;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,unsigned long long,long long,BOOL,double>,(std::__variant_detail::_Trait)1>::__move_constructor(v17 + 24 * v22 + 8, v1 + 24 * v9 + 8);
          uint64_t v31 = v1 + 24 * v9;
          unsigned int v34 = *(_DWORD *)(v31 + 16);
          unsigned int v33 = (_DWORD *)(v31 + 16);
          uint64_t v32 = v34;
          if (v34 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9B4C10[v32])(&v38, v1 + 24 * v9 + 8);
          }
          _DWORD *v33 = -1;
          uint64_t v12 = *v11;
          WTF::StringImpl *v11 = 0;
          if (!v12) {
            goto LABEL_39;
          }
          if (*(_DWORD *)v12 == 2) {
            goto LABEL_38;
          }
          *(_DWORD *)v12 -= 2;
        }
        else
        {
          uint64_t v13 = v1 + 24 * v9;
          unsigned int v16 = *(_DWORD *)(v13 + 16);
          unsigned int v15 = (_DWORD *)(v13 + 16);
          uint64_t v14 = v16;
          if (v16 != -1)
          {
            ((void (*)(char *, uint64_t))off_1EE9B4C10[v14])(&v36, v1 + 24 * v9 + 8);
            uint64_t v12 = *v11;
          }
          *unsigned int v15 = -1;
          WTF::StringImpl *v11 = 0;
          if (!v12) {
            goto LABEL_39;
          }
          if (*(_DWORD *)v12 == 2)
          {
LABEL_38:
            WTF::StringImpl::destroy(v12, v6);
            goto LABEL_39;
          }
          *(_DWORD *)v12 -= 2;
        }
      }
LABEL_39:
      if (++v9 == v10) {
        return WTF::fastFree((WTF *)(v1 - 16), v6);
      }
    }
  }
  if (v1) {
    return WTF::fastFree((WTF *)(v1 - 16), v6);
  }
  return result;
}

void sub_19894303C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  unsigned int v4 = *v2;
  *unsigned int v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,unsigned long long,long long,BOOL,double>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1EE9B5268[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 8) = v3;
  }
  return a1;
}

void sub_1989430D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v14 = *(unsigned int *)(v12 + 8);
  if (v14 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9B4C10[v14])(&a12, v12);
  }
  *(_DWORD *)(v12 + 8) = -1;
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEyxbdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSP_EEEDcSH_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEyxbdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSP_EEEDcSH_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEyxbdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSP_EEEDcSH_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEyxbdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSP_EEEDcSH_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEyxbdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSP_EEEDcSH_DpT0_(uint64_t a1, void *a2, double *a3)
{
  double result = *a3;
  *a2 = *(void *)a3;
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEyxbdEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSG_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSO_EEEDcSG_DpT0_(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *result;
  uint64_t v5 = *(unsigned int *)(*result + 8);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    double result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1EE9B4C10[v5])(&v7, v4);
LABEL_7:
    uint64_t v6 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v6;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }

  return WTF::String::operator=(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEyxbdEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSG_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSO_EEEDcSG_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, uint64_t))off_1EE9B4C10[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEyxbdEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSG_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSO_EEEDcSG_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 != -1)
  {
    if (v5 == 2)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, uint64_t))off_1EE9B4C10[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 8) = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEyxbdEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSG_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSO_EEEDcSG_DpT0_(uint64_t result, unsigned char *a2, unsigned char *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 != -1)
  {
    if (v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, uint64_t))off_1EE9B4C10[v5])(&v6, v4);
  }
  *(unsigned char *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 8) = 3;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEyxbdEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSG_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSO_EEEDcSG_DpT0_(uint64_t *a1, void *a2, double *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 8);
  if (v5 != -1)
  {
    if (v5 == 4)
    {
      double result = *a3;
      *a2 = *(void *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1EE9B4C10[v5])(&v7, v4);
  }
  double result = *a3;
  *(double *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 8) = 4;
  return result;
}

WTF *IPC::ArgumentCoder<std::optional<WebCore::NowPlayingInfoArtwork>,void>::encode<IPC::Encoder,std::optional<WebCore::NowPlayingInfoArtwork> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 24);
  double result = (WTF *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19894345CLL);
    }
    *(unsigned char *)double result = 1;
    if (*(unsigned char *)(a2 + 24))
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
      return IPC::ArgumentCoder<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>,void>::encode<IPC::Encoder,WebCore::Image>(a1, (WebCore::Image **)(a2 + 16));
    }
    else
    {
      char v7 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      return (WTF *)IPC::Decoder::decode<char>(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19894347CLL);
    }
    *(unsigned char *)double result = 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<char>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<char,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<char,void>::decode<IPC::Decoder>(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7 && v1) {
      (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    }
    goto LABEL_5;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = (uint64_t)(v4 + 1);
  if (!v2)
  {
LABEL_5:
    int v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  int v5 = *v4;
  int v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t *IPC::Encoder::operator<<<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix> const&>(IPC::Encoder *a1, uint64_t a2)
{
  char v8 = *(_DWORD *)(a2 + 80);
  IPC::Encoder::operator<<<BOOL>(a1, &v8);
  if (v8 == 2)
  {
    if (*(_DWORD *)(a2 + 80) == 2)
    {
      for (uint64_t i = 0; i != 80; i += 4)
        IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + i));
      return (uint64_t *)a1;
    }
  }
  else if (v8 == 1)
  {
    if (*(_DWORD *)(a2 + 80) == 1)
    {
      IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)a2);
      IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 4));
      return (uint64_t *)a1;
    }
  }
  else
  {
    if (v8) {
      return (uint64_t *)a1;
    }
    if (!*(_DWORD *)(a2 + 80))
    {
      IPC::ArgumentCoder<WebCore::GraphicsDropShadow,void>::encode(a1, a2);
      return (uint64_t *)a1;
    }
  }
  int v6 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
  return IPC::ArgumentCoder<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix> const&>(v6, v7);
}

uint64_t *IPC::ArgumentCoder<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix> const&>(uint64_t *result, _DWORD *a2)
{
  int v2 = a2[20];
  unint64_t v3 = result[2];
  if (v3 >= result[1])
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v3++) = v2;
    result[2] = v3;
  }
  if (v2 == 2)
  {
    if (a2[20] != 2) {
      goto LABEL_28;
    }
    for (uint64_t i = 0; i != 20; ++i)
    {
      unint64_t v5 = *result + v3;
      unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      BOOL v7 = v6 >= v5;
      unint64_t v8 = v6 - v5;
      if (v7)
      {
        unint64_t v9 = v8 + v3;
        unint64_t v10 = v8 + v3 + 4;
        if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > result[1])
        {
          result[1] = 0;
        }
        else
        {
          *(_DWORD *)(*result + v9) = a2[i];
          result[2] = v10;
          unint64_t v3 = v10;
        }
      }
    }
  }
  else
  {
    if (v2 != 1)
    {
      if ((_BYTE)v2) {
        return result;
      }
      if (!a2[20])
      {
        return IPC::ArgumentCoder<WebCore::GraphicsDropShadow,void>::encode(result, (uint64_t)a2);
      }
LABEL_28:
      uint64_t v12 = std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)IPC::Decoder::decode<WebCore::GraphicsDropShadow>(v12);
    }
    if (a2[20] != 1) {
      goto LABEL_28;
    }
    return IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(result, a2);
  }
  return result;
}

unsigned int *IPC::Decoder::decode<WebCore::GraphicsDropShadow>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WebCore::FloatPoint>(a2);
  char v6 = v5;
  unint64_t v7 = a2[1];
  unint64_t v8 = *a2;
  unint64_t v9 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v7 >= v9 && v7 - v9 > 3)
  {
    uint64_t v11 = (int *)(v8 + v9);
    a2[2] = (unint64_t)(v11 + 1);
    if (v8)
    {
      int v12 = 0;
      int v13 = *v11;
      goto LABEL_8;
    }
    unint64_t v36 = v7;
    unint64_t v37 = 0;
  }
  else
  {
    unint64_t v36 = 0;
    unint64_t v37 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v38 = a2[3];
    if (v38)
    {
      if (v7)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v38 + 16))(v38, v8, v7);
        unint64_t v37 = *a2;
        unint64_t v36 = a2[1];
      }
      else
      {
        unint64_t v36 = 0;
        unint64_t v37 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  unint64_t v39 = a2[3];
  if (v39 && v36) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v39 + 16))(v39, v37);
  }
  int v13 = 0;
  int v12 = 1;
LABEL_8:
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a2, &v44);
  unint64_t v14 = a2[1];
  if (!v45)
  {
    unint64_t v30 = 0;
    unint64_t v31 = 0;
    unint64_t v32 = *a2;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v33 = a2[3];
    if (!v33) {
      goto LABEL_37;
    }
    if (!v14)
    {
      unint64_t v30 = 0;
      unint64_t v31 = 0;
LABEL_37:
      unint64_t v14 = 0;
      unsigned int v15 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v34 = a2[3];
      if (v34)
      {
        if (v30)
        {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v34 + 16))(v34, v31, v30);
          unsigned int v15 = (char *)*a2;
          unint64_t v14 = a2[1];
        }
        else
        {
          unint64_t v14 = 0;
          unsigned int v15 = 0;
        }
      }
      goto LABEL_38;
    }
    (*(void (**)(unint64_t, unint64_t))(*(void *)v33 + 16))(v33, v32);
    unint64_t v14 = a2[1];
  }
  unsigned int v15 = (char *)*a2;
  unint64_t v16 = a2[2] - *a2;
  if (v14 <= v16)
  {
    unint64_t v30 = 0;
    unint64_t v41 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v31 = 0;
    if (v41 && v14)
    {
      (*(void (**)(unint64_t))(*(void *)v41 + 16))(v41);
      unint64_t v31 = *a2;
      unint64_t v30 = a2[1];
    }
    goto LABEL_37;
  }
  uint64_t v17 = &v15[v16];
  uint64_t v18 = (uint64_t)&v15[v16 + 1];
  a2[2] = v18;
  if (!v15)
  {
    unint64_t v30 = v14;
    unint64_t v31 = 0;
    goto LABEL_37;
  }
  unsigned int v19 = *v17;
  if (v19 < 2)
  {
    int v20 = 0;
    BOOL v21 = v19 != 0;
    goto LABEL_13;
  }
LABEL_38:
  *a2 = 0;
  a2[1] = 0;
  unint64_t v35 = a2[3];
  if (v35 && v14) {
    (*(void (**)(unint64_t, char *))(*(void *)v35 + 16))(v35, v15);
  }
  IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  BOOL v21 = 0;
  unint64_t v14 = a2[1];
  uint64_t v18 = a2[2];
  int v20 = 1;
  unsigned int v15 = (char *)*a2;
LABEL_13:
  unint64_t v22 = ((v18 + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v15;
  if (v14 >= v22 && v14 - v22 > 3)
  {
    uint64_t v24 = &v15[v22];
    a2[2] = (unint64_t)&v15[v22 + 4];
    unint64_t v25 = v14;
    unint64_t v26 = (unint64_t)v15;
    if (v15)
    {
      int v27 = 0;
      int v28 = *(_DWORD *)v24;
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v25 = 0;
    unint64_t v26 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v40 = a2[3];
    if (v40)
    {
      if (v14)
      {
        (*(void (**)(unint64_t))(*(void *)v40 + 16))(v40);
        unint64_t v26 = *a2;
        unint64_t v25 = a2[1];
      }
      else
      {
        unint64_t v25 = 0;
        unint64_t v26 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (unsigned int *)a2[3];
  if (!result
    || !v25
    || (uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, unint64_t, unint64_t))(*(void *)result + 16))(result, v26, v25), (v25 = *a2) == 0))
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
    goto LABEL_26;
  }
  int v28 = 0;
  int v27 = 1;
LABEL_20:
  if (v6)
  {
    if (!v12)
    {
      unint64_t v25 = v45;
      if (v45)
      {
        WebCore::Color::Color();
        if (!v20)
        {
          LOBYTE(v43) = v21;
          if (!v27)
          {
            HIDWORD(v43) = v28;
            *(void *)a1 = v4;
            *(_DWORD *)(a1 + 8) = v13;
            uint64_t result = (unsigned int *)WebCore::Color::Color();
            *(void *)(a1 + 24) = v43;
            *(unsigned char *)(a1 + 32) = 1;
            if ((*(void *)v42 & 0x8000000000000) != 0)
            {
              uint64_t result = (unsigned int *)(*(void *)v42 & 0xFFFFFFFFFFFFLL);
              if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v42 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
              {
                atomic_store(1u, result);
                uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v15);
              }
            }
LABEL_26:
            if (!v45) {
              goto LABEL_28;
            }
            unint64_t v25 = v44;
            if ((v44 & 0x8000000000000) == 0) {
              goto LABEL_28;
            }
            goto LABEL_32;
          }
        }
      }
    }
  }
  __break(1u);
LABEL_32:
  uint64_t result = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
  if (atomic_fetch_add((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v15);
  }
LABEL_28:
  if (!*(unsigned char *)(a1 + 32)) {
    return (unsigned int *)IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

void sub_198943BFC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::optional<WebCore::Color>::~optional((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

unsigned int *IPC::Decoder::decode<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>(unsigned int *result, unint64_t *a2)
{
  unint64_t v3 = result;
  unint64_t v4 = a2[2];
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v98 = 0;
    unint64_t v99 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (unsigned int *)a2[3];
    if (!result) {
      goto LABEL_128;
    }
    goto LABEL_140;
  }
  unint64_t v8 = (unsigned __int8 *)(v5 + v7);
  uint64_t v9 = v5 + v7 + 1;
  a2[2] = v9;
  if (!v5)
  {
    unint64_t v98 = v6;
    unint64_t v99 = 0;
    goto LABEL_128;
  }
  unsigned int v10 = *v8;
  if (v10 >= 3)
  {
LABEL_4:
    *(unsigned char *)unint64_t v3 = 0;
    *((unsigned char *)v3 + 88) = 0;
LABEL_5:
    unint64_t v11 = *a2;
    unint64_t v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (unsigned int *)a2[3];
    if (result)
    {
      if (v12) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *, unint64_t))(*(void *)result + 16))(result, v11);
      }
    }
    return result;
  }
  if (v10)
  {
    if (v10 == 1)
    {
      uint64_t result = (unsigned int *)IPC::Decoder::decode<WebCore::FloatPoint>(a2);
      if (*a2)
      {
        if (v13)
        {
          *(void *)unint64_t v3 = result;
          int v14 = 1;
          v3[20] = 1;
          goto LABEL_119;
        }
        goto LABEL_139;
      }
      unint64_t v101 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t result = (unsigned int *)a2[3];
      if (!result) {
        goto LABEL_126;
      }
    }
    else
    {
      unint64_t v16 = ((v9 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v5;
      if (v6 >= v16 && v6 - v16 > 3)
      {
        uint64_t v18 = (unsigned int *)(v5 + v16);
        a2[2] = (unint64_t)(v18 + 1);
        unsigned int v19 = *v18;
        unint64_t v20 = (((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v5;
        if (v6 >= v20 && v6 - v20 > 3)
        {
          unint64_t v22 = (unsigned int *)(v5 + v20);
          a2[2] = (unint64_t)(v22 + 1);
          unsigned int v23 = *v22;
          unint64_t v24 = (((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v5;
          if (v6 >= v24 && v6 - v24 > 3)
          {
            unint64_t v26 = (unsigned int *)(v5 + v24);
            a2[2] = (unint64_t)(v26 + 1);
            unsigned int v27 = *v26;
            unint64_t v28 = (((unint64_t)v26 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v5;
            if (v6 >= v28 && v6 - v28 > 3)
            {
              unint64_t v30 = (unsigned int *)(v5 + v28);
              a2[2] = (unint64_t)(v30 + 1);
              unsigned int v31 = *v30;
              unint64_t v32 = (((unint64_t)v30 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v5;
              if (v6 >= v32 && v6 - v32 > 3)
              {
                unint64_t v34 = (unsigned int *)(v5 + v32);
                a2[2] = (unint64_t)(v34 + 1);
                unsigned int v35 = *v34;
                unint64_t v36 = (((unint64_t)v34 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v5;
                if (v6 >= v36 && v6 - v36 > 3)
                {
                  unint64_t v38 = (unsigned int *)(v5 + v36);
                  a2[2] = (unint64_t)(v38 + 1);
                  unsigned int v39 = *v38;
                  unint64_t v40 = (((unint64_t)v38 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v5;
                  if (v6 >= v40 && v6 - v40 > 3)
                  {
                    uint64_t v42 = (unsigned int *)(v5 + v40);
                    a2[2] = (unint64_t)(v42 + 1);
                    unsigned int v43 = *v42;
                    unint64_t v44 = (((unint64_t)v42 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v5;
                    if (v6 >= v44 && v6 - v44 > 3)
                    {
                      uint64_t v46 = (unsigned int *)(v5 + v44);
                      a2[2] = (unint64_t)(v46 + 1);
                      unsigned int v47 = *v46;
                      unint64_t v48 = (((unint64_t)v46 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v5;
                      if (v6 >= v48 && v6 - v48 > 3)
                      {
                        int v50 = (unsigned int *)(v5 + v48);
                        a2[2] = (unint64_t)(v50 + 1);
                        unsigned int v51 = *v50;
                        unint64_t v52 = (((unint64_t)v50 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v5;
                        if (v6 >= v52 && v6 - v52 > 3)
                        {
                          uint64_t v54 = (unsigned int *)(v5 + v52);
                          a2[2] = (unint64_t)(v54 + 1);
                          unsigned int v55 = *v54;
                          unint64_t v56 = (((unint64_t)v54 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v5;
                          if (v6 >= v56 && v6 - v56 > 3)
                          {
                            int v58 = (unsigned int *)(v5 + v56);
                            a2[2] = (unint64_t)(v58 + 1);
                            unsigned int v59 = *v58;
                            unint64_t v60 = (((unint64_t)v58 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v5;
                            if (v6 >= v60 && v6 - v60 > 3)
                            {
                              unsigned __int8 v62 = (unsigned int *)(v5 + v60);
                              a2[2] = (unint64_t)(v62 + 1);
                              unsigned int v63 = *v62;
                              unint64_t v64 = (((unint64_t)v62 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v5;
                              if (v6 >= v64 && v6 - v64 > 3)
                              {
                                int v66 = (unsigned int *)(v5 + v64);
                                a2[2] = (unint64_t)(v66 + 1);
                                unsigned int v67 = *v66;
                                unint64_t v68 = (((unint64_t)v66 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v5;
                                if (v6 >= v68 && v6 - v68 > 3)
                                {
                                  uint64_t v70 = (unsigned int *)(v5 + v68);
                                  a2[2] = (unint64_t)(v70 + 1);
                                  unsigned int v71 = *v70;
                                  unint64_t v72 = (((unint64_t)v70 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v5;
                                  if (v6 >= v72 && v6 - v72 > 3)
                                  {
                                    uint64_t v74 = (unsigned int *)(v5 + v72);
                                    a2[2] = (unint64_t)(v74 + 1);
                                    unsigned int v75 = *v74;
                                    unint64_t v76 = (((unint64_t)v74 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v5;
                                    if (v6 >= v76 && v6 - v76 > 3)
                                    {
                                      char v78 = (unsigned int *)(v5 + v76);
                                      a2[2] = (unint64_t)(v78 + 1);
                                      unsigned int v79 = *v78;
                                      unint64_t v80 = (((unint64_t)v78 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v5;
                                      if (v6 >= v80 && v6 - v80 > 3)
                                      {
                                        char v82 = (unsigned int *)(v5 + v80);
                                        a2[2] = (unint64_t)(v82 + 1);
                                        unsigned int v83 = *v82;
                                        unint64_t v84 = (((unint64_t)v82 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v5;
                                        if (v6 >= v84 && v6 - v84 > 3)
                                        {
                                          char v86 = (unsigned int *)(v5 + v84);
                                          a2[2] = (unint64_t)(v86 + 1);
                                          unsigned int v87 = *v86;
                                          unint64_t v88 = (((unint64_t)v86 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v5;
                                          if (v6 >= v88 && v6 - v88 > 3)
                                          {
                                            v90 = (unsigned int *)(v5 + v88);
                                            a2[2] = (unint64_t)(v90 + 1);
                                            unint64_t v91 = (((unint64_t)v90 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v5;
                                            if (v6 >= v91 && v6 - v91 > 3)
                                            {
                                              unsigned int v93 = *v90;
                                              unsigned int v94 = *(_DWORD *)(((unint64_t)v90 + 7) & 0xFFFFFFFFFFFFFFFCLL);
                                              a2[2] = (((unint64_t)v90 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                                              unsigned int *result = v19;
                                              result[1] = v23;
                                              result[2] = v27;
                                              result[3] = v31;
                                              result[4] = v35;
                                              result[5] = v39;
                                              result[6] = v43;
                                              result[7] = v47;
                                              result[8] = v51;
                                              result[9] = v55;
                                              result[10] = v59;
                                              result[11] = v63;
                                              result[12] = v67;
                                              result[13] = v71;
                                              result[14] = v75;
                                              result[15] = v79;
                                              result[16] = v83;
                                              result[17] = v87;
                                              result[18] = v93;
                                              result[19] = v94;
                                              int v14 = 1;
                                              result[20] = 2;
                                              goto LABEL_119;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      *a2 = 0;
      a2[1] = 0;
      unint64_t v95 = a2[3];
      if (v95)
      {
        (*(void (**)(unint64_t))(*(void *)v95 + 16))(v95);
        unint64_t v102 = *a2;
        unint64_t v103 = a2[1];
        unint64_t v104 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v104)
        {
          if (v103) {
            (*(void (**)(unint64_t, unint64_t))(*(void *)v104 + 16))(v104, v102);
          }
        }
      }
      unint64_t v96 = *a2;
      unint64_t v97 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t result = (unsigned int *)a2[3];
      if (!result || !v97) {
        goto LABEL_126;
      }
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, unint64_t))(*(void *)result + 16))(result, v96);
      if (*a2)
      {
LABEL_139:
        __break(1u);
LABEL_140:
        if (v6)
        {
          (*(void (**)(unsigned int *))(*(void *)result + 16))(result);
          unint64_t v99 = *a2;
          unint64_t v98 = a2[1];
        }
        else
        {
          unint64_t v98 = 0;
          unint64_t v99 = 0;
        }
LABEL_128:
        *a2 = 0;
        a2[1] = 0;
        unint64_t v100 = a2[3];
        if (v100 && v98) {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v100 + 16))(v100, v99, v98);
        }
        goto LABEL_4;
      }
      unint64_t v101 = a2[1];
      uint64_t result = (unsigned int *)a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (!result)
      {
LABEL_126:
        int v14 = 0;
        *(unsigned char *)unint64_t v3 = 0;
LABEL_119:
        *((unsigned char *)v3 + 88) = v14;
        if (v14) {
          return result;
        }
        goto LABEL_5;
      }
    }
    if (v101) {
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, void))(*(void *)result + 16))(result, 0);
    }
    goto LABEL_126;
  }
  uint64_t result = IPC::Decoder::decode<WebCore::GraphicsDropShadow>((uint64_t)&v105, a2);
  if (v109)
  {
    *(void *)unint64_t v3 = v105;
    v3[2] = v106;
    uint64_t result = (unsigned int *)WebCore::Color::Color();
    *((void *)v3 + 3) = v108;
    v3[20] = 0;
    *((unsigned char *)v3 + 88) = 1;
    if (v109)
    {
      if ((v107 & 0x8000000000000) != 0)
      {
        uint64_t result = (unsigned int *)(v107 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v107 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result);
          uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v15);
        }
      }
    }
  }
  else
  {
    *(unsigned char *)unint64_t v3 = 0;
    *((unsigned char *)v3 + 88) = 0;
  }
  if (!*((unsigned char *)v3 + 88)) {
    goto LABEL_5;
  }
  return result;
}

void sub_198944280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (*(unsigned char *)(v14 + 88))
  {
    uint64_t v16 = *(unsigned int *)(v14 + 80);
    if (v16 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B40F0[v16])(&a10, v14);
    }
    *(_DWORD *)(v14 + 80) = -1;
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<false,std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 16 * v5;
    do
    {
      unint64_t result = IPC::Encoder::operator<<<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType> const&>(a1, v6);
      v6 += 16;
      v7 -= 16;
    }
    while (v7);
  }
  return result;
}

uint64_t IPC::Encoder::operator<<<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType> const&>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  char v4 = *(unsigned char *)(a2 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = v4;
    return (uint64_t)a1;
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

IPC::Decoder *IPC::Decoder::decode<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v21);
  if (v22)
  {
    unint64_t v5 = *((void *)a2 + 1);
    uint64_t v6 = *(WTF::StringImpl **)a2;
    unint64_t v7 = *((void *)a2 + 2) - *(void *)a2;
    if (v5 <= v7)
    {
      unint64_t v10 = 0;
      unint64_t v11 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v12 = *((void *)a2 + 3);
      if (v12)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
          unint64_t v11 = *(WTF::StringImpl **)a2;
          unint64_t v10 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v10 = 0;
          unint64_t v11 = 0;
        }
      }
    }
    else
    {
      unint64_t v8 = (unsigned __int8 *)v6 + v7;
      *((void *)a2 + 2) = v8 + 1;
      if (v6)
      {
        unsigned int v9 = *v8;
        if (v9 < 2)
        {
          *(void *)a1 = v21;
          *(unsigned char *)(a1 + 8) = v9 != 0;
          *(unsigned char *)(a1 + 16) = 1;
          return result;
        }
        goto LABEL_10;
      }
      unint64_t v10 = v5;
      unint64_t v11 = 0;
    }
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v13 = *((void *)a2 + 3);
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t v6 = *(WTF::StringImpl **)a2;
        unint64_t v5 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
      }
    }
LABEL_10:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v14 + 16))(v14, v6);
        uint64_t v19 = *((void *)a2 + 3);
        uint64_t v6 = *(WTF::StringImpl **)a2;
        uint64_t v20 = *((void *)a2 + 1);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        if (v19)
        {
          if (v20) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v19 + 16))(v19, v6);
          }
        }
      }
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    if (v22)
    {
      unsigned int v15 = v21;
      BOOL v21 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v6);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
    goto LABEL_16;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
LABEL_16:
  uint64_t v16 = *(WTF::StringImpl **)a2;
  uint64_t v17 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (IPC::Decoder *)*((void *)a2 + 3);
  if (result) {
    BOOL v18 = v17 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18) {
    return (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, WTF::StringImpl *))(*(void *)result + 16))(result, v16);
  }
  return result;
}

void sub_1989445F0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  std::optional<WebKit::WebPageGroupData>::~optional(v10, a2);
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>>(uint64_t a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  int v5 = v4 + 1;
  uint64_t v6 = *(void *)a1 + 16 * v4;
  uint64_t v7 = *(void *)result;
  *(void *)unint64_t result = 0;
  *(void *)uint64_t v6 = v7;
  *(unsigned char *)(v6 + 8) = *(unsigned char *)(result + 8);
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

unsigned int *WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    unint64_t v3 = result;
    unint64_t v4 = result[3];
    if (v4 > a2)
    {
      unint64_t result = (unsigned int *)WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct((WTF::StringImpl *)(*(void *)result + 16 * a2), (WTF::StringImpl *)(*(void *)result + 16 * v4));
      v3[3] = a2;
      LODWORD(v4) = a2;
    }
    int v5 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        unint64_t result = (unsigned int *)WTF::fastRealloc(v5, (void *)(16 * a2));
        *(void *)unint64_t v3 = result;
        return result;
      }
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      unint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = a2;
      *(void *)unint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        unint64_t result = (unsigned int *)memcpy(result, v5, 16 * v4);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)unint64_t v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

WTF *IPC::ArgumentCoder<std::optional<WebCore::TextIndicatorData>,void>::encode<IPC::Encoder,std::optional<WebCore::TextIndicatorData> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 112);
  unint64_t result = (WTF *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198944828);
    }
    *(unsigned char *)unint64_t result = 1;
    if (*(unsigned char *)(a2 + 112))
    {
      return (WTF *)IPC::ArgumentCoder<WebCore::TextIndicatorData,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v7 = (unint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebCore::TextIndicatorData>,void>::decode<IPC::Decoder>(v7, v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198944848);
    }
    *(unsigned char *)unint64_t result = 0;
  }
  return result;
}

WTF *IPC::ArgumentCoder<std::optional<WebCore::TextIndicatorData>,void>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v3 = a1[1];
  unint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v15 = a1[3];
    if (v15)
    {
      uint64_t v19 = a1;
      if (v3)
      {
        (*(void (**)(unint64_t))(*(void *)v15 + 16))(v15);
        a1 = v19;
        unint64_t v14 = *v19;
        unint64_t v13 = v19[1];
      }
      else
      {
        unint64_t v13 = 0;
        unint64_t v14 = 0;
      }
    }
    goto LABEL_25;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (unint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v13 = v3;
    unint64_t v14 = 0;
LABEL_25:
    unint64_t v3 = 0;
    unint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v16 = a1[3];
    if (v16)
    {
      BOOL v18 = a1;
      if (v13)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14, v13);
        a1 = v18;
        unint64_t v4 = *v18;
        unint64_t v3 = v18[1];
      }
      else
      {
        unint64_t v3 = 0;
        unint64_t v4 = 0;
      }
    }
    goto LABEL_26;
  }
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
LABEL_26:
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (WTF *)a1[3];
    if (result && v3) {
      unint64_t result = (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(void *)result + 16))(result, v4);
    }
    goto LABEL_27;
  }
  if (v7)
  {
    unint64_t result = (WTF *)IPC::Decoder::decode<WebCore::TextIndicatorData>(a1, v20);
    if (v27)
    {
      unint64_t result = (WTF *)WebCore::TextIndicatorData::TextIndicatorData((uint64_t)a2, v20);
      a2[112] = 1;
      goto LABEL_8;
    }
LABEL_27:
    *a2 = 0;
    a2[120] = 0;
    return result;
  }
  LOBYTE(v20[0]) = 0;
  char v27 = 0;
  unint64_t result = (WTF *)std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v20);
LABEL_8:
  a2[120] = 1;
  if (v27)
  {
    if ((v26 & 0x8000000000000) != 0)
    {
      uint64_t v17 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v9);
      }
    }
    uint64_t v10 = v25;
    unint64_t v25 = 0;
    if (v10)
    {
      if (v10[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
      }
      else {
        --v10[2];
      }
    }
    unint64_t v11 = v24;
    unint64_t v24 = 0;
    if (v11)
    {
      if (v11[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v11 + 8))(v11);
      }
      else {
        --v11[2];
      }
    }
    uint64_t v12 = v23;
    unsigned int v23 = 0;
    if (v12)
    {
      if (v12[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
      }
      else {
        --v12[2];
      }
    }
    unint64_t result = v21;
    if (v21)
    {
      BOOL v21 = 0;
      int v22 = 0;
      return (WTF *)WTF::fastFree(result, v9);
    }
  }
  return result;
}

void sub_198944B18(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a24)
  {
    if ((a22 & 0x8000000000000) != 0)
    {
      unint64_t v25 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, a2);
      }
    }
    if (a21)
    {
      if (a21[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a21 + 8))(a21);
      }
      else {
        --a21[2];
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a16) {
      WTF::fastFree(a16, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = 8 * v5;
    do
    {
      uint64_t v8 = *v6++;
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebCore::FilterOperation,void>::encode(a1, v8);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

unsigned int *IPC::Decoder::decode<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>(uint64_t a1, uint64_t *a2)
{
  LOWORD(v65.m_colorAndFlags) = 0;
  unint64_t result = (unsigned int *)IPC::Decoder::operator>><unsigned char>(a2, &v65);
  int m_colorAndFlags_low = LOBYTE(v65.m_colorAndFlags);
  if (BYTE1(v65.m_colorAndFlags)) {
    BOOL v6 = LOBYTE(v65.m_colorAndFlags) >= 6u;
  }
  else {
    BOOL v6 = 1;
  }
  LOBYTE(v7) = !v6;
  if (v6) {
    goto LABEL_111;
  }
  while (1)
  {
    uint64_t v8 = *a2;
    if (!*a2) {
      goto LABEL_48;
    }
    char v9 = v7 ^ 1;
    if (m_colorAndFlags_low) {
      char v10 = 1;
    }
    else {
      char v10 = v7 ^ 1;
    }
    if ((v10 & 1) == 0)
    {
      unint64_t v11 = a2[1];
      unint64_t v12 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v8;
      LODWORD(v7) = v11 < v12 || v11 - v12 < 8;
      if (v7 == 1)
      {
        *a2 = 0;
        a2[1] = 0;
        uint64_t v15 = 0;
        uint64_t v48 = a2[3];
        if (v48)
        {
          if (v11)
          {
            (*(void (**)(uint64_t))(*(void *)v48 + 16))(v48);
            uint64_t v49 = *a2;
            uint64_t v50 = a2[1];
            uint64_t v51 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            if (v51)
            {
              if (v50) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v51 + 16))(v51, v49);
              }
            }
          }
        }
      }
      else
      {
        unint64_t v14 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v15 = *v14;
        a2[2] = (uint64_t)(v14 + 1);
      }
      unsigned __int16 v16 = IPC::Decoder::decode<WebCore::FilterOperation::Type>(a2);
      if (!*a2) {
        goto LABEL_46;
      }
      if (v16 <= 0xFFu) {
        goto LABEL_110;
      }
      char v17 = v16;
      if (v16 - 1 > 3)
      {
LABEL_46:
        uint64_t v25 = a2[1];
LABEL_47:
        *a2 = 0;
        a2[1] = 0;
        unint64_t result = (unsigned int *)a2[3];
        if (!result || !v25) {
          goto LABEL_48;
        }
        unsigned int v43 = *(uint64_t (**)(void))(*(void *)result + 16);
LABEL_109:
        unint64_t result = (unsigned int *)v43();
        if (!*a2) {
          goto LABEL_48;
        }
        goto LABEL_110;
      }
      if (!v7)
      {
        unint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
        result[2] = 1;
        *((unsigned char *)result + 12) = v17;
        uint64_t v18 = MEMORY[0x1E4FB6BA8] + 16;
LABEL_43:
        *(void *)unint64_t result = v18;
        *((void *)result + 2) = v15;
LABEL_44:
        if (*a2)
        {
          *(void *)a1 = result;
LABEL_98:
          *(unsigned char *)(a1 + 8) = 1;
          goto LABEL_99;
        }
        *(unsigned char *)a1 = 0;
        *(unsigned char *)(a1 + 8) = 0;
        goto LABEL_122;
      }
      goto LABEL_110;
    }
    if (m_colorAndFlags_low != 1) {
      char v9 = 1;
    }
    if ((v9 & 1) == 0)
    {
      unint64_t v19 = a2[1];
      unint64_t v20 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v8;
      BOOL v22 = v19 < v20 || v19 - v20 < 8;
      if (v22)
      {
        *a2 = 0;
        a2[1] = 0;
        uint64_t v15 = 0;
        uint64_t v53 = a2[3];
        if (v53)
        {
          if (v19)
          {
            (*(void (**)(uint64_t))(*(void *)v53 + 16))(v53);
            uint64_t v54 = *a2;
            uint64_t v55 = a2[1];
            uint64_t v56 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            if (v56)
            {
              if (v55) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v56 + 16))(v56, v54);
              }
            }
          }
        }
      }
      else
      {
        unsigned int v23 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v15 = *v23;
        a2[2] = (uint64_t)(v23 + 1);
      }
      unsigned __int16 v24 = IPC::Decoder::decode<WebCore::FilterOperation::Type>(a2);
      if (!*a2) {
        goto LABEL_46;
      }
      LOBYTE(v7) = v24;
      if (v24 <= 0xFFu) {
        goto LABEL_110;
      }
      if (v24 > 9u || ((1 << v24) & 0x3A0) == 0) {
        goto LABEL_46;
      }
      if (!v22)
      {
        unint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
        result[2] = 1;
        *((unsigned char *)result + 12) = v7;
        uint64_t v18 = MEMORY[0x1E4FB6BB0] + 16;
        goto LABEL_43;
      }
      goto LABEL_110;
    }
    char v26 = v7 ^ 1;
    if (m_colorAndFlags_low == 2) {
      char v27 = v7 ^ 1;
    }
    else {
      char v27 = 1;
    }
    if ((v27 & 1) == 0)
    {
      IPC::Decoder::decode<WebCore::Length>((uint64_t)&v65, a2);
      unint64_t v7 = *a2;
      if (!*a2)
      {
        unint64_t result = 0;
        goto LABEL_93;
      }
      if (!v66) {
        goto LABEL_110;
      }
      LODWORD(v67) = 0;
      int v28 = BYTE4(v65.m_colorAndFlags);
      BYTE4(v67) = BYTE4(v65.m_colorAndFlags);
      char v29 = BYTE5(v65.m_colorAndFlags);
      *(_WORD *)((char *)&v67 + 5) = BYTE5(v65.m_colorAndFlags);
      unsigned int v30 = BYTE4(v65.m_colorAndFlags) - 2;
      if (v30 >= 9)
      {
        if (BYTE4(v65.m_colorAndFlags) == 11)
        {
          char v32 = 0;
          int m_colorAndFlags = v65.m_colorAndFlags;
          LODWORD(v65.m_colorAndFlags) = 0;
          goto LABEL_88;
        }
        int m_colorAndFlags = 0;
        char v32 = 0;
      }
      else
      {
        BYTE6(v67) = BYTE6(v65.m_colorAndFlags);
        if (BYTE6(v65.m_colorAndFlags))
        {
          LODWORD(v67) = v65.m_colorAndFlags;
          int m_colorAndFlags = v65.m_colorAndFlags;
          char v32 = 1;
          goto LABEL_89;
        }
        char v32 = 0;
        int m_colorAndFlags = v65.m_colorAndFlags;
LABEL_88:
        LODWORD(v67) = m_colorAndFlags;
      }
LABEL_89:
      BYTE4(v65.m_colorAndFlags) = 0;
      unint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
      if (v30 >= 9)
      {
        if (v28 != 11)
        {
          char v32 = 0;
          int m_colorAndFlags = 0;
          goto LABEL_90;
        }
        result[2] = 1;
        *((unsigned char *)result + 12) = 10;
        *(void *)unint64_t result = MEMORY[0x1E4FB6B68] + 16;
        result[4] = 0;
        uint64_t v42 = result + 4;
        *((unsigned char *)result + 22) = 0;
        *((unsigned char *)result + 20) = 11;
        *((unsigned char *)result + 21) = v29;
      }
      else
      {
LABEL_90:
        result[2] = 1;
        *((unsigned char *)result + 12) = 10;
        *(void *)unint64_t result = MEMORY[0x1E4FB6B68] + 16;
        result[4] = 0;
        uint64_t v42 = result + 4;
        *((unsigned char *)result + 22) = 0;
        *((unsigned char *)result + 20) = v28;
        *((unsigned char *)result + 21) = v29;
        if (v30 < 9)
        {
          *((unsigned char *)result + 22) = v32;
          goto LABEL_92;
        }
        if (v28 != 11)
        {
LABEL_93:
          if (v66 && BYTE4(v65.m_colorAndFlags) == 11)
          {
            unsigned int v63 = result;
            WebCore::Length::deref((WebCore::Length *)&v65);
            unint64_t result = v63;
            if (v7)
            {
LABEL_96:
              if (*a2)
              {
                *(void *)a1 = result;
                goto LABEL_98;
              }
              *(unsigned char *)a1 = 0;
              *(unsigned char *)(a1 + 8) = 0;
              if (!result) {
                goto LABEL_99;
              }
LABEL_122:
              if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) != 1) {
                goto LABEL_99;
              }
              atomic_store(1u, result + 2);
              unint64_t v52 = *(uint64_t (**)(void))(*(void *)result + 8);
              goto LABEL_124;
            }
          }
          else if (v7)
          {
            goto LABEL_96;
          }
LABEL_151:
          uint64_t v25 = a2[1];
          goto LABEL_47;
        }
      }
LABEL_92:
      _DWORD *v42 = m_colorAndFlags;
      goto LABEL_93;
    }
    if (m_colorAndFlags_low != 3) {
      char v26 = 1;
    }
    if ((v26 & 1) == 0) {
      break;
    }
    if (m_colorAndFlags_low == 4) {
      char v39 = v7 ^ 1;
    }
    else {
      char v39 = 1;
    }
    if (v39)
    {
      if (m_colorAndFlags_low == 5) {
        char v41 = v7 ^ 1;
      }
      else {
        char v41 = 1;
      }
      if (v41)
      {
LABEL_48:
        *(unsigned char *)a1 = 0;
        *(unsigned char *)(a1 + 8) = 0;
        goto LABEL_99;
      }
      unint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      result[2] = 1;
      *((unsigned char *)result + 12) = 12;
      *(void *)unint64_t result = &unk_1EE9B4CF8;
      goto LABEL_44;
    }
    unsigned __int16 v40 = IPC::Decoder::decode<WebCore::FilterOperation::Type>(a2);
    if (!*a2)
    {
      uint64_t v62 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t result = (unsigned int *)a2[3];
      if (!result || !v62) {
        goto LABEL_48;
      }
      unsigned int v43 = *(uint64_t (**)(void))(*(void *)result + 16);
      goto LABEL_109;
    }
    LOBYTE(v7) = v40;
    if (v40 > 0xFFu)
    {
      unint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      result[2] = 1;
      *((unsigned char *)result + 12) = 13;
      *(void *)unint64_t result = MEMORY[0x1E4FB6B88] + 16;
      *((unsigned char *)result + 13) = v7;
      goto LABEL_44;
    }
LABEL_110:
    __break(1u);
LABEL_111:
    uint64_t v44 = *a2;
    uint64_t v45 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = (unsigned int *)a2[3];
    if (result && v45) {
      unint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)result + 16))(result, v44);
    }
    int m_colorAndFlags_low = 0;
  }
  unint64_t v33 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a2);
  int v35 = v34;
  uint64_t v36 = v34;
  if (!(_BYTE)v34)
  {
    uint64_t v57 = *a2;
    uint64_t v58 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v59 = a2[3];
    if (v59)
    {
      if (v58)
      {
        unint64_t v60 = v33;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v59 + 16))(a2[3], v57);
        unint64_t v33 = v60;
      }
    }
  }
  unsigned int v67 = v33;
  int v68 = v35;
  unint64_t v7 = IPC::Decoder::decode<unsigned int>(a2);
  unint64_t result = IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, &v65);
  if (!v66)
  {
    unint64_t v37 = (void *)*a2;
    uint64_t v61 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = (unsigned int *)a2[3];
    if (result)
    {
      if (v61) {
        unint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, void *))(*(void *)result + 16))(result, v37);
      }
    }
  }
  uint64_t v38 = *a2;
  if (*a2)
  {
    if (!v36 || (v7 & 0xFF00000000) == 0 || !v66) {
      goto LABEL_110;
    }
    unint64_t result = (unsigned int *)WebCore::DropShadowFilterOperation::create((WebCore::DropShadowFilterOperation *)&v67, (const WebCore::IntPoint *)v7, &v65, (uint64_t *)&v64);
    unint64_t v7 = (unint64_t)v64;
  }
  else
  {
    unint64_t v7 = 0;
  }
  if (v66)
  {
    if ((v65.m_colorAndFlags & 0x8000000000000) != 0)
    {
      unint64_t result = (unsigned int *)(v65.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v65.m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        unint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v37);
      }
    }
  }
  if (!v38) {
    goto LABEL_151;
  }
  if (*a2)
  {
    *(void *)a1 = v7;
    goto LABEL_98;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v7 + 8));
    unint64_t v52 = *(uint64_t (**)(void))(*(void *)v7 + 8);
LABEL_124:
    unint64_t result = (unsigned int *)v52();
  }
LABEL_99:
  if (!*(unsigned char *)(a1 + 8))
  {
    uint64_t v46 = *a2;
    uint64_t v47 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = (unsigned int *)a2[3];
    if (result)
    {
      if (v47) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)result + 16))(result, v46);
      }
    }
  }
  return result;
}

void sub_1989454BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  if (a12 && (a11 & 0x8000000000000) != 0)
  {
    char v17 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    unint64_t v3 = result;
    unint64_t v4 = result[3];
    if (v4 > a2)
    {
      unint64_t result = WTF::VectorDestructor<true,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>::destruct((unsigned int *)(*(void *)result + 8 * a2), (unsigned int **)(*(void *)result + 8 * v4));
      v3[3] = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        unint64_t result = (unsigned int *)WTF::fastRealloc(v5, (void *)(8 * a2));
        *(void *)unint64_t v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      unint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(void *)unint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        unint64_t result = (unsigned int *)memcpy(result, v5, 8 * v4);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)unint64_t v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FilterFunction,WTF::RawPtrTraits<WebCore::FilterFunction>,WTF::DefaultRefDerefTraits<WebCore::FilterFunction>>>(unsigned char *a1, IPC::Decoder *this)
{
  uint64_t v4 = *((void *)this + 2);
  uint64_t v5 = *(void *)this;
  unint64_t v6 = *((void *)this + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v32 = *((void *)this + 3);
    if (v32)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
        uint64_t v31 = *(void *)this;
        unint64_t v30 = *((void *)this + 1);
      }
      else
      {
        unint64_t v30 = 0;
        uint64_t v31 = 0;
      }
    }
    goto LABEL_83;
  }
  uint64_t v8 = (unsigned char *)(v5 + v7);
  *((void *)this + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v30 = v6;
    uint64_t v31 = 0;
LABEL_83:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v33 = *((void *)this + 3);
    if (v33)
    {
      if (v30)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v33 + 16))(v33, v31, v30);
        uint64_t v5 = *(void *)this;
        unint64_t v6 = *((void *)this + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_84;
  }
  if (*v8 >= 0x14u)
  {
LABEL_84:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v34 = *((void *)this + 3);
    if (v34 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v5);
    }
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_80;
  }
  switch(*v8)
  {
    case 0:
      IPC::Decoder::decode<WTF::Ref<WebCore::SVGFilter,WTF::RawPtrTraits<WebCore::SVGFilter>,WTF::DefaultRefDerefTraits<WebCore::SVGFilter>>>((unint64_t *)this, (uint64_t)&v38);
      if (*(void *)this)
      {
        if (!v39) {
          goto LABEL_89;
        }
        uint64_t v10 = v38;
        uint64_t v38 = 0;
        *(void *)a1 = v10;
        a1[8] = 1;
        goto LABEL_79;
      }
      *a1 = 0;
      a1[8] = 0;
      if (v39) {
        goto LABEL_79;
      }
      break;
    case 1:
      IPC::Decoder::decode<WTF::Ref<WebCore::FEBlend,WTF::RawPtrTraits<WebCore::FEBlend>,WTF::DefaultRefDerefTraits<WebCore::FEBlend>>>(&v38, (uint64_t *)this);
      if (*(void *)this)
      {
        if (!v39) {
          goto LABEL_89;
        }
        uint64_t v21 = v38;
        uint64_t v38 = 0;
        *(void *)a1 = v21;
        a1[8] = 1;
        goto LABEL_75;
      }
      *a1 = 0;
      a1[8] = 0;
      if (v39) {
        goto LABEL_75;
      }
      break;
    case 2:
      IPC::Decoder::decode<WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>>(&v38, this);
      if (*(void *)this)
      {
        if (!v39) {
          goto LABEL_89;
        }
        uint64_t v17 = v38;
        uint64_t v38 = 0;
        *(void *)a1 = v17;
        a1[8] = 1;
        goto LABEL_79;
      }
      *a1 = 0;
      a1[8] = 0;
      if (v39) {
        goto LABEL_79;
      }
      break;
    case 3:
      IPC::Decoder::decode<WTF::Ref<WebCore::FEComponentTransfer,WTF::RawPtrTraits<WebCore::FEComponentTransfer>,WTF::DefaultRefDerefTraits<WebCore::FEComponentTransfer>>>(&v38, this);
      if (*(void *)this)
      {
        if (!v39) {
          goto LABEL_89;
        }
        uint64_t v19 = v38;
        uint64_t v38 = 0;
        *(void *)a1 = v19;
        a1[8] = 1;
        goto LABEL_75;
      }
      *a1 = 0;
      a1[8] = 0;
      if (v39) {
        goto LABEL_75;
      }
      break;
    case 4:
      IPC::Decoder::decode<WTF::Ref<WebCore::FEComposite,WTF::RawPtrTraits<WebCore::FEComposite>,WTF::DefaultRefDerefTraits<WebCore::FEComposite>>>(&v38, (uint64_t *)this);
      if (*(void *)this)
      {
        if (!v39) {
          goto LABEL_89;
        }
        uint64_t v14 = v38;
        uint64_t v38 = 0;
        *(void *)a1 = v14;
        a1[8] = 1;
        goto LABEL_75;
      }
      *a1 = 0;
      a1[8] = 0;
      if (v39) {
        goto LABEL_75;
      }
      break;
    case 5:
      IPC::Decoder::decode<WTF::Ref<WebCore::FEConvolveMatrix,WTF::RawPtrTraits<WebCore::FEConvolveMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEConvolveMatrix>>>(&v38, (unint64_t *)this);
      if (*(void *)this)
      {
        if (!v39) {
          goto LABEL_89;
        }
        uint64_t v23 = v38;
        uint64_t v38 = 0;
        *(void *)a1 = v23;
        a1[8] = 1;
        goto LABEL_75;
      }
      *a1 = 0;
      a1[8] = 0;
      if (v39) {
        goto LABEL_75;
      }
      break;
    case 6:
      IPC::Decoder::decode<WTF::Ref<WebCore::FEDiffuseLighting,WTF::RawPtrTraits<WebCore::FEDiffuseLighting>,WTF::DefaultRefDerefTraits<WebCore::FEDiffuseLighting>>>((uint64_t)&v38, (uint64_t *)this);
      if (*(void *)this)
      {
        if (!v39) {
          goto LABEL_89;
        }
        uint64_t v25 = v38;
        uint64_t v38 = 0;
        *(void *)a1 = v25;
        a1[8] = 1;
        goto LABEL_75;
      }
      *a1 = 0;
      a1[8] = 0;
      if (v39) {
        goto LABEL_75;
      }
      break;
    case 7:
      IPC::Decoder::decode<WTF::Ref<WebCore::FEDisplacementMap,WTF::RawPtrTraits<WebCore::FEDisplacementMap>,WTF::DefaultRefDerefTraits<WebCore::FEDisplacementMap>>>(&v38, (uint64_t *)this);
      if (*(void *)this)
      {
        if (!v39) {
          goto LABEL_89;
        }
        uint64_t v20 = v38;
        uint64_t v38 = 0;
        *(void *)a1 = v20;
        a1[8] = 1;
        goto LABEL_75;
      }
      *a1 = 0;
      a1[8] = 0;
      if (v39) {
        goto LABEL_75;
      }
      break;
    case 8:
      IPC::Decoder::decode<WTF::Ref<WebCore::FEDropShadow,WTF::RawPtrTraits<WebCore::FEDropShadow>,WTF::DefaultRefDerefTraits<WebCore::FEDropShadow>>>((uint64_t)&v38, (uint64_t *)this);
      if (*(void *)this)
      {
        if (!v39) {
          goto LABEL_89;
        }
        uint64_t v28 = v38;
        uint64_t v38 = 0;
        *(void *)a1 = v28;
        a1[8] = 1;
        goto LABEL_75;
      }
      *a1 = 0;
      a1[8] = 0;
      if (v39) {
        goto LABEL_75;
      }
      break;
    case 9:
      IPC::Decoder::decode<WTF::Ref<WebCore::FEFlood,WTF::RawPtrTraits<WebCore::FEFlood>,WTF::DefaultRefDerefTraits<WebCore::FEFlood>>>((uint64_t)&v38, (uint64_t *)this);
      if (*(void *)this)
      {
        if (!v39) {
          goto LABEL_89;
        }
        uint64_t v16 = v38;
        uint64_t v38 = 0;
        *(void *)a1 = v16;
        a1[8] = 1;
        goto LABEL_75;
      }
      *a1 = 0;
      a1[8] = 0;
      if (v39) {
        goto LABEL_75;
      }
      break;
    case 0xA:
      IPC::Decoder::decode<WTF::Ref<WebCore::FEGaussianBlur,WTF::RawPtrTraits<WebCore::FEGaussianBlur>,WTF::DefaultRefDerefTraits<WebCore::FEGaussianBlur>>>(&v38, (uint64_t *)this);
      if (*(void *)this)
      {
        if (!v39) {
          goto LABEL_89;
        }
        uint64_t v27 = v38;
        uint64_t v38 = 0;
        *(void *)a1 = v27;
        a1[8] = 1;
        goto LABEL_79;
      }
      *a1 = 0;
      a1[8] = 0;
      if (v39) {
        goto LABEL_79;
      }
      break;
    case 0xB:
      IPC::Decoder::decode<WTF::Ref<WebCore::FEImage,WTF::RawPtrTraits<WebCore::FEImage>,WTF::DefaultRefDerefTraits<WebCore::FEImage>>>(&v38, (uint64_t *)this);
      if (*(void *)this)
      {
        if (!v39) {
          goto LABEL_89;
        }
        uint64_t v13 = v38;
        uint64_t v38 = 0;
        *(void *)a1 = v13;
        a1[8] = 1;
        goto LABEL_75;
      }
      *a1 = 0;
      a1[8] = 0;
      if (v39) {
        goto LABEL_75;
      }
      break;
    case 0xC:
      IPC::Decoder::decode<WTF::Ref<WebCore::FEMerge,WTF::RawPtrTraits<WebCore::FEMerge>,WTF::DefaultRefDerefTraits<WebCore::FEMerge>>>(&v38, (uint64_t *)this);
      if (*(void *)this)
      {
        if (!v39) {
          goto LABEL_89;
        }
        uint64_t v15 = v38;
        uint64_t v38 = 0;
        *(void *)a1 = v15;
        a1[8] = 1;
        goto LABEL_75;
      }
      *a1 = 0;
      a1[8] = 0;
      if (v39) {
        goto LABEL_75;
      }
      break;
    case 0xD:
      IPC::Decoder::decode<WTF::Ref<WebCore::FEMorphology,WTF::RawPtrTraits<WebCore::FEMorphology>,WTF::DefaultRefDerefTraits<WebCore::FEMorphology>>>(&v38, (uint64_t *)this);
      if (*(void *)this)
      {
        if (!v39) {
          goto LABEL_89;
        }
        uint64_t v24 = v38;
        uint64_t v38 = 0;
        *(void *)a1 = v24;
        a1[8] = 1;
        goto LABEL_75;
      }
      *a1 = 0;
      a1[8] = 0;
      if (v39) {
        goto LABEL_75;
      }
      break;
    case 0xE:
      IPC::Decoder::decode<WTF::Ref<WebCore::FEOffset,WTF::RawPtrTraits<WebCore::FEOffset>,WTF::DefaultRefDerefTraits<WebCore::FEOffset>>>(&v38, (uint64_t *)this);
      if (*(void *)this)
      {
        if (!v39) {
          goto LABEL_89;
        }
        uint64_t v12 = v38;
        uint64_t v38 = 0;
        *(void *)a1 = v12;
        a1[8] = 1;
        goto LABEL_79;
      }
      *a1 = 0;
      a1[8] = 0;
      if (v39) {
        goto LABEL_79;
      }
      break;
    case 0xF:
      IPC::Decoder::decode<WTF::Ref<WebCore::FESpecularLighting,WTF::RawPtrTraits<WebCore::FESpecularLighting>,WTF::DefaultRefDerefTraits<WebCore::FESpecularLighting>>>((uint64_t)&v38, (uint64_t *)this);
      if (*(void *)this)
      {
        if (!v39) {
          goto LABEL_89;
        }
        uint64_t v18 = v38;
        uint64_t v38 = 0;
        *(void *)a1 = v18;
        a1[8] = 1;
        goto LABEL_75;
      }
      *a1 = 0;
      a1[8] = 0;
      if (v39) {
        goto LABEL_75;
      }
      break;
    case 0x10:
      IPC::Decoder::decode<WTF::Ref<WebCore::FETile,WTF::RawPtrTraits<WebCore::FETile>,WTF::DefaultRefDerefTraits<WebCore::FETile>>>((uint64_t)&v38, (uint64_t *)this);
      if (!*(void *)this) {
        goto LABEL_90;
      }
      if (!v39) {
        goto LABEL_89;
      }
      uint64_t v11 = v38;
      uint64_t v38 = 0;
      *(void *)a1 = v11;
      a1[8] = 1;
      goto LABEL_75;
    case 0x11:
      IPC::Decoder::decode<WTF::Ref<WebCore::FETurbulence,WTF::RawPtrTraits<WebCore::FETurbulence>,WTF::DefaultRefDerefTraits<WebCore::FETurbulence>>>(&v38, (uint64_t *)this);
      if (*(void *)this)
      {
        if (!v39) {
          goto LABEL_89;
        }
        uint64_t v22 = v38;
        uint64_t v38 = 0;
        *(void *)a1 = v22;
        a1[8] = 1;
        goto LABEL_75;
      }
      *a1 = 0;
      a1[8] = 0;
      if (v39) {
        goto LABEL_75;
      }
      break;
    case 0x12:
      IPC::Decoder::decode<WTF::Ref<WebCore::SourceAlpha,WTF::RawPtrTraits<WebCore::SourceAlpha>,WTF::DefaultRefDerefTraits<WebCore::SourceAlpha>>>((uint64_t)&v38, (uint64_t *)this);
      if (*(void *)this)
      {
        if (!v39) {
          goto LABEL_89;
        }
        uint64_t v26 = v38;
        uint64_t v38 = 0;
        *(void *)a1 = v26;
        a1[8] = 1;
      }
      else
      {
        *a1 = 0;
        a1[8] = 0;
        if (!v39) {
          break;
        }
      }
      goto LABEL_79;
    default:
      IPC::Decoder::decode<WTF::Ref<WebCore::SourceGraphic,WTF::RawPtrTraits<WebCore::SourceGraphic>,WTF::DefaultRefDerefTraits<WebCore::SourceGraphic>>>((uint64_t)&v38, (uint64_t *)this);
      if (*(void *)this)
      {
        if (v39)
        {
          uint64_t v29 = v38;
          uint64_t v38 = 0;
          *(void *)a1 = v29;
          a1[8] = 1;
LABEL_79:
          WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v38, v9);
          break;
        }
LABEL_89:
        __break(1u);
LABEL_90:
        *a1 = 0;
        a1[8] = 0;
        if (v39) {
LABEL_75:
        }
          WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v38, v9);
      }
      else
      {
        *a1 = 0;
        a1[8] = 0;
        if (v39) {
          goto LABEL_79;
        }
      }
      break;
  }
LABEL_80:
  if (!a1[8])
  {
    uint64_t v35 = *(void *)this;
    uint64_t v36 = *((void *)this + 1);
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v37 = *((void *)this + 3);
    if (v37)
    {
      if (v36) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v35);
      }
    }
  }
}

void sub_198945E34(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 8)) {
    WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref((uint64_t *)v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::SVGFilterExpressionTerm,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SVGFilterExpressionTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    unint64_t v6 = *(int **)a2;
    uint64_t v7 = 32 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebCore::SVGFilterExpressionTerm,void>::encode(a1, v6);
      v6 += 8;
      v7 -= 32;
    }
    while (v7);
  }
  return result;
}

void IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)a2;
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5++;
      IPC::ArgumentCoder<WebCore::FilterEffect,void>::encode(a1, v7);
      v6 -= 8;
    }
    while (v6);
  }
}

unint64_t *IPC::Decoder::decode<WebCore::SVGFilterExpressionTerm>(unint64_t *result, IPC::Decoder *this)
{
  unint64_t v3 = result;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (*((void *)this + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v5 = *(void *)this;
  unint64_t v6 = *((void *)this + 1);
  unint64_t v7 = v4 - v5;
  if (v6 >= v7 && v6 - v7 > 3)
  {
    char v9 = (int *)(v5 + v7);
    *((void *)this + 2) = v9 + 1;
    if (v5)
    {
      int v10 = 0;
      int v11 = *v9;
      unsigned int v12 = v11 & 0xFFFFFF00;
      int v13 = v11;
      unint64_t v14 = v5;
      goto LABEL_8;
    }
    unint64_t v14 = v6;
    uint64_t v24 = 0;
  }
  else
  {
    unint64_t v14 = 0;
    uint64_t v24 = 0;
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v25 = *((void *)this + 3);
    if (v25)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
        uint64_t v24 = *(void *)this;
        unint64_t v14 = *((void *)this + 1);
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v24 = 0;
      }
    }
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  unint64_t result = (unint64_t *)*((void *)this + 3);
  if (!result)
  {
    unint64_t v14 = 0;
LABEL_34:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    unsigned int v12 = 0;
    int v13 = 0;
    int v10 = 1;
    goto LABEL_8;
  }
  if (!v14) {
    goto LABEL_34;
  }
  unint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t, unint64_t))(*result + 16))(result, v24, v14);
  unsigned int v12 = 0;
  int v13 = 0;
  unint64_t v14 = *(void *)this;
  unint64_t v6 = *((void *)this + 1);
  int v10 = 1;
  uint64_t v5 = *(void *)this;
LABEL_8:
  unint64_t v15 = ((*((void *)this + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v5;
  if (v6 >= v15 && v6 - v15 > 3)
  {
    uint64_t v17 = (_DWORD *)((*((void *)this + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v18 = v17 + 1;
    *((void *)this + 2) = v17 + 1;
    if (v5)
    {
      int v19 = 0;
      int v20 = *v17;
      goto LABEL_15;
    }
    unint64_t v26 = v6;
  }
  else
  {
    unint64_t v26 = 0;
    unint64_t v14 = 0;
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v27 = *((void *)this + 3);
    if (v27)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
        unint64_t v14 = *(void *)this;
        unint64_t v26 = *((void *)this + 1);
      }
      else
      {
        unint64_t v26 = 0;
        unint64_t v14 = 0;
      }
    }
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  uint64_t v28 = *((void *)this + 3);
  if (!v28 || !v26)
  {
    int v20 = 0;
    unint64_t v29 = 0;
    uint64_t v5 = 0;
    int v19 = 1;
LABEL_38:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v30 = *((void *)this + 3);
    if (v30 && v29)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v30 + 16))(v30, v5, v29);
      uint64_t v5 = *(void *)this;
      unint64_t v6 = *((void *)this + 1);
    }
    else
    {
      unint64_t v6 = 0;
      uint64_t v5 = 0;
    }
LABEL_40:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v31 = *((void *)this + 3);
    if (v31 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v5);
    }
    goto LABEL_41;
  }
  unint64_t result = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)v28 + 16))(v28, v14, v26);
  int v20 = 0;
  uint64_t v5 = *(void *)this;
  unint64_t v6 = *((void *)this + 1);
  int v19 = 1;
  uint64_t v18 = (unsigned char *)*((void *)this + 2);
LABEL_15:
  if (v6 <= (unint64_t)&v18[-v5])
  {
    uint64_t v32 = *((void *)this + 3);
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    if (v32 && v6)
    {
      (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
      uint64_t v5 = *(void *)this;
      unint64_t v29 = *((void *)this + 1);
    }
    else
    {
      unint64_t v29 = 0;
      uint64_t v5 = 0;
    }
    goto LABEL_38;
  }
  *((void *)this + 2) = v18 + 1;
  if (!v5)
  {
    unint64_t v29 = v6;
    goto LABEL_38;
  }
  unsigned int v21 = *v18;
  if (v21 >= 2) {
    goto LABEL_40;
  }
  if (*v18) {
    goto LABEL_26;
  }
  int v22 = 0;
  char v23 = 0;
  while (*(void *)this)
  {
    if (!v10 && !v19 && !v22)
    {
      *((unsigned char *)v3 + 8) = v21;
      *(_OWORD *)((char *)v3 + 9) = *(_OWORD *)v36;
      *((_DWORD *)v3 + 6) = *(_DWORD *)&v36[15];
      *((unsigned char *)v3 + 28) = v23;
      *(_DWORD *)unint64_t v3 = v13 | v12;
      *((_DWORD *)v3 + 1) = v20;
      *((unsigned char *)v3 + 32) = 1;
      return result;
    }
    __break(1u);
LABEL_26:
    unint64_t result = IPC::Decoder::decode<WebCore::FilterEffectGeometry>((uint64_t)&v33, (unint64_t *)this);
    if (v35)
    {
      int v22 = 0;
      LOBYTE(v21) = v33;
      *(_OWORD *)uint64_t v36 = *(_OWORD *)v34;
      *(_DWORD *)&v36[15] = *(_DWORD *)&v34[15];
      char v23 = 1;
    }
    else
    {
LABEL_41:
      unint64_t result = (unint64_t *)IPC::Decoder::markInvalid(this);
      LOBYTE(v21) = 0;
      int v22 = 1;
    }
  }
  *(unsigned char *)unint64_t v3 = 0;
  *((unsigned char *)v3 + 32) = 0;

  return (unint64_t *)IPC::Decoder::markInvalid(this);
}

__n128 WTF::Vector<WebCore::SVGFilterExpressionTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SVGFilterExpressionTerm>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unint64_t v4 = (_OWORD *)(*(void *)a1 + 32 * *(unsigned int *)(a1 + 12));
  __n128 result = *(__n128 *)v3;
  long long v6 = *(_OWORD *)(v3 + 16);
  _OWORD *v4 = *(_OWORD *)v3;
  v4[1] = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<WebCore::SVGFilterExpressionTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    int v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      *(_DWORD *)(result + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF **)result;
    if (a2)
    {
      if (a2 >> 27)
      {
        __break(0xC471u);
        return result;
      }
      __n128 result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v4 && (WTF *)result != v5)
      {
        uint64_t v6 = 32 * v4;
        unint64_t v7 = v5;
        do
        {
          long long v8 = *(_OWORD *)v7;
          long long v9 = *((_OWORD *)v7 + 1);
          unint64_t v7 = (WTF *)((char *)v7 + 32);
          *(_OWORD *)__n128 result = v8;
          *(_OWORD *)(result + 16) = v9;
          result += 32;
          v6 -= 32;
        }
        while (v6);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>(uint64_t a1, IPC::Decoder *this)
{
  unint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *(void *)this;
  unint64_t v6 = *((void *)this + 2) - *(void *)this;
  if (v4 <= v6)
  {
    unint64_t v31 = 0;
    uint64_t v32 = 0;
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v33 = *((void *)this + 3);
    if (v33)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v33 + 16))(v33, v5, v4);
        uint64_t v32 = *(void *)this;
        unint64_t v31 = *((void *)this + 1);
      }
      else
      {
        unint64_t v31 = 0;
        uint64_t v32 = 0;
      }
    }
    goto LABEL_123;
  }
  unint64_t v7 = (unsigned __int8 *)(v5 + v6);
  *((void *)this + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v31 = v4;
    uint64_t v32 = 0;
LABEL_123:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v34 = *((void *)this + 3);
    if (v34 && v31) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32);
    }
    goto LABEL_124;
  }
  unsigned int v8 = *v7;
  if (v8 < 0x13)
  {
    int v9 = 1;
    goto LABEL_5;
  }
LABEL_124:
  unsigned int v8 = 0;
  int v9 = 0;
LABEL_5:
  unsigned int v10 = v8 | (v9 << 8);
  if (v10 <= 0xFF) {
    IPC::Decoder::markInvalid(this);
  }
  if (!*(void *)this) {
    goto LABEL_65;
  }
  if (!v8 && v10 >= 0x100)
  {
    IPC::Decoder::decode<WTF::Ref<WebCore::FEBlend,WTF::RawPtrTraits<WebCore::FEBlend>,WTF::DefaultRefDerefTraits<WebCore::FEBlend>>>(&v35, (uint64_t *)this);
    if (*(void *)this)
    {
      if (v36)
      {
        uint64_t v17 = v35;
        uint64_t v35 = 0;
        *(void *)a1 = v17;
        *(unsigned char *)(a1 + 8) = 1;
        goto LABEL_121;
      }
      goto LABEL_125;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    if (!v36) {
      goto LABEL_62;
    }
LABEL_121:
    WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v35, v11);
    goto LABEL_62;
  }
  if (v8 == 1 && v10 >= 0x100)
  {
    IPC::Decoder::decode<WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>>(&v35, this);
    if (!*(void *)this) {
      goto LABEL_126;
    }
    if (v36)
    {
      uint64_t v14 = v35;
      uint64_t v35 = 0;
      *(void *)a1 = v14;
      *(unsigned char *)(a1 + 8) = 1;
      goto LABEL_61;
    }
    goto LABEL_125;
  }
  if (v8 == 2 && v10 >= 0x100)
  {
    IPC::Decoder::decode<WTF::Ref<WebCore::FEComponentTransfer,WTF::RawPtrTraits<WebCore::FEComponentTransfer>,WTF::DefaultRefDerefTraits<WebCore::FEComponentTransfer>>>(&v35, this);
    if (*(void *)this)
    {
      if (v36)
      {
        uint64_t v18 = v35;
        uint64_t v35 = 0;
        *(void *)a1 = v18;
        *(unsigned char *)(a1 + 8) = 1;
        goto LABEL_121;
      }
      goto LABEL_125;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    if (!v36) {
      goto LABEL_62;
    }
    goto LABEL_121;
  }
  if (v8 == 3 && v10 >= 0x100)
  {
    IPC::Decoder::decode<WTF::Ref<WebCore::FEComposite,WTF::RawPtrTraits<WebCore::FEComposite>,WTF::DefaultRefDerefTraits<WebCore::FEComposite>>>(&v35, (uint64_t *)this);
    if (*(void *)this)
    {
      if (v36)
      {
        uint64_t v19 = v35;
        uint64_t v35 = 0;
        *(void *)a1 = v19;
        *(unsigned char *)(a1 + 8) = 1;
        goto LABEL_121;
      }
      goto LABEL_125;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    if (!v36) {
      goto LABEL_62;
    }
    goto LABEL_121;
  }
  if (v8 == 4 && v10 >= 0x100)
  {
    IPC::Decoder::decode<WTF::Ref<WebCore::FEConvolveMatrix,WTF::RawPtrTraits<WebCore::FEConvolveMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEConvolveMatrix>>>(&v35, (unint64_t *)this);
    if (*(void *)this)
    {
      if (v36)
      {
        uint64_t v20 = v35;
        uint64_t v35 = 0;
        *(void *)a1 = v20;
        *(unsigned char *)(a1 + 8) = 1;
        goto LABEL_121;
      }
      goto LABEL_125;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    if (!v36) {
      goto LABEL_62;
    }
    goto LABEL_121;
  }
  if (v8 == 5 && v10 >= 0x100)
  {
    IPC::Decoder::decode<WTF::Ref<WebCore::FEDiffuseLighting,WTF::RawPtrTraits<WebCore::FEDiffuseLighting>,WTF::DefaultRefDerefTraits<WebCore::FEDiffuseLighting>>>((uint64_t)&v35, (uint64_t *)this);
    if (*(void *)this)
    {
      if (v36)
      {
        uint64_t v21 = v35;
        uint64_t v35 = 0;
        *(void *)a1 = v21;
        *(unsigned char *)(a1 + 8) = 1;
        goto LABEL_121;
      }
      goto LABEL_125;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    if (!v36) {
      goto LABEL_62;
    }
    goto LABEL_121;
  }
  if (v8 == 6 && v10 >= 0x100)
  {
    IPC::Decoder::decode<WTF::Ref<WebCore::FEDisplacementMap,WTF::RawPtrTraits<WebCore::FEDisplacementMap>,WTF::DefaultRefDerefTraits<WebCore::FEDisplacementMap>>>(&v35, (uint64_t *)this);
    if (*(void *)this)
    {
      if (v36)
      {
        uint64_t v22 = v35;
        uint64_t v35 = 0;
        *(void *)a1 = v22;
        *(unsigned char *)(a1 + 8) = 1;
        goto LABEL_121;
      }
      goto LABEL_125;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    if (!v36) {
      goto LABEL_62;
    }
    goto LABEL_121;
  }
  if (v8 == 7 && v10 >= 0x100)
  {
    IPC::Decoder::decode<WTF::Ref<WebCore::FEDropShadow,WTF::RawPtrTraits<WebCore::FEDropShadow>,WTF::DefaultRefDerefTraits<WebCore::FEDropShadow>>>((uint64_t)&v35, (uint64_t *)this);
    if (*(void *)this)
    {
      if (v36)
      {
        uint64_t v23 = v35;
        uint64_t v35 = 0;
        *(void *)a1 = v23;
        *(unsigned char *)(a1 + 8) = 1;
        goto LABEL_121;
      }
      goto LABEL_125;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    if (!v36) {
      goto LABEL_62;
    }
    goto LABEL_121;
  }
  if (v8 == 8 && v10 >= 0x100)
  {
    IPC::Decoder::decode<WTF::Ref<WebCore::FEFlood,WTF::RawPtrTraits<WebCore::FEFlood>,WTF::DefaultRefDerefTraits<WebCore::FEFlood>>>((uint64_t)&v35, (uint64_t *)this);
    if (*(void *)this)
    {
      if (v36)
      {
        uint64_t v24 = v35;
        uint64_t v35 = 0;
        *(void *)a1 = v24;
        *(unsigned char *)(a1 + 8) = 1;
        goto LABEL_121;
      }
      goto LABEL_125;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    if (!v36) {
      goto LABEL_62;
    }
    goto LABEL_121;
  }
  if (v8 == 9 && v10 >= 0x100)
  {
    IPC::Decoder::decode<WTF::Ref<WebCore::FEGaussianBlur,WTF::RawPtrTraits<WebCore::FEGaussianBlur>,WTF::DefaultRefDerefTraits<WebCore::FEGaussianBlur>>>(&v35, (uint64_t *)this);
    if (!*(void *)this)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 8) = 0;
      if (v36) {
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    if (v36)
    {
      uint64_t v15 = v35;
      uint64_t v35 = 0;
      *(void *)a1 = v15;
      *(unsigned char *)(a1 + 8) = 1;
      goto LABEL_61;
    }
    goto LABEL_125;
  }
  if (v8 == 10 && v10 >= 0x100)
  {
    IPC::Decoder::decode<WTF::Ref<WebCore::FEImage,WTF::RawPtrTraits<WebCore::FEImage>,WTF::DefaultRefDerefTraits<WebCore::FEImage>>>(&v35, (uint64_t *)this);
    if (*(void *)this)
    {
      if (v36)
      {
        uint64_t v25 = v35;
        uint64_t v35 = 0;
        *(void *)a1 = v25;
        *(unsigned char *)(a1 + 8) = 1;
        goto LABEL_121;
      }
      goto LABEL_125;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    if (!v36) {
      goto LABEL_62;
    }
    goto LABEL_121;
  }
  if (v8 == 11 && v10 >= 0x100)
  {
    IPC::Decoder::decode<WTF::Ref<WebCore::FEMerge,WTF::RawPtrTraits<WebCore::FEMerge>,WTF::DefaultRefDerefTraits<WebCore::FEMerge>>>(&v35, (uint64_t *)this);
    if (*(void *)this)
    {
      if (v36)
      {
        uint64_t v26 = v35;
        uint64_t v35 = 0;
        *(void *)a1 = v26;
        *(unsigned char *)(a1 + 8) = 1;
        goto LABEL_121;
      }
      goto LABEL_125;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    if (!v36) {
      goto LABEL_62;
    }
    goto LABEL_121;
  }
  if (v8 == 12 && v10 >= 0x100)
  {
    IPC::Decoder::decode<WTF::Ref<WebCore::FEMorphology,WTF::RawPtrTraits<WebCore::FEMorphology>,WTF::DefaultRefDerefTraits<WebCore::FEMorphology>>>(&v35, (uint64_t *)this);
    if (*(void *)this)
    {
      if (v36)
      {
        uint64_t v27 = v35;
        uint64_t v35 = 0;
        *(void *)a1 = v27;
        *(unsigned char *)(a1 + 8) = 1;
        goto LABEL_121;
      }
      goto LABEL_125;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    if (!v36) {
      goto LABEL_62;
    }
    goto LABEL_121;
  }
  if (v8 == 13 && v10 >= 0x100)
  {
    IPC::Decoder::decode<WTF::Ref<WebCore::FEOffset,WTF::RawPtrTraits<WebCore::FEOffset>,WTF::DefaultRefDerefTraits<WebCore::FEOffset>>>(&v35, (uint64_t *)this);
    if (!*(void *)this)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 8) = 0;
      if (v36) {
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    if (v36)
    {
      uint64_t v12 = v35;
      uint64_t v35 = 0;
      *(void *)a1 = v12;
      *(unsigned char *)(a1 + 8) = 1;
LABEL_61:
      WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v35, v11);
      goto LABEL_62;
    }
    goto LABEL_125;
  }
  if (v8 == 14 && v10 >= 0x100)
  {
    IPC::Decoder::decode<WTF::Ref<WebCore::FETile,WTF::RawPtrTraits<WebCore::FETile>,WTF::DefaultRefDerefTraits<WebCore::FETile>>>((uint64_t)&v35, (uint64_t *)this);
    if (*(void *)this)
    {
      if (v36)
      {
        uint64_t v28 = v35;
        uint64_t v35 = 0;
        *(void *)a1 = v28;
        *(unsigned char *)(a1 + 8) = 1;
        goto LABEL_121;
      }
      goto LABEL_125;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    if (!v36) {
      goto LABEL_62;
    }
    goto LABEL_121;
  }
  if (v8 == 15 && v10 >= 0x100)
  {
    IPC::Decoder::decode<WTF::Ref<WebCore::FESpecularLighting,WTF::RawPtrTraits<WebCore::FESpecularLighting>,WTF::DefaultRefDerefTraits<WebCore::FESpecularLighting>>>((uint64_t)&v35, (uint64_t *)this);
    if (*(void *)this)
    {
      if (v36)
      {
        uint64_t v29 = v35;
        uint64_t v35 = 0;
        *(void *)a1 = v29;
        *(unsigned char *)(a1 + 8) = 1;
        goto LABEL_121;
      }
      goto LABEL_125;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    if (!v36) {
      goto LABEL_62;
    }
    goto LABEL_121;
  }
  if (v8 != 16 || v10 < 0x100)
  {
    if (v8 == 17 && v10 >= 0x100)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::SourceAlpha,WTF::RawPtrTraits<WebCore::SourceAlpha>,WTF::DefaultRefDerefTraits<WebCore::SourceAlpha>>>((uint64_t)&v35, (uint64_t *)this);
      if (!*(void *)this)
      {
        *(unsigned char *)a1 = 0;
        *(unsigned char *)(a1 + 8) = 0;
        if (v36) {
          goto LABEL_61;
        }
        goto LABEL_62;
      }
      if (v36)
      {
        uint64_t v13 = v35;
        uint64_t v35 = 0;
        *(void *)a1 = v13;
        *(unsigned char *)(a1 + 8) = 1;
        goto LABEL_61;
      }
      goto LABEL_125;
    }
    if (v8 == 18 && v10 >= 0x100)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::SourceGraphic,WTF::RawPtrTraits<WebCore::SourceGraphic>,WTF::DefaultRefDerefTraits<WebCore::SourceGraphic>>>((uint64_t)&v35, (uint64_t *)this);
      if (!*(void *)this)
      {
        *(unsigned char *)a1 = 0;
        *(unsigned char *)(a1 + 8) = 0;
        if (v36) {
          goto LABEL_61;
        }
        goto LABEL_62;
      }
      if (v36)
      {
        uint64_t v16 = v35;
        uint64_t v35 = 0;
        *(void *)a1 = v16;
        *(unsigned char *)(a1 + 8) = 1;
        goto LABEL_61;
      }
      goto LABEL_125;
    }
LABEL_65:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    goto LABEL_62;
  }
  IPC::Decoder::decode<WTF::Ref<WebCore::FETurbulence,WTF::RawPtrTraits<WebCore::FETurbulence>,WTF::DefaultRefDerefTraits<WebCore::FETurbulence>>>(&v35, (uint64_t *)this);
  if (!*(void *)this)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    if (!v36) {
      goto LABEL_62;
    }
    goto LABEL_121;
  }
  if (v36)
  {
    uint64_t v30 = v35;
    uint64_t v35 = 0;
    *(void *)a1 = v30;
    *(unsigned char *)(a1 + 8) = 1;
    goto LABEL_121;
  }
LABEL_125:
  __break(1u);
LABEL_126:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  if (v36) {
    goto LABEL_61;
  }
LABEL_62:
  if (!*(unsigned char *)(a1 + 8)) {
    IPC::Decoder::markInvalid(this);
  }
}

void sub_198946D30(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 8)) {
    WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref((uint64_t *)v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>(uint64_t a1, unint64_t a2)
{
  __n128 result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *result;
  uint64_t *result = 0;
  *(void *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

unint64_t WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1 > a3 || (unint64_t)v5 + 8 * *(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  else
  {
    unint64_t v6 = a3 - (void)v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t *WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) > a2)
  {
    unint64_t v3 = result;
    unint64_t v4 = *((unsigned int *)result + 3);
    if (v4 > a2)
    {
      __n128 result = (uint64_t *)(*result + 8 * a2);
      uint64_t v5 = 8 * v4 - 8 * a2;
      do
      {
        __n128 result = WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(result, (void *)a2)+ 1;
        v5 -= 8;
      }
      while (v5);
      *((_DWORD *)v3 + 3) = a2;
      LODWORD(v4) = a2;
    }
    unint64_t v6 = (WTF *)*v3;
    if (a2)
    {
      if (*((_DWORD *)v3 + 2))
      {
        *((_DWORD *)v3 + 2) = a2;
        __n128 result = (uint64_t *)WTF::fastRealloc(v6, (void *)(8 * a2));
        *unint64_t v3 = (uint64_t)result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      __n128 result = (uint64_t *)WTF::fastMalloc((WTF *)(8 * a2));
      *((_DWORD *)v3 + 2) = a2;
      *unint64_t v3 = (uint64_t)result;
      if (result != (uint64_t *)v6) {
        __n128 result = (uint64_t *)memcpy(result, v6, 8 * v4);
      }
    }
    if (v6)
    {
      if ((WTF *)*v3 == v6)
      {
        *unint64_t v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (uint64_t *)WTF::fastFree(v6, (void *)a2);
    }
  }
  return result;
}

void *IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(void *result, const void *a2, size_t a3)
{
  unint64_t v3 = result;
  unint64_t v4 = result[2];
  unint64_t v5 = *result + v4;
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v8 + v4 + 8;
    if (v9 > 0xFFFFFFFFFFFFFFF7 || v10 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(void *)(*result + v9) = a3;
      result[2] = v10;
      unint64_t v4 = v10;
    }
  }
  if (a3)
  {
    unint64_t v12 = v4 + a3;
    if (__CFADD__(v4, a3) || v12 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      __n128 result = memcpy((void *)(*result + v4), a2, a3);
      v3[2] = v12;
    }
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::pair<WTF::AtomString,WTF::AtomString>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::AtomString>(a2, &v13);
  if (v14)
  {
    __n128 result = IPC::Decoder::decode<WTF::AtomString>(a2, &v11);
    if (v12)
    {
      if (v14)
      {
        uint64_t v6 = v11;
        *(void *)a1 = v13;
        *(void *)(a1 + 8) = v6;
        *(unsigned char *)(a1 + 16) = 1;
      }
      else
      {
        __break(1u);
      }
      return result;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    if (v14)
    {
      BOOL v7 = v13;
      uint64_t v13 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, v5);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
  }
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  __n128 result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v8);
  }
  return result;
}

void sub_1989470CC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100](v12, a2);
  _Unwind_Resume(a1);
}

unint64_t IPC::VectorArgumentCoder<false,JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *((unsigned int *)a2 + 3));
  unsigned int v5 = *((_DWORD *)a2 + 3);
  if (v5)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = *a2 + 56 * v5;
    uint64_t v8 = v6 + 32;
    uint64_t v9 = MEMORY[0x1E4F309C0];
    BOOL v10 = (unsigned char *)MEMORY[0x1E4F309B8];
    do
    {
      uint64_t v12 = v8 - 32;
      unint64_t v11 = *(void *)(v8 - 32);
      if (v11)
      {
        uint64_t v13 = *(void *)(v9 + 56);
        if (v13)
        {
          BOOL v14 = *(unsigned char *)(v9 + 34) || *v10 == 0;
          unint64_t v15 = (v11 & 0x3FFFFFFFFLL) + v13;
          if (v14) {
            unint64_t v11 = v15;
          }
        }
      }
      if (*(unsigned char *)(v8 + 16) && (uint64_t v16 = *(void *)(v8 - 16)) != 0) {
        size_t v17 = atomic_load((unint64_t *)(v16 + 32));
      }
      else {
        size_t v17 = *(void *)v8;
      }
      unint64_t result = IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, (const void *)v11, v17);
      v8 += 56;
    }
    while (v12 + 56 != v7);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::unique_ptr<WebCore::DetachedRTCDataChannel>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::DetachedRTCDataChannel> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (v6)
    {
      unsigned char *result = 1;
      uint64_t v7 = *a2;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)v7);
      IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)(v7 + 8));
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(v7 + 16));
      IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(v7 + 24));
      IPC::ArgumentCoder<std::optional<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>>,void>::encode<IPC::Encoder,std::optional<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>> const&>(a1, v7 + 26);
      IPC::ArgumentCoder<std::optional<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>>,void>::encode<IPC::Encoder,std::optional<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>> const&>(a1, v7 + 30);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(v7 + 40));
      IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(v7 + 48));
      IPC::ArgumentCoder<std::optional<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>>,void>::encode<IPC::Encoder,std::optional<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>> const&>(a1, v7 + 50);
      char v9 = *(unsigned char *)(v7 + 54);
      IPC::Encoder::operator<<<BOOL>(a1, &v9);
      char v8 = *(unsigned char *)(v7 + 56);
      return (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, &v8);
    }
LABEL_6:
    __break(0xC471u);
    JUMPOUT(0x1989472F4);
  }
  if (!v6) {
    goto LABEL_6;
  }
  unsigned char *result = 0;
  return result;
}

unsigned char *IPC::ArgumentCoder<WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>,void>::encode<IPC::Encoder,WebCore::WebCodecsEncodedVideoChunkStorage>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (v6)
    {
      unsigned char *result = 0;
      return result;
    }
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x1989473ECLL);
  }
  if (!v6) {
    goto LABEL_11;
  }
  unsigned char *result = 1;
  uint64_t v7 = *a2;
  char v8 = *(unsigned char *)(v7 + 8);
  char v9 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x19894740CLL);
  }
  unsigned char *v9 = v8;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(v7 + 16));
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(a1, v7 + 24);
  unint64_t v11 = *(const void **)(v7 + 40);
  size_t v12 = *(unsigned int *)(v7 + 52);

  return (unsigned char *)IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v11, v12);
}

uint64_t IPC::Decoder::decode<JSC::ArrayBufferContents>(unsigned char *a1, uint64_t *a2)
{
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)&v8);
  if (!*a2)
  {
    *a1 = 0;
    a1[56] = 0;
LABEL_6:
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
    return result;
  }
  if (!v9)
  {
    __break(1u);
    return result;
  }
  uint64_t result = JSC::ArrayBufferContents::fromSpan();
  if (!a1[56]) {
    goto LABEL_6;
  }
  return result;
}

void sub_1989474D8(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 56)) {
    JSC::ArrayBufferContents::~ArrayBufferContents(v1);
  }
  _Unwind_Resume(exception_object);
}

void WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ArrayBufferContents>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  JSC::ArrayBufferContents::ArrayBufferContents(*(void *)a1 + 56 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
}

double JSC::ArrayBufferContents::ArrayBufferContents(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v3;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v4;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = 0;
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v7;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a2 + 48) = 0;
  return result;
}

unint64_t WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 56 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x4924925)
    {
      __break(0xC471u);
      JUMPOUT(0x198947724);
    }
    unint64_t v3 = *(JSC::ArrayBufferContents **)a1;
    uint64_t v4 = (JSC::ArrayBufferContents *)(*(void *)a1 + 56 * *(unsigned int *)(a1 + 12));
    unsigned int v5 = 56 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(56 * a2));
    *(_DWORD *)(a1 + 8) = v5 / 0x38;
    *(void *)a1 = v6;
    WTF::VectorMover<false,JSC::ArrayBufferContents>::move(v3, v4, v6);
    if (v3)
    {
      if (*(JSC::ArrayBufferContents **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
}

void WTF::VectorMover<false,JSC::ArrayBufferContents>::move(JSC::ArrayBufferContents *a1, JSC::ArrayBufferContents *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unsigned int v5 = a1;
    do
    {
      JSC::ArrayBufferContents::ArrayBufferContents(a3, (uint64_t)v5);
      JSC::ArrayBufferContents::~ArrayBufferContents(v5);
      a3 += 56;
      unsigned int v5 = (JSC::ArrayBufferContents *)((char *)v5 + 56);
    }
    while (v5 != a2);
  }
}

unsigned char *IPC::Decoder::decode<std::unique_ptr<WebCore::DetachedRTCDataChannel>>(unsigned char *result, uint64_t *a2)
{
  unsigned int v5 = result;
  uint64_t v6 = a2[2];
  uint64_t v7 = *a2;
  unint64_t v8 = a2[1];
  unint64_t v9 = v6 - v7;
  if (v8 <= v9)
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v38 = a2[3];
    if (v38)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v38 + 16))(v38);
        uint64_t v37 = *a2;
        uint64_t v36 = a2[1];
      }
      else
      {
        uint64_t v36 = 0;
        uint64_t v37 = 0;
      }
    }
    goto LABEL_46;
  }
  unint64_t v10 = (unsigned __int8 *)(v7 + v9);
  a2[2] = (uint64_t)(v10 + 1);
  if (!v7)
  {
    uint64_t v36 = v8;
    uint64_t v37 = 0;
LABEL_46:
    unint64_t v8 = 0;
    uint64_t v7 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v39 = a2[3];
    if (v39)
    {
      if (v36)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v39 + 16))(v39, v37, v36);
        uint64_t v7 = *a2;
        unint64_t v8 = a2[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v7 = 0;
      }
    }
    goto LABEL_47;
  }
  unsigned int v11 = *v10;
  if (v11 >= 2)
  {
LABEL_47:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v40 = a2[3];
    if (v40 && v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 16))(v40, v7);
    }
    *unsigned int v5 = 0;
    v5[8] = 0;
    goto LABEL_39;
  }
  if (!v11)
  {
    *(void *)double result = 0;
    result[8] = 1;
    return result;
  }
  IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(a2, (uint64_t)&v71);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v69);
  unsigned int v12 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a2);
  unint64_t v13 = IPC::Decoder::decode<std::optional<unsigned short>>(a2);
  unint64_t v14 = IPC::Decoder::decode<std::optional<unsigned short>>(a2);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)v64);
  int v15 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a2);
  double result = (unsigned char *)IPC::Decoder::decode<std::optional<unsigned short>>(a2);
  uint64_t v16 = result;
  unint64_t v17 = a2[1];
  uint64_t v18 = (WTF::StringImpl *)*a2;
  unint64_t v19 = a2[2] - *a2;
  uint64_t v55 = v5;
  __int16 v54 = v15;
  if (v17 <= v19)
  {
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v43 = a2[3];
    if (v43)
    {
      if (v17)
      {
        (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
        uint64_t v42 = *a2;
        uint64_t v41 = a2[1];
      }
      else
      {
        uint64_t v41 = 0;
        uint64_t v42 = 0;
      }
    }
    goto LABEL_50;
  }
  uint64_t v20 = (unsigned __int8 *)v18 + v19;
  a2[2] = (uint64_t)(v20 + 1);
  if (!v18)
  {
    uint64_t v41 = v17;
    uint64_t v42 = 0;
LABEL_50:
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v44 = a2[3];
    if (v44)
    {
      if (v41)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v44 + 16))(v44, v42, v41);
        uint64_t v18 = (WTF::StringImpl *)*a2;
        unint64_t v17 = a2[1];
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
    goto LABEL_51;
  }
  unsigned int v3 = *v20;
  if (v3 <= 3)
  {
    unsigned int v21 = v3 | 0x100;
    goto LABEL_9;
  }
LABEL_51:
  *a2 = 0;
  a2[1] = 0;
  uint64_t v45 = a2[3];
  if (!v45
    || !v17
    || (double result = (unsigned char *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v45 + 16))(v45, v18), !*a2))
  {
    if (LOBYTE(v64[1]))
    {
      unint64_t v52 = v64[0];
      v64[0] = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2) {
          WTF::StringImpl::destroy(v52, v18);
        }
        else {
          *(_DWORD *)v52 -= 2;
        }
      }
    }
    uint64_t v46 = *a2;
    uint64_t v47 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v48 = a2[3];
    if (v48 && v47) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 16))(v48, v46);
    }
    LOBYTE(v12) = 0;
    int v23 = 1;
    goto LABEL_17;
  }
  LOBYTE(v3) = 0;
  unsigned int v21 = 0;
LABEL_9:
  if ((v12 & 0xFF0000) == 0) {
    goto LABEL_42;
  }
  if (!WORD2(v13)) {
    goto LABEL_42;
  }
  if (!WORD2(v14)) {
    goto LABEL_42;
  }
  if (!LOBYTE(v64[1])) {
    goto LABEL_42;
  }
  uint64_t v22 = v64[0];
  v64[0] = 0;
  if ((v15 & 0xFF0000) == 0 || !WORD2(v16) || v21 <= 0xFF) {
    goto LABEL_42;
  }
  uint64_t v53 = v22;
  int v23 = 0;
  int v15 = v14 << 8;
  unsigned int v2 = v12 >> 8;
LABEL_17:
  double result = (unsigned char *)IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>(a2);
  uint64_t v24 = *a2;
  if (!*a2)
  {
    int v29 = 0;
    LOBYTE(v56) = 0;
    unsigned __int8 v63 = 0;
    if (v53) {
      char v49 = v23;
    }
    else {
      char v49 = 1;
    }
    if ((v49 & 1) == 0)
    {
      if (*(_DWORD *)v53 == 2)
      {
        WTF::StringImpl::destroy(v53, v18);
        int v29 = 0;
      }
      else
      {
        int v29 = 0;
        *(_DWORD *)v53 -= 2;
      }
    }
LABEL_28:
    if (v70)
    {
      uint64_t v30 = v69;
      uint64_t v69 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
        {
          WTF::StringImpl::destroy(v30, v18);
          if (!v24)
          {
LABEL_61:
            uint64_t v18 = (WTF::StringImpl *)*a2;
            uint64_t v50 = a2[1];
            *a2 = 0;
            a2[1] = 0;
            uint64_t v51 = a2[3];
            if (v51 && v50)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v51 + 16))(v51, v18);
              int v29 = v63;
            }
          }
LABEL_36:
          if (v29)
          {
            uint64_t v31 = WTF::fastMalloc((WTF *)0x40);
            *(_OWORD *)uint64_t v31 = v56;
            uint64_t v32 = v57;
            uint64_t v57 = 0;
            *(void *)(v31 + 16) = v32;
            uint64_t v33 = v58;
            *(unsigned char *)(v31 + 32) = v59;
            *(void *)(v31 + 24) = v33;
            uint64_t v34 = v60;
            unint64_t v60 = 0;
            *(void *)(v31 + 40) = v34;
            LODWORD(v34) = v61[0];
            *(_DWORD *)(v31 + 51) = *(_DWORD *)((char *)v61 + 3);
            *(_DWORD *)(v31 + 48) = v34;
            *(unsigned char *)(v31 + 56) = v62;
            *(void *)uint64_t v55 = v31;
            v55[8] = 1;
            return (unsigned char *)std::__optional_destruct_base<WebCore::DetachedRTCDataChannel,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v56, v35);
          }
          unsigned char *v55 = 0;
          v55[8] = 0;
          std::__optional_destruct_base<WebCore::DetachedRTCDataChannel,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v56, v18);
LABEL_39:
          uint64_t v18 = (WTF::StringImpl *)*a2;
          unint64_t v17 = a2[1];
          *a2 = 0;
          a2[1] = 0;
          double result = (unsigned char *)a2[3];
          if (!result) {
            return result;
          }
          goto LABEL_43;
        }
        *(_DWORD *)v30 -= 2;
      }
    }
    if (!v24) {
      goto LABEL_61;
    }
    goto LABEL_36;
  }
  if (v72)
  {
    if (v70)
    {
      if (!v23)
      {
        char v25 = (char)result;
        if ((unsigned __int16)result > 0xFFu)
        {
          *(_OWORD *)unint64_t v64 = v71;
          WTF::String::isolatedCopy();
          *(_WORD *)char v66 = v12 | (unsigned __int16)((_WORD)v2 << 8);
          *(_WORD *)&v66[2] = v13;
          v66[4] = BYTE2(v13);
          *(_DWORD *)&v66[5] = v15;
          unsigned int v67 = v53;
          *(_WORD *)int v68 = v54;
          *(_WORD *)&v68[2] = (_WORD)v16;
          v68[4] = BYTE2(v16);
          v68[6] = v3;
          WTF::String::isolatedCopy();
          uint64_t v26 = v73;
          unsigned __int8 v73 = 0;
          uint64_t v27 = v67;
          unsigned int v67 = v26;
          if (v27)
          {
            int v28 = *(_DWORD *)v27 - 2;
            if (*(_DWORD *)v27 != 2)
            {
LABEL_26:
              *(_DWORD *)uint64_t v27 = v28;
              goto LABEL_27;
            }
            WTF::StringImpl::destroy(v27, v18);
            uint64_t v27 = v73;
            unsigned __int8 v73 = 0;
            if (v27)
            {
              int v28 = *(_DWORD *)v27 - 2;
              if (*(_DWORD *)v27 == 2)
              {
                WTF::StringImpl::destroy(v27, v18);
                goto LABEL_27;
              }
              goto LABEL_26;
            }
          }
LABEL_27:
          uint64_t v57 = v65;
          uint64_t v58 = *(void *)v66;
          long long v56 = *(_OWORD *)v64;
          char v59 = v66[8];
          unint64_t v60 = v67;
          v61[0] = *(_DWORD *)v68;
          *(_DWORD *)((char *)v61 + 3) = *(_DWORD *)&v68[3];
          char v62 = v25;
          int v29 = 1;
          unsigned __int8 v63 = 1;
          goto LABEL_28;
        }
      }
    }
  }
LABEL_42:
  __break(1u);
LABEL_43:
  if (v17) {
    return (unsigned char *)(*(uint64_t (**)(unsigned char *, WTF::StringImpl *))(*(void *)result + 16))(result, v18);
  }
  return result;
}

void sub_198947E0C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,WTF::StringImpl *a28)
{
}

uint64_t std::__optional_destruct_base<WebCore::DetachedRTCDataChannel,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned int v3 = *(WTF::StringImpl **)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>>(uint64_t result, IPC::Decoder *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v19 = *((void *)a2 + 3);
    if (v19)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        uint64_t v18 = *(void *)a2;
        unint64_t v17 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
    goto LABEL_17;
  }
  unint64_t v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
LABEL_37:
    unint64_t v17 = v6;
    uint64_t v18 = v5;
LABEL_17:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v20 = *((void *)a2 + 3);
    if (v20)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_18;
  }
  unsigned int v9 = *v8;
  if (v9 < 2)
  {
    if (!v9)
    {
      *(void *)double result = 0;
      goto LABEL_14;
    }
    LOWORD(v35) = 0;
    IPC::Decoder::operator>><BOOL>(a2, &v35);
    int v10 = BYTE1(v35);
    if (BYTE1(v35))
    {
      char v11 = v35;
    }
    else
    {
      uint64_t v22 = *(void *)a2;
      uint64_t v23 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v24 = *((void *)a2 + 3);
      if (v24 && v23) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
      }
      char v11 = 0;
    }
    unint64_t v12 = IPC::Decoder::decode<long long>(a2);
    char v14 = v13;
    IPC::Decoder::decode<std::optional<unsigned long long>>(a2, (uint64_t)&v35);
    IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, &v32);
    uint64_t v5 = *(void *)a2;
    if (*(void *)a2)
    {
      if (v10 && v14 && v37 && v34)
      {
        int v15 = v32;
        uint64_t v16 = v33;
        uint64_t v30 = v35;
        char v31 = v36;
        double result = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)double result = 1;
        *(unsigned char *)(result + 8) = v11;
        *(void *)(result + 16) = v12;
        *(void *)(result + 24) = v30;
        *(unsigned char *)(result + 32) = v31;
        *(void *)(result + 40) = v15;
        *(void *)(result + 48) = v16;
        *(void *)uint64_t v3 = result;
LABEL_14:
        *(unsigned char *)(v3 + 8) = 1;
        return result;
      }
    }
    else
    {
      if (v34)
      {
        int v29 = v32;
        if (v32)
        {
          uint64_t v32 = 0;
          LODWORD(v33) = 0;
          WTF::fastFree(v29, 0);
        }
      }
      uint64_t v25 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v26 = *((void *)a2 + 3);
      if (!v26) {
        goto LABEL_25;
      }
      if (!v25) {
        goto LABEL_25;
      }
      (*(void (**)(uint64_t))(*(void *)v26 + 16))(v26);
      if (!*(void *)a2) {
        goto LABEL_25;
      }
    }
    __break(1u);
    goto LABEL_37;
  }
LABEL_18:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v21 = *((void *)a2 + 3);
  if (v21 && v6) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v5);
  }
LABEL_25:
  *(unsigned char *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 0;
  uint64_t v27 = *(void *)a2;
  uint64_t v28 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  double result = *((void *)a2 + 3);
  if (result)
  {
    if (v28) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v27);
    }
  }
  return result;
}

void sub_1989482B4(_Unwind_Exception *exception_object, void *a2)
{
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::RefPtr<WebCore::WebCodecsEncodedAudioChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedAudioChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedAudioChunkStorage>>>(uint64_t result, IPC::Decoder *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v19 = *((void *)a2 + 3);
    if (v19)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        uint64_t v18 = *(void *)a2;
        unint64_t v17 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
    goto LABEL_17;
  }
  unint64_t v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
LABEL_37:
    unint64_t v17 = v6;
    uint64_t v18 = v5;
LABEL_17:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v20 = *((void *)a2 + 3);
    if (v20)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_18;
  }
  unsigned int v9 = *v8;
  if (v9 < 2)
  {
    if (!v9)
    {
      *(void *)double result = 0;
      goto LABEL_14;
    }
    LOWORD(v35) = 0;
    IPC::Decoder::operator>><BOOL>(a2, &v35);
    int v10 = BYTE1(v35);
    if (BYTE1(v35))
    {
      char v11 = v35;
    }
    else
    {
      uint64_t v22 = *(void *)a2;
      uint64_t v23 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v24 = *((void *)a2 + 3);
      if (v24 && v23) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
      }
      char v11 = 0;
    }
    unint64_t v12 = IPC::Decoder::decode<long long>(a2);
    char v14 = v13;
    IPC::Decoder::decode<std::optional<unsigned long long>>(a2, (uint64_t)&v35);
    IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, &v32);
    uint64_t v5 = *(void *)a2;
    if (*(void *)a2)
    {
      if (v10 && v14 && v37 && v34)
      {
        int v15 = v32;
        uint64_t v16 = v33;
        uint64_t v30 = v35;
        char v31 = v36;
        double result = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)double result = 1;
        *(unsigned char *)(result + 8) = v11;
        *(void *)(result + 16) = v12;
        *(void *)(result + 24) = v30;
        *(unsigned char *)(result + 32) = v31;
        *(void *)(result + 40) = v15;
        *(void *)(result + 48) = v16;
        *(void *)uint64_t v3 = result;
LABEL_14:
        *(unsigned char *)(v3 + 8) = 1;
        return result;
      }
    }
    else
    {
      if (v34)
      {
        int v29 = v32;
        if (v32)
        {
          uint64_t v32 = 0;
          LODWORD(v33) = 0;
          WTF::fastFree(v29, 0);
        }
      }
      uint64_t v25 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v26 = *((void *)a2 + 3);
      if (!v26) {
        goto LABEL_25;
      }
      if (!v25) {
        goto LABEL_25;
      }
      (*(void (**)(uint64_t))(*(void *)v26 + 16))(v26);
      if (!*(void *)a2) {
        goto LABEL_25;
      }
    }
    __break(1u);
    goto LABEL_37;
  }
LABEL_18:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v21 = *((void *)a2 + 3);
  if (v21 && v6) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v5);
  }
LABEL_25:
  *(unsigned char *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 0;
  uint64_t v27 = *(void *)a2;
  uint64_t v28 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  double result = *((void *)a2 + 3);
  if (result)
  {
    if (v28) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v27);
    }
  }
  return result;
}

void sub_1989485E4(_Unwind_Exception *exception_object, void *a2)
{
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>,void>::encode<IPC::Encoder,std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>,void>::encode<IPC::Encoder,std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>,0ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 32))
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>,void>::encode<IPC::Encoder,std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>,0ul>(a1, a2, a3);
  }
  char v4 = *(unsigned char *)(a2 + 8);
  return (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(a1, &v4);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>,void>::encode<IPC::Encoder,std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>,0ul>(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 32) == 1)
    {
      uint64_t v3 = a2 + 8;
    }
    else
    {
      double result = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    }
    return (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WebCore::Cursor::CustomCursorIPCData>,void>::encode<IPC::Encoder,std::optional<WebCore::Cursor::CustomCursorIPCData>>(result, v3);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::Cursor::CustomCursorIPCData>,void>::encode<IPC::Encoder,std::optional<WebCore::Cursor::CustomCursorIPCData>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  double result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198948754);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      IPC::ArgumentCoder<WebCore::Image,void>::encode(a1, *(WebCore::Image **)a2);
      int v9 = *(_DWORD *)(a2 + 8);
      IPC::Encoder::operator<<<int>(a1, &v9);
      int v8 = *(_DWORD *)(a2 + 12);
      return (unsigned char *)IPC::Encoder::operator<<<int>(a1, &v8);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>,void>::decode<IPC::Decoder>(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198948774);
    }
    unsigned char *result = 0;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = (unint64_t *)result;
  unint64_t v4 = result[1];
  unint64_t v5 = *result;
  unint64_t v6 = result[2] - *result;
  if (v4 <= v6)
  {
    unint64_t v24 = 0;
    unint64_t v25 = 0;
    unsigned char *result = 0;
    result[1] = 0;
    uint64_t v26 = result[3];
    if (!v26) {
      goto LABEL_37;
    }
    if (!v4)
    {
      unint64_t v24 = 0;
      unint64_t v25 = 0;
      goto LABEL_37;
    }
    goto LABEL_58;
  }
  uint64_t v7 = (unsigned __int8 *)(v5 + v6);
  result[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
LABEL_62:
    unint64_t v24 = v4;
    unint64_t v25 = v5;
    goto LABEL_37;
  }
  if (*v7 < 2u)
  {
    int v9 = &v7[-v5 + 1];
    if (*v7)
    {
      if (v4 <= (unint64_t)v9)
      {
        unint64_t v27 = 0;
        unint64_t v28 = 0;
        unsigned char *result = 0;
        result[1] = 0;
        uint64_t v29 = result[3];
        if (v29)
        {
          (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
          unint64_t v27 = 0;
          unint64_t v38 = *v2;
          unint64_t v39 = v2[1];
          unint64_t v40 = v2[3];
          *unsigned int v2 = 0;
          v2[1] = 0;
          unint64_t v28 = 0;
          if (v40)
          {
            if (v39)
            {
              (*(void (**)(unint64_t, unint64_t))(*(void *)v40 + 16))(v40, v38);
              unint64_t v28 = *v2;
              unint64_t v27 = v2[1];
            }
          }
        }
      }
      else
      {
        result[2] = (uint64_t)(v7 + 2);
        unsigned int v10 = v7[1];
        if (v10 < 2)
        {
          if (v10)
          {
            IPC::ArgumentCoder<WebCore::Image,void>::decode(&v49, result);
            if (!v50)
            {
              unint64_t v31 = *v2;
              unint64_t v32 = v2[1];
              *unsigned int v2 = 0;
              v2[1] = 0;
              unint64_t v33 = v2[3];
              if (v33)
              {
                if (v32) {
                  (*(void (**)(unint64_t, unint64_t))(*(void *)v33 + 16))(v33, v31);
                }
              }
            }
            double result = (uint64_t *)IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(v2);
            uint64_t v13 = v11;
            if (!(_BYTE)v11)
            {
              unint64_t v34 = *v2;
              unint64_t v12 = v2[1];
              *unsigned int v2 = 0;
              v2[1] = 0;
              unint64_t v35 = v2[3];
              if (v35)
              {
                if (v12)
                {
                  unint64_t v41 = v11;
                  uint64_t v42 = result;
                  (*(void (**)(unint64_t, unint64_t))(*(void *)v35 + 16))(v35, v34);
                  unint64_t v11 = v41;
                  double result = v42;
                }
              }
            }
            IntPoint v47 = (IntPoint)result;
            int v48 = v11;
            int v14 = v50;
            if (!*v2)
            {
LABEL_18:
              if (v14)
              {
                uint64_t v18 = v49;
                char v49 = 0;
                if (v18)
                {
                  if (v18[2] == 1) {
                    (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
                  }
                  else {
                    --v18[2];
                  }
                }
              }
              unint64_t v11 = *v2;
              unint64_t v12 = v2[1];
              *unsigned int v2 = 0;
              v2[1] = 0;
              double result = (uint64_t *)v2[3];
              if (!result) {
                goto LABEL_33;
              }
              goto LABEL_41;
            }
            if (!v50) {
              goto LABEL_40;
            }
            float v15 = (*(float (**)(_DWORD *, void))(*(void *)v49 + 168))(v49, 0);
            uint64_t v44 = 0;
            float v45 = v15;
            int v46 = v16;
            if (!v13) {
              goto LABEL_40;
            }
            WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v43, &v47);
            double result = (uint64_t *)WebCore::FloatRect::contains();
            if (*v2) {
              char v17 = (char)result;
            }
            else {
              char v17 = 0;
            }
            int v14 = v50;
            if ((v17 & 1) == 0) {
              goto LABEL_18;
            }
            if (!v50 || (uint64_t v20 = v49, v49 = 0, !(_BYTE)v48))
            {
LABEL_40:
              __break(1u);
LABEL_41:
              if (v12) {
                (*(void (**)(uint64_t *, unint64_t))(*result + 16))(result, v11);
              }
LABEL_33:
              unint64_t v22 = *v2;
              unint64_t v23 = v2[1];
              *unsigned int v2 = 0;
              v2[1] = 0;
              double result = (uint64_t *)v2[3];
              if (result && v23) {
                double result = (uint64_t *)(*(uint64_t (**)(uint64_t *, unint64_t))(*result + 16))(result, v22);
              }
              goto LABEL_4;
            }
            IntPoint v21 = v47;
            *(void *)(a2 + 8) = v20;
            *(IntPoint *)(a2 + 16) = v21;
            char v8 = 1;
            *(unsigned char *)(a2 + 24) = 1;
          }
          else
          {
            *(unsigned char *)(a2 + 8) = 0;
            *(unsigned char *)(a2 + 24) = 0;
            char v8 = 1;
          }
          *(_DWORD *)(a2 + 32) = 1;
          goto LABEL_30;
        }
        unint64_t v27 = v4;
        unint64_t v28 = v5;
      }
      *unsigned int v2 = 0;
      v2[1] = 0;
      unint64_t v30 = v2[3];
      if (v30 && v27) {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v30 + 16))(v30, v28, v27);
      }
      goto LABEL_33;
    }
    if (v4 > (unint64_t)v9)
    {
      result[2] = (uint64_t)(v7 + 2);
      unsigned int v19 = v7[1];
      if (v19 < 0x2D)
      {
        *(unsigned char *)(a2 + 8) = v19;
        *(_DWORD *)(a2 + 32) = 0;
        char v8 = 1;
        goto LABEL_30;
      }
      goto LABEL_62;
    }
    unint64_t v24 = 0;
    unint64_t v25 = 0;
    unsigned char *result = 0;
    result[1] = 0;
    uint64_t v36 = result[3];
    if (!v36) {
      goto LABEL_37;
    }
    (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
    unint64_t v24 = 0;
    unint64_t v5 = *v2;
    unint64_t v37 = v2[1];
    uint64_t v26 = v2[3];
    *unsigned int v2 = 0;
    v2[1] = 0;
    unint64_t v25 = 0;
    if (!v26 || !v37)
    {
LABEL_37:
      *unsigned int v2 = 0;
      v2[1] = 0;
      double result = (uint64_t *)v2[3];
      if (result && v24) {
        double result = (uint64_t *)(*(uint64_t (**)(uint64_t *, unint64_t, unint64_t))(*result + 16))(result, v25, v24);
      }
      goto LABEL_4;
    }
LABEL_58:
    (*(void (**)(uint64_t, unint64_t))(*(void *)v26 + 16))(v26, v5);
    unint64_t v25 = *v2;
    unint64_t v24 = v2[1];
    goto LABEL_37;
  }
LABEL_4:
  char v8 = 0;
  *(unsigned char *)a2 = 0;
LABEL_30:
  *(unsigned char *)(a2 + 40) = v8;
  return result;
}

void sub_198948C28(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 - 40))
  {
    uint64_t v3 = *(_DWORD **)(v1 - 48);
    *(void *)(v1 - 48) = 0;
    if (v3)
    {
      if (v3[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
      }
      else {
        --v3[2];
      }
    }
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<float,int>,void>::encode<IPC::Encoder,std::variant<float,int> const&>(IPC::Encoder *result, int *a2, uint64_t a3)
{
  if (!a3)
  {
    if (!a2[1])
    {
      float v3 = *(float *)a2;
      return (IPC::Encoder *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(result, v3);
    }
    return (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (a3 != 1) {
    return result;
  }
  if (a2[1] != 1) {
    return (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  int v4 = *a2;

  return (IPC::Encoder *)IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(result, v4);
}

uint64_t WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain>(uint64_t a1, unint64_t a2)
{
  float v3 = (uint64_t *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *v3;
  *float v3 = 0;
  *(void *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      double result = (uint64_t)WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)(*(void *)result + 8 * a2), (WTF::StringImpl *)(*(void *)result + 8 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      double result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(void *)uint64_t v3 = result;
      if ((WTF::StringImpl *)result != v5) {
        double result = (uint64_t)WTF::VectorMover<false,WebCore::RegistrableDomain>::move(v5, (WTF::StringImpl *)((char *)v5 + 8 * v4), (WTF::StringImpl **)result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::reinsert(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::lookupForReinsert(a1, (WTF::ASCIICaseInsensitiveHash **)a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 8, v4);
  uint64_t v6 = *(WTF::StringImpl **)v3;
  *(void *)uint64_t v3 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *(WTF::ASCIICaseInsensitiveHash **)a2;
  *(void *)a2 = 0;
  *(void *)uint64_t v3 = v7;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(v3 + 8) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(v3 + 16) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(v3 + 20) = v8;
  return v3;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::lookupForReinsert(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  unsigned int v4 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2);
  int v6 = 0;
  do
  {
    unsigned int v7 = v4 & v3;
    int v8 = WTF::equal(*(WTF **)(v2 + 24 * (v4 & v3)), 0, v5);
    unsigned int v4 = ++v6 + v7;
  }
  while (!v8);
  return v2 + 24 * v7;
}

WTF *WTF::GenericHashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  if (v4) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 8 * v4));
  }

  return WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1, a2);
}

unsigned int *WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, WTF *this)
{
  if (result[2] > (unint64_t)this)
  {
    int v3 = result;
    if (result[3] > (unint64_t)this) {
      double result = WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, this);
    }
    uint64_t v4 = *(WTF::StringImpl **)v3;
    if (this)
    {
      if ((unint64_t)this >= 0x6666667)
      {
        __break(0xC471u);
        return result;
      }
      unsigned int v5 = v3[3];
      int v6 = (WTF *)(40 * (void)this);
      double result = (unsigned int *)WTF::fastMalloc(v6);
      v3[2] = (v6 & 0xFFFFFFF8) / 0x28;
      *(void *)int v3 = result;
      if (result != (unsigned int *)v4) {
        double result = (unsigned int *)WTF::VectorMover<false,WTF::URL>::move(v4, (uint64_t *)v4 + 5 * v5, (uint64_t)result);
      }
    }
    if (v4)
    {
      if (*(WTF::StringImpl **)v3 == v4)
      {
        *(void *)int v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, this);
    }
  }
  return result;
}

unsigned int *WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int v2 = a2;
  int v3 = result;
  uint64_t v4 = (WTF::StringImpl *)result[3];
  if (v4 != a2)
  {
    unsigned int v5 = (unsigned int **)(*(void *)result + 40 * (void)a2);
    uint64_t v6 = 40 * v4 - 40 * (void)a2;
    do
    {
      double result = *v5;
      *unsigned int v5 = 0;
      if (result)
      {
        if (*result == 2) {
          double result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        }
        else {
          *result -= 2;
        }
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

unint64_t *IPC::Decoder::decode<WebCore::MultiRepresentationHEICAttachmentSingleImage>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>>(a2, &v10);
  double result = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
  if (*a2)
  {
    if (v11)
    {
      uint64_t v6 = v10;
      unsigned int v10 = 0;
      if (v5)
      {
        *(void *)a1 = v6;
        *(void *)(a1 + 8) = result;
        *(unsigned char *)(a1 + 16) = 1;
        return result;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (v11)
  {
    unsigned int v7 = v10;
    unsigned int v10 = 0;
    if (v7)
    {
      if (v7[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
      }
      else {
        --v7[2];
      }
    }
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  double result = (unint64_t *)a2[3];
  if (result)
  {
    if (v9) {
      return (unint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*result + 16))(result, v8);
    }
  }
  return result;
}

void sub_198949318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9, char a10)
{
  if (a10 && a9)
  {
    if (a9[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a9 + 8))(a9);
    }
    else {
      --a9[2];
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::Vector<WebCore::MultiRepresentationHEICAttachmentSingleImage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MultiRepresentationHEICAttachmentSingleImage>(_DWORD *a1, unint64_t a2)
{
  double result = (uint64_t *)WTF::Vector<WebCore::MultiRepresentationHEICAttachmentSingleImage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = (void *)(*(void *)a1 + 16 * a1[3]);
  uint64_t v5 = *result;
  uint64_t *result = 0;
  void *v4 = v5;
  v4[1] = result[1];
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::MultiRepresentationHEICAttachmentSingleImage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(_DWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::MultiRepresentationHEICAttachmentSingleImage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::MultiRepresentationHEICAttachmentSingleImage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

_DWORD *WTF::Vector<WebCore::MultiRepresentationHEICAttachmentSingleImage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(_DWORD *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198949514);
    }
    unint64_t v3 = result;
    uint64_t v4 = *(WTF **)result;
    uint64_t v5 = (void *)(*(void *)result + 16 * result[3]);
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(16 * a2));
    v3[2] = v2;
    *(void *)unint64_t v3 = v6;
    double result = WTF::VectorMover<false,WebCore::MultiRepresentationHEICAttachmentSingleImage>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)unint64_t v3 = 0;
        v3[2] = 0;
      }
      return (_DWORD *)WTF::fastFree(v4, v7);
    }
  }
  return result;
}

_DWORD *WTF::VectorMover<false,WebCore::MultiRepresentationHEICAttachmentSingleImage>::move(_DWORD *result, void *a2, void *a3)
{
  if (result != (_DWORD *)a2)
  {
    uint64_t v5 = result;
    do
    {
      uint64_t v6 = (_DWORD *)*v5;
      *uint64_t v5 = 0;
      *a3 = v6;
      a3[1] = v5[1];
      double result = (_DWORD *)*v5;
      *uint64_t v5 = 0;
      if (result)
      {
        if (result[2] == 1) {
          double result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
        }
        else {
          --result[2];
        }
      }
      v5 += 2;
      a3 += 2;
    }
    while (v5 != a2);
  }
  return result;
}

void IPC::ArgumentCoder<WTF::RetainPtr<DDScannerResult>,void>::decode<DDScannerResult,DDScannerResult*>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v4 = (const void *)((uint64_t (*)(void))*MEMORY[0x1E4FB62E8])();
  cf[0] = v4;
  if (v4) {
    CFRetain(v4);
  }
  WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v7, cf, 1);
  WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)(a1 + 56), &v7);
  IPC::decodeRequiringAllowedClasses<DDScannerResult,DDScannerResult*>((uint64_t *)a1, a2);
  if (v7) {
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(v7, v5);
  }
  CFTypeRef v6 = cf[0];
  cf[0] = 0;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_19894967C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::decodeRequiringAllowedClasses<DDScannerResult,DDScannerResult*>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::decodeObjectDirectlyRequiringAllowedClasses<DDScannerResult>(a1, (uint64_t)&cf);
  if (v5)
  {
    CFTypeRef v3 = cf;
    *(void *)a2 = cf;
    if (v3)
    {
      CFRetain(v3);
      *(unsigned char *)(a2 + 8) = 1;
      CFRelease(v3);
    }
    else
    {
      *(unsigned char *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_198949740(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

WTF::MachSendRight *IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>(IPC::Encoder *a1, unint64_t a2)
{
  if (*(unsigned char *)(a2 + 64))
  {
    char v7 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v7);
    if (*(unsigned char *)(a2 + 64))
    {
      return (WTF::MachSendRight *)IPC::ArgumentCoder<WebCore::ShareableBitmapHandle,void>::encode(a1, a2);
    }
    else
    {
      char v5 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::decode<IPC::Decoder>(v5, v6);
    }
  }
  else
  {
    char v8 = 0;
    return (WTF::MachSendRight *)IPC::Encoder::operator<<<BOOL>(a1, &v8);
  }
}

WTF::MachSendRight *IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::decode<IPC::Decoder>@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      float v15 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        a1 = v15;
        uint64_t v11 = *v15;
        unint64_t v10 = v15[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_12;
  }
  CFTypeRef v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v10 = v3;
    uint64_t v11 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      int v14 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        a1 = v14;
        uint64_t v4 = *v14;
        unint64_t v3 = v14[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebCore::ShareableBitmapHandle>((IPC::Decoder *)a1, v16);
      char v8 = v17;
      if (v17)
      {
        WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)a2, (uint64_t)v16);
        char v8 = 1;
        a2[64] = 1;
      }
      else
      {
        *a2 = 0;
      }
    }
    else
    {
      v16[0] = 0;
      char v17 = 0;
      *a2 = 0;
      a2[64] = 0;
      char v8 = 1;
    }
    a2[72] = v8;
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v16);
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  double result = (WTF::MachSendRight *)a1[3];
  if (result && v3) {
    double result = (WTF::MachSendRight *)(*(uint64_t (**)(WTF::MachSendRight *, uint64_t))(*(void *)result + 16))(result, v4);
  }
  *a2 = 0;
  a2[72] = 0;
  return result;
}

void sub_19894998C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)va);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebCore::ShareableBitmapHandle>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  if (!a2[64]) {
    IPC::Decoder::markInvalid(a1);
  }
}

void sub_1989499DC(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::SerializedPlatformDataCueValue::Data>,void>::decode<IPC::Decoder>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v60[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(WTF::StringImpl **)a1;
  unint64_t v6 = *(void *)(a1 + 16) - *(void *)a1;
  if (v4 <= v6)
  {
LABEL_84:
    unint64_t v31 = 0;
    unint64_t v32 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v33 = *(void *)(a1 + 24);
    if (v33)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v33 + 16))(v33, v5);
        unint64_t v32 = *(WTF::StringImpl **)a1;
        unint64_t v31 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v31 = 0;
        unint64_t v32 = 0;
      }
    }
    goto LABEL_85;
  }
  unsigned int v7 = (unsigned __int8 *)v5 + v6;
  *(void *)(a1 + 16) = v7 + 1;
  if (!v5)
  {
    unint64_t v31 = v4;
    unint64_t v32 = 0;
LABEL_85:
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v34 = *(void *)(a1 + 24);
    if (v34)
    {
      if (v31)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v34 + 16))(v34, v32, v31);
        unint64_t v5 = *(WTF::StringImpl **)a1;
        unint64_t v4 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v4 = 0;
        unint64_t v5 = 0;
      }
    }
    goto LABEL_86;
  }
  unsigned int v8 = *v7;
  if (v8 < 2)
  {
    if (!v8)
    {
      LOBYTE(v43[0]) = 0;
      char v44 = 0;
      std::__optional_move_base<WebCore::SerializedPlatformDataCueValue::Data,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v43);
      char v14 = 1;
LABEL_82:
      *(unsigned char *)(a2 + 56) = v14;
      return std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v43, v13);
    }
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v58);
    IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((IPC::Decoder *)a1, &v56);
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v54);
    unint64_t v9 = (const void *)objc_opt_class();
    v60[0] = v9;
    if (v9) {
      CFRetain(v9);
    }
    WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v51, v60, 1);
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)(a1 + 56), &v51);
    IPC::decodeObjectDirectlyRequiringAllowedClasses<NSLocale>((WTF::StringImpl *)a1, (uint64_t)&cf);
    int v11 = v46;
    if ((_BYTE)v46)
    {
      CFTypeRef v12 = cf;
      if (cf)
      {
        CFRetain(cf);
        CFRelease(v12);
      }
    }
    else
    {
      CFTypeRef v12 = 0;
    }
    if (v51) {
      WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(v51, v10);
    }
    CFTypeRef v15 = v60[0];
    v60[0] = 0;
    if (v15) {
      CFRelease(v15);
    }
    unint64_t v4 = *(void *)(a1 + 8);
    if (!v11)
    {
      unint64_t v35 = *(WTF::StringImpl **)a1;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v36 = *(void *)(a1 + 24);
      if (!v36 || !v4)
      {
        unint64_t v4 = 0;
        unint64_t v5 = *(WTF::StringImpl **)a1;
        goto LABEL_90;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v36 + 16))(v36, v35);
      unint64_t v4 = *(void *)(a1 + 8);
    }
    unint64_t v5 = *(WTF::StringImpl **)a1;
    unint64_t v16 = *(void *)(a1 + 16) - *(void *)a1;
    if (v4 > v16)
    {
      char v17 = (unsigned __int8 *)v5 + v16;
      *(void *)(a1 + 16) = v17 + 1;
      if (v5)
      {
        unsigned int v18 = *v17;
        if (v18 >= 5)
        {
LABEL_20:
          LOBYTE(v51) = 0;
          char v53 = 0;
LABEL_21:
          unint64_t v5 = *(WTF::StringImpl **)a1;
          unint64_t v4 = *(void *)(a1 + 8);
          *(void *)a1 = 0;
          *(void *)(a1 + 8) = 0;
          uint64_t v19 = *(void *)(a1 + 24);
          if (v19 && v4) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v19 + 16))(v19, v5);
          }
          goto LABEL_40;
        }
        switch(v18)
        {
          case 0u:
            uint64_t v51 = 0;
            int v52 = 0;
            char v53 = 1;
            goto LABEL_40;
          case 1u:
            IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&cf);
            int v20 = v46;
            if ((_BYTE)v46)
            {
              uint64_t v51 = (const void **)cf;
              int v20 = 1;
              int v52 = 1;
              goto LABEL_39;
            }
            break;
          case 2u:
            IPC::Decoder::decode<WTF::RetainPtr<NSDate>>((uint64_t)&cf, a1);
            int v20 = v46;
            if ((_BYTE)v46)
            {
              uint64_t v51 = (const void **)cf;
              int v21 = 2;
LABEL_37:
              int v52 = v21;
              int v20 = 1;
              goto LABEL_39;
            }
            break;
          case 3u:
            IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>((uint64_t *)a1, (uint64_t)&cf);
            int v20 = v46;
            if ((_BYTE)v46)
            {
              uint64_t v51 = (const void **)cf;
              int v21 = 3;
              goto LABEL_37;
            }
            break;
          default:
            IPC::Decoder::decode<WTF::RetainPtr<NSData>>(a1, (uint64_t)&cf);
            int v20 = v46;
            if ((_BYTE)v46)
            {
              uint64_t v51 = (const void **)cf;
              int v21 = 4;
              goto LABEL_37;
            }
            break;
        }
        LOBYTE(v51) = 0;
LABEL_39:
        char v53 = v20;
        if (!v20) {
          goto LABEL_21;
        }
LABEL_40:
        if (!*(void *)a1)
        {
          LOBYTE(v43[0]) = 0;
          char v44 = 0;
LABEL_61:
          if (v53 && v52 != -1) {
            ((void (*)(CFTypeRef *, const void ***))off_1EE9B4D80[v52])(&cf, &v51);
          }
          if (v11 && v12) {
            CFRelease(v12);
          }
          if (v55)
          {
            unint64_t v28 = v54;
            __int16 v54 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2) {
                WTF::StringImpl::destroy(v28, v5);
              }
              else {
                *(_DWORD *)v28 -= 2;
              }
            }
          }
          if (v57 && v56) {
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v56, v5);
          }
          if (v59)
          {
            uint64_t v29 = v58;
            uint64_t v58 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2) {
                WTF::StringImpl::destroy(v29, v5);
              }
              else {
                *(_DWORD *)v29 -= 2;
              }
            }
          }
          if (v44
            || (uint64_t v13 = *(WTF::StringImpl **)a1,
                uint64_t v41 = *(void *)(a1 + 8),
                *(void *)a1 = 0,
                *(void *)(a1 + 8) = 0,
                (uint64_t v42 = *(void *)(a1 + 24)) != 0)
            && v41
            && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v42 + 16))(v42, v13), v44))
          {
            WebCore::SerializedPlatformDataCueValue::Data::Data((void *)a2, v43);
            char v14 = 1;
            *(unsigned char *)(a2 + 48) = 1;
          }
          else
          {
            char v14 = 0;
            *(unsigned char *)a2 = 0;
          }
          goto LABEL_82;
        }
        if (v59)
        {
          unint64_t v22 = v58;
          uint64_t v58 = 0;
          CFTypeRef cf = v22;
          if (v57)
          {
            unint64_t v23 = v56;
            long long v56 = 0;
            int v46 = v23;
            if (v55)
            {
              unint64_t v24 = v54;
              __int16 v54 = 0;
              IntPoint v47 = v24;
              if (v11)
              {
                CFTypeRef v48 = v12;
                if (v53)
                {
                  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDate>,WTF::RetainPtr<NSNumber>,WTF::RetainPtr<NSData>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v49, (uint64_t)&v51);
                  WebCore::SerializedPlatformDataCueValue::Data::Data(v43, (uint64_t *)&cf);
                  char v44 = 1;
                  if (v50 != -1) {
                    ((void (*)(CFTypeRef *, uint64_t *))off_1EE9B4D80[v50])(v60, &v49);
                  }
                  int v50 = -1;
                  CFTypeRef v25 = v48;
                  CFTypeRef v48 = 0;
                  if (v25) {
                    CFRelease(v25);
                  }
                  uint64_t v26 = v47;
                  IntPoint v47 = 0;
                  if (v26)
                  {
                    if (*(_DWORD *)v26 == 2) {
                      WTF::StringImpl::destroy(v26, v5);
                    }
                    else {
                      *(_DWORD *)v26 -= 2;
                    }
                  }
                  if (v46) {
                    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v46, v5);
                  }
                  unint64_t v27 = (WTF::StringImpl *)cf;
                  CFTypeRef cf = 0;
                  if (v27)
                  {
                    if (*(_DWORD *)v27 == 2) {
                      WTF::StringImpl::destroy(v27, v5);
                    }
                    else {
                      *(_DWORD *)v27 -= 2;
                    }
                  }
                  CFTypeRef v12 = 0;
                  goto LABEL_61;
                }
              }
            }
          }
        }
        __break(1u);
        goto LABEL_84;
      }
      unint64_t v37 = v4;
      unint64_t v38 = 0;
LABEL_91:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v40 = *(void *)(a1 + 24);
      if (v40 && v37) {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v40 + 16))(v40, v38, v37);
      }
      goto LABEL_20;
    }
LABEL_90:
    unint64_t v37 = 0;
    unint64_t v38 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v39 = *(void *)(a1 + 24);
    if (v39)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v39 + 16))(v39, v5);
        unint64_t v38 = *(WTF::StringImpl **)a1;
        unint64_t v37 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v37 = 0;
        unint64_t v38 = 0;
      }
    }
    goto LABEL_91;
  }
LABEL_86:
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t result = *(void *)(a1 + 24);
  if (result && v4) {
    uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v5);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 56) = 0;
  return result;
}

void sub_19894A314(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, CFTypeRef cf, uint64_t a20,int a21,uint64_t a22,int a23,int a24,char a25)
{
}

uint64_t IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<unsigned int>(a1);
  if ((result & 0xFF00000000) != 0)
  {
    int v5 = result;
    unint64_t v6 = 0;
    uint64_t v13 = 0;
    if (result)
    {
      while (1)
      {
        IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v11);
        if (!v12) {
          break;
        }
        uint64_t result = (uint64_t)IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v9);
        if (!v10) {
          goto LABEL_13;
        }
        if (!v12)
        {
          __break(1u);
          return result;
        }
        if ((unint64_t)v11 + 1 < 2
          || (WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>((uint64_t *)&v13, &v11, &v9, (uint64_t)v8), !v8[16]))
        {
LABEL_13:
          *a2 = 0;
          a2[8] = 0;
          std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v9);
          goto LABEL_14;
        }
        std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v9);
        uint64_t result = std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v11);
        if (!--v5)
        {
          unint64_t v6 = v13;
          goto LABEL_3;
        }
      }
      *a2 = 0;
      a2[8] = 0;
LABEL_14:
      std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v11);
      uint64_t result = (uint64_t)v13;
      if (v13) {
        return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v7);
      }
    }
    else
    {
LABEL_3:
      *(void *)a2 = v6;
      a2[8] = 1;
    }
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

void sub_19894A600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va1);
  unsigned int v7 = *(WTF::StringImpl ***)(v4 - 40);
  if (v7) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v7, v6);
  }
  _Unwind_Resume(a1);
}

void sub_19894A634()
{
}

uint64_t WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v27 = a3;
  uint64_t v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v7 = *a1) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unsigned int v9 = *((_DWORD *)*a2 + 4);
  if (v9 >= 0x100) {
    unsigned int v10 = v9 >> 8;
  }
  else {
    unsigned int v10 = WTF::StringImpl::hashSlowCase(*a2);
  }
  int v11 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v13 = v10 & v8;
    char v14 = (uint64_t *)(v7 + 16 * (v10 & v8));
    CFTypeRef v15 = (WTF *)*v14;
    if (*v14 != -1) {
      break;
    }
    int v11 = (uint64_t *)(v7 + 16 * v13);
LABEL_13:
    unsigned int v10 = i + v13;
  }
  if (!v15)
  {
    if (v11)
    {
      uint64_t *v11 = 0;
      v11[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      char v14 = v11;
    }
    uint64_t result = (uint64_t)WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineAdd<WTF::String,WTF::String>(WTF::String &&,WTF::String &&)::{lambda(void)#1}>(v14, (uint64_t *)a2, &v27);
    uint64_t v17 = *a1;
    if (*a1) {
      int v18 = *(_DWORD *)(v17 - 12) + 1;
    }
    else {
      int v18 = 1;
    }
    *(_DWORD *)(v17 - 12) = v18;
    uint64_t v21 = *a1;
    if (*a1) {
      int v22 = *(_DWORD *)(v21 - 12);
    }
    else {
      int v22 = 0;
    }
    uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
    unint64_t v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 <= 2 * v23)
      {
LABEL_26:
        uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v14);
        char v14 = (uint64_t *)result;
        uint64_t v21 = *a1;
        if (*a1) {
          unint64_t v24 = *(unsigned int *)(v21 - 4);
        }
        else {
          unint64_t v24 = 0;
        }
      }
    }
    else if (3 * v24 <= 4 * v23)
    {
      goto LABEL_26;
    }
    uint64_t v25 = v21 + 16 * v24;
    char v26 = 1;
    goto LABEL_31;
  }
  uint64_t result = WTF::equal(v15, *a2, (const WTF::StringImpl *)a3);
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v19 = *a1;
  if (*a1) {
    uint64_t v20 = *(unsigned int *)(v19 - 4);
  }
  else {
    uint64_t v20 = 0;
  }
  char v26 = 0;
  uint64_t v25 = v19 + 16 * v20;
LABEL_31:
  *(void *)a4 = v14;
  *(void *)(a4 + 8) = v25;
  *(unsigned char *)(a4 + 16) = v26;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, (WTF::StringImpl **)a2);
  int v5 = *(WTF::StringImpl **)(v4 + 8);
  *(void *)(v4 + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unint64_t v6 = *(WTF::StringImpl **)v4;
  *(void *)uint64_t v4 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  *(void *)uint64_t v4 = v7;
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(v4 + 8) = v8;
  return v4;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  unsigned int v4 = *((_DWORD *)*a2 + 4);
  if (v4 >= 0x100) {
    unsigned int v5 = v4 >> 8;
  }
  else {
    unsigned int v5 = WTF::StringImpl::hashSlowCase(*a2);
  }
  int v6 = 0;
  do
  {
    uint64_t v7 = v5 & v3;
    unsigned int v5 = ++v6 + v7;
  }
  while (*(void *)(v2 + 16 * v7));
  return v2 + 16 * v7;
}

void IPC::Decoder::decode<WTF::RetainPtr<NSString>>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WTF::RetainPtr<NSString>,void>::decode<NSString,NSString*>((const void ***)a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    unsigned int v4 = *(const void ***)a1;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v6 = *(void *)(a1 + 24);
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, const void **))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_19894A958(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 8))
  {
    int v3 = *(const void **)v1;
    *(void *)uint64_t v1 = 0;
    if (v3) {
      CFRelease(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WTF::RetainPtr<NSString>,void>::decode<NSString,NSString*>(const void ***a1@<X0>, uint64_t a2@<X8>)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  unsigned int v4 = (const void *)objc_opt_class();
  cf[0] = v4;
  if (v4) {
    CFRetain(v4);
  }
  WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v7, cf, 1);
  WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=(a1 + 7, &v7);
  IPC::decodeRequiringAllowedClasses<NSString,NSString*>((WTF::StringImpl *)a1, a2);
  if (v7) {
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(v7, v5);
  }
  CFTypeRef v6 = cf[0];
  cf[0] = 0;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_19894AA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::decodeRequiringAllowedClasses<NSString,NSString*>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::decodeObjectDirectlyRequiringAllowedClasses<NSString>(a1, (uint64_t)&cf);
  if (v5)
  {
    CFTypeRef v3 = cf;
    *(void *)a2 = cf;
    if (v3)
    {
      CFRetain(v3);
      *(unsigned char *)(a2 + 8) = 1;
      CFRelease(v3);
    }
    else
    {
      *(unsigned char *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_19894AAFC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WTF::RetainPtr<NSNumber>,void>::decode<NSNumber,NSNumber*>((uint64_t)a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_19894AB80(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 8))
  {
    CFTypeRef v3 = *(const void **)v1;
    *(void *)uint64_t v1 = 0;
    if (v3) {
      CFRelease(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WTF::RetainPtr<NSNumber>,void>::decode<NSNumber,NSNumber*>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v4 = (const void *)objc_opt_class();
  cf[0] = v4;
  if (v4) {
    CFRetain(v4);
  }
  WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v7, cf, 1);
  WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)(a1 + 56), &v7);
  IPC::decodeRequiringAllowedClasses<NSNumber,NSNumber*>((uint64_t *)a1, a2);
  if (v7) {
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(v7, v5);
  }
  CFTypeRef v6 = cf[0];
  cf[0] = 0;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_19894AC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::decodeRequiringAllowedClasses<NSNumber,NSNumber*>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::decodeObjectDirectlyRequiringAllowedClasses<NSNumber>(a1, (uint64_t)&cf);
  if (v5)
  {
    CFTypeRef v3 = cf;
    *(void *)a2 = cf;
    if (v3)
    {
      CFRetain(v3);
      *(unsigned char *)(a2 + 8) = 1;
      CFRelease(v3);
    }
    else
    {
      *(unsigned char *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_19894AD28(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 32))
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul>(a1, a2, a3);
  }
  unint64_t v4 = a2 + 8;

  return (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WebCore::SharedMemoryHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::SharedMemoryHandle>>(a1, v4);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul>(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 32) == 1)
    {
      CFTypeRef v3 = (uint64_t *)(a2 + 8);
    }
    else
    {
      uint64_t result = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    }
    return (IPC::Encoder *)IPC::VectorArgumentCoder<false,std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(result, v3);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(IPC::Encoder *a1, uint64_t *a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *((unsigned int *)a2 + 3));
  uint64_t v5 = *((unsigned int *)a2 + 3);
  if (v5)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = v6 + 16 * v5;
    do
    {
      uint64_t v8 = *(const void **)v6;
      size_t v9 = *(void *)(v6 + 8);
      v6 += 16;
      unint64_t result = IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v8, v9);
    }
    while (v6 != v7);
  }
  return result;
}

void IPC::ArgumentCoder<std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v6)
  {
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v20 = *((void *)a1 + 3);
    if (v20)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v5, v4);
        uint64_t v19 = *(void *)a1;
        unint64_t v18 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v18 = 0;
        uint64_t v19 = 0;
      }
    }
    goto LABEL_23;
  }
  uint64_t v7 = (unsigned char *)(v5 + v6);
  *((void *)a1 + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v18 = v4;
    uint64_t v19 = 0;
LABEL_23:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v21 = *((void *)a1 + 3);
    if (v21 && v18) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19);
    }
    goto LABEL_4;
  }
  if (*v7 >= 2u)
  {
LABEL_4:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 40) = 0;
    return;
  }
  if (*v7)
  {
    unint64_t v8 = IPC::Decoder::decode<unsigned long long>(a1);
    if (!v9) {
      goto LABEL_42;
    }
    unint64_t v10 = v8;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    if (v8 < 0x10000)
    {
      if (!v8)
      {
        int v11 = 0;
        int v16 = 0;
        LODWORD(v12) = 0;
LABEL_21:
        *(void *)(a2 + 8) = v11;
        *(_DWORD *)(a2 + 16) = v16;
        *(_DWORD *)(a2 + 20) = v12;
        char v17 = 1;
        *(_DWORD *)(a2 + 32) = 1;
        goto LABEL_44;
      }
      int v11 = (WTF *)WTF::fastMalloc((WTF *)(16 * v8));
      LODWORD(v12) = 0;
      LODWORD(v34) = v10;
      uint64_t v33 = v11;
      while (1)
      {
        IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)&v30);
        if (!v31) {
          break;
        }
        if (v12 == v34)
        {
          char v14 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v33, v12 + 1, (unint64_t)&v30);
          int v15 = HIDWORD(v34);
          int v11 = v33;
          *((_OWORD *)v33 + HIDWORD(v34)) = *v14;
        }
        else
        {
          *((_OWORD *)v11 + v12) = v30;
          int v15 = HIDWORD(v34);
        }
        LODWORD(v12) = v15 + 1;
        HIDWORD(v34) = v15 + 1;
        if (!--v10)
        {
          int v16 = v34;
          goto LABEL_21;
        }
      }
LABEL_41:
      uint64_t v33 = 0;
      LODWORD(v34) = 0;
      WTF::fastFree(v11, v13);
LABEL_42:
      uint64_t v27 = *(void *)a1;
      uint64_t v28 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v29 = *((void *)a1 + 3);
      if (v29 && v28) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v27);
      }
      char v17 = 0;
      *(unsigned char *)a2 = 0;
LABEL_44:
      *(unsigned char *)(a2 + 40) = v17;
      return;
    }
    int v22 = 0;
    LODWORD(v12) = 0;
    do
    {
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)&v30);
      if (!v31)
      {
        int v11 = v33;
        if (!v33) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
      if (v12 == v34)
      {
        uint64_t v23 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v33, v12 + 1, (unint64_t)&v30);
        int v24 = HIDWORD(v34);
        int v22 = v33;
        *((_OWORD *)v33 + HIDWORD(v34)) = *v23;
      }
      else
      {
        *((_OWORD *)v22 + v12) = v30;
        int v24 = HIDWORD(v34);
      }
      uint64_t v12 = (v24 + 1);
      HIDWORD(v34) = v24 + 1;
      --v10;
    }
    while (v10);
    int v16 = v34;
    if (v34 <= v12) {
      goto LABEL_50;
    }
    if (!v12) {
      goto LABEL_48;
    }
    if (!(v12 >> 28))
    {
      uint64_t v25 = WTF::fastMalloc((WTF *)(16 * v12));
      LODWORD(v34) = v12;
      uint64_t v33 = (WTF *)v25;
      if ((WTF *)v25 != v22)
      {
        uint64_t v26 = 0;
        do
        {
          *(_OWORD *)(v25 + v26) = *(_OWORD *)((char *)v22 + v26);
          v26 += 16;
        }
        while (16 * v12 != v26);
        int v16 = v12;
        if (!v22) {
          goto LABEL_50;
        }
LABEL_49:
        WTF::fastFree(v22, v13);
        int v16 = v34;
        LODWORD(v12) = HIDWORD(v34);
LABEL_50:
        int v11 = v33;
        goto LABEL_21;
      }
LABEL_48:
      uint64_t v33 = 0;
      LODWORD(v34) = 0;
      goto LABEL_49;
    }
    __break(0xC471u);
  }
  else
  {
    IPC::Decoder::decode<std::optional<WebCore::SharedMemoryHandle>>(a1, (uint64_t)&v30);
    if (!v32) {
      goto LABEL_4;
    }
    std::__optional_move_base<WebCore::SharedMemoryHandle,false>::__optional_move_base[abi:sn180100](a2 + 8, (uint64_t)&v30);
    *(_DWORD *)(a2 + 32) = 0;
    *(unsigned char *)(a2 + 40) = 1;
    if (v32 && v31) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v30);
    }
  }
}

void sub_19894B19C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, WTF *a16)
{
  if (a16) {
    WTF::fastFree(a16, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::array<unsigned char,24ul>,void>::decode<IPC::Decoder>@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(void *)result;
  unint64_t v4 = *(void *)(result + 16) - *(void *)result;
  if (v2 <= v4)
  {
    unint64_t v31 = 0;
    uint64_t v32 = 0;
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    uint64_t v33 = *(void *)(result + 24);
    if (v33)
    {
      unint64_t v38 = (uint64_t *)result;
      uint64_t v39 = a2;
      if (v2)
      {
        (*(void (**)(void))(*(void *)v33 + 16))(*(void *)(result + 24));
        unint64_t result = (uint64_t)v38;
        uint64_t v32 = *v38;
        unint64_t v31 = v38[1];
        a2 = v39;
      }
      else
      {
        unint64_t v31 = 0;
        uint64_t v32 = 0;
      }
    }
    goto LABEL_31;
  }
  uint64_t v5 = (char *)(v3 + v4);
  *(void *)(result + 16) = v5 + 1;
  if (!v3)
  {
    unint64_t v31 = v2;
    uint64_t v32 = 0;
LABEL_31:
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    unint64_t result = *(void *)(result + 24);
    if (!result || !v31) {
      goto LABEL_29;
    }
    uint64_t v34 = a2;
    unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)result + 16))(result, v32, v31);
    goto LABEL_37;
  }
  if (v2 <= (unint64_t)&v5[-v3 + 1]) {
    goto LABEL_28;
  }
  char v6 = *v5;
  *(void *)(result + 16) = v5 + 2;
  if (v2 <= (unint64_t)&v5[-v3 + 2]) {
    goto LABEL_28;
  }
  char v7 = v5[1];
  *(void *)(result + 16) = v5 + 3;
  if (v2 <= (unint64_t)&v5[-v3 + 3]) {
    goto LABEL_28;
  }
  char v8 = v5[2];
  *(void *)(result + 16) = v5 + 4;
  if (v2 <= (unint64_t)&v5[-v3 + 4]) {
    goto LABEL_28;
  }
  char v9 = v5[3];
  *(void *)(result + 16) = v5 + 5;
  if (v2 <= (unint64_t)&v5[-v3 + 5]) {
    goto LABEL_28;
  }
  char v10 = v5[4];
  *(void *)(result + 16) = v5 + 6;
  if (v2 <= (unint64_t)&v5[-v3 + 6]) {
    goto LABEL_28;
  }
  char v11 = v5[5];
  *(void *)(result + 16) = v5 + 7;
  if (v2 <= (unint64_t)&v5[-v3 + 7]) {
    goto LABEL_28;
  }
  char v12 = v5[6];
  *(void *)(result + 16) = v5 + 8;
  if (v2 <= (unint64_t)&v5[-v3 + 8]) {
    goto LABEL_28;
  }
  char v13 = v5[7];
  *(void *)(result + 16) = v5 + 9;
  if (v2 <= (unint64_t)&v5[-v3 + 9]) {
    goto LABEL_28;
  }
  char v14 = v5[8];
  *(void *)(result + 16) = v5 + 10;
  if (v2 <= (unint64_t)&v5[-v3 + 10]) {
    goto LABEL_28;
  }
  char v15 = v5[9];
  *(void *)(result + 16) = v5 + 11;
  if (v2 <= (unint64_t)&v5[-v3 + 11]) {
    goto LABEL_28;
  }
  char v16 = v5[10];
  *(void *)(result + 16) = v5 + 12;
  if (v2 <= (unint64_t)&v5[-v3 + 12]) {
    goto LABEL_28;
  }
  char v17 = v5[11];
  *(void *)(result + 16) = v5 + 13;
  if (v2 <= (unint64_t)&v5[-v3 + 13]) {
    goto LABEL_28;
  }
  char v18 = v5[12];
  *(void *)(result + 16) = v5 + 14;
  if (v2 <= (unint64_t)&v5[-v3 + 14]) {
    goto LABEL_28;
  }
  char v19 = v5[13];
  *(void *)(result + 16) = v5 + 15;
  if (v2 <= (unint64_t)&v5[-v3 + 15]) {
    goto LABEL_28;
  }
  char v20 = v5[14];
  *(void *)(result + 16) = v5 + 16;
  if (v2 <= (unint64_t)&v5[-v3 + 16]) {
    goto LABEL_28;
  }
  char v21 = v5[15];
  *(void *)(result + 16) = v5 + 17;
  if (v2 <= (unint64_t)&v5[-v3 + 17]) {
    goto LABEL_28;
  }
  char v22 = v5[16];
  *(void *)(result + 16) = v5 + 18;
  if (v2 <= (unint64_t)&v5[-v3 + 18]) {
    goto LABEL_28;
  }
  char v23 = v5[17];
  *(void *)(result + 16) = v5 + 19;
  if (v2 <= (unint64_t)&v5[-v3 + 19]) {
    goto LABEL_28;
  }
  char v24 = v5[18];
  *(void *)(result + 16) = v5 + 20;
  if (v2 <= (unint64_t)&v5[-v3 + 20]
    || (char v25 = v5[19], *(void *)(result + 16) = v5 + 21, v2 <= (unint64_t)&v5[-v3 + 21])
    || (char v26 = v5[20], *(void *)(result + 16) = v5 + 22, v2 <= (unint64_t)&v5[-v3 + 22])
    || (char v27 = v5[21], *(void *)(result + 16) = v5 + 23, v2 <= (unint64_t)&v5[-v3 + 23]))
  {
LABEL_28:
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    uint64_t v30 = *(void *)(result + 24);
    if (!v30) {
      goto LABEL_29;
    }
    unint64_t v35 = (uint64_t *)result;
    uint64_t v34 = a2;
    (*(void (**)(void))(*(void *)v30 + 16))(*(void *)(result + 24));
    a2 = v34;
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    unint64_t result = v35[3];
    uint64_t *v35 = 0;
    v35[1] = 0;
    if (!result || !v37) {
      goto LABEL_29;
    }
    unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v36);
LABEL_37:
    a2 = v34;
LABEL_29:
    char v29 = 0;
    *a2 = 0;
    goto LABEL_27;
  }
  char v28 = v5[22];
  *(void *)(result + 16) = v5 + 24;
  unint64_t result = v5[23];
  *a2 = v6;
  a2[1] = v7;
  a2[2] = v8;
  a2[3] = v9;
  a2[4] = v10;
  a2[5] = v11;
  a2[6] = v12;
  a2[7] = v13;
  a2[8] = v14;
  a2[9] = v15;
  a2[10] = v16;
  a2[11] = v17;
  a2[12] = v18;
  a2[13] = v19;
  a2[14] = v20;
  a2[15] = v21;
  a2[16] = v22;
  a2[17] = v23;
  a2[18] = v24;
  a2[19] = v25;
  a2[20] = v26;
  a2[21] = v27;
  a2[22] = v28;
  char v29 = 1;
  a2[23] = result;
LABEL_27:
  a2[24] = v29;
  return result;
}

uint64_t IPC::ArgumentCoder<std::array<unsigned char,16ul>,void>::decode<IPC::Decoder>@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(void *)result;
  unint64_t v4 = *(void *)(result + 16) - *(void *)result;
  if (v2 <= v4)
  {
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    uint64_t v25 = *(void *)(result + 24);
    if (v25)
    {
      uint64_t v30 = (uint64_t *)result;
      unint64_t v31 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
        unint64_t result = (uint64_t)v30;
        uint64_t v24 = *v30;
        unint64_t v23 = v30[1];
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v24 = 0;
      }
      a2 = v31;
    }
    goto LABEL_23;
  }
  uint64_t v5 = (char *)(v3 + v4);
  *(void *)(result + 16) = v5 + 1;
  if (!v3)
  {
    unint64_t v23 = v2;
    uint64_t v24 = 0;
LABEL_23:
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    unint64_t result = *(void *)(result + 24);
    if (!result || !v23) {
      goto LABEL_21;
    }
    char v26 = a2;
    unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)result + 16))(result, v24, v23);
    goto LABEL_29;
  }
  if (v2 <= (unint64_t)&v5[-v3 + 1]) {
    goto LABEL_20;
  }
  char v6 = *v5;
  *(void *)(result + 16) = v5 + 2;
  if (v2 <= (unint64_t)&v5[-v3 + 2]) {
    goto LABEL_20;
  }
  char v7 = v5[1];
  *(void *)(result + 16) = v5 + 3;
  if (v2 <= (unint64_t)&v5[-v3 + 3]) {
    goto LABEL_20;
  }
  char v8 = v5[2];
  *(void *)(result + 16) = v5 + 4;
  if (v2 <= (unint64_t)&v5[-v3 + 4]) {
    goto LABEL_20;
  }
  char v9 = v5[3];
  *(void *)(result + 16) = v5 + 5;
  if (v2 <= (unint64_t)&v5[-v3 + 5]) {
    goto LABEL_20;
  }
  char v10 = v5[4];
  *(void *)(result + 16) = v5 + 6;
  if (v2 <= (unint64_t)&v5[-v3 + 6]) {
    goto LABEL_20;
  }
  char v11 = v5[5];
  *(void *)(result + 16) = v5 + 7;
  if (v2 <= (unint64_t)&v5[-v3 + 7]) {
    goto LABEL_20;
  }
  char v12 = v5[6];
  *(void *)(result + 16) = v5 + 8;
  if (v2 <= (unint64_t)&v5[-v3 + 8]) {
    goto LABEL_20;
  }
  char v13 = v5[7];
  *(void *)(result + 16) = v5 + 9;
  if (v2 <= (unint64_t)&v5[-v3 + 9]) {
    goto LABEL_20;
  }
  char v14 = v5[8];
  *(void *)(result + 16) = v5 + 10;
  if (v2 <= (unint64_t)&v5[-v3 + 10]) {
    goto LABEL_20;
  }
  char v15 = v5[9];
  *(void *)(result + 16) = v5 + 11;
  if (v2 <= (unint64_t)&v5[-v3 + 11]) {
    goto LABEL_20;
  }
  char v16 = v5[10];
  *(void *)(result + 16) = v5 + 12;
  if (v2 <= (unint64_t)&v5[-v3 + 12]
    || (char v17 = v5[11], *(void *)(result + 16) = v5 + 13, v2 <= (unint64_t)&v5[-v3 + 13])
    || (char v18 = v5[12], *(void *)(result + 16) = v5 + 14, v2 <= (unint64_t)&v5[-v3 + 14])
    || (char v19 = v5[13], *(void *)(result + 16) = v5 + 15, v2 <= (unint64_t)&v5[-v3 + 15]))
  {
LABEL_20:
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    uint64_t v22 = *(void *)(result + 24);
    if (!v22) {
      goto LABEL_21;
    }
    char v27 = (uint64_t *)result;
    char v26 = a2;
    (*(void (**)(void))(*(void *)v22 + 16))(*(void *)(result + 24));
    a2 = v26;
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    unint64_t result = v27[3];
    uint64_t *v27 = 0;
    v27[1] = 0;
    if (!result || !v29) {
      goto LABEL_21;
    }
    unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v28);
LABEL_29:
    a2 = v26;
LABEL_21:
    char v21 = 0;
    *a2 = 0;
    goto LABEL_19;
  }
  char v20 = v5[14];
  *(void *)(result + 16) = v5 + 16;
  unint64_t result = v5[15];
  *a2 = v6;
  a2[1] = v7;
  a2[2] = v8;
  a2[3] = v9;
  a2[4] = v10;
  a2[5] = v11;
  a2[6] = v12;
  a2[7] = v13;
  a2[8] = v14;
  a2[9] = v15;
  a2[10] = v16;
  a2[11] = v17;
  a2[12] = v18;
  a2[13] = v19;
  a2[14] = v20;
  char v21 = 1;
  a2[15] = result;
LABEL_19:
  a2[16] = v21;
  return result;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    unsigned int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    unsigned int v7 = 0;
  }
  int v27 = -1640531527;
  __int16 v28 = 0;
  char v29 = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v27, a2);
  uint64_t v8 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27) & v7;
  char v9 = (WebCore::SecurityOriginData *)(v6 + 32 * v8);
  WebCore::SecurityOriginData::isNull(v9);
  if (v10) {
    goto LABEL_17;
  }
  char v11 = 0;
  int v12 = 1;
  while (1)
  {
    int v13 = *((_DWORD *)v9 + 6);
    if (v13) {
      break;
    }
    if (*(void *)v9 != -1) {
      goto LABEL_8;
    }
    char v11 = v9;
LABEL_11:
    uint64_t v8 = (v8 + v12) & v7;
    char v9 = (WebCore::SecurityOriginData *)(v6 + 32 * v8);
    WebCore::SecurityOriginData::isNull(v9);
    ++v12;
    if (v15) {
      goto LABEL_15;
    }
  }
  if (v13 == 1)
  {
LABEL_8:
    uint64_t result = WebCore::operator==();
    if (result)
    {
      uint64_t v22 = *a1;
      if (*a1) {
        uint64_t v23 = *(unsigned int *)(v22 - 4);
      }
      else {
        uint64_t v23 = 0;
      }
      char v24 = 0;
      uint64_t v25 = v22 + 32 * v23;
      goto LABEL_32;
    }
    goto LABEL_11;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_15:
  if (v11)
  {
    *(_OWORD *)char v11 = 0u;
    *((_OWORD *)v11 + 1) = 0u;
    --*(_DWORD *)(*a1 - 16);
    char v9 = v11;
  }
LABEL_17:
  uint64_t result = WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::translate<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(WebCore::SecurityOriginData&&)::{lambda(void)#1}>((uint64_t)v9, a2, &v26);
  uint64_t v16 = *a1;
  if (*a1) {
    int v17 = *(_DWORD *)(v16 - 12) + 1;
  }
  else {
    int v17 = 1;
  }
  *(_DWORD *)(v16 - 12) = v17;
  uint64_t v18 = *a1;
  if (*a1) {
    int v19 = *(_DWORD *)(v18 - 12);
  }
  else {
    int v19 = 0;
  }
  uint64_t v20 = (*(_DWORD *)(v18 - 16) + v19);
  unint64_t v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 <= 2 * v20) {
      goto LABEL_25;
    }
  }
  else if (3 * v21 <= 4 * v20)
  {
LABEL_25:
    uint64_t result = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(a1, v9);
    char v9 = (WebCore::SecurityOriginData *)result;
    uint64_t v18 = *a1;
    if (*a1) {
      unint64_t v21 = *(unsigned int *)(v18 - 4);
    }
    else {
      unint64_t v21 = 0;
    }
  }
  uint64_t v25 = v18 + 32 * v21;
  char v24 = 1;
LABEL_32:
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v25;
  *(unsigned char *)(a3 + 16) = v24;
  return result;
}

{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  WebCore::SecurityOriginData *v9;
  char v10;
  WebCore::SecurityOriginData *v11;
  int v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  char v29;

  uint64_t v26 = a2;
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    unsigned int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    unsigned int v7 = 0;
  }
  int v27 = -1640531527;
  __int16 v28 = 0;
  char v29 = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v27, a2);
  uint64_t v8 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27) & v7;
  char v9 = (WebCore::SecurityOriginData *)(v6 + 32 * v8);
  WebCore::SecurityOriginData::isNull(v9);
  if ((v10 & 1) == 0)
  {
    char v11 = 0;
    int v12 = 1;
    while (1)
    {
      int v13 = *((_DWORD *)v9 + 6);
      if (v13)
      {
        if (v13 == 1)
        {
LABEL_7:
          uint64_t result = WebCore::operator==();
          if (result)
          {
            int v15 = *a1;
            if (*a1) {
              uint64_t v16 = *(unsigned int *)(v15 - 4);
            }
            else {
              uint64_t v16 = 0;
            }
            int v17 = 0;
            uint64_t v18 = v15 + 32 * v16;
            goto LABEL_11;
          }
          goto LABEL_18;
        }
        std::__throw_bad_variant_access[abi:sn180100]();
      }
      else if (*(void *)v9 != -1)
      {
        goto LABEL_7;
      }
      char v11 = v9;
LABEL_18:
      uint64_t v8 = (v8 + v12) & v7;
      char v9 = (WebCore::SecurityOriginData *)(v6 + 32 * v8);
      WebCore::SecurityOriginData::isNull(v9);
      ++v12;
      if (v19)
      {
        if (v11)
        {
          *(_OWORD *)char v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          --*(_DWORD *)(*a1 - 16);
          char v9 = v11;
        }
        break;
      }
    }
  }
  uint64_t result = WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::translate<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(WebCore::SecurityOriginData const&)::{lambda(void)#1}>((uint64_t)v9, a2, &v26);
  uint64_t v20 = *a1;
  if (*a1) {
    unint64_t v21 = *(_DWORD *)(v20 - 12) + 1;
  }
  else {
    unint64_t v21 = 1;
  }
  *(_DWORD *)(v20 - 12) = v21;
  uint64_t v22 = *a1;
  if (*a1) {
    uint64_t v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    uint64_t v23 = 0;
  }
  char v24 = (*(_DWORD *)(v22 - 16) + v23);
  uint64_t v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24) {
      goto LABEL_27;
    }
LABEL_31:
    uint64_t result = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(a1, v9);
    char v9 = (WebCore::SecurityOriginData *)result;
    uint64_t v22 = *a1;
    if (*a1) {
      uint64_t v25 = *(unsigned int *)(v22 - 4);
    }
    else {
      uint64_t v25 = 0;
    }
    goto LABEL_27;
  }
  if (3 * v25 <= 4 * v24) {
    goto LABEL_31;
  }
LABEL_27:
  uint64_t v18 = v22 + 32 * v25;
  int v17 = 1;
LABEL_11:
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v18;
  *(unsigned char *)(a3 + 16) = v17;
  return result;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(uint64_t *a1, WebCore::SecurityOriginData *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(a1, v5, a2);
}

uint64_t WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::translate<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(WebCore::SecurityOriginData&&)::{lambda(void)#1}>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v6, *a3);
  uint64_t result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)v6);
  if (v7 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v7])(&v5, v6);
  }
  return result;
}

void sub_19894BC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, int a16)
{
  if (a16 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[a16])(&a12, &a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(uint64_t *a1, unsigned int a2, WebCore::SecurityOriginData *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 32 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v13 = 0;
  if (v7)
  {
    uint64_t v7 = v7;
    int v15 = (WebCore::SecurityOriginData *)v6;
    uint64_t v16 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix;
    while (1)
    {
      int v17 = *((_DWORD *)v15 + 6);
      if (v17) {
        break;
      }
      if (*(void *)v15 != -1) {
        goto LABEL_12;
      }
LABEL_21:
      int v15 = (WebCore::SecurityOriginData *)((char *)v15 + 32);
      if (!--v7) {
        goto LABEL_22;
      }
    }
    if (v17 != 1)
    {
      uint64_t v23 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::reinsert(v23, v24);
    }
LABEL_12:
    uint64_t v18 = v16;
    WebCore::SecurityOriginData::isNull(v15);
    if (v19)
    {
      uint64_t v20 = *((unsigned int *)v15 + 6);
      if (v20 != -1) {
        ((void (*)(char *, WebCore::SecurityOriginData *))v16[v20])(&v25, v15);
      }
      *((_DWORD *)v15 + 6) = -1;
    }
    else
    {
      uint64_t v21 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::reinsert(a1, (uint64_t)v15);
      uint64_t v22 = *((unsigned int *)v15 + 6);
      if (v22 != -1) {
        ((void (*)(char *, WebCore::SecurityOriginData *))v18[v22])(&v26, v15);
      }
      *((_DWORD *)v15 + 6) = -1;
      if (v15 == a3) {
        uint64_t v13 = v21;
      }
      uint64_t v16 = v18;
    }
    goto LABEL_21;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_22:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::reinsert(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::lookupForReinsert(a1, a2);
  uint64_t v4 = *(unsigned int *)(v3 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v4])(&v6, v3);
  }
  *(_DWORD *)(v3 + 24) = -1;
  return std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor(v3, a2);
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::lookupForReinsert(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    unsigned int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    unsigned int v3 = 0;
  }
  int v10 = -1640531527;
  __int16 v11 = 0;
  char v12 = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v10, a2);
  int v4 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v10);
  int v5 = 0;
  do
  {
    uint64_t v6 = v4 & v3;
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v2 + 32 * v6));
    int v8 = v7;
    int v4 = ++v5 + v6;
  }
  while (!v8);
  return v2 + 32 * v6;
}

uint64_t IPC::ArgumentCoder<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,void>::encode<IPC::Encoder,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist> const&>(IPC::Encoder *a1, uint64_t a2)
{
  char v16 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v16);
  char v17 = *(_DWORD *)(a2 + 16);
  uint64_t result = IPC::Encoder::operator<<<BOOL>(a1, &v17);
  if (v17)
  {
    if (v17 == 1 && *(_DWORD *)(a2 + 16) != 1) {
      goto LABEL_24;
    }
  }
  else
  {
    if (*(_DWORD *)(a2 + 16))
    {
LABEL_24:
      int v15 = (IPC::Decoder *)std::__throw_bad_variant_access[abi:sn180100]();
      return IPC::Decoder::decode<WebCore::PermissionsPolicy::Feature>(v15);
    }
    uint64_t v6 = (uint64_t *)(a2 + 8);
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7) {
      int v8 = *(_DWORD *)(v7 - 12);
    }
    else {
      int v8 = 0;
    }
    uint64_t v9 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
    if (v10 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x19894C020);
    }
    _DWORD *v9 = v8;
    uint64_t result = (uint64_t)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(v6);
    __int16 v11 = (WebCore::SecurityOriginData *)result;
    uint64_t v13 = v12;
    if (*v6) {
      uint64_t v14 = *v6 + 32 * *(unsigned int *)(*v6 - 4);
    }
    else {
      uint64_t v14 = 0;
    }
    if (v14 != result)
    {
      do
      {
        unsigned __int8 v18 = *((_DWORD *)v11 + 6);
        IPC::Encoder::operator<<<BOOL>(a1, (char *)&v18);
        uint64_t result = (uint64_t)IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)v11, v18);
        while (1)
        {
          __int16 v11 = (WebCore::SecurityOriginData *)((char *)v11 + 32);
          if (v11 == v13) {
            break;
          }
          uint64_t result = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v11);
          if (!result) {
            goto LABEL_20;
          }
        }
        __int16 v11 = v13;
LABEL_20:
        ;
      }
      while (v11 != (WebCore::SecurityOriginData *)v14);
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::PermissionsPolicy::Feature>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebCore::PermissionsPolicy::Feature,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::Decoder::decode<WebCore::Allowlist>(unsigned char *a1, uint64_t *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7) {
    goto LABEL_43;
  }
  int v8 = (unsigned __int8 *)(v5 + v7);
  uint64_t v9 = v5 + v7 + 1;
  a2[2] = v9;
  if (!v5)
  {
    uint64_t v22 = v6;
    uint64_t v23 = 0;
    goto LABEL_44;
  }
  unsigned int v10 = *v8;
  if (v10 > 1)
  {
LABEL_4:
    while (1)
    {
      LODWORD(v11) = 0;
      LOBYTE(v35) = 0;
      char v37 = 0;
      uint64_t v12 = *a2;
      unint64_t v6 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t result = a2[3];
      if (!result) {
        break;
      }
      if (!v6)
      {
        LODWORD(v11) = 0;
        break;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v12);
      uint64_t v11 = *a2;
      if (!*a2) {
        break;
      }
LABEL_42:
      __break(1u);
LABEL_43:
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v24 = a2[3];
      if (v24)
      {
        if (v6)
        {
          (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
          uint64_t v23 = *a2;
          uint64_t v22 = a2[1];
        }
        else
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
        }
      }
LABEL_44:
      *a2 = 0;
      a2[1] = 0;
      uint64_t v25 = a2[3];
      if (v25 && v22) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v23, v22);
      }
    }
LABEL_5:
    *a1 = 0;
    a1[16] = 0;
    if (v11) {
      goto LABEL_13;
    }
    goto LABEL_15;
  }
  if (v10)
  {
    int v36 = 1;
LABEL_9:
    char v37 = 1;
    goto LABEL_10;
  }
  unint64_t v14 = ((v9 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v5;
  if (v6 < v14 || v6 - v14 <= 3)
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t v28 = a2[3];
    if (v28)
    {
      (*(void (**)(uint64_t))(*(void *)v28 + 16))(v28);
      uint64_t v29 = *a2;
      uint64_t v30 = a2[1];
      uint64_t v31 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v31)
      {
        if (v30) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v29);
        }
      }
    }
LABEL_60:
    uint64_t v32 = *a2;
    uint64_t v33 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v34 = a2[3];
    if (v34 && v33) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32);
    }
    goto LABEL_4;
  }
  char v16 = (int *)(v5 + v14);
  int v18 = *v16;
  int v17 = *v16;
  a2[2] = (uint64_t)(v16 + 1);
  uint64_t v39 = 0;
  if (!v18)
  {
    uint64_t v35 = 0;
    int v36 = 0;
    goto LABEL_9;
  }
  do
  {
    IPC::Decoder::decode<WebCore::SecurityOriginData>(a2, &v40);
    if (!v44) {
      goto LABEL_58;
    }
    if (v43)
    {
      if (v43 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_42;
      }
    }
    else
    {
      if (v40 == -1)
      {
        int v20 = 0;
        goto LABEL_57;
      }
      if (!v40 && !v41)
      {
        int v20 = v42;
        if (!v42) {
          goto LABEL_57;
        }
      }
    }
    uint64_t result = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(&v39, (uint64_t)&v40, (uint64_t)v38);
    if (!v38[16])
    {
      if (!v44 || (int v20 = v43, v43 == -1))
      {
LABEL_58:
        if (v39) {
          WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v39, v19);
        }
        goto LABEL_60;
      }
LABEL_57:
      ((void (*)(unsigned char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v20])(v38, &v40);
      goto LABEL_58;
    }
    if (v44 && v43 != -1) {
      uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v43])(v38, &v40);
    }
    --v17;
  }
  while (v17);
  uint64_t v21 = *a2;
  uint64_t v35 = v39;
  int v36 = 0;
  LODWORD(v11) = 1;
  char v37 = 1;
  if (!v21) {
    goto LABEL_5;
  }
LABEL_10:
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WebCore::Allowlist::AllowAllOrigins>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v40, (uint64_t)&v35);
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WebCore::Allowlist::AllowAllOrigins>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, (uint64_t)&v40);
  a1[16] = 1;
  if (v41 != -1) {
    uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t *))off_1EE9B3D98[v41])(v38, &v40);
  }
  if (v37)
  {
LABEL_13:
    if (v36 != -1) {
      uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t *, unint64_t))off_1EE9B3D98[v36])(&v40, &v35, v6);
    }
  }
LABEL_15:
  if (!a1[16])
  {
    uint64_t v26 = *a2;
    uint64_t v27 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result)
    {
      if (v27) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v26);
      }
    }
  }
  return result;
}

void sub_19894C49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,int a23,int a24,uint64_t a25,int a26,int a27,char a28)
{
  if (*(unsigned char *)(v28 + 16))
  {
    uint64_t v30 = *(unsigned int *)(v28 + 8);
    if (v30 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B3D98[v30])(&a22, v28);
    }
    *(_DWORD *)(v28 + 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::add<WebCore::Allowlist>(uint64_t result, uint64_t *a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (result = (uint64_t)WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  int v11 = *a3;
  unsigned int v12 = 9 * ((~(v11 << 15) + v11) ^ ((~(v11 << 15) + v11) >> 10));
  unsigned int v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  unsigned int v14 = (v13 ^ HIWORD(v13)) & v10;
  int v15 = (unsigned __int8 *)(v8 + 24 * v14);
  int v16 = *v15;
  if (v16 != 255)
  {
    int v17 = 0;
    int v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if (v9) {
          unsigned int v27 = 0;
        }
        else {
          unsigned int v27 = *(_DWORD *)(v8 - 4);
        }
        char v26 = 0;
        uint64_t v25 = v8 + 24 * v27;
        goto LABEL_26;
      }
      if (v16 == 254) {
        int v17 = v15;
      }
      unsigned int v14 = (v14 + v18) & v10;
      int v15 = (unsigned __int8 *)(v8 + 24 * v14);
      int v16 = *v15;
      ++v18;
    }
    while (v16 != 255);
    if (v17)
    {
      unsigned __int8 *v17 = -1;
      *((void *)v17 + 1) = 0;
      *((void *)v17 + 2) = 0;
      --*(_DWORD *)(*a2 - 16);
      LOBYTE(v11) = *a3;
      int v15 = v17;
    }
  }
  *int v15 = v11;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WebCore::Allowlist::AllowAllOrigins>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v28, a4);
  uint64_t result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WebCore::Allowlist::AllowAllOrigins>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WebCore::Allowlist::AllowAllOrigins>,(std::__variant_detail::_Trait)1>>((uint64_t)(v15 + 8), (uint64_t)v28);
  if (v29 != -1) {
    uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9B3D98[v29])(&v30, v28);
  }
  uint64_t v19 = *a2;
  if (*a2) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v21 = *a2;
  if (*a2) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_20:
      uint64_t result = (uint64_t)WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::expand(a2, v15);
      int v15 = (unsigned __int8 *)result;
      uint64_t v21 = *a2;
      if (*a2) {
        LODWORD(v24) = *(_DWORD *)(v21 - 4);
      }
      else {
        LODWORD(v24) = 0;
      }
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_20;
  }
  uint64_t v25 = v21 + 24 * v24;
  char v26 = 1;
LABEL_26:
  *(void *)uint64_t v7 = v15;
  *(void *)(v7 + 8) = v25;
  *(unsigned char *)(v7 + 16) = v26;
  return result;
}

void sub_19894C790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  if (a12 != -1) {
    ((void (*)(char *, char *))off_1EE9B3D98[a12])(&a17, &a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::PermissionsPolicy::Feature,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      unsigned int v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        uint64_t v9 = *v12;
        unint64_t v8 = v12[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
    goto LABEL_7;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v8 = v1;
    uint64_t v9 = 0;
LABEL_7:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11 && v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
    }
    goto LABEL_8;
  }
  unsigned int v5 = *v4;
  if (v5 >= 0x12)
  {
LABEL_8:
    unsigned int v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  int v6 = 1;
  return v5 | (v6 << 8);
}

unsigned char *WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::expand(uint64_t *a1, unsigned char *a2)
{
  uint64_t v2 = *a1;
  if (!*a1)
  {
    unsigned int v3 = 0;
    int v4 = 0;
LABEL_3:
    unsigned int v5 = 8;
    goto LABEL_4;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 4);
  int v4 = *(_DWORD *)(v2 - 12);
  if (!v3) {
    goto LABEL_3;
  }
  unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
LABEL_4:
  uint64_t Table = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::allocateTable(v5);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = v3;
    do
    {
      uint64_t v11 = (unsigned char *)(v2 + 24 * v8);
      int v12 = *v11;
      if (v12 != 254)
      {
        if (v12 == 255)
        {
          uint64_t v13 = v2 + 24 * v8;
          unsigned int v16 = *(_DWORD *)(v13 + 16);
          int v15 = (_DWORD *)(v13 + 16);
          uint64_t v14 = v16;
          if (v16 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9B3D98[v14])(&v37, v2 + 24 * v8 + 8);
          }
          *int v15 = -1;
        }
        else
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          int v19 = 0;
          unsigned int v20 = 9 * ((~(v12 << 15) + v12) ^ ((~(v12 << 15) + v12) >> 10));
          unsigned int v21 = ((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) ^ (((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) >> 16);
          do
          {
            unsigned int v22 = v21 & v18;
            uint64_t v23 = (unsigned char *)(v17 + 24 * (v21 & v18));
            unsigned int v21 = ++v19 + (v21 & v18);
          }
          while (*v23 != 255);
          uint64_t v24 = v17 + 24 * v22;
          unsigned int v27 = *(_DWORD *)(v24 + 16);
          char v26 = (_DWORD *)(v24 + 16);
          uint64_t v25 = v27;
          if (v27 != -1)
          {
            ((void (*)(char *, uint64_t))off_1EE9B3D98[v25])(&v38, v17 + 24 * v22 + 8);
            LOBYTE(v12) = *v11;
          }
          _DWORD *v26 = -1;
          unsigned char *v23 = v12;
          uint64_t v28 = v17 + 24 * v22 + 8;
          uint64_t v29 = v2 + 24 * v8;
          uint64_t v30 = v29 + 8;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>,WebCore::Allowlist::AllowAllOrigins>,(std::__variant_detail::_Trait)1>::__move_constructor(v28, v29 + 8);
          unsigned int v33 = *(_DWORD *)(v29 + 16);
          uint64_t v32 = (_DWORD *)(v29 + 16);
          uint64_t v31 = v33;
          if (v33 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9B3D98[v31])(&v39, v30);
          }
          *uint64_t v32 = -1;
          if (v11 == a2) {
            uint64_t v9 = v23;
          }
        }
      }
      ++v8;
    }
    while (v8 != v10);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t result = 0;
    if (!v2) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v9;
}

uint64_t WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!*a1)
  {
    uint64_t v12 = WTF::fastMalloc((WTF *)0x18);
    uint64_t v10 = v12;
    int v4 = 0;
    int v3 = 0;
    goto LABEL_6;
  }
  int v3 = *(_DWORD *)(v2 - 4);
  int v4 = *(_DWORD *)(v2 - 12);
  if (!v3)
  {
    uint64_t v12 = WTF::fastMalloc((WTF *)0x18);
    uint64_t v10 = v12;
LABEL_6:
    uint64_t v11 = (void *)(v12 + 16);
    size_t v6 = 8;
    int v7 = 8;
    goto LABEL_7;
  }
  char v5 = 6 * v4 >= (2 * v3);
  size_t v6 = (v3 << v5);
  int v7 = v3 << v5;
  uint64_t result = WTF::fastMalloc((WTF *)(v6 + 16));
  uint64_t v10 = result;
  uint64_t v11 = (void *)(result + 16);
  if (v6) {
LABEL_7:
  }
    uint64_t result = (uint64_t)memset(v11, 255, v6);
  *a1 = (uint64_t)v11;
  *(_DWORD *)(v10 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      unsigned int v14 = *(unsigned __int8 *)(v2 + i);
      if (v14 <= 0xFD)
      {
        uint64_t v15 = *a1;
        if (*a1) {
          int v16 = *(_DWORD *)(v15 - 8);
        }
        else {
          int v16 = 0;
        }
        int v17 = 0;
        unsigned int v18 = 9 * ((~(v14 << 15) + v14) ^ ((~(v14 << 15) + v14) >> 10));
        unsigned int v19 = ((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) ^ (((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) >> 16);
        do
        {
          uint64_t v20 = v19 & v16;
          uint64_t v9 = (void *)*(unsigned __int8 *)(v15 + v20);
          unsigned int v19 = ++v17 + v20;
        }
        while (v9 != 255);
        *(unsigned char *)(v15 + v20) = v14;
      }
    }
  }
  else if (!v2)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v2 - 16), v9);
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *((unsigned int *)a2 + 3));
  uint64_t v5 = *((unsigned int *)a2 + 3);
  if (v5)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = 112 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebKit::WebTouchEvent,void>::encode(a1, v6);
      v6 += 112;
      v7 -= 112;
    }
    while (v7);
  }
  return result;
}

void *IPC::Decoder::decode<WebKit::WebPlatformTouchPoint>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = a2[1];
  unint64_t v5 = *a2;
  unint64_t v6 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    uint64_t v8 = (_DWORD *)(v5 + v6);
    a2[2] = (unint64_t)(v8 + 1);
    if (v5)
    {
      int v84 = 0;
      int v78 = *v8;
      unsigned int v79 = *v8 & 0xFFFFFF00;
      goto LABEL_8;
    }
    unint64_t v46 = v4;
    unint64_t v47 = 0;
  }
  else
  {
    unint64_t v46 = 0;
    unint64_t v47 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v48 = a2[3];
    if (v48)
    {
      if (v4)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v48 + 16))(v48, v5, v4);
        unint64_t v47 = *a2;
        unint64_t v46 = a2[1];
      }
      else
      {
        unint64_t v46 = 0;
        unint64_t v47 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  unint64_t v49 = a2[3];
  if (v49 && v46) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v49 + 16))(v49, v47);
  }
  int v78 = 0;
  unsigned int v79 = 0;
  int v84 = 1;
LABEL_8:
  int v77 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
  uint64_t v83 = v9;
  if (!v9) {
    goto LABEL_57;
  }
  while (1)
  {
    __int16 v85 = 0;
    IPC::Decoder::operator>><unsigned char>(a2, &v85);
    BOOL v10 = !HIBYTE(v85) || v85 > 4u;
    BOOL v11 = v10;
    unint64_t v12 = a2[1];
    BOOL v82 = v11;
    if (v11)
    {
      unint64_t v40 = *a2;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v41 = a2[3];
      if (v41)
      {
        if (v12)
        {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v41 + 16))(v41, v40);
          char v76 = 0;
          unint64_t v12 = a2[1];
          goto LABEL_17;
        }
      }
      else
      {
        unint64_t v12 = 0;
      }
      char v76 = 0;
    }
    else
    {
      char v76 = v85;
    }
LABEL_17:
    unint64_t v13 = *a2;
    unint64_t v14 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v12 < v14 || v12 - v14 <= 7)
    {
      unint64_t v50 = 0;
      unint64_t v51 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v52 = a2[3];
      if (v52)
      {
        if (v12)
        {
          (*(void (**)(unint64_t))(*(void *)v52 + 16))(v52);
          unint64_t v51 = *a2;
          unint64_t v50 = a2[1];
        }
        else
        {
          unint64_t v50 = 0;
          unint64_t v51 = 0;
        }
      }
    }
    else
    {
      uint64_t v15 = (uint64_t *)(v13 + v14);
      a2[2] = (unint64_t)(v15 + 1);
      if (v13)
      {
        int v81 = 0;
        uint64_t v75 = *v15;
        goto LABEL_21;
      }
      unint64_t v50 = v12;
      unint64_t v51 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    unint64_t v53 = a2[3];
    if (v53 && v50)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v53 + 16))(v53, v51, v50);
      uint64_t v75 = 0;
      unint64_t v13 = *a2;
      unint64_t v12 = a2[1];
    }
    else
    {
      unint64_t v12 = 0;
      unint64_t v13 = 0;
      uint64_t v75 = 0;
    }
    int v81 = 1;
LABEL_21:
    unint64_t v16 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v13;
    if (v12 < v16 || v12 - v16 <= 7)
    {
      unint64_t v54 = 0;
      unint64_t v55 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v56 = a2[3];
      if (v56)
      {
        if (v12)
        {
          (*(void (**)(unint64_t))(*(void *)v56 + 16))(v56);
          unint64_t v55 = *a2;
          unint64_t v54 = a2[1];
        }
        else
        {
          unint64_t v54 = 0;
          unint64_t v55 = 0;
        }
      }
    }
    else
    {
      int v17 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (unint64_t)(v17 + 1);
      if (v13)
      {
        int v80 = 0;
        uint64_t v74 = *v17;
        goto LABEL_25;
      }
      unint64_t v54 = v12;
      unint64_t v55 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    unint64_t v57 = a2[3];
    if (v57 && v54)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v57 + 16))(v57, v55, v54);
      uint64_t v74 = 0;
      unint64_t v13 = *a2;
      unint64_t v12 = a2[1];
    }
    else
    {
      unint64_t v12 = 0;
      unint64_t v13 = 0;
      uint64_t v74 = 0;
    }
    int v80 = 1;
LABEL_25:
    unint64_t v18 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v13;
    if (v12 < v18 || v12 - v18 <= 7)
    {
      unint64_t v58 = 0;
      unint64_t v59 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v60 = a2[3];
      if (v60)
      {
        if (v12)
        {
          (*(void (**)(unint64_t))(*(void *)v60 + 16))(v60);
          unint64_t v59 = *a2;
          unint64_t v58 = a2[1];
        }
        else
        {
          unint64_t v58 = 0;
          unint64_t v59 = 0;
        }
      }
    }
    else
    {
      unsigned int v19 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (unint64_t)(v19 + 1);
      if (v13)
      {
        int v20 = 0;
        uint64_t v21 = *v19;
        goto LABEL_29;
      }
      unint64_t v58 = v12;
      unint64_t v59 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    unint64_t v61 = a2[3];
    if (v61 && v58)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v61 + 16))(v61, v59, v58);
      uint64_t v21 = 0;
      unint64_t v13 = *a2;
      unint64_t v12 = a2[1];
    }
    else
    {
      unint64_t v12 = 0;
      unint64_t v13 = 0;
      uint64_t v21 = 0;
    }
    int v20 = 1;
LABEL_29:
    unint64_t v22 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v13;
    if (v12 < v22 || v12 - v22 <= 7)
    {
      unint64_t v62 = 0;
      unint64_t v63 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v64 = a2[3];
      if (v64)
      {
        if (v12)
        {
          (*(void (**)(unint64_t))(*(void *)v64 + 16))(v64);
          unint64_t v63 = *a2;
          unint64_t v62 = a2[1];
        }
        else
        {
          unint64_t v62 = 0;
          unint64_t v63 = 0;
        }
      }
    }
    else
    {
      uint64_t v23 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (unint64_t)(v23 + 1);
      if (v13)
      {
        int v24 = 0;
        uint64_t v25 = *v23;
        goto LABEL_33;
      }
      unint64_t v62 = v12;
      unint64_t v63 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    unint64_t v65 = a2[3];
    if (v65 && v62)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v65 + 16))(v65, v63, v62);
      uint64_t v25 = 0;
      unint64_t v13 = *a2;
      unint64_t v12 = a2[1];
    }
    else
    {
      unint64_t v12 = 0;
      unint64_t v13 = 0;
      uint64_t v25 = 0;
    }
    int v24 = 1;
LABEL_33:
    unint64_t v26 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v13;
    if (v12 < v26 || v12 - v26 <= 7)
    {
      unint64_t v66 = 0;
      unint64_t v67 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v68 = a2[3];
      if (v68)
      {
        if (v12)
        {
          (*(void (**)(unint64_t))(*(void *)v68 + 16))(v68);
          unint64_t v67 = *a2;
          unint64_t v66 = a2[1];
        }
        else
        {
          unint64_t v66 = 0;
          unint64_t v67 = 0;
        }
      }
    }
    else
    {
      unsigned int v27 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (unint64_t)(v27 + 1);
      if (v13)
      {
        int v28 = 0;
        uint64_t v29 = *v27;
        goto LABEL_37;
      }
      unint64_t v66 = v12;
      unint64_t v67 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    unint64_t v69 = a2[3];
    if (v69 && v66)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v69 + 16))(v69, v67, v66);
      uint64_t v29 = 0;
      unint64_t v13 = *a2;
      unint64_t v12 = a2[1];
    }
    else
    {
      unint64_t v12 = 0;
      unint64_t v13 = 0;
      uint64_t v29 = 0;
    }
    int v28 = 1;
LABEL_37:
    unint64_t v30 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v13;
    if (v12 < v30 || v12 - v30 <= 7)
    {
      unint64_t v70 = 0;
      unint64_t v71 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v72 = a2[3];
      if (v72)
      {
        if (v12)
        {
          (*(void (**)(unint64_t))(*(void *)v72 + 16))(v72);
          unint64_t v71 = *a2;
          unint64_t v70 = a2[1];
        }
        else
        {
          unint64_t v70 = 0;
          unint64_t v71 = 0;
        }
      }
    }
    else
    {
      uint64_t v31 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (unint64_t)(v31 + 1);
      if (v13)
      {
        int v32 = 0;
        uint64_t v33 = *v31;
        goto LABEL_41;
      }
      unint64_t v70 = v12;
      unint64_t v71 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t v33 = 0;
    unint64_t v73 = a2[3];
    if (v73 && v70) {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v73 + 16))(v73, v71, v70);
    }
    int v32 = 1;
LABEL_41:
    __int16 v86 = 0;
    unint64_t result = IPC::Decoder::operator>><BOOL>(a2, &v86);
    int v35 = HIBYTE(v86);
    if (HIBYTE(v86))
    {
      char v36 = v86;
    }
    else
    {
      unint64_t v42 = *a2;
      unint64_t v43 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t result = (void *)a2[3];
      if (result && v43) {
        unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t))(*result + 16))(result, v42);
      }
      char v36 = 0;
    }
    if (!*a2) {
      break;
    }
    if (!v84 && v83 && !v82 && !v81 && !v80 && !v20 && !v24 && !v28 && !v32 && v35)
    {
      *(_DWORD *)a1 = v78 | v79;
      *(void *)(a1 + 4) = v77;
      *(unsigned char *)(a1 + 12) = v76;
      *(void *)(a1 + 16) = v75;
      *(void *)(a1 + 24) = v74;
      *(void *)(a1 + 32) = v21;
      *(void *)(a1 + 40) = v25;
      *(void *)(a1 + 48) = v29;
      *(void *)(a1 + 56) = v33;
      *(unsigned char *)(a1 + 64) = v36;
      *(unsigned char *)(a1 + 72) = 1;
      return result;
    }
    __break(1u);
LABEL_57:
    unint64_t v37 = *a2;
    unint64_t v38 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v39 = a2[3];
    if (v39)
    {
      if (v38) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v39 + 16))(v39, v37);
      }
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 72) = 0;
  unint64_t v44 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = (void *)a2[3];
  if (result && v44)
  {
    uint64_t v45 = *(uint64_t (**)(void))(*result + 16);
    return (void *)v45();
  }
  return result;
}

unint64_t WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 72 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0x38E38E4)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    uint64_t v4 = *(unsigned int *)(result + 12);
    int v5 = 72 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(72 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x48;
    *(void *)uint64_t v2 = v6;
    if (v4)
    {
      uint64_t v8 = 72 * v4;
      unint64_t v9 = v3;
      do
      {
        *(_OWORD *)uint64_t v6 = *(_OWORD *)v9;
        long long v10 = *((_OWORD *)v9 + 1);
        long long v11 = *((_OWORD *)v9 + 2);
        long long v12 = *((_OWORD *)v9 + 3);
        *(void *)(v6 + 64) = *((void *)v9 + 8);
        *(_OWORD *)(v6 + 32) = v11;
        *(_OWORD *)(v6 + 48) = v12;
        *(_OWORD *)(v6 + 16) = v10;
        v6 += 72;
        unint64_t v9 = (WTF *)((char *)v9 + 72);
        v8 -= 72;
      }
      while (v8);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(unsigned int *)(result + 12);
    if (v3 > a2)
    {
      *(_DWORD *)(result + 12) = a2;
      LODWORD(v3) = a2;
    }
    uint64_t v4 = *(WTF **)result;
    if (a2)
    {
      if (a2 >= 0x38E38E4)
      {
        __break(0xC471u);
        return result;
      }
      int v5 = 72 * a2;
      unint64_t result = WTF::fastMalloc((WTF *)(72 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x48;
      *(void *)uint64_t v2 = result;
      if (v3 && (WTF *)result != v4)
      {
        uint64_t v6 = 72 * v3;
        unint64_t v7 = v4;
        do
        {
          *(_OWORD *)unint64_t result = *(_OWORD *)v7;
          long long v8 = *((_OWORD *)v7 + 1);
          long long v9 = *((_OWORD *)v7 + 2);
          long long v10 = *((_OWORD *)v7 + 3);
          *(void *)(result + 64) = *((void *)v7 + 8);
          *(_OWORD *)(result + 32) = v9;
          *(_OWORD *)(result + 48) = v10;
          *(_OWORD *)(result + 16) = v8;
          result += 72;
          unint64_t v7 = (WTF *)((char *)v7 + 72);
          v6 -= 72;
        }
        while (v6);
      }
    }
    if (v4)
    {
      if (*(WTF **)v2 == v4)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

__n128 WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebTouchEvent>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 112 * *(unsigned int *)(a1 + 12);
  *(_DWORD *)uint64_t v4 = 0;
  long long v5 = *(_OWORD *)(v3 + 4);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v4 + 4) = v5;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  uint64_t v6 = *(void *)(v3 + 32);
  *(void *)(v3 + 32) = 0;
  *(void *)(v4 + 32) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 40);
  *(_DWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v4 + 40) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 44);
  *(_DWORD *)(v3 + 44) = 0;
  *(_DWORD *)(v4 + 44) = v6;
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 56) = 0;
  uint64_t v7 = *(void *)(v3 + 48);
  *(void *)(v3 + 48) = 0;
  *(void *)(v4 + 48) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 56);
  *(_DWORD *)(v3 + 56) = 0;
  *(_DWORD *)(v4 + 56) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 60);
  *(_DWORD *)(v3 + 60) = 0;
  *(_DWORD *)(v4 + 60) = v7;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = 0;
  uint64_t v8 = *(void *)(v3 + 64);
  *(void *)(v3 + 64) = 0;
  *(void *)(v4 + 64) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 72);
  *(_DWORD *)(v3 + 72) = 0;
  *(_DWORD *)(v4 + 72) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 76);
  *(_DWORD *)(v3 + 76) = 0;
  *(_DWORD *)(v4 + 76) = v8;
  __n128 result = *(__n128 *)(v3 + 80);
  *(_DWORD *)(v4 + 96) = *(_DWORD *)(v3 + 96);
  *(__n128 *)(v4 + 80) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 112 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x2492493)
    {
      __break(0xC471u);
      JUMPOUT(0x19894DAF8);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = (WTF *)(*(void *)a1 + 112 * *(unsigned int *)(a1 + 12));
    unsigned int v5 = 112 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(112 * a2));
    *(_DWORD *)(a1 + 8) = (613566757 * (unint64_t)(v5 >> 4)) >> 32;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebTouchEvent>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF *WTF::VectorMover<false,WebKit::WebTouchEvent>::move(WTF *result, WTF *a2, uint64_t a3)
{
  if (result != a2)
  {
    unsigned int v5 = result;
    do
    {
      *(_DWORD *)a3 = 0;
      long long v6 = *(_OWORD *)((char *)v5 + 4);
      *(_OWORD *)(a3 + 16) = *((_OWORD *)v5 + 1);
      *(_OWORD *)(a3 + 4) = v6;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      uint64_t v7 = *((void *)v5 + 4);
      *((void *)v5 + 4) = 0;
      *(void *)(a3 + 32) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 10);
      *((_DWORD *)v5 + 10) = 0;
      *(_DWORD *)(a3 + 40) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 11);
      *((_DWORD *)v5 + 11) = 0;
      *(_DWORD *)(a3 + 44) = v7;
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      uint64_t v8 = *((void *)v5 + 6);
      *((void *)v5 + 6) = 0;
      *(void *)(a3 + 48) = v8;
      LODWORD(v8) = *((_DWORD *)v5 + 14);
      *((_DWORD *)v5 + 14) = 0;
      *(_DWORD *)(a3 + 56) = v8;
      LODWORD(v8) = *((_DWORD *)v5 + 15);
      *((_DWORD *)v5 + 15) = 0;
      *(_DWORD *)(a3 + 60) = v8;
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 72) = 0;
      uint64_t v9 = *((void *)v5 + 8);
      *((void *)v5 + 8) = 0;
      *(void *)(a3 + 64) = v9;
      LODWORD(v9) = *((_DWORD *)v5 + 18);
      *((_DWORD *)v5 + 18) = 0;
      *(_DWORD *)(a3 + 72) = v9;
      LODWORD(v9) = *((_DWORD *)v5 + 19);
      *((_DWORD *)v5 + 19) = 0;
      *(_DWORD *)(a3 + 76) = v9;
      long long v10 = *((_OWORD *)v5 + 5);
      *(_DWORD *)(a3 + 96) = *((_DWORD *)v5 + 24);
      *(_OWORD *)(a3 + 80) = v10;
      WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5 + 64, a2);
      WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5 + 48, v11);
      __n128 result = (WTF *)*((void *)v5 + 4);
      if (result)
      {
        *((void *)v5 + 4) = 0;
        *((_DWORD *)v5 + 10) = 0;
        __n128 result = (WTF *)WTF::fastFree(result, a2);
      }
      unsigned int v5 = (WTF *)((char *)v5 + 112);
      a3 += 112;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      __n128 result = (uint64_t)WTF::VectorDestructor<true,WebKit::WebTouchEvent>::destruct((WTF *)(*(void *)result + 112 * a2), (WTF *)(*(void *)result + 112 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    unsigned int v5 = *(WTF **)v3;
    if (a2)
    {
      if (a2 >= 0x2492493)
      {
        __break(0xC471u);
        return result;
      }
      long long v6 = (WTF *)(112 * a2);
      __n128 result = WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (613566757 * (unint64_t)(v6 >> 4)) >> 32;
      *(void *)uint64_t v3 = result;
      if ((WTF *)result != v5) {
        __n128 result = (uint64_t)WTF::VectorMover<false,WebKit::WebTouchEvent>::move(v5, (WTF *)((char *)v5 + 112 * v4), result);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  unint64_t v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v5 = 144 * v3;
    long long v6 = (char *)v4 + 128;
    do
    {
      WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6);
      WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6 - 16);
      uint64_t v7 = (WTF::StringImpl *)*((void *)v6 - 4);
      *((void *)v6 - 4) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, a2);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
      v6 += 144;
      v5 -= 144;
    }
    while (v5);
    unint64_t v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::WebMouseEvent>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (uint64_t)result + 128;
    do
    {
      WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
      WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 - 16, v4);
      __n128 result = *(WTF::StringImpl **)(v3 - 32);
      *(void *)(v3 - 32) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v5 = (WTF::StringImpl *)(v3 + 16);
      v3 += 144;
    }
    while (v5 != a2);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebMouseEvent>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = IPC::ArgumentCoder<WebKit::WebMouseEvent,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 144))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    __n128 result = (WTF::StringImpl *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19894DE8C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebKit::WebMouseEvent,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

__n128 WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebMouseEvent>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 144 * *(unsigned int *)(a1 + 12);
  *(_DWORD *)uint64_t v4 = 0;
  long long v5 = *(_OWORD *)(v3 + 4);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v4 + 4) = v5;
  __n128 result = *(__n128 *)(v3 + 32);
  long long v7 = *(_OWORD *)(v3 + 48);
  long long v8 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v4 + 80) = v8;
  *(__n128 *)(v4 + 32) = result;
  *(_OWORD *)(v4 + 48) = v7;
  uint64_t v9 = *(void *)(v3 + 96);
  *(void *)(v3 + 96) = 0;
  *(void *)(v4 + 96) = v9;
  *(unsigned char *)(v4 + 104) = *(unsigned char *)(v3 + 104);
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = 0;
  uint64_t v10 = *(void *)(v3 + 112);
  *(void *)(v3 + 112) = 0;
  *(void *)(v4 + 112) = v10;
  LODWORD(v10) = *(_DWORD *)(v3 + 120);
  *(_DWORD *)(v3 + 120) = 0;
  *(_DWORD *)(v4 + 120) = v10;
  LODWORD(v10) = *(_DWORD *)(v3 + 124);
  *(_DWORD *)(v3 + 124) = 0;
  *(_DWORD *)(v4 + 124) = v10;
  *(void *)(v4 + 128) = 0;
  *(void *)(v4 + 136) = 0;
  uint64_t v11 = *(void *)(v3 + 128);
  *(void *)(v3 + 128) = 0;
  *(void *)(v4 + 128) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 136);
  *(_DWORD *)(v3 + 136) = 0;
  *(_DWORD *)(v4 + 136) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 140);
  *(_DWORD *)(v3 + 140) = 0;
  *(_DWORD *)(v4 + 140) = v11;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 144 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x1C71C72)
    {
      __break(0xC471u);
      JUMPOUT(0x19894E0CCLL);
    }
    unint64_t v3 = *(WTF::StringImpl **)a1;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)a1 + 144 * *(unsigned int *)(a1 + 12));
    int v5 = 144 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(144 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x90;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebMouseEvent>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::WebMouseEvent>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      *(_DWORD *)uint64_t v7 = 0;
      unint64_t v8 = (char *)v5 + v6;
      long long v9 = *(_OWORD *)((char *)v5 + v6 + 4);
      *(_OWORD *)(v7 + 16) = *(_OWORD *)((char *)v5 + v6 + 16);
      *(_OWORD *)(v7 + 4) = v9;
      long long v10 = *(_OWORD *)((char *)v5 + v6 + 32);
      long long v11 = *(_OWORD *)((char *)v5 + v6 + 48);
      long long v12 = *(_OWORD *)((char *)v5 + v6 + 80);
      *(_OWORD *)(v7 + 64) = *(_OWORD *)((char *)v5 + v6 + 64);
      *(_OWORD *)(v7 + 80) = v12;
      *(_OWORD *)(v7 + 32) = v10;
      *(_OWORD *)(v7 + 48) = v11;
      uint64_t v13 = *(void *)((char *)v5 + v6 + 96);
      *((void *)v8 + 12) = 0;
      *(void *)(v7 + 96) = v13;
      *(unsigned char *)(v7 + 104) = *((unsigned char *)v5 + v6 + 104);
      *(void *)(v7 + 112) = 0;
      *(void *)(v7 + 120) = 0;
      uint64_t v14 = *(void *)((char *)v5 + v6 + 112);
      *(void *)((char *)v5 + v6 + 112) = 0;
      *(void *)(v7 + 112) = v14;
      LODWORD(v14) = *(_DWORD *)((char *)v5 + v6 + 120);
      *((_DWORD *)v8 + 30) = 0;
      *(_DWORD *)(v7 + 120) = v14;
      LODWORD(v14) = *(_DWORD *)((char *)v5 + v6 + 124);
      *((_DWORD *)v8 + 31) = 0;
      *(_DWORD *)(v7 + 124) = v14;
      *(void *)(v7 + 128) = 0;
      *(void *)(v7 + 136) = 0;
      uint64_t v15 = (uint64_t)v5 + v6 + 128;
      uint64_t v16 = *(void *)v15;
      *(void *)uint64_t v15 = 0;
      *(void *)(v7 + 128) = v16;
      LODWORD(v16) = *(_DWORD *)((char *)v5 + v6 + 136);
      *(_DWORD *)(v15 + 8) = 0;
      *(_DWORD *)(v7 + 136) = v16;
      LODWORD(v16) = *(_DWORD *)((char *)v5 + v6 + 140);
      *(_DWORD *)(v15 + 12) = 0;
      *(_DWORD *)(v7 + 140) = v16;
      WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, a2);
      WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5 + v6 + 112, v17);
      __n128 result = *(WTF::StringImpl **)((char *)v5 + v6 + 96);
      *((void *)v8 + 12) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v6 += 144;
    }
    while ((WTF::StringImpl *)((char *)v5 + v6) != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebMouseEvent,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 144))
  {
    WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 128, a2);
    WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 112, v3);
    int v5 = *(WTF::StringImpl **)(a1 + 96);
    *(void *)(a1 + 96) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

unsigned int *WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  if (result[2] > this)
  {
    uint64_t v3 = (uint64_t)result;
    unint64_t v4 = result[3];
    if (v4 > this)
    {
      __n128 result = (unsigned int *)WTF::VectorDestructor<true,WebKit::WebMouseEvent>::destruct((WTF::StringImpl *)(*(void *)result + 144 * this), (WTF::StringImpl *)(*(void *)result + 144 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    int v5 = *(WTF::StringImpl **)v3;
    if (this)
    {
      if (this >= 0x1C71C72)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v6 = (WTF *)(144 * this);
      __n128 result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF0) / 0x90;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        __n128 result = (unsigned int *)WTF::VectorMover<false,WebKit::WebMouseEvent>::move(v5, (WTF::StringImpl *)((char *)v5 + 144 * v4), (uint64_t)result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::FrameInfoData>,void>::decode<IPC::Decoder>@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      uint64_t v16 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        a1 = v16;
        uint64_t v12 = *v16;
        unint64_t v11 = v16[1];
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_13;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v11 = v3;
    uint64_t v12 = 0;
LABEL_13:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v14 = a1[3];
    if (v14)
    {
      uint64_t v15 = a1;
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        a1 = v15;
        uint64_t v4 = *v15;
        unint64_t v3 = v15[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_14;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebKit::FrameInfoData>((IPC::Decoder *)a1, (uint64_t)v17);
      char v9 = v18;
      if (!v18)
      {
        *a2 = 0;
        goto LABEL_10;
      }
      std::__optional_destruct_base<WebKit::FrameInfoData,false>::__optional_destruct_base[abi:sn180100]<WebKit::FrameInfoData>((uint64_t)a2, (uint64_t)v17);
    }
    else
    {
      v17[0] = 0;
      char v18 = 0;
      std::__optional_move_base<WebKit::FrameInfoData,false>::__optional_move_base[abi:sn180100]((uint64_t)a2, (uint64_t)v17);
    }
    char v9 = 1;
LABEL_10:
    a2[304] = v9;
    return std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v8);
  }
LABEL_14:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v3) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v4);
    }
  }
  *a2 = 0;
  a2[304] = 0;
  return result;
}

void sub_19894E540(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

unint64_t *IPC::ArgumentCoder<std::optional<WebCore::RemoteUserInputEventData>,void>::decode<IPC::Decoder>@<X0>(unint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = result[1];
  unint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    WTF::StringImpl *result = 0;
    result[1] = 0;
    unint64_t v11 = result[3];
    if (v11)
    {
      uint64_t v14 = result;
      if (v3)
      {
        (*(void (**)(unint64_t))(*(void *)v11 + 16))(v11);
        uint64_t result = v14;
        unint64_t v10 = *v14;
        unint64_t v9 = v14[1];
      }
      else
      {
        unint64_t v9 = 0;
        unint64_t v10 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (unint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v9 = v3;
    unint64_t v10 = 0;
LABEL_12:
    unint64_t v3 = 0;
    unint64_t v4 = 0;
    WTF::StringImpl *result = 0;
    result[1] = 0;
    unint64_t v12 = result[3];
    if (v12)
    {
      uint64_t v13 = result;
      if (v9)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        uint64_t result = v13;
        unint64_t v4 = *v13;
        unint64_t v3 = v13[1];
      }
      else
      {
        unint64_t v3 = 0;
        unint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      uint64_t result = IPC::Decoder::decode<WebCore::RemoteUserInputEventData>((IPC::Decoder *)result, (uint64_t)&v15);
      char v8 = v17;
      if (v17)
      {
        *(_OWORD *)a2 = v15;
        *(void *)(a2 + 16) = v16;
        char v8 = 1;
        *(unsigned char *)(a2 + 24) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 24) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 32) = v8;
    return result;
  }
LABEL_13:
  WTF::StringImpl *result = 0;
  result[1] = 0;
  uint64_t result = (unint64_t *)result[3];
  if (result && v3) {
    uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  return result;
}

unint64_t *IPC::Decoder::decode<WebCore::RemoteUserInputEventData>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::RemoteUserInputEventData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (unint64_t *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      unsigned int v7 = *(uint64_t (**)(void))(*result + 16);
      return (unint64_t *)v7();
    }
  }
  return result;
}

void IPC::Decoder::decode<WebCore::ImageBufferParameters>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::ImageBufferParameters,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 32))
  {
    unint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v5 = a1[3];
    if (v5 && v4 != 0)
    {
      unsigned int v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

uint64_t IPC::Decoder::decode<WebCore::ViewportArguments>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ViewportArguments,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 40))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      unsigned int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a3 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a3);
  }
  unint64_t v12 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v14 = v11 & v9;
    long long v15 = (uint64_t *)(v8 + 16 * (v11 & v9));
    uint64_t v16 = (WTF *)*v15;
    if (*v15 != -1) {
      break;
    }
    unint64_t v12 = (uint64_t *)(v8 + 16 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      uint64_t *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      long long v15 = v12;
    }
    uint64_t result = (uint64_t)WTF::String::operator=(v15, (uint64_t *)a3);
    v15[1] = *a4;
    uint64_t v18 = *a2;
    if (*a2) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v18 - 12) = v19;
    uint64_t v20 = *a2;
    if (*a2) {
      int v21 = *(_DWORD *)(v20 - 12);
    }
    else {
      int v21 = 0;
    }
    uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
    unint64_t v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 <= 2 * v22)
      {
LABEL_22:
        uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, (uint64_t)v15);
        long long v15 = (uint64_t *)result;
        uint64_t v20 = *a2;
        if (*a2) {
          unint64_t v23 = *(unsigned int *)(v20 - 4);
        }
        else {
          unint64_t v23 = 0;
        }
      }
    }
    else if (3 * v23 <= 4 * v22)
    {
      goto LABEL_22;
    }
    uint64_t v24 = v20 + 16 * v23;
    char v25 = 1;
    goto LABEL_28;
  }
  uint64_t result = WTF::equal(v16, *a3, (const WTF::StringImpl *)a3);
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v26 = *a2;
  if (*a2) {
    uint64_t v27 = *(unsigned int *)(v26 - 4);
  }
  else {
    uint64_t v27 = 0;
  }
  char v25 = 0;
  uint64_t v24 = v26 + 16 * v27;
LABEL_28:
  *(void *)a1 = v15;
  *(void *)(a1 + 8) = v24;
  *(unsigned char *)(a1 + 16) = v25;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    uint64_t v13 = v6;
    do
    {
      if (*(void *)v13 != -1)
      {
        if (*(void *)v13)
        {
          uint64_t v14 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, (WTF::StringImpl **)v13);
          long long v15 = *(WTF::StringImpl **)v14;
          *(void *)uint64_t v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v10);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
          uint64_t v16 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          *(void *)uint64_t v14 = v16;
          *(void *)(v14 + 8) = *(void *)(v13 + 8);
          char v17 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v10);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v11 = v14;
          }
        }
        else
        {
          *(void *)uint64_t v13 = 0;
        }
      }
      v13 += 16;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

void IPC::Decoder::decode<WebCore::ApplicationManifest>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::ApplicationManifest,void>::decode(a1, a2);
  if (!a2[272])
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v6 = *((void *)a1 + 3);
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_19894EC4C(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 272)) {
    WebCore::ApplicationManifest::~ApplicationManifest(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>(WTF::StringImpl *result, IPC::Decoder *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = ((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a2;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v21 = *((void *)a2 + 3);
    if (v21)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v21 + 16))(v21, v5, v4);
        uint64_t v20 = *(void *)a2;
        unint64_t v19 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v19 = 0;
        uint64_t v20 = 0;
      }
    }
    goto LABEL_35;
  }
  int v8 = (int *)(v5 + v6);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v19 = v4;
    uint64_t v20 = 0;
LABEL_35:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v22 = *((void *)a2 + 3);
    if (v22 && v19) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
    }
    *(unsigned char *)uint64_t v3 = 0;
    *((unsigned char *)v3 + 24) = 0;
LABEL_27:
    uint64_t v17 = *(void *)a2;
    uint64_t v18 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result)
    {
      if (v18) {
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v17);
      }
    }
    return result;
  }
  int v9 = *v8;
  memset(v26, 0, 21);
  if (v9)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v24);
      if (!v25)
      {
        *(unsigned char *)uint64_t v3 = 0;
        *((unsigned char *)v3 + 24) = 0;
        goto LABEL_25;
      }
      uint64_t v12 = v24;
      if ((unint64_t)v24 + 1 <= 1)
      {
        *(unsigned char *)uint64_t v3 = 0;
        *((unsigned char *)v3 + 24) = 0;
        goto LABEL_19;
      }
      uint64_t result = (WTF::StringImpl *)WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v26, &v24, v11, (uint64_t)v23);
      if (!v23[16]) {
        break;
      }
      if (v25)
      {
        uint64_t result = v24;
        uint64_t v24 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      if (!--v9)
      {
        uint64_t v13 = v26[0];
        uint64_t v14 = v26[1];
        int v15 = (int)v26[2];
        char v16 = BYTE4(v26[2]);
        goto LABEL_23;
      }
    }
    *(unsigned char *)uint64_t v3 = 0;
    *((unsigned char *)v3 + 24) = 0;
    if (!v25) {
      goto LABEL_25;
    }
    uint64_t v12 = v24;
LABEL_19:
    uint64_t v24 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
LABEL_25:
    if (v26[0]) {
      WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable((WTF::StringImpl **)v26[0], (WTF::StringImpl *)LODWORD(v26[1]));
    }
    goto LABEL_27;
  }
  char v16 = 0;
  int v15 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
LABEL_23:
  *(void *)uint64_t v3 = v13;
  *((void *)v3 + 1) = v14;
  *((_DWORD *)v3 + 4) = v15;
  *((unsigned char *)v3 + 20) = v16;
  *((unsigned char *)v3 + 24) = 1;
  return result;
}

void sub_19894EED0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13, WTF::StringImpl **a14, unsigned int a15)
{
  if (a13 && a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a14) {
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(a14, (WTF::StringImpl *)a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 12);
  if (20 * v7 >= 19 * (unint64_t)v8 || (v8 <= 2 * (int)v7 ? (BOOL v9 = *(unsigned char *)(a1 + 20) == 0) : (BOOL v9 = 1), !v9))
  {
    if (v8) {
      unsigned int v10 = 2 * v8;
    }
    else {
      unsigned int v10 = 8;
    }
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(a1, v10);
    unsigned int v8 = *(_DWORD *)(a1 + 8);
  }
  unsigned int v11 = v8 - 1;
  int v12 = *(_DWORD *)(a1 + 16);
  unsigned int v13 = *((_DWORD *)*a2 + 4);
  if (v13 >= 0x100) {
    unsigned int v14 = v13 >> 8;
  }
  else {
    unsigned int v14 = WTF::StringImpl::hashSlowCase(*a2);
  }
  unsigned int v15 = (v14 ^ v12) & v11;
  char v16 = (WTF **)(*(void *)a1 + 8 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v36 = a4;
    unsigned int v18 = 0;
    while (1)
    {
      unsigned int v19 = *((_DWORD *)v17 + 4);
      int v20 = v19 >= 0x100 ? v19 >> 8 : WTF::StringImpl::hashSlowCase(v17);
      unsigned int v21 = (v15 + v8 - ((v20 ^ v12) & v11)) & v11;
      if (v18 > v21) {
        break;
      }
      if (v20 == v14)
      {
        uint64_t result = WTF::equal(*v16, *a2, a3);
        uint64_t v23 = *(void *)a1;
        if (result)
        {
          char v28 = 0;
          a4 = v36;
          goto LABEL_47;
        }
      }
      else
      {
        uint64_t v23 = *(void *)a1;
      }
      unsigned int v15 = (v15 + 1) & v11;
      ++v18;
      char v16 = (WTF **)(v23 + 8 * v15);
      uint64_t v17 = *v16;
      if (!*v16)
      {
        if (v18 >= 0x80) {
          *(unsigned char *)(a1 + 20) = 1;
        }
        a4 = v36;
        goto LABEL_27;
      }
    }
    if (v18 >= 0x80) {
      *(unsigned char *)(a1 + 20) = 1;
    }
    char v25 = *v16;
    WTF::StringImpl *v16 = 0;
    uint64_t v26 = *a2;
    *a2 = 0;
    uint64_t v27 = *v16;
    WTF::StringImpl *v16 = v26;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
    for (int i = v15 + 1; ; int i = v30 + 1)
    {
      int v30 = i & v11;
      uint64_t v31 = (uint64_t *)(*(void *)a1 + 8 * (i & v11));
      uint64_t result = *v31;
      if (!*v31) {
        break;
      }
      unsigned int v32 = *(_DWORD *)(result + 16);
      if (v32 >= 0x100) {
        unsigned int v33 = v32 >> 8;
      }
      else {
        unsigned int v33 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      }
      if (++v21 > ((v30 + v8 - ((v33 ^ v12) & v11)) & v11))
      {
        uint64_t v34 = (WTF *)*v31;
        uint64_t *v31 = (uint64_t)v25;
        char v25 = v34;
        unsigned int v21 = (v30 + v8 - ((v33 ^ v12) & v11)) & v11;
      }
    }
    uint64_t *v31 = (uint64_t)v25;
    a4 = v36;
  }
  else
  {
LABEL_27:
    uint64_t v24 = *a2;
    *a2 = 0;
    uint64_t result = (uint64_t)*v16;
    WTF::StringImpl *v16 = v24;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  ++*(_DWORD *)(a1 + 12);
  uint64_t v23 = *(void *)a1;
  char v28 = 1;
LABEL_47:
  uint64_t v35 = v23 + 8 * *(unsigned int *)(a1 + 8);
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v35;
  *(unsigned char *)(a4 + 16) = v28;
  return result;
}

void sub_19894F198(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  uint64_t v5 = *(WTF **)a1;
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * a2));
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8) = a2;
  unint64_t v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *(_DWORD *)(a1 + 16) = (v10 >> 31) ^ v10;
  *(unsigned char *)(a1 + 20) = 0;
  if (v4)
  {
    uint64_t v11 = v4;
    uint64_t v12 = 0;
    char v28 = v5;
    do
    {
      unsigned int v13 = (uint64_t *)((char *)v5 + 8 * v12);
      unsigned int v14 = (WTF::StringImpl *)*v13;
      if (*v13)
      {
        int v15 = *(_DWORD *)(a1 + 8);
        int v16 = *(_DWORD *)(a1 + 16);
        unsigned int v17 = *((_DWORD *)v14 + 4);
        if (v17 >= 0x100) {
          unsigned int v18 = v17 >> 8;
        }
        else {
          unsigned int v18 = WTF::StringImpl::hashSlowCase(v14);
        }
        int v19 = v15 - 1;
        unsigned int v20 = (v18 ^ v16) & (v15 - 1);
        unsigned int v21 = (uint64_t *)(*(void *)a1 + 8 * v20);
        uint64_t v22 = (WTF::StringImpl *)*v21;
        if (*v21)
        {
          unsigned int v23 = 0;
          do
          {
            unsigned int v24 = *((_DWORD *)v22 + 4);
            if (v24 >= 0x100) {
              unsigned int v25 = v24 >> 8;
            }
            else {
              unsigned int v25 = WTF::StringImpl::hashSlowCase(v22);
            }
            if (v23 > ((v20 + v15 - ((v25 ^ v16) & v19)) & v19))
            {
              uint64_t v26 = *v13;
              *unsigned int v13 = *v21;
              uint64_t *v21 = v26;
              unsigned int v23 = (v20 + v15 - ((v25 ^ v16) & v19)) & v19;
            }
            unsigned int v20 = (v20 + 1) & v19;
            ++v23;
            unsigned int v21 = (uint64_t *)(*(void *)a1 + 8 * v20);
            uint64_t v22 = (WTF::StringImpl *)*v21;
          }
          while (*v21);
        }
        WTF::String::operator=(v21, v13);
        uint64_t v27 = (WTF::StringImpl *)*v13;
        *unsigned int v13 = 0;
        uint64_t v5 = v28;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v7);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
      }
      else
      {
        *unsigned int v13 = 0;
      }
      ++v12;
    }
    while (v12 != v11);
  }
  else if (!v5)
  {
    return result;
  }

  return WTF::fastFree(v5, v7);
}

uint64_t IPC::Decoder::decode<std::pair<unsigned short,unsigned short>>(uint64_t *a1)
{
  int v2 = IPC::Decoder::decode<unsigned short>(a1);
  if ((v2 & 0xFF0000) != 0)
  {
    __int16 v4 = v2;
    int v5 = IPC::Decoder::decode<unsigned short>(a1);
    unsigned int v3 = (v4 & 0xFF00 | (v5 << 16)) >> 8;
    if ((v5 & 0xFF0000) != 0) {
      unsigned __int8 v6 = v4;
    }
    else {
      unsigned __int8 v6 = 0;
    }
    uint64_t v7 = (v5 & 0xFF0000) != 0;
    if ((v5 & 0xFF0000) == 0) {
      unsigned int v3 = 0;
    }
  }
  else
  {
    unsigned __int8 v6 = 0;
    uint64_t v7 = 0;
  }
  uint64_t result = (v7 << 32) | ((*(void *)&v3 & 0xFFFFFFLL) << 8) | v6;
  if (!v7)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      if (v10)
      {
        uint64_t v12 = result;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
        return v12;
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::RemotePageParameters>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::URL>(a2, &v27);
  IPC::Decoder::decode<WebKit::FrameTreeCreationParameters>((uint64_t)&v23, a2);
  IPC::Decoder::decode<std::optional<WebKit::WebsitePoliciesData>>((uint64_t)v21, a2);
  if (!*(void *)a2) {
    goto LABEL_26;
  }
  if (!v30) {
    goto LABEL_25;
  }
  int v5 = v27;
  uint64_t v27 = 0;
  unsigned int v14 = v5;
  long long v15 = v28;
  long long v16 = v29;
  LODWORD(v28) = v28 & 0xFFFFFFFE;
  if (!v26 || (v17 = v23, *(_OWORD *)v18 = v24, v24 = 0uLL, uint64_t v6 = v25, v25 = 0, v19 = v6, !v22))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    *a1 = 0;
    a1[208] = 0;
    goto LABEL_15;
  }
  std::__optional_move_base<WebKit::WebsitePoliciesData,false>::__optional_move_base[abi:sn180100](v20, (uint64_t)v21);
  std::__optional_destruct_base<WebKit::RemotePageParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::RemotePageParameters>((uint64_t)a1, (uint64_t)&v14);
  if (v20[120]) {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v20, v7);
  }
  WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18[1], v7);
  unint64_t v8 = v18[0];
  v18[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v4);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v14;
  unsigned int v14 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v4);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
LABEL_15:
  if (v22 && v21[120]) {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v21, v4);
  }
  uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::FrameTreeCreationParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v23, v4);
  if (v30)
  {
    uint64_t result = v27;
    uint64_t v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (!a1[208])
  {
    uint64_t v12 = *(void *)a2;
    uint64_t v13 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result)
    {
      if (v13) {
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v12);
      }
    }
  }
  return result;
}

void sub_19894F64C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,int a55,__int16 a56,char a57,char a58)
{
  if (*(unsigned char *)(v58 + 208))
  {
    if (*(unsigned char *)(v58 + 200)) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(v58 + 80), a2);
    }
    WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v58 + 64, a2);
    unint64_t v61 = *(WTF::StringImpl **)(v58 + 56);
    *(void *)(v58 + 56) = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2) {
        WTF::StringImpl::destroy(v61, v60);
      }
      else {
        *(_DWORD *)v61 -= 2;
      }
    }
    unint64_t v62 = *(WTF::StringImpl **)v58;
    *(void *)uint64_t v58 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2) {
        WTF::StringImpl::destroy(v62, v60);
      }
      else {
        *(_DWORD *)v62 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::LinkDecorationFilteringData>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::LinkDecorationFilteringData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 24)) {
    return (WTF::StringImpl *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_19894F7B0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::LinkDecorationFilteringData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LinkDecorationFilteringData>(uint64_t a1, unint64_t a2)
{
  unsigned int v3 = (uint64_t *)WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  unsigned int v5 = v4 + 1;
  uint64_t v6 = (void *)(*(void *)a1 + 24 * v4);
  uint64_t v7 = *v3;
  *unsigned int v3 = 0;
  *uint64_t v6 = v7;
  uint64_t v8 = v3[1];
  v3[1] = 0;
  v6[1] = v8;
  uint64_t v9 = v3[2];
  v3[2] = 0;
  _OWORD v6[2] = v9;
  *(_DWORD *)(a1 + 12) = v5;
  return 1;
}

unint64_t WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x19894F990);
    }
    unint64_t v3 = *(WTF::StringImpl **)a1;
    unsigned int v4 = (WTF::StringImpl *)(*(void *)a1 + 24 * *(unsigned int *)(a1 + 12));
    int v5 = 24 * a2;
    uint64_t v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::LinkDecorationFilteringData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::LinkDecorationFilteringData>::move(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  if (result != a2)
  {
    int v5 = (WTF::StringImpl **)result;
    do
    {
      uint64_t v6 = *v5;
      *int v5 = 0;
      *a3 = v6;
      unint64_t v7 = v5[1];
      v5[1] = 0;
      a3[1] = v7;
      unint64_t v8 = v5[2];
      void v5[2] = 0;
      a3[2] = v8;
      unint64_t v9 = v5[2];
      void v5[2] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, a2);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      unint64_t v10 = v5[1];
      v5[1] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, a2);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      uint64_t result = *v5;
      *int v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v5 += 3;
      a3 += 3;
    }
    while (v5 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::LinkDecorationFilteringData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v3 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    unsigned int v4 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    int v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t this)
{
  if (*(unsigned int *)(result + 8) > this)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > this)
    {
      uint64_t result = (uint64_t)WTF::VectorDestructor<true,WebCore::LinkDecorationFilteringData>::destruct((WTF::StringImpl *)(*(void *)result + 24 * this), (WTF::StringImpl *)(*(void *)result + 24 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    int v5 = *(WTF::StringImpl **)v3;
    if (this)
    {
      if (this >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x19894FC08);
      }
      uint64_t v6 = (WTF *)(24 * this);
      uint64_t result = WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF8) / 0x18;
      *(void *)uint64_t v3 = result;
      if ((WTF::StringImpl *)result != v5) {
        uint64_t result = (uint64_t)WTF::VectorMover<false,WebCore::LinkDecorationFilteringData>::move(v5, (WTF::StringImpl *)((char *)v5 + 24 * v4), (WTF::StringImpl **)result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::LinkDecorationFilteringData>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (WTF::StringImpl **)result;
    do
    {
      unint64_t v4 = v3[2];
      v3[2] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      int v5 = v3[1];
      v3[1] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, a2);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
      uint64_t result = *v3;
      *uint64_t v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 3;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v13 = v7;
    unsigned int v14 = (WTF::StringImpl **)v6;
    do
    {
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (*v14)
        {
          uint64_t v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(a1, (uint64_t)v14);
          WebCore::RegistrableDomain::~RegistrableDomain(v14, v16);
          if (v14 == a3) {
            uint64_t v11 = v15;
          }
        }
        else
        {
          WebCore::RegistrableDomain::~RegistrableDomain(v14, v10);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_13;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, (WTF::StringImpl **)a2);
  int v5 = *(WTF::StringImpl **)v4;
  *(void *)uint64_t v4 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  *(void *)uint64_t v4 = v6;
  *(unsigned char *)(v4 + 8) = *(unsigned char *)(a2 + 8);
  return v4;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::reinsert(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::lookupForReinsert(a1, (WTF::ASCIICaseInsensitiveHash **)a2);
  int v5 = *(WTF::StringImpl **)(v4 + 8);
  *(void *)(v4 + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *(WTF::StringImpl **)v4;
  *(void *)uint64_t v4 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  unsigned int v7 = *(WTF::ASCIICaseInsensitiveHash **)a2;
  *(void *)a2 = 0;
  *(void *)uint64_t v4 = v7;
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(v4 + 8) = v8;
  return v4;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::lookupForReinsert(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    unsigned int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    unsigned int v3 = 0;
  }
  int v4 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2);
  int v6 = 0;
  do
  {
    uint64_t v7 = v4 & v3;
    int v8 = WTF::equal(*(WTF **)(v2 + 16 * v7), 0, v5);
    int v4 = ++v6 + v7;
  }
  while (!v8);
  return v2 + 16 * v7;
}

uint64_t WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v7 = *a1) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unsigned int v9 = *((_DWORD *)*a2 + 4);
  if (v9 >= 0x100) {
    unsigned int v10 = v9 >> 8;
  }
  else {
    unsigned int v10 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v11 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v13 = v10 & v8;
    unsigned int v14 = (uint64_t *)(v7 + 24 * (v10 & v8));
    uint64_t v15 = (WTF *)*v14;
    if (*v14 != -1) {
      break;
    }
    uint64_t v11 = (uint64_t *)(v7 + 24 * v13);
LABEL_13:
    unsigned int v10 = i + v13;
  }
  if (!v15)
  {
    if (v11)
    {
      uint64_t *v11 = 0;
      v11[1] = 0;
      _OWORD v11[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      unsigned int v14 = v11;
    }
    uint64_t result = WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineAdd<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::String &&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1}>(v14, (uint64_t *)a2, &v27);
    uint64_t v17 = *a1;
    if (*a1) {
      int v18 = *(_DWORD *)(v17 - 12) + 1;
    }
    else {
      int v18 = 1;
    }
    *(_DWORD *)(v17 - 12) = v18;
    uint64_t v21 = *a1;
    if (*a1) {
      int v22 = *(_DWORD *)(v21 - 12);
    }
    else {
      int v22 = 0;
    }
    uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
    unint64_t v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 <= 2 * v23)
      {
LABEL_26:
        uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (uint64_t)v14);
        unsigned int v14 = (uint64_t *)result;
        uint64_t v21 = *a1;
        if (*a1) {
          LODWORD(v24) = *(_DWORD *)(v21 - 4);
        }
        else {
          LODWORD(v24) = 0;
        }
      }
    }
    else if (3 * v24 <= 4 * v23)
    {
      goto LABEL_26;
    }
    uint64_t v26 = v21 + 24 * v24;
    char v25 = 1;
    goto LABEL_33;
  }
  uint64_t result = WTF::equal(v15, *a2, (const WTF::StringImpl *)a3);
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v19 = *a1;
  if (*a1) {
    unsigned int v20 = *(_DWORD *)(v19 - 4);
  }
  else {
    unsigned int v20 = 0;
  }
  char v25 = 0;
  uint64_t v26 = v19 + 24 * v20;
LABEL_33:
  *(void *)a4 = v14;
  *(void *)(a4 + 8) = v26;
  *(unsigned char *)(a4 + 16) = v25;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineAdd<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::String &&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1}>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  WTF::String::operator=(a1, a2);
  unsigned int v5 = *a3;
  uint64_t v6 = **a3;
  *unsigned int v5 = 0;
  v10[0] = v6;
  uint64_t v7 = v5[1];
  v5[1] = 0;
  v10[1] = v7;
  WTF::GenericHashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)(a1 + 1), v10);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v8);
}

void sub_1989501A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    uint64_t v13 = v6;
    do
    {
      if (*(void *)v13 != -1)
      {
        if (*(void *)v13)
        {
          uint64_t v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, (WTF::StringImpl **)v13);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15 + 8, v16);
          int v18 = *(WTF::StringImpl **)v15;
          *(void *)uint64_t v15 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2) {
              WTF::StringImpl::destroy(v18, v17);
            }
            else {
              *(_DWORD *)v18 -= 2;
            }
          }
          uint64_t v19 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          *(void *)uint64_t v15 = v19;
          *(void *)(v15 + 8) = 0;
          *(void *)(v15 + 16) = 0;
          uint64_t v20 = *(void *)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          *(void *)(v15 + 8) = v20;
          LODWORD(v20) = *(_DWORD *)(v13 + 16);
          *(_DWORD *)(v13 + 16) = 0;
          *(_DWORD *)(v15 + 16) = v20;
          LODWORD(v20) = *(_DWORD *)(v13 + 20);
          *(_DWORD *)(v13 + 20) = 0;
          *(_DWORD *)(v15 + 20) = v20;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 + 8, v17);
          uint64_t v21 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2) {
              WTF::StringImpl::destroy(v21, v10);
            }
            else {
              *(_DWORD *)v21 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v11 = v15;
          }
        }
        else
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 + 8, v10);
          unsigned int v14 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v10);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
      }
      v13 += 24;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

WTF *WTF::GenericHashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  if (v4) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 8 * v4));
  }

  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1, a2);
}

uint64_t IPC::Decoder::decode<WebCore::CustomHeaderFields>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    LOBYTE(v41) = 0;
    char v43 = 0;
    goto LABEL_21;
  }
  unint64_t v6 = v4;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  if (v4 >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::HTTPHeaderField>(&v35, a2);
      if (!LOBYTE(v37[0])) {
        goto LABEL_20;
      }
      if (HIDWORD(v39) == v39)
      {
        WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTTPHeaderField>((uint64_t)&v38, (unint64_t)&v35);
      }
      else
      {
        int v16 = HIDWORD(v39) + 1;
        uint64_t v17 = (void *)(v38 + 16 * HIDWORD(v39));
        uint64_t v18 = v35;
        uint64_t v35 = 0;
        void *v17 = v18;
        uint64_t v19 = v36;
        uint64_t v36 = 0;
        v17[1] = v19;
        HIDWORD(v39) = v16;
      }
      std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v35, v7);
      if (!--v6)
      {
        WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v38, HIDWORD(v39));
        uint64_t v34 = v38;
        uint64_t v38 = 0;
        uint64_t v41 = v34;
        unsigned int v14 = v39;
        unsigned int v13 = HIDWORD(v39);
        goto LABEL_14;
      }
    }
  }
  if (v4)
  {
    LODWORD(v39) = v4;
    uint64_t v38 = WTF::fastMalloc((WTF *)(16 * v4));
    while (1)
    {
      IPC::Decoder::decode<WebCore::HTTPHeaderField>(&v35, a2);
      if (!LOBYTE(v37[0])) {
        break;
      }
      if (HIDWORD(v39) == v39)
      {
        WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTTPHeaderField>((uint64_t)&v38, (unint64_t)&v35);
      }
      else
      {
        int v8 = HIDWORD(v39) + 1;
        uint64_t v9 = (void *)(v38 + 16 * HIDWORD(v39));
        uint64_t v10 = v35;
        uint64_t v35 = 0;
        void *v9 = v10;
        uint64_t v11 = v36;
        uint64_t v36 = 0;
        v9[1] = v11;
        HIDWORD(v39) = v8;
      }
      std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v35, v7);
      if (!--v6)
      {
        uint64_t v12 = v38;
        unsigned int v14 = v39;
        unsigned int v13 = HIDWORD(v39);
        goto LABEL_13;
      }
    }
LABEL_20:
    LOBYTE(v41) = 0;
    char v43 = 0;
    std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v35, v7);
    WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v20);
LABEL_21:
    uint64_t v15 = *(void **)a2;
    uint64_t v21 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v22 = *((void *)a2 + 3);
    if (v22) {
      BOOL v23 = v21 == 0;
    }
    else {
      BOOL v23 = 1;
    }
    if (!v23) {
      (*(void (**)(uint64_t, void *))(*(void *)v22 + 16))(v22, v15);
    }
    goto LABEL_26;
  }
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  uint64_t v12 = 0;
LABEL_13:
  uint64_t v38 = 0;
  uint64_t v41 = v12;
LABEL_14:
  uint64_t v39 = 0;
  unint64_t v42 = __PAIR64__(v13, v14);
  char v43 = 1;
  WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v5);
LABEL_26:
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v15, (uint64_t)&v38);
  uint64_t v26 = *(void **)a2;
  if (*(void *)a2)
  {
    if (v43)
    {
      uint64_t v27 = v41;
      unint64_t v28 = v42;
      uint64_t v41 = 0;
      unint64_t v42 = 0;
      if (v40)
      {
        uint64_t v29 = v38;
        uint64_t v38 = 0;
        uint64_t v35 = 0;
        *(void *)a1 = v27;
        uint64_t v36 = 0;
        *(void *)(a1 + 8) = v28;
        v37[0] = 0;
        *(void *)(a1 + 16) = v29;
        v37[1] = 0;
        uint64_t v30 = v39;
        uint64_t v39 = 0;
        *(void *)(a1 + 24) = v30;
        *(unsigned char *)(a1 + 32) = 1;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v25);
        uint64_t result = WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v31);
        goto LABEL_30;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
LABEL_30:
  if (v40) {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v25);
  }
  if (v43) {
    uint64_t result = WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v25);
  }
  if (!v26)
  {
    unsigned int v32 = *(void **)a2;
    uint64_t v33 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result)
    {
      if (v33) {
        return (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 16))(result, v32);
      }
    }
  }
  return result;
}

void sub_1989506A4(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::CustomHeaderFields,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CustomHeaderFields>(uint64_t a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 32 * *(unsigned int *)(a1 + 12);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  uint64_t v5 = *(void *)result;
  *(void *)unint64_t result = 0;
  *(void *)uint64_t v4 = v5;
  LODWORD(v5) = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  uint64_t v6 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  *(void *)(v4 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(v4 + 24) = v6;
  LODWORD(v6) = *(_DWORD *)(result + 28);
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(v4 + 28) = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x1989508C4);
    }
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = (void *)(*(void *)a1 + 32 * *(unsigned int *)(a1 + 12));
    uint64_t v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::CustomHeaderFields>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebCore::CustomHeaderFields>::move(uint64_t result, void *a2, uint64_t a3)
{
  if ((void *)result != a2)
  {
    uint64_t v5 = result;
    do
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      uint64_t v6 = *(void *)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)a3 = v6;
      LODWORD(v6) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(a3 + 8) = v6;
      LODWORD(v6) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(a3 + 12) = v6;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v7 = *(void *)(v5 + 16);
      *(void *)(v5 + 16) = 0;
      *(void *)(a3 + 16) = v7;
      LODWORD(v7) = *(_DWORD *)(v5 + 24);
      *(_DWORD *)(v5 + 24) = 0;
      *(_DWORD *)(a3 + 24) = v7;
      LODWORD(v7) = *(_DWORD *)(v5 + 28);
      *(_DWORD *)(v5 + 28) = 0;
      *(_DWORD *)(a3 + 28) = v7;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 16, a2);
      unint64_t result = WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, v8);
      v5 += 32;
      a3 += 32;
    }
    while ((void *)v5 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::CustomHeaderFields,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
    WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, v3);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      unint64_t result = WTF::VectorDestructor<true,WebCore::CustomHeaderFields>::destruct(*(void *)result + 32 * a2, (void *)(*(void *)result + 32 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF **)v3;
    if (a2)
    {
      if (a2 >> 27)
      {
        __break(0xC471u);
        return result;
      }
      unint64_t result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(void *)uint64_t v3 = result;
      if ((WTF *)result != v5) {
        unint64_t result = WTF::VectorMover<false,WebCore::CustomHeaderFields>::move((uint64_t)v5, (char *)v5 + 32 * v4, result);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 12);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  uint64_t v5 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  *(void *)uint64_t v4 = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v3 + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198950C34);
    }
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = (WTF::StringImpl *)(*(void *)a1 + 16 * *(unsigned int *)(a1 + 12));
    uint64_t v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(uint64_t result, WTF::StringImpl *a2, uint64_t a3)
{
  for (; (WTF::StringImpl *)result != a2; a3 += 16)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    uint64_t v5 = *(void *)result;
    *(void *)unint64_t result = 0;
    *(void *)a3 = v5;
    LODWORD(v5) = *(_DWORD *)(result + 8);
    *(_DWORD *)(result + 8) = 0;
    *(_DWORD *)(a3 + 8) = v5;
    LODWORD(v5) = *(_DWORD *)(result + 12);
    *(_DWORD *)(result + 12) = 0;
    *(_DWORD *)(a3 + 12) = v5;
    unint64_t result = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2)+ 16;
  }
  return result;
}

uint64_t WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, WTF::StringImpl *a2)
{
  if (*(unsigned int *)(result + 8) > (unint64_t)a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > (unint64_t)a2)
    {
      unint64_t result = *(void *)result + 16 * (void)a2;
      uint64_t v5 = 16 * v4 - 16 * (void)a2;
      do
      {
        unint64_t result = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2)+ 16;
        v5 -= 16;
      }
      while (v5);
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v6 = *(WTF **)v3;
    if (a2)
    {
      if ((unint64_t)a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      unint64_t result = WTF::fastMalloc((WTF *)(16 * (void)a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(void *)uint64_t v3 = result;
      if ((WTF *)result != v6) {
        unint64_t result = WTF::VectorMover<false,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move((uint64_t)v6, (WTF *)((char *)v6 + 16 * v4), result);
      }
    }
    if (v6)
    {
      if (*(WTF **)v3 == v6)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v6, a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 80 * *(unsigned int *)(a1 + 12);
  long long v5 = *(_OWORD *)v3;
  long long v6 = *(_OWORD *)(v3 + 16);
  long long v7 = *(_OWORD *)(v3 + 32);
  *(unsigned char *)(v4 + 48) = *(unsigned char *)(v3 + 48);
  *(_OWORD *)(v4 + 16) = v6;
  *(_OWORD *)(v4 + 32) = v7;
  *(_OWORD *)uint64_t v4 = v5;
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,(std::__variant_detail::_Trait)1>::__move_constructor(v4 + 56, v3 + 56);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 80 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x3333334)
    {
      __break(0xC471u);
      JUMPOUT(0x198950F6CLL);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    uint64_t v4 = *(void *)result + 80 * *(unsigned int *)(result + 12);
    int v5 = 80 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(80 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
    *(void *)uint64_t v2 = v6;
    uint64_t result = WTF::VectorMover<false,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v14 = v3;
    uint64_t v15 = v4;
    uint64_t v6 = a3 + 56;
    uint64_t v7 = result + 56;
    do
    {
      long long v8 = *(_OWORD *)(v7 - 56);
      long long v9 = *(_OWORD *)(v7 - 40);
      long long v10 = *(_OWORD *)(v7 - 24);
      *(unsigned char *)(v6 - 8) = *(unsigned char *)(v7 - 8);
      *(_OWORD *)(v6 - 24) = v10;
      *(_OWORD *)(v6 - 40) = v9;
      *(_OWORD *)(v6 - 56) = v8;
      uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,(std::__variant_detail::_Trait)1>::__move_constructor(v6, v7);
      uint64_t v11 = *(unsigned int *)(v7 + 16);
      if (v11 != -1) {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9B4E40[v11])(&v13, v7);
      }
      uint64_t v12 = v7 - 56;
      *(_DWORD *)(v7 + 16) = -1;
      v6 += 80;
      v7 += 80;
    }
    while (v12 + 80 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)(*(void *)a1 + 16 * *(unsigned int *)(a1 + 12)) = *(_OWORD *)WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    uint64_t v9 = a3 - v5;
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v9;
  }
  else
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10) {
      unint64_t v7 = v6 + 1;
    }
    else {
      unint64_t v7 = 16;
    }
    if (v7 > a2) {
      a2 = v7;
    }
    WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 28))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(WTF **)result;
    uint64_t v5 = *(unsigned int *)(result + 12);
    unint64_t v6 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    if (v5)
    {
      uint64_t v8 = 16 * v5;
      uint64_t v9 = v4;
      do
      {
        long long v10 = *(_OWORD *)v9;
        uint64_t v9 = (WTF *)((char *)v9 + 16);
        *v6++ = v10;
        v8 -= 16;
      }
      while (v8);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void IPC::Decoder::decode<WebKit::EditorState>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<WebKit::EditorState,void>::decode(a1, a2);
  if (!a2[480])
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_19895122C(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebKit::EditorState,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::variant<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&,0ul>(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  if (a3 == 3)
  {
    if (*(_DWORD *)(a2 + 16) != 3) {
      goto LABEL_17;
    }
    return (IPC::Encoder *)IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(result, (uint64_t *)a2);
  }
  else
  {
    if (a3 != 2)
    {
      if (a3 != 1) {
        return result;
      }
      if (*(_DWORD *)(a2 + 16) == 1)
      {
        IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(result, *(_DWORD *)a2);
        IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v4, *(float *)(a2 + 4));
        return (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(v4, (char *)(a2 + 8));
      }
LABEL_17:
      uint64_t v9 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
      if (a2) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)a2, v8);
      }
      _Unwind_Resume(v9);
    }
    if (*(_DWORD *)(a2 + 16) != 2) {
      goto LABEL_17;
    }
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *(atomic_uint **)(*(void *)a2 + 8);
    atomic_fetch_add(v6, 1u);
    IPC::ArgumentCoder<WebCore::SharedBuffer,void>::encode(result, v6);
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v6, v7);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, (uint64_t *)(v5 + 16));
    return (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, (uint64_t *)(v5 + 24));
  }
}

unint64_t IPC::VectorArgumentCoder<false,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  unsigned int v5 = *(_DWORD *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    BOOL v7 = &v6[18 * v5];
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v6);
      unint64_t result = IPC::ArgumentCoder<WebKit::PlatformCAAnimationRemoteProperties,void>::encode(a1, (uint64_t)(v6 + 1));
      v6 += 18;
    }
    while (v6 != v7);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = 8 * v5;
    do
    {
      uint64_t v8 = *v6++;
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebCore::AcceleratedEffect,void>::encode(a1, v8);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v39);
  if (v40)
  {
    unint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WebKit::PlatformCAAnimationRemoteProperties>((uint64_t)&v24, a2);
    int v6 = v38;
    if (v38)
    {
      if (!v40)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v39;
      uint64_t v39 = 0;
      uint64_t v8 = v24;
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
      long long v9 = v26[0];
      *(_OWORD *)(a1 + 16) = v25;
      *(_OWORD *)(a1 + 32) = v9;
      *(_OWORD *)(a1 + 42) = *(_OWORD *)((char *)v26 + 10);
      uint64_t v10 = v27;
      uint64_t v24 = 0;
      uint64_t v27 = 0;
      *(void *)(a1 + 64) = v10;
      *(_DWORD *)(a1 + 72) = v28;
      *(unsigned char *)(a1 + 76) = v29;
      uint64_t v11 = v30;
      uint64_t v30 = 0;
      *(void *)(a1 + 80) = v11;
      uint64_t v12 = v31;
      uint64_t v31 = 0;
      *(void *)(a1 + 88) = v12;
      uint64_t v13 = v32;
      uint64_t v32 = 0;
      *(void *)(a1 + 96) = v13;
      uint64_t v14 = v33;
      uint64_t v33 = 0;
      *(void *)(a1 + 104) = v14;
      uint64_t v15 = v34;
      uint64_t v34 = 0;
      *(void *)(a1 + 112) = v15;
      uint64_t v16 = v35;
      uint64_t v35 = 0;
      *(void *)(a1 + 120) = v16;
      uint64_t v17 = v36;
      uint64_t v36 = 0;
      *(void *)(a1 + 128) = v17;
      uint64_t v18 = v37;
      uint64_t v37 = 0;
      char v19 = 1;
      *(void *)(a1 + 136) = v18;
    }
    else
    {
      char v19 = 0;
      *(unsigned char *)a1 = 0;
    }
    *(unsigned char *)(a1 + 144) = v19;
    unint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::PlatformCAAnimationRemoteProperties,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v24, v5);
    if (v40)
    {
      unint64_t result = v39;
      uint64_t v39 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
          if (v6) {
            return result;
          }
          goto LABEL_15;
        }
        *(_DWORD *)result -= 2;
      }
    }
    if (v6) {
      return result;
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 144) = 0;
  }
LABEL_15:
  uint64_t v21 = *(void *)a2;
  uint64_t v22 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result) {
    BOOL v23 = v22 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (!v23) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v21);
  }
  return result;
}

void sub_1989515F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 - 40))
  {
    uint64_t v4 = *(WTF::StringImpl **)(v2 - 48);
    *(void *)(v2 - 48) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebKit::PlatformCAAnimationRemoteProperties>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v216);
  LOWORD(v220) = 0;
  uint64_t result = (uint64_t)IPC::Decoder::operator>><unsigned char>(a2, &v220);
  char v11 = (char)v220;
  if (BYTE1(v220)) {
    BOOL v12 = v220 > 3u;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = v12;
  if (v13 == 1)
  {
    long long v9 = *(WTF::StringImpl **)a2;
    uint64_t v10 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result && v10) {
      uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v9);
    }
    char v11 = 0;
  }
  if (!*(void *)a2) {
    goto LABEL_85;
  }
  if (!v217 || v13) {
    goto LABEL_248;
  }
  uint64_t result = WebCore::PlatformCAAnimation::isValidKeyPath();
  if ((result & 1) == 0)
  {
LABEL_85:
    int v60 = 0;
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 136) = 0;
    goto LABEL_240;
  }
  unint64_t v14 = *((void *)a2 + 1);
  uint64_t v15 = *(WTF::StringImpl **)a2;
  unint64_t v16 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
  if (v14 < v16 || v14 - v16 <= 7)
  {
    unint64_t v61 = 0;
    unint64_t v62 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v63 = *((void *)a2 + 3);
    if (v63)
    {
      if (v14)
      {
        (*(void (**)(uint64_t))(*(void *)v63 + 16))(v63);
        unint64_t v62 = *(WTF::StringImpl **)a2;
        unint64_t v61 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v61 = 0;
        unint64_t v62 = 0;
      }
    }
  }
  else
  {
    uint64_t v17 = (uint64_t *)((char *)v15 + v16);
    *((void *)a2 + 2) = v17 + 1;
    if (v15)
    {
      int v201 = 0;
      uint64_t v200 = *v17;
      goto LABEL_16;
    }
    unint64_t v61 = v14;
    unint64_t v62 = 0;
  }
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v64 = *((void *)a2 + 3);
  if (v64 && v61)
  {
    (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v64 + 16))(v64, v62, v61);
    uint64_t v200 = 0;
    uint64_t v15 = *(WTF::StringImpl **)a2;
    unint64_t v14 = *((void *)a2 + 1);
  }
  else
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v200 = 0;
  }
  int v201 = 1;
LABEL_16:
  unint64_t v18 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v15;
  if (v14 < v18 || v14 - v18 <= 7)
  {
    unint64_t v65 = 0;
    unint64_t v66 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v67 = *((void *)a2 + 3);
    if (v67)
    {
      if (v14)
      {
        (*(void (**)(uint64_t))(*(void *)v67 + 16))(v67);
        unint64_t v66 = *(WTF::StringImpl **)a2;
        unint64_t v65 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v65 = 0;
        unint64_t v66 = 0;
      }
    }
  }
  else
  {
    char v19 = (uint64_t *)((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    *((void *)a2 + 2) = v19 + 1;
    if (v15)
    {
      int v199 = 0;
      uint64_t v198 = *v19;
      goto LABEL_20;
    }
    unint64_t v65 = v14;
    unint64_t v66 = 0;
  }
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v68 = *((void *)a2 + 3);
  if (v68 && v65)
  {
    (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v68 + 16))(v68, v66, v65);
    uint64_t v198 = 0;
    uint64_t v15 = *(WTF::StringImpl **)a2;
    unint64_t v14 = *((void *)a2 + 1);
  }
  else
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v198 = 0;
  }
  int v199 = 1;
LABEL_20:
  unint64_t v20 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v15;
  if (v14 < v20 || v14 - v20 <= 7)
  {
    unint64_t v69 = 0;
    unint64_t v70 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v71 = *((void *)a2 + 3);
    if (v71)
    {
      if (v14)
      {
        (*(void (**)(uint64_t))(*(void *)v71 + 16))(v71);
        unint64_t v70 = *(WTF::StringImpl **)a2;
        unint64_t v69 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v69 = 0;
        unint64_t v70 = 0;
      }
    }
  }
  else
  {
    uint64_t v21 = (uint64_t *)((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    *((void *)a2 + 2) = v21 + 1;
    if (v15)
    {
      int v197 = 0;
      uint64_t v196 = *v21;
      goto LABEL_24;
    }
    unint64_t v69 = v14;
    unint64_t v70 = 0;
  }
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v72 = *((void *)a2 + 3);
  if (v72 && v69) {
    (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v72 + 16))(v72, v70, v69);
  }
  uint64_t v196 = 0;
  int v197 = 1;
LABEL_24:
  uint64_t v195 = IPC::Decoder::decode<float>(a2);
  uint64_t v194 = IPC::Decoder::decode<float>(a2);
  LOWORD(v220) = 0;
  IPC::Decoder::operator>><unsigned char>(a2, &v220);
  char v22 = (char)v220;
  if (BYTE1(v220)) {
    BOOL v23 = v220 > 3u;
  }
  else {
    BOOL v23 = 1;
  }
  int v24 = v23;
  int v193 = v24;
  if (v24 == 1)
  {
    unint64_t v73 = *(WTF::StringImpl **)a2;
    uint64_t v74 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v75 = *((void *)a2 + 3);
    if (v75 && v74) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v75 + 16))(v75, v73);
    }
    char v22 = 0;
  }
  char v192 = v22;
  LOWORD(v220) = 0;
  IPC::Decoder::operator>><unsigned char>(a2, &v220);
  char v25 = (char)v220;
  if (BYTE1(v220)) {
    BOOL v26 = v220 > 0xBu;
  }
  else {
    BOOL v26 = 1;
  }
  int v27 = v26;
  int v191 = v27;
  if (v27 == 1)
  {
    char v76 = *(WTF::StringImpl **)a2;
    uint64_t v77 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v78 = *((void *)a2 + 3);
    if (v78 && v77) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v78 + 16))(v78, v76);
    }
    char v25 = 0;
  }
  IPC::Decoder::decode<WTF::RefPtr<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>>((unint64_t)&v214, (unint64_t *)a2);
  unint64_t v28 = *((void *)a2 + 1);
  char v29 = *(WTF::StringImpl **)a2;
  unint64_t v30 = *((void *)a2 + 2) - *(void *)a2;
  char v190 = v25;
  if (v28 <= v30)
  {
    unint64_t v79 = 0;
    int v80 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v81 = *((void *)a2 + 3);
    if (v81)
    {
      if (v28)
      {
        (*(void (**)(uint64_t))(*(void *)v81 + 16))(v81);
        int v80 = *(WTF::StringImpl **)a2;
        unint64_t v79 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v79 = 0;
        int v80 = 0;
      }
    }
    goto LABEL_106;
  }
  uint64_t v31 = (unsigned __int8 *)v29 + v30;
  uint64_t v32 = (uint64_t)v29 + v30 + 1;
  *((void *)a2 + 2) = v32;
  if (!v29)
  {
    unint64_t v79 = v28;
    int v80 = 0;
LABEL_106:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v82 = *((void *)a2 + 3);
    if (v82 && v79)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v82 + 16))(v82, v80, v79);
      unsigned int v33 = 0;
      char v29 = *(WTF::StringImpl **)a2;
      unint64_t v28 = *((void *)a2 + 1);
    }
    else
    {
      unint64_t v28 = 0;
      char v29 = 0;
      unsigned int v33 = 0;
    }
    goto LABEL_108;
  }
  unsigned int v33 = *v31;
  if (v33 < 2)
  {
    int v189 = 0;
    char v34 = 1;
    goto LABEL_42;
  }
LABEL_108:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v83 = *((void *)a2 + 3);
  if (!v83 || !v28)
  {
    unint64_t v84 = 0;
    char v29 = 0;
    char v188 = 0;
    int v189 = 1;
LABEL_110:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v85 = *((void *)a2 + 3);
    if (v85 && v84)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v85 + 16))(v85, v29, v84);
      unsigned int v38 = 0;
      char v29 = *(WTF::StringImpl **)a2;
      unint64_t v28 = *((void *)a2 + 1);
    }
    else
    {
      unint64_t v28 = 0;
      char v29 = 0;
      unsigned int v38 = 0;
    }
    goto LABEL_112;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v83 + 16))(v83, v29);
  char v34 = 0;
  char v29 = *(WTF::StringImpl **)a2;
  unint64_t v28 = *((void *)a2 + 1);
  int v189 = 1;
  uint64_t v32 = *((void *)a2 + 2);
LABEL_42:
  if (!v33) {
    char v34 = 0;
  }
  char v188 = v34;
  unint64_t v35 = v32 - (void)v29;
  if (v28 <= v35)
  {
    unint64_t v84 = 0;
    uint64_t v182 = *((void *)a2 + 3);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    if (v182 && v28)
    {
      (*(void (**)(uint64_t))(*(void *)v182 + 16))(v182);
      char v29 = *(WTF::StringImpl **)a2;
      unint64_t v84 = *((void *)a2 + 1);
    }
    else
    {
      char v29 = 0;
    }
    goto LABEL_110;
  }
  uint64_t v36 = (unsigned __int8 *)v29 + v35;
  uint64_t v37 = (uint64_t)v29 + v35 + 1;
  *((void *)a2 + 2) = v37;
  if (!v29)
  {
    unint64_t v84 = v28;
    goto LABEL_110;
  }
  unsigned int v38 = *v36;
  if (v38 < 2)
  {
    int v187 = 0;
    char v39 = 1;
    goto LABEL_48;
  }
LABEL_112:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v86 = *((void *)a2 + 3);
  if (!v86 || !v28)
  {
    unint64_t v87 = 0;
    char v29 = 0;
    char v186 = 0;
    int v187 = 1;
LABEL_114:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v88 = *((void *)a2 + 3);
    if (v88 && v87)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v88 + 16))(v88, v29, v87);
      unsigned int v43 = 0;
      char v29 = *(WTF::StringImpl **)a2;
      unint64_t v28 = *((void *)a2 + 1);
    }
    else
    {
      unint64_t v28 = 0;
      char v29 = 0;
      unsigned int v43 = 0;
    }
    goto LABEL_116;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v86 + 16))(v86, v29);
  char v39 = 0;
  char v29 = *(WTF::StringImpl **)a2;
  unint64_t v28 = *((void *)a2 + 1);
  int v187 = 1;
  uint64_t v37 = *((void *)a2 + 2);
LABEL_48:
  if (!v38) {
    char v39 = 0;
  }
  char v186 = v39;
  unint64_t v40 = v37 - (void)v29;
  if (v28 <= v40)
  {
    unint64_t v87 = 0;
    uint64_t v181 = *((void *)a2 + 3);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    if (v181 && v28)
    {
      (*(void (**)(uint64_t))(*(void *)v181 + 16))(v181);
      char v29 = *(WTF::StringImpl **)a2;
      unint64_t v87 = *((void *)a2 + 1);
    }
    else
    {
      char v29 = 0;
    }
    goto LABEL_114;
  }
  uint64_t v41 = (unsigned __int8 *)v29 + v40;
  uint64_t v42 = (uint64_t)v29 + v40 + 1;
  *((void *)a2 + 2) = v42;
  if (!v29)
  {
    unint64_t v87 = v28;
    goto LABEL_114;
  }
  unsigned int v43 = *v41;
  if (v43 < 2)
  {
    int v185 = 0;
    char v44 = 1;
    goto LABEL_54;
  }
LABEL_116:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v89 = *((void *)a2 + 3);
  if (!v89 || !v28)
  {
    unint64_t v90 = 0;
    char v29 = 0;
    char v184 = 0;
    int v185 = 1;
LABEL_118:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v91 = *((void *)a2 + 3);
    if (v91 && v90)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v91 + 16))(v91, v29, v90);
      unsigned int v48 = 0;
      char v29 = *(WTF::StringImpl **)a2;
      unint64_t v28 = *((void *)a2 + 1);
    }
    else
    {
      unint64_t v28 = 0;
      char v29 = 0;
      unsigned int v48 = 0;
    }
    goto LABEL_120;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v89 + 16))(v89, v29);
  char v44 = 0;
  char v29 = *(WTF::StringImpl **)a2;
  unint64_t v28 = *((void *)a2 + 1);
  int v185 = 1;
  uint64_t v42 = *((void *)a2 + 2);
LABEL_54:
  if (!v43) {
    char v44 = 0;
  }
  char v184 = v44;
  unint64_t v45 = v42 - (void)v29;
  if (v28 <= v45)
  {
    unint64_t v90 = 0;
    uint64_t v180 = *((void *)a2 + 3);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    if (v180 && v28)
    {
      (*(void (**)(uint64_t))(*(void *)v180 + 16))(v180);
      char v29 = *(WTF::StringImpl **)a2;
      unint64_t v90 = *((void *)a2 + 1);
    }
    else
    {
      char v29 = 0;
    }
    goto LABEL_118;
  }
  unint64_t v46 = (unsigned __int8 *)v29 + v45;
  uint64_t v47 = (uint64_t)v29 + v45 + 1;
  *((void *)a2 + 2) = v47;
  if (!v29)
  {
    unint64_t v90 = v28;
    goto LABEL_118;
  }
  unsigned int v48 = *v46;
  if (v48 < 2)
  {
    int v3 = 0;
    char v49 = 1;
    goto LABEL_60;
  }
LABEL_120:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v92 = *((void *)a2 + 3);
  if (!v92 || !v28)
  {
    char v2 = 0;
    unint64_t v93 = 0;
    char v29 = 0;
    int v3 = 1;
LABEL_122:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v94 = *((void *)a2 + 3);
    if (v94 && v93)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v94 + 16))(v94, v29, v93);
      unsigned int v52 = 0;
      char v29 = *(WTF::StringImpl **)a2;
      unint64_t v28 = *((void *)a2 + 1);
    }
    else
    {
      unint64_t v28 = 0;
      char v29 = 0;
      unsigned int v52 = 0;
    }
    goto LABEL_124;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v92 + 16))(v92, v29);
  char v49 = 0;
  char v29 = *(WTF::StringImpl **)a2;
  unint64_t v28 = *((void *)a2 + 1);
  int v3 = 1;
  uint64_t v47 = *((void *)a2 + 2);
LABEL_60:
  if (v48) {
    char v2 = v49;
  }
  else {
    char v2 = 0;
  }
  unint64_t v50 = v47 - (void)v29;
  if (v28 <= v50)
  {
    unint64_t v93 = 0;
    uint64_t v179 = *((void *)a2 + 3);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    if (v179 && v28)
    {
      (*(void (**)(uint64_t))(*(void *)v179 + 16))(v179);
      char v29 = *(WTF::StringImpl **)a2;
      unint64_t v93 = *((void *)a2 + 1);
    }
    else
    {
      char v29 = 0;
    }
    goto LABEL_122;
  }
  unint64_t v51 = (unsigned __int8 *)v29 + v50;
  *((void *)a2 + 2) = v51 + 1;
  if (!v29)
  {
    unint64_t v93 = v28;
    goto LABEL_122;
  }
  unsigned int v52 = *v51;
  if (v52 < 2)
  {
    int v4 = 0;
    char v53 = 1;
    goto LABEL_67;
  }
LABEL_124:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v95 = *((void *)a2 + 3);
  if (v95 && v28) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v95 + 16))(v95, v29);
  }
  char v53 = 0;
  int v4 = 1;
LABEL_67:
  if (v52) {
    char v5 = v53;
  }
  else {
    char v5 = 0;
  }
  unint64_t v54 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v55)
  {
    LOBYTE(v211) = 0;
    char v213 = 0;
LABEL_136:
    unint64_t v97 = *(WTF::StringImpl **)a2;
    uint64_t v98 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v99 = *((void *)a2 + 3);
    if (v99 && v98) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v99 + 16))(v99, v97);
    }
    goto LABEL_137;
  }
  unint64_t v56 = v54;
  v208 = 0;
  v209 = 0;
  if (v54 >> 1 >= 0xF0F)
  {
    while (1)
    {
      IPC::Decoder::decode<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>((uint64_t)&v220, (uint64_t *)a2);
      if (!v234) {
        goto LABEL_135;
      }
      if (HIDWORD(v209) == v209)
      {
        WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>((uint64_t)&v208, (unint64_t)&v220);
      }
      else
      {
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v208 + 136 * HIDWORD(v209), (uint64_t)&v220);
        ++HIDWORD(v209);
      }
      if (v234 && v233 != -1) {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9B4F68[v233])(&v205, &v220);
      }
      if (!--v56)
      {
        WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v208, HIDWORD(v209));
        v211 = v208;
        unint64_t v96 = v209;
        v208 = 0;
        v209 = 0;
        v212 = v96;
        goto LABEL_84;
      }
    }
  }
  if (v54)
  {
    LODWORD(v209) = 136 * (int)v54 / 0x88u;
    v208 = (WTF *)WTF::fastMalloc((WTF *)(136 * v54));
    while (1)
    {
      IPC::Decoder::decode<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>((uint64_t)&v220, (uint64_t *)a2);
      if (!v234) {
        break;
      }
      if (HIDWORD(v209) == v209)
      {
        WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>((uint64_t)&v208, (unint64_t)&v220);
      }
      else
      {
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v208 + 136 * HIDWORD(v209), (uint64_t)&v220);
        ++HIDWORD(v209);
      }
      if (v234 && v233 != -1) {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9B4F68[v233])(&v205, &v220);
      }
      if (!--v56)
      {
        uint64_t v58 = v208;
        unint64_t v59 = v209;
        goto LABEL_83;
      }
    }
LABEL_135:
    LOBYTE(v211) = 0;
    char v213 = 0;
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v208, v57);
    goto LABEL_136;
  }
  uint64_t v58 = 0;
  unint64_t v59 = 0;
LABEL_83:
  v208 = 0;
  v209 = 0;
  v211 = v58;
  v212 = v59;
LABEL_84:
  char v213 = 1;
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v208, v55);
LABEL_137:
  IPC::Decoder::decode<WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v208, a2);
  unint64_t v100 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v101)
  {
    LOBYTE(v205) = 0;
    char v207 = 0;
LABEL_167:
    v122 = *(WTF::StringImpl **)a2;
    uint64_t v123 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v124 = *((void *)a2 + 3);
    if (v124 && v123) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v124 + 16))(v124, v122);
    }
    goto LABEL_168;
  }
  unint64_t v102 = v100;
  v220 = 0;
  *(void *)&long long v221 = 0;
  if (v100 >= 0x20000)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>>((unint64_t)&v202, (unint64_t *)a2);
      if (!(_BYTE)v203)
      {
LABEL_166:
        LOBYTE(v205) = 0;
        char v207 = 0;
        WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v220, v101);
        goto LABEL_167;
      }
      int v114 = DWORD1(v221);
      if (DWORD1(v221) != v221) {
        break;
      }
      v115 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v220, DWORD1(v221) + 1, (unint64_t)&v202);
      uint64_t v116 = DWORD1(v221);
      int v117 = DWORD1(v221) + 1;
      v118 = v220;
      uint64_t v119 = *v115;
      uint64_t *v115 = 0;
      *((void *)v118 + v116) = v119;
      DWORD1(v221) = v117;
      if ((_BYTE)v203) {
        goto LABEL_160;
      }
LABEL_164:
      if (!--v102)
      {
        WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v220, DWORD1(v221));
        v205 = v220;
        uint64_t v178 = v221;
        v220 = 0;
        *(void *)&long long v221 = 0;
        uint64_t v206 = v178;
        goto LABEL_153;
      }
    }
    v120 = v202;
    v202 = 0;
    *((void *)v220 + DWORD1(v221)) = v120;
    DWORD1(v221) = v114 + 1;
LABEL_160:
    v121 = v202;
    v202 = 0;
    if (v121)
    {
      if (v121[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v121 + 16))(v121);
      }
      else {
        --v121[2];
      }
    }
    goto LABEL_164;
  }
  if (v100)
  {
    uint64_t v103 = WTF::fastMalloc((WTF *)(8 * v100));
    LODWORD(v221) = v102;
    v220 = (WTF::StringImpl *)v103;
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>>((unint64_t)&v202, (unint64_t *)a2);
      if (!(_BYTE)v203) {
        goto LABEL_166;
      }
      int v104 = DWORD1(v221);
      if (DWORD1(v221) != v221) {
        break;
      }
      uint64_t v105 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v220, DWORD1(v221) + 1, (unint64_t)&v202);
      uint64_t v106 = DWORD1(v221);
      int v107 = DWORD1(v221) + 1;
      uint64_t v108 = v220;
      uint64_t v109 = *v105;
      *uint64_t v105 = 0;
      *((void *)v108 + v106) = v109;
      DWORD1(v221) = v107;
      if ((_BYTE)v203) {
        goto LABEL_146;
      }
LABEL_150:
      if (!--v102)
      {
        v112 = v220;
        uint64_t v113 = v221;
        goto LABEL_152;
      }
    }
    v110 = v202;
    v202 = 0;
    *((void *)v220 + DWORD1(v221)) = v110;
    DWORD1(v221) = v104 + 1;
LABEL_146:
    v111 = v202;
    v202 = 0;
    if (v111)
    {
      if (v111[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v111 + 16))(v111);
      }
      else {
        --v111[2];
      }
    }
    goto LABEL_150;
  }
  v112 = 0;
  uint64_t v113 = 0;
LABEL_152:
  v220 = 0;
  *(void *)&long long v221 = 0;
  v205 = v112;
  uint64_t v206 = v113;
LABEL_153:
  char v207 = 1;
  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v220, v101);
LABEL_168:
  unint64_t v125 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v126)
  {
    LOBYTE(v202) = 0;
    char v204 = 0;
    goto LABEL_195;
  }
  unint64_t v127 = v125;
  uint64_t v218 = 0;
  v219 = 0;
  if (v125 >> 1 >= 0xF0F)
  {
    char v183 = v11;
    char v128 = v5;
    int v129 = v4;
    char v130 = v2;
    int v131 = v3;
    while (1)
    {
      IPC::Decoder::decode<WebKit::PlatformCAAnimationRemoteProperties>(&v220, a2);
      if (!v234) {
        break;
      }
      if (HIDWORD(v219) == v219)
      {
        WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::PlatformCAAnimationRemoteProperties>((uint64_t)&v218, (unint64_t)&v220);
      }
      else
      {
        uint64_t v148 = v218 + 136 * HIDWORD(v219);
        v149 = v220;
        v220 = 0;
        *(void *)uint64_t v148 = v149;
        long long v150 = v221;
        long long v151 = *(_OWORD *)v222;
        *(_OWORD *)(v148 + 34) = *(_OWORD *)&v222[10];
        *(_OWORD *)(v148 + 24) = v151;
        *(_OWORD *)(v148 + 8) = v150;
        v152 = v223;
        v223 = 0;
        *(void *)(v148 + 56) = v152;
        LODWORD(v152) = v224;
        *(unsigned char *)(v148 + 68) = v225;
        *(_DWORD *)(v148 + 64) = v152;
        *(void *)(v148 + 72) = 0;
        *(void *)(v148 + 80) = 0;
        v153 = v226;
        v226 = 0;
        *(void *)(v148 + 72) = v153;
        LODWORD(v153) = v227;
        LODWORD(v227) = 0;
        *(_DWORD *)(v148 + 80) = v153;
        LODWORD(v153) = HIDWORD(v227);
        HIDWORD(v227) = 0;
        *(_DWORD *)(v148 + 84) = v153;
        *(void *)(v148 + 88) = 0;
        *(void *)(v148 + 96) = 0;
        v154 = v228;
        v228 = 0;
        *(void *)(v148 + 88) = v154;
        LODWORD(v154) = v229;
        LODWORD(v229) = 0;
        *(_DWORD *)(v148 + 96) = v154;
        LODWORD(v154) = HIDWORD(v229);
        HIDWORD(v229) = 0;
        *(_DWORD *)(v148 + 100) = v154;
        *(void *)(v148 + 104) = 0;
        *(void *)(v148 + 112) = 0;
        v155 = v230;
        v230 = 0;
        *(void *)(v148 + 104) = v155;
        LODWORD(v155) = v231;
        LODWORD(v231) = 0;
        *(_DWORD *)(v148 + 112) = v155;
        LODWORD(v155) = HIDWORD(v231);
        HIDWORD(v231) = 0;
        *(_DWORD *)(v148 + 116) = v155;
        *(void *)(v148 + 120) = 0;
        *(void *)(v148 + 128) = 0;
        uint64_t v156 = v232;
        uint64_t v232 = 0;
        *(void *)(v148 + 120) = v156;
        LODWORD(v156) = v233;
        LODWORD(v233) = 0;
        *(_DWORD *)(v148 + 128) = v156;
        LODWORD(v156) = HIDWORD(v233);
        HIDWORD(v233) = 0;
        *(_DWORD *)(v148 + 132) = v156;
        ++HIDWORD(v219);
      }
      std::__optional_destruct_base<WebKit::PlatformCAAnimationRemoteProperties,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v220, v134);
      if (!--v127)
      {
        WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v218, (WTF *)HIDWORD(v219));
        v157 = (_DWORD *)v218;
        uint64_t v218 = 0;
        v202 = v157;
        int v158 = (int)v219;
        int v146 = HIDWORD(v219);
        LODWORD(v219) = 0;
        LODWORD(v203) = v158;
        char v2 = v130;
        int v4 = v129;
        char v5 = v128;
        char v11 = v183;
        goto LABEL_181;
      }
    }
LABEL_194:
    LOBYTE(v202) = 0;
    char v204 = 0;
    std::__optional_destruct_base<WebKit::PlatformCAAnimationRemoteProperties,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v220, v134);
    WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v218, v159);
    int v3 = v131;
    char v2 = v130;
    int v4 = v129;
    char v5 = v128;
    char v11 = v183;
LABEL_195:
    long long v9 = *(WTF::StringImpl **)a2;
    uint64_t v10 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result) {
      goto LABEL_249;
    }
    goto LABEL_196;
  }
  if (v125)
  {
    char v183 = v11;
    char v128 = v5;
    int v129 = v4;
    char v130 = v2;
    int v131 = v3;
    unsigned int v132 = 136 * v125;
    uint64_t v133 = WTF::fastMalloc((WTF *)(136 * v125));
    LODWORD(v219) = v132 / 0x88;
    uint64_t v218 = v133;
    do
    {
      IPC::Decoder::decode<WebKit::PlatformCAAnimationRemoteProperties>(&v220, a2);
      if (!v234) {
        goto LABEL_194;
      }
      if (HIDWORD(v219) == v219)
      {
        WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::PlatformCAAnimationRemoteProperties>((uint64_t)&v218, (unint64_t)&v220);
      }
      else
      {
        uint64_t v135 = v218 + 136 * HIDWORD(v219);
        v136 = v220;
        v220 = 0;
        *(void *)uint64_t v135 = v136;
        long long v137 = v221;
        long long v138 = *(_OWORD *)v222;
        *(_OWORD *)(v135 + 34) = *(_OWORD *)&v222[10];
        *(_OWORD *)(v135 + 24) = v138;
        *(_OWORD *)(v135 + 8) = v137;
        v139 = v223;
        v223 = 0;
        *(void *)(v135 + 56) = v139;
        LODWORD(v139) = v224;
        *(unsigned char *)(v135 + 68) = v225;
        *(_DWORD *)(v135 + 64) = v139;
        *(void *)(v135 + 72) = 0;
        *(void *)(v135 + 80) = 0;
        v140 = v226;
        v226 = 0;
        *(void *)(v135 + 72) = v140;
        LODWORD(v140) = v227;
        LODWORD(v227) = 0;
        *(_DWORD *)(v135 + 80) = v140;
        LODWORD(v140) = HIDWORD(v227);
        HIDWORD(v227) = 0;
        *(_DWORD *)(v135 + 84) = v140;
        *(void *)(v135 + 88) = 0;
        *(void *)(v135 + 96) = 0;
        v141 = v228;
        v228 = 0;
        *(void *)(v135 + 88) = v141;
        LODWORD(v141) = v229;
        LODWORD(v229) = 0;
        *(_DWORD *)(v135 + 96) = v141;
        LODWORD(v141) = HIDWORD(v229);
        HIDWORD(v229) = 0;
        *(_DWORD *)(v135 + 100) = v141;
        *(void *)(v135 + 104) = 0;
        *(void *)(v135 + 112) = 0;
        v142 = v230;
        v230 = 0;
        *(void *)(v135 + 104) = v142;
        LODWORD(v142) = v231;
        LODWORD(v231) = 0;
        *(_DWORD *)(v135 + 112) = v142;
        LODWORD(v142) = HIDWORD(v231);
        HIDWORD(v231) = 0;
        *(_DWORD *)(v135 + 116) = v142;
        *(void *)(v135 + 120) = 0;
        *(void *)(v135 + 128) = 0;
        uint64_t v143 = v232;
        uint64_t v232 = 0;
        *(void *)(v135 + 120) = v143;
        LODWORD(v143) = v233;
        LODWORD(v233) = 0;
        *(_DWORD *)(v135 + 128) = v143;
        LODWORD(v143) = HIDWORD(v233);
        HIDWORD(v233) = 0;
        *(_DWORD *)(v135 + 132) = v143;
        ++HIDWORD(v219);
      }
      std::__optional_destruct_base<WebKit::PlatformCAAnimationRemoteProperties,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v220, v134);
      --v127;
    }
    while (v127);
    v144 = (_DWORD *)v218;
    int v145 = (int)v219;
    int v146 = HIDWORD(v219);
    char v2 = v130;
    int v4 = v129;
    char v5 = v128;
    char v11 = v183;
  }
  else
  {
    int v146 = 0;
    int v145 = 0;
    v144 = 0;
  }
  uint64_t v218 = 0;
  v202 = v144;
  LODWORD(v219) = 0;
  LODWORD(v203) = v145;
LABEL_181:
  HIDWORD(v219) = 0;
  HIDWORD(v203) = v146;
  char v204 = 1;
  uint64_t result = WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v218, v126);
  int v147 = 0;
  if (*(void *)a2)
  {
    while (1)
    {
      if (v217)
      {
        v160 = v216;
        v216 = 0;
        v220 = v160;
        LOBYTE(v221) = v11;
        if (!v201)
        {
          *((void *)&v221 + 1) = v200;
          if (!v199)
          {
            *(void *)v222 = v198;
            if (!v197)
            {
              *(void *)&v222[8] = v196;
              if ((v195 & 0xFF00000000) != 0)
              {
                *(_DWORD *)&v222[16] = v195;
                if ((v194 & 0xFF00000000) != 0)
                {
                  *(_DWORD *)&v222[20] = v194;
                  if (!v193)
                  {
                    v222[24] = v192;
                    if (!v191)
                    {
                      v222[25] = v190;
                      if (v215)
                      {
                        v161 = v214;
                        v214 = 0;
                        v223 = v161;
                        if (!v189)
                        {
                          LOBYTE(v224) = v188;
                          if (!v187)
                          {
                            BYTE1(v224) = v186;
                            if (!v185)
                            {
                              BYTE2(v224) = v184;
                              if (!v3)
                              {
                                HIBYTE(v224) = v2;
                                if (!v4)
                                {
                                  char v225 = v5;
                                  if (v213)
                                  {
                                    v162 = v211;
                                    v226 = v211;
                                    unsigned int v163 = v212;
                                    unsigned int v164 = HIDWORD(v212);
                                    v211 = 0;
                                    v212 = 0;
                                    unint64_t v227 = __PAIR64__(v164, v163);
                                    if (v210)
                                    {
                                      v165 = v208;
                                      v208 = 0;
                                      v228 = v165;
                                      int v166 = (int)v209;
                                      int v167 = HIDWORD(v209);
                                      v229 = v209;
                                      if (v207)
                                      {
                                        v168 = v205;
                                        v230 = v205;
                                        long long v9 = (WTF::StringImpl *)v206;
                                        uint64_t v10 = HIDWORD(v206);
                                        v205 = 0;
                                        uint64_t v206 = 0;
                                        unint64_t v231 = __PAIR64__(v10, v9);
                                        if (!v147) {
                                          break;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_248:
      __break(1u);
LABEL_249:
      if (v10) {
        uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v9);
      }
LABEL_196:
      if (!*(void *)a2)
      {
        int v60 = 0;
        *(unsigned char *)a1 = 0;
        *(unsigned char *)(a1 + 136) = 0;
        goto LABEL_228;
      }
      int v147 = 1;
    }
    v169 = v202;
    v202 = 0;
    *(void *)a1 = v160;
    long long v170 = *(_OWORD *)v222;
    *(_OWORD *)(a1 + 8) = v221;
    *(_OWORD *)(a1 + 24) = v170;
    *(_OWORD *)(a1 + 34) = *(_OWORD *)&v222[10];
    v220 = 0;
    v223 = 0;
    *(void *)(a1 + 56) = v161;
    *(_DWORD *)(a1 + 64) = v224;
    *(unsigned char *)(a1 + 68) = v225;
    v226 = 0;
    *(void *)(a1 + 72) = v162;
    unint64_t v227 = 0;
    *(_DWORD *)(a1 + 80) = v163;
    *(_DWORD *)(a1 + 84) = v164;
    v228 = 0;
    *(void *)(a1 + 88) = v165;
    v229 = 0;
    *(_DWORD *)(a1 + 96) = v166;
    *(_DWORD *)(a1 + 100) = v167;
    v230 = 0;
    *(void *)(a1 + 104) = v168;
    unint64_t v231 = 0;
    *(_DWORD *)(a1 + 112) = v9;
    *(_DWORD *)(a1 + 116) = v10;
    uint64_t v232 = 0;
    *(void *)(a1 + 120) = v169;
    uint64_t v233 = 0;
    *(void *)&long long v170 = v203;
    uint64_t v203 = 0;
    *(void *)(a1 + 128) = v170;
    *(unsigned char *)(a1 + 136) = 1;
    WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v232, v9);
    WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v230, v171);
    v173 = v228;
    if (v228)
    {
      v228 = 0;
      LODWORD(v229) = 0;
      WTF::fastFree(v173, v172);
    }
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v226, v172);
    v174 = v223;
    v223 = 0;
    if (v174)
    {
      if (v174[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v174 + 16))(v174);
      }
      else {
        --v174[2];
      }
    }
    v175 = v220;
    v220 = 0;
    if (v175)
    {
      if (*(_DWORD *)v175 == 2) {
        WTF::StringImpl::destroy(v175, v9);
      }
      else {
        *(_DWORD *)v175 -= 2;
      }
    }
    int v60 = 1;
  }
  else
  {
    int v60 = 0;
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 136) = 0;
  }
  uint64_t result = WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v202, v9);
LABEL_228:
  if (v207) {
    uint64_t result = WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v205, v9);
  }
  if (v210)
  {
    uint64_t result = (uint64_t)v208;
    if (v208) {
      uint64_t result = WTF::fastFree(v208, v9);
    }
  }
  if (v213) {
    uint64_t result = WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v211, v9);
  }
  if (v215)
  {
    uint64_t result = (uint64_t)v214;
    if (v214)
    {
      if (v214[2] == 1) {
        uint64_t result = (*(uint64_t (**)(void))(*(void *)v214 + 16))();
      }
      else {
        --v214[2];
      }
    }
  }
LABEL_240:
  if (v217)
  {
    uint64_t result = (uint64_t)v216;
    v216 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
        if (v60) {
          return result;
        }
        goto LABEL_251;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v60) {
    return result;
  }
LABEL_251:
  v176 = *(WTF::StringImpl **)a2;
  uint64_t v177 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result)
  {
    if (v177) {
      return (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v176);
    }
  }
  return result;
}

void sub_198952D58(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,WTF *a30,uint64_t a31,char a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39,char a40,WTF::StringImpl *a41,char a42,int a43,__int16 a44,char a45,char a46)
{
  std::__optional_destruct_base<WebKit::PlatformCAAnimationRemoteProperties,false>::~__optional_destruct_base[abi:sn180100](v46, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebKit::PlatformCAAnimationRemoteProperties,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 136))
  {
    WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 120, a2);
    WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 104, v3);
    char v5 = *(WTF **)(a1 + 88);
    if (v5)
    {
      *(void *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 96) = 0;
      WTF::fastFree(v5, v4);
    }
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 72, v4);
    uint64_t v7 = *(_DWORD **)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    if (v7)
    {
      if (v7[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v7 + 16))(v7);
      }
      else {
        --v7[2];
      }
    }
    uint64_t v8 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
  }
  return a1;
}

uint64_t WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>(uint64_t a1, unint64_t a2)
{
  int v3 = (uint64_t *)WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::pair[abi:sn180100]((void *)(*(void *)a1 + 144 * *(unsigned int *)(a1 + 12)), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

void *std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::pair[abi:sn180100](void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  *a1 = v3;
  WebKit::PlatformCAAnimationRemoteProperties::PlatformCAAnimationRemoteProperties((uint64_t)(a1 + 1), a2 + 1);
  return a1;
}

void sub_1989530A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v3 = v2;
  char v5 = *v3;
  *uint64_t v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 <= a3 && v5 + 144 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    uint64_t v9 = a3 - v5;
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v9;
  }
  else
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10) {
      unint64_t v7 = v6 + 1;
    }
    else {
      unint64_t v7 = 16;
    }
    if (v7 > a2) {
      a2 = v7;
    }
    WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x1C71C72)
    {
      __break(0xC471u);
      JUMPOUT(0x198953234);
    }
    unint64_t v3 = *(WTF **)a1;
    int v4 = (uint64_t *)(*(void *)a1 + 144 * *(unsigned int *)(a1 + 12));
    int v5 = 144 * a2;
    unint64_t v6 = (void *)WTF::fastMalloc((WTF *)(144 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x90;
    *(void *)a1 = v6;
    WTF::VectorMover<false,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>::move(uint64_t result, uint64_t *a2, void *a3)
{
  if ((uint64_t *)result != a2)
  {
    int v5 = (uint64_t *)result;
    do
    {
      std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::pair[abi:sn180100](a3, v5);
      uint64_t result = std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::~pair((uint64_t)v5, v6);
      a3 += 18;
      v5 += 18;
    }
    while (v5 != a2);
  }
  return result;
}

_DWORD *IPC::Decoder::decode<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>>(unsigned char *a1, unint64_t *a2)
{
  IPC::Decoder::decode<WTF::RefPtr<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>>((unint64_t)&v118, a2);
  LOWORD(v112) = 0;
  IPC::Decoder::operator>><unsigned char>(a2, &v112);
  char v4 = (char)v112;
  if (BYTE1(v112)) {
    BOOL v5 = v112 > 4u;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = v5;
  if (v6 == 1)
  {
    unint64_t v42 = *a2;
    unint64_t v43 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v44 = a2[3];
    if (v44 && v43) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v44 + 16))(v44, v42);
    }
    char v4 = 0;
  }
  char v102 = v4;
  unint64_t v93 = a1;
  LOWORD(v112) = 0;
  IPC::Decoder::operator>><unsigned char>(a2, &v112);
  char v7 = (char)v112;
  if (BYTE1(v112)) {
    BOOL v8 = v112 > 3u;
  }
  else {
    BOOL v8 = 1;
  }
  int v9 = v8;
  if (v9 == 1)
  {
    unint64_t v45 = *a2;
    unint64_t v46 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v47 = a2[3];
    if (v47 && v46) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v47 + 16))(v47, v45);
    }
    char v7 = 0;
  }
  char v101 = v7;
  unint64_t v10 = a2[1];
  unint64_t v11 = *a2;
  unint64_t v12 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v10 >= v12 && v10 - v12 > 7)
  {
    unint64_t v14 = (uint64_t *)(v11 + v12);
    a2[2] = (unint64_t)(v14 + 1);
    if (v11)
    {
      int v15 = 0;
      uint64_t v99 = *v14;
      goto LABEL_22;
    }
    unint64_t v48 = v10;
    unint64_t v49 = 0;
  }
  else
  {
    unint64_t v48 = 0;
    unint64_t v49 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v50 = a2[3];
    if (v50)
    {
      if (v10)
      {
        (*(void (**)(unint64_t))(*(void *)v50 + 16))(v50);
        unint64_t v49 = *a2;
        unint64_t v48 = a2[1];
      }
      else
      {
        unint64_t v48 = 0;
        unint64_t v49 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  unint64_t v51 = a2[3];
  if (v51 && v48)
  {
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v51 + 16))(v51, v49, v48);
    uint64_t v99 = 0;
    unint64_t v11 = *a2;
    unint64_t v10 = a2[1];
  }
  else
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v99 = 0;
  }
  int v15 = 1;
LABEL_22:
  unint64_t v16 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v11;
  if (v10 < v16 || v10 - v16 <= 7)
  {
    unint64_t v52 = 0;
    unint64_t v53 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v54 = a2[3];
    if (v54)
    {
      if (v10)
      {
        (*(void (**)(unint64_t))(*(void *)v54 + 16))(v54);
        unint64_t v53 = *a2;
        unint64_t v52 = a2[1];
      }
      else
      {
        unint64_t v52 = 0;
        unint64_t v53 = 0;
      }
    }
    goto LABEL_61;
  }
  uint64_t v17 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  a2[2] = (unint64_t)(v17 + 1);
  if (!v11)
  {
    unint64_t v52 = v10;
    unint64_t v53 = 0;
LABEL_61:
    *a2 = 0;
    a2[1] = 0;
    unint64_t v55 = a2[3];
    if (v55 && v52) {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v55 + 16))(v55, v53, v52);
    }
    uint64_t v19 = 0;
    int v18 = 1;
    goto LABEL_26;
  }
  int v18 = 0;
  uint64_t v19 = *v17;
LABEL_26:
  uint64_t v100 = IPC::Decoder::decode<WTF::Seconds>((uint64_t *)a2);
  uint64_t v21 = v20;
  uint64_t v98 = IPC::Decoder::decode<WTF::Seconds>((uint64_t *)a2);
  char v23 = v22;
  uint64_t v97 = IPC::Decoder::decode<WTF::Seconds>((uint64_t *)a2);
  char v25 = v24;
  uint64_t v96 = IPC::Decoder::decode<WTF::Seconds>((uint64_t *)a2);
  char v27 = v26;
  uint64_t v95 = v19;
  uint64_t result = (_DWORD *)IPC::Decoder::decode<WTF::Seconds>((uint64_t *)a2);
  uint64_t v94 = result;
  unint64_t v31 = *a2;
  if (*a2)
  {
    if (!(_BYTE)v119 || v6 || v9 || v15 || v18 || !(_BYTE)v21 || !v23 || !v25 || !v27 || !(_BYTE)v29) {
      goto LABEL_131;
    }
    uint64_t v21 = v118;
  }
  else
  {
    if ((_BYTE)v119 && v118)
    {
      if (v118[2] == 1) {
        (*(void (**)(void))(*(void *)v118 + 16))();
      }
      else {
        --v118[2];
      }
    }
    uint64_t v21 = 0;
    unint64_t v90 = *a2;
    unint64_t v91 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v92 = a2[3];
    if (v92)
    {
      if (v91) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v92 + 16))(v92, v90);
      }
      uint64_t v21 = 0;
    }
  }
  unint64_t v32 = IPC::Decoder::decode<unsigned long long>(a2);
  if ((_BYTE)v33)
  {
    unint64_t v34 = v32;
    uint64_t v106 = 0;
    uint64_t v107 = 0;
    if (v32 < 0xEA0)
    {
      if (v32)
      {
        LODWORD(v107) = 280 * (int)v32 / 0x118u;
        uint64_t v106 = (WTF *)WTF::fastMalloc((WTF *)(280 * v32));
        do
        {
          IPC::Decoder::decode<WebCore::AcceleratedEffect::Keyframe>((uint64_t)&v118, a2);
          if (!v123) {
            goto LABEL_81;
          }
          if (HIDWORD(v107) == v107)
          {
            WTF::Vector<WebCore::AcceleratedEffect::Keyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AcceleratedEffect::Keyframe>((uint64_t)&v106, (unint64_t)&v118);
          }
          else
          {
            uint64_t v37 = (char *)v106 + 280 * HIDWORD(v107);
            *(void *)uint64_t v37 = MEMORY[0x1E4FB6B60] + 16;
            *((void *)v37 + 1) = v119;
            WebCore::AcceleratedEffectValues::AcceleratedEffectValues((uint64_t)(v37 + 16), (uint64_t)v120);
            uint64_t v38 = v121;
            uint64_t v121 = 0;
            *((void *)v37 + 33) = v38;
            *((_DWORD *)v37 + 68) = v122;
            ++HIDWORD(v107);
          }
          std::__optional_destruct_base<WebCore::AcceleratedEffect::Keyframe,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v118, v36);
          --v34;
        }
        while (v34);
        char v39 = v106;
        int v41 = v107;
        int v40 = HIDWORD(v107);
      }
      else
      {
        int v40 = 0;
        int v41 = 0;
        char v39 = 0;
      }
      uint64_t v106 = 0;
      v112 = v39;
LABEL_51:
      uint64_t v107 = 0;
      int v113 = v41;
      int v114 = v40;
      char v115 = 1;
      WTF::Vector<WebCore::AcceleratedEffect::Keyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v106, v33);
      goto LABEL_83;
    }
    while (1)
    {
      IPC::Decoder::decode<WebCore::AcceleratedEffect::Keyframe>((uint64_t)&v118, a2);
      if (!v123) {
        break;
      }
      if (HIDWORD(v107) == v107)
      {
        WTF::Vector<WebCore::AcceleratedEffect::Keyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AcceleratedEffect::Keyframe>((uint64_t)&v106, (unint64_t)&v118);
      }
      else
      {
        unint64_t v57 = (char *)v106 + 280 * HIDWORD(v107);
        *(void *)unint64_t v57 = MEMORY[0x1E4FB6B60] + 16;
        *((void *)v57 + 1) = v119;
        WebCore::AcceleratedEffectValues::AcceleratedEffectValues((uint64_t)(v57 + 16), (uint64_t)v120);
        uint64_t v58 = v121;
        uint64_t v121 = 0;
        *((void *)v57 + 33) = v58;
        *((_DWORD *)v57 + 68) = v122;
        ++HIDWORD(v107);
      }
      uint64_t result = (_DWORD *)std::__optional_destruct_base<WebCore::AcceleratedEffect::Keyframe,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v118, v56);
      if (!--v34)
      {
        unsigned int v59 = HIDWORD(v107);
        int v60 = v106;
        if (v107 > HIDWORD(v107))
        {
          unint64_t v61 = v106;
          if (HIDWORD(v107))
          {
            if (HIDWORD(v107) >= 0xEA0EA1)
            {
              __break(0xC471u);
              return result;
            }
            unint64_t v62 = (WTF *)WTF::fastMalloc((WTF *)(280 * HIDWORD(v107)));
            LODWORD(v107) = 280 * v59 / 0x118;
            uint64_t v106 = v62;
            unint64_t v61 = v60;
            if (v62 != v60)
            {
              WTF::VectorMover<false,WebCore::AcceleratedEffect::Keyframe>::move((uint64_t)v60, (uint64_t)v60 + 280 * v59, (uint64_t)v62);
              unint64_t v61 = v106;
            }
          }
          if (v60)
          {
            if (v61 == v60)
            {
              uint64_t v106 = 0;
              LODWORD(v107) = 0;
            }
            WTF::fastFree(v60, v33);
            int v60 = v106;
          }
          else
          {
            int v60 = v61;
          }
        }
        uint64_t v106 = 0;
        v112 = v60;
        int v41 = v107;
        int v40 = HIDWORD(v107);
        goto LABEL_51;
      }
    }
LABEL_81:
    LOBYTE(v112) = 0;
    char v115 = 0;
    std::__optional_destruct_base<WebCore::AcceleratedEffect::Keyframe,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v118, v35);
    WTF::Vector<WebCore::AcceleratedEffect::Keyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v106, v63);
  }
  else
  {
    LOBYTE(v112) = 0;
    char v115 = 0;
  }
  char v29 = (void *)*a2;
  unint64_t v30 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (_DWORD *)a2[3];
  if (result) {
    goto LABEL_132;
  }
  while (1)
  {
LABEL_83:
    LOWORD(v118) = 0;
    IPC::Decoder::operator>><unsigned char>(a2, &v118);
    if (BYTE1(v118)) {
      BOOL v64 = v118 > 2u;
    }
    else {
      BOOL v64 = 1;
    }
    int v65 = v64;
    if (v65 == 1)
    {
      unint64_t v78 = *a2;
      unint64_t v79 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v80 = a2[3];
      if (v80)
      {
        if (v79) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v80 + 16))(v80, v78);
        }
      }
    }
    unsigned __int16 v66 = IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a2);
    IPC::Decoder::decode<WTF::RefPtr<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>>((unint64_t)&v110, a2);
    int v109 = IPC::Decoder::decode<WTF::OptionSet<WebCore::AcceleratedEffectProperty>>((uint64_t *)a2);
    unint64_t v67 = a2[1];
    unint64_t v68 = *a2;
    unint64_t v69 = a2[2] - *a2;
    if (v67 <= v69)
    {
      unint64_t v81 = 0;
      unint64_t v82 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v83 = a2[3];
      if (v83)
      {
        if (v67)
        {
          (*(void (**)(unint64_t))(*(void *)v83 + 16))(v83);
          unint64_t v82 = *a2;
          unint64_t v81 = a2[1];
        }
        else
        {
          unint64_t v81 = 0;
          unint64_t v82 = 0;
        }
      }
      goto LABEL_137;
    }
    unint64_t v70 = (unsigned __int8 *)(v68 + v69);
    a2[2] = (unint64_t)(v70 + 1);
    if (!v68)
    {
      unint64_t v81 = v67;
      unint64_t v82 = 0;
LABEL_137:
      *a2 = 0;
      a2[1] = 0;
      unint64_t v84 = a2[3];
      if (v84 && v81)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v84 + 16))(v84, v82, v81);
        unint64_t v68 = *a2;
        unint64_t v67 = a2[1];
      }
      else
      {
        unint64_t v67 = 0;
        unint64_t v68 = 0;
      }
LABEL_139:
      *a2 = 0;
      a2[1] = 0;
      unint64_t v85 = a2[3];
      if (v85)
      {
        if (v67)
        {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v85 + 16))(v85, v68);
          unint64_t v68 = *a2;
          unint64_t v67 = a2[1];
          goto LABEL_142;
        }
      }
      else
      {
        unint64_t v67 = 0;
      }
      unint64_t v68 = 0;
LABEL_142:
      int v71 = 1;
      goto LABEL_94;
    }
    if (*v70 >= 2u) {
      goto LABEL_139;
    }
    int v71 = 0;
LABEL_94:
    unint64_t v72 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v68;
    if (v67 < v72 || v67 - v72 <= 7)
    {
      unint64_t v86 = 0;
      unint64_t v87 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v88 = a2[3];
      if (v88)
      {
        if (v67)
        {
          (*(void (**)(unint64_t))(*(void *)v88 + 16))(v88);
          unint64_t v87 = *a2;
          unint64_t v86 = a2[1];
        }
        else
        {
          unint64_t v86 = 0;
          unint64_t v87 = 0;
        }
      }
    }
    else
    {
      a2[2] = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v68)
      {
        int v73 = 0;
        goto LABEL_98;
      }
      unint64_t v86 = v67;
      unint64_t v87 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    unint64_t v89 = a2[3];
    if (v89 && v86) {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v89 + 16))(v89, v87, v86);
    }
    int v73 = 1;
LABEL_98:
    IPC::Decoder::decode<std::optional<WTF::Seconds>>((uint64_t *)a2, &v106);
    uint64_t result = IPC::Decoder::decode<std::optional<WTF::Seconds>>((uint64_t *)a2, &v104);
    if (!*a2)
    {
      int v75 = 0;
      uint64_t v74 = v93;
      *unint64_t v93 = 0;
      v93[8] = 0;
      goto LABEL_114;
    }
    if (v31)
    {
      v118 = v21;
      LOBYTE(v119) = v102;
      BYTE1(v119) = v101;
      *(_DWORD *)((char *)&v119 + 2) = v116;
      HIWORD(v119) = v117;
      v120[0] = v99;
      v120[1] = v95;
      v120[2] = v100;
      v120[3] = v98;
      v120[4] = v97;
      v120[5] = v96;
      v120[6] = v94;
      if (v115)
      {
        if (!v65 && v66 > 0xFFu && v111 && BYTE2(v109) && !v71 && !v73 && v108 && v105) {
          break;
        }
      }
    }
LABEL_131:
    __break(1u);
LABEL_132:
    if (v30) {
      (*(void (**)(_DWORD *, void *))(*(void *)result + 16))(result, v29);
    }
  }
  WebCore::AcceleratedEffect::create();
  uint64_t v74 = v93;
  *(void *)unint64_t v93 = v103;
  v93[8] = 1;
  uint64_t result = v118;
  v118 = 0;
  if (result)
  {
    if (result[2] == 1) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 16))(result);
    }
    else {
      --result[2];
    }
  }
  uint64_t v21 = 0;
  int v75 = 1;
LABEL_114:
  if (v111)
  {
    uint64_t result = v110;
    v110 = 0;
    if (result)
    {
      if (result[2] == 1) {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 16))(result);
      }
      else {
        --result[2];
      }
    }
  }
  if (v115) {
    uint64_t result = (_DWORD *)WTF::Vector<WebCore::AcceleratedEffect::Keyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v112, v29);
  }
  if (v31 && v21)
  {
    if (v21[2] != 1)
    {
      --v21[2];
      goto LABEL_125;
    }
    uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v21 + 16))(v21);
    if (!v74[8])
    {
LABEL_128:
      unint64_t v76 = *a2;
      unint64_t v77 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t result = (_DWORD *)a2[3];
      if (result)
      {
        if (v77) {
          return (_DWORD *)(*(uint64_t (**)(_DWORD *, unint64_t))(*(void *)result + 16))(result, v76);
        }
      }
    }
  }
  else
  {
LABEL_125:
    if (!v75) {
      goto LABEL_128;
    }
  }
  return result;
}

void sub_198953EC8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,_DWORD *a30,char a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40)
{
  if (a31 && a30)
  {
    if (a30[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a30 + 16))(a30);
    }
    else {
      --a30[2];
    }
  }
  if (a37) {
    WTF::Vector<WebCore::AcceleratedEffect::Keyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a33, a2);
  }
  if (v41 && v40)
  {
    if (v40[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v40 + 16))(v40);
    }
    else {
      --v40[2];
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    unint64_t v3 = result;
    unint64_t v4 = result[3];
    if (v4 > a2)
    {
      uint64_t result = WTF::VectorDestructor<true,WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>>::destruct((_DWORD *)(*(void *)result + 8 * a2), (_DWORD **)(*(void *)result + 8 * v4));
      v3[3] = a2;
      LODWORD(v4) = a2;
    }
    BOOL v5 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        uint64_t result = (unsigned int *)WTF::fastRealloc(v5, (void *)(8 * a2));
        *(void *)unint64_t v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19895416CLL);
      }
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(void *)unint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        uint64_t result = (unsigned int *)memcpy(result, v5, 8 * v4);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)unint64_t v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v240 = *MEMORY[0x1E4F143B8];
  *(_WORD *)int v197 = 0;
  IPC::Decoder::operator>><unsigned char>(a2, v197);
  int v8 = v197[0];
  if (v197[1]) {
    BOOL v9 = v197[0] >= 9u;
  }
  else {
    BOOL v9 = 1;
  }
  LOBYTE(v10) = !v9;
  if (v9)
  {
    unint64_t v107 = *(void *)a2;
    uint64_t v108 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v109 = *((void *)a2 + 3);
    if (v109 && v108) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v109 + 16))(v109, v107);
    }
    int v8 = 0;
  }
  if (!*(void *)a2) {
    goto LABEL_420;
  }
  char v11 = v10 ^ 1;
  if (v8) {
    char v12 = 1;
  }
  else {
    char v12 = v10 ^ 1;
  }
  if ((v12 & 1) == 0)
  {
    unint64_t result = IPC::ArgumentCoder<WebCore::ScrollingStateFrameScrollingNode,void>::decode(v197, a2);
    if (!v197[8])
    {
      unint64_t v14 = *(void *)a2;
      uint64_t v110 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      unint64_t result = *((void *)a2 + 3);
      if (result)
      {
        if (v110) {
          unint64_t result = (*(uint64_t (**)(unint64_t, unint64_t))(*(void *)result + 16))(result, v14);
        }
      }
    }
    if (*(void *)a2)
    {
      if (v197[8])
      {
        *(void *)a1 = *(void *)v197;
LABEL_414:
        *(unsigned char *)(a1 + 8) = 1;
        return result;
      }
      goto LABEL_503;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    if (!v197[8] || (v111 = *(void *)v197, *(void *)int v197 = 0, !v111))
    {
LABEL_421:
      uint64_t v124 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      unint64_t result = *((void *)a2 + 3);
      if (result && v124)
      {
        unint64_t v125 = *(uint64_t (**)(void))(*(void *)result + 16);
        return v125();
      }
      return result;
    }
    v112 = *(atomic_uchar **)(v111 + 8);
LABEL_418:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(v112, (void *)v14);
    goto LABEL_421;
  }
  BOOL v5 = &v218;
  if (v8 != 1) {
    char v11 = 1;
  }
  if ((v11 & 1) == 0)
  {
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)&v200);
    IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v210, a2);
    unint64_t result = IPC::Decoder::decode<WTF::OptionSet<WebCore::ScrollingStateNodeProperty>>(a2);
    if (!(_BYTE)v14) {
      goto LABEL_44;
    }
    LOBYTE(v10) = result;
    if (result)
    {
      unint64_t result = (unint64_t)IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v197);
      if (!v197[24]) {
        goto LABEL_44;
      }
      char v15 = v197[0];
      *(void *)&long long v226 = *(void *)&v197[1];
      *(void *)((char *)&v226 + 7) = *(void *)&v197[8];
      uint64_t v2 = v197[16];
      if ((v10 & 2) == 0) {
        goto LABEL_40;
      }
    }
    else
    {
      char v15 = 0;
      uint64_t v2 = 0;
      if ((result & 2) == 0)
      {
LABEL_40:
        if (*(void *)a2)
        {
          if (!v201[8] || !v210[16]) {
            goto LABEL_503;
          }
          v197[0] = v15;
          *(void *)&v197[1] = v226;
          *(void *)&v197[8] = *(void *)((char *)&v226 + 7);
          v197[16] = v2;
          unint64_t result = WebCore::ScrollingStateFrameHostingNode::create();
          uint64_t v10 = v223;
          int v20 = 1;
LABEL_45:
          if (v210[16]) {
            unint64_t result = WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v210, (void *)v14);
          }
          if (v20)
          {
LABEL_48:
            if (*(void *)a2)
            {
              *(void *)a1 = v10;
              goto LABEL_414;
            }
            *(unsigned char *)a1 = 0;
            *(unsigned char *)(a1 + 8) = 0;
            if (!v10) {
              goto LABEL_421;
            }
            v112 = *(atomic_uchar **)(v10 + 8);
            goto LABEL_418;
          }
          unint64_t v36 = *(void *)a2;
          uint64_t v113 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v38 = *((void *)a2 + 3);
          if (!v38 || !v113) {
            goto LABEL_420;
          }
          goto LABEL_502;
        }
LABEL_44:
        int v20 = 0;
        uint64_t v10 = 0;
        goto LABEL_45;
      }
    }
    unint64_t result = (unint64_t)IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a2, v197);
    if (!v197[16]) {
      goto LABEL_44;
    }
    goto LABEL_40;
  }
  char v16 = v10 ^ 1;
  if (v8 == 2) {
    char v17 = v10 ^ 1;
  }
  else {
    char v17 = 1;
  }
  if (v17)
  {
    if (v8 != 3) {
      char v16 = 1;
    }
    if ((v16 & 1) == 0)
    {
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)&v200);
      IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v210, a2);
      unint64_t result = IPC::Decoder::decode<WTF::OptionSet<WebCore::ScrollingStateNodeProperty>>(a2);
      if ((_BYTE)v14)
      {
        LOBYTE(v10) = result;
        if (result)
        {
          unint64_t result = (unint64_t)IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v197);
          if (!v197[24]) {
            goto LABEL_100;
          }
          LODWORD(v3) = v197[0];
          *(void *)&long long v226 = *(void *)&v197[1];
          *(void *)((char *)&v226 + 7) = *(void *)&v197[8];
          char v19 = v197[16];
        }
        else
        {
          char v19 = 0;
          LODWORD(v3) = 0;
        }
        if ((v10 & 2) != 0)
        {
          unint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)v197);
          if (!v197[16]) {
            goto LABEL_100;
          }
          uint64_t v2 = *(void *)v197;
        }
        else
        {
          uint64_t v2 = 0;
        }
        if (*(void *)a2)
        {
          if (!v201[8] || !v210[16]) {
            goto LABEL_503;
          }
          uint64_t v32 = WTF::fastMalloc((WTF *)0x90);
          v197[0] = v3;
          *(void *)&v197[1] = v226;
          *(void *)&v197[8] = *(void *)((char *)&v226 + 7);
          v197[16] = v19;
          unint64_t result = WebCore::ScrollingStateOverflowScrollProxyNode::ScrollingStateOverflowScrollProxyNode();
          LODWORD(v10) = 1;
LABEL_101:
          if (v210[16]) {
            unint64_t result = WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v210, (void *)v14);
          }
          if (!v10)
          {
            unint64_t v36 = *(void *)a2;
            uint64_t v120 = *((void *)a2 + 1);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v38 = *((void *)a2 + 3);
            if (!v38 || !v120) {
              goto LABEL_420;
            }
            goto LABEL_502;
          }
          goto LABEL_104;
        }
      }
LABEL_100:
      LODWORD(v10) = 0;
      uint64_t v32 = 0;
      goto LABEL_101;
    }
    char v21 = v10 ^ 1;
    if (v8 == 4) {
      char v22 = v10 ^ 1;
    }
    else {
      char v22 = 1;
    }
    if ((v22 & 1) == 0)
    {
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)&v218);
      IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v216, a2);
      unint64_t result = IPC::Decoder::decode<WTF::OptionSet<WebCore::ScrollingStateNodeProperty>>(a2);
      LOBYTE(v10) = v14;
      if (!(_BYTE)v14) {
        goto LABEL_435;
      }
      uint64_t v2 = result;
      if (result)
      {
        unint64_t result = (unint64_t)IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v197);
        if (!v197[24]) {
          goto LABEL_435;
        }
        char v23 = v197[0];
        v233[0] = *(void *)&v197[1];
        *(void *)((char *)v233 + 7) = *(void *)&v197[8];
        LODWORD(v3) = v197[16];
      }
      else
      {
        LODWORD(v3) = 0;
        char v23 = 0;
      }
      if ((v2 & 2) != 0)
      {
        unint64_t result = (unint64_t)IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
        if (!(_BYTE)v14) {
          goto LABEL_435;
        }
      }
      if ((v2 & 4) != 0)
      {
        unint64_t result = (unint64_t)IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
        if (!(_BYTE)v14) {
          goto LABEL_435;
        }
      }
      if ((v2 & 8) != 0)
      {
        unint64_t result = (unint64_t)IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
        if (!(_BYTE)v14) {
          goto LABEL_435;
        }
      }
      if ((v2 & 0x10) != 0
        && (IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2), !(_BYTE)v14))
      {
        unint64_t v14 = *(void *)a2;
        uint64_t v131 = *((void *)a2 + 1);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        unint64_t result = *((void *)a2 + 3);
        if (!result || !v131) {
          goto LABEL_435;
        }
      }
      else
      {
        if ((v2 & 0x20) == 0
          || (IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a2), (_BYTE)v14))
        {
          *(_WORD *)v214 = 257;
          *(void *)&v214[2] = 0;
          *(_WORD *)&v214[10] = 0;
          if ((v2 & 0x40) != 0)
          {
            unint64_t result = IPC::Decoder::decode<WebCore::ScrollableAreaParameters>((uint64_t *)a2);
            if ((v14 & 0xFF00000000) == 0) {
              goto LABEL_435;
            }
            *(void *)v214 = result;
            *(_DWORD *)&v214[8] = v14;
            int v53 = v10;
          }
          else
          {
            int v53 = 1;
          }
          v210[0] = 0;
          *(void *)&v210[4] = 0;
          *(_DWORD *)&v210[12] = 0;
          *(_WORD *)&v210[16] = 256;
          v210[18] = 0;
          LOBYTE(v211) = 0;
          unsigned __int8 v213 = 0;
          if (!v53) {
            goto LABEL_503;
          }
          if ((v2 & 0x80) == 0)
          {
LABEL_192:
            LOBYTE(v200) = 0;
            memset(v201, 0, 64);
            if ((v2 & 0x100) != 0)
            {
              IPC::Decoder::decode<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>>((uint64_t)v197, (uint64_t *)a2);
              if (!v197[72])
              {
                std::__optional_destruct_base<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v197, v54);
                goto LABEL_489;
              }
              LOBYTE(v200) = v197[0];
              unint64_t v55 = *(WTF **)v201;
              if (*(_DWORD *)&v201[12])
              {
                uint64_t v56 = 40 * *(unsigned int *)&v201[12];
                uint64_t v57 = *(void *)v201 + 24;
                do
                {
                  uint64_t v58 = *(WTF **)v57;
                  if (*(void *)v57)
                  {
                    *(void *)uint64_t v57 = 0;
                    *(_DWORD *)(v57 + 8) = 0;
                    WTF::fastFree(v58, v54);
                  }
                  v57 += 40;
                  v56 -= 40;
                }
                while (v56);
                unint64_t v55 = *(WTF **)v201;
              }
              if (v55)
              {
                *(void *)int v201 = 0;
                *(_DWORD *)&v201[8] = 0;
                WTF::fastFree(v55, v54);
              }
              *(void *)int v201 = *(void *)&v197[8];
              uint64_t v84 = *(void *)&v197[16];
              *(void *)&v197[8] = 0;
              *(void *)&v197[16] = 0;
              *(void *)&v201[8] = v84;
              unint64_t v85 = *(WTF **)&v201[16];
              if (*(_DWORD *)&v201[28])
              {
                uint64_t v86 = 40 * *(unsigned int *)&v201[28];
                uint64_t v87 = *(void *)&v201[16] + 24;
                do
                {
                  unint64_t v88 = *(WTF **)v87;
                  if (*(void *)v87)
                  {
                    *(void *)uint64_t v87 = 0;
                    *(_DWORD *)(v87 + 8) = 0;
                    WTF::fastFree(v88, v54);
                  }
                  v87 += 40;
                  v86 -= 40;
                }
                while (v86);
                unint64_t v85 = *(WTF **)&v201[16];
              }
              if (v85)
              {
                *(void *)&v201[16] = 0;
                *(_DWORD *)&v201[24] = 0;
                WTF::fastFree(v85, v54);
              }
              *(void *)&v201[16] = *(void *)&v197[24];
              uint64_t v89 = *(void *)&v197[32];
              *(void *)&v197[24] = 0;
              *(void *)&v197[32] = 0;
              *(void *)&v201[24] = v89;
              unint64_t v90 = *(WTF **)&v201[32];
              if (*(void *)&v201[32])
              {
                *(void *)&v201[32] = 0;
                *(_DWORD *)&v201[40] = 0;
                WTF::fastFree(v90, v54);
              }
              *(void *)&v201[32] = *(void *)&v197[40];
              uint64_t v91 = *(void *)&v197[48];
              *(void *)&v197[40] = 0;
              *(void *)&v197[48] = 0;
              *(void *)&v201[40] = v91;
              unint64_t v92 = *(WTF **)&v201[48];
              if (*(void *)&v201[48])
              {
                *(void *)&v201[48] = 0;
                *(_DWORD *)&v201[56] = 0;
                WTF::fastFree(v92, v54);
              }
              *(void *)&v201[48] = *(void *)&v197[56];
              uint64_t v93 = *(void *)&v197[64];
              *(void *)&v197[56] = 0;
              *(void *)&v197[64] = 0;
              *(void *)&v201[56] = v93;
              std::__optional_destruct_base<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v197, v54);
            }
            if ((v2 & 0x200) != 0)
            {
              IPC::Decoder::decode<std::optional<unsigned int>>(a2);
              if (!(_BYTE)v14) {
                goto LABEL_489;
              }
            }
            if ((v2 & 0x400) != 0)
            {
              char v94 = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
              if (!(_BYTE)v14) {
                goto LABEL_489;
              }
              LOBYTE(v10) = v94;
            }
            else
            {
              LOBYTE(v10) = 0;
            }
            if ((v2 & 0x800) == 0)
            {
LABEL_306:
              if ((v2 & 0x1000) != 0)
              {
                IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v197);
                if (!v197[24]) {
                  goto LABEL_489;
                }
                v232[0] = *(void *)&v197[1];
                *(void *)((char *)v232 + 7) = *(void *)&v197[8];
                LOBYTE(v183) = v197[0];
                BYTE4(v183) = v197[16];
              }
              else
              {
                uint64_t v183 = 0;
              }
              if ((v2 & 0x2000) != 0)
              {
                IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v197);
                if (!v197[24]) {
                  goto LABEL_489;
                }
                v231[0] = *(void *)&v197[1];
                *(void *)((char *)v231 + 7) = *(void *)&v197[8];
                LOBYTE(v181) = v197[0];
                BYTE4(v181) = v197[16];
              }
              else
              {
                uint64_t v181 = 0;
              }
              if ((v2 & 0x4000) != 0)
              {
                IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v197);
                if (!v197[24]) {
                  goto LABEL_489;
                }
                v230[0] = *(void *)&v197[1];
                *(void *)((char *)v230 + 7) = *(void *)&v197[8];
                LOBYTE(v179) = v197[0];
                BYTE4(v179) = v197[16];
              }
              else
              {
                uint64_t v179 = 0;
              }
              if ((v2 & 0x8000) != 0)
              {
                IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v197);
                if (!v197[24]) {
                  goto LABEL_489;
                }
                v229[0] = *(void *)&v197[1];
                *(void *)((char *)v229 + 7) = *(void *)&v197[8];
                LOBYTE(v177) = v197[0];
                BYTE4(v177) = v197[16];
              }
              else
              {
                uint64_t v177 = 0;
              }
              if ((v2 & 0x10000) == 0) {
                goto LABEL_337;
              }
              unint64_t v98 = *((void *)a2 + 1);
              unint64_t v14 = *(void *)a2;
              unint64_t v99 = *((void *)a2 + 2) - *(void *)a2;
              if (v98 <= v99)
              {
                unint64_t v160 = 0;
                unint64_t v161 = 0;
                *(void *)a2 = 0;
                *((void *)a2 + 1) = 0;
                uint64_t v162 = *((void *)a2 + 3);
                if (v162)
                {
                  if (v98)
                  {
                    (*(void (**)(uint64_t))(*(void *)v162 + 16))(v162);
                    unint64_t v161 = *(void *)a2;
                    unint64_t v160 = *((void *)a2 + 1);
                  }
                  else
                  {
                    unint64_t v160 = 0;
                    unint64_t v161 = 0;
                  }
                }
              }
              else
              {
                uint64_t v100 = (unsigned __int8 *)(v14 + v99);
                *((void *)a2 + 2) = v100 + 1;
                if (v14)
                {
                  if (*v100 < 2u)
                  {
LABEL_337:
                    long long v205 = 0uLL;
                    if ((v2 & 0x20000) != 0)
                    {
                      IPC::Decoder::decode<WebCore::MouseLocationState>((uint64_t)v197, (unint64_t *)a2);
                      if (!v197[16]) {
                        goto LABEL_489;
                      }
                      long long v205 = *(_OWORD *)v197;
                    }
                    __int16 v204 = 0;
                    if ((v2 & 0x40000) != 0)
                    {
                      char v101 = IPC::Decoder::decode<WebCore::ScrollbarHoverState>(a2);
                      if ((v101 & 0xFFFFFF) < 0x10000) {
                        goto LABEL_489;
                      }
                      __int16 v204 = (__int16)v101;
                    }
                    __int16 v203 = 0;
                    if ((v2 & 0x80000) != 0)
                    {
                      char v102 = IPC::Decoder::decode<WebCore::ScrollbarHoverState>(a2);
                      if ((v102 & 0xFFFFFF) < 0x10000) {
                        goto LABEL_489;
                      }
                      __int16 v203 = (__int16)v102;
                    }
                    if ((v2 & 0x100000) != 0
                      && (unsigned __int16)IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a2) < 0x100u
                      || (v2 & 0x200000) != 0
                      && (unsigned __int16)IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a2) < 0x100u)
                    {
                      goto LABEL_489;
                    }
                    LOBYTE(v226) = 0;
                    BYTE4(v226) = 0;
                    LOBYTE(v228) = 0;
                    if ((v2 & 0x400000) != 0)
                    {
                      IPC::Decoder::decode<WebCore::RequestedKeyboardScrollData>((uint64_t)v197, (unint64_t *)a2);
                      if (!v197[36]) {
                        goto LABEL_489;
                      }
                      long long v226 = *(_OWORD *)v197;
                      long long v227 = *(_OWORD *)&v197[16];
                      int v228 = *(_DWORD *)&v197[32];
                    }
                    if (*(void *)a2)
                    {
                      if (!v219 || !v217) {
                        goto LABEL_503;
                      }
                      uint64_t v4 = WTF::fastMalloc((WTF *)0x218);
                      v197[0] = v23;
                      *(void *)&v197[1] = v233[0];
                      *(void *)&v197[8] = *(void *)((char *)v233 + 7);
                      v197[16] = v3;
                      *(_DWORD *)&v197[17] = *(_DWORD *)v215;
                      *(_DWORD *)&v197[20] = *(_DWORD *)&v215[3];
                      LOBYTE(v223) = v183;
                      *((void *)&v223 + 1) = *(void *)((char *)v232 + 7);
                      *(void *)((char *)&v223 + 1) = v232[0];
                      char v224 = BYTE4(v183);
                      *(_DWORD *)char v225 = *(_DWORD *)v209;
                      *(_DWORD *)&v225[3] = *(_DWORD *)&v209[3];
                      LOBYTE(v237) = v181;
                      *(void *)((char *)&v237 + 1) = v231[0];
                      *((void *)&v237 + 1) = *(void *)((char *)v231 + 7);
                      char v238 = BYTE4(v181);
                      *(_DWORD *)v239 = *(_DWORD *)v208;
                      *(_DWORD *)&v239[3] = *(_DWORD *)&v208[3];
                      LOBYTE(v220) = v179;
                      *((void *)&v220 + 1) = *(void *)((char *)v230 + 7);
                      *(void *)((char *)&v220 + 1) = v230[0];
                      char v221 = BYTE4(v179);
                      *(_DWORD *)&v222[3] = *(_DWORD *)&v207[3];
                      *(_DWORD *)v222 = *(_DWORD *)v207;
                      LOBYTE(v234) = v177;
                      *((void *)&v234 + 1) = *(void *)((char *)v229 + 7);
                      *(void *)((char *)&v234 + 1) = v229[0];
                      char v235 = BYTE4(v177);
                      *(_DWORD *)v236 = *(_DWORD *)v206;
                      *(_DWORD *)&v236[3] = *(_DWORD *)&v206[3];
                      WebCore::ScrollingStatePluginScrollingNode::ScrollingStatePluginScrollingNode();
                      LODWORD(v10) = 1;
                      goto LABEL_490;
                    }
LABEL_489:
                    LODWORD(v10) = 0;
                    uint64_t v4 = 0;
LABEL_490:
                    uint64_t v2 = (uint64_t)&v201[16];
                    unsigned int v164 = *(WTF **)&v201[48];
                    if (*(void *)&v201[48])
                    {
                      *(void *)&v201[48] = 0;
                      *(_DWORD *)&v201[56] = 0;
                      WTF::fastFree(v164, (void *)v14);
                    }
                    v165 = *(WTF **)&v201[32];
                    if (*(void *)&v201[32])
                    {
                      *(void *)&v201[32] = 0;
                      *(_DWORD *)&v201[40] = 0;
                      WTF::fastFree(v165, (void *)v14);
                    }
                    WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v201[16], (void *)v14);
                    unint64_t result = WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v201, v166);
                    goto LABEL_436;
                  }
                  goto LABEL_488;
                }
                unint64_t v160 = v98;
                unint64_t v161 = 0;
              }
              unint64_t v98 = 0;
              unint64_t v14 = 0;
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v163 = *((void *)a2 + 3);
              if (v163)
              {
                if (v160)
                {
                  (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v163 + 16))(v163, v161, v160);
                  unint64_t v14 = *(void *)a2;
                  unint64_t v98 = *((void *)a2 + 1);
                }
                else
                {
                  unint64_t v98 = 0;
                  unint64_t v14 = 0;
                }
              }
LABEL_488:
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v152 = *((void *)a2 + 3);
              if (!v152 || !v98) {
                goto LABEL_489;
              }
              goto LABEL_471;
            }
            unint64_t v95 = *((void *)a2 + 1);
            unint64_t v14 = *(void *)a2;
            unint64_t v96 = *((void *)a2 + 2) - *(void *)a2;
            if (v95 <= v96)
            {
              unint64_t v148 = 0;
              unint64_t v149 = 0;
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v150 = *((void *)a2 + 3);
              if (v150)
              {
                if (v95)
                {
                  (*(void (**)(uint64_t))(*(void *)v150 + 16))(v150);
                  unint64_t v149 = *(void *)a2;
                  unint64_t v148 = *((void *)a2 + 1);
                }
                else
                {
                  unint64_t v148 = 0;
                  unint64_t v149 = 0;
                }
              }
            }
            else
            {
              uint64_t v97 = (unsigned __int8 *)(v14 + v96);
              *((void *)a2 + 2) = v97 + 1;
              if (v14)
              {
                if (*v97 < 2u) {
                  goto LABEL_306;
                }
LABEL_469:
                *(void *)a2 = 0;
                *((void *)a2 + 1) = 0;
                uint64_t v152 = *((void *)a2 + 3);
                if (!v152 || !v95) {
                  goto LABEL_489;
                }
LABEL_471:
                (*(void (**)(uint64_t, unint64_t))(*(void *)v152 + 16))(v152, v14);
                goto LABEL_489;
              }
              unint64_t v148 = v95;
              unint64_t v149 = 0;
            }
            unint64_t v95 = 0;
            unint64_t v14 = 0;
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v151 = *((void *)a2 + 3);
            if (v151)
            {
              if (v148)
              {
                (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v151 + 16))(v151, v149, v148);
                unint64_t v14 = *(void *)a2;
                unint64_t v95 = *((void *)a2 + 1);
              }
              else
              {
                unint64_t v95 = 0;
                unint64_t v14 = 0;
              }
            }
            goto LABEL_469;
          }
          unint64_t result = IPC::Decoder::decode<WebCore::RequestedScrollData>((uint64_t)v197, (uint64_t *)a2);
          if (v197[44])
          {
            *(_OWORD *)char v210 = *(_OWORD *)v197;
            *(_DWORD *)&v210[15] = *(_DWORD *)&v197[15];
            if (v213 == v197[40])
            {
              if (v213)
              {
                LOBYTE(v211) = v197[20];
                *(void *)((char *)&v211 + 4) = *(void *)&v197[24];
                HIDWORD(v211) = *(_DWORD *)&v197[32];
                LOWORD(v212) = *(_WORD *)&v197[36];
              }
            }
            else if (v213)
            {
              unsigned __int8 v213 = 0;
            }
            else
            {
              long long v211 = *(_OWORD *)&v197[20];
              int v212 = *(_DWORD *)&v197[36];
              unsigned __int8 v213 = 1;
            }
            goto LABEL_192;
          }
LABEL_435:
          LODWORD(v10) = 0;
          uint64_t v4 = 0;
LABEL_436:
          if (v217) {
            unint64_t result = WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v216, (void *)v14);
          }
          if (v10) {
            goto LABEL_412;
          }
          unint64_t v36 = *(void *)a2;
          uint64_t v133 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v38 = *((void *)a2 + 3);
          if (!v38 || !v133) {
            goto LABEL_420;
          }
          goto LABEL_502;
        }
        unint64_t v14 = *(void *)a2;
        uint64_t v132 = *((void *)a2 + 1);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        unint64_t result = *((void *)a2 + 3);
        if (!result || !v132) {
          goto LABEL_435;
        }
      }
      unint64_t result = (*(uint64_t (**)(unint64_t, unint64_t))(*(void *)result + 16))(result, v14);
      goto LABEL_435;
    }
    if (v8 != 5) {
      char v21 = 1;
    }
    if ((v21 & 1) == 0)
    {
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)&v200);
      IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v210, a2);
      unint64_t result = IPC::Decoder::decode<WTF::OptionSet<WebCore::ScrollingStateNodeProperty>>(a2);
      if ((_BYTE)v14)
      {
        LOBYTE(v10) = result;
        if (result)
        {
          unint64_t result = (unint64_t)IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v197);
          if (!v197[24]) {
            goto LABEL_141;
          }
          char v24 = v197[0];
          *(void *)&long long v226 = *(void *)&v197[1];
          *(void *)((char *)&v226 + 7) = *(void *)&v197[8];
          char v25 = v197[16];
        }
        else
        {
          char v24 = 0;
          char v25 = 0;
        }
        if (*(void *)a2)
        {
          if (!v201[8] || !v210[16]) {
            goto LABEL_503;
          }
          v197[0] = v24;
          *(void *)&v197[1] = v226;
          *(void *)&v197[8] = *(void *)((char *)&v226 + 7);
          v197[16] = v25;
          unint64_t result = WebCore::ScrollingStatePluginHostingNode::create();
          uint64_t v10 = v223;
          int v35 = 1;
LABEL_142:
          if (v210[16]) {
            unint64_t result = WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v210, (void *)v14);
          }
          if (v35) {
            goto LABEL_48;
          }
          unint64_t v36 = *(void *)a2;
          uint64_t v37 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v38 = *((void *)a2 + 3);
          if (!v38 || !v37) {
            goto LABEL_420;
          }
          goto LABEL_502;
        }
      }
LABEL_141:
      int v35 = 0;
      uint64_t v10 = 0;
      goto LABEL_142;
    }
    char v33 = v10 ^ 1;
    if (v8 == 6) {
      char v34 = v10 ^ 1;
    }
    else {
      char v34 = 1;
    }
    if ((v34 & 1) == 0)
    {
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)v210);
      IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v226, a2);
      unint64_t result = IPC::Decoder::decode<WTF::OptionSet<WebCore::ScrollingStateNodeProperty>>(a2);
      if (!(_BYTE)v14) {
        goto LABEL_460;
      }
      LOBYTE(v10) = result;
      if (result)
      {
        unint64_t result = (unint64_t)IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v197);
        if (!v197[24]) {
          goto LABEL_460;
        }
        LODWORD(v3) = v197[0];
        *(void *)&long long v237 = *(void *)&v197[1];
        *(void *)((char *)&v237 + 7) = *(void *)&v197[8];
        uint64_t v2 = v197[16];
      }
      else
      {
        uint64_t v2 = 0;
        LODWORD(v3) = 0;
      }
      uint64_t v200 = &unk_1EE9B4C48;
      memset(v201, 0, 36);
      if ((v10 & 2) == 0)
      {
LABEL_247:
        if (*(void *)a2)
        {
          if (!v210[16] || !(_BYTE)v227) {
            goto LABEL_503;
          }
          uint64_t v32 = WTF::fastMalloc((WTF *)0xB0);
          v197[0] = v3;
          *(void *)&v197[1] = v237;
          *(void *)&v197[8] = *(void *)((char *)&v237 + 7);
          v197[16] = v2;
          unint64_t result = WebCore::ScrollingStateFixedNode::ScrollingStateFixedNode();
          LODWORD(v10) = 1;
LABEL_461:
          if ((_BYTE)v227) {
            unint64_t result = WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v226, (void *)v14);
          }
          if (!v10)
          {
            unint64_t v36 = *(void *)a2;
            uint64_t v147 = *((void *)a2 + 1);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v38 = *((void *)a2 + 3);
            if (!v38 || !v147) {
              goto LABEL_420;
            }
            goto LABEL_502;
          }
          goto LABEL_104;
        }
LABEL_460:
        LODWORD(v10) = 0;
        uint64_t v32 = 0;
        goto LABEL_461;
      }
      unsigned int v193 = v2;
      char v190 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
      char v195 = v66;
      unint64_t v67 = *(void *)a2;
      unint64_t v68 = *((void *)a2 + 1);
      unint64_t v69 = ((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a2;
      if (v68 < v69 || v68 - v69 <= 3)
      {
        unint64_t v141 = 0;
        unint64_t v142 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v143 = *((void *)a2 + 3);
        if (v143)
        {
          if (v68)
          {
            (*(void (**)(uint64_t))(*(void *)v143 + 16))(v143);
            unint64_t v142 = *(void *)a2;
            unint64_t v141 = *((void *)a2 + 1);
          }
          else
          {
            unint64_t v141 = 0;
            unint64_t v142 = 0;
          }
        }
      }
      else
      {
        unint64_t v70 = (_DWORD *)(v67 + v69);
        *((void *)a2 + 2) = v70 + 1;
        if (v67)
        {
          LODWORD(v4) = 0;
          unsigned int v71 = *v70 & 0xFFFFFF00;
          uint64_t v2 = *v70;
LABEL_239:
          IPC::Decoder::decode<WebCore::FloatRect>((unint64_t *)a2, (uint64_t)&v223);
          unint64_t result = (unint64_t)IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
          unint64_t v72 = result;
          uint64_t v73 = v14;
          if (!(_BYTE)v14)
          {
            unint64_t v14 = *(void *)a2;
            uint64_t v145 = *((void *)a2 + 1);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            unint64_t result = *((void *)a2 + 3);
            if (result)
            {
              if (v145) {
                unint64_t result = (*(uint64_t (**)(unint64_t, unint64_t))(*(void *)result + 16))(result, v14);
              }
            }
          }
          if (*(void *)a2)
          {
            if (!v195 || v4 || !v224 || !v73) {
              goto LABEL_503;
            }
            *(_DWORD *)&v197[16] = v2 | v71;
            *(void *)int v197 = &unk_1EE9B4C48;
            *(void *)&v197[8] = v190;
            *(_OWORD *)&v197[20] = v223;
            *(void *)&v197[36] = v72;
          }
          else
          {
            v197[0] = 0;
            v197[48] = 0;
            uint64_t v146 = *((void *)a2 + 1);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            unint64_t result = *((void *)a2 + 3);
            if (!result) {
              goto LABEL_460;
            }
            if (!v146) {
              goto LABEL_460;
            }
            unint64_t result = (*(uint64_t (**)(unint64_t, void))(*(void *)result + 16))(result, 0);
            if (!v197[48]) {
              goto LABEL_460;
            }
          }
          *(void *)int v201 = *(void *)&v197[8];
          *(_DWORD *)&v201[8] = *(_DWORD *)&v197[16];
          *(_OWORD *)&v201[12] = *(_OWORD *)&v197[20];
          *(void *)&v201[28] = *(void *)&v197[36];
          uint64_t v2 = v193;
          goto LABEL_247;
        }
        unint64_t v141 = v68;
        unint64_t v142 = 0;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v144 = *((void *)a2 + 3);
      if (v144 && v141) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v144 + 16))(v144, v142);
      }
      unsigned int v71 = 0;
      uint64_t v2 = 0;
      LODWORD(v4) = 1;
      goto LABEL_239;
    }
    if (v8 != 7) {
      char v33 = 1;
    }
    if ((v33 & 1) == 0)
    {
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)v210);
      IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v226, a2);
      unint64_t result = IPC::Decoder::decode<WTF::OptionSet<WebCore::ScrollingStateNodeProperty>>(a2);
      if (!(_BYTE)v14) {
        goto LABEL_479;
      }
      LOBYTE(v10) = result;
      if (result)
      {
        unint64_t result = (unint64_t)IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v197);
        if (!v197[24]) {
          goto LABEL_479;
        }
        char v192 = v197[0];
        *(void *)&long long v234 = *(void *)&v197[1];
        *(void *)((char *)&v234 + 7) = *(void *)&v197[8];
        char v194 = v197[16];
      }
      else
      {
        char v194 = 0;
        char v192 = 0;
      }
      uint64_t v200 = &unk_1EE9B4C70;
      memset(v201, 0, sizeof(v201));
      long long v202 = 0u;
      if ((v10 & 2) == 0)
      {
LABEL_274:
        if (*(void *)a2)
        {
          if (!v210[16] || !(_BYTE)v227) {
            goto LABEL_503;
          }
          uint64_t v32 = WTF::fastMalloc((WTF *)0xE8);
          v197[0] = v192;
          *(void *)&v197[1] = v234;
          *(void *)&v197[8] = *(void *)((char *)&v234 + 7);
          v197[16] = v194;
          *(_DWORD *)&v197[17] = v218;
          *(_DWORD *)&v197[20] = *(_DWORD *)((char *)&v218 + 3);
          unint64_t result = WebCore::ScrollingStateStickyNode::ScrollingStateStickyNode();
          LODWORD(v10) = 1;
LABEL_480:
          if ((_BYTE)v227) {
            unint64_t result = WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v226, (void *)v14);
          }
          if (!v10)
          {
            unint64_t v36 = *(void *)a2;
            uint64_t v159 = *((void *)a2 + 1);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v38 = *((void *)a2 + 3);
            if (!v38 || !v159) {
              goto LABEL_420;
            }
            goto LABEL_502;
          }
LABEL_104:
          if (*(void *)a2)
          {
            *(void *)a1 = v32;
            goto LABEL_414;
          }
          *(unsigned char *)a1 = 0;
          *(unsigned char *)(a1 + 8) = 0;
          if (!v32) {
            goto LABEL_421;
          }
          v112 = *(atomic_uchar **)(v32 + 8);
          goto LABEL_418;
        }
LABEL_479:
        LODWORD(v10) = 0;
        uint64_t v32 = 0;
        goto LABEL_480;
      }
      char v188 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
      char v191 = v74;
      unint64_t v75 = *(void *)a2;
      unint64_t v76 = *((void *)a2 + 1);
      unint64_t v77 = ((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a2;
      if (v76 < v77 || v76 - v77 <= 3)
      {
        unint64_t v153 = 0;
        unint64_t v154 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v155 = *((void *)a2 + 3);
        if (v155)
        {
          if (v76)
          {
            (*(void (**)(uint64_t))(*(void *)v155 + 16))(v155);
            unint64_t v154 = *(void *)a2;
            unint64_t v153 = *((void *)a2 + 1);
          }
          else
          {
            unint64_t v153 = 0;
            unint64_t v154 = 0;
          }
        }
      }
      else
      {
        unint64_t v78 = (_DWORD *)(v75 + v77);
        *((void *)a2 + 2) = v78 + 1;
        if (v75)
        {
          int v189 = 0;
          unsigned int v187 = *v78 & 0xFFFFFF00;
          int v186 = *v78;
LABEL_259:
          uint64_t v79 = IPC::Decoder::decode<float>(a2);
          uint64_t v80 = IPC::Decoder::decode<float>(a2);
          uint64_t v3 = IPC::Decoder::decode<float>(a2);
          uint64_t v4 = IPC::Decoder::decode<float>(a2);
          IPC::Decoder::decode<WebCore::FloatRect>((unint64_t *)a2, (uint64_t)&v223);
          IPC::Decoder::decode<WebCore::FloatRect>((unint64_t *)a2, (uint64_t)&v237);
          IPC::Decoder::decode<WebCore::FloatRect>((unint64_t *)a2, (uint64_t)&v220);
          int v185 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
          uint64_t v2 = v81;
          unint64_t result = (unint64_t)IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
          unint64_t v82 = result;
          uint64_t v83 = v14;
          if (!(_BYTE)v14)
          {
            unint64_t v14 = *(void *)a2;
            uint64_t v157 = *((void *)a2 + 1);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            unint64_t result = *((void *)a2 + 3);
            if (result)
            {
              if (v157)
              {
                unint64_t v184 = v82;
                unint64_t result = (*(uint64_t (**)(unint64_t, unint64_t))(*(void *)result + 16))(result, v14);
                unint64_t v82 = v184;
              }
            }
          }
          if (*(void *)a2)
          {
            if (!v191
              || v189
              || (v79 & 0xFF00000000) == 0
              || (v80 & 0xFF00000000) == 0
              || (v3 & 0xFF00000000) == 0
              || (v4 & 0xFF00000000) == 0
              || !v224
              || !v238
              || !v221
              || !(_BYTE)v2
              || !v83)
            {
              goto LABEL_503;
            }
            *(_DWORD *)&v197[16] = v186 | v187;
            *(void *)int v197 = &unk_1EE9B4C70;
            *(void *)&v197[8] = v188;
            *(_DWORD *)&v197[20] = v79;
            *(_DWORD *)&v197[24] = v80;
            *(_DWORD *)&v197[28] = v3;
            *(_DWORD *)&v197[32] = v4;
            *(_OWORD *)&v197[36] = v223;
            *(_OWORD *)&v197[52] = v237;
            *(_OWORD *)&v197[68] = v220;
            *(void *)&long long v198 = v185;
            *((void *)&v198 + 1) = v82;
          }
          else
          {
            v197[0] = 0;
            char v199 = 0;
            uint64_t v158 = *((void *)a2 + 1);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            unint64_t result = *((void *)a2 + 3);
            if (!result) {
              goto LABEL_479;
            }
            if (!v158) {
              goto LABEL_479;
            }
            unint64_t result = (*(uint64_t (**)(unint64_t, void))(*(void *)result + 16))(result, 0);
            if (!v199) {
              goto LABEL_479;
            }
          }
          *(void *)int v201 = *(void *)&v197[8];
          *(_DWORD *)&v201[8] = *(_DWORD *)&v197[16];
          *(_OWORD *)&v201[44] = *(_OWORD *)&v197[52];
          *(_OWORD *)&v201[60] = *(_OWORD *)&v197[68];
          long long v202 = v198;
          *(_OWORD *)&v201[12] = *(_OWORD *)&v197[20];
          *(_OWORD *)&v201[28] = *(_OWORD *)&v197[36];
          goto LABEL_274;
        }
        unint64_t v153 = v76;
        unint64_t v154 = 0;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v156 = *((void *)a2 + 3);
      if (v156 && v153) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v156 + 16))(v156, v154);
      }
      unsigned int v187 = 0;
      int v186 = 0;
      int v189 = 1;
      goto LABEL_259;
    }
    BOOL v59 = v8 == 8;
    char v60 = v10 ^ 1;
    if (!v59) {
      char v60 = 1;
    }
    if (v60) {
      goto LABEL_420;
    }
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)&v200);
    IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v210, a2);
    unint64_t result = IPC::Decoder::decode<WTF::OptionSet<WebCore::ScrollingStateNodeProperty>>(a2);
    if (!(_BYTE)v14) {
      goto LABEL_521;
    }
    LOBYTE(v10) = result;
    if (result)
    {
      unint64_t result = (unint64_t)IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v197);
      if (!v197[24])
      {
LABEL_521:
        LODWORD(v10) = 0;
        uint64_t v2 = 0;
        goto LABEL_522;
      }
      LODWORD(v3) = v197[0];
      *(void *)&long long v237 = *(void *)&v197[1];
      *(void *)((char *)&v237 + 7) = *(void *)&v197[8];
      LOBYTE(v4) = v197[16];
    }
    else
    {
      LOBYTE(v4) = 0;
      LODWORD(v3) = 0;
    }
    uint64_t v103 = 0;
    long long v223 = 0uLL;
    if ((v10 & 2) != 0)
    {
      unint64_t result = IPC::Decoder::decode<unsigned long long>(a2);
      if (!(_BYTE)v14)
      {
LABEL_520:
        unint64_t v14 = *(void *)a2;
        uint64_t v174 = *((void *)a2 + 1);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        unint64_t result = *((void *)a2 + 3);
        if (result && v174) {
          unint64_t result = (*(uint64_t (**)(unint64_t, unint64_t))(*(void *)result + 16))(result, v14);
        }
        goto LABEL_521;
      }
      uint64_t v2 = result;
      long long v226 = 0uLL;
      if (result >= 0x10000) {
        goto LABEL_504;
      }
      if (result)
      {
        uint64_t v103 = (WTF *)WTF::fastMalloc((WTF *)(16 * result));
        LODWORD(v104) = 0;
        DWORD2(v226) = v2;
        *(void *)&long long v226 = v103;
        while (1)
        {
          unint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)v197);
          if (!v197[16]) {
            break;
          }
          if (v104 == DWORD2(v226))
          {
            unint64_t result = WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v226, v104 + 1, (unint64_t)v197);
            int v105 = HIDWORD(v226);
            uint64_t v103 = (WTF *)v226;
            *(_OWORD *)(v226 + 16 * HIDWORD(v226)) = *(_OWORD *)result;
          }
          else
          {
            *((_OWORD *)v103 + v104) = *(_OWORD *)v197;
            int v105 = HIDWORD(v226);
          }
          LODWORD(v104) = v105 + 1;
          HIDWORD(v226) = v105 + 1;
          if (!--v2)
          {
            unsigned int v106 = DWORD2(v226);
            goto LABEL_387;
          }
        }
LABEL_519:
        *(void *)&long long v226 = 0;
        DWORD2(v226) = 0;
        WTF::fastFree(v103, (void *)v14);
        goto LABEL_520;
      }
      uint64_t v103 = 0;
      unsigned int v106 = 0;
      LODWORD(v104) = 0;
LABEL_387:
      *(void *)&long long v223 = v103;
      *((void *)&v223 + 1) = __PAIR64__(v104, v106);
    }
    long long v226 = 0uLL;
    if ((v10 & 4) != 0)
    {
      int v196 = v3;
      int v114 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
      uint64_t v2 = v115;
      *(void *)&long long v220 = v114;
      DWORD2(v220) = v115;
      int v116 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
      int v118 = v117;
      uint64_t v3 = v117;
      if (!(_BYTE)v117)
      {
        unint64_t v167 = *(void *)a2;
        uint64_t v168 = *((void *)a2 + 1);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v169 = *((void *)a2 + 3);
        if (v169)
        {
          if (v168) {
            (*(void (**)(uint64_t, unint64_t))(*(void *)v169 + 16))(v169, v167);
          }
        }
      }
      *(void *)&long long v234 = v116;
      DWORD2(v234) = v118;
      unint64_t v14 = *(void *)a2;
      if (!*(void *)a2)
      {
        uint64_t v170 = *((void *)a2 + 1);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        unint64_t result = *((void *)a2 + 3);
        if (result && v170) {
          unint64_t result = (*(uint64_t (**)(unint64_t))(*(void *)result + 16))(result);
        }
        goto LABEL_499;
      }
      if (!(_BYTE)v2 || !v3) {
        goto LABEL_503;
      }
      unint64_t result = WebCore::AbsolutePositionConstraints::AbsolutePositionConstraints((WebCore::AbsolutePositionConstraints *)v197, (const WebCore::FloatSize *)&v220, (const WebCore::FloatPoint *)&v234);
      char v119 = v197[0];
      *(uint64_t *)((char *)v5 + 73) = *(void *)&v197[1];
      *((void *)&v226 + 1) = *(void *)&v197[8];
      LOBYTE(v226) = v119;
      LODWORD(v3) = v196;
    }
    if (*(void *)a2)
    {
      if (!v201[8] || !v210[16]) {
        goto LABEL_503;
      }
      uint64_t v2 = WTF::fastMalloc((WTF *)0xA0);
      v197[0] = v3;
      *(void *)&v197[1] = v237;
      *(void *)&v197[8] = *(uint64_t *)((char *)v5 + 223);
      v197[16] = v4;
      *(_DWORD *)&v197[17] = v218;
      *(_DWORD *)&v197[20] = *(_DWORD *)((char *)v5 + 3);
      unint64_t result = WebCore::ScrollingStatePositionedNode::ScrollingStatePositionedNode();
      LODWORD(v10) = 1;
      uint64_t v103 = (WTF *)v223;
      if ((void)v223) {
        goto LABEL_398;
      }
      goto LABEL_522;
    }
LABEL_499:
    LODWORD(v10) = 0;
    uint64_t v2 = 0;
    if (v103)
    {
LABEL_398:
      *(void *)&long long v223 = 0;
      DWORD2(v223) = 0;
      unint64_t result = WTF::fastFree(v103, (void *)v14);
    }
LABEL_522:
    if (v210[16]) {
      unint64_t result = WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v210, (void *)v14);
    }
    if (v10)
    {
      if (*(void *)a2)
      {
        *(void *)a1 = v2;
        goto LABEL_414;
      }
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 8) = 0;
      if (!v2) {
        goto LABEL_421;
      }
      v112 = *(atomic_uchar **)(v2 + 8);
      goto LABEL_418;
    }
    unint64_t v36 = *(void *)a2;
    uint64_t v175 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v38 = *((void *)a2 + 3);
    if (!v38 || !v175) {
      goto LABEL_420;
    }
    goto LABEL_502;
  }
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)&v218);
  IPC::Decoder::decode<WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v216, a2);
  unint64_t result = IPC::Decoder::decode<WTF::OptionSet<WebCore::ScrollingStateNodeProperty>>(a2);
  LOBYTE(v10) = v14;
  if (!(_BYTE)v14) {
    goto LABEL_408;
  }
  uint64_t v2 = result;
  if (result)
  {
    unint64_t result = (unint64_t)IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v197);
    if (!v197[24]) {
      goto LABEL_408;
    }
    LODWORD(v3) = v197[0];
    v233[0] = *(void *)&v197[1];
    *(void *)((char *)v233 + 7) = *(void *)&v197[8];
    char v18 = v197[16];
  }
  else
  {
    LODWORD(v3) = 0;
    char v18 = 0;
  }
  if ((v2 & 2) != 0)
  {
    unint64_t result = (unint64_t)IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
    if (!(_BYTE)v14) {
      goto LABEL_408;
    }
  }
  if ((v2 & 4) != 0)
  {
    unint64_t result = (unint64_t)IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
    if (!(_BYTE)v14) {
      goto LABEL_408;
    }
  }
  if ((v2 & 8) != 0)
  {
    unint64_t result = (unint64_t)IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
    if (!(_BYTE)v14) {
      goto LABEL_408;
    }
  }
  if ((v2 & 0x10) != 0)
  {
    IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
    if (!(_BYTE)v14)
    {
      unint64_t v14 = *(void *)a2;
      uint64_t v121 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      unint64_t result = *((void *)a2 + 3);
      if (!result || !v121) {
        goto LABEL_408;
      }
LABEL_406:
      unint64_t result = (*(uint64_t (**)(unint64_t, unint64_t))(*(void *)result + 16))(result, v14);
      goto LABEL_408;
    }
  }
  if ((v2 & 0x20) != 0)
  {
    IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a2);
    if (!(_BYTE)v14)
    {
      unint64_t v14 = *(void *)a2;
      uint64_t v122 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      unint64_t result = *((void *)a2 + 3);
      if (!result || !v122) {
        goto LABEL_408;
      }
      goto LABEL_406;
    }
  }
  *(_WORD *)v214 = 257;
  *(void *)&v214[2] = 0;
  *(_WORD *)&v214[10] = 0;
  if ((v2 & 0x40) != 0)
  {
    unint64_t result = IPC::Decoder::decode<WebCore::ScrollableAreaParameters>((uint64_t *)a2);
    if ((v14 & 0xFF00000000) == 0) {
      goto LABEL_408;
    }
    *(void *)v214 = result;
    *(_DWORD *)&v214[8] = v14;
    int v26 = v10;
  }
  else
  {
    int v26 = 1;
  }
  v210[0] = 0;
  *(void *)&v210[4] = 0;
  *(_DWORD *)&v210[12] = 0;
  *(_WORD *)&v210[16] = 256;
  v210[18] = 0;
  LOBYTE(v211) = 0;
  unsigned __int8 v213 = 0;
  if (v26)
  {
    if ((v2 & 0x80) == 0) {
      goto LABEL_86;
    }
    unint64_t result = IPC::Decoder::decode<WebCore::RequestedScrollData>((uint64_t)v197, (uint64_t *)a2);
    if (v197[44])
    {
      *(_OWORD *)char v210 = *(_OWORD *)v197;
      *(_DWORD *)&v210[15] = *(_DWORD *)&v197[15];
      if (v213 == v197[40])
      {
        if (v213)
        {
          LOBYTE(v211) = v197[20];
          *(void *)((char *)&v211 + 4) = *(void *)&v197[24];
          HIDWORD(v211) = *(_DWORD *)&v197[32];
          LOWORD(v212) = *(_WORD *)&v197[36];
        }
      }
      else if (v213)
      {
        unsigned __int8 v213 = 0;
      }
      else
      {
        long long v211 = *(_OWORD *)&v197[20];
        int v212 = *(_DWORD *)&v197[36];
        unsigned __int8 v213 = 1;
      }
LABEL_86:
      LOBYTE(v200) = 0;
      memset(v201, 0, 64);
      if ((v2 & 0x100) != 0)
      {
        IPC::Decoder::decode<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>>((uint64_t)v197, (uint64_t *)a2);
        if (!v197[72])
        {
          std::__optional_destruct_base<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v197, v27);
          goto LABEL_445;
        }
        LOBYTE(v200) = v197[0];
        unint64_t v28 = *(WTF **)v201;
        if (*(_DWORD *)&v201[12])
        {
          uint64_t v29 = 40 * *(unsigned int *)&v201[12];
          uint64_t v30 = *(void *)v201 + 24;
          do
          {
            unint64_t v31 = *(WTF **)v30;
            if (*(void *)v30)
            {
              *(void *)uint64_t v30 = 0;
              *(_DWORD *)(v30 + 8) = 0;
              WTF::fastFree(v31, v27);
            }
            v30 += 40;
            v29 -= 40;
          }
          while (v29);
          unint64_t v28 = *(WTF **)v201;
        }
        if (v28)
        {
          *(void *)int v201 = 0;
          *(_DWORD *)&v201[8] = 0;
          WTF::fastFree(v28, v27);
        }
        *(void *)int v201 = *(void *)&v197[8];
        uint64_t v39 = *(void *)&v197[16];
        *(void *)&v197[8] = 0;
        *(void *)&v197[16] = 0;
        *(void *)&v201[8] = v39;
        int v40 = *(WTF **)&v201[16];
        if (*(_DWORD *)&v201[28])
        {
          uint64_t v41 = 40 * *(unsigned int *)&v201[28];
          uint64_t v42 = *(void *)&v201[16] + 24;
          do
          {
            unint64_t v43 = *(WTF **)v42;
            if (*(void *)v42)
            {
              *(void *)uint64_t v42 = 0;
              *(_DWORD *)(v42 + 8) = 0;
              WTF::fastFree(v43, v27);
            }
            v42 += 40;
            v41 -= 40;
          }
          while (v41);
          int v40 = *(WTF **)&v201[16];
        }
        if (v40)
        {
          *(void *)&v201[16] = 0;
          *(_DWORD *)&v201[24] = 0;
          WTF::fastFree(v40, v27);
        }
        *(void *)&v201[16] = *(void *)&v197[24];
        uint64_t v44 = *(void *)&v197[32];
        *(void *)&v197[24] = 0;
        *(void *)&v197[32] = 0;
        *(void *)&v201[24] = v44;
        unint64_t v45 = *(WTF **)&v201[32];
        if (*(void *)&v201[32])
        {
          *(void *)&v201[32] = 0;
          *(_DWORD *)&v201[40] = 0;
          WTF::fastFree(v45, v27);
        }
        *(void *)&v201[32] = *(void *)&v197[40];
        uint64_t v46 = *(void *)&v197[48];
        *(void *)&v197[40] = 0;
        *(void *)&v197[48] = 0;
        *(void *)&v201[40] = v46;
        unint64_t v47 = *(WTF **)&v201[48];
        if (*(void *)&v201[48])
        {
          *(void *)&v201[48] = 0;
          *(_DWORD *)&v201[56] = 0;
          WTF::fastFree(v47, v27);
        }
        *(void *)&v201[48] = *(void *)&v197[56];
        uint64_t v48 = *(void *)&v197[64];
        *(void *)&v197[56] = 0;
        *(void *)&v197[64] = 0;
        *(void *)&v201[56] = v48;
        std::__optional_destruct_base<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v197, v27);
      }
      if ((v2 & 0x200) != 0)
      {
        IPC::Decoder::decode<std::optional<unsigned int>>(a2);
        if (!(_BYTE)v14) {
          goto LABEL_445;
        }
      }
      if ((v2 & 0x400) != 0)
      {
        char v49 = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
        if (!(_BYTE)v14) {
          goto LABEL_445;
        }
        LOBYTE(v10) = v49;
      }
      else
      {
        LOBYTE(v10) = 0;
      }
      if ((v2 & 0x800) == 0)
      {
LABEL_173:
        if ((v2 & 0x1000) != 0)
        {
          IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v197);
          if (!v197[24]) {
            goto LABEL_445;
          }
          v232[0] = *(void *)&v197[1];
          *(void *)((char *)v232 + 7) = *(void *)&v197[8];
          LOBYTE(v182) = v197[16];
          BYTE4(v182) = v197[0];
        }
        else
        {
          uint64_t v182 = 0;
        }
        if ((v2 & 0x2000) != 0)
        {
          IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v197);
          if (!v197[24]) {
            goto LABEL_445;
          }
          v231[0] = *(void *)&v197[1];
          *(void *)((char *)v231 + 7) = *(void *)&v197[8];
          LOBYTE(v180) = v197[16];
          BYTE4(v180) = v197[0];
        }
        else
        {
          uint64_t v180 = 0;
        }
        if ((v2 & 0x4000) != 0)
        {
          IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v197);
          if (!v197[24]) {
            goto LABEL_445;
          }
          v230[0] = *(void *)&v197[1];
          *(void *)((char *)v230 + 7) = *(void *)&v197[8];
          LOBYTE(v178) = v197[16];
          BYTE4(v178) = v197[0];
        }
        else
        {
          uint64_t v178 = 0;
        }
        if ((v2 & 0x8000) != 0)
        {
          IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v197);
          if (!v197[24]) {
            goto LABEL_445;
          }
          v229[0] = *(void *)&v197[1];
          *(void *)((char *)v229 + 7) = *(void *)&v197[8];
          LOBYTE(v176) = v197[16];
          BYTE4(v176) = v197[0];
        }
        else
        {
          uint64_t v176 = 0;
        }
        if ((v2 & 0x10000) == 0) {
          goto LABEL_221;
        }
        unint64_t v61 = *((void *)a2 + 1);
        unint64_t v14 = *(void *)a2;
        unint64_t v62 = *((void *)a2 + 2) - *(void *)a2;
        if (v61 <= v62)
        {
          unint64_t v134 = 0;
          unint64_t v135 = 0;
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v136 = *((void *)a2 + 3);
          if (v136)
          {
            if (v61)
            {
              (*(void (**)(uint64_t))(*(void *)v136 + 16))(v136);
              unint64_t v135 = *(void *)a2;
              unint64_t v134 = *((void *)a2 + 1);
            }
            else
            {
              unint64_t v134 = 0;
              unint64_t v135 = 0;
            }
          }
        }
        else
        {
          uint64_t v63 = (unsigned __int8 *)(v14 + v62);
          *((void *)a2 + 2) = v63 + 1;
          if (v14)
          {
            if (*v63 < 2u)
            {
LABEL_221:
              long long v205 = 0uLL;
              if ((v2 & 0x20000) != 0)
              {
                IPC::Decoder::decode<WebCore::MouseLocationState>((uint64_t)v197, (unint64_t *)a2);
                if (!v197[16]) {
                  goto LABEL_445;
                }
                long long v205 = *(_OWORD *)v197;
              }
              __int16 v204 = 0;
              if ((v2 & 0x40000) != 0)
              {
                BOOL v64 = IPC::Decoder::decode<WebCore::ScrollbarHoverState>(a2);
                if ((v64 & 0xFFFFFF) < 0x10000) {
                  goto LABEL_445;
                }
                __int16 v204 = (__int16)v64;
              }
              __int16 v203 = 0;
              if ((v2 & 0x80000) != 0)
              {
                int v65 = IPC::Decoder::decode<WebCore::ScrollbarHoverState>(a2);
                if ((v65 & 0xFFFFFF) < 0x10000) {
                  goto LABEL_445;
                }
                __int16 v203 = (__int16)v65;
              }
              if ((v2 & 0x100000) != 0
                && (unsigned __int16)IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a2) < 0x100u
                || (v2 & 0x200000) != 0
                && (unsigned __int16)IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a2) < 0x100u)
              {
                goto LABEL_445;
              }
              LOBYTE(v226) = 0;
              BYTE4(v226) = 0;
              LOBYTE(v228) = 0;
              if ((v2 & 0x400000) != 0)
              {
                IPC::Decoder::decode<WebCore::RequestedKeyboardScrollData>((uint64_t)v197, (unint64_t *)a2);
                if (!v197[36]) {
                  goto LABEL_445;
                }
                long long v226 = *(_OWORD *)v197;
                long long v227 = *(_OWORD *)&v197[16];
                int v228 = *(_DWORD *)&v197[32];
              }
              if (*(void *)a2)
              {
                if (!v219 || !v217) {
                  goto LABEL_503;
                }
                uint64_t v4 = WTF::fastMalloc((WTF *)0x218);
                v197[0] = v3;
                *(void *)&v197[1] = v233[0];
                *(void *)&v197[8] = *(void *)((char *)v233 + 7);
                v197[16] = v18;
                *(_DWORD *)&v197[17] = *(_DWORD *)v215;
                *(_DWORD *)&v197[20] = *(_DWORD *)&v215[3];
                LOBYTE(v223) = BYTE4(v182);
                *((void *)&v223 + 1) = *(void *)((char *)v232 + 7);
                *(void *)((char *)&v223 + 1) = v232[0];
                char v224 = v182;
                *(_DWORD *)char v225 = *(_DWORD *)v209;
                *(_DWORD *)&v225[3] = *(_DWORD *)&v209[3];
                LOBYTE(v237) = BYTE4(v180);
                *(void *)((char *)&v237 + 1) = v231[0];
                *((void *)&v237 + 1) = *(void *)((char *)v231 + 7);
                char v238 = v180;
                *(_DWORD *)v239 = *(_DWORD *)v208;
                *(_DWORD *)&v239[3] = *(_DWORD *)&v208[3];
                LOBYTE(v220) = BYTE4(v178);
                *((void *)&v220 + 1) = *(void *)((char *)v230 + 7);
                *(void *)((char *)&v220 + 1) = v230[0];
                char v221 = v178;
                *(_DWORD *)&v222[3] = *(_DWORD *)&v207[3];
                *(_DWORD *)v222 = *(_DWORD *)v207;
                LOBYTE(v234) = BYTE4(v176);
                *((void *)&v234 + 1) = *(void *)((char *)v229 + 7);
                *(void *)((char *)&v234 + 1) = v229[0];
                char v235 = v176;
                *(_DWORD *)v236 = *(_DWORD *)v206;
                *(_DWORD *)&v236[3] = *(_DWORD *)&v206[3];
                WebCore::ScrollingStateOverflowScrollingNode::ScrollingStateOverflowScrollingNode();
                LODWORD(v10) = 1;
                goto LABEL_446;
              }
LABEL_445:
              LODWORD(v10) = 0;
              uint64_t v4 = 0;
LABEL_446:
              uint64_t v2 = (uint64_t)&v201[16];
              long long v138 = *(WTF **)&v201[48];
              if (*(void *)&v201[48])
              {
                *(void *)&v201[48] = 0;
                *(_DWORD *)&v201[56] = 0;
                WTF::fastFree(v138, (void *)v14);
              }
              v139 = *(WTF **)&v201[32];
              if (*(void *)&v201[32])
              {
                *(void *)&v201[32] = 0;
                *(_DWORD *)&v201[40] = 0;
                WTF::fastFree(v139, (void *)v14);
              }
              WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v201[16], (void *)v14);
              unint64_t result = WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v201, v140);
              goto LABEL_409;
            }
            goto LABEL_444;
          }
          unint64_t v134 = v61;
          unint64_t v135 = 0;
        }
        unint64_t v61 = 0;
        unint64_t v14 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v137 = *((void *)a2 + 3);
        if (v137)
        {
          if (v134)
          {
            (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v137 + 16))(v137, v135, v134);
            unint64_t v14 = *(void *)a2;
            unint64_t v61 = *((void *)a2 + 1);
          }
          else
          {
            unint64_t v61 = 0;
            unint64_t v14 = 0;
          }
        }
LABEL_444:
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v130 = *((void *)a2 + 3);
        if (!v130 || !v61) {
          goto LABEL_445;
        }
        goto LABEL_430;
      }
      unint64_t v50 = *((void *)a2 + 1);
      unint64_t v14 = *(void *)a2;
      unint64_t v51 = *((void *)a2 + 2) - *(void *)a2;
      if (v50 <= v51)
      {
        unint64_t v126 = 0;
        unint64_t v127 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v128 = *((void *)a2 + 3);
        if (v128)
        {
          if (v50)
          {
            (*(void (**)(uint64_t))(*(void *)v128 + 16))(v128);
            unint64_t v127 = *(void *)a2;
            unint64_t v126 = *((void *)a2 + 1);
          }
          else
          {
            unint64_t v126 = 0;
            unint64_t v127 = 0;
          }
        }
      }
      else
      {
        unint64_t v52 = (unsigned __int8 *)(v14 + v51);
        *((void *)a2 + 2) = v52 + 1;
        if (v14)
        {
          if (*v52 < 2u) {
            goto LABEL_173;
          }
LABEL_428:
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v130 = *((void *)a2 + 3);
          if (!v130 || !v50) {
            goto LABEL_445;
          }
LABEL_430:
          (*(void (**)(uint64_t, unint64_t))(*(void *)v130 + 16))(v130, v14);
          goto LABEL_445;
        }
        unint64_t v126 = v50;
        unint64_t v127 = 0;
      }
      unint64_t v50 = 0;
      unint64_t v14 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v129 = *((void *)a2 + 3);
      if (v129)
      {
        if (v126)
        {
          (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v129 + 16))(v129, v127, v126);
          unint64_t v14 = *(void *)a2;
          unint64_t v50 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v50 = 0;
          unint64_t v14 = 0;
        }
      }
      goto LABEL_428;
    }
LABEL_408:
    LODWORD(v10) = 0;
    uint64_t v4 = 0;
LABEL_409:
    if (v217) {
      unint64_t result = WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v216, (void *)v14);
    }
    if (v10)
    {
LABEL_412:
      if (*(void *)a2)
      {
        *(void *)a1 = v4;
        goto LABEL_414;
      }
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 8) = 0;
      if (!v4) {
        goto LABEL_421;
      }
      v112 = *(atomic_uchar **)(v4 + 8);
      goto LABEL_418;
    }
    unint64_t v36 = *(void *)a2;
    uint64_t v123 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v38 = *((void *)a2 + 3);
    if (!v38 || !v123) {
      goto LABEL_420;
    }
LABEL_502:
    (*(void (**)(uint64_t, unint64_t))(*(void *)v38 + 16))(v38, v36);
    if (*(void *)a2) {
      goto LABEL_503;
    }
LABEL_420:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    goto LABEL_421;
  }
LABEL_503:
  __break(1u);
LABEL_504:
  v171 = 0;
  LODWORD(v104) = 0;
  do
  {
    unint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)v197);
    if (!v197[16])
    {
      uint64_t v103 = (WTF *)v226;
      if (!(void)v226) {
        goto LABEL_520;
      }
      goto LABEL_519;
    }
    if (v104 == DWORD2(v226))
    {
      unint64_t result = WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v226, v104 + 1, (unint64_t)v197);
      int v172 = HIDWORD(v226);
      v171 = (WTF *)v226;
      *(_OWORD *)(v226 + 16 * HIDWORD(v226)) = *(_OWORD *)result;
    }
    else
    {
      *((_OWORD *)v171 + v104) = *(_OWORD *)v197;
      int v172 = HIDWORD(v226);
    }
    uint64_t v104 = (v172 + 1);
    HIDWORD(v226) = v172 + 1;
    --v2;
  }
  while (v2);
  unsigned int v106 = DWORD2(v226);
  if (DWORD2(v226) <= v104) {
    goto LABEL_536;
  }
  if (!v104) {
    goto LABEL_534;
  }
  if (!(v104 >> 28))
  {
    uint64_t v2 = 16 * v104;
    unint64_t result = WTF::fastMalloc((WTF *)(16 * v104));
    DWORD2(v226) = v104;
    *(void *)&long long v226 = result;
    if ((WTF *)result != v171)
    {
      uint64_t v173 = 0;
      do
      {
        *(_OWORD *)(result + v173) = *(_OWORD *)((char *)v171 + v173);
        v173 += 16;
      }
      while (v2 != v173);
      unsigned int v106 = v104;
      if (!v171) {
        goto LABEL_536;
      }
LABEL_535:
      unint64_t result = WTF::fastFree(v171, (void *)v14);
      unsigned int v106 = DWORD2(v226);
      LODWORD(v104) = HIDWORD(v226);
LABEL_536:
      uint64_t v103 = (WTF *)v226;
      goto LABEL_387;
    }
LABEL_534:
    *(void *)&long long v226 = 0;
    DWORD2(v226) = 0;
    goto LABEL_535;
  }
  __break(0xC471u);
  return result;
}

void sub_198956BE8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,WTF *a58,uint64_t a59,WTF *a60)
{
  if (a60) {
    WTF::fastFree(a60, a2);
  }
  if (a58) {
    WTF::fastFree(a58, a2);
  }
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a37, a2);
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a38, v61);
  if (LOBYTE(STACK[0x260])) {
    WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x250], v62);
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(IPC::Encoder *this, uint64_t *a2)
{
  if (*a2) {
    int v4 = *(_DWORD *)(*a2 - 12);
  }
  else {
    int v4 = 0;
  }
  BOOL v5 = (_DWORD *)IPC::Encoder::grow(this, 4uLL, 4);
  if (v6 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *BOOL v5 = v4;
    uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::begin(a2);
    int v8 = (uint64_t *)result;
    uint64_t v10 = v9;
    if (*a2) {
      uint64_t v11 = *a2 + 16 * *(unsigned int *)(*a2 - 4);
    }
    else {
      uint64_t v11 = 0;
    }
    if (v11 != result)
    {
      do
      {
        uint64_t result = (uint64_t)IPC::Encoder::operator<<<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(this, v8);
        while (1)
        {
          v8 += 2;
          if (v8 == v10) {
            break;
          }
          if (*(_OWORD *)v8 != 0 && v8[1] != -1) {
            goto LABEL_17;
          }
        }
        int v8 = v10;
LABEL_17:
        ;
      }
      while (v8 != (uint64_t *)v11);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::makeConstIterator(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1) {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v3 + 16 * v4;
  if (v5 != a2)
  {
    while (*(_OWORD *)a2 == 0 || *(void *)(a2 + 8) == -1)
    {
      a2 += 16;
      if (a2 == v5) {
        return v3 + 16 * v4;
      }
    }
  }
  return a2;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v7 = v7;
    char v12 = (void *)v6;
    do
    {
      if (v12[1] != -1 && *(_OWORD *)v12 != 0)
      {
        int v13 = (_OWORD *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::lookupForReinsert(a1, v12);
        *int v13 = *(_OWORD *)v12;
        if (v12 == a3) {
          uint64_t v11 = v13;
        }
      }
      v12 += 2;
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::lookupForReinsert(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    unsigned int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    unsigned int v3 = 0;
  }
  unsigned int v8 = -1640531527;
  __int16 v9 = 0;
  char v10 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v8, a2);
  int v4 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v8);
  int v5 = 0;
  do
  {
    uint64_t v6 = v4 & v3;
    int v4 = ++v5 + v6;
  }
  while (*(_OWORD *)(v2 + 16 * v6) != 0);
  return v2 + 16 * v6;
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>> const&>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    goto LABEL_4;
  }
  if (*(_DWORD *)(a2 + 16))
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_4:
    IPC::ArgumentCoder<std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>> const&,0ul>(a1, a2, a3);
  }
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>> const&,0ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1)
  {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a2 + 16) != 1)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_8:
    IPC::ArgumentCoder<std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>> const&,0ul,1ul>((uint64_t)a1, a2, a3);
    return;
  }

  IPC::VectorArgumentCoder<false,WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
}

uint64_t IPC::ArgumentCoder<std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>> const&,0ul,1ul>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 == 2)
  {
    if (*(_DWORD *)(a2 + 16) == 2)
    {
      unsigned int v3 = *(IPC **)a2;
      return IPC::ArgumentCoder<void const*,void>::encode(result, v3);
    }
    else
    {
      uint64_t v4 = std::__throw_bad_variant_access[abi:sn180100]();
      return IPC::VectorArgumentCoder<false,WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v4);
    }
  }
  return result;
}

void IPC::VectorArgumentCoder<false,WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  if (v4)
  {
    int v5 = *(__SecCertificate ***)a2;
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5++;
      IPC::ArgumentCoder<__SecCertificate *,void>::encode(a1, v7);
      v6 -= 8;
    }
    while (v6);
  }
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = a1[2] - *a1;
  if (v5 <= v7)
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v39 = a1[3];
    if (v39)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v6, v5);
        uint64_t v38 = *a1;
        uint64_t v37 = a1[1];
      }
      else
      {
        uint64_t v37 = 0;
        uint64_t v38 = 0;
      }
    }
    goto LABEL_41;
  }
  unsigned int v8 = (unsigned char *)(v6 + v7);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    uint64_t v37 = v5;
    uint64_t v38 = 0;
LABEL_41:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v40 = a1[3];
    if (v40 && v37) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 16))(v40, v38);
    }
    goto LABEL_4;
  }
  unsigned int v9 = *v8;
  if (v9 >= 3)
  {
LABEL_4:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
    return;
  }
  if (!*v8)
  {
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 0;
    goto LABEL_23;
  }
  if (v9 != 1)
  {
    IPC::Decoder::decode<WTF::RetainPtr<void const*>>(a1, a2, (uint64_t)&cf);
    char v23 = v43;
    if (!(_BYTE)v43)
    {
      *(unsigned char *)a3 = 0;
      goto LABEL_24;
    }
    *(void *)a3 = cf;
    *(_DWORD *)(a3 + 16) = 2;
LABEL_23:
    char v23 = 1;
LABEL_24:
    *(unsigned char *)(a3 + 24) = v23;
    return;
  }
  unint64_t v10 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v11)
  {
LABEL_37:
    uint64_t v34 = *a1;
    uint64_t v35 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v36 = a1[3];
    if (v36 && v35) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 16))(v36, v34);
    }
    char v24 = 0;
    *(unsigned char *)a3 = 0;
    goto LABEL_39;
  }
  unint64_t v12 = v10;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  if (v10 < 0x20000)
  {
    if (!v10)
    {
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      goto LABEL_27;
    }
    LODWORD(v46) = v10;
    uint64_t v45 = WTF::fastMalloc((WTF *)(8 * v10));
    while (1)
    {
      IPC::Decoder::decode<WTF::RetainPtr<__SecCertificate *>>((uint64_t)&cf, a1);
      if (!(_BYTE)v43) {
        goto LABEL_36;
      }
      int v13 = HIDWORD(v46);
      if (HIDWORD(v46) != v46) {
        break;
      }
      unint64_t v14 = (uint64_t *)WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v45, HIDWORD(v46) + 1, (unint64_t)&cf);
      uint64_t v15 = HIDWORD(v46);
      int v16 = HIDWORD(v46) + 1;
      uint64_t v17 = v45;
      uint64_t v18 = *v14;
      uint64_t *v14 = 0;
      *(void *)(v17 + 8 * v15) = v18;
      HIDWORD(v46) = v16;
      if ((_BYTE)v43) {
        goto LABEL_16;
      }
LABEL_18:
      if (!--v12) {
        goto LABEL_19;
      }
    }
    CFTypeRef v19 = cf;
    CFTypeRef cf = 0;
    *(void *)(v45 + 8 * HIDWORD(v46)) = v19;
    HIDWORD(v46) = v13 + 1;
LABEL_16:
    CFTypeRef v20 = cf;
    CFTypeRef cf = 0;
    if (v20) {
      CFRelease(v20);
    }
    goto LABEL_18;
  }
  do
  {
    IPC::Decoder::decode<WTF::RetainPtr<__SecCertificate *>>((uint64_t)&cf, a1);
    if (!(_BYTE)v43)
    {
LABEL_36:
      WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v11);
      goto LABEL_37;
    }
    int v26 = HIDWORD(v46);
    if (HIDWORD(v46) == v46)
    {
      char v27 = (uint64_t *)WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v45, HIDWORD(v46) + 1, (unint64_t)&cf);
      uint64_t v28 = HIDWORD(v46);
      int v29 = HIDWORD(v46) + 1;
      uint64_t v30 = v45;
      uint64_t v31 = *v27;
      uint64_t *v27 = 0;
      *(void *)(v30 + 8 * v28) = v31;
      HIDWORD(v46) = v29;
      if (!(_BYTE)v43) {
        goto LABEL_34;
      }
    }
    else
    {
      CFTypeRef v32 = cf;
      CFTypeRef cf = 0;
      *(void *)(v45 + 8 * HIDWORD(v46)) = v32;
      HIDWORD(v46) = v26 + 1;
    }
    CFTypeRef v33 = cf;
    CFTypeRef cf = 0;
    if (v33) {
      CFRelease(v33);
    }
LABEL_34:
    --v12;
  }
  while (v12);
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v45, HIDWORD(v46));
LABEL_19:
  uint64_t v21 = v45;
  uint64_t v22 = v46;
LABEL_27:
  uint64_t v41 = v22;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  char v24 = 1;
  char v44 = 1;
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v11);
  CFTypeRef cf = 0;
  uint64_t v43 = 0;
  *(void *)a3 = v21;
  *(void *)(a3 + 8) = v41;
  *(_DWORD *)(a3 + 16) = 1;
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&cf, v25);
LABEL_39:
  *(unsigned char *)(a3 + 24) = v24;
}

void sub_198957598(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, char a13, uint64_t a14, char a15)
{
  if (a13)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::RetainPtr<__SecCertificate *>>(uint64_t a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::RetainPtr<__SecCertificate *>,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 8))
  {
    uint64_t v4 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v5 = a2[3];
    if (v5 && v4 != 0)
    {
      unint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

unint64_t WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 29))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(WTF **)result;
    uint64_t v5 = *(unsigned int *)(result + 12);
    uint64_t v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    if (v5)
    {
      unint64_t v8 = (void *)v6;
      uint64_t v9 = 8 * v5;
      unint64_t v10 = v4;
      do
      {
        uint64_t v11 = *(const void **)v10;
        *(void *)unint64_t v10 = 0;
        *unint64_t v8 = v11;
        unint64_t v12 = *(const void **)v10;
        *(void *)unint64_t v10 = 0;
        if (v12) {
          CFRelease(v12);
        }
        ++v8;
        unint64_t v10 = (WTF *)((char *)v10 + 8);
        v9 -= 8;
      }
      while (v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) > a2)
  {
    if (*(unsigned int *)(a1 + 12) > a2) {
      WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, a2);
    }
    uint64_t v4 = *(WTF **)a1;
    if (a2)
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v5 = *(unsigned int *)(a1 + 12);
      uint64_t v6 = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = a2;
      *(void *)a1 = v6;
      if ((WTF *)v6 != v4 && v5)
      {
        unint64_t v7 = (void *)v6;
        uint64_t v8 = 8 * v5;
        uint64_t v9 = v4;
        do
        {
          unint64_t v10 = *(const void **)v9;
          *(void *)uint64_t v9 = 0;
          void *v7 = v10;
          uint64_t v11 = *(const void **)v9;
          *(void *)uint64_t v9 = 0;
          if (v11) {
            CFRelease(v11);
          }
          ++v7;
          uint64_t v9 = (WTF *)((char *)v9 + 8);
          v8 -= 8;
        }
        while (v8);
      }
    }
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, (void *)a2);
    }
  }
}

void WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  if (v4 != a2)
  {
    uint64_t v5 = (const void **)(*(void *)a1 + 8 * a2);
    uint64_t v6 = 8 * v4 - 8 * a2;
    do
    {
      unint64_t v7 = *v5;
      *uint64_t v5 = 0;
      if (v7) {
        CFRelease(v7);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  *(_DWORD *)(a1 + 12) = v2;
}

void IPC::Decoder::decode<WTF::RetainPtr<void const*>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  IPC::ArgumentCoder<WTF::RetainPtr<void const*>,void>::decode(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 8))
  {
    IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
}

uint64_t IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebsiteDataType>,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    uint64_t v5 = (_DWORD *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      unsigned int v6 = *v5 & 0xFFFFFF00;
      int v7 = *v5;
      int v8 = 1;
      goto LABEL_8;
    }
    unint64_t v12 = v1;
    uint64_t v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v14 = a1[3];
    if (v14)
    {
      int v16 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v2, v1);
        a1 = v16;
        uint64_t v13 = *v16;
        unint64_t v12 = v16[1];
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v15 = a1[3];
  if (v15 && v12) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
  }
  unsigned int v6 = 0;
  int v7 = 0;
  int v8 = 0;
LABEL_8:
  BOOL v9 = (v6 & 0xFFE00800) == 0;
  uint64_t v10 = v7 | v6 | 0x100000000;
  if ((v8 & v9) != 0) {
    return v10;
  }
  else {
    return 0;
  }
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 48 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebKit::WebsiteData::Entry,void>::encode(a1, v6);
      v6 += 48;
      v7 -= 48;
    }
    while (v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::WebsiteData::Entry>(uint64_t a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::SecurityOriginData>(a2, v21);
  uint64_t result = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>(a2);
  uint64_t v16 = result;
  if (*a2)
  {
    if ((result & 0xFF00000000) == 0) {
      goto LABEL_26;
    }
    v5.i32[0] = result;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.i32[0] == 1)
    {
      unint64_t v7 = a2[1];
      unint64_t v8 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
      if (v7 < v8 || v7 - v8 <= 7)
      {
        *a2 = 0;
        a2[1] = 0;
        uint64_t result = a2[3];
        if (result)
        {
          if (v7)
          {
            (*(void (**)(uint64_t))(*(void *)result + 16))(result);
            uint64_t v14 = *a2;
            uint64_t v15 = a2[1];
            uint64_t result = a2[3];
            *a2 = 0;
            a2[1] = 0;
            if (result)
            {
              if (v15)
              {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v14);
                if (*a2) {
                  goto LABEL_26;
                }
              }
            }
          }
        }
        goto LABEL_13;
      }
      uint64_t v10 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v11 = *v10;
      a2[2] = (uint64_t)(v10 + 1);
      if (v23)
      {
        WebKit::WebsiteData::Entry::Entry((uint64_t)v18, (uint64_t)v21, &v16, v11);
        uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1, (uint64_t)v18);
        *(_OWORD *)(a1 + 32) = v20;
        *(unsigned char *)(a1 + 48) = 1;
        if (v19 != -1) {
          uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v19])(&v17, v18);
        }
        goto LABEL_14;
      }
LABEL_26:
      __break(1u);
      return result;
    }
  }
LABEL_13:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 48) = 0;
LABEL_14:
  if (v23 && v22 != -1) {
    uint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v22])(v18, v21);
  }
  if (!*(unsigned char *)(a1 + 48))
  {
    uint64_t v12 = *a2;
    uint64_t v13 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result)
    {
      if (v13) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v12);
      }
    }
  }
  return result;
}

void sub_198957D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,int a23,int a24,char a25)
{
  if (a25)
  {
    if (a23 != -1) {
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[a23])(&a14, &a20);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_OWORD *)(std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor(*(void *)a1 + 48 * *(unsigned int *)(a1 + 12), v3)+ 32) = *(_OWORD *)(v3 + 32);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x198957F98);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = *(void *)a1 + 48 * *(unsigned int *)(a1 + 12);
    int v5 = 48 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebsiteData::Entry>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebKit::WebsiteData::Entry>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    uint64_t v7 = result;
    do
    {
      uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a3, v7);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(v7 + 32);
      uint64_t v8 = *(unsigned int *)(v7 + 24);
      if (v8 != -1) {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v8])(&v9, v7);
      }
      *(_DWORD *)(v7 + 24) = -1;
      a3 += 48;
      v7 += 48;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  uint64_t v4 = *(unsigned int **)a1;
  if (v3)
  {
    uint64_t v5 = 48 * v3;
    do
    {
      uint64_t v6 = v4[6];
      if (v6 != -1) {
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v6])(&v8, v4);
      }
      v4[6] = -1;
      v4 += 12;
      v5 -= 48;
    }
    while (v5);
    uint64_t v4 = *(unsigned int **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 56 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebKit::WebGPU::BindGroupEntry,void>::encode(a1, v6);
      v6 += 56;
      v7 -= 56;
    }
    while (v7);
  }
  return result;
}

void *IPC::VectorArgumentCoder<false,WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  uint64_t v4 = result[2];
  unint64_t v5 = *result + v4;
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!v3) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v9 = v8 + v4;
  unint64_t v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= result[1])
  {
    *(void *)(*result + v9) = v3;
    result[2] = v10;
    uint64_t v3 = *(unsigned int *)(a2 + 12);
    goto LABEL_8;
  }
  result[1] = 0;
  if (!v3) {
    return result;
  }
LABEL_9:
  uint64_t v12 = *(void *)a2;
  uint64_t v13 = 56 * v3;
  do
  {
    unint64_t result = IPC::ArgumentCoder<WebKit::WebGPU::BindGroupEntry,void>::encode(v2, v12);
    v12 += 56;
    v13 -= 56;
  }
  while (v13);
  return result;
}

void *IPC::Decoder::decode<WebKit::WebGPU::BindGroupEntry>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    unint64_t v8 = (_DWORD *)(v5 + v6);
    a2[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      int v9 = 0;
      unsigned int v10 = *v8 & 0xFFFFFF00;
      int v11 = *v8;
      goto LABEL_8;
    }
    uint64_t v34 = v4;
    uint64_t v35 = 0;
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v36 = a2[3];
    if (v36)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v36 + 16))(v36, v5, v4);
        uint64_t v35 = *a2;
        uint64_t v34 = a2[1];
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v35 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v37 = a2[3];
  if (v37 && v34) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v35);
  }
  unsigned int v10 = 0;
  int v11 = 0;
  int v9 = 1;
LABEL_8:
  uint64_t v12 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  char v14 = v13;
  unint64_t v15 = a2[1];
  uint64_t v16 = *a2;
  unint64_t v17 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v15 < v17 || v15 - v17 <= 7)
  {
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v40 = a2[3];
    if (v40)
    {
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v40 + 16))(v40, v16, v15);
        uint64_t v39 = *a2;
        uint64_t v38 = a2[1];
      }
      else
      {
        uint64_t v38 = 0;
        uint64_t v39 = 0;
      }
    }
    goto LABEL_43;
  }
  int v19 = (uint64_t *)(v16 + v17);
  a2[2] = (uint64_t)(v19 + 1);
  if (!v16)
  {
    uint64_t v38 = v15;
    uint64_t v39 = 0;
LABEL_43:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v41 = a2[3];
    if (v41)
    {
      if (v38) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 16))(v41, v39);
      }
      int v20 = 1;
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = 0;
      int v20 = 1;
    }
    goto LABEL_15;
  }
  int v20 = 0;
  uint64_t v21 = *v19;
LABEL_15:
  IPC::Decoder::decode<std::optional<unsigned long long>>((IPC::Decoder *)a2, (uint64_t)&v50);
  uint64_t v22 = *a2;
  unsigned int v47 = v10;
  uint64_t v46 = v21;
  if (!*a2) {
    goto LABEL_35;
  }
  if (!v14 || v20 || !v52) {
    goto LABEL_34;
  }
  int v23 = v9;
  uint64_t v48 = v50;
  char v49 = v51;
  unint64_t v24 = v12 & 0xFFFFFFFFFFFFFF00;
  uint64_t v25 = v12;
  while (1)
  {
    uint64_t v26 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
    char v28 = v27;
    LOWORD(v50) = 0;
    unint64_t result = IPC::Decoder::operator>><unsigned char>(a2, &v50);
    char v30 = v50;
    if (BYTE1(v50)) {
      BOOL v31 = v50 > 3u;
    }
    else {
      BOOL v31 = 1;
    }
    int v9 = v31;
    if (v9 == 1)
    {
      uint64_t v42 = *a2;
      uint64_t v43 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t result = (void *)a2[3];
      if (result && v43) {
        unint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v42);
      }
      char v30 = 0;
    }
    if (!*a2) {
      break;
    }
    if (!v23 && v22 && v28 && !v9)
    {
      *(_DWORD *)a1 = v11 | v47;
      *(void *)(a1 + 8) = v24 | v25;
      *(void *)(a1 + 16) = v46;
      *(void *)(a1 + 24) = v48;
      *(unsigned char *)(a1 + 32) = v49;
      *(void *)(a1 + 40) = v26;
      *(unsigned char *)(a1 + 48) = v30;
      *(unsigned char *)(a1 + 56) = 1;
      return result;
    }
LABEL_34:
    __break(1u);
LABEL_35:
    int v23 = v9;
    uint64_t v25 = 0;
    unint64_t v24 = 0;
    uint64_t v32 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v33 = a2[3];
    if (v33)
    {
      if (v32) {
        (*(void (**)(uint64_t, void))(*(void *)v33 + 16))(v33, 0);
      }
      uint64_t v25 = 0;
      unint64_t v24 = 0;
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 56) = 0;
  uint64_t v44 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = (void *)a2[3];
  if (result && v44)
  {
    uint64_t v45 = *(uint64_t (**)(void))(*result + 16);
    return (void *)v45();
  }
  return result;
}

unint64_t WTF::Vector<WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 56 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0x4924925)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    uint64_t v4 = *(unsigned int *)(result + 12);
    unsigned int v5 = 56 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(56 * a2));
    *(_DWORD *)(v2 + 8) = v5 / 0x38;
    *(void *)uint64_t v2 = v6;
    if (v4)
    {
      uint64_t v8 = 56 * v4;
      unint64_t v9 = v3;
      do
      {
        long long v10 = *(_OWORD *)v9;
        long long v11 = *((_OWORD *)v9 + 1);
        long long v12 = *((_OWORD *)v9 + 2);
        *(void *)(v6 + 48) = *((void *)v9 + 6);
        *(_OWORD *)(v6 + 16) = v11;
        *(_OWORD *)(v6 + 32) = v12;
        *(_OWORD *)uint64_t v6 = v10;
        v6 += 56;
        unint64_t v9 = (WTF *)((char *)v9 + 56);
        v8 -= 56;
      }
      while (v8);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 48 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebKit::WebGPU::BindGroupLayoutEntry,void>::encode(a1, v6);
      v6 += 48;
      v7 -= 48;
    }
    while (v7);
  }
  return result;
}

void *IPC::VectorArgumentCoder<false,WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  uint64_t v4 = result[2];
  unint64_t v5 = *result + v4;
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!v3) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v9 = v8 + v4;
  unint64_t v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= result[1])
  {
    *(void *)(*result + v9) = v3;
    result[2] = v10;
    uint64_t v3 = *(unsigned int *)(a2 + 12);
    goto LABEL_8;
  }
  result[1] = 0;
  if (!v3) {
    return result;
  }
LABEL_9:
  uint64_t v12 = *(void *)a2;
  uint64_t v13 = 48 * v3;
  do
  {
    unint64_t result = IPC::ArgumentCoder<WebKit::WebGPU::BindGroupLayoutEntry,void>::encode(v2, v12);
    v12 += 48;
    v13 -= 48;
  }
  while (v13);
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (result >= 0x5555)
  {
    do
    {
      IPC::Decoder::decode<WebKit::WebGPU::BindGroupLayoutEntry>((uint64_t)&v35, a1);
      if (!v38) {
        goto LABEL_30;
      }
      int v15 = HIDWORD(v40);
      if (HIDWORD(v40) == v40)
      {
        uint64_t v16 = (long long *)WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, HIDWORD(v40) + 1, (unint64_t)&v35);
        int v17 = HIDWORD(v40);
        unint64_t result = v39;
        uint64_t v18 = (_OWORD *)(v39 + 48 * HIDWORD(v40));
        long long v19 = v16[2];
        long long v20 = *v16;
        v18[1] = v16[1];
        v18[2] = v19;
        *uint64_t v18 = v20;
        int v15 = v17;
      }
      else
      {
        unint64_t result = v39;
        uint64_t v21 = (_OWORD *)(v39 + 48 * HIDWORD(v40));
        long long v22 = v37;
        long long v23 = v35;
        v21[1] = v36;
        v21[2] = v22;
        _OWORD *v21 = v23;
      }
      uint64_t v24 = (v15 + 1);
      HIDWORD(v40) = v24;
      --v6;
    }
    while (v6);
    unsigned int v25 = v40;
    if (v40 <= v24)
    {
      uint64_t v29 = result;
    }
    else
    {
      if (!v24) {
        goto LABEL_28;
      }
      if (v24 >= 0x5555556)
      {
        __break(0xC471u);
        return result;
      }
      unint64_t v26 = result;
      uint64_t v27 = v24;
      unsigned int v28 = 48 * v24;
      uint64_t v29 = WTF::fastMalloc((WTF *)(48 * v24));
      unsigned int v25 = v28 / 0x30;
      LODWORD(v40) = v28 / 0x30;
      uint64_t v39 = v29;
      unint64_t result = v26;
      if (v29 == v26) {
        goto LABEL_28;
      }
      uint64_t v30 = 0;
      do
      {
        BOOL v31 = (_OWORD *)(v29 + v30);
        long long v32 = *(_OWORD *)(v26 + v30);
        long long v33 = *(_OWORD *)(v26 + v30 + 32);
        v31[1] = *(_OWORD *)(v26 + v30 + 16);
        v31[2] = v33;
        _OWORD *v31 = v32;
        v30 += 48;
      }
      while (48 * v27 != v30);
      if (!v26) {
        goto LABEL_35;
      }
      unint64_t result = v26;
      if (v29 == v26)
      {
LABEL_28:
        uint64_t v39 = 0;
        LODWORD(v40) = 0;
      }
      WTF::fastFree((WTF *)result, v5);
      uint64_t v29 = v39;
      unsigned int v25 = v40;
    }
LABEL_35:
    *(void *)a2 = v29;
    int v34 = HIDWORD(v40);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    *(_DWORD *)(a2 + 8) = v25;
    *(_DWORD *)(a2 + 12) = v34;
    goto LABEL_14;
  }
  if (result)
  {
    LODWORD(v40) = 48 * (int)result / 0x30u;
    uint64_t v39 = WTF::fastMalloc((WTF *)(48 * result));
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebGPU::BindGroupLayoutEntry>((uint64_t)&v35, a1);
      if (!v38) {
        break;
      }
      int v7 = HIDWORD(v40);
      if (HIDWORD(v40) == v40)
      {
        unint64_t v8 = (long long *)WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, HIDWORD(v40) + 1, (unint64_t)&v35);
        int v7 = HIDWORD(v40);
        uint64_t v9 = v39;
        unint64_t v10 = (_OWORD *)(v39 + 48 * HIDWORD(v40));
        long long v11 = v8[2];
        long long v12 = *v8;
        v10[1] = v8[1];
      }
      else
      {
        uint64_t v9 = v39;
        unint64_t v10 = (_OWORD *)(v39 + 48 * HIDWORD(v40));
        long long v11 = v37;
        long long v12 = v35;
        v10[1] = v36;
      }
      void v10[2] = v11;
      _OWORD *v10 = v12;
      int v13 = v7 + 1;
      HIDWORD(v40) = v13;
      if (!--v6)
      {
        int v14 = v40;
        goto LABEL_13;
      }
    }
LABEL_30:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
  else
  {
    int v13 = 0;
    int v14 = 0;
    uint64_t v9 = 0;
LABEL_13:
    uint64_t v39 = 0;
    *(void *)a2 = v9;
    HIDWORD(v40) = 0;
    *(_DWORD *)(a2 + 8) = v14;
    *(_DWORD *)(a2 + 12) = v13;
LABEL_14:
    *(unsigned char *)(a2 + 16) = 1;
  }
  unint64_t result = v39;
  if (v39)
  {
    uint64_t v39 = 0;
    LODWORD(v40) = 0;
    return WTF::fastFree((WTF *)result, v5);
  }
  return result;
}

void sub_198958B38(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)(v2 - 48);
  if (v4)
  {
    *(void *)(v2 - 48) = 0;
    *(_DWORD *)(v2 - 40) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebKit::WebGPU::BindGroupLayoutEntry>(uint64_t result, uint64_t *a2)
{
  uint64_t v5 = result;
  unint64_t v6 = (a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v7 = *a2;
  unint64_t v8 = a2[1];
  unint64_t v9 = v6 - v7;
  if (v8 >= v9 && v8 - v9 > 3)
  {
    long long v11 = (int *)(v7 + v9);
    uint64_t v12 = v7 + v9 + 4;
    a2[2] = v12;
    if (v7)
    {
      LODWORD(v13) = 0;
      int v14 = *v11;
      goto LABEL_8;
    }
    uint64_t v69 = v8;
    uint64_t v70 = 0;
  }
  else
  {
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v71 = a2[3];
    if (v71)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v71 + 16))(v71);
        uint64_t v70 = *a2;
        uint64_t v69 = a2[1];
      }
      else
      {
        uint64_t v69 = 0;
        uint64_t v70 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v72 = a2[3];
  if (!v72)
  {
    int v14 = 0;
    uint64_t v69 = 0;
LABEL_105:
    uint64_t v7 = 0;
    LODWORD(v13) = 1;
LABEL_106:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v73 = a2[3];
    if (v73 && v69)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v73 + 16))(v73, v7, v69);
      uint64_t v7 = *a2;
      unint64_t v8 = a2[1];
    }
    else
    {
      unint64_t v8 = 0;
      uint64_t v7 = 0;
    }
    goto LABEL_108;
  }
  if (!v69)
  {
    int v14 = 0;
    goto LABEL_105;
  }
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v72 + 16))(v72, v70, v69);
  int v14 = 0;
  uint64_t v7 = *a2;
  unint64_t v8 = a2[1];
  LODWORD(v13) = 1;
  uint64_t v12 = a2[2];
LABEL_8:
  unint64_t v15 = v12 - v7;
  if (v8 <= v15)
  {
    uint64_t v69 = 0;
    uint64_t v130 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v130 && v8)
    {
      (*(void (**)(uint64_t))(*(void *)v130 + 16))(v130);
      uint64_t v7 = *a2;
      uint64_t v69 = a2[1];
    }
    else
    {
      uint64_t v7 = 0;
    }
    goto LABEL_106;
  }
  uint64_t v16 = (unsigned __int8 *)(v7 + v15);
  uint64_t v17 = v7 + v15 + 1;
  a2[2] = v17;
  if (!v7)
  {
    uint64_t v69 = v8;
    goto LABEL_106;
  }
  unsigned int v18 = *v16;
  if (v18 < 8)
  {
    int v19 = v18 | 0x100;
    goto LABEL_12;
  }
LABEL_108:
  *a2 = 0;
  a2[1] = 0;
  uint64_t v74 = a2[3];
  if (!v74)
  {
    int v19 = 0;
    goto LABEL_110;
  }
  if (!v8)
  {
    int v19 = 0;
    goto LABEL_111;
  }
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v74 + 16))(v74, v7);
  int v19 = 0;
  uint64_t v7 = *a2;
  unint64_t v8 = a2[1];
  uint64_t v17 = a2[2];
LABEL_12:
  unint64_t v20 = v17 - v7;
  if (v8 <= v20)
  {
    uint64_t v131 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v131)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v131 + 16))(v131);
        uint64_t v7 = *a2;
        unint64_t v8 = a2[1];
LABEL_112:
        *a2 = 0;
        a2[1] = 0;
        uint64_t v75 = a2[3];
        if (v75)
        {
          if (v8)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v75 + 16))(v75, v7);
            unint64_t v8 = a2[1];
          }
        }
        else
        {
          unint64_t v8 = 0;
        }
        goto LABEL_114;
      }
LABEL_111:
      uint64_t v7 = 0;
      goto LABEL_112;
    }
LABEL_110:
    unint64_t v8 = 0;
    goto LABEL_111;
  }
  uint64_t v21 = (unsigned __int8 *)(v7 + v20);
  a2[2] = (uint64_t)(v21 + 1);
  if (!v7) {
    goto LABEL_112;
  }
  unsigned int v22 = *v21;
  if (v22 >= 2)
  {
LABEL_114:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v76 = a2[3];
    if (!v76 || !v8) {
      goto LABEL_136;
    }
    unint64_t v77 = *(void (**)(void))(*(void *)v76 + 16);
LABEL_245:
    v77();
LABEL_136:
    uint64_t v96 = *a2;
    uint64_t v97 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = a2[3];
    if (result && v97)
    {
      unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v96);
      LOBYTE(v23) = 0;
      uint64_t v7 = *a2;
    }
    else
    {
      uint64_t v7 = 0;
      LOBYTE(v23) = 0;
    }
    int v35 = 1;
    goto LABEL_37;
  }
  if (!v22)
  {
    int v35 = 0;
    char v148 = 0;
    LOBYTE(v23) = 0;
    goto LABEL_37;
  }
  __int16 v154 = 0;
  unint64_t result = (uint64_t)IPC::Decoder::operator>><unsigned char>(a2, &v154);
  unsigned int v23 = v154;
  if (HIBYTE(v154)) {
    BOOL v24 = v154 > 2u;
  }
  else {
    BOOL v24 = 1;
  }
  int v25 = v24;
  unint64_t v26 = a2[1];
  if (v25 == 1)
  {
    uint64_t v88 = *a2;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v89 = a2[3];
    if (v89)
    {
      if (v26)
      {
        unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v89 + 16))(v89, v88);
        unsigned int v23 = 0;
        unint64_t v26 = a2[1];
        goto LABEL_23;
      }
      unsigned int v23 = 0;
    }
    else
    {
      unsigned int v23 = 0;
      unint64_t v26 = 0;
    }
    uint64_t v90 = 0;
    goto LABEL_130;
  }
LABEL_23:
  uint64_t v7 = *a2;
  unint64_t v27 = a2[2] - *a2;
  if (v26 <= v27)
  {
    unsigned int v135 = v23;
    uint64_t v90 = 0;
    uint64_t v136 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v26 && v136)
    {
      (*(void (**)(uint64_t))(*(void *)v136 + 16))(v136);
      uint64_t v90 = *a2;
      unint64_t v26 = a2[1];
    }
    else
    {
      unint64_t v26 = 0;
    }
    unsigned int v23 = v135;
    goto LABEL_130;
  }
  unsigned int v28 = (unsigned __int8 *)(v7 + v27);
  a2[2] = (uint64_t)(v28 + 1);
  if (!v7)
  {
    uint64_t v90 = 0;
LABEL_130:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v91 = a2[3];
    if (v91)
    {
      unsigned int v137 = v23;
      if (v26)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v91 + 16))(v91, v90);
        unsigned int v2 = 0;
        uint64_t v7 = *a2;
        unint64_t v26 = a2[1];
      }
      else
      {
        uint64_t v7 = 0;
        unsigned int v2 = 0;
      }
      unsigned int v23 = v137;
    }
    else
    {
      unint64_t v26 = 0;
      uint64_t v7 = 0;
      unsigned int v2 = 0;
    }
    goto LABEL_132;
  }
  unsigned int v2 = *v28;
  if (v2 < 2)
  {
    int v29 = 0;
    char v30 = 1;
    goto LABEL_27;
  }
LABEL_132:
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = a2[3];
  if (result)
  {
    unsigned int v3 = v23;
    if (v26)
    {
      unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v7);
      char v30 = 0;
      uint64_t v7 = *a2;
      unint64_t v26 = a2[1];
    }
    else
    {
      uint64_t v7 = 0;
      char v30 = 0;
    }
    int v29 = 1;
    unsigned int v23 = v3;
  }
  else
  {
    unint64_t v26 = 0;
    uint64_t v7 = 0;
    char v30 = 0;
    int v29 = 1;
  }
LABEL_27:
  if (!v2) {
    char v30 = 0;
  }
  char v147 = v30;
  unint64_t v31 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v7;
  if (v26 < v31 || v26 - v31 <= 7)
  {
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v94 = a2[3];
    if (v94)
    {
      unsigned int v2 = v23;
      if (v26)
      {
        (*(void (**)(uint64_t))(*(void *)v94 + 16))(v94);
        uint64_t v93 = *a2;
        uint64_t v92 = a2[1];
      }
      else
      {
        uint64_t v92 = 0;
        uint64_t v93 = 0;
      }
      unsigned int v23 = v2;
    }
  }
  else
  {
    long long v32 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a2[2] = (uint64_t)(v32 + 1);
    if (v7)
    {
      int v33 = 0;
      uint64_t v34 = *v32;
      if (v25) {
        goto LABEL_262;
      }
      goto LABEL_33;
    }
    uint64_t v92 = v26;
    uint64_t v93 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v95 = a2[3];
  if (!v95 || !v92) {
    goto LABEL_136;
  }
  unsigned int v2 = v23;
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v95 + 16))(v95, v93, v92);
  uint64_t v7 = *a2;
  if (!*a2)
  {
    uint64_t v138 = a2[1];
    uint64_t v139 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (!v139 || !v138) {
      goto LABEL_136;
    }
    unint64_t v77 = *(void (**)(void))(*(void *)v139 + 16);
    goto LABEL_245;
  }
  uint64_t v34 = 0;
  int v33 = 1;
  LOBYTE(v23) = v2;
  if (v25) {
    goto LABEL_262;
  }
LABEL_33:
  if (v29 || v33) {
    goto LABEL_262;
  }
  uint64_t v146 = v34;
  int v35 = 0;
  char v148 = 1;
LABEL_37:
  char v149 = v23;
  unint64_t v36 = a2[1];
  if (v36 <= a2[2] - v7)
  {
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v80 = a2[3];
    if (v80)
    {
      if (v36)
      {
        (*(void (**)(uint64_t))(*(void *)v80 + 16))(v80);
        uint64_t v79 = *a2;
        uint64_t v78 = a2[1];
      }
      else
      {
        uint64_t v78 = 0;
        uint64_t v79 = 0;
      }
    }
    goto LABEL_118;
  }
  long long v37 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v37 + 1);
  if (!v7)
  {
    uint64_t v78 = v36;
    uint64_t v79 = 0;
LABEL_118:
    unint64_t v36 = 0;
    uint64_t v7 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v81 = a2[3];
    if (v81)
    {
      if (v78)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v81 + 16))(v81, v79, v78);
        uint64_t v7 = *a2;
        unint64_t v36 = a2[1];
      }
      else
      {
        unint64_t v36 = 0;
        uint64_t v7 = 0;
      }
    }
    goto LABEL_119;
  }
  unsigned int v38 = *v37;
  if (v38 >= 2)
  {
LABEL_119:
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = a2[3];
    if (result && v36) {
      unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v7);
    }
    unsigned int v40 = 0;
    unsigned int v38 = 0;
    int v39 = 0;
    goto LABEL_47;
  }
  if (!v38)
  {
    int v39 = 0;
    goto LABEL_46;
  }
  __int16 v155 = 0;
  unint64_t result = (uint64_t)IPC::Decoder::operator>><unsigned char>(a2, &v155);
  if (HIBYTE(v155) && (unsigned int v38 = v155, v155 < 3u))
  {
    if (*a2)
    {
      int v39 = 256;
LABEL_46:
      unsigned int v40 = 0x10000;
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v112 = *a2;
    uint64_t v113 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v114 = a2[3];
    if (v114)
    {
      if (v113)
      {
        unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v114 + 16))(v114, v112);
        if (*a2) {
          goto LABEL_262;
        }
      }
    }
  }
  uint64_t v115 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = a2[3];
  if (result && v115) {
    unint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 16))(result, 0);
  }
  unsigned int v40 = 0;
  unsigned int v38 = 0;
  int v39 = 256;
LABEL_47:
  unsigned int v2 = v38 | v40 | v39;
  unint64_t v41 = a2[1];
  unsigned int v150 = v19;
  int v151 = v13;
  if (!HIWORD(v40))
  {
    uint64_t v82 = *a2;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v83 = a2[3];
    if (!v83 || !v41) {
      goto LABEL_122;
    }
    unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v83 + 16))(v83, v82);
    unint64_t v41 = a2[1];
  }
  uint64_t v42 = *a2;
  unint64_t v43 = a2[2] - *a2;
  if (v41 <= v43)
  {
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    uint64_t v132 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (!v132) {
      goto LABEL_123;
    }
    if (v41)
    {
      (*(void (**)(uint64_t))(*(void *)v132 + 16))(v132);
      uint64_t v85 = *a2;
      uint64_t v84 = a2[1];
      goto LABEL_123;
    }
LABEL_122:
    uint64_t v84 = 0;
    uint64_t v85 = 0;
LABEL_123:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v86 = a2[3];
    if (v86 && v84)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v86 + 16))(v86, v85, v84);
      uint64_t v42 = *a2;
      unint64_t v41 = a2[1];
    }
    else
    {
      unint64_t v41 = 0;
      uint64_t v42 = 0;
    }
    goto LABEL_125;
  }
  uint64_t v44 = (unsigned __int8 *)(v42 + v43);
  a2[2] = (uint64_t)(v44 + 1);
  if (!v42)
  {
    uint64_t v84 = v41;
    uint64_t v85 = 0;
    goto LABEL_123;
  }
  unsigned int v45 = *v44;
  if (v45 >= 2)
  {
LABEL_125:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v87 = a2[3];
    if (v87 && v41) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v87 + 16))(v87, v42);
    }
    unsigned int v3 = 0;
    goto LABEL_147;
  }
  if (!v45)
  {
    LODWORD(v13) = v14;
    unsigned int v3 = 0;
    int v14 = 0;
    goto LABEL_70;
  }
  __int16 v156 = 0;
  IPC::Decoder::operator>><unsigned char>(a2, &v156);
  __int16 v46 = v156;
  if (HIBYTE(v156)) {
    BOOL v47 = v156 > 4u;
  }
  else {
    BOOL v47 = 1;
  }
  unsigned int v3 = v47;
  if (v3 == 1)
  {
    uint64_t v98 = *a2;
    uint64_t v99 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v100 = a2[3];
    if (v100)
    {
      if (v99) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v100 + 16))(v100, v98);
      }
    }
  }
  unint64_t result = IPC::Decoder::decode<WebCore::ServiceWorkerState>(a2);
  unint64_t v26 = a2[1];
  uint64_t v42 = *a2;
  unint64_t v48 = a2[2] - *a2;
  if (v26 <= v48)
  {
    uint64_t v101 = 0;
    uint64_t v102 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v103 = a2[3];
    if (v103)
    {
      int v143 = v35;
      uint64_t v144 = result;
      if (v26)
      {
        (*(void (**)(uint64_t))(*(void *)v103 + 16))(a2[3]);
        uint64_t v102 = *a2;
        uint64_t v101 = a2[1];
      }
      else
      {
        uint64_t v101 = 0;
        uint64_t v102 = 0;
      }
      unint64_t result = v144;
      int v35 = v143;
    }
  }
  else
  {
    char v49 = (unsigned __int8 *)(v42 + v48);
    a2[2] = (uint64_t)(v49 + 1);
    if (v42)
    {
      unsigned int v50 = *v49;
      if (v50 < 2)
      {
        int v51 = 0;
        char v52 = 1;
        if (v3) {
          goto LABEL_262;
        }
        goto LABEL_63;
      }
      goto LABEL_145;
    }
    uint64_t v101 = v26;
    uint64_t v102 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v104 = a2[3];
  if (v104)
  {
    int v145 = v35;
    uint64_t v142 = result;
    if (v101)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v104 + 16))(v104, v102, v101);
      unsigned int v50 = 0;
      uint64_t v42 = *a2;
      unint64_t v26 = a2[1];
    }
    else
    {
      unint64_t v26 = 0;
      uint64_t v42 = 0;
      unsigned int v50 = 0;
    }
    unint64_t result = v142;
    int v35 = v145;
  }
  else
  {
    unint64_t v26 = 0;
    uint64_t v42 = 0;
    unsigned int v50 = 0;
  }
LABEL_145:
  *a2 = 0;
  a2[1] = 0;
  uint64_t v105 = a2[3];
  if (v105 && v26)
  {
    uint64_t v13 = result;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v105 + 16))(a2[3], v42);
    uint64_t v42 = *a2;
    if (*a2)
    {
      char v52 = 0;
      int v51 = 1;
      unint64_t result = v13;
      if (v3) {
        goto LABEL_262;
      }
LABEL_63:
      if ((unsigned __int16)result <= 0xFFu || v51) {
        goto LABEL_262;
      }
      LODWORD(v13) = v14;
      int v14 = 0;
      if ((v52 & (v50 != 0)) != 0) {
        int v53 = 0x10000;
      }
      else {
        int v53 = 0;
      }
      unsigned int v3 = v53 & 0xFFFF0000 | (unsigned __int16)(v46 | ((_WORD)result << 8)) | 0x1000000;
      goto LABEL_70;
    }
    uint64_t v140 = a2[3];
    uint64_t v141 = a2[1];
    unsigned int v3 = 0x1000000;
    *a2 = 0;
    a2[1] = 0;
    if (v140 && v141) {
      (*(void (**)(uint64_t, void))(*(void *)v140 + 16))(v140, 0);
    }
  }
  else
  {
    unsigned int v3 = 0x1000000;
  }
LABEL_147:
  LODWORD(v13) = v14;
  uint64_t v106 = *a2;
  uint64_t v107 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v108 = a2[3];
  if (!v108 || !v107)
  {
    uint64_t v109 = 0;
    uint64_t v42 = 0;
    int v14 = 1;
LABEL_149:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v110 = a2[3];
    if (v110 && v109)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v110 + 16))(v110, v42, v109);
      uint64_t v42 = *a2;
      unint64_t v54 = a2[1];
    }
    else
    {
      unint64_t v54 = 0;
      uint64_t v42 = 0;
    }
    goto LABEL_151;
  }
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v108 + 16))(v108, v106);
  uint64_t v42 = *a2;
  int v14 = 1;
LABEL_70:
  unint64_t v54 = a2[1];
  if (v54 <= a2[2] - v42)
  {
    uint64_t v109 = 0;
    uint64_t v133 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v133 && v54)
    {
      (*(void (**)(uint64_t))(*(void *)v133 + 16))(v133);
      uint64_t v42 = *a2;
      uint64_t v109 = a2[1];
    }
    else
    {
      uint64_t v42 = 0;
    }
    goto LABEL_149;
  }
  unint64_t v55 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v55 + 1);
  if (!v42)
  {
    uint64_t v109 = v54;
    goto LABEL_149;
  }
  unsigned int v56 = *v55;
  if (v56 >= 2)
  {
LABEL_151:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v111 = a2[3];
    if (v111 && v54) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v111 + 16))(v111, v42);
    }
    int v64 = 0;
    goto LABEL_162;
  }
  if (v56)
  {
    int v19 = v35;
    __int16 v157 = 0;
    IPC::Decoder::operator>><unsigned char>(a2, &v157);
    unsigned __int8 v57 = v157;
    if (HIBYTE(v157)) {
      BOOL v58 = v157 > 2u;
    }
    else {
      BOOL v58 = 1;
    }
    int v59 = v58;
    if (v59 == 1)
    {
      uint64_t v116 = *a2;
      uint64_t v117 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v118 = a2[3];
      if (v118)
      {
        if (v117) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v118 + 16))(v118, v116);
        }
      }
    }
    unsigned __int16 v60 = IPC::Decoder::decode<WebCore::WebGPU::TextureFormat>(a2);
    unint64_t result = IPC::Decoder::decode<WebCore::ServiceWorkerState>(a2);
    uint64_t v42 = *a2;
    if (*a2)
    {
      if (v59 || v60 <= 0xFFu || (unsigned __int16)result <= 0xFFu) {
        goto LABEL_262;
      }
      unsigned __int8 v61 = v57;
      unsigned int v62 = 0x1000000;
    }
    else
    {
      unsigned __int8 v61 = 0;
      unsigned int v62 = 0;
    }
    int v35 = v19;
    if (!HIBYTE(v62))
    {
      unint64_t v26 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t result = a2[3];
      if (result) {
        goto LABEL_263;
      }
      int v64 = 0x1000000;
      goto LABEL_162;
    }
    int v63 = 0;
    int v64 = (v62 | (result << 16) | (v60 << 8)) & 0xFFFF00 | v61 | 0x1000000;
  }
  else
  {
    int v64 = 0;
    int v63 = 0;
  }
LABEL_89:
  unint64_t v26 = a2[1];
  if (v26 <= a2[2] - v42)
  {
    uint64_t v122 = 0;
    uint64_t v134 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v134 && v26)
    {
      (*(void (**)(uint64_t))(*(void *)v134 + 16))(v134);
      uint64_t v42 = *a2;
      uint64_t v122 = a2[1];
    }
    else
    {
      uint64_t v42 = 0;
    }
  }
  else
  {
    int v65 = (unsigned __int8 *)a2[2];
    a2[2] = (uint64_t)(v65 + 1);
    if (v42)
    {
      unsigned int v66 = *v65;
      if (v66 < 2)
      {
        int v67 = 0;
        __int16 v68 = (v66 != 0) << 8;
        goto LABEL_93;
      }
      goto LABEL_166;
    }
    uint64_t v122 = v26;
  }
  while (1)
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t v123 = a2[3];
    if (v123 && v122)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v123 + 16))(v123, v42, v122);
      uint64_t v42 = *a2;
      unint64_t v26 = a2[1];
    }
    else
    {
      unint64_t v26 = 0;
      uint64_t v42 = 0;
    }
LABEL_166:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v124 = a2[3];
    if (!v124) {
      break;
    }
    if (!v26) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v124 + 16))(v124, v42);
    uint64_t v127 = a2[3];
    uint64_t v128 = *a2;
    uint64_t v129 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    if (!v127) {
      break;
    }
    if (!v129) {
      break;
    }
    unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v127 + 16))(v127, v128);
    if (!*a2) {
      break;
    }
    __int16 v68 = 0;
    int v67 = 1;
LABEL_93:
    if (!v151 && v150 > 0xFF && !v35 && HIWORD(v2) && !v14 && !v63 && !v67)
    {
      *(_DWORD *)uint64_t v5 = v13;
      *(unsigned char *)(v5 + 4) = v150;
      *(unsigned char *)(v5 + 8) = v149;
      *(unsigned char *)(v5 + 9) = v147;
      *(_DWORD *)(v5 + 10) = v152;
      *(_WORD *)(v5 + 14) = v153;
      *(void *)(v5 + 16) = v146;
      *(unsigned char *)(v5 + 24) = v148;
      *(_WORD *)(v5 + 32) = v2;
      *(_DWORD *)(v5 + 34) = v3;
      *(_DWORD *)(v5 + 38) = v64;
      *(_WORD *)(v5 + 42) = v68;
      *(unsigned char *)(v5 + 48) = 1;
      return result;
    }
LABEL_262:
    __break(1u);
LABEL_263:
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)result + 16))(result);
    }
    int v64 = 0x1000000;
    int v35 = v19;
LABEL_162:
    uint64_t v119 = *a2;
    uint64_t v120 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v121 = a2[3];
    if (v121 && v120)
    {
      unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v121 + 16))(v121, v119);
      uint64_t v42 = *a2;
      int v63 = 1;
      goto LABEL_89;
    }
    uint64_t v122 = 0;
    uint64_t v42 = 0;
    int v63 = 1;
  }
  *(unsigned char *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 48) = 0;
  uint64_t v125 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = a2[3];
  if (result && v125)
  {
    unint64_t v126 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v126();
  }
  return result;
}

unint64_t WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0x5555556)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    uint64_t v4 = *(unsigned int *)(result + 12);
    int v5 = 48 * a2;
    uint64_t v6 = (_OWORD *)WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)uint64_t v2 = v6;
    if (v4)
    {
      uint64_t v8 = 48 * v4;
      unint64_t v9 = v3;
      do
      {
        long long v10 = *(_OWORD *)v9;
        long long v11 = *((_OWORD *)v9 + 2);
        v6[1] = *((_OWORD *)v9 + 1);
        _OWORD v6[2] = v11;
        *uint64_t v6 = v10;
        v6 += 3;
        unint64_t v9 = (WTF *)((char *)v9 + 48);
        v8 -= 48;
      }
      while (v8);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::WebGPU::BufferBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::BufferBindingLayout> const&>(IPC::Encoder *a1, char *a2)
{
  if (a2[16])
  {
    char v7 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v7);
    if (a2[16])
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::BufferBindingLayout,void>::encode(a1, a2);
    }
    else
    {
      int v5 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::WebGPU::SamplerBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::SamplerBindingLayout> const&>(v5, v6);
    }
  }
  else
  {
    char v8 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v8);
  }
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::WebGPU::SamplerBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::SamplerBindingLayout> const&>(IPC::Encoder *a1, char *a2)
{
  if (a2[1])
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (a2[1])
    {
      char v8 = *a2;
      return IPC::Encoder::operator<<<BOOL>(a1, &v8);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::WebGPU::TextureBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::TextureBindingLayout> const&>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::WebGPU::TextureBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::TextureBindingLayout> const&>(IPC::Encoder *a1, char *a2)
{
  if (a2[3])
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (a2[3])
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::TextureBindingLayout,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::WebGPU::StorageTextureBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::StorageTextureBindingLayout> const&>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::WebGPU::StorageTextureBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::StorageTextureBindingLayout> const&>(IPC::Encoder *a1, char *a2)
{
  if (a2[3])
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (a2[3])
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::StorageTextureBindingLayout,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ExternalTextureBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::ExternalTextureBindingLayout> const&>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ExternalTextureBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::ExternalTextureBindingLayout> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 1))
  {
    char v4 = 1;
    uint64_t result = IPC::Encoder::operator<<<BOOL>(a1, &v4);
    if (*(unsigned char *)(a2 + 1)) {
      return result;
    }
    a1 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
  }
  char v5 = 0;
  return IPC::Encoder::operator<<<BOOL>(a1, &v5);
}

unint64_t IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::ComputePassTimestampWrites> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16))
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (*(unsigned char *)(a2 + 16))
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::RenderPassTimestampWrites,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::ComputePassTimestampWrites> const&>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::ComputePassTimestampWrites> const&>(uint64_t *result, uint64_t a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (*(unsigned char *)(a2 + 16))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!*(unsigned char *)(a2 + 16))
      {
        char v4 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
        return IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::decode<IPC::Decoder>(v4, v5);
      }
    }
    return IPC::ArgumentCoder<WebKit::WebGPU::RenderPassTimestampWrites,void>::encode(result, a2);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = result;
  unint64_t v4 = result[1];
  uint64_t v5 = *result;
  unint64_t v6 = result[2] - *result;
  if (v4 <= v6)
  {
LABEL_23:
    unint64_t v25 = 0;
    uint64_t v26 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v27 = v2[3];
    if (v27)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
        uint64_t v26 = *v2;
        unint64_t v25 = v2[1];
      }
      else
      {
        unint64_t v25 = 0;
        uint64_t v26 = 0;
      }
    }
    goto LABEL_24;
  }
  char v7 = (unsigned __int8 *)(v5 + v6);
  result[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    unint64_t v25 = v4;
    uint64_t v26 = 0;
LABEL_24:
    unint64_t v4 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v28 = v2[3];
    if (v28)
    {
      if (v25)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v28 + 16))(v28, v26, v25);
        unint64_t v4 = v2[1];
      }
      else
      {
        unint64_t v4 = 0;
      }
    }
    goto LABEL_25;
  }
  unsigned int v8 = *v7;
  if (v8 >= 2)
  {
LABEL_25:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t result = (uint64_t *)v2[3];
    if (!result || !v4) {
      goto LABEL_33;
    }
    int v29 = *(uint64_t (**)(void))(*result + 16);
LABEL_46:
    uint64_t result = (uint64_t *)v29();
LABEL_33:
    char v24 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_21;
  }
  if (!v8)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    char v24 = 1;
    goto LABEL_21;
  }
  uint64_t result = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(result);
  unint64_t v4 = v2[1];
  uint64_t v10 = *v2;
  unint64_t v11 = ((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v2;
  if (v4 >= v11 && v4 - v11 > 3)
  {
    uint64_t v13 = (int *)(v10 + v11);
    v2[2] = (uint64_t)(v13 + 1);
    if (v10)
    {
      int v14 = 0;
      int v15 = *v13;
      unsigned int v16 = v15 & 0xFFFFFF00;
      int v17 = v15;
      uint64_t v18 = v10;
      goto LABEL_12;
    }
    uint64_t v18 = v4;
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v30 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v31 = v2[3];
    if (v31)
    {
      unint64_t v43 = result;
      char v47 = v9;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v10);
        uint64_t v30 = *v2;
        uint64_t v18 = v2[1];
      }
      else
      {
        uint64_t v18 = 0;
        uint64_t v30 = 0;
      }
      uint64_t result = v43;
      char v9 = v47;
    }
  }
  *unint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v10 = v2[3];
  if (v10)
  {
    unint64_t v41 = result;
    char v45 = v9;
    if (v18)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v30, v18);
      unsigned int v16 = 0;
      int v17 = 0;
      uint64_t v18 = *v2;
      unint64_t v4 = v2[1];
      int v14 = 1;
      uint64_t v10 = *v2;
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v10 = 0;
      unsigned int v16 = 0;
      int v17 = 0;
      int v14 = 1;
    }
    uint64_t result = v41;
    char v9 = v45;
  }
  else
  {
    uint64_t v18 = 0;
    unint64_t v4 = 0;
    unsigned int v16 = 0;
    int v17 = 0;
    int v14 = 1;
  }
LABEL_12:
  unint64_t v19 = ((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v10;
  if (v4 < v19 || v4 - v19 <= 3)
  {
    unint64_t v21 = 0;
    uint64_t v18 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v32 = v2[3];
    if (v32)
    {
      int v38 = v14;
      int v40 = v17;
      unsigned int v36 = v16;
      uint64_t v44 = result;
      char v48 = v9;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 16))(v32, v10);
        uint64_t v18 = *v2;
        unint64_t v21 = v2[1];
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v18 = 0;
      }
      uint64_t result = v44;
      char v9 = v48;
      unsigned int v16 = v36;
      int v14 = v38;
      int v17 = v40;
    }
  }
  else
  {
    unint64_t v20 = (int *)((v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v2[2] = (uint64_t)(v20 + 1);
    unint64_t v21 = v4;
    if (v10)
    {
      int v22 = 0;
      int v23 = *v20;
      goto LABEL_16;
    }
  }
  *unint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v33 = v2[3];
  if (!v33 || !v21) {
    goto LABEL_33;
  }
  int v37 = v14;
  int v39 = v17;
  unsigned int v35 = v16;
  uint64_t v42 = result;
  char v46 = v9;
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v33 + 16))(v33, v18, v21);
  if (!*v2)
  {
    uint64_t v34 = v2[1];
    uint64_t result = (uint64_t *)v2[3];
    *unint64_t v2 = 0;
    v2[1] = 0;
    if (!result || !v34) {
      goto LABEL_33;
    }
    int v29 = *(uint64_t (**)(void))(*result + 16);
    goto LABEL_46;
  }
  int v23 = 0;
  int v22 = 1;
  uint64_t result = v42;
  char v9 = v46;
  unsigned int v16 = v35;
  int v14 = v37;
  int v17 = v39;
LABEL_16:
  if (!v9 || v14 || v22)
  {
    __break(1u);
    goto LABEL_23;
  }
  *(void *)a2 = result;
  *(_DWORD *)(a2 + 8) = v17 | v16;
  *(_DWORD *)(a2 + 12) = v23;
  char v24 = 1;
  *(unsigned char *)(a2 + 16) = 1;
LABEL_21:
  *(unsigned char *)(a2 + 24) = v24;
  return result;
}

void *IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>(void *result, uint64_t a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (!*(unsigned char *)(a2 + 4))
  {
    if (v2 < v3)
    {
      *(unsigned char *)(*result + v2) = 0;
      result[2] = v2 + 1;
      return result;
    }
LABEL_14:
    result[1] = 0;
    return result;
  }
  if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2++) = 1;
    result[2] = v2;
    if (!*(unsigned char *)(a2 + 4))
    {
      unint64_t v11 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return (void *)IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v11, v12);
    }
  }
  unint64_t v4 = *result + v2;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v2;
    unint64_t v9 = v8 + 4;
    if (v8 <= 0xFFFFFFFFFFFFFFFBLL && v9 <= result[1])
    {
      *(_DWORD *)(*result + v8) = *(_DWORD *)a2;
      result[2] = v9;
      return result;
    }
    goto LABEL_14;
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    BOOL v6 = *(uint64_t **)a2;
    unint64_t v7 = &v6[2 * v5];
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v6);
      unint64_t result = IPC::Encoder::operator<<<unsigned long long const&>(a1, v6 + 1);
      v6 += 2;
    }
    while (v6 != v7);
  }
  return result;
}

void *IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(void *result, uint64_t a2)
{
  unint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  uint64_t v4 = result[2];
  unint64_t v5 = *result + v4;
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!v3) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v9 = v8 + v4;
  unint64_t v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= result[1])
  {
    *(void *)(*result + v9) = v3;
    result[2] = v10;
    uint64_t v3 = *(unsigned int *)(a2 + 12);
    goto LABEL_8;
  }
  result[1] = 0;
  if (!v3) {
    return result;
  }
LABEL_9:
  uint64_t v12 = *(uint64_t **)a2;
  uint64_t v13 = *(void *)a2 + 16 * v3;
  do
  {
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(v2, v12);
    unint64_t result = IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(v2, v12 + 1);
    v12 += 2;
  }
  while (v12 != (uint64_t *)v13);
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::WebGPU::FeatureName>(uint64_t *a1)
{
  __int16 v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  int v2 = v13;
  if (HIBYTE(v13)) {
    BOOL v3 = v13 > 0xAu;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = v3;
  if (v4 == 1)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9 && v8 != 0)
    {
      int v12 = v2;
      int v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
      int v4 = v11;
      int v2 = v12;
    }
  }
  unsigned int v5 = v2 | 0x100;
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

IPC::Decoder *IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,unsigned long long>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v19);
  if (v20)
  {
    unint64_t v5 = *((void *)a2 + 1);
    unint64_t v6 = *(WTF::StringImpl **)a2;
    unint64_t v7 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
    if (v5 >= v7 && v5 - v7 > 7)
    {
      uint64_t v9 = (uint64_t *)((char *)v6 + v7);
      *((void *)a2 + 2) = v9 + 1;
      if (v6)
      {
        uint64_t v10 = *v9;
        *(void *)a1 = v19;
        *(void *)(a1 + 8) = v10;
        *(unsigned char *)(a1 + 16) = 1;
        return result;
      }
      unint64_t v11 = v5;
      int v12 = 0;
    }
    else
    {
      unint64_t v11 = 0;
      int v12 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v13 = *((void *)a2 + 3);
      if (v13)
      {
        if (v5)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v13 + 16))(v13, v6, v5);
          int v12 = *(WTF::StringImpl **)a2;
          unint64_t v11 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v11 = 0;
          int v12 = 0;
        }
      }
    }
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14 && v11) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v14 + 16))(v14, v12);
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    if (v20)
    {
      int v15 = v19;
      unint64_t v19 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v12);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
  }
  unsigned int v16 = *(WTF::StringImpl **)a2;
  uint64_t v17 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (IPC::Decoder *)*((void *)a2 + 3);
  if (result) {
    BOOL v18 = v17 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18) {
    return (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, WTF::StringImpl *))(*(void *)result + 16))(result, v16);
  }
  return result;
}

void sub_19895AA34(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x19895ABB4);
    }
    unint64_t v3 = result;
    int v4 = *(WTF::StringImpl **)result;
    uint64_t v5 = (WTF::StringImpl *)(*(void *)result + 16 * *((unsigned int *)result + 3));
    uint64_t v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(16 * a2));
    *((_DWORD *)v3 + 2) = v2;
    *(void *)unint64_t v3 = v6;
    unint64_t result = WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,unsigned long long>>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)v3 == v4)
      {
        *(void *)unint64_t v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v4, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,unsigned long long>>::move(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  if (result != a2)
  {
    uint64_t v5 = (WTF::StringImpl **)result;
    do
    {
      uint64_t v6 = *v5;
      unint64_t v7 = v5[1];
      *uint64_t v5 = 0;
      *a3 = v6;
      a3[1] = v7;
      unint64_t result = *v5;
      *uint64_t v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v5 += 2;
      a3 += 2;
    }
    while (v5 != (WTF::StringImpl **)a2);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (*(unsigned char *)(a2 + 8))
    {
      return IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::SharedVideoFrame>,void>::encode<IPC::Encoder,std::optional<WebKit::SharedVideoFrame>>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

void IPC::ArgumentCoder<std::optional<WebKit::SharedVideoFrame>,void>::encode<IPC::Encoder,std::optional<WebKit::SharedVideoFrame>>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 48))
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (*(unsigned char *)(a2 + 48))
    {
      IPC::ArgumentCoder<WebKit::SharedVideoFrame,void>::encode(a1, a2);
    }
    else
    {
      int v4 = (IPC::Decoder *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::Decoder::decode<WebKit::SharedVideoFrame>(v4, v5);
    }
  }
  else
  {
    char v7 = 0;
    IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

void IPC::Decoder::decode<WebKit::SharedVideoFrame>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebKit::SharedVideoFrame,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 48))
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v6 = *((void *)a1 + 3);
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_19895AD94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 48))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 40);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSM_EEEDcOSN_DpOT0____fmatrix[v15])(&a13, v13 + 24);
    }
    *(_DWORD *)(v13 + 40) = -1;
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::ColorTargetState>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebKit::WebGPU::ColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 16 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ColorTargetState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::ColorTargetState> const&>(a1, v6);
      v6 += 16;
      v7 -= 16;
    }
    while (v7);
  }
  return result;
}

void *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ColorTargetState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::ColorTargetState> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 12))
  {
    char v7 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v7);
    if (*(unsigned char *)(a2 + 12))
    {
      return (void *)IPC::ArgumentCoder<WebKit::WebGPU::ColorTargetState,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v5 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::String> const&>(v5, v6);
    }
  }
  else
  {
    char v8 = 0;
    return (void *)IPC::Encoder::operator<<<BOOL>(a1, &v8);
  }
}

void *IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::String> const&>(void *result, uint64_t a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (*(unsigned char *)(a2 + 8))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!*(unsigned char *)(a2 + 8))
      {
        uint64_t v4 = std::__throw_bad_optional_access[abi:sn180100]();
        return (void *)IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v4);
      }
    }
    return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(result, (uint64_t *)a2);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

void *IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(void *result, uint64_t a2)
{
  unint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  uint64_t v4 = result[2];
  unint64_t v5 = *result + v4;
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!v3) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v9 = v8 + v4;
  unint64_t v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= result[1])
  {
    *(void *)(*result + v9) = v3;
    result[2] = v10;
    uint64_t v3 = *(unsigned int *)(a2 + 12);
    goto LABEL_8;
  }
  result[1] = 0;
  if (!v3) {
    return result;
  }
LABEL_9:
  int v12 = *(uint64_t **)a2;
  uint64_t v13 = 16 * v3;
  do
  {
    unint64_t result = IPC::ArgumentCoder<WTF::KeyValuePair<WTF::String,double>,void>::encode<IPC::StreamConnectionEncoder,WTF::KeyValuePair<WTF::String,double> const&>(v2, v12);
    v12 += 2;
    v13 -= 16;
  }
  while (v13);
  return result;
}

void *IPC::ArgumentCoder<WTF::KeyValuePair<WTF::String,double>,void>::encode<IPC::StreamConnectionEncoder,WTF::KeyValuePair<WTF::String,double> const&>(void *a1, uint64_t *a2)
{
  unint64_t result = IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, a2);
  uint64_t v5 = a1[2];
  unint64_t v6 = *a1 + v5;
  unint64_t v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v10 + 8;
    if (v10 > 0xFFFFFFFFFFFFFFF7 || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(void *)(*a1 + v10) = a2[1];
      a1[2] = v11;
    }
  }
  return result;
}

IPC::Decoder *IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::ColorTargetState>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<std::optional<WebKit::WebGPU::ColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Decoder *result, uint64_t a2)
{
  unint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  unint64_t v4 = *((void *)result + 2);
  unint64_t v5 = *(void *)result + v4;
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v8 + v4 + 8;
    if (v9 > 0xFFFFFFFFFFFFFFF7 || v10 > *((void *)result + 1))
    {
      *((void *)result + 1) = 0;
      if (v3) {
        goto LABEL_9;
      }
      return result;
    }
    *(void *)(*(void *)result + v9) = v3;
    *((void *)result + 2) = v10;
    uint64_t v3 = *(unsigned int *)(a2 + 12);
    unint64_t v4 = v10;
  }
  if (v3)
  {
LABEL_9:
    uint64_t v12 = 16 * v3;
    uint64_t v13 = *(void *)a2 + 7;
    do
    {
      unint64_t v14 = *((void *)v2 + 1);
      if (!*(unsigned char *)(v13 + 5))
      {
        if (v4 >= v14) {
          goto LABEL_32;
        }
        *(unsigned char *)(*(void *)v2 + v4++) = 0;
        *((void *)v2 + 2) = v4;
        goto LABEL_30;
      }
      if (v4 < v14)
      {
        unint64_t v15 = v4 + 1;
        *(unsigned char *)(*(void *)v2 + v4) = 1;
        *((void *)v2 + 2) = v4 + 1;
        if (!*(unsigned char *)(v13 + 5)) {
          goto LABEL_39;
        }
        if (v15 < *((void *)v2 + 1))
        {
          v4 += 2;
          *(unsigned char *)(*(void *)v2 + v15) = *(unsigned char *)(v13 - 7);
          *((void *)v2 + 2) = v4;
          unint64_t v16 = *((void *)v2 + 1);
          goto LABEL_15;
        }
        ++v4;
      }
      unint64_t v16 = 0;
      *((void *)v2 + 1) = 0;
LABEL_15:
      if (*(unsigned char *)v13)
      {
        if (v4 >= v16)
        {
          *((void *)v2 + 1) = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)v2 + v4) = 1;
          *((void *)v2 + 2) = v4 + 1;
          if (!*(unsigned char *)v13)
          {
LABEL_39:
            uint64_t v23 = std::__throw_bad_optional_access[abi:sn180100]();
            return IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,double>>(v23, v24);
          }
        }
        IPC::ArgumentCoder<WebKit::WebGPU::BlendComponent,void>::encode(v2, (unsigned char *)(v13 - 6));
        unint64_t result = (IPC::Decoder *)IPC::ArgumentCoder<WebKit::WebGPU::BlendComponent,void>::encode(v2, (unsigned char *)(v13 - 3));
        unint64_t v4 = *((void *)v2 + 2);
      }
      else if (v4 >= v16)
      {
        *((void *)v2 + 1) = 0;
      }
      else
      {
        *(unsigned char *)(*(void *)v2 + v4++) = 0;
        *((void *)v2 + 2) = v4;
      }
      unint64_t v17 = *(void *)v2 + v4;
      unint64_t v18 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      BOOL v7 = v18 >= v17;
      unint64_t v19 = v18 - v17;
      if (v7)
      {
        unint64_t v20 = v19 + v4;
        unint64_t v21 = v19 + v4 + 4;
        if (v20 > 0xFFFFFFFFFFFFFFFBLL || v21 > *((void *)v2 + 1))
        {
LABEL_32:
          *((void *)v2 + 1) = 0;
          goto LABEL_30;
        }
        *(_DWORD *)(*(void *)v2 + v20) = *(_DWORD *)(v13 + 1);
        *((void *)v2 + 2) = v21;
        unint64_t v4 = v21;
      }
LABEL_30:
      v13 += 16;
      v12 -= 16;
    }
    while (v12);
  }
  return result;
}

IPC::Decoder *IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,double>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v19);
  if (v20)
  {
    unint64_t v5 = *((void *)a2 + 1);
    unint64_t v6 = *(WTF::StringImpl **)a2;
    unint64_t v7 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
    if (v5 >= v7 && v5 - v7 > 7)
    {
      unint64_t v9 = (uint64_t *)((char *)v6 + v7);
      *((void *)a2 + 2) = v9 + 1;
      if (v6)
      {
        uint64_t v10 = *v9;
        *(void *)a1 = v19;
        *(void *)(a1 + 8) = v10;
        *(unsigned char *)(a1 + 16) = 1;
        return result;
      }
      unint64_t v11 = v5;
      uint64_t v12 = 0;
    }
    else
    {
      unint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v13 = *((void *)a2 + 3);
      if (v13)
      {
        if (v5)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v13 + 16))(v13, v6, v5);
          uint64_t v12 = *(WTF::StringImpl **)a2;
          unint64_t v11 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v11 = 0;
          uint64_t v12 = 0;
        }
      }
    }
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14 && v11) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v14 + 16))(v14, v12);
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    if (v20)
    {
      unint64_t v15 = v19;
      unint64_t v19 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v12);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
  }
  unint64_t v16 = *(WTF::StringImpl **)a2;
  uint64_t v17 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (IPC::Decoder *)*((void *)a2 + 3);
  if (result) {
    BOOL v18 = v17 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18) {
    return (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, WTF::StringImpl *))(*(void *)result + 16))(result, v16);
  }
  return result;
}

void sub_19895B3A8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::WebGPU::ColorTargetState>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
LABEL_31:
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v34 = a2[3];
    if (v34)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v34 + 16))(v34);
        uint64_t v33 = *a2;
        uint64_t v32 = a2[1];
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = 0;
      }
    }
    goto LABEL_32;
  }
  unint64_t v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v32 = v6;
    uint64_t v33 = 0;
LABEL_32:
    unint64_t v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v35 = a2[3];
    if (v35)
    {
      if (v32)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v33, v32);
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
      }
    }
LABEL_33:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v36 = a2[3];
    if (v36 && v6)
    {
      int v37 = *(void (**)(void))(*(void *)v36 + 16);
LABEL_69:
      v37();
      goto LABEL_48;
    }
    goto LABEL_48;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2) {
    goto LABEL_33;
  }
  if (!v9)
  {
    *(unsigned char *)unint64_t result = 0;
    *(unsigned char *)(result + 12) = 0;
LABEL_28:
    *(unsigned char *)(v3 + 16) = 1;
    return result;
  }
  unint64_t result = IPC::Decoder::decode<WebCore::WebGPU::TextureFormat>(a2);
  unsigned __int16 v10 = result;
  unint64_t v11 = a2[1];
  uint64_t v12 = *a2;
  unint64_t v13 = a2[2] - *a2;
  if (v11 <= v13)
  {
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v40 = a2[3];
    if (v40)
    {
      if (v11)
      {
        (*(void (**)(uint64_t))(*(void *)v40 + 16))(v40);
        uint64_t v39 = *a2;
        uint64_t v38 = a2[1];
      }
      else
      {
        uint64_t v38 = 0;
        uint64_t v39 = 0;
      }
    }
    goto LABEL_37;
  }
  uint64_t v14 = (unsigned __int8 *)(v12 + v13);
  a2[2] = (uint64_t)(v14 + 1);
  if (!v12)
  {
    uint64_t v38 = v11;
    uint64_t v39 = 0;
LABEL_37:
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v41 = a2[3];
    if (v41)
    {
      if (v38)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v41 + 16))(v41, v39, v38);
        uint64_t v12 = *a2;
        unint64_t v11 = a2[1];
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_38;
  }
  unsigned int v15 = *v14;
  if (v15 >= 2)
  {
LABEL_38:
    uint64_t v23 = 0;
    unint64_t v22 = 0;
    uint64_t v21 = 0;
    uint64_t v20 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = a2[3];
    if (result)
    {
      if (v11) {
        unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v12);
      }
      uint64_t v23 = 0;
      unint64_t v22 = 0;
      uint64_t v21 = 0;
      uint64_t v20 = 0;
    }
    goto LABEL_18;
  }
  if (v15)
  {
    unsigned int v16 = IPC::Decoder::decode<WebKit::WebGPU::BlendComponent>(a2);
    unint64_t result = IPC::Decoder::decode<WebKit::WebGPU::BlendComponent>(a2);
    if (*a2)
    {
      if (!HIBYTE(v16) || !BYTE3(result))
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      unsigned int v17 = v16 >> 8;
      __int16 v18 = 1;
    }
    else
    {
      __int16 v18 = 0;
      LOBYTE(v16) = 0;
    }
    if (v18)
    {
      int v19 = v16 | (v17 << 8);
      uint64_t v20 = ((unint64_t)(result & 0xFFFFFF) << 24) & 0xFFFFFF000000 | *(void *)&v19 & 0xFFFF00;
      uint64_t v21 = v19;
      unint64_t v22 = 0x100000000000000;
    }
    else
    {
      uint64_t v49 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t result = a2[3];
      if (result && v49) {
        unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      }
      unint64_t v22 = 0;
      uint64_t v21 = 0;
      uint64_t v20 = 0;
    }
    uint64_t v23 = 0x1000000000000;
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v21 = 0;
    uint64_t v20 = 0;
    unint64_t v22 = 0x100000000000000;
  }
LABEL_18:
  uint64_t v24 = a2[1];
  if (HIBYTE(v22))
  {
    unint64_t v6 = a2[1];
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v42 = *a2;
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = a2[3];
    if (result)
    {
      uint64_t v55 = v20;
      uint64_t v58 = v23;
      uint64_t v52 = v21;
      if (v24)
      {
        unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 16))(result, v42, v24);
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
      }
      uint64_t v21 = v52;
      uint64_t v20 = v55;
      uint64_t v23 = v58;
    }
  }
  uint64_t v25 = *a2;
  unint64_t v26 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v6 < v26 || v6 - v26 <= 3)
  {
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v45 = a2[3];
    if (v45)
    {
      uint64_t v57 = v20;
      uint64_t v60 = v23;
      uint64_t v54 = v21;
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
        uint64_t v44 = *a2;
        uint64_t v43 = a2[1];
      }
      else
      {
        uint64_t v43 = 0;
        uint64_t v44 = 0;
      }
      uint64_t v21 = v54;
      uint64_t v20 = v57;
      uint64_t v23 = v60;
    }
  }
  else
  {
    uint64_t v27 = (int *)(v25 + v26);
    a2[2] = (uint64_t)(v27 + 1);
    if (v25)
    {
      int v28 = 0;
      int v30 = *v27;
      unsigned int v29 = *v27 & 0xFFFFFF00;
      int v30 = v30;
LABEL_24:
      if (v10 > 0xFFu)
      {
        unint64_t v31 = v22 | v20 | v23 | v21;
        if (HIBYTE(v31))
        {
          if (!v28)
          {
            *(void *)uint64_t v3 = v10 | (v31 << 8);
            *(_DWORD *)(v3 + 8) = v29 | v30;
            *(unsigned char *)(v3 + 12) = 1;
            goto LABEL_28;
          }
        }
      }
      goto LABEL_30;
    }
    uint64_t v43 = v6;
    uint64_t v44 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v46 = a2[3];
  if (!v46 || !v43) {
    goto LABEL_48;
  }
  uint64_t v56 = v20;
  uint64_t v59 = v23;
  uint64_t v53 = v21;
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v46 + 16))(v46, v44, v43);
  if (*a2)
  {
    int v30 = 0;
    unsigned int v29 = 0;
    int v28 = 1;
    uint64_t v21 = v53;
    uint64_t v20 = v56;
    uint64_t v23 = v59;
    goto LABEL_24;
  }
  uint64_t v50 = a2[3];
  uint64_t v51 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v50 && v51)
  {
    int v37 = *(void (**)(void))(*(void *)v50 + 16);
    goto LABEL_69;
  }
LABEL_48:
  *(unsigned char *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 16) = 0;
  uint64_t v47 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = a2[3];
  if (result && v47)
  {
    char v48 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v48();
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>,void>::encode<IPC::Encoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    char v8 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v8);
    if (*(unsigned char *)(a2 + 24))
    {
      unsigned __int8 v10 = *(_DWORD *)(a2 + 16);
      IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
      return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&>((uint64_t *)a1, (int *)a2, v10);
    }
    else
    {
      uint64_t v5 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&>(v5, v6, v7);
    }
  }
  else
  {
    char v9 = 0;
    return (uint64_t *)IPC::Encoder::operator<<<BOOL>(a1, &v9);
  }
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&>(uint64_t *a1, int *a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&,0ul>(a1, a2, a3);
  }
  if (a2[4])
  {
    a1 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&,0ul>(a1, a2, a3);
  }
  uint64_t v4 = a2[3];
  uint64_t v5 = *(const void **)a2;

  return (uint64_t *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)a1, v5, v4);
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&,0ul>(uint64_t *result, int *a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (a2[4] == 1)
    {
      uint64_t v4 = (IPC::Encoder *)result;
      IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>((IPC::Encoder *)result, *a2);
      int v5 = a2[1];
      return (uint64_t *)IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(v4, v5);
    }
    else
    {
      unint64_t v6 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>> const&>(v6, v7);
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>> const&>(uint64_t *result, uint64_t a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (*(unsigned char *)(a2 + 24))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!*(unsigned char *)(a2 + 24))
      {
        unint64_t result = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
        return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&>(result, a2);
      }
    }
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&>(result, a2);
  }
  if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 16);
  unint64_t v3 = a1[2];
  if (v3 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v3) = v2;
    a1[2] = v3 + 1;
  }
  return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&>(a1, (_DWORD *)a2, v2);
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&>(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&,0ul>(a1, a2, a3);
  }
  if (a2[4])
  {
    a1 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&,0ul>(a1, a2, a3);
  }
  uint64_t v4 = a2[3];
  int v5 = *(const void **)a2;

  return IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, v5, v4);
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&,0ul>(uint64_t *result, _DWORD *a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (a2[4] == 1)
    {
      return IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(result, a2);
    }
    else
    {
      unint64_t v3 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(v3, v4, v5);
    }
  }
  return result;
}

void *IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(void *a1, const void *a2, uint64_t a3)
{
  unint64_t result = IPC::StreamConnectionEncoder::operator<<<unsigned long &>(a1, a3);
  if (a3)
  {
    return (void *)IPC::StreamConnectionEncoder::encodeSpan<float const,18446744073709551615ul>(result, a2, a3);
  }
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<true,unsigned int,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16]) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_19895BCE8(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    uint64_t v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<true,unsigned int,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<std::span<unsigned int const,18446744073709551615ul>>(a1, (uint64_t)v5);
  char v4 = v6;
  if (v6)
  {
    unint64_t result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)a2, v5[0], (unint64_t)v5[1]);
    char v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[16] = v4;
  return result;
}

unint64_t IPC::Decoder::decode<std::span<unsigned int const,18446744073709551615ul>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!v5) {
    goto LABEL_14;
  }
  if (result)
  {
    if (result >> 62)
    {
LABEL_14:
      char v13 = 0;
      *(unsigned char *)a2 = 0;
      goto LABEL_12;
    }
    unint64_t v6 = *((void *)a1 + 1);
    uint64_t v7 = *(void *)a1;
    unint64_t v8 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
    unint64_t v9 = 4 * result;
    BOOL v11 = v6 >= v8;
    unint64_t v10 = v6 - v8;
    BOOL v11 = v11 && v10 >= v9;
    if (!v11)
    {
      unint64_t result = IPC::Decoder::markInvalid(a1);
      goto LABEL_14;
    }
    uint64_t v12 = v7 + v8;
    *((void *)a1 + 2) = v12 + v9;
    if (!v7) {
      goto LABEL_14;
    }
    *(void *)a2 = v12;
    *(void *)(a2 + 8) = result;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  char v13 = 1;
LABEL_12:
  *(unsigned char *)(a2 + 16) = v13;
  return result;
}

uint64_t WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>(uint64_t result, int *a2, unint64_t a3)
{
  int v3 = a3;
  uint64_t v4 = result;
  *(void *)unint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  if (!a3) {
    return v4;
  }
  if (!(a3 >> 30))
  {
    uint64_t v6 = 4 * a3;
    uint64_t v7 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * a3));
    *(_DWORD *)(v4 + 8) = v3;
    *(void *)uint64_t v4 = v7;
    do
    {
      int v8 = *a2++;
      *v7++ = v8;
      v6 -= 4;
    }
    while (v6);
    return v4;
  }
  __break(0xC471u);
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>,void>::encode<IPC::Encoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    char v8 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v8);
    if (*(unsigned char *)(a2 + 24))
    {
      unsigned __int8 v10 = *(_DWORD *)(a2 + 16);
      IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
      return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>(a1, (int *)a2, v10);
    }
    else
    {
      char v5 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>(v5, v6, v7);
    }
  }
  else
  {
    char v9 = 0;
    return (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(a1, &v9);
  }
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>(IPC::Encoder *a1, int *a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&,0ul>(a1, a2, a3);
  }
  if (a2[4])
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&,0ul>(a1, a2, a3);
  }
  uint64_t v4 = a2[3];
  char v5 = *(const void **)a2;

  return (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v5, v4);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&,0ul>(IPC::Encoder *result, int *a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (a2[4] == 1)
    {
      return (IPC::Encoder *)IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode(result, a2);
    }
    else
    {
      uint64_t v3 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>> const&>(v3);
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>> const&>(uint64_t *result, uint64_t a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (*(unsigned char *)(a2 + 24))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!*(unsigned char *)(a2 + 24))
      {
        unint64_t result = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
        return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>(result, a2);
      }
    }
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>(result, a2);
  }
  if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 16);
  unint64_t v3 = a1[2];
  if (v3 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v3) = v2;
    a1[2] = v3 + 1;
  }
  return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>(a1, (_DWORD *)a2, v2);
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&,0ul>(a1, a2, a3);
  }
  if (a2[4])
  {
    a1 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&,0ul>(a1, a2, a3);
  }
  uint64_t v4 = a2[3];
  char v5 = *(const void **)a2;

  return IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, v5, v4);
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&,0ul>(uint64_t *result, _DWORD *a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (a2[4] == 1)
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode(result, a2);
    }
    else
    {
      uint64_t v3 = std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(v3);
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16))
  {
    char v7 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v7);
    if (*(unsigned char *)(a2 + 16))
    {
      return IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
    }
    else
    {
      char v5 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v5, v6);
    }
  }
  else
  {
    char v8 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v8);
  }
}

unint64_t IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = 8 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, v6++);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void *IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(void *result, uint64_t a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (*(unsigned char *)(a2 + 16))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!*(unsigned char *)(a2 + 16))
      {
        unint64_t result = (void *)std::__throw_bad_optional_access[abi:sn180100]();
        return IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(result, a2);
      }
    }
    return IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(result, a2);
  }
  if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

void *IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(void *result, uint64_t a2)
{
  unint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  uint64_t v4 = result[2];
  unint64_t v5 = *result + v4;
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!v3) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v9 = v8 + v4;
  unint64_t v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= result[1])
  {
    *(void *)(*result + v9) = v3;
    result[2] = v10;
    uint64_t v3 = *(unsigned int *)(a2 + 12);
    goto LABEL_8;
  }
  result[1] = 0;
  if (!v3) {
    return result;
  }
LABEL_9:
  uint64_t v12 = *(void **)a2;
  uint64_t v13 = 8 * v3;
  do
  {
    unint64_t result = IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(v2, v12++);
    v13 -= 8;
  }
  while (v13);
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19895C394(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    uint64_t v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  __int16 v18 = 0;
  uint64_t v19 = 0;
  if (result >= 0x20000)
  {
    while (1)
    {
      uint64_t v14 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
      uint64_t v16 = v14;
      unsigned int v17 = v5;
      if (!(_BYTE)v5) {
        break;
      }
      if (HIDWORD(v19) == v19)
      {
        uint64_t v12 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v18, HIDWORD(v19) + 1, (unint64_t)&v16);
        *((void *)v18 + HIDWORD(v19)) = *v12;
      }
      else
      {
        *((void *)v18 + HIDWORD(v19)) = v14;
      }
      unint64_t v13 = ++HIDWORD(v19);
      if (!--v6)
      {
        WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v18, v13);
        *(void *)a2 = v18;
        uint64_t v15 = v19;
        __int16 v18 = 0;
        uint64_t v19 = 0;
        *(void *)(a2 + 8) = v15;
        goto LABEL_14;
      }
    }
  }
  else
  {
    if (!result)
    {
      int v9 = 0;
      int v11 = 0;
      unint64_t v10 = 0;
LABEL_13:
      __int16 v18 = 0;
      *(void *)a2 = v10;
      HIDWORD(v19) = 0;
      *(_DWORD *)(a2 + 8) = v11;
      *(_DWORD *)(a2 + 12) = v9;
LABEL_14:
      *(unsigned char *)(a2 + 16) = 1;
      goto LABEL_21;
    }
    LODWORD(v19) = result;
    __int16 v18 = (WTF *)WTF::fastMalloc((WTF *)(8 * result));
    while (1)
    {
      uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
      uint64_t v16 = v7;
      unsigned int v17 = v5;
      if (!(_BYTE)v5) {
        break;
      }
      if (HIDWORD(v19) == v19)
      {
        unint64_t v8 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v18, HIDWORD(v19) + 1, (unint64_t)&v16);
        *((void *)v18 + HIDWORD(v19)) = *v8;
      }
      else
      {
        *((void *)v18 + HIDWORD(v19)) = v7;
      }
      int v9 = ++HIDWORD(v19);
      if (!--v6)
      {
        unint64_t v10 = v18;
        int v11 = v19;
        goto LABEL_13;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
LABEL_21:
  unint64_t result = (unint64_t)v18;
  if (v18)
  {
    __int16 v18 = 0;
    LODWORD(v19) = 0;
    return WTF::fastFree((WTF *)result, v5);
  }
  return result;
}

void sub_19895C55C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<false,std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    unint64_t v6 = *(char **)a2;
    uint64_t v7 = 2 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<std::optional<WebKit::WebGPU::SamplerBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::SamplerBindingLayout> const&>(a1, v6);
      v6 += 2;
      v7 -= 2;
    }
    while (v7);
  }
  return result;
}

void *IPC::VectorArgumentCoder<false,std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  uint64_t v4 = result[2];
  unint64_t v5 = *result + v4;
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!v3) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v9 = v8 + v4;
  unint64_t v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= result[1])
  {
    *(void *)(*result + v9) = v3;
    result[2] = v10;
    uint64_t v3 = *(unsigned int *)(a2 + 12);
    goto LABEL_8;
  }
  result[1] = 0;
  if (!v3) {
    return result;
  }
LABEL_9:
  uint64_t v12 = *(unsigned char **)a2;
  uint64_t v13 = 2 * v3;
  do
  {
    unint64_t result = IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(v2, v12);
    v12 += 2;
    v13 -= 2;
  }
  while (v13);
  return result;
}

unint64_t WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 2 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 31)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = *(unsigned int *)(result + 12);
      unint64_t result = WTF::fastMalloc((WTF *)(2 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v5)
      {
        uint64_t v7 = 2 * v5;
        unint64_t v8 = v4;
        do
        {
          __int16 v9 = *(_WORD *)v8;
          unint64_t v8 = (WTF *)((char *)v8 + 2);
          *(_WORD *)unint64_t result = v9;
          result += 2;
          v7 -= 2;
        }
        while (v7);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)uint64_t v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::WebGPU::TextureFormat>,void>::decode<IPC::Decoder>(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      unsigned int v17 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        a1 = v17;
        uint64_t v12 = *v17;
        unint64_t v11 = v17[1];
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_11;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = (uint64_t)(v4 + 1);
  if (!v2)
  {
    unint64_t v11 = v1;
    uint64_t v12 = 0;
LABEL_11:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v14 = a1[3];
    if (v14)
    {
      uint64_t v16 = a1;
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        a1 = v16;
        uint64_t v2 = *v16;
        unint64_t v1 = v16[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_12;
  }
  unsigned int v5 = *v4;
  if (v5 < 2)
  {
    if (v5)
    {
      unsigned __int16 v6 = IPC::Decoder::decode<WebCore::WebGPU::TextureFormat>(a1);
      int v7 = v6;
      int v8 = (v6 > 0xFFu) << 16;
      if ((v6 & 0xFF00) == 0) {
        int v7 = 0;
      }
      int v9 = 256;
    }
    else
    {
      int v7 = 0;
      int v9 = 0;
      int v8 = 0x10000;
    }
    return v7 | v8 | v9;
  }
LABEL_12:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v15 = a1[3];
  if (v15 && v1) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v2);
  }
  int v8 = 0;
  int v7 = 0;
  int v9 = 0;
  return v7 | v8 | v9;
}

unint64_t IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 96 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::RenderPassColorAttachment> const&>(a1, v6);
      v6 += 96;
      v7 -= 96;
    }
    while (v7);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::RenderPassColorAttachment> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 88))
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (*(unsigned char *)(a2 + 88))
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::RenderPassColorAttachment,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment> const&>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 32))
  {
    char v7 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v7);
    if (*(unsigned char *)(a2 + 32))
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::RenderPassDepthStencilAttachment,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v5 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(v5, v6);
    }
  }
  else
  {
    char v8 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v8);
  }
}

uint64_t IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (*(unsigned char *)(a2 + 8))
    {
      return IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

uint64_t *IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  uint64_t v4 = result[2];
  unint64_t v5 = *result + v4;
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!v3) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v9 = v8 + v4;
  unint64_t v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= result[1])
  {
    *(void *)(*result + v9) = v3;
    result[2] = v10;
    uint64_t v3 = *(unsigned int *)(a2 + 12);
    goto LABEL_8;
  }
  result[1] = 0;
  if (!v3) {
    return result;
  }
LABEL_9:
  uint64_t v12 = *(void *)a2;
  uint64_t v13 = 96 * v3;
  do
  {
    unint64_t result = IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::RenderPassColorAttachment> const&>(v2, v12);
    v12 += 96;
    v13 -= 96;
  }
  while (v13);
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::RenderPassColorAttachment> const&>(uint64_t *result, uint64_t a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (*(unsigned char *)(a2 + 88))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!*(unsigned char *)(a2 + 88))
      {
        uint64_t v4 = std::__throw_bad_optional_access[abi:sn180100]();
        return (uint64_t *)IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment> const&>(v4);
      }
    }
    return IPC::ArgumentCoder<WebKit::WebGPU::RenderPassColorAttachment,void>::encode(result, a2);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

void *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment> const&>(void *result, uint64_t a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (*(unsigned char *)(a2 + 32))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!*(unsigned char *)(a2 + 32))
      {
        uint64_t v4 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
        return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(v4, v5);
      }
    }
    return IPC::ArgumentCoder<WebKit::WebGPU::RenderPassDepthStencilAttachment,void>::encode(result, a2);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

void *IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(void *result, uint64_t a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (*(unsigned char *)(a2 + 8))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!*(unsigned char *)(a2 + 8))
      {
        uint64_t v4 = std::__throw_bad_optional_access[abi:sn180100]();
        return (void *)IPC::Decoder::decode<std::optional<WebKit::WebGPU::RenderPassColorAttachment>>(v4, v5);
      }
    }
    return IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(result, (void *)a2);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::WebGPU::RenderPassColorAttachment>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v24 = a2[3];
    if (v24)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
        uint64_t v23 = *a2;
        uint64_t v22 = a2[1];
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
      }
    }
    goto LABEL_20;
  }
  unint64_t v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v22 = v6;
    uint64_t v23 = 0;
LABEL_20:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v25 = a2[3];
    if (v25)
    {
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v23, v22);
        uint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_21;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_21:
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v6) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
    goto LABEL_59;
  }
  if (!v9)
  {
    LOBYTE(v41[0]) = 0;
    char v46 = 0;
    uint64_t result = std::__optional_move_base<WebKit::WebGPU::RenderPassColorAttachment,false>::__optional_move_base[abi:sn180100](a1, v41);
    *(unsigned char *)(a1 + 96) = 1;
    if (v46 && v44 && v43 != -1) {
      goto LABEL_47;
    }
    goto LABEL_48;
  }
  uint64_t v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  char v12 = v11;
  uint64_t v13 = IPC::Decoder::decode<std::optional<unsigned int>>((IPC::Decoder *)a2);
  char v15 = v14;
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v57, a2);
  unint64_t v16 = a2[1];
  uint64_t v17 = *a2;
  unint64_t v18 = a2[2] - *a2;
  if (v16 <= v18)
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v28 = a2[3];
    if (v28)
    {
      if (v16)
      {
        (*(void (**)(uint64_t))(*(void *)v28 + 16))(v28);
        uint64_t v27 = *a2;
        uint64_t v26 = a2[1];
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
      }
    }
    goto LABEL_25;
  }
  uint64_t v19 = (unsigned __int8 *)(v17 + v18);
  a2[2] = (uint64_t)(v19 + 1);
  if (!v17)
  {
    uint64_t v26 = v16;
    uint64_t v27 = 0;
LABEL_25:
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v29 = a2[3];
    if (v29)
    {
      if (v26)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v27, v26);
        uint64_t v17 = *a2;
        unint64_t v16 = a2[1];
      }
      else
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
      }
    }
    goto LABEL_26;
  }
  unsigned int v20 = *v19;
  if (v20 >= 2)
  {
LABEL_26:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v30 = a2[3];
    if (v30 && v16) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v17);
    }
    goto LABEL_27;
  }
  if (!v20)
  {
    v47[0] = 0;
    char v49 = 0;
    std::__optional_move_base<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,false>::__optional_move_base[abi:sn180100](v53, (uint64_t)v47);
    goto LABEL_16;
  }
  IPC::Decoder::decode<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>((IPC::Decoder *)a2, v47);
  if (!v49)
  {
LABEL_27:
    v53[0] = 0;
    char v56 = 0;
    goto LABEL_28;
  }
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v53, (uint64_t)v47);
  char v55 = 1;
LABEL_16:
  char v56 = 1;
  if (v49 && v48 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIdLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU9ColorDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v48])(&v60, v47);
  }
LABEL_28:
  if (!v56)
  {
    uint64_t v36 = *a2;
    uint64_t v37 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v38 = a2[3];
    if (v38)
    {
      if (v37) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v36);
      }
    }
  }
  unsigned __int16 v31 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>(a2);
  unsigned __int16 v32 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>(a2);
  if (!*a2)
  {
    LOBYTE(v41[0]) = 0;
    char v46 = 0;
    goto LABEL_39;
  }
  if (v12)
  {
    *(void *)uint64_t v47 = v10;
    if (v15)
    {
      *(_DWORD *)&v47[8] = v13;
      v47[12] = BYTE4(v13);
      if (v59)
      {
        *(void *)&v47[16] = v57;
        v47[24] = v58;
        if (v56)
        {
          unsigned __int16 v33 = v32;
          std::__optional_move_base<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,false>::__optional_move_base[abi:sn180100](&v48, (uint64_t)v53);
          if (v31 > 0xFFu)
          {
            LOBYTE(v52) = v31;
            if (v33 > 0xFFu)
            {
              HIBYTE(v52) = v33;
              v41[0] = *(_OWORD *)v47;
              *(long long *)((char *)v41 + 9) = *(_OWORD *)&v47[9];
              std::__optional_move_base<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,false>::__optional_move_base[abi:sn180100](v42, (uint64_t)&v48);
              __int16 v45 = v52;
              char v46 = 1;
              if (v51 && v50 != -1) {
                ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIdLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU9ColorDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v50])(&v60, &v48);
              }
LABEL_39:
              if (v56 && v55 && v54 != -1) {
                ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIdLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU9ColorDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v54])(v47, v53);
              }
              if (!v46)
              {
                uint64_t v39 = *a2;
                uint64_t v40 = a2[1];
                *a2 = 0;
                a2[1] = 0;
                uint64_t result = a2[3];
                if (!result
                  || !v40
                  || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v39),
                      !v46))
                {
LABEL_59:
                  *(unsigned char *)a1 = 0;
                  *(unsigned char *)(a1 + 96) = 0;
                  goto LABEL_48;
                }
              }
              *(_OWORD *)a1 = v41[0];
              *(_OWORD *)(a1 + 9) = *(long long *)((char *)v41 + 9);
              uint64_t result = (uint64_t)std::__optional_move_base<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a1 + 32), (uint64_t)v42);
              *(_WORD *)(a1 + 80) = v45;
              *(unsigned char *)(a1 + 88) = 1;
              *(unsigned char *)(a1 + 96) = 1;
              if (v46 && v44 && v43 != -1) {
LABEL_47:
              }
                uint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIdLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU9ColorDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v43])(v47, v42);
LABEL_48:
              if (*(unsigned char *)(a1 + 96)) {
                return result;
              }
              goto LABEL_51;
            }
          }
        }
      }
    }
  }
  __break(1u);
LABEL_51:
  uint64_t v34 = *a2;
  uint64_t v35 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result)
  {
    if (v35) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v34);
    }
  }
  return result;
}

void sub_19895D370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, char a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,int a30,char a31,uint64_t a32,uint64_t a33,int a34,int a35,char a36)
{
  if (a21 && a19 && a17 != -1) {
    ((void (*)(__int16 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIdLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU9ColorDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[a17])(&a23, &a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_move_base<WebKit::WebGPU::RenderPassColorAttachment,false>::__optional_move_base[abi:sn180100](uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 88) = 0;
  if (*((unsigned char *)a2 + 88))
  {
    long long v4 = *a2;
    *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
    *(_OWORD *)a1 = v4;
    std::__optional_move_base<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a1 + 32), (uint64_t)(a2 + 2));
    *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
    *(unsigned char *)(a1 + 88) = 1;
  }
  return a1;
}

void sub_19895D524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 88) && *(unsigned char *)(v13 + 72))
  {
    uint64_t v16 = *(unsigned int *)(v13 + 64);
    if (v16 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIdLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU9ColorDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v16])(&a13, v14);
    }
    *(_DWORD *)(v13 + 64) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::WebGPU::RenderPassColorAttachment>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = (long long *)WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t result = std::__optional_move_base<WebKit::WebGPU::RenderPassColorAttachment,false>::__optional_move_base[abi:sn180100](*(void *)a1 + 96 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 96 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x2AAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x19895D718);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = *(void *)a1 + 96 * *(unsigned int *)(a1 + 12);
    int v5 = 96 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(96 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFE0) / 0x60;
    *(void *)a1 = v6;
    WTF::VectorMover<false,std::optional<WebKit::WebGPU::RenderPassColorAttachment>>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,std::optional<WebKit::WebGPU::RenderPassColorAttachment>>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    uint64_t v7 = result;
    do
    {
      uint64_t result = std::__optional_move_base<WebKit::WebGPU::RenderPassColorAttachment,false>::__optional_move_base[abi:sn180100](a3, (long long *)v7);
      if (*(unsigned char *)(v7 + 88) && *(unsigned char *)(v7 + 72))
      {
        uint64_t v8 = *(unsigned int *)(v7 + 64);
        if (v8 != -1) {
          uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIdLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU9ColorDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v8])(&v9, v7 + 32);
        }
        *(_DWORD *)(v7 + 64) = -1;
      }
      a3 += 96;
      v7 += 96;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96) && *(unsigned char *)(a1 + 88) && *(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 64);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIdLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU9ColorDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v2])(&v4, a1 + 32);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::WebGPU::PrimitiveState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::PrimitiveState> const&>(IPC::Encoder *a1, char *a2)
{
  if (a2[6])
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (a2[6])
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::PrimitiveState,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::WebGPU::DepthStencilState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::DepthStencilState> const&>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

unint64_t IPC::ArgumentCoder<std::optional<WebKit::WebGPU::DepthStencilState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::DepthStencilState> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 44))
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (*(unsigned char *)(a2 + 44))
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::DepthStencilState,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::WebGPU::MultisampleState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::MultisampleState> const&>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::WebGPU::MultisampleState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::MultisampleState> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 12))
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (*(unsigned char *)(a2 + 12))
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::MultisampleState,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::WebGPU::FragmentState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::FragmentState> const&>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

unint64_t IPC::ArgumentCoder<std::optional<WebKit::WebGPU::FragmentState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::FragmentState> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 56))
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (*(unsigned char *)(a2 + 56))
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::FragmentState,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::WebGPU::PrimitiveState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::PrimitiveState> const&>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

void *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::PrimitiveState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::PrimitiveState> const&>(void *result, unsigned char *a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (a2[6])
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!a2[6])
      {
        uint64_t v4 = std::__throw_bad_optional_access[abi:sn180100]();
        return (void *)IPC::ArgumentCoder<std::optional<WebKit::WebGPU::DepthStencilState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::DepthStencilState> const&>(v4);
      }
    }
    return IPC::ArgumentCoder<WebKit::WebGPU::PrimitiveState,void>::encode(result, a2);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

void *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::DepthStencilState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::DepthStencilState> const&>(void *result, uint64_t a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (*(unsigned char *)(a2 + 44))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!*(unsigned char *)(a2 + 44))
      {
        uint64_t v4 = std::__throw_bad_optional_access[abi:sn180100]();
        return (void *)IPC::ArgumentCoder<std::optional<WebKit::WebGPU::MultisampleState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::MultisampleState> const&>(v4);
      }
    }
    return IPC::ArgumentCoder<WebKit::WebGPU::DepthStencilState,void>::encode(result, a2);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::MultisampleState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::MultisampleState> const&>(uint64_t *result, uint64_t a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (*(unsigned char *)(a2 + 12))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!*(unsigned char *)(a2 + 12))
      {
        uint64_t v4 = std::__throw_bad_optional_access[abi:sn180100]();
        return (uint64_t *)IPC::ArgumentCoder<std::optional<WebKit::WebGPU::FragmentState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::FragmentState> const&>(v4);
      }
    }
    return IPC::ArgumentCoder<WebKit::WebGPU::MultisampleState,void>::encode(result, a2);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::FragmentState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::FragmentState> const&>(IPC::Decoder *result, uint64_t a2)
{
  unint64_t v3 = *((void *)result + 1);
  unint64_t v2 = *((void *)result + 2);
  if (*(unsigned char *)(a2 + 56))
  {
    if (v2 >= v3)
    {
      *((void *)result + 1) = 0;
    }
    else
    {
      *(unsigned char *)(*(void *)result + v2) = 1;
      *((void *)result + 2) = v2 + 1;
      if (!*(unsigned char *)(a2 + 56))
      {
        uint64_t v4 = std::__throw_bad_optional_access[abi:sn180100]();
        return (IPC::Decoder *)IPC::ArgumentCoder<std::optional<WebCore::WebGPU::PowerPreference>,void>::encode<IPC::Encoder,std::optional<WebCore::WebGPU::PowerPreference> const&>(v4);
      }
    }
    return IPC::ArgumentCoder<WebKit::WebGPU::FragmentState,void>::encode(result, (void *)a2);
  }
  else if (v2 >= v3)
  {
    *((void *)result + 1) = 0;
  }
  else
  {
    *(unsigned char *)(*(void *)result + v2) = 0;
    *((void *)result + 2) = v2 + 1;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::optional<WebCore::WebGPU::PowerPreference>,void>::encode<IPC::Encoder,std::optional<WebCore::WebGPU::PowerPreference> const&>(IPC::Encoder *a1, char *a2)
{
  if (!a2[1])
  {
    char v9 = 0;
    uint64_t v4 = &v9;
    return IPC::Encoder::operator<<<BOOL>(a1, v4);
  }
  char v8 = 1;
  IPC::Encoder::operator<<<BOOL>(a1, &v8);
  if (a2[1])
  {
    char v10 = *a2;
    uint64_t v4 = &v10;
    return IPC::Encoder::operator<<<BOOL>(a1, v4);
  }
  char v6 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
  return IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,WebKit::WebGPU::ShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::KeyValuePair<WTF::String,WebKit::WebGPU::ShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v6, v7);
}

unint64_t IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,WebKit::WebGPU::ShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::KeyValuePair<WTF::String,WebKit::WebGPU::ShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    char v6 = *(uint64_t **)a2;
    uint64_t v7 = &v6[2 * v5];
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v6);
      unint64_t result = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, v6 + 1);
      v6 += 2;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,WebKit::WebGPU::ShaderModuleCompilationHint>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v12);
  if (v13)
  {
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a2);
    if (!*(void *)a2)
    {
      uint64_t v6 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v7 = *((void *)a2 + 3);
      if (v7 && v6) {
        (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0);
      }
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 16) = 0;
      if (v13)
      {
        char v8 = v12;
        char v12 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
      goto LABEL_15;
    }
    if ((_BYTE)v5 && v13)
    {
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = result;
      *(unsigned char *)(a1 + 16) = 1;
      return result;
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
LABEL_15:
  uint64_t v9 = *(void *)a2;
  uint64_t v10 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v9);
  }
  return result;
}

void sub_19895DE20(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

IPC::Decoder *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *result@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = *((void *)result + 1);
  uint64_t v3 = *(void *)result;
  unint64_t v4 = *((void *)result + 2) - *(void *)result;
  if (v2 <= v4)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v9 = *((void *)result + 3);
    if (v9)
    {
      uint64_t v10 = result;
      char v12 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v3, v2);
        uint64_t result = v10;
        a2 = v12;
        uint64_t v8 = *(void *)v10;
        unint64_t v7 = *((void *)v10 + 1);
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_9;
  }
  uint64_t v5 = (unsigned __int8 *)(v3 + v4);
  *((void *)result + 2) = v5 + 1;
  if (!v3)
  {
    unint64_t v7 = v2;
    uint64_t v8 = 0;
LABEL_9:
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)result + 3);
    if (result && v7)
    {
      BOOL v11 = a2;
      uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v8);
      a2 = v11;
    }
    goto LABEL_4;
  }
  unint64_t v6 = *v5;
  if (v6 >= 2)
  {
LABEL_4:
    *a2 = 0;
    a2[24] = 0;
    return result;
  }

  return IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,void>::decode<IPC::Decoder>(result, v6, (uint64_t)a2);
}

IPC::Decoder *IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a2)
  {
    uint64_t result = (IPC::Decoder *)IPC::Decoder::decode<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(result, v6);
    char v5 = v7;
    if (v7)
    {
      *(void *)a3 = v6[0];
      *(void *)(a3 + 8) = v6[1];
      *(_DWORD *)(a3 + 16) = 0;
      char v5 = 1;
      goto LABEL_9;
    }
LABEL_8:
    *(unsigned char *)a3 = 0;
    goto LABEL_9;
  }
  if (a2 != 1
    || (uint64_t result = (IPC::Decoder *)IPC::Decoder::decode<WebKit::WebGPU::Extent3DDict>((uint64_t *)result),
        (v4 & 0xFF00000000) == 0))
  {
    char v5 = 0;
    goto LABEL_8;
  }
  *(void *)a3 = result;
  *(_DWORD *)(a3 + 8) = v4;
  char v5 = 1;
  *(_DWORD *)(a3 + 16) = 1;
LABEL_9:
  *(unsigned char *)(a3 + 24) = v5;
  return result;
}

void *IPC::Decoder::decode<WebKit::WebGPU::Extent3DDict>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::decode(a1);
  if ((v3 & 0xFF00000000) == 0)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 40 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<std::optional<WebKit::WebGPU::VertexBufferLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::VertexBufferLayout> const&>(a1, v6);
      v6 += 40;
      v7 -= 40;
    }
    while (v7);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::optional<WebKit::WebGPU::VertexBufferLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::VertexBufferLayout> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 32))
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (*(unsigned char *)(a2 + 32))
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::VertexBufferLayout,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

WTF *IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(WTF *result, uint64_t a2)
{
  unint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  uint64_t v4 = *((void *)result + 2);
  unint64_t v5 = *(void *)result + v4;
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!v3) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v9 = v8 + v4;
  unint64_t v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= *((void *)result + 1))
  {
    *(void *)(*(void *)result + v9) = v3;
    *((void *)result + 2) = v10;
    uint64_t v3 = *(unsigned int *)(a2 + 12);
    goto LABEL_8;
  }
  *((void *)result + 1) = 0;
  if (!v3) {
    return result;
  }
LABEL_9:
  uint64_t v12 = *(void *)a2;
  uint64_t v13 = 40 * v3;
  do
  {
    unint64_t result = IPC::ArgumentCoder<std::optional<WebKit::WebGPU::VertexBufferLayout>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::VertexBufferLayout> const&>(v2, v12);
    v12 += 40;
    v13 -= 40;
  }
  while (v13);
  return result;
}

WTF *IPC::ArgumentCoder<std::optional<WebKit::WebGPU::VertexBufferLayout>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::VertexBufferLayout> const&>(WTF *result, uint64_t a2)
{
  unint64_t v2 = result;
  unint64_t v4 = *((void *)result + 1);
  unint64_t v3 = *((void *)result + 2);
  if (!*(unsigned char *)(a2 + 32))
  {
    if (v3 >= v4)
    {
      *((void *)result + 1) = 0;
    }
    else
    {
      *(unsigned char *)(*(void *)result + v3) = 0;
      *((void *)result + 2) = v3 + 1;
    }
    return result;
  }
  if (v3 >= v4)
  {
    *((void *)result + 1) = 0;
  }
  else
  {
    *(unsigned char *)(*(void *)result + v3) = 1;
    *((void *)result + 2) = v3 + 1;
    if (!*(unsigned char *)(a2 + 32))
    {
      uint64_t v23 = (WTF *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::Decoder::decode<std::optional<WebKit::WebGPU::VertexBufferLayout>>(v23, v24);
    }
  }
  unint64_t result = (WTF *)IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(result, (void *)a2);
  unint64_t v6 = *((void *)v2 + 2);
  if (v6 >= *((void *)v2 + 1))
  {
    *((void *)v2 + 1) = 0;
  }
  else
  {
    *(unsigned char *)(*(void *)v2 + v6++) = *(unsigned char *)(a2 + 8);
    *((void *)v2 + 2) = v6;
  }
  uint64_t v7 = *(unsigned int *)(a2 + 28);
  unint64_t v8 = *(void *)v2 + v6;
  unint64_t v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v10 = v9 >= v8;
  unint64_t v11 = v9 - v8;
  if (v10)
  {
    unint64_t v12 = v11 + v6;
    unint64_t v13 = v11 + v6 + 8;
    if (v12 > 0xFFFFFFFFFFFFFFF7 || v13 > *((void *)v2 + 1))
    {
      *((void *)v2 + 1) = 0;
      if (!v7) {
        return result;
      }
      goto LABEL_14;
    }
    *(void *)(*(void *)v2 + v12) = v7;
    *((void *)v2 + 2) = v13;
    uint64_t v7 = *(unsigned int *)(a2 + 28);
    unint64_t v6 = v13;
  }
  if (!v7) {
    return result;
  }
LABEL_14:
  uint64_t v15 = *(void *)(a2 + 16) + 8;
  uint64_t v16 = 24 * v7;
  do
  {
    if (v6 >= *((void *)v2 + 1))
    {
      *((void *)v2 + 1) = 0;
    }
    else
    {
      *(unsigned char *)(*(void *)v2 + v6) = *(unsigned char *)(v15 - 8);
      *((void *)v2 + 2) = v6 + 1;
    }
    unint64_t result = (WTF *)IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(v2, (void *)v15);
    unint64_t v6 = *((void *)v2 + 2);
    unint64_t v17 = *(void *)v2 + v6;
    unint64_t v18 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    BOOL v10 = v18 >= v17;
    unint64_t v19 = v18 - v17;
    if (v10)
    {
      unint64_t v20 = v19 + v6;
      unint64_t v21 = v19 + v6 + 4;
      if (v20 > 0xFFFFFFFFFFFFFFFBLL || v21 > *((void *)v2 + 1))
      {
        *((void *)v2 + 1) = 0;
      }
      else
      {
        *(_DWORD *)(*(void *)v2 + v20) = *(_DWORD *)(v15 + 8);
        *((void *)v2 + 2) = v21;
        unint64_t v6 = v21;
      }
    }
    v15 += 24;
    v16 -= 24;
  }
  while (v16);
  return result;
}

WTF *IPC::Decoder::decode<std::optional<WebKit::WebGPU::VertexBufferLayout>>(WTF *result, unint64_t *a2)
{
  unint64_t v3 = result;
  unint64_t v4 = a2[2];
  unint64_t v5 = (char *)*a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - (void)v5;
  if (v6 <= v7)
  {
    unint64_t v36 = 0;
    uint64_t v37 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v38 = a2[3];
    if (v38)
    {
      if (v6)
      {
        (*(void (**)(unint64_t))(*(void *)v38 + 16))(v38);
        uint64_t v37 = (char *)*a2;
        unint64_t v36 = a2[1];
      }
      else
      {
        unint64_t v36 = 0;
        uint64_t v37 = 0;
      }
    }
    goto LABEL_42;
  }
  unint64_t v8 = &v5[v7];
  uint64_t v9 = (uint64_t)&v5[v7 + 1];
  a2[2] = v9;
  if (!v5)
  {
    unint64_t v36 = v6;
    uint64_t v37 = 0;
LABEL_42:
    unint64_t v6 = 0;
    unint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v39 = a2[3];
    if (v39)
    {
      if (v36)
      {
        (*(void (**)(unint64_t, char *, unint64_t))(*(void *)v39 + 16))(v39, v37, v36);
        unint64_t v5 = (char *)*a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        unint64_t v5 = 0;
      }
    }
    goto LABEL_68;
  }
  unsigned int v10 = *v8;
  if (v10 < 2)
  {
    if (!v10)
    {
      char v34 = 0;
      *(unsigned char *)unint64_t result = 0;
      goto LABEL_40;
    }
    unint64_t v11 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v5;
    BOOL v13 = v6 < v11 || v6 - v11 < 8;
    if (v13)
    {
      uint64_t v15 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v40 = a2[3];
      if (v40)
      {
        (*(void (**)(unint64_t))(*(void *)v40 + 16))(v40);
        uint64_t v15 = 0;
        uint64_t v41 = (char *)*a2;
        unint64_t v42 = a2[1];
        unint64_t v43 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v43)
        {
          if (v42)
          {
            (*(void (**)(unint64_t, char *))(*(void *)v43 + 16))(v43, v41);
            uint64_t v15 = 0;
          }
        }
      }
    }
    else
    {
      uint64_t v14 = &v5[v11];
      uint64_t v15 = *(void *)v14;
      a2[2] = (unint64_t)(v14 + 8);
    }
    LOWORD(v66) = 0;
    IPC::Decoder::operator>><unsigned char>(a2, &v66);
    char v16 = v66;
    if (BYTE1(v66)) {
      BOOL v17 = v66 > 1u;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v17;
    if (v18 == 1)
    {
      char v44 = (char *)*a2;
      unint64_t v45 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v46 = a2[3];
      if (v46 && v45) {
        (*(void (**)(unint64_t, char *))(*(void *)v46 + 16))(v46, v44);
      }
      char v16 = 0;
    }
    unint64_t v19 = IPC::Decoder::decode<unsigned long long>(a2);
    if (!v21) {
      goto LABEL_66;
    }
    unint64_t v22 = v19;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    if (v19 < 0xAAAA)
    {
      if (!v19)
      {
        unint64_t v5 = (char *)*a2;
        if (*a2)
        {
          unint64_t result = 0;
          unsigned int v33 = 0;
          int v32 = 0;
LABEL_36:
          int v35 = 0;
          if (v13) {
            goto LABEL_74;
          }
LABEL_37:
          if (v18 || v35) {
            goto LABEL_74;
          }
          *(void *)unint64_t v3 = v15;
          *((unsigned char *)v3 + 8) = v16;
          *((void *)v3 + 2) = result;
          char v34 = 1;
          *((_DWORD *)v3 + 6) = v33;
          *((_DWORD *)v3 + 7) = v32;
LABEL_40:
          *((unsigned char *)v3 + 32) = v34;
          *((unsigned char *)v3 + 40) = 1;
          return result;
        }
LABEL_67:
        unint64_t v6 = a2[1];
        goto LABEL_68;
      }
      unsigned int v23 = 24 * v19;
      uint64_t v24 = (WTF *)WTF::fastMalloc((WTF *)(24 * v19));
      LODWORD(v70) = v23 / 0x18;
      uint64_t v69 = v24;
      while (1)
      {
        IPC::Decoder::decode<WebKit::WebGPU::VertexAttribute>((uint64_t)&v66, a2);
        if (!v68) {
          break;
        }
        int v25 = HIDWORD(v70);
        if (HIDWORD(v70) == v70)
        {
          unint64_t v26 = WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v69, HIDWORD(v70) + 1, (unint64_t)&v66);
          int v27 = HIDWORD(v70);
          unint64_t result = v69;
          uint64_t v28 = (char *)v69 + 24 * HIDWORD(v70);
          long long v29 = *(_OWORD *)v26;
          *((void *)v28 + 2) = *(void *)(v26 + 16);
          *(_OWORD *)uint64_t v28 = v29;
          int v25 = v27;
        }
        else
        {
          unint64_t result = v69;
          uint64_t v30 = (char *)v69 + 24 * HIDWORD(v70);
          long long v31 = v66;
          *((void *)v30 + 2) = v67;
          *(_OWORD *)uint64_t v30 = v31;
        }
        int v32 = v25 + 1;
        HIDWORD(v70) = v25 + 1;
        if (!--v22)
        {
          unsigned int v33 = v70;
          goto LABEL_30;
        }
      }
LABEL_64:
      char v60 = v69;
      if (v69)
      {
        uint64_t v69 = 0;
        LODWORD(v70) = 0;
        WTF::fastFree(v60, v5);
      }
LABEL_66:
      unint64_t v5 = 0;
      unint64_t v62 = *a2;
      unint64_t v61 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v63 = a2[3];
      if (v63)
      {
        if (!v61)
        {
LABEL_82:
          unint64_t v5 = 0;
          goto LABEL_67;
        }
        (*(void (**)(unint64_t, unint64_t))(*(void *)v63 + 16))(v63, v62);
        unint64_t v5 = (char *)*a2;
        if (*a2)
        {
          unint64_t result = 0;
          int v35 = 1;
          if (v13)
          {
LABEL_74:
            __break(1u);
LABEL_75:
            if (v20) {
              return (WTF *)(*(uint64_t (**)(WTF *, char *))(*(void *)result + 16))(result, v5);
            }
            return result;
          }
          goto LABEL_37;
        }
      }
      goto LABEL_67;
    }
    do
    {
      IPC::Decoder::decode<WebKit::WebGPU::VertexAttribute>((uint64_t)&v66, a2);
      if (!v68) {
        goto LABEL_64;
      }
      int v47 = HIDWORD(v70);
      if (HIDWORD(v70) == v70)
      {
        unint64_t v48 = WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v69, HIDWORD(v70) + 1, (unint64_t)&v66);
        int v49 = HIDWORD(v70);
        unint64_t result = v69;
        int v50 = (char *)v69 + 24 * HIDWORD(v70);
        long long v51 = *(_OWORD *)v48;
        *((void *)v50 + 2) = *(void *)(v48 + 16);
        *(_OWORD *)int v50 = v51;
        int v47 = v49;
      }
      else
      {
        unint64_t result = v69;
        __int16 v52 = (char *)v69 + 24 * HIDWORD(v70);
        long long v53 = v66;
        *((void *)v52 + 2) = v67;
        *(_OWORD *)__int16 v52 = v53;
      }
      uint64_t v54 = (v47 + 1);
      HIDWORD(v70) = v47 + 1;
      --v22;
    }
    while (v22);
    unsigned int v33 = v70;
    if (v70 > v54)
    {
      int v65 = result;
      if (!v54) {
        goto LABEL_79;
      }
      uint64_t v55 = v54;
      if (v54 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return result;
      }
      unsigned int v56 = 24 * v54;
      unint64_t result = (WTF *)WTF::fastMalloc((WTF *)(24 * v54));
      unsigned int v33 = v56 / 0x18;
      LODWORD(v70) = v56 / 0x18;
      uint64_t v69 = result;
      if (result == v65)
      {
LABEL_79:
        uint64_t v69 = 0;
        LODWORD(v70) = 0;
      }
      else
      {
        uint64_t v57 = 0;
        do
        {
          char v58 = (char *)result + v57;
          long long v59 = *(_OWORD *)((char *)v65 + v57);
          *((void *)v58 + 2) = *(void *)((char *)v65 + v57 + 16);
          *(_OWORD *)char v58 = v59;
          v57 += 24;
        }
        while (24 * v55 != v57);
        if (!v65) {
          goto LABEL_81;
        }
      }
      WTF::fastFree(v65, v5);
      unint64_t result = v69;
      unsigned int v33 = v70;
    }
LABEL_81:
    int v32 = HIDWORD(v70);
LABEL_30:
    if (*a2) {
      goto LABEL_36;
    }
    if (!result) {
      goto LABEL_82;
    }
    WTF::fastFree(result, v5);
    unint64_t v5 = (char *)*a2;
    goto LABEL_67;
  }
LABEL_68:
  *a2 = 0;
  a2[1] = 0;
  unint64_t v64 = a2[3];
  if (v64 && v6) {
    (*(void (**)(unint64_t, char *))(*(void *)v64 + 16))(v64, v5);
  }
  *(unsigned char *)unint64_t v3 = 0;
  *((unsigned char *)v3 + 40) = 0;
  unint64_t v5 = (char *)*a2;
  unint64_t v20 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = (WTF *)a2[3];
  if (result) {
    goto LABEL_75;
  }
  return result;
}

void sub_19895E984(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16)
{
  if (a15) {
    WTF::fastFree(a15, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::WebGPU::VertexBufferLayout>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 40 * *(unsigned int *)(a1 + 12);
  *(unsigned char *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 32) = 0;
  if (*(unsigned char *)(v3 + 32))
  {
    uint64_t v5 = *(void *)v3;
    *(unsigned char *)(v4 + 8) = *(unsigned char *)(v3 + 8);
    *(void *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 24) = 0;
    uint64_t v6 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = 0;
    *(void *)(v4 + 16) = v6;
    LODWORD(v6) = *(_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 24) = 0;
    *(_DWORD *)(v4 + 24) = v6;
    LODWORD(v6) = *(_DWORD *)(v3 + 28);
    *(_DWORD *)(v3 + 28) = 0;
    *(_DWORD *)(v4 + 28) = v6;
    *(unsigned char *)(v4 + 32) = 1;
  }
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x19895EBA4);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = (WTF *)(*(void *)a1 + 40 * *(unsigned int *)(a1 + 12));
    int v5 = 40 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)a1 = v6;
    WTF::VectorMover<false,std::optional<WebKit::WebGPU::VertexBufferLayout>>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF *WTF::VectorMover<false,std::optional<WebKit::WebGPU::VertexBufferLayout>>::move(WTF *result, WTF *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      unint64_t v8 = (char *)v5 + v6;
      *(unsigned char *)uint64_t v7 = 0;
      *(unsigned char *)(v7 + 32) = 0;
      if (*((unsigned char *)v5 + v6 + 32))
      {
        uint64_t v9 = *(void *)v8;
        *(unsigned char *)(v7 + 8) = v8[8];
        *(void *)uint64_t v7 = v9;
        *(void *)(v7 + 16) = 0;
        *(void *)(v7 + 24) = 0;
        uint64_t v10 = *((void *)v8 + 2);
        *((void *)v8 + 2) = 0;
        *(void *)(v7 + 16) = v10;
        LODWORD(v10) = *((_DWORD *)v8 + 6);
        *((_DWORD *)v8 + 6) = 0;
        *(_DWORD *)(v7 + 24) = v10;
        LODWORD(v10) = *((_DWORD *)v8 + 7);
        *((_DWORD *)v8 + 7) = 0;
        *(_DWORD *)(v7 + 28) = v10;
        *(unsigned char *)(v7 + 32) = 1;
        if (v8[32])
        {
          unint64_t result = (WTF *)*((void *)v8 + 2);
          if (result)
          {
            *((void *)v8 + 2) = 0;
            *((_DWORD *)v8 + 6) = 0;
            unint64_t result = (WTF *)WTF::fastFree(result, a2);
          }
        }
      }
      v6 += 40;
    }
    while ((WTF *)((char *)v5 + v6) != a2);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebGPU::VertexAttribute,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebGPU::VertexAttribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 24 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebKit::WebGPU::VertexAttribute,void>::encode(a1, v6);
      v6 += 24;
      v7 -= 24;
    }
    while (v7);
  }
  return result;
}

void *IPC::Decoder::decode<WebKit::WebGPU::VertexAttribute>(uint64_t a1, unint64_t *a2)
{
  __int16 v41 = 0;
  unint64_t result = IPC::Decoder::operator>><unsigned char>(a2, &v41);
  char v5 = v41;
  if (HIBYTE(v41)) {
    BOOL v6 = v41 > 0x1Eu;
  }
  else {
    BOOL v6 = 1;
  }
  int v7 = v6;
  if (v7 == 1)
  {
    unint64_t v22 = *a2;
    unint64_t v23 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = (void *)a2[3];
    if (result)
    {
      if (v23) {
        unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t))(*result + 16))(result, v22);
      }
      char v5 = 0;
      int v7 = 1;
    }
    else
    {
      char v5 = 0;
    }
  }
  unint64_t v8 = a2[1];
  unint64_t v9 = *a2;
  unint64_t v10 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v8 >= v10 && v8 - v10 > 7)
  {
    unint64_t v12 = (uint64_t *)(v9 + v10);
    a2[2] = (unint64_t)(v12 + 1);
    if (v9)
    {
      int v13 = 0;
      uint64_t v14 = *v12;
      unint64_t v15 = v9;
      goto LABEL_15;
    }
    unint64_t v15 = v8;
    unint64_t v24 = 0;
  }
  else
  {
    unint64_t v15 = 0;
    unint64_t v24 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v25 = a2[3];
    if (v25)
    {
      char v35 = v5;
      int v39 = v7;
      if (v8)
      {
        (*(void (**)(unint64_t))(*(void *)v25 + 16))(v25);
        unint64_t v24 = *a2;
        unint64_t v15 = a2[1];
      }
      else
      {
        unint64_t v15 = 0;
        unint64_t v24 = 0;
      }
      char v5 = v35;
      int v7 = v39;
    }
  }
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = (void *)a2[3];
  if (result)
  {
    char v33 = v5;
    int v37 = v7;
    if (v15)
    {
      unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, unint64_t))(*result + 16))(result, v24, v15);
      uint64_t v14 = 0;
      unint64_t v15 = *a2;
      unint64_t v8 = a2[1];
      int v13 = 1;
      unint64_t v9 = *a2;
    }
    else
    {
      unint64_t v8 = 0;
      unint64_t v9 = 0;
      uint64_t v14 = 0;
      int v13 = 1;
    }
    char v5 = v33;
    int v7 = v37;
  }
  else
  {
    unint64_t v15 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v14 = 0;
    int v13 = 1;
  }
LABEL_15:
  unint64_t v16 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v9;
  if (v8 >= v16 && v8 - v16 > 3)
  {
    int v18 = (int *)((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    a2[2] = (unint64_t)(v18 + 1);
    unint64_t v19 = v8;
    if (v9)
    {
      int v20 = 0;
      int v21 = *v18;
      if (v7) {
        goto LABEL_59;
      }
      goto LABEL_22;
    }
  }
  else
  {
    unint64_t v19 = 0;
    unint64_t v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v26 = a2[3];
    if (v26)
    {
      int v32 = v13;
      char v36 = v5;
      uint64_t v30 = v14;
      int v40 = v7;
      if (v8)
      {
        (*(void (**)(unint64_t))(*(void *)v26 + 16))(v26);
        unint64_t v15 = *a2;
        unint64_t v19 = a2[1];
      }
      else
      {
        unint64_t v19 = 0;
        unint64_t v15 = 0;
      }
      char v5 = v36;
      int v7 = v40;
      uint64_t v14 = v30;
      int v13 = v32;
    }
  }
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = (void *)a2[3];
  if (result)
  {
    int v31 = v13;
    char v34 = v5;
    uint64_t v29 = v14;
    int v38 = v7;
    if (v19)
    {
      unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, unint64_t))(*result + 16))(result, v15, v19);
      if (!*a2)
      {
        unint64_t v27 = a2[1];
        unint64_t result = (void *)a2[3];
        goto LABEL_34;
      }
      int v21 = 0;
      int v20 = 1;
      char v5 = v34;
      uint64_t v14 = v29;
      int v13 = v31;
      if (v38)
      {
LABEL_59:
        __break(1u);
        return result;
      }
LABEL_22:
      if (!v13 && !v20)
      {
        *(unsigned char *)a1 = v5;
        *(void *)(a1 + 8) = v14;
        *(_DWORD *)(a1 + 16) = v21;
        *(unsigned char *)(a1 + 24) = 1;
        return result;
      }
      goto LABEL_59;
    }
  }
  unint64_t v27 = 0;
LABEL_34:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *a2 = 0;
  a2[1] = 0;
  if (result && v27)
  {
    uint64_t v28 = *(uint64_t (**)(void))(*result + 16);
    return (void *)v28();
  }
  return result;
}

void *IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(void *result, uint64_t a2)
{
  unint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  uint64_t v4 = result[2];
  unint64_t v5 = *result + v4;
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!v3) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v9 = v8 + v4;
  unint64_t v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= result[1])
  {
    *(void *)(*result + v9) = v3;
    result[2] = v10;
    uint64_t v3 = *(unsigned int *)(a2 + 12);
    goto LABEL_8;
  }
  result[1] = 0;
  if (!v3) {
    return result;
  }
LABEL_9:
  unint64_t v12 = *(uint64_t **)a2;
  uint64_t v13 = 8 * v3;
  do
  {
    unint64_t result = IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(v2, v12++);
    v13 -= 8;
  }
  while (v13);
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>,void>::encode<IPC::Encoder,std::optional<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 40))
  {
    char v8 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v8);
    if (*(unsigned char *)(a2 + 40))
    {
      unsigned __int8 v10 = *(_DWORD *)(a2 + 32);
      IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
      return IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>(a1, a2, v10);
    }
    else
    {
      unint64_t v5 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>(v5, v6, v7);
    }
  }
  else
  {
    char v9 = 0;
    return (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(a1, &v9);
  }
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&,0ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 32))
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&,0ul>(a1, a2, a3);
  }
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  unint64_t v5 = *(const void **)a2;

  return (IPC::Encoder *)IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v5, v4);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&,0ul>(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 32) == 1)
    {
      return (IPC::Encoder *)IPC::ArgumentCoder<WebKit::WebGPU::ColorDict,void>::encode(result, (double *)a2);
    }
    else
    {
      uint64_t v3 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>(v3);
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 32);
  unint64_t v3 = a1[2];
  if (v3 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v3) = v2;
    a1[2] = v3 + 1;
  }
  return IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>(a1, a2, v2);
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&,0ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 32))
  {
    a1 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&,0ul>(a1, a2, a3);
  }
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  unint64_t v5 = *(const void **)a2;

  return IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, v5, v4);
}

uint64_t *IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&,0ul>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 32) == 1)
    {
      return IPC::ArgumentCoder<WebKit::WebGPU::ColorDict,void>::encode(result, (void *)a2);
    }
    else
    {
      unint64_t v3 = (IPC::Decoder *)std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)IPC::Decoder::decode<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>(v3, v4);
    }
  }
  return result;
}

IPC::Decoder *IPC::Decoder::decode<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[40])
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19895F338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 40))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 32);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIdLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU9ColorDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 32) = -1;
  }
  _Unwind_Resume(exception_object);
}

IPC::Decoder *IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *result@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = *((void *)result + 1);
  uint64_t v3 = *(void *)result;
  unint64_t v4 = *((void *)result + 2) - *(void *)result;
  if (v2 <= v4)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)unint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v9 = *((void *)result + 3);
    if (v9)
    {
      unsigned __int8 v10 = result;
      unint64_t v12 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v3, v2);
        unint64_t result = v10;
        a2 = v12;
        uint64_t v8 = *(void *)v10;
        unint64_t v7 = *((void *)v10 + 1);
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_9;
  }
  uint64_t v5 = (unsigned __int8 *)(v3 + v4);
  *((void *)result + 2) = v5 + 1;
  if (!v3)
  {
    unint64_t v7 = v2;
    uint64_t v8 = 0;
LABEL_9:
    *(void *)unint64_t result = 0;
    *((void *)result + 1) = 0;
    unint64_t result = (IPC::Decoder *)*((void *)result + 3);
    if (result && v7)
    {
      unint64_t v11 = a2;
      unint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v8);
      a2 = v11;
    }
    goto LABEL_4;
  }
  unint64_t v6 = *v5;
  if (v6 >= 2)
  {
LABEL_4:
    *a2 = 0;
    a2[40] = 0;
    return result;
  }

  return (IPC::Decoder *)IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::decode<IPC::Decoder>(result, v6, (uint64_t)a2);
}

void *IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    return IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::decode<IPC::Decoder,0ul>(a1, a2, a3);
  }
  else
  {
    unint64_t result = (void *)IPC::Decoder::decode<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v6);
    char v5 = v7;
    if (v7)
    {
      *(void *)a3 = v6[0];
      *(void *)(a3 + 8) = v6[1];
      *(_DWORD *)(a3 + 32) = 0;
      char v5 = 1;
    }
    else
    {
      *(unsigned char *)a3 = 0;
    }
    *(unsigned char *)(a3 + 40) = v5;
  }
  return result;
}

void *IPC::ArgumentCoder<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,void>::decode<IPC::Decoder,0ul>@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2 == 1)
  {
    unint64_t result = IPC::Decoder::decode<WebKit::WebGPU::ColorDict>(result, (uint64_t)v6);
    char v4 = v7;
    if (v7)
    {
      long long v5 = v6[1];
      *(_OWORD *)a3 = v6[0];
      *(_OWORD *)(a3 + 16) = v5;
      char v4 = 1;
      *(_DWORD *)(a3 + 32) = 1;
    }
    else
    {
      *(unsigned char *)a3 = 0;
    }
    *(unsigned char *)(a3 + 40) = v4;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 40) = 0;
  }
  return result;
}

void *IPC::Decoder::decode<WebKit::WebGPU::ColorDict>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebKit::WebGPU::ColorDict,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 32))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::WebGPU::BlendState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::BlendState> const&>(IPC::Encoder *a1, char *a2)
{
  if (a2[6])
  {
    char v7 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v7);
    if (a2[6])
    {
      IPC::ArgumentCoder<WebKit::WebGPU::StorageTextureBindingLayout,void>::encode(a1, a2);
      return IPC::ArgumentCoder<WebKit::WebGPU::StorageTextureBindingLayout,void>::encode(a1, a2 + 3);
    }
    else
    {
      uint64_t v5 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(v5, v6);
    }
  }
  else
  {
    char v8 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v8);
  }
}

uint64_t IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (*(unsigned char *)(a2 + 8))
    {
      return IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

void *IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(void *result, uint64_t a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (!*(unsigned char *)(a2 + 8))
  {
    if (v2 < v3)
    {
      *(unsigned char *)(*result + v2) = 0;
      result[2] = v2 + 1;
      return result;
    }
    goto LABEL_14;
  }
  if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2++) = 1;
    result[2] = v2;
    if (!*(unsigned char *)(a2 + 8))
    {
      unint64_t v11 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
      return (void *)IPC::ArgumentCoder<WebKit::SwapBuffersDisplayRequirement,void>::decode<IPC::Decoder>(v11);
    }
  }
  unint64_t v4 = *result + v2;
  unint64_t v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v2;
    unint64_t v9 = v8 + 8;
    if (v8 <= 0xFFFFFFFFFFFFFFF7 && v9 <= result[1])
    {
      *(void *)(*result + v8) = *(void *)a2;
      result[2] = v9;
      return result;
    }
LABEL_14:
    result[1] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::SwapBuffersDisplayRequirement,void>::decode<IPC::Decoder>(void *a1)
{
  __int16 v5 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v5);
  if (HIBYTE(v5)) {
    BOOL v1 = v5 >= 3u;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1) {
    int v2 = 0;
  }
  else {
    int v2 = v5;
  }
  int v3 = !v1;
  return v2 | (v3 << 8);
}

void *IPC::ArgumentCoder<std::optional<WebCore::ScreenDataOverrides>,void>::encode<IPC::Encoder,std::optional<WebCore::ScreenDataOverrides> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    char v7 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v7);
    if (*(unsigned char *)(a2 + 24))
    {
      return (void *)IPC::ArgumentCoder<WebCore::HTMLModelElementCamera,void>::encode(a1, (double *)a2);
    }
    else
    {
      __int16 v5 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebCore::ScreenDataOverrides>,void>::decode<IPC::Decoder>(v5, v6);
    }
  }
  else
  {
    char v8 = 0;
    return (void *)IPC::Encoder::operator<<<BOOL>(a1, &v8);
  }
}

void *IPC::ArgumentCoder<std::optional<WebCore::ScreenDataOverrides>,void>::decode<IPC::Decoder>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = result[1];
  uint64_t v3 = *result;
  unint64_t v4 = result[2] - *result;
  if (v2 <= v4)
  {
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v24 = result[3];
    if (v24)
    {
      uint64_t v54 = result;
      uint64_t v60 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
        unint64_t result = v54;
        uint64_t v23 = *v54;
        unint64_t v22 = v54[1];
        a2 = v60;
      }
      else
      {
        unint64_t v22 = 0;
        uint64_t v23 = 0;
      }
    }
    goto LABEL_27;
  }
  __int16 v5 = (unsigned __int8 *)(v3 + v4);
  uint64_t v6 = v3 + v4 + 1;
  result[2] = v6;
  if (!v3)
  {
    unint64_t v22 = v2;
    uint64_t v23 = 0;
LABEL_27:
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v25 = result[3];
    if (v25)
    {
      long long v53 = result;
      uint64_t v59 = a2;
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v25 + 16))(v25, v23, v22);
        unint64_t result = v53;
        uint64_t v3 = *v53;
        unint64_t v2 = v53[1];
        a2 = v59;
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
      }
    }
    goto LABEL_28;
  }
  unsigned int v7 = *v5;
  if (v7 >= 2)
  {
LABEL_28:
    void *result = 0;
    result[1] = 0;
    unint64_t result = (void *)result[3];
    if (!result || !v2) {
      goto LABEL_38;
    }
    uint64_t v58 = a2;
    unint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v3);
LABEL_54:
    a2 = v58;
    goto LABEL_38;
  }
  if (!v7)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    char v21 = 1;
    goto LABEL_25;
  }
  unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
  BOOL v10 = v2 < v8 || v2 - v8 < 8;
  if (v10)
  {
    void *result = 0;
    result[1] = 0;
    uint64_t v12 = 0;
    uint64_t v26 = result[3];
    if (v26)
    {
      uint64_t v61 = a2;
      char v35 = result;
      (*(void (**)(uint64_t, double))(*(void *)v26 + 16))(v26, 0.0);
      unint64_t v2 = 0;
      uint64_t v36 = *v35;
      uint64_t v37 = v35[1];
      uint64_t v38 = v35[3];
      void *v35 = 0;
      v35[1] = 0;
      if (v38 && v37)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v36, v37);
        unint64_t result = v35;
        uint64_t v3 = *v35;
        unint64_t v2 = v35[1];
        a2 = v61;
      }
      else
      {
        uint64_t v3 = 0;
        a2 = v61;
        unint64_t result = v35;
      }
      BOOL v10 = 1;
      uint64_t v12 = 0;
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v3 = 0;
    }
  }
  else
  {
    unint64_t v11 = (uint64_t *)(v3 + v8);
    uint64_t v12 = *v11;
    result[2] = v11 + 1;
  }
  unint64_t v13 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 < v13 || v2 - v13 <= 7)
  {
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v29 = result[3];
    if (v29)
    {
      uint64_t v47 = v12;
      BOOL v51 = v10;
      unsigned int v56 = result;
      uint64_t v63 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
        unint64_t result = v56;
        uint64_t v28 = *v56;
        unint64_t v27 = v56[1];
        a2 = v63;
      }
      else
      {
        unint64_t v27 = 0;
        uint64_t v28 = 0;
      }
      BOOL v10 = v51;
      uint64_t v12 = v47;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    result[2] = v14 + 1;
    if (v3)
    {
      int v15 = 0;
      uint64_t v16 = *v14;
      goto LABEL_17;
    }
    unint64_t v27 = v2;
    uint64_t v28 = 0;
  }
  void *result = 0;
  result[1] = 0;
  uint64_t v16 = 0;
  uint64_t v30 = result[3];
  if (v30)
  {
    uint64_t v45 = v12;
    BOOL v49 = v10;
    uint64_t v55 = result;
    uint64_t v62 = a2;
    if (v27)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v30 + 16))(v30, v28, v27);
      unint64_t result = v55;
      uint64_t v3 = *v55;
      unint64_t v2 = v55[1];
      int v15 = 1;
      a2 = v62;
      BOOL v10 = v49;
      uint64_t v12 = v45;
      uint64_t v16 = 0;
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v3 = 0;
      int v15 = 1;
    }
  }
  else
  {
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    int v15 = 1;
  }
LABEL_17:
  unint64_t v17 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 < v17 || v2 - v17 <= 7)
  {
    unint64_t v31 = 0;
    uint64_t v32 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v33 = result[3];
    if (v33)
    {
      int v44 = v15;
      uint64_t v42 = v16;
      uint64_t v48 = v12;
      BOOL v52 = v10;
      uint64_t v57 = result;
      uint64_t v64 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v33 + 16))(v33);
        unint64_t result = v57;
        uint64_t v32 = *v57;
        unint64_t v31 = v57[1];
        a2 = v64;
      }
      else
      {
        unint64_t v31 = 0;
        uint64_t v32 = 0;
      }
      BOOL v10 = v52;
      uint64_t v12 = v48;
      uint64_t v16 = v42;
      int v15 = v44;
    }
  }
  else
  {
    int v18 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    result[2] = v18 + 1;
    if (v3)
    {
      int v19 = 0;
      uint64_t v20 = *v18;
      if (v10) {
        goto LABEL_71;
      }
      goto LABEL_21;
    }
    unint64_t v31 = v2;
    uint64_t v32 = 0;
  }
  void *result = 0;
  result[1] = 0;
  uint64_t v34 = result[3];
  if (!v34 || !v31)
  {
LABEL_38:
    char v21 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_25;
  }
  int v43 = v15;
  uint64_t v41 = v16;
  uint64_t v46 = v12;
  BOOL v50 = v10;
  uint64_t v58 = a2;
  int v39 = result;
  unint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v34 + 16))(v34, v32, v31);
  if (!*v39)
  {
    uint64_t v40 = v39[1];
    unint64_t result = (void *)v39[3];
    void *v39 = 0;
    v39[1] = 0;
    a2 = v58;
    if (!result || !v40) {
      goto LABEL_38;
    }
    unint64_t result = (void *)(*(uint64_t (**)(void *, void))(*result + 16))(result, 0);
    goto LABEL_54;
  }
  int v19 = 1;
  uint64_t v20 = 0;
  a2 = v58;
  uint64_t v12 = v46;
  uint64_t v16 = v41;
  int v15 = v43;
  if (v50) {
    goto LABEL_71;
  }
LABEL_21:
  if (!v15 && !v19)
  {
    *(void *)a2 = v12;
    *(void *)(a2 + 8) = v16;
    *(void *)(a2 + 16) = v20;
    char v21 = 1;
    *(unsigned char *)(a2 + 24) = 1;
LABEL_25:
    *(unsigned char *)(a2 + 32) = v21;
    return result;
  }
LABEL_71:
  __break(1u);
  return result;
}

unint64_t IPC::ArgumentCoder<std::optional<WebCore::PlatformTimeRanges>,void>::encode<IPC::Encoder,std::optional<WebCore::PlatformTimeRanges> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16))
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (*(unsigned char *)(a2 + 16))
    {
      return IPC::VectorArgumentCoder<false,WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebCore::VideoPlaybackQualityMetrics>,void>::encode<IPC::Encoder,std::optional<WebCore::VideoPlaybackQualityMetrics> const&>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

unint64_t IPC::ArgumentCoder<std::optional<WebCore::VideoPlaybackQualityMetrics>,void>::encode<IPC::Encoder,std::optional<WebCore::VideoPlaybackQualityMetrics> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 32))
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (*(unsigned char *)(a2 + 32))
    {
      return IPC::ArgumentCoder<WebCore::VideoPlaybackQualityMetrics,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::Decoder::decode<WebCore::PlatformTimeRanges>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

WTF *IPC::Decoder::decode<WebCore::PlatformTimeRanges>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::PlatformTimeRanges,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (WTF *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF *)v7();
    }
  }
  return result;
}

void *IPC::Decoder::decode<WebCore::VideoPlaybackQualityMetrics>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::VideoPlaybackQualityMetrics,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 32))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>(IPC::Encoder *result, int *a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,0ul>(result, a2, a3);
  }
  if (a2[4])
  {
    unint64_t result = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,0ul>(result, a2, a3);
  }
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,0ul>(IPC::Encoder *a1, int *a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (a2[4] == 1)
    {
      long long v4 = *(_OWORD *)a2;
      return (IPC::Encoder *)IPC::ArgumentCoder<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, (uint64_t *)&v4);
    }
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,0ul,1ul>(a1, a2, a3);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,0ul,1ul>(IPC::Encoder *a1, int *a2, uint64_t a3)
{
  if (a3 != 2)
  {
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,0ul,1ul,2ul>(a1, a2, a3);
  }
  if (a2[4] != 2)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,0ul,1ul,2ul>(a1, a2, a3);
  }

  return (IPC::Encoder *)IPC::Encoder::addAttachment((uint64_t)a1, (unint64_t)a2);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,0ul,1ul,2ul>(IPC::Encoder *result, int *a2, uint64_t a3)
{
  if (a3 == 3)
  {
    if (a2[4] == 3)
    {
      return IPC::Encoder::operator<<<WebCore::IntSize const&>(result, a2);
    }
    else
    {
      uint64_t v3 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,void>::decode<IPC::Decoder>(v3);
    }
  }
  return result;
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  unint64_t v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      unint64_t v11 = a1;
      uint64_t v13 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v3, v2);
        a1 = v11;
        a2 = v13;
        uint64_t v8 = *v11;
        unint64_t v7 = v11[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v5 = (unsigned char *)(v3 + v4);
  a1[2] = (uint64_t)(v5 + 1);
  if (!v3)
  {
    unint64_t v7 = v2;
    uint64_t v8 = 0;
LABEL_12:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10 && v7)
    {
      uint64_t v12 = a2;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
      a2 = v12;
    }
    goto LABEL_4;
  }
  uint64_t v6 = *v5;
  if (v6 >= 4)
  {
LABEL_4:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    return;
  }
  if (*v5)
  {
    IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,void>::decode<IPC::Decoder,0ul>(a1, v6, a2);
  }
  else
  {
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 24) = 1;
  }
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,void>::decode<IPC::Decoder,0ul>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2 == 1)
  {
    IPC::Decoder::decode<IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, &v5);
    char v4 = v6;
    if (v6)
    {
      *(_OWORD *)a3 = v5;
      char v4 = 1;
      *(_DWORD *)(a3 + 16) = 1;
    }
    else
    {
      *(unsigned char *)a3 = 0;
    }
    *(unsigned char *)(a3 + 24) = v4;
  }
  else
  {
    IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,void>::decode<IPC::Decoder,0ul,1ul>((IPC::Decoder *)a1, a2, a3);
  }
}

uint64_t IPC::Decoder::decode<IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,void>::decode<IPC::Decoder,0ul,1ul>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2 == 2)
  {
    IPC::Decoder::takeLastAttachment(a1, v7);
    if (v8)
    {
      WTF::MachSendRight::MachSendRight();
      *(_DWORD *)(a3 + 16) = 2;
      *(unsigned char *)(a3 + 24) = 1;
      if (v8) {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v7);
      }
    }
    else
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 24) = 0;
    }
  }
  else
  {
    if (a2 == 3 && (char v4 = IPC::Decoder::decode<WebCore::IntSize>((unint64_t *)a1), v5))
    {
      *(void *)a3 = v4;
      *(_DWORD *)(a3 + 16) = 3;
      char v6 = 1;
    }
    else
    {
      char v6 = 0;
      *(unsigned char *)a3 = 0;
    }
    *(unsigned char *)(a3 + 24) = v6;
  }
}

void sub_198960428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, __int16 a11, char a12, char a13)
{
  if (a12) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,void>::encode<IPC::Encoder,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&,0ul>(IPC::Encoder *a1, WebCore::Color *a2, uint64_t a3)
{
  if (a3 != 1)
  {
    return IPC::ArgumentCoder<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,void>::encode<IPC::Encoder,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&,0ul,1ul>(a1, (uint64_t)a2, a3);
  }
  if (*((_DWORD *)a2 + 32) != 1)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,void>::encode<IPC::Encoder,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&,0ul,1ul>(a1, (uint64_t)a2, a3);
  }

  return (IPC::Encoder *)IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, a2);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,void>::encode<IPC::Encoder,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&,0ul,1ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 2)
  {
    return IPC::ArgumentCoder<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,void>::encode<IPC::Encoder,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&,0ul,1ul,2ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 128) != 2)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,void>::encode<IPC::Encoder,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&,0ul,1ul,2ul>(a1, a2, a3);
  }

  return (IPC::Encoder *)IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(a1, (float *)a2);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,void>::encode<IPC::Encoder,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>> const&,0ul,1ul,2ul>(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 3)
  {
    if (*(_DWORD *)(a2 + 128) == 3)
    {
      return (IPC::Encoder *)IPC::ArgumentCoder<WebCore::TransformationMatrix,void>::encode(result, (double *)a2);
    }
    return (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (a3 != 4) {
    return result;
  }
  if (*(_DWORD *)(a2 + 128) != 4) {
    return (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  double v3 = *(double *)a2;

  return IPC::ArgumentCoder<WebCore::FilterOperation,void>::encode(result, *(uint64_t *)&v3);
}

uint64_t IPC::Decoder::decode<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[2] - *a2;
  if (v4 <= v6)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v26 = a2[3];
    if (v26)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v26 + 16))(v26, v5, v4);
        uint64_t v25 = *a2;
        uint64_t v24 = a2[1];
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
      }
    }
    goto LABEL_30;
  }
  unint64_t v7 = (unsigned char *)(v5 + v6);
  a2[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    uint64_t v24 = v4;
    uint64_t v25 = 0;
LABEL_30:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v27 = a2[3];
    if (v27 && v24) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25);
    }
    goto LABEL_4;
  }
  unsigned int v8 = *v7;
  if (v8 > 4)
  {
LABEL_4:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 136) = 0;
LABEL_5:
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result)
    {
      if (v10) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v9);
      }
    }
    return result;
  }
  if (!*v7)
  {
    uint64_t result = IPC::Decoder::decode<float>(a2);
    if ((result & 0xFF00000000) == 0) {
      goto LABEL_4;
    }
    int v13 = 0;
    uint64_t v14 = (_DWORD *)a1;
LABEL_20:
    _DWORD *v14 = result;
    *(_DWORD *)(a1 + 128) = v13;
    *(unsigned char *)(a1 + 136) = 1;
    return result;
  }
  if (v8 != 1)
  {
    if (v8 == 2)
    {
      unint64_t v15 = IPC::Decoder::decode<WebCore::FloatPoint3D>(a2);
      if ((v16 & 0xFF00000000) == 0) {
        goto LABEL_4;
      }
      unint64_t v17 = v15;
      uint64_t result = v16;
      *(void *)a1 = v17;
      uint64_t v14 = (_DWORD *)(a1 + 8);
      int v13 = 2;
      goto LABEL_20;
    }
    if (v8 == 3)
    {
      uint64_t result = IPC::Decoder::decode<WebCore::TransformationMatrix>((uint64_t)v30, (uint64_t)a2);
      int v18 = v31;
      if (v31)
      {
        long long v19 = v30[5];
        *(_OWORD *)(a1 + 64) = v30[4];
        *(_OWORD *)(a1 + 80) = v19;
        long long v20 = v30[7];
        *(_OWORD *)(a1 + 96) = v30[6];
        *(_OWORD *)(a1 + 112) = v20;
        long long v21 = v30[1];
        *(_OWORD *)a1 = v30[0];
        *(_OWORD *)(a1 + 16) = v21;
        long long v22 = v30[2];
        long long v23 = v30[3];
        *(_DWORD *)(a1 + 128) = 3;
        int v18 = 1;
        *(_OWORD *)(a1 + 32) = v22;
        *(_OWORD *)(a1 + 48) = v23;
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t result = (uint64_t)IPC::Decoder::decode<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>((uint64_t)v30, a2);
      int v18 = BYTE8(v30[0]);
      if (BYTE8(v30[0]))
      {
        *(void *)a1 = *(void *)&v30[0];
        *(_DWORD *)(a1 + 128) = 4;
        int v18 = 1;
        goto LABEL_27;
      }
    }
    *(unsigned char *)a1 = 0;
LABEL_27:
    *(unsigned char *)(a1 + 136) = v18;
    if (v18) {
      return result;
    }
    goto LABEL_5;
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, v30);
  if (BYTE8(v30[0])
    || (v28 = *a2, v29 = a2[1], *a2 = 0, a2[1] = 0, (uint64_t result = a2[3]) != 0)
    && v29
    && (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v28), BYTE8(v30[0])))
  {
    uint64_t result = WebCore::Color::Color();
    *(_DWORD *)(a1 + 128) = 1;
    *(unsigned char *)(a1 + 136) = 1;
    if (BYTE8(v30[0]))
    {
      if ((*(void *)&v30[0] & 0x8000000000000) != 0)
      {
        uint64_t result = *(void *)&v30[0] & 0xFFFFFFFFFFFFLL;
        if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v30[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)result);
          uint64_t result = WTF::fastFree((WTF *)result, v12);
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 136) = 0;
  }
  if (!*(unsigned char *)(a1 + 136)) {
    goto LABEL_5;
  }
  return result;
}

void sub_198960848(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11 && (a10 & 0x8000000000000) != 0)
  {
    uint64_t v12 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor(*(void *)a1 + 136 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 128) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_198960954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 128);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9B4F68[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 128) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 128);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9B4F68[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 128) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 128);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9B52F8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 128) = v5;
  }
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSZ_EEEDcSR_DpT0_()
{
  return WebCore::Color::Color();
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(void *)a2 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[1];
  long long v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = (__n128)a3[4];
  long long v7 = a3[5];
  long long v8 = a3[7];
  *(_OWORD *)(a2 + 96) = a3[6];
  *(_OWORD *)(a2 + 112) = v8;
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = v7;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

unint64_t WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 136 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x1E1E1E2)
    {
      __break(0xC471u);
      JUMPOUT(0x198960BD4);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = *(void *)a1 + 136 * *(unsigned int *)(a1 + 12);
    int v5 = 136 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(136 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x88;
    *(void *)a1 = v6;
    WTF::VectorMover<false,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    uint64_t v7 = result;
    do
    {
      __n128 result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a3, v7);
      uint64_t v8 = *(unsigned int *)(v7 + 128);
      if (v8 != -1) {
        __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE9B4F68[v8])(&v9, v7);
      }
      *(_DWORD *)(v7 + 128) = -1;
      a3 += 136;
      v7 += 136;
    }
    while (v7 != a2);
  }
  return result;
}

unsigned int *WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  if (result[2] > this)
  {
    uint64_t v3 = (uint64_t)result;
    if (result[3] > this) {
      __n128 result = (unsigned int *)WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)result, this);
    }
    uint64_t v4 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x1E1E1E2)
      {
        __break(0xC471u);
        return result;
      }
      unsigned int v5 = *(_DWORD *)(v3 + 12);
      uint64_t v6 = (WTF *)(136 * this);
      __n128 result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF8) / 0x88;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v4) {
        __n128 result = (unsigned int *)WTF::VectorMover<false,std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::move((uint64_t)v4, (uint64_t)v4 + 136 * v5, (uint64_t)result);
      }
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)this);
    }
  }
  return result;
}

uint64_t WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t result, uint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 12);
  if (v4 != a2)
  {
    uint64_t v5 = *(void *)result + 136 * a2;
    uint64_t v6 = 136 * v4 - 136 * a2;
    do
    {
      uint64_t v7 = *(unsigned int *)(v5 + 128);
      if (v7 != -1) {
        __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE9B4F68[v7])(&v8, v5);
      }
      *(_DWORD *)(v5 + 128) = -1;
      v5 += 136;
      v6 -= 136;
    }
    while (v6);
  }
  *(_DWORD *)(v3 + 12) = v2;
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>>(unint64_t a1, unint64_t *a2)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::TimingFunction,void>::decode(a1, a2);
  if (!*(unsigned char *)(a1 + 8))
  {
    unint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = a2[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

unint64_t WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 29))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void **)result;
    uint64_t v5 = *(unsigned int *)(result + 12);
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    memcpy(v6, v4, 8 * v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = result[3];
    if (v4 > a2)
    {
      unint64_t result = WTF::VectorDestructor<true,WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>>::destruct((_DWORD *)(*(void *)result + 8 * a2), (_DWORD **)(*(void *)result + 8 * v4));
      v3[3] = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        unint64_t result = (unsigned int *)WTF::fastRealloc(v5, (void *)(8 * a2));
        *(void *)uint64_t v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      unint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        unint64_t result = (unsigned int *)memcpy(result, v5, 8 * v4);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

__n128 WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::PlatformCAAnimationRemoteProperties>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 136 * *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  *(void *)uint64_t v4 = v5;
  __n128 result = *(__n128 *)(v3 + 34);
  long long v7 = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(v4 + 24) = v7;
  *(__n128 *)(v4 + 34) = result;
  uint64_t v8 = *(void *)(v3 + 56);
  *(void *)(v3 + 56) = 0;
  *(void *)(v4 + 56) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 64);
  *(unsigned char *)(v4 + 68) = *(unsigned char *)(v3 + 68);
  *(_DWORD *)(v4 + 64) = v8;
  *(void *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0;
  uint64_t v9 = *(void *)(v3 + 72);
  *(void *)(v3 + 72) = 0;
  *(void *)(v4 + 72) = v9;
  LODWORD(v9) = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v4 + 80) = v9;
  LODWORD(v9) = *(_DWORD *)(v3 + 84);
  *(_DWORD *)(v3 + 84) = 0;
  *(_DWORD *)(v4 + 84) = v9;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 96) = 0;
  uint64_t v10 = *(void *)(v3 + 88);
  *(void *)(v3 + 88) = 0;
  *(void *)(v4 + 88) = v10;
  LODWORD(v10) = *(_DWORD *)(v3 + 96);
  *(_DWORD *)(v3 + 96) = 0;
  *(_DWORD *)(v4 + 96) = v10;
  LODWORD(v10) = *(_DWORD *)(v3 + 100);
  *(_DWORD *)(v3 + 100) = 0;
  *(_DWORD *)(v4 + 100) = v10;
  *(void *)(v4 + 104) = 0;
  *(void *)(v4 + 112) = 0;
  uint64_t v11 = *(void *)(v3 + 104);
  *(void *)(v3 + 104) = 0;
  *(void *)(v4 + 104) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 112);
  *(_DWORD *)(v3 + 112) = 0;
  *(_DWORD *)(v4 + 112) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 116);
  *(_DWORD *)(v3 + 116) = 0;
  *(_DWORD *)(v4 + 116) = v11;
  *(void *)(v4 + 120) = 0;
  *(void *)(v4 + 128) = 0;
  uint64_t v12 = *(void *)(v3 + 120);
  *(void *)(v3 + 120) = 0;
  *(void *)(v4 + 120) = v12;
  LODWORD(v12) = *(_DWORD *)(v3 + 128);
  *(_DWORD *)(v3 + 128) = 0;
  *(_DWORD *)(v4 + 128) = v12;
  LODWORD(v12) = *(_DWORD *)(v3 + 132);
  *(_DWORD *)(v3 + 132) = 0;
  *(_DWORD *)(v4 + 132) = v12;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 136 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x1E1E1E2)
    {
      __break(0xC471u);
      JUMPOUT(0x198961334);
    }
    unint64_t v3 = *(WTF::StringImpl **)a1;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)a1 + 136 * *(unsigned int *)(a1 + 12));
    int v5 = 136 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(136 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x88;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::PlatformCAAnimationRemoteProperties>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::PlatformCAAnimationRemoteProperties>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      unint64_t v8 = (char *)v5 + v6;
      uint64_t v9 = *(void *)((char *)v5 + v6);
      *(void *)unint64_t v8 = 0;
      *(void *)uint64_t v7 = v9;
      long long v10 = *(_OWORD *)((char *)v5 + v6 + 8);
      long long v11 = *(_OWORD *)((char *)v5 + v6 + 24);
      *(_OWORD *)(v7 + 34) = *(_OWORD *)((char *)v5 + v6 + 34);
      *(_OWORD *)(v7 + 24) = v11;
      *(_OWORD *)(v7 + 8) = v10;
      uint64_t v12 = *(void *)((char *)v5 + v6 + 56);
      *((void *)v8 + 7) = 0;
      *(void *)(v7 + 56) = v12;
      LODWORD(v12) = *(_DWORD *)((char *)v5 + v6 + 64);
      *(unsigned char *)(v7 + 68) = *((unsigned char *)v5 + v6 + 68);
      *(_DWORD *)(v7 + 64) = v12;
      *(void *)(v7 + 72) = 0;
      *(void *)(v7 + 80) = 0;
      uint64_t v13 = *(void *)((char *)v5 + v6 + 72);
      *(void *)((char *)v5 + v6 + 72) = 0;
      *(void *)(v7 + 72) = v13;
      LODWORD(v13) = *(_DWORD *)((char *)v5 + v6 + 80);
      *((_DWORD *)v8 + 20) = 0;
      *(_DWORD *)(v7 + 80) = v13;
      LODWORD(v13) = *(_DWORD *)((char *)v5 + v6 + 84);
      *((_DWORD *)v8 + 21) = 0;
      *(_DWORD *)(v7 + 84) = v13;
      *(void *)(v7 + 88) = 0;
      *(void *)(v7 + 96) = 0;
      uint64_t v14 = *(void *)((char *)v5 + v6 + 88);
      *((void *)v8 + 11) = 0;
      *(void *)(v7 + 88) = v14;
      LODWORD(v14) = *(_DWORD *)((char *)v5 + v6 + 96);
      *((_DWORD *)v8 + 24) = 0;
      *(_DWORD *)(v7 + 96) = v14;
      LODWORD(v14) = *(_DWORD *)((char *)v5 + v6 + 100);
      *((_DWORD *)v8 + 25) = 0;
      *(_DWORD *)(v7 + 100) = v14;
      *(void *)(v7 + 104) = 0;
      *(void *)(v7 + 112) = 0;
      uint64_t v15 = *(void *)((char *)v5 + v6 + 104);
      *(void *)((char *)v5 + v6 + 104) = 0;
      *(void *)(v7 + 104) = v15;
      LODWORD(v15) = *(_DWORD *)((char *)v5 + v6 + 112);
      *((_DWORD *)v8 + 28) = 0;
      *(_DWORD *)(v7 + 112) = v15;
      LODWORD(v15) = *(_DWORD *)((char *)v5 + v6 + 116);
      *((_DWORD *)v8 + 29) = 0;
      *(_DWORD *)(v7 + 116) = v15;
      *(void *)(v7 + 120) = 0;
      *(void *)(v7 + 128) = 0;
      uint64_t v16 = (uint64_t *)((char *)v5 + v6 + 120);
      uint64_t v17 = *v16;
      uint64_t *v16 = 0;
      *(void *)(v7 + 120) = v17;
      LODWORD(v17) = *(_DWORD *)((char *)v5 + v6 + 128);
      *((_DWORD *)v8 + 32) = 0;
      *(_DWORD *)(v7 + 128) = v17;
      LODWORD(v17) = *(_DWORD *)((char *)v5 + v6 + 132);
      *((_DWORD *)v8 + 33) = 0;
      *(_DWORD *)(v7 + 132) = v17;
      WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, a2);
      WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5 + v6 + 104, v18);
      long long v20 = *(WTF **)((char *)v5 + v6 + 88);
      if (v20)
      {
        *((void *)v8 + 11) = 0;
        *((_DWORD *)v8 + 24) = 0;
        WTF::fastFree(v20, v19);
      }
      WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5 + v6 + 72, v19);
      long long v21 = (_DWORD *)*((void *)v8 + 7);
      *((void *)v8 + 7) = 0;
      if (v21)
      {
        if (v21[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v21 + 16))(v21);
        }
        else {
          --v21[2];
        }
      }
      __n128 result = *(WTF::StringImpl **)v8;
      *(void *)unint64_t v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v6 += 136;
    }
    while ((WTF::StringImpl *)((char *)v5 + v6) != a2);
  }
  return result;
}

unsigned int *WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, WTF *this)
{
  if (result[2] > (unint64_t)this)
  {
    unint64_t v3 = result;
    if (result[3] > (unint64_t)this) {
      __n128 result = WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, this);
    }
    uint64_t v4 = *(WTF::StringImpl **)v3;
    if (this)
    {
      if ((unint64_t)this >= 0x1E1E1E2)
      {
        __break(0xC471u);
        return result;
      }
      unsigned int v5 = v3[3];
      uint64_t v6 = (WTF *)(136 * (void)this);
      __n128 result = (unsigned int *)WTF::fastMalloc(v6);
      v3[2] = (v6 & 0xFFFFFFF8) / 0x88;
      *(void *)unint64_t v3 = result;
      if (result != (unsigned int *)v4) {
        __n128 result = (unsigned int *)WTF::VectorMover<false,WebKit::PlatformCAAnimationRemoteProperties>::move(v4, (WTF::StringImpl *)((char *)v4 + 136 * v5), (uint64_t)result);
      }
    }
    if (v4)
    {
      if (*(WTF::StringImpl **)v3 == v4)
      {
        *(void *)unint64_t v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, this);
    }
  }
  return result;
}

unsigned int *WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int v2 = a2;
  unint64_t v3 = result;
  unint64_t v4 = result[3];
  if ((WTF::StringImpl *)v4 != a2)
  {
    uint64_t v5 = *(void *)result;
    uint64_t v6 = 136 * (void)a2;
    uint64_t v7 = 136 * v4;
    do
    {
      uint64_t v8 = v5 + v6;
      WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + v6 + 120, a2);
      WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + v6 + 104, v9);
      long long v11 = *(WTF **)(v5 + v6 + 88);
      if (v11)
      {
        *(void *)(v8 + 88) = 0;
        *(_DWORD *)(v8 + 96) = 0;
        WTF::fastFree(v11, v10);
      }
      WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v8 + 72, v10);
      uint64_t v12 = *(_DWORD **)(v8 + 56);
      *(void *)(v8 + 56) = 0;
      if (v12)
      {
        if (v12[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v12 + 16))(v12);
        }
        else {
          --v12[2];
        }
      }
      __n128 result = *(unsigned int **)v8;
      *(void *)uint64_t v8 = 0;
      if (result)
      {
        if (*result == 2) {
          __n128 result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        }
        else {
          *result -= 2;
        }
      }
      v7 -= 136;
      v5 += 136;
    }
    while (v6 != v7);
  }
  v3[3] = v2;
  return result;
}

CFTypeRef *WebKit::HidConnection::HidConnection(CFTypeRef *this, __IOHIDDevice *a2)
{
  *this = &unk_1EE9B5458;
  unint64_t v3 = (char *)(this + 2);
  WTF::RetainPtr<NSURLRequest>::RetainPtr(this + 1);
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v3);
  WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::Deque((WTF::RefCountedBase *)(this + 4));
  WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::Function(this + 8);
  *((unsigned char *)this + 72) = 0;
  return this;
}

{
  WebKit::HidConnection::HidConnection(this, a2);
  return this;
}

void sub_1989617B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(v11);
  _Unwind_Resume(a1);
}

WTF::RefCountedBase *WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::Deque(WTF::RefCountedBase *a1)
{
  return a1;
}

{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a1 + 16);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  return a1;
}

void WebKit::HidConnection::~HidConnection(WebKit::HidConnection *this)
{
  *(void *)this = &unk_1EE9B5458;
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~Function((uint64_t)this + 64);
  WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::~Deque((WebKit::HidConnection *)((char *)this + 32));
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebKit::HidConnection *)((char *)this + 16));
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)this + 1);
}

{
  WebKit::HidConnection::~HidConnection(this);
}

{
  void *v2;

  WebKit::HidConnection::~HidConnection(this);
  WTF::FastMalloc::free(this, v2);
}

WTF::RefCountedBase *WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::~Deque(WTF::RefCountedBase *a1)
{
  return a1;
}

{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::destroyAll(a1);
  WTF::VectorBuffer<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1 + 16);
  return a1;
}

void WebKit::HidConnection::initialize(WebKit::HidConnection *this)
{
  WTF::RetainPtr<__IOHIDDevice *>::get();
  IOHIDDeviceOpen(v2, 1u);
  WTF::RetainPtr<__IOHIDDevice *>::get();
  unint64_t v4 = v3;
  Current = CFRunLoopGetCurrent();
  IOHIDDeviceScheduleWithRunLoop(v4, Current, (CFStringRef)*MEMORY[0x1E4F1D418]);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((unsigned int *)this + 4);
  WTF::RetainPtr<__IOHIDDevice *>::get();
  uint64_t v7 = v6;
  uint64_t v8 = (uint8_t *)WTF::ASCIILiteral::characters((WebKit::HidConnection *)((char *)this + 16));
  CFIndex v9 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)this + 16);
  IOHIDDeviceRegisterInputReportCallback(v7, v8, v9, (IOHIDReportCallback)WebKit::reportReceived, this);
  *((unsigned char *)this + 72) = 1;
}

void WTF::RetainPtr<__IOHIDDevice *>::get()
{
}

void WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(unsigned int *a1)
{
  if (a1[3] < 0x40uLL)
  {
    if ((unint64_t)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)a1) < 0x40) {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)a1, 64);
    }
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
    if (WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)a1))
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a1);
      WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)a1);
      WTF::VectorTypeOperations<unsigned char>::destruct();
    }
  }
  else
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a1);
    WTF::VectorTypeOperations<unsigned char>::destruct();
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  }
  a1[3] = 64;
}

WTF::ASCIILiteral *WebKit::reportReceived(WebKit *this, void *a2, uint64_t a3, void *a4, IOHIDReportType a5, uint64_t a6, unsigned __int8 *a7)
{
  int v18 = this;
  int v17 = (int)a2;
  uint64_t v16 = a3;
  int v15 = (int)a4;
  IOHIDReportType v14 = a5;
  uint64_t v13 = a6;
  uint64_t v12 = a7;
  _OWORD v11[2] = (uint64_t)this;
  if (a2)
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v11);
    WebKit::HidConnection::receiveReport((uint64_t)this, v11);
    return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v11);
  }
  else
  {
    std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(v9, v13, (uint64_t)v12);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char,18446744073709551615ul>((WTF::ASCIILiteral *)v10, v9[0], v9[1]);
    WebKit::HidConnection::receiveReport((uint64_t)this, v10);
    return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v10);
  }
}

void sub_198961C08(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, int a14, int a15, uint64_t a16)
{
  a16 = a1;
  a15 = a2;
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&a12);
  JUMPOUT(0x198961C18);
}

uint64_t WebKit::HidConnection::terminate(WebKit::HidConnection *this)
{
  WTF::RetainPtr<__IOHIDDevice *>::get();
  unint64_t v3 = v2;
  unint64_t v4 = (uint8_t *)WTF::ASCIILiteral::characters((WebKit::HidConnection *)((char *)this + 16));
  CFIndex v5 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)this + 16);
  IOHIDDeviceRegisterInputReportCallback(v3, v4, v5, 0, 0);
  WTF::RetainPtr<__IOHIDDevice *>::get();
  uint64_t v7 = v6;
  Current = CFRunLoopGetCurrent();
  IOHIDDeviceUnscheduleFromRunLoop(v7, Current, (CFStringRef)*MEMORY[0x1E4F1D418]);
  WTF::RetainPtr<__IOHIDDevice *>::get();
  uint64_t result = IOHIDDeviceClose(v9, 0);
  *((unsigned char *)this + 72) = 0;
  return result;
}

BOOL WebKit::HidConnection::sendSync(uint64_t a1, WTF::ASCIILiteral *a2)
{
  WTF::RetainPtr<__IOHIDDevice *>::get();
  unint64_t v3 = v2;
  unint64_t v4 = (const uint8_t *)WTF::ASCIILiteral::characters(a2);
  CFIndex v5 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  return IOHIDDeviceSetReport(v3, kIOHIDReportTypeOutput, 0, v4, v5) == 0;
}

const void **WebKit::HidConnection::send(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v12 = a1;
  long long v11 = a2;
  uint64_t v10 = a3;
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v6);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v7, v11);
  WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler(&v8, v10);
  WTF::makeBlockPtr<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(&v9, (uint64_t *)&v6);
  WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::~$_0((uint64_t *)&v6);
  global_queue = dispatch_get_global_queue(0, 0);
  unint64_t v4 = (void *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)&v9);
  dispatch_async(global_queue, v4);
  return WTF::BlockPtr<void ()(void)>::~BlockPtr(&v9);
}

void sub_198961E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12)
{
}

uint64_t *WTF::makeBlockPtr<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(void *a1, uint64_t *a2)
{
  return WTF::makeBlockPtr<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &,void>(a1, a2, (uint64_t)WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator(), 0);
}

CFTypeRef *WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(CFTypeRef *a1)
{
  return a1;
}

void *WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Function<void ()(WTF::String const&)>::Function(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

uint64_t *WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::~$_0(uint64_t *a1)
{
  return a1;
}

{
  WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::~CompletionHandler((WTF::ThreadLikeAssertion *)(a1 + 3));
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(a1 + 1));
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(a1);
  return a1;
}

const void **WTF::BlockPtr<void ()(void)>::~BlockPtr(const void **a1)
{
  return a1;
}

{
  _Block_release(*a1);
  return a1;
}

uint64_t WebKit::HidConnection::registerDataReceivedCallback(WebKit::HidConnection *a1)
{
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator=((uint64_t)a1 + 64);
  WebKit::HidConnection::consumeReports(a1);
  return (*(uint64_t (**)(WebKit::HidConnection *))(*(void *)a1 + 48))(a1);
}

BOOL WebKit::HidConnection::consumeReports(WebKit::HidConnection *this)
{
  CFIndex v5 = this;
  while (1)
  {
    BOOL isEmpty = WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::isEmpty((void *)this + 4);
    BOOL result = 0;
    if (!isEmpty) {
      BOOL result = WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL();
    }
    if (!result) {
      break;
    }
    WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::takeFirst((uint64_t)v4, (WebKit::HidConnection *)((char *)this + 32));
    WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()();
    WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v4);
  }
  return result;
}

uint64_t WebKit::HidConnection::unregisterDataReceivedCallback(WebKit::HidConnection *this)
{
  return WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator=((uint64_t)this + 64);
}

BOOL WebKit::HidConnection::receiveReport(uint64_t a1, uint64_t *a2)
{
  return WebKit::HidConnection::consumeReports((WebKit::HidConnection *)a1);
}

void WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::append(WTF::RefCountedBase *a1, uint64_t *a2)
{
}

BOOL WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::isEmpty(void *a1)
{
  return *a1 == a1[1];
}

void WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::takeFirst(uint64_t a1, WTF *a2)
{
  unint64_t v4 = (uint64_t *)WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::first(a2);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, v4);
  WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::removeFirst(a2);
}

WTF::ASCIILiteral *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char,18446744073709551615ul>(WTF::ASCIILiteral *a1, uint64_t a2, uint64_t a3)
{
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char,18446744073709551615ul>(a1, a2, a3);
}

{
  WTF::FastMalloc *v4;
  int v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void v11[2];
  WTF::ASCIILiteral *v12;

  v11[0] = a2;
  v11[1] = a3;
  uint64_t v12 = a1;
  unint64_t v4 = (WTF::FastMalloc *)std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v11);
  CFIndex v5 = std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v11);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::VectorBuffer((uint64_t)a1, v4, v5);
  std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v11);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  if (WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1))
  {
    CFTypeRef v6 = (const void *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v11);
    uint64_t v7 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v11);
    uint64_t v8 = v7 + std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v11);
    IOHIDDeviceRef v9 = (void *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::VectorMover<true,WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::move(v6, v8, v9);
  }
  return v12;
}

uint64_t *WTF::makeBlockPtr<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &,void>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v6[9] = (uint64_t)a1;
  v6[8] = a4;
  v6[7] = a3;
  v6[6] = (uint64_t)a2;
  v6[5] = a4;
  v6[4] = a3;
  WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::$_0(v6, a2);
  WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(a1, v6);
  return WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::~$_0(v6);
}

void sub_1989623A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12)
{
}

WTF::ThreadLikeAssertion *WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(uint64_t a1)
{
  uint64_t v13 = a1;
  WTF::RetainPtr<__IOHIDDevice *>::get();
  unint64_t v3 = v2;
  unint64_t v4 = (const uint8_t *)WTF::ASCIILiteral::characters((WTF::ASCIILiteral *)(a1 + 8));
  CFIndex v5 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1 + 8);
  CFTypeRef v6 = (WTF::RunLoop *)IOHIDDeviceSetReport(v3, kIOHIDReportTypeOutput, 0, v4, v5);
  int v11 = (int)v6;
  BOOL v12 = v6 == 0;
  WTF::RunLoop::main(v6);
  WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler(&v8, a1 + 24);
  BOOL v9 = v12;
  WTF::Function<void ()(void)>::Function<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>(&v10, (uint64_t)&v8);
  WTF::RunLoop::dispatch();
  WTF::Function<void ()(void)>::~Function((uint64_t)&v10);
  return WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1}::~((WTF::ThreadLikeAssertion *)&v8);
}

void sub_19896249C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13, uint64_t a14, char a15)
{
}

void *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(void *a1, uint64_t *a2)
{
  uint64_t v10 = a1;
  BOOL v9 = a2;
  uint64_t v8 = (char *)malloc_type_malloc(0x40uLL, 0x10F00405DA93598uLL);
  *(void *)uint64_t v8 = MEMORY[0x1E4F14398];
  int v7 = 1;
  *((_DWORD *)v8 + 2) = 50331650;
  *((_DWORD *)v8 + 3) = 0;
  unint64_t v4 = (WTF::ThreadLikeAssertion *(**)(uint64_t))(v8 + 16);
  WTF::RefCountedBase::applyRefDerefThreadingCheck((WTF::RefCountedBase *)&v6);
  const uint8_t *v4 = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void *)#1}::__invoke;
  *((void *)v8 + 3) = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::descriptor;
  WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::$_0((void *)v8 + 4, a2);
  BOOL result = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  *a1 = v8;
  return result;
}

void *WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::$_0(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(a1, a2);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 1), a2 + 1);
  WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler(a1 + 3, (uint64_t)(a2 + 3));
  return a1;
}

uint64_t *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v3 = a1;
  return WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void const*)#1}::operator()((uint64_t)&v2, a1);
}

uint64_t *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void const*)#1}::operator()(uint64_t a1, uint64_t a2)
{
  return WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::~$_0((uint64_t *)(a2 + 32));
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v3 = a1;
  return WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void *)#1}::operator()((uint64_t)&v2, a1);
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  return WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(a2 + 32);
}

void sub_198962754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(v11);
  _Unwind_Resume(a1);
}

void *WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(void *a1, uint64_t *a2)
{
  return a1;
}

{
  uint64_t v3;

  WTF::RetainPtr<__IOHIDDevice *>::leakRef<__IOHIDDevice *>(a2);
  std::__to_address[abi:sn180100]<char const>();
  *a1 = v3;
  return a1;
}

void WTF::RetainPtr<__IOHIDDevice *>::leakRef<__IOHIDDevice *>(uint64_t *a1)
{
}

void *WTF::Function<void ()(void)>::Function<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

WTF::ThreadLikeAssertion *WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1}::~(WTF::ThreadLikeAssertion *a1)
{
  return a1;
}

{
  WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::~CompletionHandler(a1);
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&>(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x18);
  WTF::Detail::CallableWrapper<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_19896296C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::CallableWrapper(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B54C0;
  WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1}::((uint64_t)(a1 + 1), a2);
  return a1;
}

void sub_198962A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
}

uint64_t WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1}::(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler((void *)a1, a2);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8) & 1;
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B54C0;
  WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1}::~((WTF::ThreadLikeAssertion *)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()((WTF::RefCountedBase *)(a1 + 8));
}

uint64_t WebKit::HidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(WTF::RefCountedBase *a1)
{
  return WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::operator()(a1, *((unsigned char *)a1 + 8) & 1);
}

uint64_t WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::operator()(WTF::RefCountedBase *a1, char a2)
{
  char v6 = a1;
  char v5 = a2 & 1;
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  std::exchange[abi:sn180100]<WTF::Function<void ()(WebKit::HidConnection::DataSent)>,decltype(nullptr)>(&v4, (uint64_t)a1);
  WTF::Function<void ()(WebKit::HidConnection::DataSent)>::operator()();
  return WTF::Function<void ()(WebKit::HidConnection::DataSent)>::~Function((uint64_t)&v4);
}

void sub_198962C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, char a13)
{
}

void std::exchange[abi:sn180100]<WTF::Function<void ()(WebKit::HidConnection::DataSent)>,decltype(nullptr)>(void *a1, uint64_t a2)
{
  WTF::Function<void ()(WebKit::HidConnection::DataSent)>::operator=(a2);
}

uint64_t WTF::Function<void ()(WebKit::HidConnection::DataSent)>::operator()()
{
  uint64_t v0 = *(void *)std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void WTF::Function<void ()(WebKit::HidConnection::DataSent)>::operator=(uint64_t a1)
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>>::operator=[abi:sn180100](a1);
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>>::operator=[abi:sn180100](uint64_t a1)
{
}

void sub_198962E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::Function<void ()(WebKit::HidConnection::DataSent)>::~Function(v11);
  _Unwind_Resume(a1);
}

uint64_t WTF::VectorBuffer<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::FastMalloc>::~VectorBuffer(uint64_t a1)
{
  return a1;
}

{
  WTF::FastMalloc *v2;

  char v2 = (WTF::FastMalloc *)std::span<char const,18446744073709551615ul>::data[abi:sn180100](a1);
  WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::deallocateBuffer(a1, v2);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

void sub_198962F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
}

void sub_198962FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  WTF::VectorBuffer<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::FastMalloc>::~VectorBuffer(v12 + 16);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(WTF::ASCIILiteral *a1, uint64_t a2)
{
  v8[1] = a1;
  v8[0] = a2;
  uint64_t v7 = 16;
  unint64_t v9 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)a1);
  uint64_t v6 = v9 + (v9 >> 2) + 1;
  uint64_t v3 = std::max[abi:sn180100]<unsigned long>(&v7, &v6);
  uint64_t v4 = (WTF::FastMalloc **)std::max[abi:sn180100]<unsigned long>(v8, v3);
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *v4);
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::ASCIILiteral *a1, WTF::FastMalloc *a2)
{
  if ((unint64_t)a2 > WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)a1))
  {
    uint64_t v6 = (void *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    uint64_t v5 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
    WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)a1, a2);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
    uint64_t v3 = (void *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::VectorTypeOperations<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::move(v6, v5, v3);
    WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::deallocateBuffer((uint64_t)a1, (WTF::FastMalloc *)v6);
  }
  return 1;
}

void WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::append<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::RefCountedBase *a1, uint64_t *a2)
{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::expandCapacityIfNeeded(a1);
  std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1 + 16);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator new();
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v3, a2);
  uint64_t v4 = *((void *)a1 + 1);
  if (v4 == WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)a1 + 16)
           - 1)
    *((void *)a1 + 1) = 0;
  else {
    ++*((void *)a1 + 1);
  }
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
}

void WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::expandCapacityIfNeeded(WTF::RefCountedBase *a1)
{
  if (*(void *)a1)
  {
    if (*((void *)a1 + 1) + 1 != *(void *)a1) {
      return;
    }
  }
  else if (*((void *)a1 + 1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if (v2 != WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)a1 + 16)
             - 1)
      return;
  }
  else if (WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)a1 + 16))
  {
    return;
  }
  WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::expandCapacity(a1);
}

void WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::expandCapacity(WTF::RefCountedBase *a1)
{
  int v18 = a1;
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  unint64_t v17 = WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)a1 + 16);
  uint64_t v16 = (WTF::FastMalloc *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1 + 16);
  uint64_t v15 = 16;
  uint64_t v14 = v17 + (v17 >> 2) + 1;
  unint64_t v2 = *std::max[abi:sn180100]<unsigned long>(&v15, &v14);
  long long v20 = (void *)((char *)a1 + 16);
  unint64_t v19 = v2;
  WTF::VectorBufferBase<WebCore::HTTPHeaderMap::CommonHeader,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)a1 + 16, v2);
  if (*(void *)a1 > *((void *)a1 + 1))
  {
    uint64_t v6 = v16;
    uint64_t v7 = (uint64_t *)((char *)v16 + 16 * *((void *)a1 + 1));
    uint64_t v8 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1 + 16);
    WTF::VectorTypeOperations<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(v6, v7, v8);
    uint64_t v9 = WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)a1 + 16);
    unint64_t v13 = v9 - (v17 - *(void *)a1);
    uint64_t v10 = (WTF::FastMalloc *)((char *)v16 + 16 * *(void *)a1);
    uint64_t v11 = (uint64_t *)((char *)v16 + 16 * v17);
    uint64_t v12 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1 + 16);
    WTF::VectorTypeOperations<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(v10, v11, v12 + 16 * v13);
    *(void *)a1 = v13;
  }
  else
  {
    uint64_t v3 = (WTF::FastMalloc *)((char *)v16 + 16 * *(void *)a1);
    uint64_t v4 = (uint64_t *)((char *)v16 + 16 * *((void *)a1 + 1));
    uint64_t v5 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1 + 16);
    WTF::VectorTypeOperations<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(v3, v4, v5 + 16 * *(void *)a1);
  }
  WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::deallocateBuffer((uint64_t)a1 + 16, v16);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
}

WTF::ASCIILiteral *WTF::VectorTypeOperations<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(WTF::ASCIILiteral *a1, uint64_t *a2, uint64_t a3)
{
  return WTF::VectorMover<false,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(a1, a2, a3);
}

WTF::ASCIILiteral *WTF::VectorMover<false,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(WTF::ASCIILiteral *result, uint64_t *a2, uint64_t a3)
{
  for (int i = (uint64_t *)result; i != a2; i += 2)
  {
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator new();
    WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v3, i);
    BOOL result = WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)i);
    a3 += 16;
  }
  return result;
}

uint64_t WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::first(WTF *a1)
{
  if (*(void *)a1 == *((void *)a1 + 1))
  {
    isIntegralOrPointerType = (WTF *)WTF::isIntegralOrPointerType(a1);
    WTF::isIntegralOrPointerType(isIntegralOrPointerType);
    __break(0xC471u);
    JUMPOUT(0x198963618);
  }
  return std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1 + 16) + 16 * *(void *)a1;
}

void WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::removeFirst(WTF::RefCountedBase *a1)
{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  BOOL isEmpty = WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::isEmpty(a1);
  if (isEmpty)
  {
    isIntegralOrPointerType = (WTF *)WTF::isIntegralOrPointerType((WTF *)isEmpty);
    WTF::isIntegralOrPointerType(isIntegralOrPointerType);
    __break(0xC471u);
    JUMPOUT(0x198963734);
  }
  uint64_t v4 = (WTF::ASCIILiteral *)(std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1 + 16)
                           + 16 * *(void *)a1);
  uint64_t v5 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1 + 16);
  WTF::VectorTypeOperations<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(v4, (WTF::ASCIILiteral *)(v5 + 16 * (*(void *)a1 + 1)));
  uint64_t v6 = *(void *)a1;
  if (v6 == WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)a1 + 16)
           - 1)
    *(void *)a1 = 0;
  else {
    ++*(void *)a1;
  }
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
}

WebKit::HidService *WebKit::HidService::HidService(WebKit::HidService *this, WebKit::AuthenticatorTransportServiceObserver *a2)
{
  v7[2] = (uint64_t)this;
  v7[1] = (uint64_t)a2;
  WebKit::FidoService::FidoService(this, a2);
  *(void *)this = &unk_1EE9B54E8;
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable((void *)this + 4);
  IOHIDManagerCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  WTF::adoptCF<__IOHIDManager *>(v7);
  WTF::RetainPtr<__IOHIDManager *>::operator=((uint64_t *)this + 4, v7);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(v7);
  WTF::RetainPtr<__IOHIDDevice *>::get();
  IOHIDManagerSetDeviceMatching(v3, (CFDictionaryRef)&unk_1EEA531B0);
  WTF::RetainPtr<__IOHIDDevice *>::get();
  IOHIDManagerRegisterDeviceMatchingCallback(v4, (IOHIDDeviceCallback)WebKit::deviceAddedCallback, this);
  WTF::RetainPtr<__IOHIDDevice *>::get();
  IOHIDManagerRegisterDeviceRemovalCallback(v5, (IOHIDDeviceCallback)WebKit::deviceRemovedCallback, this);
  return this;
}

{
  WebKit::HidService::HidService(this, a2);
  return this;
}

void sub_1989638D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13)
{
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(v14);
  WebKit::FidoService::~FidoService(v13);
  _Unwind_Resume(a1);
}

void *WTF::adoptCF<__IOHIDManager *>(void *a1)
{
  return WTF::RetainPtr<__IOHIDManager *>::RetainPtr(a1);
}

uint64_t *WTF::RetainPtr<__IOHIDManager *>::operator=(uint64_t *a1, uint64_t *a2)
{
  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(v4, a2);
  WTF::RetainPtr<NSURLRequest>::swap(a1, v4);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(v4);
}

uint64_t WebKit::deviceAddedCallback(WebKit *this, void *a2, int a3, __IOHIDDevice *a4, __IOHIDDevice *a5)
{
  return WebKit::HidService::deviceAdded(this, a4);
}

void WebKit::FidoService::~FidoService(WebKit::FidoService *this)
{
  *(void *)this = &unk_1EE9B5558;
  WTF::HashSet<std::unique_ptr<WebKit::CtapDriver>,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTableTraits>::~HashSet((WebKit::FidoService *)((char *)this + 24));
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(this);
}

{
  __break(1u);
}

{
  __break(1u);
}

void WebKit::HidService::~HidService(WebKit::HidService *this)
{
  *(void *)this = &unk_1EE9B54E8;
  WTF::RetainPtr<__IOHIDDevice *>::get();
  IOHIDManagerRef v3 = v2;
  Current = CFRunLoopGetCurrent();
  IOHIDManagerUnscheduleFromRunLoop(v3, Current, (CFStringRef)*MEMORY[0x1E4F1D418]);
  WTF::RetainPtr<__IOHIDDevice *>::get();
  IOHIDManagerClose(v5, 0);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)this + 4);
  WebKit::FidoService::~FidoService(this);
}

{
  WebKit::HidService::~HidService(this);
}

{
  void *v2;

  WebKit::HidService::~HidService(this);
  WTF::FastMalloc::free(this, v2);
}

void sub_198963B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(v12 + 4);
  WebKit::FidoService::~FidoService((WebKit::FidoService *)v12);
  _Unwind_Resume(a1);
}

uint64_t WebKit::HidService::startDiscoveryInternal(WebKit::HidService *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 32))();
}

uint64_t WebKit::HidService::platformStartDiscovery(WebKit::HidService *this)
{
  WTF::RetainPtr<__IOHIDDevice *>::get();
  unint64_t v2 = v1;
  Current = CFRunLoopGetCurrent();
  IOHIDManagerScheduleWithRunLoop(v2, Current, (CFStringRef)*MEMORY[0x1E4F1D418]);
  WTF::RetainPtr<__IOHIDDevice *>::get();
  return IOHIDManagerOpen(v4, 0);
}

void *WebKit::HidService::createHidConnection@<X0>(WebKit::HidService *this@<X0>, __IOHIDDevice *a2@<X1>, __IOHIDDevice *a3@<X8>)
{
  v4[2] = a3;
  v4[1] = this;
  v4[0] = a2;
  return WTF::makeUniqueRef<WebKit::HidConnection,__IOHIDDevice *&>(a3, v4);
}

void *WTF::makeUniqueRef<WebKit::HidConnection,__IOHIDDevice *&>(WebKit::CtapDriver *a1, __IOHIDDevice **a2)
{
  return WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::HidConnection,__IOHIDDevice *&>(a1, a2);
}

uint64_t WebKit::HidService::deviceAdded(WebKit::HidService *this, __IOHIDDevice *a2)
{
  _OWORD v6[2] = (uint64_t)this;
  v6[1] = (uint64_t)a2;
  (*(void (**)(uint64_t *__return_ptr, WebKit::HidService *, __IOHIDDevice *))(*(void *)this + 40))(&v4, this, a2);
  v6[4] = (uint64_t)v5;
  v6[3] = (uint64_t)&v4;
  std::make_unique[abi:sn180100]<WebKit::CtapHidDriver,WTF::UniqueRef<WebKit::HidConnection>>((WebKit::CtapDriver *)v5, (uint64_t)&v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(v6, (uint64_t)v5);
  WebKit::FidoService::getInfo((uint64_t)this, v6);
  std::unique_ptr<WebKit::CtapDriver>::~unique_ptr[abi:sn180100]((uint64_t)v6);
  std::unique_ptr<WebKit::CtapHidDriver>::~unique_ptr[abi:sn180100]((uint64_t)v5);
  return WTF::UniqueRef<WebKit::HidConnection>::~UniqueRef((uint64_t)&v4);
}

void sub_198963D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13)
{
}

uint64_t std::unique_ptr<WebKit::CtapHidDriver>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WebKit::CtapHidDriver>::reset[abi:sn180100]();
  return a1;
}

void WebKit::AuthenticatorTransportService::restartDiscoveryInternal(WebKit::AuthenticatorTransportService *this)
{
}

void *WTF::RetainPtr<__IOHIDManager *>::RetainPtr(void *a1)
{
  return a1;
}

{
  uint64_t v2;

  std::__to_address[abi:sn180100]<char const>();
  *a1  = v2;
  return a1;
}

WTF::RefCountedBase *WTF::HashSet<std::unique_ptr<WebKit::CtapDriver>,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTableTraits>::~HashSet(WTF::RefCountedBase *a1)
{
  return a1;
}

{
  WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::~HashTable(a1);
  return a1;
}

void WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(WebKit::AuthenticatorTransportService *this)
{
  *(void *)this  = &unk_1EE9B5528;
  WTF::WeakPtr<WebKit::CtapAuthenticator,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr((uint64_t *)this + 2);
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportService,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase((uint64_t *)this + 1);
}

{
  __break(1u);
}

{
  __break(1u);
}

WTF::RefCountedBase *WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::~HashTable(WTF::RefCountedBase *a1)
{
  return a1;
}

{
  void *v2;

  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  if (*(void *)a1) {
    WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::deallocateTable(*(void *)a1, v2);
  }
  return a1;
}

uint64_t WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::deallocateTable(uint64_t a1, void *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 - 4);
  for (unsigned int i = 0; i < v4; ++i)
  {
    if (!WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::isDeletedBucket()) {
      std::unique_ptr<WebKit::CtapDriver>::~unique_ptr[abi:sn180100](a1 + 8 * i);
    }
  }
  return WTF::FastMalloc::free((WTF::FastMalloc *)(a1 - 16), a2);
}

BOOL WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::isDeletedBucket()
{
  return WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>::isDeletedValue();
}

BOOL WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>::isDeletedValue()
{
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]() == -1;
}

uint64_t *WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportService,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(uint64_t *a1)
{
  return a1;
}

uint64_t *WTF::WeakPtrFactory<WebKit::AuthenticatorTransportService,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(uint64_t *a1)
{
  return a1;
}

{
  void v4[5];
  WTF::ThreadSafeRefCountedBase *v5;
  void *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  if (WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(a1))
  {
    uint64_t v8 = a1;
    uint64_t v9 = a1;
    WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::clear(*a1);
  }
  v4[1]  = a1;
  v4[0]  = 0;
  uint64_t v7 = a1;
  uint64_t v6 = v4;
  IOHIDManagerRef v5 = (WTF::ThreadSafeRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v5) {
    WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(v5);
  }
  return a1;
}

void *std::make_unique[abi:sn180100]<WebKit::CtapHidDriver,WTF::UniqueRef<WebKit::HidConnection>>(WebKit::CtapDriver *a1, uint64_t a2)
{
  uint64_t v3 = WebKit::CtapDriver::operator new(a1);
  WebKit::CtapHidDriver::CtapHidDriver(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, v3);
}

void sub_198964274(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::CtapDriver::operator new(WebKit::CtapDriver *this)
{
  return WTF::fastMalloc((WTF *)0x50);
}

void std::unique_ptr<WebKit::CtapHidDriver>::reset[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v3 = *v0;
  std::to_address[abi:sn180100]<char const>();
  *BOOL v1 = 0;
  if (v3)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WebKit::CtapHidDriver>::operator()[abi:sn180100](v2, v3);
  }
}

uint64_t std::default_delete<WebKit::CtapHidDriver>::operator()[abi:sn180100](uint64_t a1, unsigned int **a2)
{
  if (a2)
  {
    WebKit::CtapHidDriver::~CtapHidDriver(a2);
    return WTF::FastMalloc::free((WTF::FastMalloc *)a2, v3);
  }
  return result;
}

void *WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::HidConnection,__IOHIDDevice *&>(WebKit::CtapDriver *a1, __IOHIDDevice **a2)
{
  uint64_t v3 = (CFTypeRef *)WebKit::CtapDriver::operator new(a1);
  WebKit::HidConnection::HidConnection(v3, *a2);
  return WTF::UniqueRef<WebKit::CtapHidDriverWorker>::UniqueRef(a1, (uint64_t)v3);
}

void sub_1989643F4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

void WebKit::InjectedBundleNodeHandle::getOrCreate(const OpaqueJSContext *a1@<X1>, JSValue a2@<X2>, WebKit::InjectedBundleNodeHandle **a3@<X8>)
{
  IOHIDManagerRef v5 = (WebCore::JSNode **)((char *)a1 - 16);
  if ((a1 & 8) == 0) {
    IOHIDManagerRef v5 = (WebCore::JSNode **)((unint64_t)a1 & 0xFFFFFFFFFFFFC000 | 8);
  }
  uint64_t v6 = (WebKit::InjectedBundleNodeHandle *)WebCore::JSNode::toWrapped(*v5, a1, a2);
  if (v6)
  {
    WebKit::InjectedBundleNodeHandle::getOrCreate(v6, &v8);
    uint64_t v7 = v8;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a3  = v7;
}

void WebKit::InjectedBundleNodeHandle::getOrCreate(WebKit::InjectedBundleNodeHandle *this@<X0>, WebKit::InjectedBundleNodeHandle **a2@<X8>)
{
  {
    WebKit::domNodeHandleCache(void)::cache  = 0;
    *(void *)&dword_1EB35A4C0  = 0;
  }
  uint64_t v5 = WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::get((uint64_t)&WebKit::domNodeHandleCache(void)::cache, (uint64_t)this);
  if (v5)
  {
    uint64_t v8 = (WebKit::InjectedBundleNodeHandle *)v5;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    *a2  = v8;
  }
  else
  {
    WebKit::InjectedBundleNodeHandle::create(this, a2);
    uint64_t v6 = *a2;
    uint64_t v7 = (void *)*((void *)*a2 + 6);
    if (v7)
    {
      {
        WebKit::domNodeHandleCache(void)::cache  = 0;
        *(void *)&dword_1EB35A4C0  = 0;
      }
      WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::add<WebKit::InjectedBundleNodeHandle&>((uint64_t)&WebKit::domNodeHandleCache(void)::cache, v7, (uint64_t)v6, (uint64_t)v9);
    }
  }
}

uint64_t WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::get(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 8);
  uint64_t v2 = *(void *)(a2 + 16) & 0xFFFFFFFFFFFFLL;
  if (v2 && *(void *)(v2 + 8)) {
    return WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>((uint64_t *)a1, v2);
  }
  else {
    return 0;
  }
}

uint64_t WebKit::InjectedBundleNodeHandle::create@<X0>(WebKit::InjectedBundleNodeHandle *this@<X0>, WebKit::InjectedBundleNodeHandle **a2@<X8>)
{
  uint64_t v5 = (WebKit::InjectedBundleNodeHandle *)API::Object::newObject(0x38uLL, 139);
  uint64_t v6 = WebKit::InjectedBundleNodeHandle::InjectedBundleNodeHandle(v5, this);
  *a2  = v6;
  uint64_t v7 = (char *)v6 + 16;

  return MEMORY[0x1F416DF30](v7);
}

double WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::add<WebKit::InjectedBundleNodeHandle&>@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8)  = v8 + 1;
  if (v8 > v9) {
    WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(a1, a2);
  }
  WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::makeKeyImpl<WebCore::Node>((uint64_t)a2, (unsigned int **)v18);
  WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::InjectedBundleNodeHandle&>((uint64_t *)a1, v18, a3, (uint64_t)&v20);
  uint64_t v11 = *(unsigned int **)v18;
  *(void *)int v18 = 0;
  if (v11) {
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v11, v10);
  }
  *(void *)int v18 = a1;
  *(_OWORD *)&v18[8]  = v20;
  uint64_t v12 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v13 = *(unsigned int *)(v12 - 4);
    uint64_t v14 = v12 + 16 * v13;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v13 = 0;
  }
  *(void *)&unsigned char v18[24] = v14;
  *(void *)&long long v19 = v12 + 16 * v13;
  DWORD2(v19)  = 0;
  WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::PeekPtrType,WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::PeekType>::skipEmptyBuckets(v18);
  char v15 = v21;
  long long v16 = *(_OWORD *)&v18[16];
  *(_OWORD *)a4  = *(_OWORD *)v18;
  *(_OWORD *)(a4 + 16)  = v16;
  double result = *(double *)&v19;
  *(_OWORD *)(a4 + 32)  = v19;
  *(unsigned char *)(a4 + 48)  = v15;
  return result;
}

WebKit::InjectedBundleNodeHandle *WebKit::InjectedBundleNodeHandle::InjectedBundleNodeHandle(WebKit::InjectedBundleNodeHandle *this, WebCore::Node *a2)
{
  *(void *)this  = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this  = &unk_1EE9B5620;
  WebCore::ActiveDOMObject::ActiveDOMObject((WebKit::InjectedBundleNodeHandle *)((char *)this + 16), *(Document **)(*((void *)a2 + 6) + 8));
  *((void *)this + 5)  = 0;
  *(void *)this  = &unk_1EE9B5588;
  *((void *)this + 2)  = &unk_1EE9B55C8;
  *((_DWORD *)a2 + 7) += 2;
  *((void *)this + 6)  = a2;
  return this;
}

void WebKit::InjectedBundleNodeHandle::~InjectedBundleNodeHandle(WebKit::InjectedBundleNodeHandle *this, void *a2)
{
  *(void *)this  = &unk_1EE9B5588;
  uint64_t v3 = (WebKit::InjectedBundleNodeHandle *)((char *)this + 16);
  *((void *)this + 2)  = &unk_1EE9B55C8;
  unsigned int v4 = (unsigned int *)*((void *)this + 6);
  if (v4)
  {
    {
      WebKit::domNodeHandleCache(void)::cache  = 0;
      *(void *)&dword_1EB35A4C0  = 0;
    }
    WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::remove(v4, a2);
    uint64_t v5 = *((void *)this + 6);
    *((void *)this + 6)  = 0;
    if (v5)
    {
      if (*(_DWORD *)(v5 + 28) == 2)
      {
        if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v5);
        }
      }
      else
      {
        *(_DWORD *)(v5 + 28) -= 2;
      }
    }
  }
  else
  {
    *((void *)this + 6)  = 0;
  }
  uint64_t v6 = *((void *)this + 5);
  if (v6)
  {
    *(void *)(v6 + 8)  = 0;
    uint64_t v7 = (unsigned int *)*((void *)this + 5);
    *((void *)this + 5)  = 0;
    if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  else
  {
    *((void *)this + 5)  = 0;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(v3);
}

{
  uint64_t vars8;

  WebKit::InjectedBundleNodeHandle::~InjectedBundleNodeHandle(this, a2);

  JUMPOUT(0x199740C10);
}

unsigned int *WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::remove(unsigned int *result, void *a2)
{
  uint64_t v2 = result;
  unsigned int v3 = dword_1EB35A4C0++;
  if (v3 > *(_DWORD *)algn_1EB35A4C4) {
    double result = (unsigned int *)WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences((uint64_t)&WebKit::domNodeHandleCache(void)::cache, a2);
  }
  uint64_t v4 = *((void *)v2 + 2);
  uint64_t v5 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0xFFFFFFFFFFFFLL) != 0
    && *(void *)((v4 & 0xFFFFFFFFFFFFLL) + 8)
    && WebKit::domNodeHandleCache(void)::cache)
  {
    int v6 = *(_DWORD *)(WebKit::domNodeHandleCache(void)::cache - 8);
    unint64_t v7 = (v5 + ~(v4 << 32)) ^ ((unint64_t)(v5 + ~(v4 << 32)) >> 22);
    unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    unsigned int v10 = v6 & ((v9 >> 31) ^ v9);
    for (int i = 1; ; ++i)
    {
      uint64_t v12 = v10;
      uint64_t v13 = *(void *)(WebKit::domNodeHandleCache(void)::cache + 16 * v10);
      if (v13 != -1)
      {
        if (!v13) {
          return result;
        }
        if (v13 == v5) {
          break;
        }
      }
      unsigned int v10 = (v12 + i) & v6;
    }
    if (v12 != *(_DWORD *)(WebKit::domNodeHandleCache(void)::cache - 4))
    {
      double result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>::customDeleteBucket((unsigned int **)(WebKit::domNodeHandleCache(void)::cache + 16 * v12), a2);
      ++*(_DWORD *)(WebKit::domNodeHandleCache(void)::cache - 16);
      int v14 = WebKit::domNodeHandleCache(void)::cache ? *(_DWORD *)(WebKit::domNodeHandleCache(void)::cache - 12) - 1 : -1;
      *(_DWORD *)(WebKit::domNodeHandleCache(void)::cache - 12)  = v14;
      if (WebKit::domNodeHandleCache(void)::cache)
      {
        unsigned int v15 = *(_DWORD *)(WebKit::domNodeHandleCache(void)::cache - 4);
        if (6 * *(_DWORD *)(WebKit::domNodeHandleCache(void)::cache - 12) < v15 && v15 >= 9)
        {
          return (unsigned int *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(&WebKit::domNodeHandleCache(void)::cache, v15 >> 1, 0);
        }
      }
    }
  }
  return result;
}

void non-virtual thunk to'WebKit::InjectedBundleNodeHandle::~InjectedBundleNodeHandle(WebKit::InjectedBundleNodeHandle *this, void *a2)
{
}

{
  uint64_t vars8;

  WebKit::InjectedBundleNodeHandle::~InjectedBundleNodeHandle((WebKit::InjectedBundleNodeHandle *)((char *)this - 16), a2);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::InjectedBundleNodeHandle::elementBounds(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (!v1) {
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 28);
  *(_DWORD *)(v1 + 28)  = v2 + 2;
  if ((*(_WORD *)(v1 + 32) & 8) == 0)
  {
    if (v2)
    {
      uint64_t v3 = 0;
      goto LABEL_4;
    }
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
    return 0;
  }
  uint64_t v3 = WebCore::Element::boundsInRootViewSpace((WebCore::Element *)v1);
  int v2 = *(_DWORD *)(v1 + 28) - 2;
  if (*(_DWORD *)(v1 + 28) != 2)
  {
LABEL_4:
    *(_DWORD *)(v1 + 28)  = v2;
    return v3;
  }
  if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return v3;
}

WebCore::RenderObject *WebKit::InjectedBundleNodeHandle::renderedImage@<X0>(WebCore::RenderObject *result@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = *((void *)result + 6);
  if (v6
    && (unint64_t v7 = result,
        double result = *(WebCore::RenderObject **)(*(void *)(v6 + 48) + 8),
        (uint64_t v8 = *((void *)result + 68)) != 0)
    && (uint64_t v9 = *(void *)(v8 + 8)) != 0
    && (unsigned int v10 = *(WebCore::LocalFrameView **)(v9 + 288)) != 0
    && (WebCore::Document::updateLayout(),
        (double result = (WebCore::RenderObject *)(*(void *)(*((void *)v7 + 6) + 72) & 0xFFFFFFFFFFFFLL)) != 0))
  {
    if (a3)
    {
      unint64_t v14 = WebCore::RenderObject::absoluteBoundingBoxRect(result, 0, 0);
      unint64_t v16 = v15;
    }
    else
    {
      v50[0]  = 0;
      v50[1]  = 0;
      uint64_t v17 = WebCore::RenderObject::paintingRootRect(result, (WebCore::LayoutRect *)v50);
      unsigned int v20 = v17 - (v19 & 0xFFFFFFC0);
      int v21 = v20 + 32;
      unsigned int v23 = HIDWORD(v17) - (v22 & 0xFFFFFFC0);
      int v24 = v23 + 32;
      unint64_t v14 = (((int)(v20 + 32) >> 6) + (int)v17 / 64) | ((unint64_t)(((int)(v23 + 32) >> 6) + SHIDWORD(v17) / 64) << 32);
      BOOL v26 = __OFADD__(v20, v25);
      int v27 = v20 + v25;
      int v28 = (v20 >> 31) + 0x7FFFFFFF;
      if (!v26) {
        int v28 = v27;
      }
      uint64_t v29 = (v28 / 64 - (v21 >> 6) + ((int)(v28 - (v27 & 0xFFFFFFC0) + 32) >> 6));
      BOOL v26 = __OFADD__(v23, v18);
      int v30 = v23 + v18;
      int v31 = (v23 >> 31) + 0x7FFFFFFF;
      if (!v26) {
        int v31 = v30;
      }
      unint64_t v16 = v29 | ((unint64_t)(v31 / 64 - (v24 >> 6) + ((int)(v31 - (v30 & 0xFFFFFFC0) + 32) >> 6)) << 32);
    }
    WebCore::LocalFrameView::setNodeToDraw(v10, *((Node **)v7 + 6));
    unint64_t v32 = HIDWORD(v16);
    if ((int)v16 < 1 || SHIDWORD(v16) <= 0) {
      goto LABEL_34;
    }
    if (*(unsigned char *)(a4 + 4))
    {
      float v34 = *(float *)a4 / (float)(int)v16;
      float v35 = roundf(*(float *)a4);
      unsigned int v36 = v35 > -2147500000.0 ? (int)v35 : 0x80000000;
      LODWORD(v16)  = v35 < 2147500000.0 ? v36 : 0x7FFFFFFF;
      float v37 = roundf(v34 * (float)(int)v32);
      if (v37 >= 2147500000.0) {
        LODWORD(v32)  = 0x7FFFFFFF;
      }
      else {
        LODWORD(v32)  = v37 <= -2147500000.0 ? 0x80000000 : (int)v37;
      }
    }
    else
    {
      float v34 = 1.0;
    }
    uint64_t v38 = (WebCore::DestinationColorSpace *)WebCore::LocalFrameView::frame(v10);
    float v39 = *(float *)(*(void *)(*((void *)v38 + 3) + 8) + 364);
    v52.i32[0]  = (int)(float)(v39 * (float)(int)v16);
    v52.i32[1]  = (int)(float)(v39 * (float)(int)v32);
    if (v52.i32[0] < 1 || (int)(float)(v39 * (float)(int)v32) <= 0)
    {
LABEL_34:
      *a5  = 0;
    }
    else
    {
      uint64_t v41 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB(v38);
      WebKit::WebImage::create(&v52, a2 & 1, v41, 0, (WebKit::WebImage *)&v51);
      uint64_t v42 = v51;
      uint64_t v43 = *(void *)(v51 + 16);
      if (v43)
      {
        (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
        uint64_t v44 = *(void *)(v51 + 16);
        if (v44) {
          uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 16))(v44);
        }
        else {
          uint64_t v45 = 0;
        }
        IntPoint v48 = 0;
        int32x2_t v49 = v52;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v50, (const WebCore::IntRect *)&v48);
        (*(void (**)(uint64_t, void *))(*(void *)v45 + 280))(v45, v50);
        (*(void (**)(uint64_t, float))(*(void *)v45 + 672))(v45, v39);
        *(float *)BOOL v50 = v34;
        *((float *)v50 + 1)  = v34;
        (*(void (**)(uint64_t, void *))(*(void *)v45 + 624))(v45, v50);
        IntPoint v48 = (IntPoint)(-(int)v14 - (v14 & 0xFFFFFFFF00000000));
        WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v50, &v48);
        v47.n128_u32[0]  = HIDWORD(v50[0]);
        v46.n128_u32[0]  = v50[0];
        (*(void (**)(uint64_t, __n128, __n128))(*(void *)v45 + 640))(v45, v46, v47);
        WebCore::LocalFrameView::paintBehavior(v10);
        WebCore::LocalFrameView::paintBehavior(v10);
        WebCore::LocalFrameView::setPaintBehavior();
        WebCore::LocalFrameView::paintContentsForSnapshot();
        WebCore::LocalFrameView::setPaintBehavior();
        *a5  = v51;
      }
      else
      {
        *a5  = 0;
        uint64_t v51 = 0;
        CFRelease(*(CFTypeRef *)(v42 + 8));
      }
    }
    return (WebCore::RenderObject *)WebCore::LocalFrameView::setNodeToDraw(v10, 0);
  }
  else
  {
    *a5  = 0;
  }
  return result;
}

WebCore::Node *WebCore::firstPositionInNode(WebCore *this, WebCore::Node *a2)
{
  if (*((_WORD *)this + 16))
  {
    *((_DWORD *)this + 7) += 2;
    uint64_t v3 = this;
    WebCore::Position::Position();
  }
  else
  {
    *((_DWORD *)this + 7) += 2;
    uint64_t v3 = this;
    WebCore::Position::Position();
  }
  double result = v3;
  if (v3)
  {
    if (*((_DWORD *)v3 + 7) == 2)
    {
      if ((*((_WORD *)v3 + 17) & 0x400) == 0) {
        return (WebCore::Node *)WebCore::Node::removedLastRef(v3);
      }
    }
    else
    {
      *((_DWORD *)v3 + 7) -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::lastPositionInNode(WebCore *this, WebCore::Node *a2)
{
  if (*((_WORD *)this + 16))
  {
    *((_DWORD *)this + 7) += 2;
    uint64_t v3 = this;
    WebCore::Position::Position();
  }
  else
  {
    *((_DWORD *)this + 7) += 2;
    uint64_t v3 = this;
    WebCore::Position::Position();
  }
  double result = v3;
  if (v3)
  {
    if (*((_DWORD *)v3 + 7) == 2)
    {
      if ((*((_WORD *)v3 + 17) & 0x400) == 0) {
        return (WebCore::Node *)WebCore::Node::removedLastRef(v3);
      }
    }
    else
    {
      *((_DWORD *)v3 + 7) -= 2;
    }
  }
  return result;
}

uint64_t *WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>@<X0>(uint64_t a1@<X8>)
{
  WebCore::makeBoundaryPoint();
  double result = (uint64_t *)WebCore::makeBoundaryPoint();
  int v3 = v8;
  if (v10) {
    BOOL v4 = v8 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    char v6 = 0;
    *(unsigned char *)a1  = 0;
  }
  else
  {
    WebCore::SimpleRange::SimpleRange();
    *(void *)a1  = v11;
    *(_DWORD *)(a1 + 8)  = v12;
    uint64_t v5 = v13;
    uint64_t v11 = 0;
    uint64_t v13 = 0;
    *(void *)(a1 + 16)  = v5;
    *(_DWORD *)(a1 + 24)  = v14;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v13);
    double result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
    int v3 = v8;
    char v6 = 1;
  }
  *(unsigned char *)(a1 + 32)  = v6;
  if (v3) {
    double result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v7);
  }
  if (v10) {
    return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v9);
  }
  return result;
}

uint64_t WebKit::InjectedBundleNodeHandle::setHTMLInputElementValueForUser(uint64_t this, const WTF::String *a2)
{
  uint64_t v2 = *(void *)(this + 48);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 28);
    *(_DWORD *)(v2 + 28)  = v3 + 2;
    if ((*(_WORD *)(v2 + 32) & 0x10) != 0
      && *(void *)(*(void *)(v2 + 104) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
    {
      this  = WebCore::HTMLInputElement::setValueForUser((WebCore::HTMLInputElement *)v2, a2);
      int v3 = *(_DWORD *)(v2 + 28) - 2;
      if (*(_DWORD *)(v2 + 28) != 2)
      {
LABEL_5:
        *(_DWORD *)(v2 + 28)  = v3;
        return this;
      }
    }
    else if (v3)
    {
      goto LABEL_5;
    }
    if ((*(_WORD *)(v2 + 34) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
  }
  return this;
}

uint64_t WebCore::HTMLInputElement::setValueForUser(WebCore::HTMLInputElement *this, const WTF::String *a2)
{
  uint64_t result = WebCore::HTMLInputElement::setValue();
  if (v5)
  {
    uint64_t result = (uint64_t)v4;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        return WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::InjectedBundleNodeHandle::setHTMLInputElementSpellcheckEnabled(WebKit::InjectedBundleNodeHandle *this, int a2)
{
  uint64_t result = *((void *)this + 6);
  if (result)
  {
    int v3 = *(_DWORD *)(result + 28);
    *(_DWORD *)(result + 28)  = v3 + 2;
    if ((*(_WORD *)(result + 32) & 0x10) != 0
      && *(void *)(*(void *)(result + 104) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
    {
      if (a2) {
        __int16 v4 = 0;
      }
      else {
        __int16 v4 = 2048;
      }
      *(_WORD *)(result + 240)  = *(_WORD *)(result + 240) & 0xF7FF | v4;
      if (v3) {
        goto LABEL_8;
      }
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      if (v3)
      {
LABEL_8:
        *(_DWORD *)(result + 28)  = v3;
        return result;
      }
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
  }
  return result;
}

uint64_t WebKit::InjectedBundleNodeHandle::isHTMLInputElementAutoFilled(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (!v1) {
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 28);
  *(_DWORD *)(v1 + 28)  = v2 + 2;
  if ((*(_WORD *)(v1 + 32) & 0x10) == 0
    || *(void *)(*(void *)(v1 + 104) + 24) != *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    if (v2)
    {
      uint64_t v3 = 0;
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
    return 0;
  }
  uint64_t v3 = HIBYTE(*(unsigned __int16 *)(v1 + 238)) & 1;
  if (v2)
  {
LABEL_5:
    *(_DWORD *)(v1 + 28)  = v2;
    return v3;
  }
  if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return v3;
}

uint64_t WebKit::InjectedBundleNodeHandle::isHTMLInputElementAutoFilledAndViewable(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (!v1) {
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 28);
  *(_DWORD *)(v1 + 28)  = v2 + 2;
  if ((*(_WORD *)(v1 + 32) & 0x10) == 0
    || *(void *)(*(void *)(v1 + 104) + 24) != *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    if (v2)
    {
      uint64_t v3 = 0;
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
    return 0;
  }
  uint64_t v3 = (*(unsigned __int16 *)(v1 + 238) >> 9) & 1;
  if (v2)
  {
LABEL_5:
    *(_DWORD *)(v1 + 28)  = v2;
    return v3;
  }
  if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return v3;
}

uint64_t WebKit::InjectedBundleNodeHandle::isHTMLInputElementAutoFilledAndObscured(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (!v1) {
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 28);
  *(_DWORD *)(v1 + 28)  = v2 + 2;
  if ((*(_WORD *)(v1 + 32) & 0x10) == 0
    || *(void *)(*(void *)(v1 + 104) + 24) != *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    if (v2)
    {
      uint64_t v3 = 0;
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
    return 0;
  }
  uint64_t v3 = (*(unsigned __int16 *)(v1 + 238) >> 10) & 1;
  if (v2)
  {
LABEL_5:
    *(_DWORD *)(v1 + 28)  = v2;
    return v3;
  }
  if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return v3;
}

uint64_t WebKit::InjectedBundleNodeHandle::setHTMLInputElementAutoFilled(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 48);
  if (v1)
  {
    int v2 = *(_DWORD *)(v1 + 28);
    *(_DWORD *)(v1 + 28)  = v2 + 2;
    if ((*(_WORD *)(v1 + 32) & 0x10) != 0
      && *(void *)(*(void *)(v1 + 104) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
    {
      this  = WebCore::HTMLInputElement::setAutoFilled((WebCore::HTMLInputElement *)v1);
      int v2 = *(_DWORD *)(v1 + 28) - 2;
      if (*(_DWORD *)(v1 + 28) != 2)
      {
LABEL_5:
        *(_DWORD *)(v1 + 28)  = v2;
        return this;
      }
    }
    else if (v2)
    {
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
  }
  return this;
}

uint64_t WebKit::InjectedBundleNodeHandle::setHTMLInputElementAutoFilledAndViewable(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 48);
  if (v1)
  {
    int v2 = *(_DWORD *)(v1 + 28);
    *(_DWORD *)(v1 + 28)  = v2 + 2;
    if ((*(_WORD *)(v1 + 32) & 0x10) != 0
      && *(void *)(*(void *)(v1 + 104) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
    {
      this  = WebCore::HTMLInputElement::setAutoFilledAndViewable((WebCore::HTMLInputElement *)v1);
      int v2 = *(_DWORD *)(v1 + 28) - 2;
      if (*(_DWORD *)(v1 + 28) != 2)
      {
LABEL_5:
        *(_DWORD *)(v1 + 28)  = v2;
        return this;
      }
    }
    else if (v2)
    {
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
  }
  return this;
}

uint64_t WebKit::InjectedBundleNodeHandle::setHTMLInputElementAutoFilledAndObscured(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 48);
  if (v1)
  {
    int v2 = *(_DWORD *)(v1 + 28);
    *(_DWORD *)(v1 + 28)  = v2 + 2;
    if ((*(_WORD *)(v1 + 32) & 0x10) != 0
      && *(void *)(*(void *)(v1 + 104) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
    {
      this  = WebCore::HTMLInputElement::setAutoFilledAndObscured((WebCore::HTMLInputElement *)v1);
      int v2 = *(_DWORD *)(v1 + 28) - 2;
      if (*(_DWORD *)(v1 + 28) != 2)
      {
LABEL_5:
        *(_DWORD *)(v1 + 28)  = v2;
        return this;
      }
    }
    else if (v2)
    {
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
  }
  return this;
}

BOOL WebKit::InjectedBundleNodeHandle::isHTMLInputElementAutoFillButtonEnabled(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (!v1) {
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 28);
  *(_DWORD *)(v1 + 28)  = v2 + 2;
  if ((*(_WORD *)(v1 + 32) & 0x10) == 0
    || *(void *)(*(void *)(v1 + 104) + 24) != *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    if (v2)
    {
      BOOL v3 = 0;
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
    return 0;
  }
  BOOL v3 = (*(_WORD *)(v1 + 238) & 0x3800) != 0;
  if (v2)
  {
LABEL_5:
    *(_DWORD *)(v1 + 28)  = v2;
    return v3;
  }
  if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return v3;
}

uint64_t WebKit::InjectedBundleNodeHandle::setHTMLInputElementAutoFillButtonEnabled(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  if (v1)
  {
    int v2 = *(_DWORD *)(v1 + 28);
    *(_DWORD *)(v1 + 28)  = v2 + 2;
    if ((*(_WORD *)(v1 + 32) & 0x10) != 0
      && *(void *)(*(void *)(v1 + 104) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
    {
      uint64_t result = WebCore::HTMLInputElement::setShowAutoFillButton();
      int v2 = *(_DWORD *)(v1 + 28) - 2;
      if (*(_DWORD *)(v1 + 28) != 2)
      {
LABEL_5:
        *(_DWORD *)(v1 + 28)  = v2;
        return result;
      }
    }
    else if (v2)
    {
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
  }
  return result;
}

uint64_t WebKit::InjectedBundleNodeHandle::htmlInputElementAutoFillButtonType(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (!v1) {
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 28);
  *(_DWORD *)(v1 + 28)  = v2 + 2;
  if ((*(_WORD *)(v1 + 32) & 0x10) == 0
    || *(void *)(*(void *)(v1 + 104) + 24) != *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    if (v2)
    {
      uint64_t v3 = 0;
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
    return 0;
  }
  uint64_t v3 = (*(unsigned __int16 *)(v1 + 238) >> 11) & 7;
  if (v2)
  {
LABEL_5:
    *(_DWORD *)(v1 + 28)  = v2;
    return v3;
  }
  if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return v3;
}

uint64_t WebKit::InjectedBundleNodeHandle::htmlInputElementLastAutoFillButtonType(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (!v1) {
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 28);
  *(_DWORD *)(v1 + 28)  = v2 + 2;
  if ((*(_WORD *)(v1 + 32) & 0x10) == 0
    || *(void *)(*(void *)(v1 + 104) + 24) != *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    if (v2)
    {
      uint64_t v3 = 0;
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
    return 0;
  }
  uint64_t v3 = *(unsigned char *)(v1 + 240) & 7;
  if (v2)
  {
LABEL_5:
    *(_DWORD *)(v1 + 28)  = v2;
    return v3;
  }
  if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return v3;
}

uint64_t WebKit::InjectedBundleNodeHandle::setAutoFillAvailable(WebKit::InjectedBundleNodeHandle *this, int a2)
{
  uint64_t result = *((void *)this + 6);
  if (result)
  {
    int v3 = *(_DWORD *)(result + 28);
    *(_DWORD *)(result + 28)  = v3 + 2;
    if ((*(_WORD *)(result + 32) & 0x10) != 0
      && *(void *)(*(void *)(result + 104) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
    {
      if (a2) {
        __int16 v4 = 8;
      }
      else {
        __int16 v4 = 0;
      }
      *(_WORD *)(result + 240)  = *(_WORD *)(result + 240) & 0xFFF7 | v4;
      if (v3) {
        goto LABEL_8;
      }
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      if (v3)
      {
LABEL_8:
        *(_DWORD *)(result + 28)  = v3;
        return result;
      }
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
  }
  return result;
}

uint64_t WebKit::InjectedBundleNodeHandle::htmlInputElementLastChangeWasUserEdit(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (!v1) {
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 28);
  *(_DWORD *)(v1 + 28)  = v2 + 2;
  if ((*(_WORD *)(v1 + 32) & 0x10) == 0
    || *(void *)(*(void *)(v1 + 104) + 24) != *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    if (v2)
    {
      uint64_t v3 = 0;
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
    return 0;
  }
  uint64_t v3 = WebCore::HTMLTextFormControlElement::lastChangeWasUserEdit((WebCore::HTMLTextFormControlElement *)v1);
  int v2 = *(_DWORD *)(v1 + 28) - 2;
  if (*(_DWORD *)(v1 + 28) != 2)
  {
LABEL_5:
    *(_DWORD *)(v1 + 28)  = v2;
    return v3;
  }
  if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return v3;
}

uint64_t WebKit::InjectedBundleNodeHandle::htmlTextAreaElementLastChangeWasUserEdit(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (!v1) {
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 28);
  *(_DWORD *)(v1 + 28)  = v2 + 2;
  if ((*(_WORD *)(v1 + 32) & 0x10) == 0
    || *(void *)(*(void *)(v1 + 104) + 24) != *(void *)(*MEMORY[0x1E4FB6690] + 24))
  {
    if (v2)
    {
      uint64_t v3 = 0;
LABEL_7:
      *(_DWORD *)(v1 + 28)  = v2;
      return v3;
    }
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
    return 0;
  }
  uint64_t v3 = WebCore::HTMLTextFormControlElement::lastChangeWasUserEdit((WebCore::HTMLTextFormControlElement *)v1);
  int v2 = *(_DWORD *)(v1 + 28) - 2;
  if (*(_DWORD *)(v1 + 28) != 2) {
    goto LABEL_7;
  }
  if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return v3;
}

uint64_t WebKit::InjectedBundleNodeHandle::isTextField(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (!v1) {
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 28);
  *(_DWORD *)(v1 + 28)  = v2 + 2;
  if ((*(_WORD *)(v1 + 32) & 0x10) == 0
    || *(void *)(*(void *)(v1 + 104) + 24) != *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    if (v2)
    {
      isTextField  = 0;
      goto LABEL_5;
    }
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
    return 0;
  }
  isTextField  = WebCore::HTMLInputElement::isTextField((WebCore::HTMLInputElement *)v1);
  int v2 = *(_DWORD *)(v1 + 28) - 2;
  if (*(_DWORD *)(v1 + 28) != 2)
  {
LABEL_5:
    *(_DWORD *)(v1 + 28)  = v2;
    return isTextField;
  }
  if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
    WebCore::Node::removedLastRef((WebCore::Node *)v1);
  }
  return isTextField;
}

BOOL WebKit::InjectedBundleNodeHandle::isSelectableTextNode(WebKit::InjectedBundleNodeHandle *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (!v1) {
    return 0;
  }
  if ((*(_WORD *)(v1 + 32) & 2) == 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 72) & 0xFFFFFFFFFFFFLL;
  if (!v2) {
    return 0;
  }
  if ((*(unsigned char *)(v2 + 45) & 2) != 0)
  {
    uint64_t v2 = *(void *)(v2 + 32);
    if (v2) {
      uint64_t v2 = *(void *)(v2 + 8);
    }
  }
  return WebCore::RenderStyle::usedUserSelect((WebCore::RenderStyle *)(v2 + 80)) != 0;
}

void WebKit::InjectedBundleNodeHandle::htmlTableCellElementCellAbove(WebKit::InjectedBundleNodeHandle *this@<X0>, WebKit::InjectedBundleNodeHandle **a2@<X8>)
{
  uint64_t v3 = *((void *)this + 6);
  if (!v3) {
    goto LABEL_7;
  }
  int v4 = *(_DWORD *)(v3 + 28);
  *(_DWORD *)(v3 + 28)  = v4 + 2;
  if ((*(_WORD *)(v3 + 32) & 0x10) == 0
    || (uint64_t v5 = *(void *)(*(void *)(v3 + 104) + 24), v5 != *(void *)(*MEMORY[0x1E4FB6850] + 24))
    && v5 != *(void *)(*MEMORY[0x1E4FB6858] + 24))
  {
    if (v4)
    {
      *(_DWORD *)(v3 + 28)  = v4;
    }
    else if ((*(_WORD *)(v3 + 34) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
LABEL_7:
    *a2  = 0;
    return;
  }
  char v6 = (WebKit::InjectedBundleNodeHandle *)WebCore::HTMLTableCellElement::cellAbove((WebCore::HTMLTableCellElement *)v3);
  if (v6)
  {
    WebKit::InjectedBundleNodeHandle::getOrCreate(v6, &v8);
    uint64_t v7 = v8;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a2  = v7;
  if (*(_DWORD *)(v3 + 28) == 2)
  {
    if ((*(_WORD *)(v3 + 34) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
  }
  else
  {
    *(_DWORD *)(v3 + 28) -= 2;
  }
}

uint64_t WebKit::InjectedBundleNodeHandle::documentFrame@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(this + 48);
  if (!v3)
  {
LABEL_9:
    *a2  = 0;
    return this;
  }
  int v4 = *(_DWORD *)(v3 + 28);
  *(_DWORD *)(v3 + 28)  = v4 + 2;
  if ((*(_WORD *)(v3 + 32) & 0xF000) != 0x9000)
  {
    if (v4)
    {
      *(_DWORD *)(v3 + 28)  = v4;
    }
    else if ((*(_WORD *)(v3 + 34) & 0x400) == 0)
    {
      this  = WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    goto LABEL_9;
  }
  uint64_t v5 = *(void *)(v3 + 544);
  if (v5 && (this  = *(void *)(v5 + 8)) != 0)
  {
    this  = WebKit::WebFrame::fromCoreFrame(this, a2);
    int v4 = *(_DWORD *)(v3 + 28) - 2;
    if (*(_DWORD *)(v3 + 28) != 2)
    {
LABEL_6:
      *(_DWORD *)(v3 + 28)  = v4;
      return this;
    }
  }
  else
  {
    *a2  = 0;
    if (v4) {
      goto LABEL_6;
    }
  }
  if ((*(_WORD *)(v3 + 34) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  return this;
}

uint64_t WebKit::InjectedBundleNodeHandle::htmlIFrameElementContentFrame@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 48);
  if (v2)
  {
    if ((*(_WORD *)(v2 + 32) & 0x10) != 0
      && *(void *)(*(void *)(v2 + 104) + 24) == *(void *)(*MEMORY[0x1E4FB6AB0] + 24))
    {
      uint64_t v3 = *(void *)(v2 + 120);
      if (v3)
      {
        this  = *(void *)(v3 + 8);
        if (this) {
          return WebKit::WebFrame::fromCoreFrame(this, a2);
        }
      }
    }
  }
  *a2  = 0;
  return this;
}

uint64_t WebKit::InjectedBundleNodeHandle::stop(WebKit::InjectedBundleNodeHandle *this, void *a2)
{
  uint64_t result = *((void *)this + 6);
  if (result)
  {
    {
      WebKit::domNodeHandleCache(void)::cache  = 0;
      *(void *)&dword_1EB35A4C0  = 0;
    }
    WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::remove((unsigned int *)result, a2);
    uint64_t result = *((void *)this + 6);
    *((void *)this + 6)  = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 28) == 2)
      {
        if ((*(_WORD *)(result + 34) & 0x400) == 0)
        {
          return WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
      }
      else
      {
        *(_DWORD *)(result + 28) -= 2;
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::InjectedBundleNodeHandle::stop(WebKit::InjectedBundleNodeHandle *this, void *a2)
{
  return WebKit::InjectedBundleNodeHandle::stop((WebKit::InjectedBundleNodeHandle *)((char *)this - 16), a2);
}

uint64_t API::ObjectImpl<(API::Object::Type)139>::type()
{
  return 139;
}

CFTypeRef WebKit::InjectedBundleNodeHandle::ref(CFTypeRef *this)
{
  return CFRetain(this[1]);
}

void WebKit::InjectedBundleNodeHandle::deref(CFTypeRef *this)
{
}

CFTypeRef non-virtual thunk to'WebKit::InjectedBundleNodeHandle::ref(CFTypeRef *this)
{
  return CFRetain(*(this - 1));
}

void non-virtual thunk to'WebKit::InjectedBundleNodeHandle::deref(CFTypeRef *this)
{
}

uint64_t WebCore::ActiveDOMObject::virtualHasPendingActivity(WebCore::ActiveDOMObject *this)
{
  return 0;
}

void API::ObjectImpl<(API::Object::Type)139>::~ObjectImpl()
{
}

uint64_t std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(a1 + 16));
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)a1);
  }
  return a1;
}

uint64_t *WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1  = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 28) == 2)
    {
      if ((*(_WORD *)(v2 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
    }
    else
    {
      *(_DWORD *)(v2 + 28) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; unsigned int v7 = (v9 + i++) & v3)
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(void *)(v2 + 16 * v7);
    if (v10 != -1)
    {
      if (!v10) {
        return 0;
      }
      if (v10 == a2) {
        break;
      }
    }
  }
  uint64_t v11 = *(void *)(v2 + 16 * v9 + 8);
  if (v11) {
    return *(void *)(v11 + 8);
  }
  else {
    return 0;
  }
}

uint64_t *WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::InjectedBundleNodeHandle&>@<X0>(uint64_t *result@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = 0;
  int v12 = (unsigned int *)*a2;
  unint64_t v13 = ~(*a2 << 32) + *a2;
  unint64_t v14 = 9
      * (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) ^ (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) >> 8));
  unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  unsigned int v16 = (v15 >> 31) ^ v15;
  for (int i = 1; ; ++i)
  {
    unsigned int v18 = v16 & v10;
    int v19 = (uint64_t *)(v8 + 16 * v18);
    unsigned int v20 = (unsigned int *)*v19;
    if (*v19 == -1)
    {
      uint64_t v11 = (uint64_t *)(v8 + 16 * v18);
      goto LABEL_6;
    }
    if (!v20)
    {
      if (v11)
      {
        uint64_t *v11 = 0;
        v11[1]  = 0;
        --*(_DWORD *)(*v6 - 16);
        int v12 = (unsigned int *)*a2;
        int v19 = v11;
      }
      *a2  = 0;
      int v24 = (unsigned int *)*v19;
      *int v19 = (uint64_t)v12;
      if (v24) {
        WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v24, a2);
      }
      if (!*(void *)(a3 + 40))
      {
        uint64_t v25 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)uint64_t v25 = 1;
        *(void *)(v25 + 8)  = a3;
        BOOL v26 = *(unsigned int **)(a3 + 40);
        *(void *)(a3 + 40)  = v25;
        if (v26)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v26);
            WTF::fastFree((WTF *)v26, a2);
          }
        }
      }
      int v27 = *(atomic_uint **)(a3 + 40);
      atomic_fetch_add(v27, 1u);
      uint64_t result = (uint64_t *)v19[1];
      v19[1]  = (uint64_t)v27;
      if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)result);
        uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
      }
      uint64_t v28 = *v6;
      if (*v6) {
        int v29 = *(_DWORD *)(v28 - 12) + 1;
      }
      else {
        int v29 = 1;
      }
      *(_DWORD *)(v28 - 12)  = v29;
      uint64_t v30 = *v6;
      if (*v6) {
        int v31 = *(_DWORD *)(v30 - 12);
      }
      else {
        int v31 = 0;
      }
      uint64_t v32 = (*(_DWORD *)(v30 - 16) + v31);
      unint64_t v33 = *(unsigned int *)(v30 - 4);
      if (v33 > 0x400)
      {
        if (v33 > 2 * v32) {
          goto LABEL_27;
        }
      }
      else if (3 * v33 > 4 * v32)
      {
LABEL_27:
        uint64_t v23 = v30 + 16 * v33;
        char v22 = 1;
        goto LABEL_28;
      }
      uint64_t result = (uint64_t *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::expand(v6, (unsigned int **)v19);
      int v19 = result;
      uint64_t v30 = *v6;
      if (*v6) {
        unint64_t v33 = *(unsigned int *)(v30 - 4);
      }
      else {
        unint64_t v33 = 0;
      }
      goto LABEL_27;
    }
    if (v20 == v12) {
      break;
    }
LABEL_6:
    unsigned int v16 = i + v18;
  }
  if (v9) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *(unsigned int *)(v8 - 4);
  }
  char v22 = 0;
  uint64_t v23 = v8 + 16 * v21;
LABEL_28:
  *(void *)a4  = v19;
  *(void *)(a4 + 8)  = v23;
  *(unsigned char *)(a4 + 16)  = v22;
  return result;
}

unsigned int *WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::makeKeyImpl<WebCore::Node>@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unsigned int *)(a1 + 16), a1);
  uint64_t result = (unsigned int *)(*(void *)(a1 + 16) & 0xFFFFFFFFFFFFLL);
  atomic_fetch_add((atomic_uint *volatile)result, 1u);
  atomic_fetch_add((atomic_uint *volatile)result, 1u);
  *a2  = result;
  if (result)
  {
    return WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(result, v4);
  }
  return result;
}

BOOL WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)a1;
  if (!*(void *)a1)
  {
    BOOL v9 = 0;
    goto LABEL_21;
  }
  int v4 = *(_DWORD *)(v3 - 4);
  if (!v4)
  {
    BOOL v9 = 0;
LABEL_15:
    *(_DWORD *)(a1 + 8)  = 0;
    goto LABEL_16;
  }
  int v5 = 0;
  unsigned int v6 = v4 - 1;
  do
  {
    unsigned int v7 = (unsigned int **)(v3 + 16 * v6);
    if ((unint64_t)*v7 + 1 >= 2 && !*((void *)*v7 + 1))
    {
      WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>::customDeleteBucket(v7, a2);
      ++v5;
    }
  }
  while ((unint64_t)v6--);
  uint64_t v3 = *(void *)a1;
  BOOL v9 = v5 != 0;
  if (v5)
  {
    *(_DWORD *)(v3 - 16) += v5;
    uint64_t v15 = *(void *)a1;
    if (*(void *)a1) {
      int v16 = *(_DWORD *)(v15 - 12);
    }
    else {
      int v16 = 0;
    }
    *(_DWORD *)(v15 - 12)  = v16 - v5;
    uint64_t v3 = *(void *)a1;
  }
  if (!v3)
  {
LABEL_21:
    unsigned int v12 = 0;
    *(_DWORD *)(a1 + 8)  = 0;
    goto LABEL_17;
  }
  unsigned int v10 = *(_DWORD *)(v3 - 4);
  if (v10 < 9 || 6 * *(_DWORD *)(v3 - 12) >= v10) {
    goto LABEL_15;
  }
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize((uint64_t *)a1);
  uint64_t v3 = *(void *)a1;
  *(_DWORD *)(a1 + 8)  = 0;
  if (!v3)
  {
    unsigned int v12 = 0;
    goto LABEL_17;
  }
LABEL_16:
  unsigned int v12 = *(_DWORD *)(v3 - 12);
  int v13 = 0x7FFFFFFF;
  if (v12 < 0x7FFFFFFF) {
LABEL_17:
  }
    int v13 = v12;
  *(_DWORD *)(a1 + 12)  = 2 * v13;
  return v9;
}

unsigned int **WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize(uint64_t *a1)
{
  if (*a1) {
    unsigned int v1 = *(_DWORD *)(*a1 - 12);
  }
  else {
    unsigned int v1 = 0;
  }
  unsigned int v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  unsigned int v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  unint64_t v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1) {
      goto LABEL_8;
    }
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    double v5 = (double)v1;
    double v6 = (double)v4;
    double v7 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v4)  = 2 * v4;
  if (v4 <= 0x400) {
    goto LABEL_6;
  }
LABEL_8:
  double v5 = (double)v1;
  double v6 = (double)v4;
  double v7 = 0.416666667;
LABEL_9:
  if (v6 * v7 <= v5) {
    LODWORD(v4)  = 2 * v4;
  }
  if (v4 <= 8) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = v4;
  }
  return WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(a1, v8, 0);
}

unsigned int *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>::customDeleteBucket(unsigned int **a1, void *a2)
{
  unsigned int v3 = *a1;
  *a1  = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  uint64_t result = a1[1];
  *a1  = (unsigned int *)-1;
  a1[1]  = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

unsigned int **WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1  = v9 + 16;
  *(_DWORD *)(v9 + 12)  = a2;
  *(_DWORD *)(*a1 - 8)  = a2 - 1;
  *(_DWORD *)(*a1 - 16)  = 0;
  *(_DWORD *)(*a1 - 12)  = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unsigned int v12 = 0;
    uint64_t v13 = v7;
    do
    {
      unint64_t v14 = (unsigned int **)(v6 + 16 * v11);
      uint64_t v15 = *v14;
      if (*v14 != (unsigned int *)-1)
      {
        if (v15)
        {
          uint64_t v19 = *a1;
          if (*a1) {
            int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            int v20 = 0;
          }
          unint64_t v21 = ((unint64_t)v15 + ~((void)v15 << 32)) ^ (((unint64_t)v15 + ~((void)v15 << 32)) >> 22);
          unint64_t v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          unint64_t v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          unsigned int v24 = v20 & ((v23 >> 31) ^ v23);
          int v25 = 1;
          do
          {
            unsigned int v26 = v24;
            uint64_t v27 = *(void *)(v19 + 16 * v24);
            unsigned int v24 = (v24 + v25++) & v20;
          }
          while (v27);
          uint64_t v28 = (unsigned int **)(v19 + 16 * v26);
          int v29 = v28[1];
          v28[1]  = 0;
          if (v29 && atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v29);
            WTF::fastFree((WTF *)v29, v10);
          }
          uint64_t v30 = *v28;
          *uint64_t v28 = 0;
          if (v30) {
            WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v30, v10);
          }
          int v31 = *v14;
          uint64_t *v14 = 0;
          *uint64_t v28 = v31;
          uint64_t v32 = v6 + 16 * v11;
          unint64_t v33 = *(unsigned int **)(v32 + 8);
          *(void *)(v32 + 8)  = 0;
          v28[1]  = v33;
          float v34 = *(unsigned int **)(v32 + 8);
          *(void *)(v32 + 8)  = 0;
          if (v34 && atomic_fetch_add((atomic_uint *volatile)v34, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v34);
            WTF::fastFree((WTF *)v34, v10);
          }
          float v35 = *v14;
          uint64_t *v14 = 0;
          if (v35) {
            WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v35, v10);
          }
          if (v14 == a3) {
            unsigned int v12 = v28;
          }
        }
        else
        {
          uint64_t v16 = v6 + 16 * v11;
          uint64_t v17 = *(unsigned int **)(v16 + 8);
          *(void *)(v16 + 8)  = 0;
          if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v17);
            WTF::fastFree((WTF *)v17, v10);
          }
          unsigned int v18 = *v14;
          uint64_t *v14 = 0;
          if (v18) {
            WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v18, v10);
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    unsigned int v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unsigned int **WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (unsigned int v4 = *(_DWORD *)(v3 - 4)) != 0)
  {
    if (6 * *(_DWORD *)(v3 - 12) >= 2 * v4) {
      v4 *= 2;
    }
  }
  else
  {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(a1, v4, a2);
}

unsigned int *WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded(unsigned int *result, uint64_t a2)
{
  if ((*(void *)result & 0xFFFFFFFFFFFFLL) == 0)
  {
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)uint64_t v4 = 1;
    *(void *)(v4 + 8)  = a2;
    WebCore::EventListenerMap::EventListenerMap((WebCore::EventListenerMap *)(v4 + 16));
    uint64_t v6 = *v3;
    *uint64_t v3 = *v3 & 0xFFFF000000000000 | v4;
    uint64_t result = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    if ((v6 & 0xFFFFFFFFFFFFLL) != 0)
    {
      return WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(result, v5);
    }
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(unsigned int *result, void *a2)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    unsigned int v2 = (WTF *)result;
    atomic_store(1u, result);
    WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(result + 4), a2);
    return (unsigned int *)WTF::fastFree(v2, v3);
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)a1, (void *)(*(void *)a1 + 32 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1  = 0;
    *(_DWORD *)(a1 + 8)  = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(WTF::StringImpl *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (WTF::StringImpl **)result;
    do
    {
      WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 1), a2);
      uint64_t result = *v3;
      *uint64_t v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 4;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      WTF *v4 = 0;
      if (v6) {
        WTF::RefCounted<WebCore::RegisteredEventListener>::deref(v6, a2);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  unsigned int v7 = *(WTF **)a1;
  if (a1 + 16 != *(void *)a1 && v7 != 0)
  {
    *(void *)a1  = 0;
    *(_DWORD *)(a1 + 8)  = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

WTF *WTF::RefCounted<WebCore::RegisteredEventListener>::deref(WTF *this, void *a2)
{
  unsigned int v2 = this;
  if (*(_DWORD *)this == 1)
  {
    uint64_t v3 = (_DWORD *)*((void *)this + 1);
    *((void *)v2 + 1)  = 0;
    if (v3)
    {
      if (v3[4] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
      }
      else {
        --v3[4];
      }
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

void *WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::PeekPtrType,WTF::WeakHashMap<WebCore::Node,WTF::WeakRef<WebKit::InjectedBundleNodeHandle,WTF::DefaultWeakPtrImpl>,WebCore::WeakPtrImplWithEventTargetData>::PeekType>::skipEmptyBuckets(void *result)
{
  uint64_t v1 = result[3];
  uint64_t v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(void *)(*(void *)v2 + 8))
  {
    v2 += 16;
    result[1]  = v2;
    uint64_t v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(void *)v2 + 1) <= 1)
      {
        v2 += 16;
        result[1]  = v2;
        if (v2 == v3)
        {
          uint64_t v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

WTF *WebKit::InjectedBundleRangeHandle::getOrCreate@<X0>(WTF *this@<X0>, WebCore::Range *a2@<X1>, uint64_t *a3@<X8>)
{
  if (!this)
  {
    uint64_t v20 = 0;
    goto LABEL_38;
  }
  uint64_t v4 = this;
  if ((_MergedGlobals_48 & 1) == 0)
  {
    qword_1EB358D98  = 0;
    _MergedGlobals_48  = 1;
  }
  if (!*((void *)this + 2))
  {
    uint64_t v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v5 = 1;
    *(void *)(v5 + 8)  = v4;
    uint64_t v6 = (WTF *)*((void *)v4 + 2);
    *((void *)v4 + 2)  = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1) {
        WTF::fastFree(v6, a2);
      }
      else {
        --*(_DWORD *)v6;
      }
    }
  }
  unsigned int v7 = (WTF *)*((void *)v4 + 2);
  ++*(_DWORD *)v7;
  uint64_t v8 = qword_1EB358D98;
  if (qword_1EB358D98
    || (WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::expand(),
        (uint64_t v8 = qword_1EB358D98) != 0))
  {
    unsigned int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  unsigned int v10 = 0;
  uint64_t v11 = *((void *)v7 + 1);
  unint64_t v12 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
  unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  int v15 = (v14 >> 31) ^ v14;
  for (int i = 1; ; ++i)
  {
    uint64_t v17 = v15 & v9;
    unsigned int v18 = (WTF **)(v8 + 16 * v17);
    uint64_t v19 = *v18;
    if (*v18 == (WTF *)-1)
    {
      unsigned int v10 = (WTF **)(v8 + 16 * v17);
      goto LABEL_17;
    }
    if (!v19)
    {
      if (v10)
      {
        void *v10 = 0;
        v10[1]  = 0;
        --*(_DWORD *)(v8 - 16);
        void *v10 = v7;
      }
      else
      {
        *unsigned int v18 = v7;
        unsigned int v10 = (WTF **)(v8 + 16 * v17);
      }
      uint64_t v20 = API::Object::newObject(0x20uLL, 143);
      *(void *)uint64_t v20 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2((WebKit *)v20);
      *(void *)(v20 + 16)  = 0;
      *(void *)uint64_t v20 = &unk_1EE9B5648;
      ++*((_DWORD *)v4 + 2);
      *(void *)(v20 + 24)  = v4;
      uint64_t v22 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8)  = v20;
      unint64_t v23 = *(unsigned int **)(v20 + 16);
      *(void *)(v20 + 16)  = v22;
      if (v23 && atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, v21);
      }
      unsigned int v24 = *(atomic_uint **)(v20 + 16);
      atomic_fetch_add(v24, 1u);
      this  = v10[1];
      v10[1]  = (WTF *)v24;
      if (this && atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)this);
        this  = (WTF *)WTF::fastFree(this, v21);
      }
      if (qword_1EB358D98) {
        int v25 = *(_DWORD *)(qword_1EB358D98 - 12) + 1;
      }
      else {
        int v25 = 1;
      }
      *(_DWORD *)(qword_1EB358D98 - 12)  = v25;
      if (qword_1EB358D98) {
        int v26 = *(_DWORD *)(qword_1EB358D98 - 12);
      }
      else {
        int v26 = 0;
      }
      uint64_t v27 = (*(_DWORD *)(qword_1EB358D98 - 16) + v26);
      unint64_t v28 = *(unsigned int *)(qword_1EB358D98 - 4);
      if (v28 > 0x400)
      {
        if (v28 > 2 * v27) {
          goto LABEL_38;
        }
      }
      else if (3 * v28 > 4 * v27)
      {
        goto LABEL_38;
      }
      this  = (WTF *)WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::expand();
      goto LABEL_38;
    }
    if (*((void *)v19 + 1) == v11) {
      break;
    }
LABEL_17:
    int v15 = i + v17;
  }
  if (*(_DWORD *)v7 == 1)
  {
    uint64_t v29 = v8;
    uint64_t v30 = v17;
    WTF::fastFree(v7, a2);
    uint64_t v17 = v30;
    uint64_t v8 = v29;
  }
  else
  {
    --*(_DWORD *)v7;
  }
  uint64_t v20 = *(void *)(*(void *)(v8 + 16 * v17 + 8) + 8);
  this  = (WTF *)CFRetain(*(CFTypeRef *)(v20 + 8));
LABEL_38:
  *a3  = v20;
  return this;
}

void WebKit::InjectedBundleRangeHandle::~InjectedBundleRangeHandle(WebKit::InjectedBundleRangeHandle *this, void *a2)
{
  *(void *)this  = &unk_1EE9B5648;
  if (_MergedGlobals_48)
  {
    uint64_t v3 = &qword_1EB358000;
    uint64_t v4 = qword_1EB358D98;
    uint64_t v6 = (_DWORD **)((char *)this + 24);
    uint64_t v5 = (_DWORD *)*((void *)this + 3);
    if (!qword_1EB358D98) {
      goto LABEL_23;
    }
    int v7 = *(_DWORD *)(qword_1EB358D98 - 8);
    unint64_t v8 = ((unint64_t)v5 + ~((void)v5 << 32)) ^ (((unint64_t)v5 + ~((void)v5 << 32)) >> 22);
    unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    unsigned int v11 = v7 & ((v10 >> 31) ^ v10);
    for (int i = 1; ; ++i)
    {
      uint64_t v13 = v11;
      unint64_t v14 = *(WTF **)(qword_1EB358D98 + 16 * v11);
      if (v14 != (WTF *)-1)
      {
        if (!v14) {
          goto LABEL_22;
        }
        if (*((_DWORD **)v14 + 1) == v5) {
          break;
        }
      }
      unsigned int v11 = (v13 + i) & v7;
    }
    if (v13 != *(_DWORD *)(qword_1EB358D98 - 4))
    {
      int v15 = (void *)(qword_1EB358D98 + 16 * v13);
      *int v15 = 0;
      if (*(_DWORD *)v14 == 1)
      {
        uint64_t v27 = v4;
        uint64_t v28 = v13;
        int v26 = (void *)(v4 + 16 * v13);
        WTF::fastFree(v14, a2);
        int v15 = v26;
        uint64_t v4 = v27;
        uint64_t v13 = v28;
        uint64_t v3 = &qword_1EB358000;
      }
      else
      {
        --*(_DWORD *)v14;
      }
      *int v15 = -1;
      uint64_t v16 = v4 + 16 * v13;
      uint64_t v17 = *(unsigned int **)(v16 + 8);
      *(void *)(v16 + 8)  = 0;
      if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, a2);
        uint64_t v3 = &qword_1EB358000;
      }
      uint64_t v18 = v3[435];
      ++*(_DWORD *)(v18 - 16);
      if (v18) {
        int v19 = *(_DWORD *)(v18 - 12) - 1;
      }
      else {
        int v19 = -1;
      }
      *(_DWORD *)(v18 - 12)  = v19;
      uint64_t v20 = v3[435];
      if (v20)
      {
        unsigned int v21 = 6 * *(_DWORD *)(v20 - 12);
        unsigned int v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9) {
          WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::rehash(v22 >> 1);
        }
      }
    }
  }
  else
  {
    qword_1EB358D98  = 0;
    _MergedGlobals_48  = 1;
    uint64_t v6 = (_DWORD **)((char *)this + 24);
  }
LABEL_22:
  uint64_t v5 = *v6;
LABEL_23:
  *uint64_t v6 = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  uint64_t v24 = *((void *)this + 2);
  if (v24)
  {
    *(void *)(v24 + 8)  = 0;
    int v25 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2)  = 0;
    if (v25)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, a2);
      }
    }
  }
  else
  {
    *((void *)this + 2)  = 0;
  }
}

{
  uint64_t vars8;

  WebKit::InjectedBundleRangeHandle::~InjectedBundleRangeHandle(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::InjectedBundleRangeHandle::boundingRectInWindowCoordinates(WebKit::InjectedBundleRangeHandle *this)
{
  WebCore::makeSimpleRange();
  uint64_t v1 = *(void *)(*(void *)(*(void *)(v16 + 48) + 8) + 544);
  if (v1 && (v2 = *(void *)(v1 + 8)) != 0 && (uint64_t v3 = *(WebCore::ScrollView **)(v2 + 288)) != 0)
  {
    WebCore::RenderObject::absoluteBorderAndTextRects();
    WebCore::unionRectIgnoringZeroRects();
    v14[0]  = v4;
    v14[1]  = v5;
    void v14[2] = v6;
    v14[3]  = v7;
    v15[0]  = WebCore::enclosingIntRect((WebCore *)v14, v8);
    v15[1]  = v9;
    uint64_t v11 = WebCore::ScrollView::contentsToWindow(v3, (const WebCore::IntRect *)v15);
    if (v13) {
      WTF::fastFree(v13, v10);
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v17);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v16);
  return v11;
}

uint64_t *WebKit::InjectedBundleRangeHandle::renderedImage@<X0>(char a1@<W1>, void *a2@<X8>)
{
  WebCore::makeSimpleRange();
  uint64_t v4 = *(void *)(*(void *)(v66 + 48) + 8);
  *(_DWORD *)(v4 + 28) += 2;
  uint64_t v65 = v4;
  uint64_t v5 = *(void *)(v4 + 544);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0)
  {
    atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
    int v7 = *(WebCore::Widget **)(v6 + 288);
    if (v7)
    {
      uint64_t v8 = *(void *)(*(void *)(v6 + 296) + 3096);
      uint64_t v9 = *(void *)(v8 + 56);
      if (v9) {
        *(_DWORD *)(v9 + 28) += 2;
      }
      uint64_t v45 = v9;
      int v46 = *(_DWORD *)(v8 + 64);
      char v47 = *(unsigned char *)(v8 + 68);
      uint64_t v10 = *(void *)(v8 + 72);
      if (v10) {
        *(_DWORD *)(v10 + 28) += 2;
      }
      uint64_t v48 = v10;
      int v49 = *(_DWORD *)(v8 + 80);
      char v50 = *(unsigned char *)(v8 + 84);
      uint64_t v11 = *(void *)(v8 + 88);
      if (v11) {
        *(_DWORD *)(v11 + 28) += 2;
      }
      uint64_t v51 = v11;
      int v52 = *(_DWORD *)(v8 + 96);
      char v53 = *(unsigned char *)(v8 + 100);
      uint64_t v12 = *(void *)(v8 + 104);
      if (v12) {
        *(_DWORD *)(v12 + 28) += 2;
      }
      uint64_t v54 = v12;
      int v55 = *(_DWORD *)(v8 + 112);
      char v56 = *(unsigned char *)(v8 + 116);
      uint64_t v13 = *(void *)(v8 + 120);
      if (v13) {
        *(_DWORD *)(v13 + 28) += 2;
      }
      uint64_t v57 = v13;
      int v58 = *(_DWORD *)(v8 + 128);
      char v59 = *(unsigned char *)(v8 + 132);
      uint64_t v14 = *(void *)(v8 + 136);
      if (v14) {
        *(_DWORD *)(v14 + 28) += 2;
      }
      uint64_t v60 = v14;
      int v61 = *(_DWORD *)(v8 + 144);
      char v62 = *(unsigned char *)(v8 + 148);
      __int16 v63 = *(_WORD *)(v8 + 152);
      char v64 = *(unsigned char *)(v8 + 154);
      WebCore::VisibleSelection::VisibleSelection();
      WebCore::FrameSelection::setSelection();
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v44);
      float v15 = 1.0;
      if ((a1 & 0x20) == 0) {
        float v15 = *(float *)(*(void *)(*(void *)(v6 + 24) + 8) + 364);
      }
      WebCore::RenderObject::absoluteBorderAndTextRects();
      WebCore::unionRectIgnoringZeroRects();
      unsigned __int32 v40 = v16;
      unsigned __int32 v41 = v17;
      int v42 = v18;
      int v43 = v19;
      unint64_t v22 = WebCore::enclosingIntRect((WebCore *)&v40, v20);
      unint64_t v23 = v21;
      v44[1]  = v21;
      uint64_t v24 = v38;
      if (v38)
      {
        uint64_t v38 = 0;
        int v39 = 0;
        uint64_t v24 = (WTF *)WTF::fastFree(v24, v21);
      }
      LODWORD(v38)  = (int)(float)(v15 * (float)(int)v23);
      HIDWORD(v38)  = (int)(float)(v15 * (float)SHIDWORD(v23));
      int v25 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB(v24);
      WebKit::WebImage::create((int32x2_t *)&v38, 1, v25, 0, (WebKit::WebImage *)&v37);
      uint64_t v26 = v37;
      uint64_t v27 = *(void *)(v37 + 16);
      if (v27)
      {
        unint64_t v28 = HIDWORD(v22);
        (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
        uint64_t v29 = (*(uint64_t (**)(void))(**(void **)(v37 + 16) + 16))(*(void *)(v37 + 16));
        unsigned __int32 v40 = LODWORD(v15);
        unsigned __int32 v41 = LODWORD(v15);
        (*(void (**)(void))(*(void *)v29 + 624))();
        int v30 = WebCore::Widget::frameRect(v7) + v22;
        int v31 = ((unint64_t)WebCore::Widget::frameRect(v7) >> 32) + v28;
        uint64_t v32 = WebCore::ScrollableArea::visibleContentRect();
        LODWORD(v44[0])  = v30 - v32;
        HIDWORD(v44[0])  = v31 - HIDWORD(v32);
        IntPoint v36 = (IntPoint)((v32 - v30) - (v44[0] & 0xFFFFFFFF00000000));
        WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v40, &v36);
        v33.n128_u32[0]  = v40;
        v34.n128_u32[0]  = v41;
        (*(void (**)(uint64_t, __n128, __n128))(*(void *)v29 + 640))(v29, v33, v34);
        WebCore::LocalFrameView::paintBehavior(v7);
        WebCore::LocalFrameView::setPaintBehavior();
        WebCore::Document::updateLayout();
        WebCore::ScrollView::paint();
        WebCore::LocalFrameView::setPaintBehavior();
        WebCore::FrameSelection::setSelection();
        *a2  = v37;
      }
      else
      {
        *a2  = 0;
        uint64_t v37 = 0;
        CFRelease(*(CFTypeRef *)(v26 + 8));
      }
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v45);
    }
    else
    {
      *a2  = 0;
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
  }
  else
  {
    *a2  = 0;
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v65);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v67);
  return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v66);
}

uint64_t *WebKit::InjectedBundleRangeHandle::text(WebKit::InjectedBundleRangeHandle *this)
{
  WebCore::makeSimpleRange();
  WebCore::BoundaryPoint::protectedDocument(&v2, (WebCore::BoundaryPoint *)v3);
  WebCore::Document::updateLayout();
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v2);
  WebCore::plainText();
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v4);
  return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v3);
}

uint64_t WebKit::createHandle@<X0>(uint64_t *a1@<X8>)
{
  WebCore::createLiveRange();
  WebKit::InjectedBundleRangeHandle::getOrCreate(v4, v2, a1);
  uint64_t result = (uint64_t)v4;
  if (v4)
  {
    if (*((_DWORD *)v4 + 2) == 1) {
      return (*(uint64_t (**)())(*(void *)v4 + 8))();
    }
    else {
      --*((_DWORD *)v4 + 2);
    }
  }
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)143>::type()
{
  return 143;
}

void WebCore::VisibleSelection::~VisibleSelection(WebCore::VisibleSelection *this)
{
  uint64_t v2 = *((void *)this + 10);
  *((void *)this + 10)  = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 28) == 2)
    {
      if ((*(_WORD *)(v2 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
    }
    else
    {
      *(_DWORD *)(v2 + 28) -= 2;
    }
  }
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8)  = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 28) == 2)
    {
      if ((*(_WORD *)(v3 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
    }
    else
    {
      *(_DWORD *)(v3 + 28) -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6)  = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 28) == 2)
    {
      if ((*(_WORD *)(v4 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
    }
    else
    {
      *(_DWORD *)(v4 + 28) -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4)  = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 28) == 2)
    {
      if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
    }
    else
    {
      *(_DWORD *)(v5 + 28) -= 2;
    }
  }
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2)  = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 28) == 2)
    {
      if ((*(_WORD *)(v6 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
      }
    }
    else
    {
      *(_DWORD *)(v6 + 28) -= 2;
    }
  }
  uint64_t v7 = *(void *)this;
  *(void *)this  = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 28) == 2)
    {
      if ((*(_WORD *)(v7 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
    }
    else
    {
      *(_DWORD *)(v7 + 28) -= 2;
    }
  }
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::expand()
{
  if (qword_1EB358D98 && (int v0 = *(_DWORD *)(qword_1EB358D98 - 4)) != 0) {
    return WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::rehash(v0 << (6 * *(_DWORD *)(qword_1EB358D98 - 12) >= (2 * v0)));
  }
  else {
    return WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::rehash(8u);
  }
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleRangeHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>>::rehash(unsigned int a1)
{
  uint64_t v2 = qword_1EB358D98;
  if (qword_1EB358D98)
  {
    unsigned int v3 = *(_DWORD *)(qword_1EB358D98 - 4);
    int v4 = *(_DWORD *)(qword_1EB358D98 - 12);
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  uint64_t result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1EB358D98  = (uint64_t)(result + 4);
  result[2]  = a1 - 1;
  result[3]  = a1;
  _DWORD *result = 0;
  *(_DWORD *)(qword_1EB358D98 - 12)  = v4;
  if (v3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v3;
    while (1)
    {
      uint64_t v9 = (WTF **)(v2 + 16 * v7);
      uint64_t v10 = *v9;
      if (*v9 != (WTF *)-1)
      {
        if (v10)
        {
          if (qword_1EB358D98) {
            int v14 = *(_DWORD *)(qword_1EB358D98 - 8);
          }
          else {
            int v14 = 0;
          }
          unint64_t v15 = ~(*((void *)v10 + 1) << 32) + *((void *)v10 + 1);
          unint64_t v16 = (v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13);
          unint64_t v17 = (9 * (v16 ^ (v16 >> 8))) ^ ((9 * (v16 ^ (v16 >> 8))) >> 15);
          unsigned int v18 = v14 & (((v17 + ~(v17 << 27)) >> 31) ^ (v17 + ~(v17 << 27)));
          int v19 = 1;
          do
          {
            unsigned int v20 = v18;
            uint64_t v21 = *(void *)(qword_1EB358D98 + 16 * v18);
            unsigned int v18 = (v18 + v19++) & v14;
          }
          while (v21);
          uint64_t v22 = qword_1EB358D98 + 16 * v20;
          unint64_t v23 = *(unsigned int **)(v22 + 8);
          *(void *)(v22 + 8)  = 0;
          if (v23 && atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v23);
            WTF::fastFree((WTF *)v23, v6);
          }
          uint64_t v24 = *(WTF **)v22;
          *(void *)uint64_t v22 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1) {
              WTF::fastFree(v24, v6);
            }
            else {
              --*(_DWORD *)v24;
            }
          }
          int v25 = *v9;
          uint64_t *v9 = 0;
          *(void *)uint64_t v22 = v25;
          uint64_t v26 = v2 + 16 * v7;
          uint64_t v27 = *(void *)(v26 + 8);
          *(void *)(v26 + 8)  = 0;
          *(void *)(v22 + 8)  = v27;
          unint64_t v28 = *(unsigned int **)(v26 + 8);
          *(void *)(v26 + 8)  = 0;
          if (v28 && atomic_fetch_add((atomic_uint *volatile)v28, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v28);
            WTF::fastFree((WTF *)v28, v6);
          }
          uint64_t v13 = *v9;
          uint64_t *v9 = 0;
          if (!v13) {
            goto LABEL_25;
          }
          if (*(_DWORD *)v13 == 1) {
            goto LABEL_33;
          }
          --*(_DWORD *)v13;
        }
        else
        {
          uint64_t v11 = v2 + 16 * v7;
          uint64_t v12 = *(unsigned int **)(v11 + 8);
          *(void *)(v11 + 8)  = 0;
          if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, v6);
          }
          uint64_t v13 = *v9;
          uint64_t *v9 = 0;
          if (!v13) {
            goto LABEL_25;
          }
          if (*(_DWORD *)v13 == 1)
          {
LABEL_33:
            WTF::fastFree(v13, v6);
            goto LABEL_25;
          }
          --*(_DWORD *)v13;
        }
      }
LABEL_25:
      if (++v7 == v8) {
        goto LABEL_37;
      }
    }
  }
  if (v2)
  {
LABEL_37:
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) - 8) + 8))();
}

WebKit::JSWebExtensionAPIAction *WebKit::toWebExtensionAPIAction(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  uint64_t result = 0;
  if (this)
  {
    if (a2)
    {
      uint64_t result = WebKit::JSWebExtensionAPIAction::actionClass(0);
      if (result)
      {
        uint64_t v6 = WebKit::JSWebExtensionAPIAction::actionClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private  = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIAction *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIAction::actionClass(WebKit::JSWebExtensionAPIAction *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIAction::actionClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIAction::actionClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v6.version  = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v6.parentClass  = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 48);
    *(_OWORD *)&v6.staticFunctions  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 32);
    *(_OWORD *)&v6.finalize  = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v6.getProperty  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v6.deleteProperty  = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v6.callAsFunction  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v6.hasInstance  = v5;
    v6.className  = "Action";
    v6.parentClass  = 0;
    v6.staticValues  = (const JSStaticValue *)&WebKit::JSWebExtensionAPIAction::staticValues(void)::values;
    v6.staticFunctions  = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIAction::staticFunctions(void)::functions;
    v6.initialize  = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize  = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    JSClassRef result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIAction::actionClass(void)::jsClass  = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIAction::getTitle(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_47;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      IntPoint v36 = "argument";
    }
    else {
      IntPoint v36 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v53;
    WTF::String::utf8();
    if (v52) {
      int v42 = (char *)v52 + 16;
    }
    else {
      int v42 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v55 = 2082;
    char v56 = v36;
    __int16 v57 = 2082;
    int v58 = v42;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function action.getTitle() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v44 = v52;
    int v52 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1) {
        WTF::fastFree(v44, v43);
      }
      else {
        --*(_DWORD *)v44;
      }
    }
    uint64_t v45 = resolve;
    resolve  = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v43);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (int v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (unsigned int v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        uint64_t v22 = *a5;
        unint64_t v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        uint64_t v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_65;
    }
    JSValueRef v31 = *a5;
    if (*a5)
    {
      uint64_t v32 = (void *)MEMORY[0x1E4F30938];
      __n128 v33 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v34 = [v32 valueWithJSValueRef:v31 inContext:v33];

      float v35 = (void *)v34;
    }
    else
    {
      float v35 = 0;
    }
    char v37 = [v35 _isDictionary];

    if ((v37 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      uint64_t v24 = WebKit::toNSDictionary(this, *a5, 1, 0);
      goto LABEL_40;
    }
LABEL_66:
    int v46 = @"an object is expected";
    char v47 = @"details";
    goto LABEL_67;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    uint64_t v24 = 0;
    goto LABEL_40;
  }
  JSValueRef v14 = *a5;
  if (*a5)
  {
    unint64_t v15 = (void *)MEMORY[0x1E4F30938];
    unint64_t v16 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v17 = [v15 valueWithJSValueRef:v14 inContext:v16];

    unsigned int v18 = (void *)v17;
  }
  else
  {
    unsigned int v18 = 0;
  }
  char v25 = [v18 _isDictionary];

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
    goto LABEL_66;
  }
  if (JSValueIsObject(this, a5[1]) && (uint64_t v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v24 = WebKit::toNSDictionary(this, *a5, 1, 0);
    uint64_t v27 = a5[1];
    unint64_t v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    uint64_t v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_41;
    }
LABEL_40:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    char v53 = resolve;
    *(void *)buf  = this;
    int v52 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v53, &v52, &v49);
    uint64_t v29 = v49;
LABEL_41:
    *(void *)buf  = v29;
    id v48 = 0;
    WebKit::WebExtensionAPIAction::getTitle(v12, v24, (uint64_t *)buf, &v48);
    int v39 = (NSString *)v48;
    unsigned __int32 v40 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v40) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v40);
    }
    if (v39)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.getTitle()", 0, v39, v38);
    }
    else if (Undefined)
    {
LABEL_46:

      goto LABEL_47;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_46;
  }
LABEL_65:
  int v46 = @"a function is expected";
  char v47 = @"callback";
LABEL_67:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.getTitle()", &v47->isa, &v46->isa, v21);
  Undefined  = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19896827C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::setTitle(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v51;
    WTF::String::utf8();
    if (v50) {
      int v39 = (char *)v50 + 16;
    }
    else {
      int v39 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v53 = 2082;
    uint64_t v54 = v38;
    __int16 v55 = 2082;
    char v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function action.setTitle() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    unsigned __int32 v41 = v50;
    char v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    int v42 = resolve;
    resolve  = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    uint64_t v17 = *a5;
    if (*a5)
    {
      unsigned int v18 = (void *)MEMORY[0x1E4F30938];
      int v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      uint64_t v21 = (void *)v20;
    }
    else
    {
      uint64_t v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      uint64_t v29 = WebKit::toNSDictionary(this, *a5, 1, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setTitle()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    unint64_t v23 = (void *)MEMORY[0x1E4F30938];
    uint64_t v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    uint64_t v26 = (void *)v25;
  }
  else
  {
    uint64_t v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    uint64_t v44 = @"an object is expected";
    uint64_t v45 = @"details";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (JSValueRef v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v29 = WebKit::toNSDictionary(this, *a5, 1, 0);
    uint64_t v32 = a5[1];
    __n128 v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setTitle()", &cfstr_Details.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v51 = resolve;
    *(void *)buf  = this;
    char v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    uint64_t v15 = v47;
LABEL_28:
    *(void *)buf  = v15;
    id v46 = 0;
    WebKit::WebExtensionAPIAction::setTitle(v12, v29, (uint64_t *)buf, &v46);
    float v35 = (NSString *)v46;
    IntPoint v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setTitle()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v44 = @"a function is expected";
  uint64_t v45 = @"callback";
LABEL_56:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setTitle()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  Undefined  = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198968930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::getBadgeText(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_47;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      IntPoint v36 = "argument";
    }
    else {
      IntPoint v36 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v53;
    WTF::String::utf8();
    if (v52) {
      int v42 = (char *)v52 + 16;
    }
    else {
      int v42 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v55 = 2082;
    char v56 = v36;
    __int16 v57 = 2082;
    int v58 = v42;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function action.getBadgeText() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v44 = v52;
    int v52 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1) {
        WTF::fastFree(v44, v43);
      }
      else {
        --*(_DWORD *)v44;
      }
    }
    uint64_t v45 = resolve;
    resolve  = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v43);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (int v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (uint64_t v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        uint64_t v22 = *a5;
        unint64_t v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        uint64_t v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_65;
    }
    JSValueRef v31 = *a5;
    if (*a5)
    {
      uint64_t v32 = (void *)MEMORY[0x1E4F30938];
      __n128 v33 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v34 = [v32 valueWithJSValueRef:v31 inContext:v33];

      float v35 = (void *)v34;
    }
    else
    {
      float v35 = 0;
    }
    char v37 = [v35 _isDictionary];

    if ((v37 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      uint64_t v24 = WebKit::toNSDictionary(this, *a5, 1, 0);
      goto LABEL_40;
    }
LABEL_66:
    id v46 = @"an object is expected";
    char v47 = @"details";
    goto LABEL_67;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    uint64_t v24 = 0;
    goto LABEL_40;
  }
  JSValueRef v14 = *a5;
  if (*a5)
  {
    uint64_t v15 = (void *)MEMORY[0x1E4F30938];
    unint64_t v16 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v17 = [v15 valueWithJSValueRef:v14 inContext:v16];

    unsigned int v18 = (void *)v17;
  }
  else
  {
    unsigned int v18 = 0;
  }
  char v25 = [v18 _isDictionary];

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
    goto LABEL_66;
  }
  if (JSValueIsObject(this, a5[1]) && (uint64_t v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v24 = WebKit::toNSDictionary(this, *a5, 1, 0);
    char v27 = a5[1];
    unint64_t v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    uint64_t v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_41;
    }
LABEL_40:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    __int16 v53 = resolve;
    *(void *)buf  = this;
    int v52 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v53, &v52, &v49);
    uint64_t v29 = v49;
LABEL_41:
    *(void *)buf  = v29;
    id v48 = 0;
    WebKit::WebExtensionAPIAction::getBadgeText(v12, v24, (uint64_t *)buf, &v48);
    int v39 = (NSString *)v48;
    unsigned __int32 v40 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v40) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v40);
    }
    if (v39)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.getBadgeText()", 0, v39, v38);
    }
    else if (Undefined)
    {
LABEL_46:

      goto LABEL_47;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_46;
  }
LABEL_65:
  id v46 = @"a function is expected";
  char v47 = @"callback";
LABEL_67:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.getBadgeText()", &v47->isa, &v46->isa, v21);
  Undefined  = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989690A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::setBadgeText(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v51;
    WTF::String::utf8();
    if (v50) {
      int v39 = (char *)v50 + 16;
    }
    else {
      int v39 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v53 = 2082;
    uint64_t v54 = v38;
    __int16 v55 = 2082;
    char v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function action.setBadgeText() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    unsigned __int32 v41 = v50;
    char v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    int v42 = resolve;
    resolve  = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    uint64_t v17 = *a5;
    if (*a5)
    {
      unsigned int v18 = (void *)MEMORY[0x1E4F30938];
      int v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      uint64_t v21 = (void *)v20;
    }
    else
    {
      uint64_t v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      uint64_t v29 = WebKit::toNSDictionary(this, *a5, 1, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setBadgeText()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    unint64_t v23 = (void *)MEMORY[0x1E4F30938];
    uint64_t v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    uint64_t v26 = (void *)v25;
  }
  else
  {
    uint64_t v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    uint64_t v44 = @"an object is expected";
    uint64_t v45 = @"details";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (JSValueRef v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v29 = WebKit::toNSDictionary(this, *a5, 1, 0);
    uint64_t v32 = a5[1];
    __n128 v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setBadgeText()", &cfstr_Details.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v51 = resolve;
    *(void *)buf  = this;
    char v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    uint64_t v15 = v47;
LABEL_28:
    *(void *)buf  = v15;
    id v46 = 0;
    WebKit::WebExtensionAPIAction::setBadgeText(v12, v29, (uint64_t *)buf, &v46);
    float v35 = (NSString *)v46;
    IntPoint v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setBadgeText()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v44 = @"a function is expected";
  uint64_t v45 = @"callback";
LABEL_56:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setBadgeText()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  Undefined  = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19896975C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::getBadgeBackgroundColor(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_47;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      IntPoint v36 = "argument";
    }
    else {
      IntPoint v36 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v53;
    WTF::String::utf8();
    if (v52) {
      int v42 = (char *)v52 + 16;
    }
    else {
      int v42 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v55 = 2082;
    char v56 = v36;
    __int16 v57 = 2082;
    int v58 = v42;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function action.getBadgeBackgroundColor() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v44 = v52;
    int v52 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1) {
        WTF::fastFree(v44, v43);
      }
      else {
        --*(_DWORD *)v44;
      }
    }
    uint64_t v45 = resolve;
    resolve  = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v43);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (int v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (uint64_t v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        uint64_t v22 = *a5;
        unint64_t v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        uint64_t v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_65;
    }
    JSValueRef v31 = *a5;
    if (*a5)
    {
      uint64_t v32 = (void *)MEMORY[0x1E4F30938];
      __n128 v33 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v34 = [v32 valueWithJSValueRef:v31 inContext:v33];

      float v35 = (void *)v34;
    }
    else
    {
      float v35 = 0;
    }
    char v37 = [v35 _isDictionary];

    if ((v37 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      uint64_t v24 = WebKit::toNSDictionary(this, *a5, 1, 0);
      goto LABEL_40;
    }
LABEL_66:
    id v46 = @"an object is expected";
    char v47 = @"details";
    goto LABEL_67;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    uint64_t v24 = 0;
    goto LABEL_40;
  }
  JSValueRef v14 = *a5;
  if (*a5)
  {
    uint64_t v15 = (void *)MEMORY[0x1E4F30938];
    unint64_t v16 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v17 = [v15 valueWithJSValueRef:v14 inContext:v16];

    unsigned int v18 = (void *)v17;
  }
  else
  {
    unsigned int v18 = 0;
  }
  char v25 = [v18 _isDictionary];

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
    goto LABEL_66;
  }
  if (JSValueIsObject(this, a5[1]) && (uint64_t v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v24 = WebKit::toNSDictionary(this, *a5, 1, 0);
    char v27 = a5[1];
    unint64_t v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    uint64_t v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_41;
    }
LABEL_40:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    __int16 v53 = resolve;
    *(void *)buf  = this;
    int v52 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v53, &v52, &v49);
    uint64_t v29 = v49;
LABEL_41:
    *(void *)buf  = v29;
    id v48 = 0;
    WebKit::WebExtensionAPIAction::getBadgeBackgroundColor(v12, v24, (WebKit::WebExtensionCallbackHandler **)buf, &v48);
    int v39 = (NSString *)v48;
    unsigned __int32 v40 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v40) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v40);
    }
    if (v39)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.getBadgeBackgroundColor()", 0, v39, v38);
    }
    else if (Undefined)
    {
LABEL_46:

      goto LABEL_47;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_46;
  }
LABEL_65:
  id v46 = @"a function is expected";
  char v47 = @"callback";
LABEL_67:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.getBadgeBackgroundColor()", &v47->isa, &v46->isa, v21);
  Undefined  = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198969ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::setBadgeBackgroundColor(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      char v37 = "argument";
    }
    else {
      char v37 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v50;
    WTF::String::utf8();
    if (v49) {
      uint64_t v38 = (char *)v49 + 16;
    }
    else {
      uint64_t v38 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v52 = 2082;
    __int16 v53 = v37;
    __int16 v54 = 2082;
    __int16 v55 = v38;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function action.setBadgeBackgroundColor() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    unsigned __int32 v40 = v49;
    int v49 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1) {
        WTF::fastFree(v40, v39);
      }
      else {
        --*(_DWORD *)v40;
      }
    }
    unsigned __int32 v41 = resolve;
    resolve  = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2) {
        WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v39);
      }
      else {
        *(_DWORD *)v41 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    uint64_t v17 = *a5;
    if (*a5)
    {
      unsigned int v18 = (void *)MEMORY[0x1E4F30938];
      int v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      uint64_t v21 = (void *)v20;
    }
    else
    {
      uint64_t v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      uint64_t v29 = WebKit::toNSDictionary(this, *a5, 1, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setBadgeBackgroundColor()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v42 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    unint64_t v23 = (void *)MEMORY[0x1E4F30938];
    uint64_t v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    uint64_t v26 = (void *)v25;
  }
  else
  {
    uint64_t v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    JSValueRef v43 = @"an object is expected";
    uint64_t v44 = @"details";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (JSValueRef v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v29 = WebKit::toNSDictionary(this, *a5, 1, 0);
    uint64_t v32 = a5[1];
    __n128 v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setBadgeBackgroundColor()", &cfstr_Details.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    char v50 = resolve;
    *(void *)buf  = this;
    int v49 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v50, &v49, &v46);
    uint64_t v15 = v46;
LABEL_28:
    *(void *)buf  = v15;
    id v45 = 0;
    WebKit::WebExtensionAPIAction::setBadgeBackgroundColor(v12, v29, (JSObjectRef **)buf, &v45);
    float v35 = (NSString *)v45;
    if (*(void *)buf) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(*(WebKit::WebExtensionCallbackHandler **)buf);
    }
    if (v35)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setBadgeBackgroundColor()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  JSValueRef v43 = @"a function is expected";
  uint64_t v44 = @"callback";
LABEL_56:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setBadgeBackgroundColor()", &v44->isa, &v43->isa, v28);
  JSValueRef v42 = JSValueMakeUndefined(this);
LABEL_57:
  Undefined  = v42;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19896A584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::enable(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_33;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      int v30 = "argument";
    }
    else {
      int v30 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v42;
    WTF::String::utf8();
    if (v41) {
      JSValueRef v31 = (char *)v41 + 16;
    }
    else {
      JSValueRef v31 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v44 = 2082;
    id v45 = v30;
    __int16 v46 = 2082;
    char v47 = v31;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function action.enable() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    __n128 v33 = v41;
    unsigned __int32 v41 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1) {
        WTF::fastFree(v33, v32);
      }
      else {
        --*(_DWORD *)v33;
      }
    }
    uint64_t v34 = resolve;
    resolve  = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v32);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
  }

  if (a4 != (OpaqueJSValue *)1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        if (JSValueIsObject(this, a5[1]) && (uint64_t v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
          || JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1]))
        {
          double v16 = JSValueToNumber(this, *a5, 0);
          uint64_t v17 = a5[1];
          unsigned int v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
          uint64_t v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (!*(void *)buf) {
            goto LABEL_26;
          }
LABEL_24:
          Undefined  = 0;
          goto LABEL_27;
        }
        goto LABEL_58;
      }
LABEL_59:
      float v35 = @"a number is expected";
      IntPoint v36 = @"tabId";
      goto LABEL_60;
    }
    double v16 = NAN;
LABEL_26:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    JSValueRef v42 = resolve;
    *(void *)buf  = this;
    unsigned __int32 v41 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v42, &v41, &v38);
    uint64_t v20 = v38;
LABEL_27:
    *(void *)buf  = v20;
    id v37 = 0;
    WebKit::WebExtensionAPIAction::enable(v12, (uint64_t *)buf, &v37, v19, v16);
    char v27 = (NSString *)v37;
    unint64_t v28 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v28) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v28);
    }
    if (v27)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.enable()", 0, v27, v26);
    }
    else if (Undefined)
    {
LABEL_32:

      goto LABEL_33;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_32;
  }
  if (!JSValueIsObject(this, *a5) || (uint64_t v21 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v21)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      if (!JSValueIsNumber(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
        goto LABEL_59;
      }
      double v16 = JSValueToNumber(this, *a5, 0);
      goto LABEL_26;
    }
  }
  if (JSValueIsObject(this, *a5) && (uint64_t v22 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v22))
    || JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5))
  {
    unint64_t v23 = *a5;
    uint64_t v24 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v23, v24, buf);
    uint64_t v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
    double v16 = NAN;
    if (*(void *)buf) {
      goto LABEL_24;
    }
    goto LABEL_26;
  }
LABEL_58:
  float v35 = @"a function is expected";
  IntPoint v36 = @"callback";
LABEL_60:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.enable()", &v36->isa, &v35->isa, v14);
  Undefined  = JSValueMakeUndefined(this);
LABEL_33:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19896AC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::disable(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_33;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      int v30 = "argument";
    }
    else {
      int v30 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v42;
    WTF::String::utf8();
    if (v41) {
      JSValueRef v31 = (char *)v41 + 16;
    }
    else {
      JSValueRef v31 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v44 = 2082;
    id v45 = v30;
    __int16 v46 = 2082;
    char v47 = v31;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function action.disable() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    __n128 v33 = v41;
    unsigned __int32 v41 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1) {
        WTF::fastFree(v33, v32);
      }
      else {
        --*(_DWORD *)v33;
      }
    }
    uint64_t v34 = resolve;
    resolve  = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v32);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
  }

  if (a4 != (OpaqueJSValue *)1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        if (JSValueIsObject(this, a5[1]) && (uint64_t v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
          || JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1]))
        {
          double v16 = JSValueToNumber(this, *a5, 0);
          uint64_t v17 = a5[1];
          unsigned int v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
          uint64_t v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (!*(void *)buf) {
            goto LABEL_26;
          }
LABEL_24:
          Undefined  = 0;
          goto LABEL_27;
        }
        goto LABEL_58;
      }
LABEL_59:
      float v35 = @"a number is expected";
      IntPoint v36 = @"tabId";
      goto LABEL_60;
    }
    double v16 = NAN;
LABEL_26:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    JSValueRef v42 = resolve;
    *(void *)buf  = this;
    unsigned __int32 v41 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v42, &v41, &v38);
    uint64_t v20 = v38;
LABEL_27:
    *(void *)buf  = v20;
    id v37 = 0;
    WebKit::WebExtensionAPIAction::disable(v12, (uint64_t *)buf, &v37, v19, v16);
    char v27 = (NSString *)v37;
    unint64_t v28 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v28) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v28);
    }
    if (v27)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.disable()", 0, v27, v26);
    }
    else if (Undefined)
    {
LABEL_32:

      goto LABEL_33;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_32;
  }
  if (!JSValueIsObject(this, *a5) || (uint64_t v21 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v21)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      if (!JSValueIsNumber(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
        goto LABEL_59;
      }
      double v16 = JSValueToNumber(this, *a5, 0);
      goto LABEL_26;
    }
  }
  if (JSValueIsObject(this, *a5) && (uint64_t v22 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v22))
    || JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5))
  {
    unint64_t v23 = *a5;
    uint64_t v24 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v23, v24, buf);
    uint64_t v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
    double v16 = NAN;
    if (*(void *)buf) {
      goto LABEL_24;
    }
    goto LABEL_26;
  }
LABEL_58:
  float v35 = @"a function is expected";
  IntPoint v36 = @"callback";
LABEL_60:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.disable()", &v36->isa, &v35->isa, v14);
  Undefined  = JSValueMakeUndefined(this);
LABEL_33:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19896B2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::isEnabled(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_47;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      IntPoint v36 = "argument";
    }
    else {
      IntPoint v36 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v53;
    WTF::String::utf8();
    if (v52) {
      JSValueRef v42 = (char *)v52 + 16;
    }
    else {
      JSValueRef v42 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v55 = 2082;
    uint64_t v56 = v36;
    __int16 v57 = 2082;
    int v58 = v42;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function action.isEnabled() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    __int16 v44 = v52;
    __int16 v52 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1) {
        WTF::fastFree(v44, v43);
      }
      else {
        --*(_DWORD *)v44;
      }
    }
    id v45 = resolve;
    resolve  = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v43);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (int v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (uint64_t v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        uint64_t v22 = *a5;
        unint64_t v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        uint64_t v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_65;
    }
    JSValueRef v31 = *a5;
    if (*a5)
    {
      uint64_t v32 = (void *)MEMORY[0x1E4F30938];
      __n128 v33 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v34 = [v32 valueWithJSValueRef:v31 inContext:v33];

      float v35 = (void *)v34;
    }
    else
    {
      float v35 = 0;
    }
    char v37 = [v35 _isDictionary];

    if ((v37 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      uint64_t v24 = WebKit::toNSDictionary(this, *a5, 1, 0);
      goto LABEL_40;
    }
LABEL_66:
    __int16 v46 = @"an object is expected";
    char v47 = @"details";
    goto LABEL_67;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    uint64_t v24 = 0;
    goto LABEL_40;
  }
  JSValueRef v14 = *a5;
  if (*a5)
  {
    uint64_t v15 = (void *)MEMORY[0x1E4F30938];
    double v16 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v17 = [v15 valueWithJSValueRef:v14 inContext:v16];

    unsigned int v18 = (void *)v17;
  }
  else
  {
    unsigned int v18 = 0;
  }
  char v25 = [v18 _isDictionary];

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
    goto LABEL_66;
  }
  if (JSValueIsObject(this, a5[1]) && (uint64_t v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v24 = WebKit::toNSDictionary(this, *a5, 1, 0);
    char v27 = a5[1];
    unint64_t v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    uint64_t v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_41;
    }
LABEL_40:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    __int16 v53 = resolve;
    *(void *)buf  = this;
    __int16 v52 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v53, &v52, &v49);
    uint64_t v29 = v49;
LABEL_41:
    *(void *)buf  = v29;
    id v48 = 0;
    WebKit::WebExtensionAPIAction::isEnabled(v12, v24, (uint64_t *)buf, &v48);
    int v39 = (NSString *)v48;
    unsigned __int32 v40 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v40) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v40);
    }
    if (v39)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.isEnabled()", 0, v39, v38);
    }
    else if (Undefined)
    {
LABEL_46:

      goto LABEL_47;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_46;
  }
LABEL_65:
  __int16 v46 = @"a function is expected";
  char v47 = @"callback";
LABEL_67:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.isEnabled()", &v47->isa, &v46->isa, v21);
  Undefined  = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19896B9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::setIcon(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_40;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      unsigned __int32 v41 = "argument";
    }
    else {
      unsigned __int32 v41 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = *(JSObjectRef *)v55;
    WTF::String::utf8();
    if (v54) {
      JSValueRef v42 = (char *)v54 + 16;
    }
    else {
      JSValueRef v42 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v57 = 2082;
    int v58 = v41;
    __int16 v59 = 2082;
    uint64_t v60 = v42;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function action.setIcon() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    __int16 v44 = v54;
    __int16 v54 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1) {
        WTF::fastFree(v44, v43);
      }
      else {
        --*(_DWORD *)v44;
      }
    }
    id v45 = resolve;
    resolve  = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v43);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    unsigned int v18 = *a5;
    if (*a5)
    {
      int v19 = (void *)MEMORY[0x1E4F30938];
      uint64_t v20 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v21 = [v19 valueWithJSValueRef:v18 inContext:v20];

      uint64_t v22 = (void *)v21;
    }
    else
    {
      uint64_t v22 = 0;
    }
    char v28 = [v22 _isDictionary];

    if (v28)
    {
      uint64_t v17 = WebKit::toNSDictionary(this, *a5, 1, 0);
      if (!v17) {
        goto LABEL_7;
      }
      goto LABEL_26;
    }
    goto LABEL_61;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    unint64_t v23 = *a5;
    if (*a5)
    {
      uint64_t v24 = (void *)MEMORY[0x1E4F30938];
      char v25 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v26 = [v24 valueWithJSValueRef:v23 inContext:v25];

      char v27 = (void *)v26;
    }
    else
    {
      char v27 = 0;
    }
    char v30 = [v27 _isDictionary];

    if (v30)
    {
      if (JSValueIsObject(this, a5[1]) && (JSValueRef v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
        || JSValueIsNull(this, a5[1])
        || JSValueIsUndefined(this, a5[1]))
      {
        uint64_t v17 = WebKit::toNSDictionary(this, *a5, 1, 0);
        uint64_t v32 = a5[1];
        __n128 v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
        uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
        if (!v17) {
          goto LABEL_8;
        }
        if (*(void *)buf)
        {
          Undefined  = 0;
          goto LABEL_27;
        }
LABEL_26:
        reject  = 0;
        resolve  = 0;
        Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
        *(void *)buf  = this;
        __int16 v54 = reject;
        *(void *)__int16 v55 = resolve;
        WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, (OpaqueJSValue **)v55, &v54, &v51);
        uint64_t v15 = v51;
LABEL_27:
        GlobalContext  = JSContextGetGlobalContext(this);
        WebKit::WebFrame::frameForContext(GlobalContext, v35, buf);
        if (*(void *)buf)
        {
          *(void *)__int16 v55 = v15;
          id v50 = 0;
          WebKit::WebExtensionAPIAction::setIcon(v12, *(WebKit::WebFrame **)buf, v17, (uint64_t *)v55, &v50);
          char v37 = (NSString *)v50;
          uint64_t v38 = *(WebKit::WebExtensionCallbackHandler **)v55;
          *(void *)__int16 v55 = 0;
          if (v38) {
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v38);
          }
          if (v37)
          {
            *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setIcon()", 0, v37, v36);
          }
          else if (Undefined)
          {
LABEL_33:

            if (*(void *)buf) {
              CFRelease(*(CFTypeRef *)(*(void *)buf + 8));
            }
            uint64_t v15 = 0;
            goto LABEL_36;
          }
          Undefined  = JSValueMakeUndefined(this);
          goto LABEL_33;
        }
        id v48 = qword_1EB357DF8;
        if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__int16 v55 = 0;
          _os_log_error_impl(&dword_1985F2000, v48, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v55, 2u);
          if (!Undefined) {
            goto LABEL_66;
          }
        }
        else if (!Undefined)
        {
          goto LABEL_66;
        }
        Undefined  = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"action.setIcon()", 0, &cfstr_AnUnknownError.isa, v49);
        if (Undefined) {
          goto LABEL_36;
        }
LABEL_66:
        Undefined  = JSValueMakeUndefined(this);
        goto LABEL_36;
      }
      __int16 v46 = @"a function is expected";
      char v47 = @"callback";
LABEL_62:
      int v39 = 0;
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setIcon()", &v47->isa, &v46->isa, v29);
      Undefined  = JSValueMakeUndefined(this);
LABEL_39:

      goto LABEL_40;
    }
LABEL_61:
    __int16 v46 = @"an object is expected";
    char v47 = @"details";
    goto LABEL_62;
  }
  if (a4)
  {
LABEL_7:
    uint64_t v15 = 0;
LABEL_8:
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setIcon()", &cfstr_Details.isa, &cfstr_AnObjectIsExpe.isa, v14);
    Undefined  = JSValueMakeUndefined(this);
    uint64_t v17 = 0;
LABEL_36:
    if (v15) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
    }
    int v39 = v17;
    goto LABEL_39;
  }
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setIcon()", 0, &cfstr_ARequiredArgum.isa, v14);
  Undefined  = JSValueMakeUndefined(this);
LABEL_40:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19896C184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    CFRelease(*(CFTypeRef *)(a17 + 8));
  }
  if (v19) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
  }

  if (*(_DWORD *)(v17 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v17 + 40) + 8))(v17 + 40);
  }
  else {
    --*(_DWORD *)(v17 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIAction::setPopup(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v51;
    WTF::String::utf8();
    if (v50) {
      int v39 = (char *)v50 + 16;
    }
    else {
      int v39 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v53 = 2082;
    __int16 v54 = v38;
    __int16 v55 = 2082;
    uint64_t v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function action.setPopup() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    unsigned __int32 v41 = v50;
    id v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    JSValueRef v42 = resolve;
    resolve  = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    uint64_t v17 = *a5;
    if (*a5)
    {
      unsigned int v18 = (void *)MEMORY[0x1E4F30938];
      int v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      uint64_t v21 = (void *)v20;
    }
    else
    {
      uint64_t v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      uint64_t v29 = WebKit::toNSDictionary(this, *a5, 1, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setPopup()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    unint64_t v23 = (void *)MEMORY[0x1E4F30938];
    uint64_t v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    uint64_t v26 = (void *)v25;
  }
  else
  {
    uint64_t v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    __int16 v44 = @"an object is expected";
    id v45 = @"details";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (JSValueRef v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v29 = WebKit::toNSDictionary(this, *a5, 1, 0);
    uint64_t v32 = a5[1];
    __n128 v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setPopup()", &cfstr_Details.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v51 = resolve;
    *(void *)buf  = this;
    id v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    uint64_t v15 = v47;
LABEL_28:
    *(void *)buf  = v15;
    id v46 = 0;
    WebKit::WebExtensionAPIAction::setPopup(v12, v29, (uint64_t *)buf, &v46);
    float v35 = (NSString *)v46;
    IntPoint v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setPopup()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  __int16 v44 = @"a function is expected";
  id v45 = @"callback";
LABEL_56:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.setPopup()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  Undefined  = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19896C868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::getPopup(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_47;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      IntPoint v36 = "argument";
    }
    else {
      IntPoint v36 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v53;
    WTF::String::utf8();
    if (v52) {
      JSValueRef v42 = (char *)v52 + 16;
    }
    else {
      JSValueRef v42 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v55 = 2082;
    uint64_t v56 = v36;
    __int16 v57 = 2082;
    int v58 = v42;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function action.getPopup() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    __int16 v44 = v52;
    __int16 v52 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1) {
        WTF::fastFree(v44, v43);
      }
      else {
        --*(_DWORD *)v44;
      }
    }
    id v45 = resolve;
    resolve  = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v43);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (int v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (uint64_t v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        uint64_t v22 = *a5;
        unint64_t v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        uint64_t v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_65;
    }
    JSValueRef v31 = *a5;
    if (*a5)
    {
      uint64_t v32 = (void *)MEMORY[0x1E4F30938];
      __n128 v33 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v34 = [v32 valueWithJSValueRef:v31 inContext:v33];

      float v35 = (void *)v34;
    }
    else
    {
      float v35 = 0;
    }
    char v37 = [v35 _isDictionary];

    if ((v37 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      uint64_t v24 = WebKit::toNSDictionary(this, *a5, 1, 0);
      goto LABEL_40;
    }
LABEL_66:
    id v46 = @"an object is expected";
    char v47 = @"details";
    goto LABEL_67;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    uint64_t v24 = 0;
    goto LABEL_40;
  }
  JSValueRef v14 = *a5;
  if (*a5)
  {
    uint64_t v15 = (void *)MEMORY[0x1E4F30938];
    double v16 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v17 = [v15 valueWithJSValueRef:v14 inContext:v16];

    unsigned int v18 = (void *)v17;
  }
  else
  {
    unsigned int v18 = 0;
  }
  char v25 = [v18 _isDictionary];

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
    goto LABEL_66;
  }
  if (JSValueIsObject(this, a5[1]) && (uint64_t v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v24 = WebKit::toNSDictionary(this, *a5, 1, 0);
    char v27 = a5[1];
    char v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    uint64_t v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_41;
    }
LABEL_40:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    __int16 v53 = resolve;
    *(void *)buf  = this;
    __int16 v52 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v53, &v52, &v49);
    uint64_t v29 = v49;
LABEL_41:
    *(void *)buf  = v29;
    id v48 = 0;
    WebKit::WebExtensionAPIAction::getPopup(v12, v24, (uint64_t *)buf, &v48);
    int v39 = (NSString *)v48;
    unsigned __int32 v40 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v40) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v40);
    }
    if (v39)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.getPopup()", 0, v39, v38);
    }
    else if (Undefined)
    {
LABEL_46:

      goto LABEL_47;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_46;
  }
LABEL_65:
  id v46 = @"a function is expected";
  char v47 = @"callback";
LABEL_67:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.getPopup()", &v47->isa, &v46->isa, v21);
  Undefined  = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19896CFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::openPopup(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIAction(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_62;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      IntPoint v36 = "argument";
    }
    else {
      IntPoint v36 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v64;
    WTF::String::utf8();
    if (v63) {
      __int16 v53 = (char *)v63 + 16;
    }
    else {
      __int16 v53 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v66 = 2082;
    uint64_t v67 = v36;
    __int16 v68 = 2082;
    uint64_t v69 = v53;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function action.openPopup() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    __int16 v55 = v63;
    __int16 v63 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 1) {
        WTF::fastFree(v55, v54);
      }
      else {
        --*(_DWORD *)v55;
      }
    }
    uint64_t v56 = resolve;
    resolve  = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2) {
        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v54);
      }
      else {
        *(_DWORD *)v56 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (int v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (uint64_t v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        uint64_t v22 = *a5;
        unint64_t v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        uint64_t v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_82;
    }
    JSValueRef v31 = *a5;
    if (*a5)
    {
      uint64_t v32 = (void *)MEMORY[0x1E4F30938];
      __n128 v33 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v34 = [v32 valueWithJSValueRef:v31 inContext:v33];

      float v35 = (void *)v34;
    }
    else
    {
      float v35 = 0;
    }
    char v37 = [v35 _isDictionary];

    if ((v37 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      uint64_t v24 = WebKit::toNSDictionary(this, *a5, 1, 0);
      goto LABEL_40;
    }
LABEL_83:
    __int16 v57 = @"an object is expected";
    int v58 = @"options";
    goto LABEL_84;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    uint64_t v24 = 0;
    goto LABEL_40;
  }
  JSValueRef v14 = *a5;
  if (*a5)
  {
    uint64_t v15 = (void *)MEMORY[0x1E4F30938];
    double v16 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v17 = [v15 valueWithJSValueRef:v14 inContext:v16];

    unsigned int v18 = (void *)v17;
  }
  else
  {
    unsigned int v18 = 0;
  }
  char v25 = [v18 _isDictionary];

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
    goto LABEL_83;
  }
  if (!JSValueIsObject(this, a5[1]) || (uint64_t v26 = JSValueToObject(this, a5[1], 0), !JSObjectIsFunction(this, v26)))
  {
    if (!JSValueIsNull(this, a5[1]) && !JSValueIsUndefined(this, a5[1]))
    {
LABEL_82:
      __int16 v57 = @"a function is expected";
      int v58 = @"callback";
LABEL_84:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.openPopup()", &v58->isa, &v57->isa, v21);
      Undefined  = JSValueMakeUndefined(this);
      uint64_t v24 = 0;
      goto LABEL_61;
    }
  }
  uint64_t v24 = WebKit::toNSDictionary(this, *a5, 1, 0);
  char v27 = a5[1];
  char v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
  uint64_t v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(void *)buf)
  {
    Undefined  = 0;
    goto LABEL_41;
  }
LABEL_40:
  reject  = 0;
  resolve  = 0;
  Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
  char v64 = resolve;
  *(void *)buf  = this;
  __int16 v63 = reject;
  WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v64, &v63, &v60);
  uint64_t v29 = v60;
LABEL_41:
  GlobalContext  = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v39, buf);
  uint64_t v40 = *(void *)buf;
  if (!*(void *)buf) {
    goto LABEL_55;
  }
  uint64_t v41 = *(void *)(*(void *)buf + 24);
  if (!v41
    || (uint64_t v42 = *(void *)(v41 + 8)) == 0
    || (uint64_t v43 = *(void *)(v42 + 24)) == 0
    || (uint64_t v44 = *(void *)(v43 + 8)) == 0
    || (id v45 = *(void **)(*(void *)(v44 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v45 + 1368))(v45) & 1) != 0)
    || (uint64_t v46 = *(void *)(v45[2] + 8)) == 0)
  {
    CFRelease(*(CFTypeRef *)(v40 + 8));
LABEL_55:
    id v50 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf  = 0;
      _os_log_error_impl(&dword_1985F2000, v50, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_57:
        Undefined  = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"action.openPopup()", 0, &cfstr_AnUnknownError.isa, v51);
        if (Undefined) {
          goto LABEL_59;
        }
      }
    }
    else if (Undefined)
    {
      goto LABEL_57;
    }
    Undefined  = JSValueMakeUndefined(this);
LABEL_59:
    if (v29) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v29);
    }
    goto LABEL_61;
  }
  CFRetain(*(CFTypeRef *)(v46 - 8));
  CFRelease(*(CFTypeRef *)(v40 + 8));
  *(void *)buf  = v29;
  id v59 = 0;
  WebKit::WebExtensionAPIAction::openPopup(v12, v46 - 16, v24, (uint64_t *)buf, &v59);
  id v48 = (NSString *)v59;
  int v49 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(void *)buf  = 0;
  if (v49) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v49);
  }
  if (v48)
  {
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"action.openPopup()", 0, v48, v47);
    goto LABEL_52;
  }
  if (!Undefined) {
LABEL_52:
  }
    Undefined  = JSValueMakeUndefined(this);

  CFRelease(*(CFTypeRef *)(v46 - 8));
LABEL_61:

LABEL_62:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19896D880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAction::onClicked(WebKit::JSWebExtensionAPIAction *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIAction(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      uint64_t v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter action.onClicked in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIAction::onClicked(v7);
    Undefined  = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_19896DBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionCallbackHandler *WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>@<X0>(JSContextRef *a1@<X0>, OpaqueJSValue **a2@<X1>, OpaqueJSValue **a3@<X2>, WebKit::WebExtensionCallbackHandler **a4@<X8>)
{
  uint64_t v8 = (WebKit::WebExtensionCallbackHandler *)WTF::fastMalloc((WTF *)0x28);
  JSClassRef result = WebKit::WebExtensionCallbackHandler::WebExtensionCallbackHandler(v8, *a1, *a2, *a3);
  *a4  = v8;
  return result;
}

void sub_19896DCDC(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::WebExtensionCallbackHandler *WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(WebKit::WebExtensionCallbackHandler *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::WebExtensionCallbackHandler::~WebExtensionCallbackHandler(result);
    return (WebKit::WebExtensionCallbackHandler *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WebKit::JSWebExtensionAPIAlarms *WebKit::toWebExtensionAPIAlarms(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPIAlarms::alarmsClass(0);
      if (result)
      {
        JSClassDefinition v6 = WebKit::JSWebExtensionAPIAlarms::alarmsClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private  = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIAlarms *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIAlarms::alarmsClass(WebKit::JSWebExtensionAPIAlarms *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIAlarms::alarmsClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIAlarms::alarmsClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v6.version  = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v6.parentClass  = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 48);
    *(_OWORD *)&v6.staticFunctions  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 32);
    *(_OWORD *)&v6.finalize  = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v6.getProperty  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v6.deleteProperty  = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v6.callAsFunction  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v6.hasInstance  = v5;
    v6.className  = "Alarms";
    v6.parentClass  = 0;
    v6.staticValues  = (const JSStaticValue *)&WebKit::JSWebExtensionAPIAlarms::staticValues(void)::values;
    v6.staticFunctions  = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIAlarms::staticFunctions(void)::functions;
    v6.initialize  = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize  = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    JSClassRef result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIAlarms::alarmsClass(void)::jsClass  = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIAlarms::create(WebKit::JSWebExtensionAPIAlarms *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIAlarms(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_38;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      char v37 = "argument";
    }
    else {
      char v37 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    id v45 = v47;
    WTF::String::utf8();
    if (v46) {
      uint64_t v38 = (char *)v46 + 16;
    }
    else {
      uint64_t v38 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    int v49 = a4;
    __int16 v50 = 2082;
    uint64_t v51 = v37;
    __int16 v52 = 2082;
    __int16 v53 = v38;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function alarms.create() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v40 = v46;
    uint64_t v46 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1) {
        WTF::fastFree(v40, v39);
      }
      else {
        --*(_DWORD *)v40;
      }
    }
    uint64_t v41 = v45;
    id v45 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2) {
        WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v39);
      }
      else {
        *(_DWORD *)v41 -= 2;
      }
    }
  }

  unint64_t v15 = (unint64_t)a4 - 2;
  if (a4 == (OpaqueJSValue *)2)
  {
    if (JSValueIsString(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      JSValueRef v24 = a5[1];
      if (v24)
      {
        char v25 = (void *)MEMORY[0x1E4F30938];
        uint64_t v26 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        char v27 = [v25 valueWithJSValueRef:v24 inContext:v26];
      }
      else
      {
        char v27 = 0;
      }
      char v31 = [v27 _isDictionary];

      if (v31)
      {
        uint64_t v32 = WebKit::toNSString(this, *a5, 2);
        WebKit::toNSDictionary(this, a5[1], 0, 0);
        v22 = char v28 = v32;
        if (v22)
        {
LABEL_34:
          id v44 = 0;
          WebKit::WebExtensionAPIAlarms::createAlarm(v12, v32, v22, &v44);
          float v35 = (NSString *)v44;
          if (v35) {
            *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"alarms.create()", 0, v35, v34);
          }
          Undefined  = JSValueMakeUndefined(this);

          char v28 = v32;
          goto LABEL_37;
        }
        goto LABEL_16;
      }
      uint64_t v42 = @"an object is expected";
      uint64_t v43 = @"info";
    }
    else
    {
      uint64_t v42 = @"a string is expected";
      uint64_t v43 = @"name";
    }
    char v28 = 0;
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"alarms.create()", &v43->isa, &v42->isa, v23);
    Undefined  = JSValueMakeUndefined(this);
    uint64_t v22 = 0;
    goto LABEL_37;
  }
  if (a4)
  {
    unint64_t v16 = (unint64_t)a4 - 1;
    if ((uint64_t)a4 - 1 < 0)
    {
      char v28 = 0;
    }
    else
    {
      uint64_t v17 = a5[v16];
      if (v17)
      {
        uint64_t v18 = (void *)MEMORY[0x1E4F30938];
        uint64_t v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

        LOBYTE(v19)  = [v20 _isDictionary];
        if ((v19 & 1) == 0)
        {
          uint64_t v22 = 0;
          *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"alarms.create()", &cfstr_Info.isa, &cfstr_AnObjectIsExpe.isa, v21);
          Undefined  = JSValueMakeUndefined(this);
          char v28 = 0;
          goto LABEL_37;
        }
        uint64_t v22 = WebKit::toNSDictionary(this, v17, 0, 0);
      }
      else
      {
        uint64_t v22 = 0;
        unint64_t v15 = v16;
      }
      char v28 = 0;
      if (v16 && (v15 & 0x8000000000000000) == 0)
      {
        __n128 v33 = a5[v15];
        if (v33 && (JSValueIsString(this, v33) || JSValueIsNull(this, v33) || JSValueIsUndefined(this, v33)))
        {
          char v28 = WebKit::toNSString(this, v33, 2);
          --v15;
        }
        else
        {
          char v28 = 0;
        }
      }
      if (v22)
      {
        if ((v15 & 0x8000000000000000) != 0)
        {
          uint64_t v32 = v28;
          goto LABEL_34;
        }
        *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"alarms.create()", 0, &cfstr_AnUnknownArgum.isa, v14);
        JSValueRef v29 = JSValueMakeUndefined(this);
        goto LABEL_17;
      }
    }
LABEL_16:
    uint64_t v22 = 0;
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"alarms.create()", &cfstr_Info.isa, &cfstr_AnObjectIsExpe.isa, v14);
    JSValueRef v29 = JSValueMakeUndefined(this);
LABEL_17:
    Undefined  = v29;
LABEL_37:

    goto LABEL_38;
  }
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"alarms.create()", 0, &cfstr_ARequiredArgum.isa, v14);
  Undefined  = JSValueMakeUndefined(this);
LABEL_38:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19896E4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAlarms::get(WebKit::JSWebExtensionAPIAlarms *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIAlarms(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_32;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      char v27 = "argument";
    }
    else {
      char v27 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v38;
    WTF::String::utf8();
    if (v37) {
      char v28 = (char *)v37 + 16;
    }
    else {
      char v28 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v40 = 2082;
    uint64_t v41 = v27;
    __int16 v42 = 2082;
    uint64_t v43 = v28;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function alarms.get() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    int v30 = v37;
    char v37 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1) {
        WTF::fastFree(v30, v29);
      }
      else {
        --*(_DWORD *)v30;
      }
    }
    char v31 = resolve;
    resolve  = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v29);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (uint64_t v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (uint64_t v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        uint64_t v21 = *a5;
        uint64_t v22 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v21, v22, buf);
        unint64_t v16 = 0;
LABEL_23:
        unint64_t v23 = *(WebKit::WebExtensionCallbackHandler **)buf;
        if (*(void *)buf)
        {
          Undefined  = 0;
LABEL_27:
          *(void *)buf  = v23;
          WebKit::WebExtensionAPIAlarms::get(v12, v16, (uint64_t *)buf);
          char v25 = *(WebKit::WebExtensionCallbackHandler **)buf;
          *(void *)buf  = 0;
          if (v25) {
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v25);
          }
          if (!Undefined) {
            Undefined  = JSValueMakeUndefined(this);
          }
          goto LABEL_31;
        }
LABEL_26:
        reject  = 0;
        resolve  = 0;
        Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
        uint64_t v38 = resolve;
        *(void *)buf  = this;
        char v37 = reject;
        WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v38, &v37, &v34);
        unint64_t v23 = v34;
        goto LABEL_27;
      }
      goto LABEL_56;
    }
    if (JSValueIsString(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      unint64_t v16 = WebKit::toNSString(this, *a5, 2);
      goto LABEL_26;
    }
LABEL_57:
    uint64_t v32 = @"a string is expected";
    __n128 v33 = @"name";
    goto LABEL_58;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    unint64_t v16 = 0;
    goto LABEL_26;
  }
  if (!JSValueIsString(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
    goto LABEL_57;
  }
  if (JSValueIsObject(this, a5[1]) && (unint64_t v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    unint64_t v16 = WebKit::toNSString(this, *a5, 2);
    uint64_t v17 = a5[1];
    uint64_t v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
    goto LABEL_23;
  }
LABEL_56:
  uint64_t v32 = @"a function is expected";
  __n128 v33 = @"callback";
LABEL_58:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"alarms.get()", &v33->isa, &v32->isa, v14);
  Undefined  = JSValueMakeUndefined(this);
  unint64_t v16 = 0;
LABEL_31:

LABEL_32:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19896EAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAlarms::getAll(WebKit::JSWebExtensionAPIAlarms *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIAlarms(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_17;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      unint64_t v23 = "argument";
    }
    else {
      unint64_t v23 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v32;
    WTF::String::utf8();
    if (v31) {
      JSValueRef v24 = (char *)v31 + 16;
    }
    else {
      JSValueRef v24 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v34 = 2082;
    float v35 = v23;
    __int16 v36 = 2082;
    char v37 = v24;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function alarms.getAll() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v26 = v31;
    char v31 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1) {
        WTF::fastFree(v26, v25);
      }
      else {
        --*(_DWORD *)v26;
      }
    }
    char v27 = resolve;
    resolve  = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }

  if (a4 != (OpaqueJSValue *)1) {
    goto LABEL_11;
  }
  if (!JSValueIsObject(this, *a5) || (JSValueRef v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"alarms.getAll()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v15);
      JSValueRef v21 = JSValueMakeUndefined(this);
      goto LABEL_16;
    }
  }
  unint64_t v16 = *a5;
  uint64_t v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(void *)buf)
  {
    Undefined  = 0;
  }
  else
  {
LABEL_11:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v32 = resolve;
    *(void *)buf  = this;
    char v31 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v32, &v31, &v28);
    uint64_t v18 = v28;
  }
  *(void *)buf  = v18;
  WebKit::WebExtensionAPIAlarms::getAll(v12, (uint64_t *)buf);
  uint64_t v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(void *)buf  = 0;
  if (v20) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  }
  if (Undefined) {
    goto LABEL_17;
  }
  JSValueRef v21 = JSValueMakeUndefined(this);
LABEL_16:
  Undefined  = v21;
LABEL_17:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19896EF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAlarms::clear(WebKit::JSWebExtensionAPIAlarms *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIAlarms(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_32;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      char v27 = "argument";
    }
    else {
      char v27 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v38;
    WTF::String::utf8();
    if (v37) {
      char v28 = (char *)v37 + 16;
    }
    else {
      char v28 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v40 = 2082;
    uint64_t v41 = v27;
    __int16 v42 = 2082;
    uint64_t v43 = v28;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function alarms.clear() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    int v30 = v37;
    char v37 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1) {
        WTF::fastFree(v30, v29);
      }
      else {
        --*(_DWORD *)v30;
      }
    }
    char v31 = resolve;
    resolve  = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v29);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (uint64_t v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (uint64_t v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        JSValueRef v21 = *a5;
        uint64_t v22 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v21, v22, buf);
        unint64_t v16 = 0;
LABEL_23:
        unint64_t v23 = *(WebKit::WebExtensionCallbackHandler **)buf;
        if (*(void *)buf)
        {
          Undefined  = 0;
LABEL_27:
          *(void *)buf  = v23;
          WebKit::WebExtensionAPIAlarms::clear(v12, v16, (uint64_t *)buf);
          char v25 = *(WebKit::WebExtensionCallbackHandler **)buf;
          *(void *)buf  = 0;
          if (v25) {
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v25);
          }
          if (!Undefined) {
            Undefined  = JSValueMakeUndefined(this);
          }
          goto LABEL_31;
        }
LABEL_26:
        reject  = 0;
        resolve  = 0;
        Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
        uint64_t v38 = resolve;
        *(void *)buf  = this;
        char v37 = reject;
        WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v38, &v37, &v34);
        unint64_t v23 = v34;
        goto LABEL_27;
      }
      goto LABEL_56;
    }
    if (JSValueIsString(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      unint64_t v16 = WebKit::toNSString(this, *a5, 2);
      goto LABEL_26;
    }
LABEL_57:
    uint64_t v32 = @"a string is expected";
    __n128 v33 = @"name";
    goto LABEL_58;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    unint64_t v16 = 0;
    goto LABEL_26;
  }
  if (!JSValueIsString(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
    goto LABEL_57;
  }
  if (JSValueIsObject(this, a5[1]) && (uint64_t v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    unint64_t v16 = WebKit::toNSString(this, *a5, 2);
    uint64_t v17 = a5[1];
    uint64_t v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
    goto LABEL_23;
  }
LABEL_56:
  uint64_t v32 = @"a function is expected";
  __n128 v33 = @"callback";
LABEL_58:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"alarms.clear()", &v33->isa, &v32->isa, v14);
  Undefined  = JSValueMakeUndefined(this);
  unint64_t v16 = 0;
LABEL_31:

LABEL_32:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19896F5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAlarms::clearAll(WebKit::JSWebExtensionAPIAlarms *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIAlarms(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_17;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      unint64_t v23 = "argument";
    }
    else {
      unint64_t v23 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v32;
    WTF::String::utf8();
    if (v31) {
      JSValueRef v24 = (char *)v31 + 16;
    }
    else {
      JSValueRef v24 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v34 = 2082;
    float v35 = v23;
    __int16 v36 = 2082;
    char v37 = v24;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function alarms.clearAll() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v26 = v31;
    char v31 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1) {
        WTF::fastFree(v26, v25);
      }
      else {
        --*(_DWORD *)v26;
      }
    }
    char v27 = resolve;
    resolve  = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }

  if (a4 != (OpaqueJSValue *)1) {
    goto LABEL_11;
  }
  if (!JSValueIsObject(this, *a5) || (JSValueRef v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"alarms.clearAll()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v15);
      JSValueRef v21 = JSValueMakeUndefined(this);
      goto LABEL_16;
    }
  }
  unint64_t v16 = *a5;
  uint64_t v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(void *)buf)
  {
    Undefined  = 0;
  }
  else
  {
LABEL_11:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v32 = resolve;
    *(void *)buf  = this;
    char v31 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v32, &v31, &v28);
    uint64_t v18 = v28;
  }
  *(void *)buf  = v18;
  WebKit::WebExtensionAPIAlarms::clearAll(v12, (uint64_t *)buf);
  uint64_t v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(void *)buf  = 0;
  if (v20) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  }
  if (Undefined) {
    goto LABEL_17;
  }
  JSValueRef v21 = JSValueMakeUndefined(this);
LABEL_16:
  Undefined  = v21;
LABEL_17:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19896FA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIAlarms::onAlarm(WebKit::JSWebExtensionAPIAlarms *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIAlarms(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      uint64_t v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter alarms.onAlarm in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIAlarms::onAlarm(v7);
    Undefined  = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_19896FD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPICommands *WebKit::toWebExtensionAPICommands(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPICommands::commandsClass(0);
      if (result)
      {
        JSClassDefinition v6 = WebKit::JSWebExtensionAPICommands::commandsClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private  = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPICommands *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPICommands::commandsClass(WebKit::JSWebExtensionAPICommands *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPICommands::commandsClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPICommands::commandsClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v6.version  = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v6.parentClass  = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 48);
    *(_OWORD *)&v6.staticFunctions  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 32);
    *(_OWORD *)&v6.finalize  = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v6.getProperty  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v6.deleteProperty  = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v6.callAsFunction  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v6.hasInstance  = v5;
    v6.className  = "Commands";
    v6.parentClass  = 0;
    v6.staticValues  = (const JSStaticValue *)&WebKit::JSWebExtensionAPICommands::staticValues(void)::values;
    v6.staticFunctions  = (const JSStaticFunction *)&WebKit::JSWebExtensionAPICommands::staticFunctions(void)::functions;
    v6.initialize  = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize  = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    JSClassRef result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPICommands::commandsClass(void)::jsClass  = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPICommands::getAll(WebKit::JSWebExtensionAPICommands *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPICommands(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_17;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      unint64_t v23 = "argument";
    }
    else {
      unint64_t v23 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v32;
    WTF::String::utf8();
    if (v31) {
      JSValueRef v24 = (char *)v31 + 16;
    }
    else {
      JSValueRef v24 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v34 = 2082;
    float v35 = v23;
    __int16 v36 = 2082;
    char v37 = v24;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function commands.getAll() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v26 = v31;
    char v31 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1) {
        WTF::fastFree(v26, v25);
      }
      else {
        --*(_DWORD *)v26;
      }
    }
    char v27 = resolve;
    resolve  = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }

  if (a4 != (OpaqueJSValue *)1) {
    goto LABEL_11;
  }
  if (!JSValueIsObject(this, *a5) || (JSValueRef v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"commands.getAll()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v15);
      JSValueRef v21 = JSValueMakeUndefined(this);
      goto LABEL_16;
    }
  }
  unint64_t v16 = *a5;
  uint64_t v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(void *)buf)
  {
    Undefined  = 0;
  }
  else
  {
LABEL_11:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v32 = resolve;
    *(void *)buf  = this;
    char v31 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v32, &v31, &v28);
    uint64_t v18 = v28;
  }
  *(void *)buf  = v18;
  WebKit::WebExtensionAPICommands::getAll(v12, (uint64_t *)buf);
  uint64_t v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(void *)buf  = 0;
  if (v20) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  }
  if (Undefined) {
    goto LABEL_17;
  }
  JSValueRef v21 = JSValueMakeUndefined(this);
LABEL_16:
  Undefined  = v21;
LABEL_17:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989702A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPICommands::onCommand(WebKit::JSWebExtensionAPICommands *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPICommands(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      uint64_t v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter commands.onCommand in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPICommands::onCommand(v7);
    Undefined  = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989705A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPICommands::onChanged(WebKit::JSWebExtensionAPICommands *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPICommands(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      uint64_t v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter commands.onChanged in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPICommands::onChanged(v7);
    Undefined  = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_198970874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPICookies *WebKit::toWebExtensionAPICookies(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPICookies::cookiesClass(0);
      if (result)
      {
        JSClassDefinition v6 = WebKit::JSWebExtensionAPICookies::cookiesClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private  = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPICookies *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPICookies::cookiesClass(WebKit::JSWebExtensionAPICookies *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPICookies::cookiesClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPICookies::cookiesClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v6.version  = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v6.parentClass  = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 48);
    *(_OWORD *)&v6.staticFunctions  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 32);
    *(_OWORD *)&v6.finalize  = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v6.getProperty  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v6.deleteProperty  = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v6.callAsFunction  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v6.hasInstance  = v5;
    v6.className  = "Cookies";
    v6.parentClass  = 0;
    v6.staticValues  = (const JSStaticValue *)&WebKit::JSWebExtensionAPICookies::staticValues(void)::values;
    v6.staticFunctions  = (const JSStaticFunction *)&WebKit::JSWebExtensionAPICookies::staticFunctions(void)::functions;
    v6.initialize  = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize  = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    JSClassRef result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPICookies::cookiesClass(void)::jsClass  = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPICookies::get(WebKit::JSWebExtensionAPICookies *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPICookies(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v51;
    WTF::String::utf8();
    if (v50) {
      int v39 = (char *)v50 + 16;
    }
    else {
      int v39 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v53 = 2082;
    uint64_t v54 = v38;
    __int16 v55 = 2082;
    uint64_t v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function cookies.get() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v41 = v50;
    __int16 v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    __int16 v42 = resolve;
    resolve  = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    uint64_t v17 = *a5;
    if (*a5)
    {
      uint64_t v18 = (void *)MEMORY[0x1E4F30938];
      uint64_t v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      JSValueRef v21 = (void *)v20;
    }
    else
    {
      JSValueRef v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      JSValueRef v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"cookies.get()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    unint64_t v23 = (void *)MEMORY[0x1E4F30938];
    JSValueRef v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    uint64_t v26 = (void *)v25;
  }
  else
  {
    uint64_t v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    uint64_t v44 = @"an object is expected";
    id v45 = @"details";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (char v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    JSValueRef v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
    uint64_t v32 = a5[1];
    __n128 v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"cookies.get()", &cfstr_Details.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v51 = resolve;
    *(void *)buf  = this;
    __int16 v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    uint64_t v15 = v47;
LABEL_28:
    *(void *)buf  = v15;
    id v46 = 0;
    WebKit::WebExtensionAPICookies::get(v12, v29, (uint64_t *)buf, &v46);
    float v35 = (NSString *)v46;
    __int16 v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"cookies.get()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v44 = @"a function is expected";
  id v45 = @"callback";
LABEL_56:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"cookies.get()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  Undefined  = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198970FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPICookies::getAll(WebKit::JSWebExtensionAPICookies *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPICookies(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v51;
    WTF::String::utf8();
    if (v50) {
      int v39 = (char *)v50 + 16;
    }
    else {
      int v39 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v53 = 2082;
    uint64_t v54 = v38;
    __int16 v55 = 2082;
    uint64_t v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function cookies.getAll() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v41 = v50;
    __int16 v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    __int16 v42 = resolve;
    resolve  = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    uint64_t v17 = *a5;
    if (*a5)
    {
      uint64_t v18 = (void *)MEMORY[0x1E4F30938];
      uint64_t v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      JSValueRef v21 = (void *)v20;
    }
    else
    {
      JSValueRef v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      JSValueRef v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"cookies.getAll()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    unint64_t v23 = (void *)MEMORY[0x1E4F30938];
    JSValueRef v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    uint64_t v26 = (void *)v25;
  }
  else
  {
    uint64_t v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    uint64_t v44 = @"an object is expected";
    id v45 = @"details";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (char v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    JSValueRef v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
    uint64_t v32 = a5[1];
    __n128 v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"cookies.getAll()", &cfstr_Details.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v51 = resolve;
    *(void *)buf  = this;
    __int16 v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    uint64_t v15 = v47;
LABEL_28:
    *(void *)buf  = v15;
    id v46 = 0;
    WebKit::WebExtensionAPICookies::getAll(v12, v29, (uint64_t *)buf, &v46);
    float v35 = (NSString *)v46;
    __int16 v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"cookies.getAll()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v44 = @"a function is expected";
  id v45 = @"callback";
LABEL_56:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"cookies.getAll()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  Undefined  = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989716A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPICookies::set(WebKit::JSWebExtensionAPICookies *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPICookies(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v51;
    WTF::String::utf8();
    if (v50) {
      int v39 = (char *)v50 + 16;
    }
    else {
      int v39 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v53 = 2082;
    uint64_t v54 = v38;
    __int16 v55 = 2082;
    uint64_t v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function cookies.set() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v41 = v50;
    __int16 v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    __int16 v42 = resolve;
    resolve  = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    uint64_t v17 = *a5;
    if (*a5)
    {
      uint64_t v18 = (void *)MEMORY[0x1E4F30938];
      uint64_t v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      JSValueRef v21 = (void *)v20;
    }
    else
    {
      JSValueRef v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      JSValueRef v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"cookies.set()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    unint64_t v23 = (void *)MEMORY[0x1E4F30938];
    JSValueRef v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    uint64_t v26 = (void *)v25;
  }
  else
  {
    uint64_t v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    uint64_t v44 = @"an object is expected";
    id v45 = @"details";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (char v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    JSValueRef v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
    uint64_t v32 = a5[1];
    __n128 v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"cookies.set()", &cfstr_Details.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v51 = resolve;
    *(void *)buf  = this;
    __int16 v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    uint64_t v15 = v47;
LABEL_28:
    *(void *)buf  = v15;
    id v46 = 0;
    WebKit::WebExtensionAPICookies::set(v12, v29, (uint64_t *)buf, &v46);
    float v35 = (NSString *)v46;
    __int16 v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"cookies.set()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v44 = @"a function is expected";
  id v45 = @"callback";
LABEL_56:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"cookies.set()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  Undefined  = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198971D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPICookies::remove(WebKit::JSWebExtensionAPICookies *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPICookies(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v51;
    WTF::String::utf8();
    if (v50) {
      int v39 = (char *)v50 + 16;
    }
    else {
      int v39 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v53 = 2082;
    uint64_t v54 = v38;
    __int16 v55 = 2082;
    uint64_t v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function cookies.remove() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v41 = v50;
    __int16 v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    __int16 v42 = resolve;
    resolve  = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    uint64_t v17 = *a5;
    if (*a5)
    {
      uint64_t v18 = (void *)MEMORY[0x1E4F30938];
      uint64_t v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      JSValueRef v21 = (void *)v20;
    }
    else
    {
      JSValueRef v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      JSValueRef v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"cookies.remove()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    unint64_t v23 = (void *)MEMORY[0x1E4F30938];
    JSValueRef v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    uint64_t v26 = (void *)v25;
  }
  else
  {
    uint64_t v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    uint64_t v44 = @"an object is expected";
    id v45 = @"details";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (char v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    JSValueRef v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
    uint64_t v32 = a5[1];
    __n128 v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"cookies.remove()", &cfstr_Details.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v51 = resolve;
    *(void *)buf  = this;
    __int16 v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    uint64_t v15 = v47;
LABEL_28:
    *(void *)buf  = v15;
    id v46 = 0;
    WebKit::WebExtensionAPICookies::remove(v12, v29, (uint64_t *)buf, &v46);
    float v35 = (NSString *)v46;
    __int16 v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"cookies.remove()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v44 = @"a function is expected";
  id v45 = @"callback";
LABEL_56:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"cookies.remove()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  Undefined  = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198972434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPICookies::getAllCookieStores(WebKit::JSWebExtensionAPICookies *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPICookies(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_17;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      unint64_t v23 = "argument";
    }
    else {
      unint64_t v23 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v32;
    WTF::String::utf8();
    if (v31) {
      JSValueRef v24 = (char *)v31 + 16;
    }
    else {
      JSValueRef v24 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v34 = 2082;
    float v35 = v23;
    __int16 v36 = 2082;
    char v37 = v24;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function cookies.getAllCookieStores() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v26 = v31;
    char v31 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1) {
        WTF::fastFree(v26, v25);
      }
      else {
        --*(_DWORD *)v26;
      }
    }
    char v27 = resolve;
    resolve  = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }

  if (a4 != (OpaqueJSValue *)1) {
    goto LABEL_11;
  }
  if (!JSValueIsObject(this, *a5) || (JSValueRef v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"cookies.getAllCookieStores()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v15);
      JSValueRef v21 = JSValueMakeUndefined(this);
      goto LABEL_16;
    }
  }
  unint64_t v16 = *a5;
  uint64_t v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(void *)buf)
  {
    Undefined  = 0;
  }
  else
  {
LABEL_11:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v32 = resolve;
    *(void *)buf  = this;
    char v31 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v32, &v31, &v28);
    uint64_t v18 = v28;
  }
  *(void *)buf  = v18;
  WebKit::WebExtensionAPICookies::getAllCookieStores(v12, (uint64_t *)buf);
  uint64_t v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(void *)buf  = 0;
  if (v20) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  }
  if (Undefined) {
    goto LABEL_17;
  }
  JSValueRef v21 = JSValueMakeUndefined(this);
LABEL_16:
  Undefined  = v21;
LABEL_17:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198972900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPICookies::onChanged(WebKit::JSWebExtensionAPICookies *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPICookies(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      uint64_t v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter cookies.onChanged in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPICookies::onChanged(v7);
    Undefined  = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_198972BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIDeclarativeNetRequest *WebKit::toWebExtensionAPIDeclarativeNetRequest(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPIDeclarativeNetRequest::declarativeNetRequestClass(0);
      if (result)
      {
        JSClassDefinition v6 = WebKit::JSWebExtensionAPIDeclarativeNetRequest::declarativeNetRequestClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private  = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIDeclarativeNetRequest *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::declarativeNetRequestClass(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIDeclarativeNetRequest::declarativeNetRequestClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIDeclarativeNetRequest::declarativeNetRequestClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v6.version  = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v6.parentClass  = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 48);
    *(_OWORD *)&v6.staticFunctions  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 32);
    *(_OWORD *)&v6.finalize  = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v6.getProperty  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v6.deleteProperty  = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v6.callAsFunction  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v6.hasInstance  = v5;
    v6.className  = "DeclarativeNetRequest";
    v6.parentClass  = 0;
    v6.staticValues  = (const JSStaticValue *)&WebKit::JSWebExtensionAPIDeclarativeNetRequest::staticValues(void)::values;
    v6.staticFunctions  = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIDeclarativeNetRequest::staticFunctions(void)::functions;
    v6.initialize  = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize  = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    JSClassRef result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIDeclarativeNetRequest::declarativeNetRequestClass(void)::jsClass  = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::updateEnabledRulesets(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v51;
    WTF::String::utf8();
    if (v50) {
      int v39 = (char *)v50 + 16;
    }
    else {
      int v39 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v53 = 2082;
    uint64_t v54 = v38;
    __int16 v55 = 2082;
    uint64_t v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function declarativeNetRequest.updateEnabledRulesets() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v41 = v50;
    __int16 v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    __int16 v42 = resolve;
    resolve  = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    uint64_t v17 = *a5;
    if (*a5)
    {
      uint64_t v18 = (void *)MEMORY[0x1E4F30938];
      uint64_t v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      JSValueRef v21 = (void *)v20;
    }
    else
    {
      JSValueRef v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      JSValueRef v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.updateEnabledRulesets()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    unint64_t v23 = (void *)MEMORY[0x1E4F30938];
    JSValueRef v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    uint64_t v26 = (void *)v25;
  }
  else
  {
    uint64_t v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    uint64_t v44 = @"an object is expected";
    id v45 = @"options";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (char v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    JSValueRef v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
    uint64_t v32 = a5[1];
    __n128 v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.updateEnabledRulesets()", &cfstr_Options.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v51 = resolve;
    *(void *)buf  = this;
    __int16 v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    uint64_t v15 = v47;
LABEL_28:
    *(void *)buf  = v15;
    id v46 = 0;
    WebKit::WebExtensionAPIDeclarativeNetRequest::updateEnabledRulesets(v12, v29, (uint64_t *)buf, &v46);
    float v35 = (NSString *)v46;
    __int16 v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.updateEnabledRulesets()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v44 = @"a function is expected";
  id v45 = @"callback";
LABEL_56:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.updateEnabledRulesets()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  Undefined  = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198973364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_17;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      unint64_t v23 = "argument";
    }
    else {
      unint64_t v23 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v32;
    WTF::String::utf8();
    if (v31) {
      JSValueRef v24 = (char *)v31 + 16;
    }
    else {
      JSValueRef v24 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v34 = 2082;
    float v35 = v23;
    __int16 v36 = 2082;
    char v37 = v24;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function declarativeNetRequest.getEnabledRulesets() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v26 = v31;
    char v31 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1) {
        WTF::fastFree(v26, v25);
      }
      else {
        --*(_DWORD *)v26;
      }
    }
    char v27 = resolve;
    resolve  = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }

  if (a4 != (OpaqueJSValue *)1) {
    goto LABEL_11;
  }
  if (!JSValueIsObject(this, *a5) || (JSValueRef v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.getEnabledRulesets()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v15);
      JSValueRef v21 = JSValueMakeUndefined(this);
      goto LABEL_16;
    }
  }
  unint64_t v16 = *a5;
  uint64_t v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(void *)buf)
  {
    Undefined  = 0;
  }
  else
  {
LABEL_11:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v32 = resolve;
    *(void *)buf  = this;
    char v31 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v32, &v31, &v28);
    uint64_t v18 = v28;
  }
  *(void *)buf  = v18;
  WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(v12, (uint64_t *)buf);
  uint64_t v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(void *)buf  = 0;
  if (v20) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  }
  if (Undefined) {
    goto LABEL_17;
  }
  JSValueRef v21 = JSValueMakeUndefined(this);
LABEL_16:
  Undefined  = v21;
LABEL_17:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198973830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::updateDynamicRules(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v51;
    WTF::String::utf8();
    if (v50) {
      int v39 = (char *)v50 + 16;
    }
    else {
      int v39 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v53 = 2082;
    uint64_t v54 = v38;
    __int16 v55 = 2082;
    uint64_t v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function declarativeNetRequest.updateDynamicRules() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v41 = v50;
    __int16 v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    __int16 v42 = resolve;
    resolve  = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    uint64_t v17 = *a5;
    if (*a5)
    {
      uint64_t v18 = (void *)MEMORY[0x1E4F30938];
      uint64_t v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      JSValueRef v21 = (void *)v20;
    }
    else
    {
      JSValueRef v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      JSValueRef v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.updateDynamicRules()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    unint64_t v23 = (void *)MEMORY[0x1E4F30938];
    JSValueRef v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    uint64_t v26 = (void *)v25;
  }
  else
  {
    uint64_t v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    uint64_t v44 = @"an object is expected";
    id v45 = @"options";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (char v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    JSValueRef v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
    uint64_t v32 = a5[1];
    __n128 v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.updateDynamicRules()", &cfstr_Options.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v51 = resolve;
    *(void *)buf  = this;
    __int16 v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    uint64_t v15 = v47;
LABEL_28:
    *(void *)buf  = v15;
    id v46 = 0;
    WebKit::WebExtensionAPIDeclarativeNetRequest::updateDynamicRules(v12, v29, (uint64_t *)buf, &v46);
    float v35 = (NSString *)v46;
    __int16 v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.updateDynamicRules()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v44 = @"a function is expected";
  id v45 = @"callback";
LABEL_56:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.updateDynamicRules()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  Undefined  = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198973EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::getDynamicRules(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_17;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      unint64_t v23 = "argument";
    }
    else {
      unint64_t v23 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v32;
    WTF::String::utf8();
    if (v31) {
      JSValueRef v24 = (char *)v31 + 16;
    }
    else {
      JSValueRef v24 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v34 = 2082;
    float v35 = v23;
    __int16 v36 = 2082;
    char v37 = v24;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function declarativeNetRequest.getDynamicRules() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v26 = v31;
    char v31 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1) {
        WTF::fastFree(v26, v25);
      }
      else {
        --*(_DWORD *)v26;
      }
    }
    char v27 = resolve;
    resolve  = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }

  if (a4 != (OpaqueJSValue *)1) {
    goto LABEL_11;
  }
  if (!JSValueIsObject(this, *a5) || (JSValueRef v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.getDynamicRules()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v15);
      JSValueRef v21 = JSValueMakeUndefined(this);
      goto LABEL_16;
    }
  }
  unint64_t v16 = *a5;
  uint64_t v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(void *)buf)
  {
    Undefined  = 0;
  }
  else
  {
LABEL_11:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v32 = resolve;
    *(void *)buf  = this;
    char v31 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v32, &v31, &v28);
    uint64_t v18 = v28;
  }
  *(void *)buf  = v18;
  WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(v12, (uint64_t *)buf);
  uint64_t v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(void *)buf  = 0;
  if (v20) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  }
  if (Undefined) {
    goto LABEL_17;
  }
  JSValueRef v21 = JSValueMakeUndefined(this);
LABEL_16:
  Undefined  = v21;
LABEL_17:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198974370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::updateSessionRules(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v51;
    WTF::String::utf8();
    if (v50) {
      int v39 = (char *)v50 + 16;
    }
    else {
      int v39 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v53 = 2082;
    uint64_t v54 = v38;
    __int16 v55 = 2082;
    uint64_t v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function declarativeNetRequest.updateSessionRules() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v41 = v50;
    __int16 v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    __int16 v42 = resolve;
    resolve  = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    uint64_t v17 = *a5;
    if (*a5)
    {
      uint64_t v18 = (void *)MEMORY[0x1E4F30938];
      uint64_t v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      JSValueRef v21 = (void *)v20;
    }
    else
    {
      JSValueRef v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      JSValueRef v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.updateSessionRules()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    unint64_t v23 = (void *)MEMORY[0x1E4F30938];
    JSValueRef v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    uint64_t v26 = (void *)v25;
  }
  else
  {
    uint64_t v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    uint64_t v44 = @"an object is expected";
    id v45 = @"options";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (char v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    JSValueRef v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
    uint64_t v32 = a5[1];
    __n128 v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.updateSessionRules()", &cfstr_Options.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v51 = resolve;
    *(void *)buf  = this;
    __int16 v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    uint64_t v15 = v47;
LABEL_28:
    *(void *)buf  = v15;
    id v46 = 0;
    WebKit::WebExtensionAPIDeclarativeNetRequest::updateSessionRules(v12, v29, (uint64_t *)buf, &v46);
    float v35 = (NSString *)v46;
    __int16 v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.updateSessionRules()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v44 = @"a function is expected";
  id v45 = @"callback";
LABEL_56:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.updateSessionRules()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  Undefined  = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989749E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::getSessionRules(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_17;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      unint64_t v23 = "argument";
    }
    else {
      unint64_t v23 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v32;
    WTF::String::utf8();
    if (v31) {
      JSValueRef v24 = (char *)v31 + 16;
    }
    else {
      JSValueRef v24 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v34 = 2082;
    float v35 = v23;
    __int16 v36 = 2082;
    char v37 = v24;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function declarativeNetRequest.getSessionRules() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v26 = v31;
    char v31 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1) {
        WTF::fastFree(v26, v25);
      }
      else {
        --*(_DWORD *)v26;
      }
    }
    char v27 = resolve;
    resolve  = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }

  if (a4 != (OpaqueJSValue *)1) {
    goto LABEL_11;
  }
  if (!JSValueIsObject(this, *a5) || (JSValueRef v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.getSessionRules()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v15);
      JSValueRef v21 = JSValueMakeUndefined(this);
      goto LABEL_16;
    }
  }
  unint64_t v16 = *a5;
  uint64_t v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(void *)buf)
  {
    Undefined  = 0;
  }
  else
  {
LABEL_11:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v32 = resolve;
    *(void *)buf  = this;
    char v31 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v32, &v31, &v28);
    uint64_t v18 = v28;
  }
  *(void *)buf  = v18;
  WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(v12, (uint64_t *)buf);
  uint64_t v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(void *)buf  = 0;
  if (v20) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  }
  if (Undefined) {
    goto LABEL_17;
  }
  JSValueRef v21 = JSValueMakeUndefined(this);
LABEL_16:
  Undefined  = v21;
LABEL_17:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198974EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::getMatchedRules(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_47;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      __int16 v36 = "argument";
    }
    else {
      __int16 v36 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v53;
    WTF::String::utf8();
    if (v52) {
      __int16 v42 = (char *)v52 + 16;
    }
    else {
      __int16 v42 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v55 = 2082;
    uint64_t v56 = v36;
    __int16 v57 = 2082;
    int v58 = v42;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function declarativeNetRequest.getMatchedRules() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v44 = v52;
    __int16 v52 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1) {
        WTF::fastFree(v44, v43);
      }
      else {
        --*(_DWORD *)v44;
      }
    }
    id v45 = resolve;
    resolve  = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v43);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (uint64_t v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (uint64_t v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        uint64_t v22 = *a5;
        unint64_t v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        JSValueRef v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_65;
    }
    JSValueRef v31 = *a5;
    if (*a5)
    {
      uint64_t v32 = (void *)MEMORY[0x1E4F30938];
      __n128 v33 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v34 = [v32 valueWithJSValueRef:v31 inContext:v33];

      float v35 = (void *)v34;
    }
    else
    {
      float v35 = 0;
    }
    char v37 = [v35 _isDictionary];

    if ((v37 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      JSValueRef v24 = WebKit::toNSDictionary(this, *a5, 0, 0);
      goto LABEL_40;
    }
LABEL_66:
    id v46 = @"an object is expected";
    char v47 = @"filter";
    goto LABEL_67;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    JSValueRef v24 = 0;
    goto LABEL_40;
  }
  JSValueRef v14 = *a5;
  if (*a5)
  {
    uint64_t v15 = (void *)MEMORY[0x1E4F30938];
    unint64_t v16 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v17 = [v15 valueWithJSValueRef:v14 inContext:v16];

    uint64_t v18 = (void *)v17;
  }
  else
  {
    uint64_t v18 = 0;
  }
  char v25 = [v18 _isDictionary];

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
    goto LABEL_66;
  }
  if (JSValueIsObject(this, a5[1]) && (uint64_t v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    JSValueRef v24 = WebKit::toNSDictionary(this, *a5, 0, 0);
    char v27 = a5[1];
    char v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    JSValueRef v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_41;
    }
LABEL_40:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    __int16 v53 = resolve;
    *(void *)buf  = this;
    __int16 v52 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v53, &v52, &v49);
    JSValueRef v29 = v49;
LABEL_41:
    *(void *)buf  = v29;
    id v48 = 0;
    WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(v12, v24, (uint64_t *)buf, &v48);
    int v39 = (NSString *)v48;
    __int16 v40 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v40) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v40);
    }
    if (v39)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.getMatchedRules()", 0, v39, v38);
    }
    else if (Undefined)
    {
LABEL_46:

      goto LABEL_47;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_46;
  }
LABEL_65:
  id v46 = @"a function is expected";
  char v47 = @"callback";
LABEL_67:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.getMatchedRules()", &v47->isa, &v46->isa, v21);
  Undefined  = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989755D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::isRegexSupported(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v51;
    WTF::String::utf8();
    if (v50) {
      int v39 = (char *)v50 + 16;
    }
    else {
      int v39 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v53 = 2082;
    uint64_t v54 = v38;
    __int16 v55 = 2082;
    uint64_t v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function declarativeNetRequest.isRegexSupported() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v41 = v50;
    __int16 v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    __int16 v42 = resolve;
    resolve  = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    uint64_t v17 = *a5;
    if (*a5)
    {
      uint64_t v18 = (void *)MEMORY[0x1E4F30938];
      uint64_t v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      JSValueRef v21 = (void *)v20;
    }
    else
    {
      JSValueRef v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      JSValueRef v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.isRegexSupported()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    unint64_t v23 = (void *)MEMORY[0x1E4F30938];
    JSValueRef v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    uint64_t v26 = (void *)v25;
  }
  else
  {
    uint64_t v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    uint64_t v44 = @"an object is expected";
    id v45 = @"regexOptions";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (JSValueRef v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    JSValueRef v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
    uint64_t v32 = a5[1];
    __n128 v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.isRegexSupported()", &cfstr_Regexoptions.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v51 = resolve;
    *(void *)buf  = this;
    __int16 v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    uint64_t v15 = v47;
LABEL_28:
    *(void *)buf  = v15;
    id v46 = 0;
    WebKit::WebExtensionAPIDeclarativeNetRequest::isRegexSupported(v12, v29, (WebKit::WebExtensionCallbackHandler **)buf, &v46);
    float v35 = (NSString *)v46;
    __int16 v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.isRegexSupported()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v44 = @"a function is expected";
  id v45 = @"callback";
LABEL_56:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.isRegexSupported()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  Undefined  = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198975C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v51;
    WTF::String::utf8();
    if (v50) {
      int v39 = (char *)v50 + 16;
    }
    else {
      int v39 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v53 = 2082;
    uint64_t v54 = v38;
    __int16 v55 = 2082;
    uint64_t v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function declarativeNetRequest.setExtensionActionOptions() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v41 = v50;
    __int16 v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    __int16 v42 = resolve;
    resolve  = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    uint64_t v17 = *a5;
    if (*a5)
    {
      uint64_t v18 = (void *)MEMORY[0x1E4F30938];
      uint64_t v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      JSValueRef v21 = (void *)v20;
    }
    else
    {
      JSValueRef v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      JSValueRef v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.setExtensionActionOptions()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    unint64_t v23 = (void *)MEMORY[0x1E4F30938];
    JSValueRef v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    uint64_t v26 = (void *)v25;
  }
  else
  {
    uint64_t v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    uint64_t v44 = @"an object is expected";
    id v45 = @"options";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (JSValueRef v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    JSValueRef v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
    uint64_t v32 = a5[1];
    __n128 v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.setExtensionActionOptions()", &cfstr_Options.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v51 = resolve;
    *(void *)buf  = this;
    __int16 v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    uint64_t v15 = v47;
LABEL_28:
    *(void *)buf  = v15;
    id v46 = 0;
    WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(v12, v29, (uint64_t *)buf, &v46);
    float v35 = (NSString *)v46;
    __int16 v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.setExtensionActionOptions()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v44 = @"a function is expected";
  id v45 = @"callback";
LABEL_56:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"declarativeNetRequest.setExtensionActionOptions()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  Undefined  = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198976350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::maxNumberOfStaticRulesets(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v13) {
        uint64_t v11 = (char *)v13 + 16;
      }
      else {
        uint64_t v11 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      unint64_t v16 = v11;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter declarativeNetRequest.MAX_NUMBER_OF_STATIC_RULESETS in %{public}s world", buf, 0xCu);
      if (v13)
      {
        if (*(_DWORD *)v13 == 1) {
          WTF::fastFree(v13, v12);
        }
        else {
          --*(_DWORD *)v13;
        }
      }
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }

    Undefined  = JSValueMakeNumber(this, 100.0);
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_19897669C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::maxNumberOfEnabledRulesets(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v13) {
        uint64_t v11 = (char *)v13 + 16;
      }
      else {
        uint64_t v11 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      unint64_t v16 = v11;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter declarativeNetRequest.MAX_NUMBER_OF_ENABLED_STATIC_RULESETS in %{public}s world", buf, 0xCu);
      if (v13)
      {
        if (*(_DWORD *)v13 == 1) {
          WTF::fastFree(v13, v12);
        }
        else {
          --*(_DWORD *)v13;
        }
      }
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }

    Undefined  = JSValueMakeNumber(this, 50.0);
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_19897696C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIDeclarativeNetRequest::maxNumberOfDynamicAndSessionRules(WebKit::JSWebExtensionAPIDeclarativeNetRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIDeclarativeNetRequest(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v13) {
        uint64_t v11 = (char *)v13 + 16;
      }
      else {
        uint64_t v11 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      unint64_t v16 = v11;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter declarativeNetRequest.MAX_NUMBER_OF_DYNAMIC_AND_SESSION_RULES in %{public}s world", buf, 0xCu);
      if (v13)
      {
        if (*(_DWORD *)v13 == 1) {
          WTF::fastFree(v13, v12);
        }
        else {
          --*(_DWORD *)v13;
        }
      }
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }

    Undefined  = JSValueMakeNumber(this, 30000.0);
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_198976C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIEvent *WebKit::toWebExtensionAPIEvent(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPIEvent::eventClass(0);
      if (result)
      {
        JSClassDefinition v6 = WebKit::JSWebExtensionAPIEvent::eventClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private  = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIEvent *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIEvent::eventClass(WebKit::JSWebExtensionAPIEvent *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIEvent::eventClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIEvent::eventClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v5.version  = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v5.parentClass  = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v5.getProperty  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v5.deleteProperty  = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v5.callAsFunction  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v5.hasInstance  = v4;
    v5.hasProperty  = *(JSObjectHasPropertyCallback *)(MEMORY[0x1E4F309C8] + 56);
    *(_OWORD *)&v5.parentClass  = 0uLL;
    v5.className  = "Event";
    v5.staticFunctions  = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIEvent::staticFunctions(void)::functions;
    v5.initialize  = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v5.finalize  = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    JSClassRef result = JSClassCreate(&v5);
    WebKit::JSWebExtensionAPIEvent::eventClass(void)::jsClass  = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIEvent::addListener(WebKit::JSWebExtensionAPIEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIEvent(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        uint64_t v34 = "argument";
      }
      else {
        uint64_t v34 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      __int16 v42 = v44;
      WTF::String::utf8();
      if (v43) {
        float v35 = (char *)v43 + 16;
      }
      else {
        float v35 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      *(void *)&buf[4]  = a4;
      __int16 v46 = 2082;
      char v47 = v34;
      __int16 v48 = 2082;
      int v49 = v35;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function addListener() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      char v37 = v43;
      JSValueRef v43 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 1) {
          WTF::fastFree(v37, v36);
        }
        else {
          --*(_DWORD *)v37;
        }
      }
      uint64_t v38 = v42;
      __int16 v42 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2) {
          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v36);
        }
        else {
          *(_DWORD *)v38 -= 2;
        }
      }
    }

    if (a4)
    {
      if (JSValueIsObject(this, *a5))
      {
        unint64_t v16 = JSValueToObject(this, *a5, 0);
        if (JSObjectIsFunction(this, v16))
        {
          uint64_t v17 = *a5;
          uint64_t v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, &v44);
          uint64_t v20 = v44;
          if (v44)
          {
            GlobalContext  = JSContextGetGlobalContext(this);
            WebKit::WebFrame::frameForContext(GlobalContext, v22, buf);
            uint64_t v23 = *(void *)buf;
            if (*(void *)buf)
            {
              uint64_t v24 = *(void *)(*(void *)buf + 24);
              if (v24)
              {
                uint64_t v25 = *(void *)(v24 + 8);
                if (v25)
                {
                  uint64_t v26 = *(void *)(v25 + 24);
                  if (v26)
                  {
                    uint64_t v27 = *(void *)(v26 + 8);
                    if (v27)
                    {
                      char v28 = *(void **)(*(void *)(v27 + 48) + 16);
                      if (((*(uint64_t (**)(void *))(*v28 + 1368))(v28) & 1) == 0)
                      {
                        uint64_t v29 = *(void *)(v28[2] + 8);
                        if (v29)
                        {
                          CFRetain(*(CFTypeRef *)(v29 - 8));
                          CFRelease(*(CFTypeRef *)(v23 + 8));
                          ++*(_DWORD *)v20;
                          uint64_t v41 = v20;
                          WebKit::WebExtensionAPIEvent::addListener(v12, v29 - 16, &v41);
                          int v30 = v41;
                          uint64_t v41 = 0;
                          if (v30) {
                            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v30);
                          }
                          Undefined  = JSValueMakeUndefined(this);
                          CFRelease(*(CFTypeRef *)(v29 - 8));
LABEL_21:
                          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
LABEL_22:
                          if (*(_DWORD *)(v12 + 48) == 1) {
                            (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
                          }
                          else {
                            --*(_DWORD *)(v12 + 48);
                          }
                          return Undefined;
                        }
                      }
                    }
                  }
                }
              }
              CFRelease(*(CFTypeRef *)(v23 + 8));
            }
            uint64_t v32 = qword_1EB357DF8;
            if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf  = 0;
              _os_log_error_impl(&dword_1985F2000, v32, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
            }
            Undefined  = JSValueMakeUndefined(this);
            goto LABEL_21;
          }
          *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"addListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v19);
          JSValueRef v40 = JSValueMakeUndefined(this);
LABEL_47:
          Undefined  = v40;
          goto LABEL_22;
        }
      }
      int v39 = WebKit::toJSError(this, (const OpaqueJSContext *)@"addListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v15);
    }
    else
    {
      int v39 = WebKit::toJSError(this, (const OpaqueJSContext *)@"addListener()", 0, &cfstr_ARequiredArgum.isa, v14);
    }
    *a6  = v39;
    JSValueRef v40 = JSValueMakeUndefined(this);
    goto LABEL_47;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989772BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIEvent::removeListener(WebKit::JSWebExtensionAPIEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIEvent(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        uint64_t v34 = "argument";
      }
      else {
        uint64_t v34 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      __int16 v42 = v44;
      WTF::String::utf8();
      if (v43) {
        float v35 = (char *)v43 + 16;
      }
      else {
        float v35 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      *(void *)&buf[4]  = a4;
      __int16 v46 = 2082;
      char v47 = v34;
      __int16 v48 = 2082;
      int v49 = v35;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function removeListener() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      char v37 = v43;
      JSValueRef v43 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 1) {
          WTF::fastFree(v37, v36);
        }
        else {
          --*(_DWORD *)v37;
        }
      }
      uint64_t v38 = v42;
      __int16 v42 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2) {
          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v36);
        }
        else {
          *(_DWORD *)v38 -= 2;
        }
      }
    }

    if (a4)
    {
      if (JSValueIsObject(this, *a5))
      {
        unint64_t v16 = JSValueToObject(this, *a5, 0);
        if (JSObjectIsFunction(this, v16))
        {
          uint64_t v17 = *a5;
          uint64_t v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, &v44);
          uint64_t v20 = v44;
          if (v44)
          {
            GlobalContext  = JSContextGetGlobalContext(this);
            WebKit::WebFrame::frameForContext(GlobalContext, v22, buf);
            uint64_t v23 = *(void *)buf;
            if (*(void *)buf)
            {
              uint64_t v24 = *(void *)(*(void *)buf + 24);
              if (v24)
              {
                uint64_t v25 = *(void *)(v24 + 8);
                if (v25)
                {
                  uint64_t v26 = *(void *)(v25 + 24);
                  if (v26)
                  {
                    uint64_t v27 = *(void *)(v26 + 8);
                    if (v27)
                    {
                      char v28 = *(void **)(*(void *)(v27 + 48) + 16);
                      if (((*(uint64_t (**)(void *))(*v28 + 1368))(v28) & 1) == 0)
                      {
                        uint64_t v29 = *(void *)(v28[2] + 8);
                        if (v29)
                        {
                          CFRetain(*(CFTypeRef *)(v29 - 8));
                          CFRelease(*(CFTypeRef *)(v23 + 8));
                          ++*(_DWORD *)v20;
                          uint64_t v41 = v20;
                          WebKit::WebExtensionAPIEvent::removeListener(v12, v29 - 16, &v41);
                          int v30 = v41;
                          uint64_t v41 = 0;
                          if (v30) {
                            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v30);
                          }
                          Undefined  = JSValueMakeUndefined(this);
                          CFRelease(*(CFTypeRef *)(v29 - 8));
LABEL_21:
                          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
LABEL_22:
                          if (*(_DWORD *)(v12 + 48) == 1) {
                            (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
                          }
                          else {
                            --*(_DWORD *)(v12 + 48);
                          }
                          return Undefined;
                        }
                      }
                    }
                  }
                }
              }
              CFRelease(*(CFTypeRef *)(v23 + 8));
            }
            uint64_t v32 = qword_1EB357DF8;
            if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf  = 0;
              _os_log_error_impl(&dword_1985F2000, v32, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
            }
            Undefined  = JSValueMakeUndefined(this);
            goto LABEL_21;
          }
          *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"removeListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v19);
          JSValueRef v40 = JSValueMakeUndefined(this);
LABEL_47:
          Undefined  = v40;
          goto LABEL_22;
        }
      }
      int v39 = WebKit::toJSError(this, (const OpaqueJSContext *)@"removeListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v15);
    }
    else
    {
      int v39 = WebKit::toJSError(this, (const OpaqueJSContext *)@"removeListener()", 0, &cfstr_ARequiredArgum.isa, v14);
    }
    *a6  = v39;
    JSValueRef v40 = JSValueMakeUndefined(this);
    goto LABEL_47;
  }

  return JSValueMakeUndefined(this);
}

void sub_19897786C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIEvent::hasListener(WebKit::JSWebExtensionAPIEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIEvent(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        uint64_t v24 = "argument";
      }
      else {
        uint64_t v24 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v32 = v34;
      WTF::String::utf8();
      if (v33) {
        uint64_t v25 = (char *)v33 + 16;
      }
      else {
        uint64_t v25 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      *(void *)&buf[4]  = a4;
      __int16 v36 = 2082;
      char v37 = v24;
      __int16 v38 = 2082;
      int v39 = v25;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function hasListener() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      uint64_t v27 = v33;
      __n128 v33 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1) {
          WTF::fastFree(v27, v26);
        }
        else {
          --*(_DWORD *)v27;
        }
      }
      char v28 = v32;
      uint64_t v32 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2) {
          WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v26);
        }
        else {
          *(_DWORD *)v28 -= 2;
        }
      }
    }

    if (a4)
    {
      if (JSValueIsObject(this, *a5))
      {
        unint64_t v16 = JSValueToObject(this, *a5, 0);
        if (JSObjectIsFunction(this, v16))
        {
          uint64_t v17 = *a5;
          uint64_t v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
          uint64_t v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (*(void *)buf)
          {
            ++**(_DWORD **)buf;
            JSValueRef v31 = v20;
            hasListener  = WebKit::WebExtensionAPIEvent::hasListener(v12, &v31);
            Boolean  = JSValueMakeBoolean(this, hasListener);
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
LABEL_8:
            if (*(_DWORD *)(v12 + 48) == 1) {
              (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
            }
            else {
              --*(_DWORD *)(v12 + 48);
            }
            return Boolean;
          }
          *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"hasListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v19);
          Undefined  = JSValueMakeUndefined(this);
LABEL_33:
          Boolean  = Undefined;
          goto LABEL_8;
        }
      }
      uint64_t v29 = WebKit::toJSError(this, (const OpaqueJSContext *)@"hasListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v15);
    }
    else
    {
      uint64_t v29 = WebKit::toJSError(this, (const OpaqueJSContext *)@"hasListener()", 0, &cfstr_ARequiredArgum.isa, v14);
    }
    *a6  = v29;
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }

  return JSValueMakeUndefined(this);
}

void sub_198977D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIExtension *WebKit::toWebExtensionAPIExtension(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPIExtension::extensionClass(0);
      if (result)
      {
        JSClassDefinition v6 = WebKit::JSWebExtensionAPIExtension::extensionClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private  = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIExtension *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIExtension::extensionClass(WebKit::JSWebExtensionAPIExtension *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIExtension::extensionClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIExtension::extensionClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v6.version  = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v6.parentClass  = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 48);
    *(_OWORD *)&v6.staticFunctions  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 32);
    *(_OWORD *)&v6.finalize  = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v6.getProperty  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v6.deleteProperty  = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v6.callAsFunction  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v6.hasInstance  = v5;
    v6.className  = "Extension";
    v6.parentClass  = 0;
    v6.staticValues  = (const JSStaticValue *)&WebKit::JSWebExtensionAPIExtension::staticValues(void)::values;
    v6.staticFunctions  = 0;
    v6.initialize  = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize  = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    v6.getPropertyNames  = (JSObjectGetPropertyNamesCallback)WebKit::JSWebExtensionAPIExtension::getPropertyNames;
    v6.hasProperty  = (JSObjectHasPropertyCallback)WebKit::JSWebExtensionAPIExtension::hasProperty;
    v6.getProperty  = (JSObjectGetPropertyCallback)WebKit::JSWebExtensionAPIExtension::getProperty;
    JSClassRef result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIExtension::extensionClass(void)::jsClass  = (uint64_t)result;
  }
  return result;
}

void WebKit::JSWebExtensionAPIExtension::getPropertyNames(WebKit::JSWebExtensionAPIExtension *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSPropertyNameAccumulator *a4)
{
  uint64_t v6 = WebKit::toWebExtensionAPIExtension(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*(_DWORD *)(v6 + 48);
    GlobalContext  = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v9, v23);
    uint64_t v10 = v23[0];
    if (v23[0])
    {
      uint64_t v11 = *((void *)v23[0] + 3);
      if (v11
        && (uint64_t v12 = *(void *)(v11 + 8)) != 0
        && (uint64_t v13 = *(void *)(v12 + 24)) != 0
        && (uint64_t v14 = *(void *)(v13 + 8)) != 0
        && (uint64_t v15 = *(void **)(*(void *)(v14 + 48) + 16),
            ((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) == 0))
      {
        unint64_t v16 = *(CFTypeRef **)(v15[2] + 8);
        if (v16)
        {
          CFRetain(*(v16 - 1));
          v16 -= 2;
        }
      }
      else
      {
        unint64_t v16 = 0;
      }
      CFRelease(*((CFTypeRef *)v10 + 1));
    }
    else
    {
      unint64_t v16 = 0;
    }
    int v17 = *(unsigned __int8 *)(v7 + 8);
    v23[0]  = "getURL";
    v23[1]  = (const char *)7;
    if (WebKit::WebExtensionAPIExtension::isPropertyAllowed((WebKit::WebExtensionAPIExtension *)v7, v23, (WebKit::WebPage *)v16))
    {
      uint64_t v18 = JSStringCreateWithUTF8CString("getURL");
      JSPropertyNameAccumulatorAddName(a3, v18);
      if (v18) {
        JSStringRelease(v18);
      }
    }
    if (!v17)
    {
      uint64_t v19 = JSStringCreateWithUTF8CString("getBackgroundPage");
      JSPropertyNameAccumulatorAddName(a3, v19);
      if (v19) {
        JSStringRelease(v19);
      }
      uint64_t v20 = JSStringCreateWithUTF8CString("getViews");
      JSPropertyNameAccumulatorAddName(a3, v20);
      if (v20) {
        JSStringRelease(v20);
      }
      JSValueRef v21 = JSStringCreateWithUTF8CString("isAllowedIncognitoAccess");
      JSPropertyNameAccumulatorAddName(a3, v21);
      if (v21) {
        JSStringRelease(v21);
      }
      uint64_t v22 = JSStringCreateWithUTF8CString("isAllowedFileSchemeAccess");
      JSPropertyNameAccumulatorAddName(a3, v22);
      if (v22) {
        JSStringRelease(v22);
      }
    }
    if (v16) {
      CFRelease(v16[1]);
    }
    if (*(_DWORD *)(v7 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v7 + 40) + 8))(v7 + 40);
    }
    else {
      --*(_DWORD *)(v7 + 48);
    }
  }
}

void sub_198978150(_Unwind_Exception *exception_object)
{
  if (v3) {
    JSStringRelease(v3);
  }
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  if (*(_DWORD *)(v1 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 40) + 8))(v1 + 40);
  }
  else {
    --*(_DWORD *)(v1 + 48);
  }
  _Unwind_Resume(exception_object);
}

void sub_1989781E8()
{
}

uint64_t WebKit::JSWebExtensionAPIExtension::hasProperty(WebKit::JSWebExtensionAPIExtension *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4)
{
  uint64_t v6 = WebKit::toWebExtensionAPIExtension(this, a2, a3);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  ++*(_DWORD *)(v6 + 48);
  GlobalContext  = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v9, v21);
  uint64_t v10 = v21[0];
  if (v21[0])
  {
    uint64_t v11 = *((void *)v21[0] + 3);
    if (v11
      && (uint64_t v12 = *(void *)(v11 + 8)) != 0
      && (uint64_t v13 = *(void *)(v12 + 24)) != 0
      && (uint64_t v14 = *(void *)(v13 + 8)) != 0
      && (uint64_t v15 = *(void **)(*(void *)(v14 + 48) + 16),
          ((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) == 0))
    {
      unint64_t v16 = *(CFTypeRef **)(v15[2] + 8);
      if (v16)
      {
        CFRetain(*(v16 - 1));
        v16 -= 2;
      }
    }
    else
    {
      unint64_t v16 = 0;
    }
    CFRelease(*((CFTypeRef *)v10 + 1));
  }
  else
  {
    unint64_t v16 = 0;
  }
  int v17 = *(unsigned __int8 *)(v7 + 8);
  isPropertyAllowed  = *(unsigned char *)(v7 + 8) == 0;
  if (JSStringIsEqualToUTF8CString(a3, "getURL"))
  {
    v21[0]  = "getURL";
    v21[1]  = (const char *)7;
    isPropertyAllowed  = WebKit::WebExtensionAPIExtension::isPropertyAllowed((WebKit::WebExtensionAPIExtension *)v7, v21, (WebKit::WebPage *)v16);
  }
  else if (!JSStringIsEqualToUTF8CString(a3, "getBackgroundPage") {
         && !JSStringIsEqualToUTF8CString(a3, "getViews")
  }
         && !JSStringIsEqualToUTF8CString(a3, "isAllowedIncognitoAccess"))
  {
    IsEqualToUTF8CString  = JSStringIsEqualToUTF8CString(a3, "isAllowedFileSchemeAccess");
    if (v17) {
      isPropertyAllowed  = 0;
    }
    else {
      isPropertyAllowed  = IsEqualToUTF8CString;
    }
  }
  if (v16) {
    CFRelease(v16[1]);
  }
  if (*(_DWORD *)(v7 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v7 + 40) + 8))(v7 + 40);
  }
  else {
    --*(_DWORD *)(v7 + 48);
  }
  return isPropertyAllowed;
}

void sub_1989783D4(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 40) + 8))(v1 + 40);
  }
  else {
    --*(_DWORD *)(v1 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIExtension::getProperty(WebKit::JSWebExtensionAPIExtension *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v7 = WebKit::toWebExtensionAPIExtension(this, a2, a3);
  if (v7)
  {
    uint64_t v8 = v7;
    ++*(_DWORD *)(v7 + 48);
    GlobalContext  = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v10, v28);
    uint64_t v11 = v28[0];
    if (v28[0])
    {
      uint64_t v12 = *((void *)v28[0] + 3);
      if (v12
        && (uint64_t v13 = *(void *)(v12 + 8)) != 0
        && (uint64_t v14 = *(void *)(v13 + 24)) != 0
        && (uint64_t v15 = *(void *)(v14 + 8)) != 0
        && (unint64_t v16 = *(void **)(*(void *)(v15 + 48) + 16),
            ((*(uint64_t (**)(void *))(*v16 + 1368))(v16) & 1) == 0))
      {
        int v17 = *(CFTypeRef **)(v16[2] + 8);
        if (v17)
        {
          CFRetain(*(v17 - 1));
          v17 -= 2;
        }
      }
      else
      {
        int v17 = 0;
      }
      CFRelease(*((CFTypeRef *)v11 + 1));
    }
    else
    {
      int v17 = 0;
    }
    int v18 = *(unsigned __int8 *)(v8 + 8);
    if (JSStringIsEqualToUTF8CString(a3, "getURL"))
    {
      v28[0]  = "getURL";
      v28[1]  = (const char *)7;
      isPropertyAllowed  = WebKit::WebExtensionAPIExtension::isPropertyAllowed((WebKit::WebExtensionAPIExtension *)v8, v28, (WebKit::WebPage *)v17);
      uint64_t v20 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIExtension::getURL;
      if (isPropertyAllowed) {
        goto LABEL_20;
      }
    }
    if (v18) {
      goto LABEL_15;
    }
    IsEqualToUTF8CString  = JSStringIsEqualToUTF8CString(a3, "getBackgroundPage");
    uint64_t v20 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIExtension::getBackgroundPage;
    if (IsEqualToUTF8CString
      || (BOOL v23 = JSStringIsEqualToUTF8CString(a3, "getViews"),
          uint64_t v20 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIExtension::getViews,
          v23)
      || (BOOL v24 = JSStringIsEqualToUTF8CString(a3, "isAllowedIncognitoAccess"),
          uint64_t v20 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIExtension::isAllowedIncognitoAccess,
          v24)
      || (BOOL v25 = JSStringIsEqualToUTF8CString(a3, "isAllowedFileSchemeAccess"),
          uint64_t v20 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIExtension::isAllowedFileSchemeAccess,
          v25))
    {
LABEL_20:
      FunctionWithCallback  = JSObjectMakeFunctionWithCallback(this, a3, v20);
    }
    else
    {
LABEL_15:
      FunctionWithCallback  = JSValueMakeUndefined(this);
    }
    JSObjectRef v26 = FunctionWithCallback;
    if (v17) {
      CFRelease(v17[1]);
    }
    if (*(_DWORD *)(v8 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v8 + 40) + 8))(v8 + 40);
    }
    else {
      --*(_DWORD *)(v8 + 48);
    }
    return v26;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_198978698(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 40) + 8))(v1 + 40);
  }
  else {
    --*(_DWORD *)(v1 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIExtension::isInIncognitoContext(WebKit::JSWebExtensionAPIExtension *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPIExtension(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*((_DWORD *)v6 + 12);
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v24) {
        uint64_t v22 = (char *)v24 + 16;
      }
      else {
        uint64_t v22 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      *(void *)&buf[4]  = v22;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter extension.inIncognitoContext in %{public}s world", buf, 0xCu);
      if (v24)
      {
        if (*(_DWORD *)v24 == 1) {
          WTF::fastFree(v24, v23);
        }
        else {
          --*(_DWORD *)v24;
        }
      }
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v23);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
    }

    GlobalContext  = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v10, buf);
    uint64_t v11 = *(void *)buf;
    if (*(void *)buf)
    {
      uint64_t v12 = *(void *)(*(void *)buf + 24);
      if (v12)
      {
        uint64_t v13 = *(void *)(v12 + 8);
        if (v13)
        {
          uint64_t v14 = *(void *)(v13 + 24);
          if (v14)
          {
            uint64_t v15 = *(void *)(v14 + 8);
            if (v15)
            {
              unint64_t v16 = *(void **)(*(void *)(v15 + 48) + 16);
              if (((*(uint64_t (**)(void *))(*v16 + 1368))(v16) & 1) == 0)
              {
                uint64_t v17 = *(void *)(v16[2] + 8);
                if (v17)
                {
                  CFRetain(*(CFTypeRef *)(v17 - 8));
                  CFRelease(*(CFTypeRef *)(v11 + 8));
                  BOOL v18 = WebKit::WebPage::usesEphemeralSession((WebKit::WebPage *)(v17 - 16));
                  Boolean  = JSValueMakeBoolean(this, v18);
                  CFRelease(*(CFTypeRef *)(v17 - 8));
LABEL_15:
                  if (*((_DWORD *)v7 + 12) == 1) {
                    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
                  }
                  else {
                    --*((_DWORD *)v7 + 12);
                  }
                  return Boolean;
                }
              }
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v11 + 8));
    }
    uint64_t v20 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf  = 0;
      _os_log_error_impl(&dword_1985F2000, v20, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
    }
    Boolean  = JSValueMakeUndefined(this);
    goto LABEL_15;
  }

  return JSValueMakeUndefined(this);
}

void sub_198978A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  CFRelease(*(CFTypeRef *)(v11 - 8));
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIExtension::getURL(WebKit::JSWebExtensionAPIExtension *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIExtension(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*(_DWORD *)(v11 + 48);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        BOOL v23 = "argument";
      }
      else {
        BOOL v23 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v27) {
        BOOL v24 = (char *)v27 + 16;
      }
      else {
        BOOL v24 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      int v30 = a4;
      __int16 v31 = 2082;
      uint64_t v32 = v23;
      __int16 v33 = 2082;
      uint64_t v34 = v24;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function extension.getURL() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v27)
      {
        if (*(_DWORD *)v27 == 1) {
          WTF::fastFree(v27, v25);
        }
        else {
          --*(_DWORD *)v27;
        }
      }
      if (v28)
      {
        if (*(_DWORD *)v28 == 2) {
          WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v25);
        }
        else {
          *(_DWORD *)v28 -= 2;
        }
      }
    }

    if (a4)
    {
      if (JSValueIsString(this, *a5))
      {
        uint64_t v17 = WebKit::toNSString(this, *a5, 2);
        if (v17)
        {
          BOOL v18 = WebKit::WebExtensionAPIExtension::getURL(v12);
          uint64_t v19 = (NSString *)0;
          Undefined  = WebKit::toJSValueRef(this, v18, 0);

          if (v19)
          {
            *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"extension.getURL()", 0, v19, v21);
            Undefined  = JSValueMakeUndefined(this);
          }
        }
        else
        {
          *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"extension.getURL()", &cfstr_Resourcepath.isa, &cfstr_AStringIsExpec.isa, v16);
          Undefined  = JSValueMakeUndefined(this);
        }

        goto LABEL_10;
      }
      JSObjectRef v26 = WebKit::toJSError(this, (const OpaqueJSContext *)@"extension.getURL()", &cfstr_Resourcepath.isa, &cfstr_AStringIsExpec.isa, v15);
    }
    else
    {
      JSObjectRef v26 = WebKit::toJSError(this, (const OpaqueJSContext *)@"extension.getURL()", 0, &cfstr_ARequiredArgum.isa, v14);
    }
    *a6  = v26;
    Undefined  = JSValueMakeUndefined(this);
LABEL_10:
    if (*(_DWORD *)(v12 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
    }
    else {
      --*(_DWORD *)(v12 + 48);
    }
    return Undefined;
  }

  return JSValueMakeUndefined(this);
}

void sub_198978ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIExtension::getBackgroundPage(WebKit::JSWebExtensionAPIExtension *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = WebKit::toWebExtensionAPIExtension(this, a3, a3);
  if (v9)
  {
    uint64_t v10 = v9;
    ++*(_DWORD *)(v9 + 48);
    uint64_t v11 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        uint64_t v17 = "argument";
      }
      else {
        uint64_t v17 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v20) {
        BOOL v18 = (char *)v20 + 16;
      }
      else {
        BOOL v18 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      BOOL v23 = a4;
      __int16 v24 = 2082;
      BOOL v25 = v17;
      __int16 v26 = 2082;
      uint64_t v27 = v18;
      _os_log_debug_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEBUG, "Called function extension.getBackgroundPage() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v20)
      {
        if (*(_DWORD *)v20 == 1) {
          WTF::fastFree(v20, v19);
        }
        else {
          --*(_DWORD *)v20;
        }
      }
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v19);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
    }

    WebKit::WebExtensionAPIExtension::getBackgroundPage((WebKit::WebExtensionAPIExtension *)v10, this);
    uint64_t v13 = (const OpaqueJSContext *)(id)objc_claimAutoreleasedReturnValue();
    if (v13) {
      Null  = WebKit::toJSValueRef(this, v13, v12);
    }
    else {
      Null  = JSValueMakeNull(this);
    }
    JSValueRef v15 = Null;

    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
    return v15;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_198979250(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIExtension::getViews(WebKit::JSWebExtensionAPIExtension *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIExtension(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*(_DWORD *)(v11 + 48);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        int v30 = "argument";
      }
      else {
        int v30 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      __int16 v36 = v38;
      WTF::String::utf8();
      if (v37) {
        __int16 v31 = (char *)v37 + 16;
      }
      else {
        __int16 v31 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      uint64_t v40 = a4;
      __int16 v41 = 2082;
      __int16 v42 = v30;
      __int16 v43 = 2082;
      uint64_t v44 = v31;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function extension.getViews() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      __int16 v33 = v37;
      char v37 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 1) {
          WTF::fastFree(v33, v32);
        }
        else {
          --*(_DWORD *)v33;
        }
      }
      uint64_t v34 = v36;
      __int16 v36 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v32);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)1)
    {
      JSValueRef v14 = *a5;
      if (*a5)
      {
        JSValueRef v15 = (void *)MEMORY[0x1E4F30938];
        unint64_t v16 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v17 = [v15 valueWithJSValueRef:v14 inContext:v16];

        BOOL v18 = (void *)v17;
      }
      else
      {
        BOOL v18 = 0;
      }
      char v20 = [v18 _isDictionary];

      if ((v20 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
      {
        *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"extension.getViews()", &cfstr_Filter.isa, &cfstr_AnObjectIsExpe.isa, v21);
        Undefined  = JSValueMakeUndefined(this);
LABEL_18:
        if (*(_DWORD *)(v12 + 48) == 1) {
          (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
        }
        else {
          --*(_DWORD *)(v12 + 48);
        }
        return Undefined;
      }
      uint64_t v19 = WebKit::toNSDictionary(this, *a5, 0, 0);
    }
    else
    {
      uint64_t v19 = 0;
    }
    id v35 = 0;
    uint64_t v22 = WebKit::WebExtensionAPIExtension::getViews(v12, this, v19, &v35);
    BOOL v23 = (NSString *)v35;
    BOOL v25 = v22;
    if (v25) {
      Null  = WebKit::toJSValueRef(this, v25, v24);
    }
    else {
      Null  = JSValueMakeNull(this);
    }
    Undefined  = Null;

    if (v23)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"extension.getViews()", 0, v23, v28);
      Undefined  = JSValueMakeUndefined(this);
    }

    goto LABEL_18;
  }

  return JSValueMakeUndefined(this);
}

void sub_198979710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIExtension::isAllowedIncognitoAccess(WebKit::JSWebExtensionAPIExtension *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIExtension(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*(_DWORD *)(v11 + 48);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        BOOL v23 = "argument";
      }
      else {
        BOOL v23 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      resolve  = v32;
      WTF::String::utf8();
      if (v31) {
        __int16 v24 = (char *)v31 + 16;
      }
      else {
        __int16 v24 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      *(void *)&buf[4]  = a4;
      __int16 v34 = 2082;
      id v35 = v23;
      __int16 v36 = 2082;
      char v37 = v24;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function extension.isAllowedIncognitoAccess() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      __int16 v26 = v31;
      __int16 v31 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          WTF::fastFree(v26, v25);
        }
        else {
          --*(_DWORD *)v26;
        }
      }
      uint64_t v27 = resolve;
      resolve  = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
    }

    if (a4 != (OpaqueJSValue *)1) {
      goto LABEL_10;
    }
    if (!JSValueIsObject(this, *a5) || (JSValueRef v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
    {
      if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
      {
        *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"extension.isAllowedIncognitoAccess()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v15);
        Undefined  = JSValueMakeUndefined(this);
        goto LABEL_15;
      }
    }
    unint64_t v16 = *a5;
    uint64_t v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
    BOOL v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(void *)buf)
    {
      DeferredPromise  = 0;
    }
    else
    {
LABEL_10:
      reject  = 0;
      resolve  = 0;
      DeferredPromise  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
      uint64_t v32 = resolve;
      *(void *)buf  = this;
      __int16 v31 = reject;
      WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v32, &v31, &v28);
      BOOL v18 = v28;
    }
    *(void *)buf  = v18;
    WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(v12, (uint64_t *)buf);
    char v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v20) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
    }
    if (DeferredPromise) {
      goto LABEL_16;
    }
    Undefined  = JSValueMakeUndefined(this);
LABEL_15:
    DeferredPromise  = Undefined;
LABEL_16:
    if (*(_DWORD *)(v12 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
    }
    else {
      --*(_DWORD *)(v12 + 48);
    }
    return DeferredPromise;
  }

  return JSValueMakeUndefined(this);
}

void sub_198979BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIExtension::isAllowedFileSchemeAccess(WebKit::JSWebExtensionAPIExtension *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIExtension(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*(_DWORD *)(v11 + 48);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        BOOL v23 = "argument";
      }
      else {
        BOOL v23 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      resolve  = v32;
      WTF::String::utf8();
      if (v31) {
        __int16 v24 = (char *)v31 + 16;
      }
      else {
        __int16 v24 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      *(void *)&buf[4]  = a4;
      __int16 v34 = 2082;
      id v35 = v23;
      __int16 v36 = 2082;
      char v37 = v24;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function extension.isAllowedFileSchemeAccess() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      __int16 v26 = v31;
      __int16 v31 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          WTF::fastFree(v26, v25);
        }
        else {
          --*(_DWORD *)v26;
        }
      }
      uint64_t v27 = resolve;
      resolve  = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
    }

    if (a4 != (OpaqueJSValue *)1) {
      goto LABEL_10;
    }
    if (!JSValueIsObject(this, *a5) || (JSValueRef v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
    {
      if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
      {
        *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"extension.isAllowedFileSchemeAccess()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v15);
        Undefined  = JSValueMakeUndefined(this);
        goto LABEL_15;
      }
    }
    unint64_t v16 = *a5;
    uint64_t v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
    BOOL v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(void *)buf)
    {
      DeferredPromise  = 0;
    }
    else
    {
LABEL_10:
      reject  = 0;
      resolve  = 0;
      DeferredPromise  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
      uint64_t v32 = resolve;
      *(void *)buf  = this;
      __int16 v31 = reject;
      WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v32, &v31, &v28);
      BOOL v18 = v28;
    }
    id v20 = WebKit::WebExtensionCallbackHandler::call(v18, MEMORY[0x1E4F1CC28]);
    if (v18) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
    }
    if (DeferredPromise) {
      goto LABEL_16;
    }
    Undefined  = JSValueMakeUndefined(this);
LABEL_15:
    DeferredPromise  = Undefined;
LABEL_16:
    if (*(_DWORD *)(v12 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
    }
    else {
      --*(_DWORD *)(v12 + 48);
    }
    return DeferredPromise;
  }

  return JSValueMakeUndefined(this);
}

void sub_19897A04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::toJSValueRef(WebKit *this, const OpaqueJSContext *a2, objc_object *a3)
{
  long long v4 = a2;
  if (v4)
  {
    objc_opt_class();
    long long v5 = WTF::dynamic_objc_cast<JSValue>(v4);
    uint64_t v6 = v5;
    if (v5)
    {
      Undefined  = (JSValueRef)[v5 JSValueRef];
    }
    else
    {
      uint64_t v8 = (void *)MEMORY[0x1E4F30938];
      uint64_t v6 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v9 = [v8 valueWithObject:v4 inContext:v6];
      Undefined  = (JSValueRef)[v9 JSValueRef];
    }
  }
  else
  {
    Undefined  = JSValueMakeUndefined(this);
  }

  return Undefined;
}

void sub_19897A1D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WebKit::JSWebExtensionAPILocalization *WebKit::toWebExtensionAPILocalization(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPILocalization::localizationClass(0);
      if (result)
      {
        uint64_t v6 = WebKit::JSWebExtensionAPILocalization::localizationClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private  = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPILocalization *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPILocalization::localizationClass(WebKit::JSWebExtensionAPILocalization *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPILocalization::localizationClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPILocalization::localizationClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v5.version  = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v5.parentClass  = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v5.getProperty  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v5.deleteProperty  = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v5.callAsFunction  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v5.hasInstance  = v4;
    v5.hasProperty  = *(JSObjectHasPropertyCallback *)(MEMORY[0x1E4F309C8] + 56);
    *(_OWORD *)&v5.parentClass  = 0uLL;
    v5.className  = "Localization";
    v5.staticFunctions  = (const JSStaticFunction *)&WebKit::JSWebExtensionAPILocalization::staticFunctions(void)::functions;
    v5.initialize  = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v5.finalize  = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    JSClassRef result = JSClassCreate(&v5);
    WebKit::JSWebExtensionAPILocalization::localizationClass(void)::jsClass  = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPILocalization::getMessage(WebKit::JSWebExtensionAPILocalization *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPILocalization(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        BOOL v23 = "argument";
      }
      else {
        BOOL v23 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v26) {
        __int16 v24 = (char *)v26 + 16;
      }
      else {
        __int16 v24 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      uint64_t v29 = a4;
      __int16 v30 = 2082;
      __int16 v31 = v23;
      __int16 v32 = 2082;
      __int16 v33 = v24;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function i18n.getMessage() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          WTF::fastFree(v26, v25);
        }
        else {
          --*(_DWORD *)v26;
        }
      }
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsString(this, *(JSValueRef *)a5))
      {
        WebKit::toNSString(this, *(JSValueRef *)a5, 2);
        uint64_t v19 = (NSString *)objc_claimAutoreleasedReturnValue();
        WebKit::toNSObject(this, *(void *)(a5 + 8), 0, 0, 0);
        uint64_t v15 = (objc_object *)objc_claimAutoreleasedReturnValue();
        if (v19)
        {
LABEL_13:
          if ([(NSString *)v19 length])
          {
            JSValueRef v21 = WebKit::WebExtensionAPILocalization::getMessage(v12, v19, v15);
            Undefined  = WebKit::toJSValueRef(this, v21, 1);
          }
          else
          {
            *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"i18n.getMessage()", &cfstr_Name.isa, &cfstr_ItCannotBeEmpt.isa, v20);
            Undefined  = JSValueMakeUndefined(this);
          }
          unint64_t v16 = v19;
          goto LABEL_16;
        }
LABEL_7:
        unint64_t v16 = 0;
        *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"i18n.getMessage()", &cfstr_Name.isa, &cfstr_AStringIsExpec.isa, v14);
        Undefined  = JSValueMakeUndefined(this);
LABEL_16:

LABEL_17:
        if (*((_DWORD *)v12 + 12) == 1) {
          (*(void (**)(uint64_t))(*((void *)v12 + 5) + 8))((uint64_t)v12 + 40);
        }
        else {
          --*((_DWORD *)v12 + 12);
        }
        return Undefined;
      }
    }
    else
    {
      if (a4 != (OpaqueJSValue *)1)
      {
        if (!a4)
        {
          *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"i18n.getMessage()", 0, &cfstr_ARequiredArgum.isa, v14);
          Undefined  = JSValueMakeUndefined(this);
          goto LABEL_17;
        }
        uint64_t v15 = 0;
        goto LABEL_7;
      }
      if (JSValueIsString(this, *(JSValueRef *)a5))
      {
        WebKit::toNSString(this, *(JSValueRef *)a5, 2);
        uint64_t v19 = (NSString *)objc_claimAutoreleasedReturnValue();
        uint64_t v15 = 0;
        if (v19) {
          goto LABEL_13;
        }
        goto LABEL_7;
      }
    }
    unint64_t v16 = 0;
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"i18n.getMessage()", &cfstr_Name.isa, &cfstr_AStringIsExpec.isa, v18);
    Undefined  = JSValueMakeUndefined(this);
    uint64_t v15 = 0;
    goto LABEL_16;
  }

  return JSValueMakeUndefined(this);
}

void sub_19897A7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPILocalization::getUILanguage(WebKit::JSWebExtensionAPILocalization *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = WebKit::toWebExtensionAPILocalization(this, a3, a3);
  if (v9)
  {
    uint64_t v10 = v9;
    ++*((_DWORD *)v9 + 12);
    uint64_t v11 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        uint64_t v15 = "argument";
      }
      else {
        uint64_t v15 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v18) {
        unint64_t v16 = (char *)v18 + 16;
      }
      else {
        unint64_t v16 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      JSValueRef v21 = a4;
      __int16 v22 = 2082;
      BOOL v23 = v15;
      __int16 v24 = 2082;
      BOOL v25 = v16;
      _os_log_debug_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEBUG, "Called function i18n.getUILanguage() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v18)
      {
        if (*(_DWORD *)v18 == 1) {
          WTF::fastFree(v18, v17);
        }
        else {
          --*(_DWORD *)v18;
        }
      }
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v17);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
    }

    uint64_t v12 = WebKit::WebExtensionAPILocalization::getUILanguage(v10);
    JSValueRef v13 = WebKit::toJSValueRef(this, v12, 1);

    if (*((_DWORD *)v10 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v10 + 5) + 8))((uint64_t)v10 + 40);
    }
    else {
      --*((_DWORD *)v10 + 12);
    }
    return v13;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_19897AB08(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPILocalization::getAcceptLanguages(WebKit::JSWebExtensionAPILocalization *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPILocalization(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    ++*((_DWORD *)v11 + 12);
    JSValueRef v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        BOOL v23 = "argument";
      }
      else {
        BOOL v23 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      resolve  = v32;
      WTF::String::utf8();
      if (v31) {
        __int16 v24 = (char *)v31 + 16;
      }
      else {
        __int16 v24 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      *(void *)&buf[4]  = a4;
      __int16 v34 = 2082;
      id v35 = v23;
      __int16 v36 = 2082;
      char v37 = v24;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function i18n.getAcceptLanguages() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      uint64_t v26 = v31;
      __int16 v31 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          WTF::fastFree(v26, v25);
        }
        else {
          --*(_DWORD *)v26;
        }
      }
      uint64_t v27 = resolve;
      resolve  = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
    }

    if (a4 != (OpaqueJSValue *)1) {
      goto LABEL_10;
    }
    if (!JSValueIsObject(this, *a5) || (JSValueRef v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
    {
      if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
      {
        *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"i18n.getAcceptLanguages()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v15);
        Undefined  = JSValueMakeUndefined(this);
        goto LABEL_15;
      }
    }
    unint64_t v16 = *a5;
    uint64_t v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
    BOOL v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(void *)buf)
    {
      DeferredPromise  = 0;
    }
    else
    {
LABEL_10:
      reject  = 0;
      resolve  = 0;
      DeferredPromise  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
      __int16 v32 = resolve;
      *(void *)buf  = this;
      __int16 v31 = reject;
      WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v32, &v31, &v28);
      BOOL v18 = v28;
    }
    *(void *)buf  = v18;
    WebKit::WebExtensionAPILocalization::getAcceptLanguages(v12, (WebKit::WebExtensionCallbackHandler **)buf);
    id v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v20) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
    }
    if (DeferredPromise) {
      goto LABEL_16;
    }
    Undefined  = JSValueMakeUndefined(this);
LABEL_15:
    DeferredPromise  = Undefined;
LABEL_16:
    if (*(_DWORD *)(v12 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
    }
    else {
      --*(_DWORD *)(v12 + 48);
    }
    return DeferredPromise;
  }

  return JSValueMakeUndefined(this);
}

void sub_19897AF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIMenus *WebKit::toWebExtensionAPIMenus(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPIMenus::menusClass(0);
      if (result)
      {
        uint64_t v6 = WebKit::JSWebExtensionAPIMenus::menusClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private  = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIMenus *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIMenus::menusClass(WebKit::JSWebExtensionAPIMenus *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIMenus::menusClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIMenus::menusClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v6.version  = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v6.parentClass  = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 48);
    *(_OWORD *)&v6.staticFunctions  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 32);
    *(_OWORD *)&v6.finalize  = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v6.getProperty  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v6.deleteProperty  = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v6.callAsFunction  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v6.hasInstance  = v5;
    v6.className  = "Menus";
    v6.parentClass  = 0;
    v6.staticValues  = (const JSStaticValue *)&WebKit::JSWebExtensionAPIMenus::staticValues(void)::values;
    v6.staticFunctions  = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIMenus::staticFunctions(void)::functions;
    v6.initialize  = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize  = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    JSClassRef result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIMenus::menusClass(void)::jsClass  = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIMenus::create(WebKit::JSWebExtensionAPIMenus *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIMenus(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_53;
  }
  JSValueRef v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v57 = "argument";
    }
    else {
      uint64_t v57 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    __int16 v66 = *(WTF::StringImpl **)v68;
    WTF::String::utf8();
    if (v67) {
      int v58 = (char *)v67 + 16;
    }
    else {
      int v58 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v70 = 2082;
    uint64_t v71 = v57;
    __int16 v72 = 2082;
    uint64_t v73 = v58;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function menus.create() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v60 = v67;
    uint64_t v67 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 1) {
        WTF::fastFree(v60, v59);
      }
      else {
        --*(_DWORD *)v60;
      }
    }
    uint64_t v61 = v66;
    __int16 v66 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2) {
        WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v59);
      }
      else {
        *(_DWORD *)v61 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    uint64_t v19 = *a5;
    if (*a5)
    {
      id v20 = (void *)MEMORY[0x1E4F30938];
      JSValueRef v21 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v22 = [v20 valueWithJSValueRef:v19 inContext:v21];

      BOOL v23 = (void *)v22;
    }
    else
    {
      BOOL v23 = 0;
    }
    char v29 = [v23 _isDictionary];

    if (v29)
    {
      uint64_t v17 = WebKit::toNSDictionary(this, *a5, 1, 0);
      if (!v17) {
        goto LABEL_7;
      }
      goto LABEL_26;
    }
    goto LABEL_74;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    __int16 v24 = *a5;
    if (*a5)
    {
      BOOL v25 = (void *)MEMORY[0x1E4F30938];
      uint64_t v26 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v27 = [v25 valueWithJSValueRef:v24 inContext:v26];

      uint64_t v28 = (void *)v27;
    }
    else
    {
      uint64_t v28 = 0;
    }
    char v31 = [v28 _isDictionary];

    if (v31)
    {
      if (JSValueIsObject(this, a5[1]) && (__int16 v32 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v32))
        || JSValueIsNull(this, a5[1])
        || JSValueIsUndefined(this, a5[1]))
      {
        uint64_t v17 = WebKit::toNSDictionary(this, *a5, 1, 0);
        __int16 v33 = a5[1];
        __int16 v34 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v33, v34, buf);
        uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
        if (!v17) {
          goto LABEL_8;
        }
        if (*(void *)buf)
        {
          BOOL v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          goto LABEL_27;
        }
LABEL_26:
        uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        BOOL v18 = (WebKit::WebExtensionCallbackHandler *)WTF::fastMalloc((WTF *)0x28);
        WebKit::WebExtensionCallbackHandler::WebExtensionCallbackHandler((uint64_t)v18, this, v35);
LABEL_27:
        GlobalContext  = JSContextGetGlobalContext(this);
        WebKit::WebFrame::frameForContext(GlobalContext, v37, buf);
        uint64_t v38 = *(void *)buf;
        if (*(void *)buf)
        {
          uint64_t v39 = *(void *)(*(void *)buf + 24);
          if (v39)
          {
            uint64_t v40 = *(void *)(v39 + 8);
            if (v40)
            {
              uint64_t v41 = *(void *)(v40 + 24);
              if (v41)
              {
                uint64_t v42 = *(void *)(v41 + 8);
                if (v42)
                {
                  __int16 v43 = *(void **)(*(void *)(v42 + 48) + 16);
                  if (((*(uint64_t (**)(void *))(*v43 + 1368))(v43) & 1) == 0)
                  {
                    uint64_t v44 = *(void *)(v43[2] + 8);
                    if (v44)
                    {
                      CFRetain(*(CFTypeRef *)(v44 - 8));
                      CFRelease(*(CFTypeRef *)(v38 + 8));
                      uint64_t v45 = JSContextGetGlobalContext(this);
                      WebKit::WebFrame::frameForContext(v45, v46, buf);
                      if (*(void *)buf)
                      {
                        *(void *)__int16 v68 = v18;
                        id v65 = 0;
                        char v47 = WebKit::WebExtensionAPIMenus::createMenu(v12, v44 - 16, *(WebKit::WebFrame **)buf, v17, (uint64_t *)v68, &v65);
                        __int16 v48 = (NSString *)v65;
                        uint64_t v50 = v47;
                        if (v50) {
                          Null  = WebKit::toJSValueRef(this, v50, v49);
                        }
                        else {
                          Null  = JSValueMakeNull(this);
                        }
                        Undefined  = Null;

                        uint64_t v54 = *(WebKit::WebExtensionCallbackHandler **)v68;
                        *(void *)__int16 v68 = 0;
                        if (v54) {
                          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v54);
                        }
                        if (v48)
                        {
                          *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"menus.create()", 0, v48, v53);
                          Undefined  = JSValueMakeUndefined(this);
                        }

                        if (*(void *)buf) {
                          CFRelease(*(CFTypeRef *)(*(void *)buf + 8));
                        }
                        BOOL v18 = 0;
                      }
                      else
                      {
                        char v64 = qword_1EB357DF8;
                        if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
                        {
                          *(_WORD *)__int16 v68 = 0;
                          _os_log_error_impl(&dword_1985F2000, v64, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v68, 2u);
                        }
                        Undefined  = JSValueMakeUndefined(this);
                      }
                      CFRelease(*(CFTypeRef *)(v44 - 8));
LABEL_50:
                      __int16 v55 = v17;
                      if (!v18)
                      {
LABEL_52:

                        goto LABEL_53;
                      }
LABEL_51:
                      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
                      __int16 v55 = v17;
                      goto LABEL_52;
                    }
                  }
                }
              }
            }
          }
          CFRelease(*(CFTypeRef *)(v38 + 8));
        }
        __int16 v52 = qword_1EB357DF8;
        if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf  = 0;
          _os_log_error_impl(&dword_1985F2000, v52, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
        }
        Undefined  = JSValueMakeUndefined(this);
        goto LABEL_51;
      }
      char v62 = @"a function is expected";
      __int16 v63 = @"callback";
LABEL_75:
      __int16 v55 = 0;
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"menus.create()", &v63->isa, &v62->isa, v30);
      Undefined  = JSValueMakeUndefined(this);
      goto LABEL_52;
    }
LABEL_74:
    char v62 = @"an object is expected";
    __int16 v63 = @"properties";
    goto LABEL_75;
  }
  if (a4)
  {
LABEL_7:
    uint64_t v15 = 0;
LABEL_8:
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"menus.create()", &cfstr_Properties.isa, &cfstr_AnObjectIsExpe.isa, v14);
    Undefined  = JSValueMakeUndefined(this);
    uint64_t v17 = 0;
    BOOL v18 = v15;
    goto LABEL_50;
  }
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"menus.create()", 0, &cfstr_ARequiredArgum.isa, v14);
  Undefined  = JSValueMakeUndefined(this);
LABEL_53:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19897B900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  CFRelease(*(CFTypeRef *)(v18 - 8));
  if (v17) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v17);
  }

  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIMenus::update(WebKit::JSWebExtensionAPIMenus *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t a5, const OpaqueJSValue **a6, const OpaqueJSValue **a7)
{
  id v65 = a6;
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::toWebExtensionAPIMenus(this, a3, a3);
  uint64_t v11 = (uint64_t)v10;
  if (!v10 || (++*((_DWORD *)v10 + 12), *((unsigned char *)v10 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v11) {
      return Undefined;
    }
    goto LABEL_53;
  }
  uint64_t v12 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v56 = "argument";
    }
    else {
      uint64_t v56 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = *(JSObjectRef *)v71;
    WTF::String::utf8();
    if (v70) {
      uint64_t v57 = (char *)v70 + 16;
    }
    else {
      uint64_t v57 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v73 = 2082;
    uint64_t v74 = v56;
    __int16 v75 = 2082;
    uint64_t v76 = v57;
    _os_log_debug_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEBUG, "Called function menus.update() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v59 = v70;
    __int16 v70 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 1) {
        WTF::fastFree(v59, v58);
      }
      else {
        --*(_DWORD *)v59;
      }
    }
    uint64_t v60 = resolve;
    resolve  = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2) {
        WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v58);
      }
      else {
        *(_DWORD *)v60 -= 2;
      }
    }
  }

  if ((unint64_t)a4 > 1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      uint64_t v19 = *(void *)(a5 + 8);
      if (v19)
      {
        id v20 = (void *)MEMORY[0x1E4F30938];
        JSValueRef v21 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v22 = [v20 valueWithJSValueRef:v19 inContext:v21];

        BOOL v23 = (void *)v22;
      }
      else
      {
        BOOL v23 = 0;
      }
      char v36 = objc_msgSend(v23, "_isDictionary", v65);

      if (v36)
      {
        uint64_t v33 = WebKit::toNSObject(this, *(void *)a5, 0, 0, 0);
        BOOL v25 = 0;
        char v29 = WebKit::toNSDictionary(this, *(const OpaqueJSValue **)(a5 + 8), 1, 0);
        goto LABEL_24;
      }
    }
    else
    {
      if (a4 != (OpaqueJSValue *)3)
      {
        __int16 v24 = 0;
        BOOL v25 = 0;
        goto LABEL_12;
      }
      uint64_t v14 = *(void *)(a5 + 8);
      if (v14)
      {
        uint64_t v15 = (void *)MEMORY[0x1E4F30938];
        unint64_t v16 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v17 = [v15 valueWithJSValueRef:v14 inContext:v16];

        uint64_t v18 = (void *)v17;
      }
      else
      {
        uint64_t v18 = 0;
      }
      char v30 = objc_msgSend(v18, "_isDictionary", v65);

      if (v30)
      {
        if (JSValueIsObject(this, *(JSValueRef *)(a5 + 16))
          && (__int16 v32 = JSValueToObject(this, *(JSValueRef *)(a5 + 16), 0), JSObjectIsFunction(this, v32))
          || JSValueIsNull(this, *(JSValueRef *)(a5 + 16))
          || JSValueIsUndefined(this, *(JSValueRef *)(a5 + 16)))
        {
          uint64_t v33 = WebKit::toNSObject(this, *(void *)a5, 0, 0, 0);
          char v29 = WebKit::toNSDictionary(this, *(const OpaqueJSValue **)(a5 + 8), 1, 0);
          __int16 v34 = *(const OpaqueJSContext **)(a5 + 16);
          uint64_t v35 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v34, v35, buf);
          BOOL v25 = *(WebKit::WebExtensionCallbackHandler **)buf;
LABEL_24:
          uint64_t v26 = (void *)v33;
          if (v33)
          {
            if (v29)
            {
              if (v25)
              {
                Undefined  = 0;
              }
              else
              {
                reject  = 0;
                resolve  = 0;
                Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
                *(void *)buf  = this;
                __int16 v70 = reject;
                *(void *)uint64_t v71 = resolve;
                WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, (OpaqueJSValue **)v71, &v70, &v67);
                BOOL v25 = v67;
              }
              GlobalContext  = JSContextGetGlobalContext(this);
              WebKit::WebFrame::frameForContext(GlobalContext, v38, buf);
              uint64_t v39 = *(void *)buf;
              if (*(void *)buf)
              {
                uint64_t v40 = *(void *)(*(void *)buf + 24);
                if (v40)
                {
                  uint64_t v41 = *(void *)(v40 + 8);
                  if (v41)
                  {
                    uint64_t v42 = *(void *)(v41 + 24);
                    if (v42)
                    {
                      uint64_t v43 = *(void *)(v42 + 8);
                      if (v43)
                      {
                        uint64_t v44 = *(void **)(*(void *)(v43 + 48) + 16);
                        if (((*(uint64_t (**)(void *))(*v44 + 1368))(v44) & 1) == 0)
                        {
                          uint64_t v45 = *(void *)(v44[2] + 8);
                          if (v45)
                          {
                            CFRetain(*(CFTypeRef *)(v45 - 8));
                            CFRelease(*(CFTypeRef *)(v39 + 8));
                            __int16 v46 = JSContextGetGlobalContext(this);
                            WebKit::WebFrame::frameForContext(v46, v47, buf);
                            uint64_t v48 = *(void *)buf;
                            if (*(void *)buf)
                            {
                              *(void *)uint64_t v71 = v25;
                              id v66 = 0;
                              WebKit::WebExtensionAPIMenus::update(v11, v45 - 16, *(WebKit::WebFrame **)buf, v26, v29, (uint64_t *)v71, &v66);
                              uint64_t v50 = (NSString *)v66;
                              uint64_t v51 = *(WebKit::WebExtensionCallbackHandler **)v71;
                              *(void *)uint64_t v71 = 0;
                              if (v51) {
                                WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v51);
                              }
                              if (v50)
                              {
                                *id v65 = WebKit::toJSError(this, (const OpaqueJSContext *)@"menus.update()", 0, v50, v49);
                              }
                              else if (Undefined)
                              {
LABEL_42:

                                CFRelease(*(CFTypeRef *)(v48 + 8));
                                BOOL v25 = 0;
LABEL_43:
                                CFRelease(*(CFTypeRef *)(v45 - 8));
                                goto LABEL_49;
                              }
                              Undefined  = JSValueMakeUndefined(this);
                              goto LABEL_42;
                            }
                            __int16 v63 = qword_1EB357DF8;
                            if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
                            {
                              *(_WORD *)uint64_t v71 = 0;
                              _os_log_error_impl(&dword_1985F2000, v63, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v71, 2u);
                              if (!Undefined) {
                                goto LABEL_83;
                              }
                            }
                            else if (!Undefined)
                            {
                              goto LABEL_83;
                            }
                            Undefined  = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"menus.update()", 0, &cfstr_AnUnknownError.isa, v64);
                            if (Undefined) {
                              goto LABEL_43;
                            }
LABEL_83:
                            Undefined  = JSValueMakeUndefined(this);
                            goto LABEL_43;
                          }
                        }
                      }
                    }
                  }
                }
                CFRelease(*(CFTypeRef *)(v39 + 8));
              }
              __int16 v52 = qword_1EB357DF8;
              if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf  = 0;
                _os_log_error_impl(&dword_1985F2000, v52, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
                if (!Undefined) {
                  goto LABEL_48;
                }
              }
              else if (!Undefined)
              {
                goto LABEL_48;
              }
              Undefined  = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"menus.update()", 0, &cfstr_AnUnknownError.isa, v53);
              if (Undefined) {
                goto LABEL_49;
              }
LABEL_48:
              Undefined  = JSValueMakeUndefined(this);
              goto LABEL_49;
            }
            __int16 v24 = 0;
            *id v65 = WebKit::toJSError(this, (const OpaqueJSContext *)@"menus.update()", &cfstr_Properties.isa, &cfstr_AnObjectIsExpe.isa, v13);
            JSValueRef v27 = JSValueMakeUndefined(this);
LABEL_13:
            Undefined  = v27;
            char v29 = v24;
LABEL_49:
            if (v25) {
              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v25);
            }
            uint64_t v54 = v29;
            goto LABEL_52;
          }
          __int16 v24 = v29;
LABEL_12:
          uint64_t v26 = 0;
          *id v65 = WebKit::toJSError(this, (const OpaqueJSContext *)@"menus.update()", &cfstr_Identifier.isa, &cfstr_AnObjectIsExpe.isa, v13);
          JSValueRef v27 = JSValueMakeUndefined(this);
          goto LABEL_13;
        }
        uint64_t v61 = @"a function is expected";
        char v62 = @"callback";
LABEL_78:
        uint64_t v54 = 0;
        *id v65 = WebKit::toJSError(this, (const OpaqueJSContext *)@"menus.update()", &v62->isa, &v61->isa, v31);
        Undefined  = JSValueMakeUndefined(this);
        uint64_t v26 = 0;
LABEL_52:

        goto LABEL_53;
      }
    }
    uint64_t v61 = @"an object is expected";
    char v62 = @"properties";
    goto LABEL_78;
  }
  *id v65 = WebKit::toJSError(this, (const OpaqueJSContext *)@"menus.update()", 0, &cfstr_ARequiredArgum.isa, v13);
  Undefined  = JSValueMakeUndefined(this);
LABEL_53:
  if (*(_DWORD *)(v11 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v11 + 40) + 8))(v11 + 40);
  }
  else {
    --*(_DWORD *)(v11 + 48);
  }
  return Undefined;
}

void sub_19897C36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15)
{
  CFRelease(*(CFTypeRef *)(v18 - 8));
  if (v16) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
  }

  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIMenus::remove(WebKit::JSWebExtensionAPIMenus *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIMenus(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_26;
  }
  JSValueRef v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v26 = "argument";
    }
    else {
      uint64_t v26 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v37;
    WTF::String::utf8();
    if (v36) {
      JSValueRef v27 = (char *)v36 + 16;
    }
    else {
      JSValueRef v27 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v39 = 2082;
    uint64_t v40 = v26;
    __int16 v41 = 2082;
    uint64_t v42 = v27;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function menus.remove() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    char v29 = v36;
    char v36 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 1) {
        WTF::fastFree(v29, v28);
      }
      else {
        --*(_DWORD *)v29;
      }
    }
    char v30 = resolve;
    resolve  = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v28);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    uint64_t v17 = WebKit::toNSObject(this, *(void *)a5, 0, 0, 0);
    if (!v17) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"menus.remove()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v31 = JSValueMakeUndefined(this);
    goto LABEL_47;
  }
  if (JSValueIsObject(this, *(JSValueRef *)(a5 + 8))
    && (uint64_t v18 = JSValueToObject(this, *(JSValueRef *)(a5 + 8), 0), JSObjectIsFunction(this, v18))
    || JSValueIsNull(this, *(JSValueRef *)(a5 + 8))
    || JSValueIsUndefined(this, *(JSValueRef *)(a5 + 8)))
  {
    uint64_t v17 = WebKit::toNSObject(this, *(void *)a5, 0, 0, 0);
    id v20 = *(const OpaqueJSContext **)(a5 + 8);
    JSValueRef v21 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v20, v21, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v17)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"menus.remove()", &cfstr_Identifier.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_26;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_20;
    }
LABEL_19:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    char v37 = resolve;
    *(void *)buf  = this;
    char v36 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v37, &v36, &v33);
    uint64_t v15 = v33;
LABEL_20:
    *(void *)buf  = v15;
    id v32 = 0;
    WebKit::WebExtensionAPIMenus::remove(v12, v17, (uint64_t *)buf, &v32);
    BOOL v23 = (NSString *)v32;
    __int16 v24 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v24) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v24);
    }
    if (v23)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"menus.remove()", 0, v23, v22);
    }
    else if (Undefined)
    {
LABEL_25:

      goto LABEL_26;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_25;
  }
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"menus.remove()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v19);
  JSValueRef v31 = JSValueMakeUndefined(this);
LABEL_47:
  Undefined  = v31;
LABEL_26:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19897C988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIMenus::removeAll(WebKit::JSWebExtensionAPIMenus *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIMenus(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_17;
  }
  JSValueRef v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      BOOL v23 = "argument";
    }
    else {
      BOOL v23 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v32;
    WTF::String::utf8();
    if (v31) {
      __int16 v24 = (char *)v31 + 16;
    }
    else {
      __int16 v24 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v34 = 2082;
    uint64_t v35 = v23;
    __int16 v36 = 2082;
    char v37 = v24;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function menus.removeAll() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v26 = v31;
    JSValueRef v31 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1) {
        WTF::fastFree(v26, v25);
      }
      else {
        --*(_DWORD *)v26;
      }
    }
    JSValueRef v27 = resolve;
    resolve  = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }

  if (a4 != (OpaqueJSValue *)1) {
    goto LABEL_11;
  }
  if (!JSValueIsObject(this, *a5) || (uint64_t v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"menus.removeAll()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v15);
      JSValueRef v21 = JSValueMakeUndefined(this);
      goto LABEL_16;
    }
  }
  unint64_t v16 = *a5;
  uint64_t v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(void *)buf)
  {
    Undefined  = 0;
  }
  else
  {
LABEL_11:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    id v32 = resolve;
    *(void *)buf  = this;
    JSValueRef v31 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v32, &v31, &v28);
    uint64_t v18 = v28;
  }
  *(void *)buf  = v18;
  WebKit::WebExtensionAPIMenus::removeAll(v12, (uint64_t *)buf);
  id v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(void *)buf  = 0;
  if (v20) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  }
  if (Undefined) {
    goto LABEL_17;
  }
  JSValueRef v21 = JSValueMakeUndefined(this);
LABEL_16:
  Undefined  = v21;
LABEL_17:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19897CE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIMenus::onClicked(WebKit::JSWebExtensionAPIMenus *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIMenus(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      uint64_t v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter menus.onClicked in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIMenus::onClicked(v7);
    Undefined  = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_19897D130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIMenus::actionMenuTopLevelLimit(WebKit::JSWebExtensionAPIMenus *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIMenus(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v13) {
        uint64_t v11 = (char *)v13 + 16;
      }
      else {
        uint64_t v11 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      unint64_t v16 = v11;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter menus.ACTION_MENU_TOP_LEVEL_LIMIT in %{public}s world", buf, 0xCu);
      if (v13)
      {
        if (*(_DWORD *)v13 == 1) {
          WTF::fastFree(v13, v12);
        }
        else {
          --*(_DWORD *)v13;
        }
      }
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }

    Undefined  = JSValueMakeNumber(this, 6.0);
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_19897D3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPINamespace *WebKit::toWebExtensionAPINamespace(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPINamespace::namespaceClass(0);
      if (result)
      {
        JSClassDefinition v6 = WebKit::JSWebExtensionAPINamespace::namespaceClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private  = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPINamespace *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPINamespace::namespaceClass(WebKit::JSWebExtensionAPINamespace *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPINamespace::namespaceClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPINamespace::namespaceClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v6.version  = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v6.parentClass  = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 48);
    *(_OWORD *)&v6.staticFunctions  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 32);
    *(_OWORD *)&v6.finalize  = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v6.getProperty  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v6.deleteProperty  = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v6.callAsFunction  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v6.hasInstance  = v5;
    v6.className  = "Namespace";
    v6.parentClass  = 0;
    v6.staticValues  = (const JSStaticValue *)&WebKit::JSWebExtensionAPINamespace::staticValues(void)::values;
    v6.staticFunctions  = 0;
    v6.initialize  = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize  = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    v6.getPropertyNames  = (JSObjectGetPropertyNamesCallback)WebKit::JSWebExtensionAPINamespace::getPropertyNames;
    v6.hasProperty  = (JSObjectHasPropertyCallback)WebKit::JSWebExtensionAPINamespace::hasProperty;
    v6.getProperty  = (JSObjectGetPropertyCallback)WebKit::JSWebExtensionAPINamespace::getProperty;
    JSClassRef result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPINamespace::namespaceClass(void)::jsClass  = (uint64_t)result;
  }
  return result;
}

void WebKit::JSWebExtensionAPINamespace::getPropertyNames(WebKit::JSWebExtensionAPINamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSPropertyNameAccumulator *a4)
{
  uint64_t v6 = WebKit::toWebExtensionAPINamespace(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*(_DWORD *)(v6 + 48);
    GlobalContext  = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v9, &v36);
    uint64_t v10 = v36;
    if (v36)
    {
      uint64_t v11 = *((void *)v36 + 3);
      if (v11
        && (uint64_t v12 = *(void *)(v11 + 8)) != 0
        && (uint64_t v13 = *(void *)(v12 + 24)) != 0
        && (uint64_t v14 = *(void *)(v13 + 8)) != 0
        && (uint64_t v15 = *(void **)(*(void *)(v14 + 48) + 16),
            ((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) == 0))
      {
        unint64_t v16 = *(CFTypeRef **)(v15[2] + 8);
        if (v16)
        {
          CFRetain(*(v16 - 1));
          v16 -= 2;
        }
      }
      else
      {
        unint64_t v16 = 0;
      }
      CFRelease(*((CFTypeRef *)v10 + 1));
    }
    else
    {
      unint64_t v16 = 0;
    }
    int v17 = *(unsigned __int8 *)(v7 + 8);
    if (!*(unsigned char *)(v7 + 8))
    {
      __int16 v36 = "action";
      uint64_t v37 = 7;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        uint64_t v18 = JSStringCreateWithUTF8CString("action");
        JSPropertyNameAccumulatorAddName(a3, v18);
        if (v18) {
          JSStringRelease(v18);
        }
      }
      __int16 v36 = "alarms";
      uint64_t v37 = 7;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        uint64_t v19 = JSStringCreateWithUTF8CString("alarms");
        JSPropertyNameAccumulatorAddName(a3, v19);
        if (v19) {
          JSStringRelease(v19);
        }
      }
      __int16 v36 = "browserAction";
      uint64_t v37 = 14;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        id v20 = JSStringCreateWithUTF8CString("browserAction");
        JSPropertyNameAccumulatorAddName(a3, v20);
        if (v20) {
          JSStringRelease(v20);
        }
      }
      __int16 v36 = "cookies";
      uint64_t v37 = 8;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        JSValueRef v21 = JSStringCreateWithUTF8CString("cookies");
        JSPropertyNameAccumulatorAddName(a3, v21);
        if (v21) {
          JSStringRelease(v21);
        }
      }
      __int16 v36 = "commands";
      uint64_t v37 = 9;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        uint64_t v22 = JSStringCreateWithUTF8CString("commands");
        JSPropertyNameAccumulatorAddName(a3, v22);
        if (v22) {
          JSStringRelease(v22);
        }
      }
      __int16 v36 = "contextMenus";
      uint64_t v37 = 13;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        BOOL v23 = JSStringCreateWithUTF8CString("contextMenus");
        JSPropertyNameAccumulatorAddName(a3, v23);
        if (v23) {
          JSStringRelease(v23);
        }
      }
      __int16 v36 = "declarativeNetRequest";
      uint64_t v37 = 22;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        __int16 v24 = JSStringCreateWithUTF8CString("declarativeNetRequest");
        JSPropertyNameAccumulatorAddName(a3, v24);
        if (v24) {
          JSStringRelease(v24);
        }
      }
      __int16 v36 = "menus";
      uint64_t v37 = 6;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        BOOL v25 = JSStringCreateWithUTF8CString("menus");
        JSPropertyNameAccumulatorAddName(a3, v25);
        if (v25) {
          JSStringRelease(v25);
        }
      }
      __int16 v36 = "notifications";
      uint64_t v37 = 14;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        uint64_t v26 = JSStringCreateWithUTF8CString("notifications");
        JSPropertyNameAccumulatorAddName(a3, v26);
        if (v26) {
          JSStringRelease(v26);
        }
      }
      __int16 v36 = "pageAction";
      uint64_t v37 = 11;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        JSValueRef v27 = JSStringCreateWithUTF8CString("pageAction");
        JSPropertyNameAccumulatorAddName(a3, v27);
        if (v27) {
          JSStringRelease(v27);
        }
      }
      uint64_t v28 = JSStringCreateWithUTF8CString("permissions");
      JSPropertyNameAccumulatorAddName(a3, v28);
      if (v28) {
        JSStringRelease(v28);
      }
      __int16 v36 = "scripting";
      uint64_t v37 = 10;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        char v29 = JSStringCreateWithUTF8CString("scripting");
        JSPropertyNameAccumulatorAddName(a3, v29);
        if (v29) {
          JSStringRelease(v29);
        }
      }
    }
    __int16 v36 = "storage";
    uint64_t v37 = 8;
    if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
    {
      char v30 = JSStringCreateWithUTF8CString("storage");
      JSPropertyNameAccumulatorAddName(a3, v30);
      if (v30) {
        JSStringRelease(v30);
      }
    }
    if (!v17)
    {
      JSValueRef v31 = JSStringCreateWithUTF8CString("tabs");
      JSPropertyNameAccumulatorAddName(a3, v31);
      if (v31) {
        JSStringRelease(v31);
      }
      id v32 = JSStringCreateWithUTF8CString("windows");
      JSPropertyNameAccumulatorAddName(a3, v32);
      if (v32) {
        JSStringRelease(v32);
      }
      __int16 v36 = "webNavigation";
      uint64_t v37 = 14;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        uint64_t v33 = JSStringCreateWithUTF8CString("webNavigation");
        JSPropertyNameAccumulatorAddName(a3, v33);
        if (v33) {
          JSStringRelease(v33);
        }
      }
      __int16 v36 = "webRequest";
      uint64_t v37 = 11;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
      {
        __int16 v34 = JSStringCreateWithUTF8CString("webRequest");
        JSPropertyNameAccumulatorAddName(a3, v34);
        if (v34) {
          JSStringRelease(v34);
        }
      }
    }
    __int16 v36 = "test";
    uint64_t v37 = 5;
    if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v36, (WebKit::WebPage *)v16))
    {
      uint64_t v35 = JSStringCreateWithUTF8CString("test");
      JSPropertyNameAccumulatorAddName(a3, v35);
      if (v35) {
        JSStringRelease(v35);
      }
    }
    if (v16) {
      CFRelease(v16[1]);
    }
    if (*(_DWORD *)(v7 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v7 + 40) + 8))(v7 + 40);
    }
    else {
      --*(_DWORD *)(v7 + 48);
    }
  }
}

void sub_19897DC1C(_Unwind_Exception *exception_object)
{
  if (v3) {
    JSStringRelease(v3);
  }
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  if (*(_DWORD *)(v1 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 40) + 8))(v1 + 40);
  }
  else {
    --*(_DWORD *)(v1 + 48);
  }
  _Unwind_Resume(exception_object);
}

void sub_19897DD54()
{
}

BOOL WebKit::JSWebExtensionAPINamespace::hasProperty(WebKit::JSWebExtensionAPINamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4)
{
  uint64_t v6 = WebKit::toWebExtensionAPINamespace(this, a2, a3);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  ++*(_DWORD *)(v6 + 48);
  GlobalContext  = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v9, &v21);
  uint64_t v10 = v21;
  if (v21)
  {
    uint64_t v11 = *((void *)v21 + 3);
    if (v11
      && (uint64_t v12 = *(void *)(v11 + 8)) != 0
      && (uint64_t v13 = *(void *)(v12 + 24)) != 0
      && (uint64_t v14 = *(void *)(v13 + 8)) != 0
      && (uint64_t v15 = *(void **)(*(void *)(v14 + 48) + 16),
          ((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) == 0))
    {
      unint64_t v16 = *(CFTypeRef **)(v15[2] + 8);
      if (v16)
      {
        CFRetain(*(v16 - 1));
        v16 -= 2;
      }
    }
    else
    {
      unint64_t v16 = 0;
    }
    CFRelease(*((CFTypeRef *)v10 + 1));
  }
  else
  {
    unint64_t v16 = 0;
  }
  int v17 = *(unsigned __int8 *)(v7 + 8);
  BOOL v18 = *(unsigned char *)(v7 + 8) == 0;
  if (JSStringIsEqualToUTF8CString(a3, "action"))
  {
    if (!v17)
    {
      JSValueRef v21 = "action";
      uint64_t v22 = 7;
      isPropertyAllowed  = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
LABEL_50:
      BOOL v18 = isPropertyAllowed;
      goto LABEL_51;
    }
  }
  else if (JSStringIsEqualToUTF8CString(a3, "alarms"))
  {
    if (!v17)
    {
      JSValueRef v21 = "alarms";
      uint64_t v22 = 7;
      isPropertyAllowed  = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
      goto LABEL_50;
    }
  }
  else if (JSStringIsEqualToUTF8CString(a3, "browserAction"))
  {
    if (!v17)
    {
      JSValueRef v21 = "browserAction";
      uint64_t v22 = 14;
      isPropertyAllowed  = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
      goto LABEL_50;
    }
  }
  else if (JSStringIsEqualToUTF8CString(a3, "cookies"))
  {
    if (!v17)
    {
      JSValueRef v21 = "cookies";
      uint64_t v22 = 8;
      isPropertyAllowed  = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
      goto LABEL_50;
    }
  }
  else if (JSStringIsEqualToUTF8CString(a3, "commands"))
  {
    if (!v17)
    {
      JSValueRef v21 = "commands";
      uint64_t v22 = 9;
      isPropertyAllowed  = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
      goto LABEL_50;
    }
  }
  else if (JSStringIsEqualToUTF8CString(a3, "contextMenus"))
  {
    if (!v17)
    {
      JSValueRef v21 = "contextMenus";
      uint64_t v22 = 13;
      isPropertyAllowed  = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
      goto LABEL_50;
    }
  }
  else if (JSStringIsEqualToUTF8CString(a3, "declarativeNetRequest"))
  {
    if (!v17)
    {
      JSValueRef v21 = "declarativeNetRequest";
      uint64_t v22 = 22;
      isPropertyAllowed  = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
      goto LABEL_50;
    }
  }
  else if (JSStringIsEqualToUTF8CString(a3, "menus"))
  {
    if (!v17)
    {
      JSValueRef v21 = "menus";
      uint64_t v22 = 6;
      isPropertyAllowed  = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
      goto LABEL_50;
    }
  }
  else if (JSStringIsEqualToUTF8CString(a3, "notifications"))
  {
    if (!v17)
    {
      JSValueRef v21 = "notifications";
      uint64_t v22 = 14;
      isPropertyAllowed  = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
      goto LABEL_50;
    }
  }
  else if (JSStringIsEqualToUTF8CString(a3, "pageAction"))
  {
    if (!v17)
    {
      JSValueRef v21 = "pageAction";
      uint64_t v22 = 11;
      isPropertyAllowed  = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
      goto LABEL_50;
    }
  }
  else
  {
    if (JSStringIsEqualToUTF8CString(a3, "permissions")) {
      goto LABEL_51;
    }
    if (JSStringIsEqualToUTF8CString(a3, "scripting"))
    {
      if (!v17)
      {
        JSValueRef v21 = "scripting";
        uint64_t v22 = 10;
        isPropertyAllowed  = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
        goto LABEL_50;
      }
    }
    else
    {
      if (JSStringIsEqualToUTF8CString(a3, "storage"))
      {
        JSValueRef v21 = "storage";
        uint64_t v22 = 8;
        isPropertyAllowed  = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
        goto LABEL_50;
      }
      if (JSStringIsEqualToUTF8CString(a3, "tabs") || JSStringIsEqualToUTF8CString(a3, "windows")) {
        goto LABEL_51;
      }
      if (JSStringIsEqualToUTF8CString(a3, "webNavigation"))
      {
        if (!v17)
        {
          JSValueRef v21 = "webNavigation";
          uint64_t v22 = 14;
          isPropertyAllowed  = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
          goto LABEL_50;
        }
      }
      else if (JSStringIsEqualToUTF8CString(a3, "webRequest"))
      {
        if (!v17)
        {
          JSValueRef v21 = "webRequest";
          uint64_t v22 = 11;
          isPropertyAllowed  = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
          goto LABEL_50;
        }
      }
      else if (JSStringIsEqualToUTF8CString(a3, "test"))
      {
        JSValueRef v21 = "test";
        uint64_t v22 = 5;
        isPropertyAllowed  = WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
        goto LABEL_50;
      }
    }
  }
  BOOL v18 = 0;
LABEL_51:
  if (v16) {
    CFRelease(v16[1]);
  }
  if (*(_DWORD *)(v7 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v7 + 40) + 8))(v7 + 40);
  }
  else {
    --*(_DWORD *)(v7 + 48);
  }
  return v18;
}

void sub_19897E238(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  if (*(_DWORD *)(v1 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 40) + 8))(v1 + 40);
  }
  else {
    --*(_DWORD *)(v1 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPINamespace::getProperty(WebKit::JSWebExtensionAPINamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = WebKit::toWebExtensionAPINamespace(this, a2, a3);
  if (v8)
  {
    uint64_t v9 = v8;
    ++*(_DWORD *)(v8 + 48);
    GlobalContext  = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v11, &buf);
    uint64_t v12 = buf;
    if ((void)buf)
    {
      uint64_t v13 = *(void *)(buf + 24);
      if (v13
        && (uint64_t v14 = *(void *)(v13 + 8)) != 0
        && (uint64_t v15 = *(void *)(v14 + 24)) != 0
        && (uint64_t v16 = *(void *)(v15 + 8)) != 0
        && (int v17 = *(void **)(*(void *)(v16 + 48) + 16),
            ((*(uint64_t (**)(void *))(*v17 + 1368))(v17) & 1) == 0))
      {
        BOOL v18 = *(CFTypeRef **)(v17[2] + 8);
        if (v18)
        {
          CFRetain(*(v18 - 1));
          v18 -= 2;
        }
      }
      else
      {
        BOOL v18 = 0;
      }
      CFRelease(*(CFTypeRef *)(v12 + 8));
    }
    else
    {
      BOOL v18 = 0;
    }
    int v19 = *(unsigned __int8 *)(v9 + 8);
    if (*(unsigned char *)(v9 + 8)) {
      goto LABEL_13;
    }
    if (JSStringIsEqualToUTF8CString(a3, "action"))
    {
      *(void *)&buf  = "action";
      *((void *)&buf + 1)  = 7;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18))
      {
        uint64_t v31 = WebKit::toWebExtensionAPINamespace(this, a2, v30);
        uint64_t v22 = v31;
        if (!v31) {
          goto LABEL_104;
        }
        ++*(_DWORD *)(v31 + 48);
        id v32 = (id)qword_1EB357DF8;
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_91;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::String::utf8();
        if (v125) {
          uint64_t v92 = (char *)v125 + 16;
        }
        else {
          uint64_t v92 = 0;
        }
        LODWORD(buf)  = 136446210;
        *(void *)((char *)&buf + 4)  = v92;
        _os_log_debug_impl(&dword_1985F2000, v32, OS_LOG_TYPE_DEBUG, "Called getter browser.action in %{public}s world", (uint8_t *)&buf, 0xCu);
        if (v125)
        {
          if (*(_DWORD *)v125 == 1) {
            WTF::fastFree(v125, v93);
          }
          else {
            --*(_DWORD *)v125;
          }
        }
        uint64_t v94 = v126;
        if (!v126) {
          goto LABEL_91;
        }
        if (*(_DWORD *)v126 != 2)
        {
          *(_DWORD *)v126 -= 2;
LABEL_91:

          uint64_t v79 = WebKit::WebExtensionAPINamespace::action((WebKit::WebExtensionAPINamespace *)v22);
          JSValueRef v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v79 + 40));
LABEL_96:
          Undefined  = v25;
          if (*(_DWORD *)(v22 + 48) == 1) {
            (*(void (**)(uint64_t))(*(void *)(v22 + 40) + 8))(v22 + 40);
          }
          else {
            --*(_DWORD *)(v22 + 48);
          }
          goto LABEL_105;
        }
        goto LABEL_318;
      }
    }
    if (JSStringIsEqualToUTF8CString(a3, "alarms"))
    {
      *(void *)&buf  = "alarms";
      *((void *)&buf + 1)  = 7;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18))
      {
        uint64_t v34 = WebKit::toWebExtensionAPINamespace(this, a2, v33);
        uint64_t v22 = v34;
        if (v34)
        {
          ++*(_DWORD *)(v34 + 48);
          uint64_t v35 = (id)qword_1EB357DF8;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::String::utf8();
            if (v125) {
              uint64_t v99 = (char *)v125 + 16;
            }
            else {
              uint64_t v99 = 0;
            }
            LODWORD(buf)  = 136446210;
            *(void *)((char *)&buf + 4)  = v99;
            _os_log_debug_impl(&dword_1985F2000, v35, OS_LOG_TYPE_DEBUG, "Called getter browser.alarms in %{public}s world", (uint8_t *)&buf, 0xCu);
            if (v125)
            {
              if (*(_DWORD *)v125 == 1) {
                WTF::fastFree(v125, v100);
              }
              else {
                --*(_DWORD *)v125;
              }
            }
            if (v126)
            {
              if (*(_DWORD *)v126 == 2) {
                WTF::StringImpl::destroy(v126, (WTF::StringImpl *)v100);
              }
              else {
                *(_DWORD *)v126 -= 2;
              }
            }
          }

          uint64_t v36 = WebKit::WebExtensionAPINamespace::alarms((WebKit::WebExtensionAPINamespace *)v22);
          JSValueRef v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v36 + 40));
          goto LABEL_96;
        }
        goto LABEL_104;
      }
    }
    if (JSStringIsEqualToUTF8CString(a3, "browserAction"))
    {
      *(void *)&buf  = "browserAction";
      *((void *)&buf + 1)  = 14;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18))
      {
        uint64_t v38 = WebKit::toWebExtensionAPINamespace(this, a2, v37);
        uint64_t v22 = v38;
        if (!v38) {
          goto LABEL_104;
        }
        ++*(_DWORD *)(v38 + 48);
        id v32 = (id)qword_1EB357DF8;
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_91;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::String::utf8();
        if (v125) {
          uint64_t v101 = (char *)v125 + 16;
        }
        else {
          uint64_t v101 = 0;
        }
        LODWORD(buf)  = 136446210;
        *(void *)((char *)&buf + 4)  = v101;
        _os_log_debug_impl(&dword_1985F2000, v32, OS_LOG_TYPE_DEBUG, "Called getter browser.browserAction in %{public}s world", (uint8_t *)&buf, 0xCu);
        if (v125)
        {
          if (*(_DWORD *)v125 == 1) {
            WTF::fastFree(v125, v93);
          }
          else {
            --*(_DWORD *)v125;
          }
        }
        uint64_t v94 = v126;
        if (!v126) {
          goto LABEL_91;
        }
        if (*(_DWORD *)v126 != 2)
        {
          *(_DWORD *)v126 -= 2;
          goto LABEL_91;
        }
LABEL_318:
        WTF::StringImpl::destroy(v94, (WTF::StringImpl *)v93);
        goto LABEL_91;
      }
    }
    if (JSStringIsEqualToUTF8CString(a3, "cookies"))
    {
      *(void *)&buf  = "cookies";
      *((void *)&buf + 1)  = 8;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18))
      {
        uint64_t v44 = WebKit::toWebExtensionAPINamespace(this, a2, v43);
        uint64_t v22 = v44;
        if (v44)
        {
          ++*(_DWORD *)(v44 + 48);
          uint64_t v45 = (id)qword_1EB357DF8;
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::String::utf8();
            if (v125) {
              uint64_t v104 = (char *)v125 + 16;
            }
            else {
              uint64_t v104 = 0;
            }
            LODWORD(buf)  = 136446210;
            *(void *)((char *)&buf + 4)  = v104;
            _os_log_debug_impl(&dword_1985F2000, v45, OS_LOG_TYPE_DEBUG, "Called getter browser.cookies in %{public}s world", (uint8_t *)&buf, 0xCu);
            if (v125)
            {
              if (*(_DWORD *)v125 == 1) {
                WTF::fastFree(v125, v105);
              }
              else {
                --*(_DWORD *)v125;
              }
            }
            if (v126)
            {
              if (*(_DWORD *)v126 == 2) {
                WTF::StringImpl::destroy(v126, (WTF::StringImpl *)v105);
              }
              else {
                *(_DWORD *)v126 -= 2;
              }
            }
          }

          uint64_t v46 = WebKit::WebExtensionAPINamespace::cookies((WebKit::WebExtensionAPINamespace *)v22);
          JSValueRef v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v46 + 40));
          goto LABEL_96;
        }
        goto LABEL_104;
      }
    }
    if (JSStringIsEqualToUTF8CString(a3, "commands"))
    {
      *(void *)&buf  = "commands";
      *((void *)&buf + 1)  = 9;
      if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18))
      {
        uint64_t v48 = WebKit::toWebExtensionAPINamespace(this, a2, v47);
        uint64_t v22 = v48;
        if (v48)
        {
          ++*(_DWORD *)(v48 + 48);
          int v49 = (id)qword_1EB357DF8;
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::String::utf8();
            if (v125) {
              uint64_t v106 = (char *)v125 + 16;
            }
            else {
              uint64_t v106 = 0;
            }
            LODWORD(buf)  = 136446210;
            *(void *)((char *)&buf + 4)  = v106;
            _os_log_debug_impl(&dword_1985F2000, v49, OS_LOG_TYPE_DEBUG, "Called getter browser.commands in %{public}s world", (uint8_t *)&buf, 0xCu);
            if (v125)
            {
              if (*(_DWORD *)v125 == 1) {
                WTF::fastFree(v125, v107);
              }
              else {
                --*(_DWORD *)v125;
              }
            }
            if (v126)
            {
              if (*(_DWORD *)v126 == 2) {
                WTF::StringImpl::destroy(v126, (WTF::StringImpl *)v107);
              }
              else {
                *(_DWORD *)v126 -= 2;
              }
            }
          }

          uint64_t v50 = WebKit::WebExtensionAPINamespace::commands((WebKit::WebExtensionAPINamespace *)v22);
          JSValueRef v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v50 + 40));
          goto LABEL_96;
        }
        goto LABEL_104;
      }
    }
    if (JSStringIsEqualToUTF8CString(a3, "contextMenus")
      && (*(void *)&buf  = "contextMenus",
          *((void *)&buf + 1)  = 13,
          WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18)))
    {
      uint64_t v56 = WebKit::toWebExtensionAPINamespace(this, a2, v55);
      uint64_t v22 = v56;
      if (!v56) {
        goto LABEL_104;
      }
      ++*(_DWORD *)(v56 + 48);
      uint64_t v57 = (id)qword_1EB357DF8;
      if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_61;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v125) {
        uint64_t v108 = (char *)v125 + 16;
      }
      else {
        uint64_t v108 = 0;
      }
      LODWORD(buf)  = 136446210;
      *(void *)((char *)&buf + 4)  = v108;
      _os_log_debug_impl(&dword_1985F2000, v57, OS_LOG_TYPE_DEBUG, "Called getter browser.contextMenus in %{public}s world", (uint8_t *)&buf, 0xCu);
      if (v125)
      {
        if (*(_DWORD *)v125 == 1) {
          WTF::fastFree(v125, v109);
        }
        else {
          --*(_DWORD *)v125;
        }
      }
      uint64_t v110 = v126;
      if (!v126) {
        goto LABEL_61;
      }
      if (*(_DWORD *)v126 != 2)
      {
        *(_DWORD *)v126 -= 2;
        goto LABEL_61;
      }
    }
    else
    {
      if (JSStringIsEqualToUTF8CString(a3, "declarativeNetRequest"))
      {
        *(void *)&buf  = "declarativeNetRequest";
        *((void *)&buf + 1)  = 22;
        if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18))
        {
          uint64_t v60 = WebKit::toWebExtensionAPINamespace(this, a2, v59);
          uint64_t v22 = v60;
          if (v60)
          {
            ++*(_DWORD *)(v60 + 48);
            uint64_t v61 = (id)qword_1EB357DF8;
            if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              WTF::String::utf8();
              if (v125) {
                uint64_t v111 = (char *)v125 + 16;
              }
              else {
                uint64_t v111 = 0;
              }
              LODWORD(buf)  = 136446210;
              *(void *)((char *)&buf + 4)  = v111;
              _os_log_debug_impl(&dword_1985F2000, v61, OS_LOG_TYPE_DEBUG, "Called getter browser.declarativeNetRequest in %{public}s world", (uint8_t *)&buf, 0xCu);
              if (v125)
              {
                if (*(_DWORD *)v125 == 1) {
                  WTF::fastFree(v125, v112);
                }
                else {
                  --*(_DWORD *)v125;
                }
              }
              if (v126)
              {
                if (*(_DWORD *)v126 == 2) {
                  WTF::StringImpl::destroy(v126, (WTF::StringImpl *)v112);
                }
                else {
                  *(_DWORD *)v126 -= 2;
                }
              }
            }

            uint64_t v62 = WebKit::WebExtensionAPINamespace::declarativeNetRequest((WebKit::WebExtensionAPINamespace *)v22);
            JSValueRef v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v62 + 40));
            goto LABEL_96;
          }
          goto LABEL_104;
        }
      }
      if (!JSStringIsEqualToUTF8CString(a3, "menus")
        || (*(void *)&buf  = "menus",
            *((void *)&buf + 1)  = 6,
            !WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18)))
      {
        if (JSStringIsEqualToUTF8CString(a3, "notifications"))
        {
          *(void *)&buf  = "notifications";
          *((void *)&buf + 1)  = 14;
          if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18))
          {
            uint64_t v70 = WebKit::toWebExtensionAPINamespace(this, a2, v69);
            uint64_t v22 = v70;
            if (v70)
            {
              ++*(_DWORD *)(v70 + 48);
              uint64_t v71 = (id)qword_1EB357DF8;
              if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                WTF::String::utf8();
                if (v125) {
                  uint64_t v118 = (char *)v125 + 16;
                }
                else {
                  uint64_t v118 = 0;
                }
                LODWORD(buf)  = 136446210;
                *(void *)((char *)&buf + 4)  = v118;
                _os_log_debug_impl(&dword_1985F2000, v71, OS_LOG_TYPE_DEBUG, "Called getter browser.notifications in %{public}s world", (uint8_t *)&buf, 0xCu);
                if (v125)
                {
                  if (*(_DWORD *)v125 == 1) {
                    WTF::fastFree(v125, v119);
                  }
                  else {
                    --*(_DWORD *)v125;
                  }
                }
                if (v126)
                {
                  if (*(_DWORD *)v126 == 2) {
                    WTF::StringImpl::destroy(v126, (WTF::StringImpl *)v119);
                  }
                  else {
                    *(_DWORD *)v126 -= 2;
                  }
                }
              }

              uint64_t v72 = WebKit::WebExtensionAPINamespace::notifications((WebKit::WebExtensionAPINamespace *)v22);
              JSValueRef v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v72 + 40));
              goto LABEL_96;
            }
            goto LABEL_104;
          }
        }
        if (!JSStringIsEqualToUTF8CString(a3, "pageAction")
          || (*(void *)&buf  = "pageAction",
              *((void *)&buf + 1)  = 11,
              !WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18)))
        {
          if (JSStringIsEqualToUTF8CString(a3, "permissions"))
          {
            uint64_t v81 = WebKit::toWebExtensionAPINamespace(this, a2, v80);
            uint64_t v22 = v81;
            if (v81)
            {
              ++*(_DWORD *)(v81 + 48);
              uint64_t v82 = (id)qword_1EB357DF8;
              if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                WTF::String::utf8();
                if (v125) {
                  uint64_t v116 = (char *)v125 + 16;
                }
                else {
                  uint64_t v116 = 0;
                }
                LODWORD(buf)  = 136446210;
                *(void *)((char *)&buf + 4)  = v116;
                _os_log_debug_impl(&dword_1985F2000, v82, OS_LOG_TYPE_DEBUG, "Called getter browser.permissions in %{public}s world", (uint8_t *)&buf, 0xCu);
                if (v125)
                {
                  if (*(_DWORD *)v125 == 1) {
                    WTF::fastFree(v125, v117);
                  }
                  else {
                    --*(_DWORD *)v125;
                  }
                }
                if (v126)
                {
                  if (*(_DWORD *)v126 == 2) {
                    WTF::StringImpl::destroy(v126, (WTF::StringImpl *)v117);
                  }
                  else {
                    *(_DWORD *)v126 -= 2;
                  }
                }
              }

              uint64_t v83 = WebKit::WebExtensionAPINamespace::permissions((WebKit::WebExtensionAPINamespace *)v22);
              JSValueRef v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v83 + 40));
              goto LABEL_96;
            }
            goto LABEL_104;
          }
          if (JSStringIsEqualToUTF8CString(a3, "scripting"))
          {
            *(void *)&buf  = "scripting";
            *((void *)&buf + 1)  = 10;
            if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18))
            {
              uint64_t v86 = WebKit::toWebExtensionAPINamespace(this, a2, v85);
              uint64_t v22 = v86;
              if (v86)
              {
                ++*(_DWORD *)(v86 + 48);
                uint64_t v87 = (id)qword_1EB357DF8;
                if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  WTF::String::utf8();
                  if (v125) {
                    uint64_t v123 = (char *)v125 + 16;
                  }
                  else {
                    uint64_t v123 = 0;
                  }
                  LODWORD(buf)  = 136446210;
                  *(void *)((char *)&buf + 4)  = v123;
                  _os_log_debug_impl(&dword_1985F2000, v87, OS_LOG_TYPE_DEBUG, "Called getter browser.scripting in %{public}s world", (uint8_t *)&buf, 0xCu);
                  if (v125)
                  {
                    if (*(_DWORD *)v125 == 1) {
                      WTF::fastFree(v125, v124);
                    }
                    else {
                      --*(_DWORD *)v125;
                    }
                  }
                  if (v126)
                  {
                    if (*(_DWORD *)v126 == 2) {
                      WTF::StringImpl::destroy(v126, (WTF::StringImpl *)v124);
                    }
                    else {
                      *(_DWORD *)v126 -= 2;
                    }
                  }
                }

                uint64_t v88 = WebKit::WebExtensionAPINamespace::scripting((WebKit::WebExtensionAPINamespace *)v22);
                JSValueRef v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v88 + 40));
                goto LABEL_96;
              }
              goto LABEL_104;
            }
          }
LABEL_13:
          if (JSStringIsEqualToUTF8CString(a3, "storage")
            && (*(void *)&buf  = "storage",
                *((void *)&buf + 1)  = 8,
                WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18)))
          {
            uint64_t v21 = WebKit::toWebExtensionAPINamespace(this, a2, v20);
            uint64_t v22 = v21;
            if (v21)
            {
              ++*(_DWORD *)(v21 + 48);
              BOOL v23 = (id)qword_1EB357DF8;
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                WTF::String::utf8();
                if (v125) {
                  uint64_t v90 = (char *)v125 + 16;
                }
                else {
                  uint64_t v90 = 0;
                }
                LODWORD(buf)  = 136446210;
                *(void *)((char *)&buf + 4)  = v90;
                _os_log_debug_impl(&dword_1985F2000, v23, OS_LOG_TYPE_DEBUG, "Called getter browser.storage in %{public}s world", (uint8_t *)&buf, 0xCu);
                if (v125)
                {
                  if (*(_DWORD *)v125 == 1) {
                    WTF::fastFree(v125, v91);
                  }
                  else {
                    --*(_DWORD *)v125;
                  }
                }
                if (v126)
                {
                  if (*(_DWORD *)v126 == 2) {
                    WTF::StringImpl::destroy(v126, (WTF::StringImpl *)v91);
                  }
                  else {
                    *(_DWORD *)v126 -= 2;
                  }
                }
              }

              uint64_t v24 = WebKit::WebExtensionAPINamespace::storage((WebKit::WebExtensionAPINamespace *)v22);
              JSValueRef v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v24 + 40));
              goto LABEL_96;
            }
          }
          else
          {
            if (!v19)
            {
              if (JSStringIsEqualToUTF8CString(a3, "tabs"))
              {
                uint64_t v40 = WebKit::toWebExtensionAPINamespace(this, a2, v39);
                uint64_t v22 = v40;
                if (v40)
                {
                  ++*(_DWORD *)(v40 + 48);
                  __int16 v41 = (id)qword_1EB357DF8;
                  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    WTF::String::utf8();
                    if (v125) {
                      uint64_t v95 = (char *)v125 + 16;
                    }
                    else {
                      uint64_t v95 = 0;
                    }
                    LODWORD(buf)  = 136446210;
                    *(void *)((char *)&buf + 4)  = v95;
                    _os_log_debug_impl(&dword_1985F2000, v41, OS_LOG_TYPE_DEBUG, "Called getter browser.tabs in %{public}s world", (uint8_t *)&buf, 0xCu);
                    if (v125)
                    {
                      if (*(_DWORD *)v125 == 1) {
                        WTF::fastFree(v125, v96);
                      }
                      else {
                        --*(_DWORD *)v125;
                      }
                    }
                    if (v126)
                    {
                      if (*(_DWORD *)v126 == 2) {
                        WTF::StringImpl::destroy(v126, (WTF::StringImpl *)v96);
                      }
                      else {
                        *(_DWORD *)v126 -= 2;
                      }
                    }
                  }

                  uint64_t v42 = WebKit::WebExtensionAPINamespace::tabs((WebKit::WebExtensionAPINamespace *)v22);
                  JSValueRef v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v42 + 40));
                  goto LABEL_96;
                }
                goto LABEL_104;
              }
              if (JSStringIsEqualToUTF8CString(a3, "windows"))
              {
                uint64_t v52 = WebKit::toWebExtensionAPINamespace(this, a2, v51);
                uint64_t v22 = v52;
                if (v52)
                {
                  ++*(_DWORD *)(v52 + 48);
                  __int16 v53 = (id)qword_1EB357DF8;
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    WTF::String::utf8();
                    if (v125) {
                      uint64_t v102 = (char *)v125 + 16;
                    }
                    else {
                      uint64_t v102 = 0;
                    }
                    LODWORD(buf)  = 136446210;
                    *(void *)((char *)&buf + 4)  = v102;
                    _os_log_debug_impl(&dword_1985F2000, v53, OS_LOG_TYPE_DEBUG, "Called getter browser.windows in %{public}s world", (uint8_t *)&buf, 0xCu);
                    if (v125)
                    {
                      if (*(_DWORD *)v125 == 1) {
                        WTF::fastFree(v125, v103);
                      }
                      else {
                        --*(_DWORD *)v125;
                      }
                    }
                    if (v126)
                    {
                      if (*(_DWORD *)v126 == 2) {
                        WTF::StringImpl::destroy(v126, (WTF::StringImpl *)v103);
                      }
                      else {
                        *(_DWORD *)v126 -= 2;
                      }
                    }
                  }

                  uint64_t v54 = WebKit::WebExtensionAPINamespace::windows((WebKit::WebExtensionAPINamespace *)v22);
                  JSValueRef v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v54 + 40));
                  goto LABEL_96;
                }
                goto LABEL_104;
              }
              if (JSStringIsEqualToUTF8CString(a3, "webNavigation"))
              {
                *(void *)&buf  = "webNavigation";
                *((void *)&buf + 1)  = 14;
                if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18))
                {
                  uint64_t v66 = WebKit::toWebExtensionAPINamespace(this, a2, v65);
                  uint64_t v22 = v66;
                  if (v66)
                  {
                    ++*(_DWORD *)(v66 + 48);
                    uint64_t v67 = (id)qword_1EB357DF8;
                    if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
                    {
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      WTF::String::utf8();
                      if (v125) {
                        uint64_t v114 = (char *)v125 + 16;
                      }
                      else {
                        uint64_t v114 = 0;
                      }
                      LODWORD(buf)  = 136446210;
                      *(void *)((char *)&buf + 4)  = v114;
                      _os_log_debug_impl(&dword_1985F2000, v67, OS_LOG_TYPE_DEBUG, "Called getter browser.webNavigation in %{public}s world", (uint8_t *)&buf, 0xCu);
                      if (v125)
                      {
                        if (*(_DWORD *)v125 == 1) {
                          WTF::fastFree(v125, v115);
                        }
                        else {
                          --*(_DWORD *)v125;
                        }
                      }
                      if (v126)
                      {
                        if (*(_DWORD *)v126 == 2) {
                          WTF::StringImpl::destroy(v126, (WTF::StringImpl *)v115);
                        }
                        else {
                          *(_DWORD *)v126 -= 2;
                        }
                      }
                    }

                    uint64_t v68 = WebKit::WebExtensionAPINamespace::webNavigation((WebKit::WebExtensionAPINamespace *)v22);
                    JSValueRef v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v68 + 40));
                    goto LABEL_96;
                  }
                  goto LABEL_104;
                }
              }
              if (JSStringIsEqualToUTF8CString(a3, "webRequest"))
              {
                *(void *)&buf  = "webRequest";
                *((void *)&buf + 1)  = 11;
                if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18))
                {
                  uint64_t v74 = WebKit::toWebExtensionAPINamespace(this, a2, v73);
                  uint64_t v22 = v74;
                  if (v74)
                  {
                    ++*(_DWORD *)(v74 + 48);
                    __int16 v75 = (id)qword_1EB357DF8;
                    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
                    {
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      WTF::String::utf8();
                      if (v125) {
                        uint64_t v120 = (char *)v125 + 16;
                      }
                      else {
                        uint64_t v120 = 0;
                      }
                      LODWORD(buf)  = 136446210;
                      *(void *)((char *)&buf + 4)  = v120;
                      _os_log_debug_impl(&dword_1985F2000, v75, OS_LOG_TYPE_DEBUG, "Called getter browser.webRequest in %{public}s world", (uint8_t *)&buf, 0xCu);
                      if (v125)
                      {
                        if (*(_DWORD *)v125 == 1) {
                          WTF::fastFree(v125, v121);
                        }
                        else {
                          --*(_DWORD *)v125;
                        }
                      }
                      if (v126)
                      {
                        if (*(_DWORD *)v126 == 2) {
                          WTF::StringImpl::destroy(v126, (WTF::StringImpl *)v121);
                        }
                        else {
                          *(_DWORD *)v126 -= 2;
                        }
                      }
                    }

                    uint64_t v76 = WebKit::WebExtensionAPINamespace::webRequest((WebKit::WebExtensionAPINamespace *)v22);
                    JSValueRef v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v76 + 40));
                    goto LABEL_96;
                  }
                  goto LABEL_104;
                }
              }
            }
            if (JSStringIsEqualToUTF8CString(a3, "test"))
            {
              *(void *)&buf  = "test";
              *((void *)&buf + 1)  = 5;
              if (WebKit::WebExtensionAPINamespace::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18))
              {
                uint64_t v27 = WebKit::toWebExtensionAPINamespace(this, a2, v26);
                uint64_t v22 = v27;
                if (v27)
                {
                  ++*(_DWORD *)(v27 + 48);
                  uint64_t v28 = (id)qword_1EB357DF8;
                  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    WTF::String::utf8();
                    if (v125) {
                      uint64_t v97 = (char *)v125 + 16;
                    }
                    else {
                      uint64_t v97 = 0;
                    }
                    LODWORD(buf)  = 136446210;
                    *(void *)((char *)&buf + 4)  = v97;
                    _os_log_debug_impl(&dword_1985F2000, v28, OS_LOG_TYPE_DEBUG, "Called getter browser.test in %{public}s world", (uint8_t *)&buf, 0xCu);
                    if (v125)
                    {
                      if (*(_DWORD *)v125 == 1) {
                        WTF::fastFree(v125, v98);
                      }
                      else {
                        --*(_DWORD *)v125;
                      }
                    }
                    if (v126)
                    {
                      if (*(_DWORD *)v126 == 2) {
                        WTF::StringImpl::destroy(v126, (WTF::StringImpl *)v98);
                      }
                      else {
                        *(_DWORD *)v126 -= 2;
                      }
                    }
                  }

                  uint64_t v29 = WebKit::WebExtensionAPINamespace::test((WebKit::WebExtensionAPINamespace *)v22);
                  JSValueRef v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v29 + 40));
                  goto LABEL_96;
                }
              }
            }
          }
LABEL_104:
          Undefined  = JSValueMakeUndefined(this);
LABEL_105:
          if (v18) {
            CFRelease(v18[1]);
          }
          if (*(_DWORD *)(v9 + 48) == 1) {
            (*(void (**)(uint64_t))(*(void *)(v9 + 40) + 8))(v9 + 40);
          }
          else {
            --*(_DWORD *)(v9 + 48);
          }
          return Undefined;
        }
        uint64_t v78 = WebKit::toWebExtensionAPINamespace(this, a2, v77);
        uint64_t v22 = v78;
        if (!v78) {
          goto LABEL_104;
        }
        ++*(_DWORD *)(v78 + 48);
        id v32 = (id)qword_1EB357DF8;
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_91;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::String::utf8();
        if (v125) {
          uint64_t v122 = (char *)v125 + 16;
        }
        else {
          uint64_t v122 = 0;
        }
        LODWORD(buf)  = 136446210;
        *(void *)((char *)&buf + 4)  = v122;
        _os_log_debug_impl(&dword_1985F2000, v32, OS_LOG_TYPE_DEBUG, "Called getter browser.pageAction in %{public}s world", (uint8_t *)&buf, 0xCu);
        if (v125)
        {
          if (*(_DWORD *)v125 == 1) {
            WTF::fastFree(v125, v93);
          }
          else {
            --*(_DWORD *)v125;
          }
        }
        uint64_t v94 = v126;
        if (!v126) {
          goto LABEL_91;
        }
        if (*(_DWORD *)v126 != 2)
        {
          *(_DWORD *)v126 -= 2;
          goto LABEL_91;
        }
        goto LABEL_318;
      }
      uint64_t v64 = WebKit::toWebExtensionAPINamespace(this, a2, v63);
      uint64_t v22 = v64;
      if (!v64) {
        goto LABEL_104;
      }
      ++*(_DWORD *)(v64 + 48);
      uint64_t v57 = (id)qword_1EB357DF8;
      if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_61;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v125) {
        uint64_t v113 = (char *)v125 + 16;
      }
      else {
        uint64_t v113 = 0;
      }
      LODWORD(buf)  = 136446210;
      *(void *)((char *)&buf + 4)  = v113;
      _os_log_debug_impl(&dword_1985F2000, v57, OS_LOG_TYPE_DEBUG, "Called getter browser.menus in %{public}s world", (uint8_t *)&buf, 0xCu);
      if (v125)
      {
        if (*(_DWORD *)v125 == 1) {
          WTF::fastFree(v125, v109);
        }
        else {
          --*(_DWORD *)v125;
        }
      }
      uint64_t v110 = v126;
      if (!v126)
      {
LABEL_61:

        uint64_t v58 = WebKit::WebExtensionAPINamespace::menus((WebKit::WebExtensionAPINamespace *)v22);
        JSValueRef v25 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v58 + 40));
        goto LABEL_96;
      }
      if (*(_DWORD *)v126 != 2)
      {
        *(_DWORD *)v126 -= 2;
        goto LABEL_61;
      }
    }
    WTF::StringImpl::destroy(v110, (WTF::StringImpl *)v109);
    goto LABEL_61;
  }

  return JSValueMakeUndefined(this);
}

void sub_198980340(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPINamespace::extension(WebKit::JSWebExtensionAPINamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPINamespace(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*((_DWORD *)v6 + 12);
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      int v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter browser.extension in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPINamespace::extension(v7);
    JSValueRef v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
    if (*((_DWORD *)v7 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
    }
    else {
      --*((_DWORD *)v7 + 12);
    }
    return v10;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_198980BD8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPINamespace::i18n(WebKit::JSWebExtensionAPINamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPINamespace(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*((_DWORD *)v6 + 12);
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      int v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter browser.i18n in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPINamespace::i18n(v7);
    JSValueRef v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
    if (*((_DWORD *)v7 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
    }
    else {
      --*((_DWORD *)v7 + 12);
    }
    return v10;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_198980EC4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPINamespace::runtime(WebKit::JSWebExtensionAPINamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPINamespace(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*((_DWORD *)v6 + 12);
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      int v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter browser.runtime in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPINamespace::runtime(v7);
    JSValueRef v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
    if (*((_DWORD *)v7 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
    }
    else {
      --*((_DWORD *)v7 + 12);
    }
    return v10;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_1989811B0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

WebKit::JSWebExtensionAPINotifications *WebKit::toWebExtensionAPINotifications(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPINotifications::notificationsClass(0);
      if (result)
      {
        uint64_t v6 = WebKit::JSWebExtensionAPINotifications::notificationsClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private  = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPINotifications *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPINotifications::notificationsClass(WebKit::JSWebExtensionAPINotifications *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPINotifications::notificationsClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPINotifications::notificationsClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v6.version  = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v6.parentClass  = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 48);
    *(_OWORD *)&v6.staticFunctions  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 32);
    *(_OWORD *)&v6.finalize  = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v6.getProperty  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v6.deleteProperty  = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v6.callAsFunction  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v6.hasInstance  = v5;
    v6.className  = "Notifications";
    v6.parentClass  = 0;
    v6.staticValues  = (const JSStaticValue *)&WebKit::JSWebExtensionAPINotifications::staticValues(void)::values;
    v6.staticFunctions  = 0;
    v6.initialize  = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize  = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    JSClassRef result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPINotifications::notificationsClass(void)::jsClass  = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPINotifications::onClicked(WebKit::JSWebExtensionAPINotifications *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPINotifications(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      int v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter notifications.onClicked in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPINotifications::onClicked(v7);
    Undefined  = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_19898158C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPINotifications::onButtonClicked(WebKit::JSWebExtensionAPINotifications *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPINotifications(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      int v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter notifications.onButtonClicked in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPINotifications::onButtonClicked(v7);
    Undefined  = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_198981860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIPermissions *WebKit::toWebExtensionAPIPermissions(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPIPermissions::permissionsClass(0);
      if (result)
      {
        JSClassDefinition v6 = WebKit::JSWebExtensionAPIPermissions::permissionsClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private  = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIPermissions *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIPermissions::permissionsClass(WebKit::JSWebExtensionAPIPermissions *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIPermissions::permissionsClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIPermissions::permissionsClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v6.version  = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v6.parentClass  = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 48);
    *(_OWORD *)&v6.staticFunctions  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 32);
    *(_OWORD *)&v6.finalize  = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v6.getProperty  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v6.deleteProperty  = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v6.callAsFunction  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v6.hasInstance  = v5;
    v6.className  = "Permissions";
    v6.parentClass  = 0;
    v6.staticValues  = (const JSStaticValue *)&WebKit::JSWebExtensionAPIPermissions::staticValues(void)::values;
    v6.staticFunctions  = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIPermissions::staticFunctions(void)::functions;
    v6.initialize  = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize  = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    JSClassRef result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIPermissions::permissionsClass(void)::jsClass  = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIPermissions::getAll(WebKit::JSWebExtensionAPIPermissions *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIPermissions(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_17;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      BOOL v23 = "argument";
    }
    else {
      BOOL v23 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v32;
    WTF::String::utf8();
    if (v31) {
      uint64_t v24 = (char *)v31 + 16;
    }
    else {
      uint64_t v24 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v34 = 2082;
    uint64_t v35 = v23;
    __int16 v36 = 2082;
    uint64_t v37 = v24;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function permissions.getAll() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v26 = v31;
    uint64_t v31 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1) {
        WTF::fastFree(v26, v25);
      }
      else {
        --*(_DWORD *)v26;
      }
    }
    uint64_t v27 = resolve;
    resolve  = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }

  if (a4 != (OpaqueJSValue *)1) {
    goto LABEL_11;
  }
  if (!JSValueIsObject(this, *a5) || (uint64_t v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"permissions.getAll()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v15);
      JSValueRef v21 = JSValueMakeUndefined(this);
      goto LABEL_16;
    }
  }
  uint64_t v16 = *a5;
  int v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
  uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(void *)buf)
  {
    Undefined  = 0;
  }
  else
  {
LABEL_11:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    id v32 = resolve;
    *(void *)buf  = this;
    uint64_t v31 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v32, &v31, &v28);
    uint64_t v18 = v28;
  }
  *(void *)buf  = v18;
  WebKit::WebExtensionAPIPermissions::getAll(v12, (uint64_t *)buf);
  id v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(void *)buf  = 0;
  if (v20) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  }
  if (Undefined) {
    goto LABEL_17;
  }
  JSValueRef v21 = JSValueMakeUndefined(this);
LABEL_16:
  Undefined  = v21;
LABEL_17:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198981DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIPermissions::contains(WebKit::JSWebExtensionAPIPermissions *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIPermissions(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v51;
    WTF::String::utf8();
    if (v50) {
      __int16 v39 = (char *)v50 + 16;
    }
    else {
      __int16 v39 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v53 = 2082;
    uint64_t v54 = v38;
    __int16 v55 = 2082;
    uint64_t v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function permissions.contains() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    __int16 v41 = v50;
    uint64_t v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    uint64_t v42 = resolve;
    resolve  = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    int v17 = *a5;
    if (*a5)
    {
      uint64_t v18 = (void *)MEMORY[0x1E4F30938];
      int v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      JSValueRef v21 = (void *)v20;
    }
    else
    {
      JSValueRef v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      uint64_t v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"permissions.contains()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    BOOL v23 = (void *)MEMORY[0x1E4F30938];
    uint64_t v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    uint64_t v26 = (void *)v25;
  }
  else
  {
    uint64_t v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    uint64_t v44 = @"an object is expected";
    uint64_t v45 = @"permissions";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (uint64_t v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
    id v32 = a5[1];
    uint64_t v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"permissions.contains()", &cfstr_Permissions.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v51 = resolve;
    *(void *)buf  = this;
    uint64_t v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    uint64_t v15 = v47;
LABEL_28:
    *(void *)buf  = v15;
    id v46 = 0;
    WebKit::WebExtensionAPIPermissions::contains(v12, v29, (uint64_t *)buf, &v46);
    uint64_t v35 = (NSString *)v46;
    __int16 v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"permissions.contains()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v44 = @"a function is expected";
  uint64_t v45 = @"callback";
LABEL_56:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"permissions.contains()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  Undefined  = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198982440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIPermissions::request(WebKit::JSWebExtensionAPIPermissions *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIPermissions(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v51;
    WTF::String::utf8();
    if (v50) {
      __int16 v39 = (char *)v50 + 16;
    }
    else {
      __int16 v39 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v53 = 2082;
    uint64_t v54 = v38;
    __int16 v55 = 2082;
    uint64_t v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function permissions.request() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    __int16 v41 = v50;
    uint64_t v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    uint64_t v42 = resolve;
    resolve  = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    int v17 = *a5;
    if (*a5)
    {
      uint64_t v18 = (void *)MEMORY[0x1E4F30938];
      int v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      JSValueRef v21 = (void *)v20;
    }
    else
    {
      JSValueRef v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      uint64_t v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"permissions.request()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    BOOL v23 = (void *)MEMORY[0x1E4F30938];
    uint64_t v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    uint64_t v26 = (void *)v25;
  }
  else
  {
    uint64_t v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    uint64_t v44 = @"an object is expected";
    uint64_t v45 = @"permissions";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (uint64_t v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
    id v32 = a5[1];
    uint64_t v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"permissions.request()", &cfstr_Permissions.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v51 = resolve;
    *(void *)buf  = this;
    uint64_t v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    uint64_t v15 = v47;
LABEL_28:
    *(void *)buf  = v15;
    id v46 = 0;
    WebKit::WebExtensionAPIPermissions::request(v12, v29, (WebKit::WebExtensionCallbackHandler **)buf, &v46);
    uint64_t v35 = (NSString *)v46;
    __int16 v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"permissions.request()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v44 = @"a function is expected";
  uint64_t v45 = @"callback";
LABEL_56:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"permissions.request()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  Undefined  = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198982B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIPermissions::remove(WebKit::JSWebExtensionAPIPermissions *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIPermissions(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v51;
    WTF::String::utf8();
    if (v50) {
      __int16 v39 = (char *)v50 + 16;
    }
    else {
      __int16 v39 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v53 = 2082;
    uint64_t v54 = v38;
    __int16 v55 = 2082;
    uint64_t v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function permissions.remove() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    __int16 v41 = v50;
    uint64_t v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    uint64_t v42 = resolve;
    resolve  = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    int v17 = *a5;
    if (*a5)
    {
      uint64_t v18 = (void *)MEMORY[0x1E4F30938];
      int v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      JSValueRef v21 = (void *)v20;
    }
    else
    {
      JSValueRef v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      uint64_t v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"permissions.remove()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    BOOL v23 = (void *)MEMORY[0x1E4F30938];
    uint64_t v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    uint64_t v26 = (void *)v25;
  }
  else
  {
    uint64_t v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    uint64_t v44 = @"an object is expected";
    uint64_t v45 = @"permissions";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (uint64_t v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
    id v32 = a5[1];
    uint64_t v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"permissions.remove()", &cfstr_Permissions.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v51 = resolve;
    *(void *)buf  = this;
    uint64_t v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    uint64_t v15 = v47;
LABEL_28:
    *(void *)buf  = v15;
    id v46 = 0;
    WebKit::WebExtensionAPIPermissions::remove(v12, v29, (WebKit::WebExtensionCallbackHandler **)buf, &v46);
    uint64_t v35 = (NSString *)v46;
    __int16 v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"permissions.remove()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v44 = @"a function is expected";
  uint64_t v45 = @"callback";
LABEL_56:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"permissions.remove()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  Undefined  = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989831D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIPermissions::onAdded(WebKit::JSWebExtensionAPIPermissions *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIPermissions(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      int v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter permissions.onAdded in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIPermissions::onAdded(v7);
    Undefined  = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_198983520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIPermissions::onRemoved(WebKit::JSWebExtensionAPIPermissions *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIPermissions(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      int v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter permissions.onRemoved in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIPermissions::onRemoved(v7);
    Undefined  = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989837F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIPort *WebKit::toWebExtensionAPIPort(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPIPort::portClass(0);
      if (result)
      {
        JSClassDefinition v6 = WebKit::JSWebExtensionAPIPort::portClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private  = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIPort *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIPort::portClass(WebKit::JSWebExtensionAPIPort *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIPort::portClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIPort::portClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v6.version  = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v6.parentClass  = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 48);
    *(_OWORD *)&v6.staticFunctions  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 32);
    *(_OWORD *)&v6.finalize  = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v6.getProperty  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v6.deleteProperty  = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v6.callAsFunction  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v6.hasInstance  = v5;
    v6.className  = "Port";
    v6.parentClass  = 0;
    v6.staticValues  = (const JSStaticValue *)&WebKit::JSWebExtensionAPIPort::staticValues(void)::values;
    v6.staticFunctions  = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIPort::staticFunctions(void)::functions;
    v6.initialize  = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize  = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    JSClassRef result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIPort::portClass(void)::jsClass  = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIPort::postMessage(WebKit::JSWebExtensionAPIPort *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIPort(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        uint64_t v28 = "argument";
      }
      else {
        uint64_t v28 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v37 = *(WTF::StringImpl **)v39;
      WTF::String::utf8();
      if (v38) {
        uint64_t v29 = (char *)v38 + 16;
      }
      else {
        uint64_t v29 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      *(void *)&buf[4]  = a4;
      __int16 v41 = 2082;
      uint64_t v42 = v28;
      __int16 v43 = 2082;
      uint64_t v44 = v29;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function port.postMessage() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      uint64_t v31 = v38;
      uint64_t v38 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 1) {
          WTF::fastFree(v31, v30);
        }
        else {
          --*(_DWORD *)v31;
        }
      }
      id v32 = v37;
      uint64_t v37 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2) {
          WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v30);
        }
        else {
          *(_DWORD *)v32 -= 2;
        }
      }
    }

    if (a4)
    {
      if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
      {
        uint64_t v16 = JSValueToObject(this, *a5, 0);
        if (!JSObjectIsFunction(this, v16))
        {
          uint64_t v18 = WebKit::serializeJSObject(this, *a5, a6, v17);
          uint64_t v20 = (void *)v18;
          if (!*a6)
          {
            if (v18)
            {
              GlobalContext  = JSContextGetGlobalContext(this);
              WebKit::WebFrame::frameForContext(GlobalContext, v22, buf);
              uint64_t v23 = *(void *)buf;
              if (*(void *)buf)
              {
                id v36 = 0;
                WebKit::WebExtensionAPIPort::postMessage(v12, *(uint64_t *)buf, v20, &v36);
                uint64_t v25 = (NSString *)v36;
                if (v25) {
                  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"port.postMessage()", 0, v25, v24);
                }
                Undefined  = JSValueMakeUndefined(this);

                CFRelease(*(CFTypeRef *)(v23 + 8));
                goto LABEL_13;
              }
              uint64_t v35 = qword_1EB357DF8;
              if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)__int16 v39 = 0;
                _os_log_error_impl(&dword_1985F2000, v35, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v39, 2u);
              }
              JSValueRef v34 = JSValueMakeUndefined(this);
LABEL_43:
              Undefined  = v34;
LABEL_13:

LABEL_14:
              if (*(_DWORD *)(v12 + 48) == 1) {
                (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
              }
              else {
                --*(_DWORD *)(v12 + 48);
              }
              return Undefined;
            }
            *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"port.postMessage()", &cfstr_Message.isa, &cfstr_AJsonSerializa.isa, v19);
          }
          JSValueRef v34 = JSValueMakeUndefined(this);
          goto LABEL_43;
        }
      }
      uint64_t v33 = WebKit::toJSError(this, (const OpaqueJSContext *)@"port.postMessage()", &cfstr_Message.isa, &cfstr_AnObjectIsExpe.isa, v15);
    }
    else
    {
      uint64_t v33 = WebKit::toJSError(this, (const OpaqueJSContext *)@"port.postMessage()", 0, &cfstr_ARequiredArgum.isa, v14);
    }
    *a6  = v33;
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_14;
  }

  return JSValueMakeUndefined(this);
}

void sub_198983E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (*(_DWORD *)(v11 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v11 + 40) + 8))(v11 + 40);
  }
  else {
    --*(_DWORD *)(v11 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIPort::disconnect(WebKit::JSWebExtensionAPIPort *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = WebKit::toWebExtensionAPIPort(this, a3, a3);
  if (v9)
  {
    uint64_t v10 = v9;
    ++*((_DWORD *)v9 + 12);
    uint64_t v11 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        uint64_t v14 = "argument";
      }
      else {
        uint64_t v14 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v17) {
        uint64_t v15 = (char *)v17 + 16;
      }
      else {
        uint64_t v15 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      uint64_t v20 = a4;
      __int16 v21 = 2082;
      uint64_t v22 = v14;
      __int16 v23 = 2082;
      uint64_t v24 = v15;
      _os_log_debug_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEBUG, "Called function port.disconnect() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v17)
      {
        if (*(_DWORD *)v17 == 1) {
          WTF::fastFree(v17, v16);
        }
        else {
          --*(_DWORD *)v17;
        }
      }
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v16);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
    }

    WebKit::WebExtensionAPIPort::fireDisconnectEventIfNeeded((unsigned int *)v10);
    Undefined  = JSValueMakeUndefined(this);
    if (*((_DWORD *)v10 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v10 + 5) + 8))((uint64_t)v10 + 40);
    }
    else {
      --*((_DWORD *)v10 + 12);
    }
    return Undefined;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_198984168(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIPort::name(WebKit::JSWebExtensionAPIPort *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIPort(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*((_DWORD *)v6 + 12);
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      int v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter port.name in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIPort::name(v7);
    JSValueRef v10 = WebKit::toJSValueRef(this, v9, 1);

    if (*((_DWORD *)v7 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
    }
    else {
      --*((_DWORD *)v7 + 12);
    }
    return v10;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_198984464(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIPort::sender(WebKit::JSWebExtensionAPIPort *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIPort(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*((_DWORD *)v6 + 12);
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v16) {
        uint64_t v14 = (char *)v16 + 16;
      }
      else {
        uint64_t v14 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      int v19 = v14;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter port.sender in %{public}s world", buf, 0xCu);
      if (v16)
      {
        if (*(_DWORD *)v16 == 1) {
          WTF::fastFree(v16, v15);
        }
        else {
          --*(_DWORD *)v16;
        }
      }
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v15);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
    }

    WebKit::WebExtensionAPIPort::sender(v7);
    uint64_t v10 = (const OpaqueJSContext *)(id)objc_claimAutoreleasedReturnValue();
    if (v10) {
      Null  = WebKit::toJSValueRef(this, v10, v9);
    }
    else {
      Null  = JSValueMakeNull(this);
    }
    JSValueRef v12 = Null;

    if (*((_DWORD *)v7 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
    }
    else {
      --*((_DWORD *)v7 + 12);
    }
    return v12;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_198984780(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIPort::error(WebKit::JSWebExtensionAPIPort *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIPort(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*((_DWORD *)v6 + 12);
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v16) {
        uint64_t v14 = (char *)v16 + 16;
      }
      else {
        uint64_t v14 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      int v19 = v14;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter port.error in %{public}s world", buf, 0xCu);
      if (v16)
      {
        if (*(_DWORD *)v16 == 1) {
          WTF::fastFree(v16, v15);
        }
        else {
          --*(_DWORD *)v16;
        }
      }
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v15);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
    }

    WTF::RetainPtr<NSSet>::get((id *)v7 + 13);
    uint64_t v10 = (const OpaqueJSContext *)(id)objc_claimAutoreleasedReturnValue();
    if (v10) {
      Null  = WebKit::toJSValueRef(this, v10, v9);
    }
    else {
      Null  = JSValueMakeNull(this);
    }
    JSValueRef v12 = Null;

    if (*((_DWORD *)v7 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
    }
    else {
      --*((_DWORD *)v7 + 12);
    }
    return v12;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_198984AA0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIPort::onDisconnect(WebKit::JSWebExtensionAPIPort *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIPort(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*((_DWORD *)v6 + 12);
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        JSValueRef v12 = (char *)v14 + 16;
      }
      else {
        JSValueRef v12 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      int v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter port.onDisconnect in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIPort::onDisconnect(v7);
    JSValueRef v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
    if (*((_DWORD *)v7 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
    }
    else {
      --*((_DWORD *)v7 + 12);
    }
    return v10;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_198984D9C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIPort::onMessage(WebKit::JSWebExtensionAPIPort *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIPort(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*((_DWORD *)v6 + 12);
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        JSValueRef v12 = (char *)v14 + 16;
      }
      else {
        JSValueRef v12 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      int v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter port.onMessage in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIPort::onMessage(v7);
    JSValueRef v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
    if (*((_DWORD *)v7 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
    }
    else {
      --*((_DWORD *)v7 + 12);
    }
    return v10;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_198985088(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

WebKit::JSWebExtensionAPIRuntime *WebKit::toWebExtensionAPIRuntime(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPIRuntime::runtimeClass(0);
      if (result)
      {
        JSClassDefinition v6 = WebKit::JSWebExtensionAPIRuntime::runtimeClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private  = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIRuntime *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIRuntime::runtimeClass(WebKit::JSWebExtensionAPIRuntime *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIRuntime::runtimeClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIRuntime::runtimeClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v6.version  = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v6.parentClass  = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 48);
    *(_OWORD *)&v6.staticFunctions  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 32);
    *(_OWORD *)&v6.finalize  = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v6.getProperty  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v6.deleteProperty  = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v6.callAsFunction  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v6.hasInstance  = v5;
    v6.className  = "Runtime";
    v6.parentClass  = 0;
    v6.staticValues  = (const JSStaticValue *)&WebKit::JSWebExtensionAPIRuntime::staticValues(void)::values;
    v6.staticFunctions  = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIRuntime::staticFunctions(void)::functions;
    v6.initialize  = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize  = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    v6.getPropertyNames  = (JSObjectGetPropertyNamesCallback)WebKit::JSWebExtensionAPIRuntime::getPropertyNames;
    v6.hasProperty  = (JSObjectHasPropertyCallback)WebKit::JSWebExtensionAPIRuntime::hasProperty;
    v6.getProperty  = (JSObjectGetPropertyCallback)WebKit::JSWebExtensionAPIRuntime::getProperty;
    JSClassRef result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIRuntime::runtimeClass(void)::jsClass  = (uint64_t)result;
  }
  return result;
}

void WebKit::JSWebExtensionAPIRuntime::getPropertyNames(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSPropertyNameAccumulator *a4)
{
  uint64_t v6 = WebKit::toWebExtensionAPIRuntime(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*(_DWORD *)(v6 + 48);
    GlobalContext  = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v9, &v29);
    uint64_t v10 = v29;
    if (v29)
    {
      uint64_t v11 = *((void *)v29 + 3);
      if (v11
        && (uint64_t v12 = *(void *)(v11 + 8)) != 0
        && (uint64_t v13 = *(void *)(v12 + 24)) != 0
        && (uint64_t v14 = *(void *)(v13 + 8)) != 0
        && (uint64_t v15 = *(void **)(*(void *)(v14 + 48) + 16),
            ((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) == 0))
      {
        uint64_t v16 = *(CFTypeRef **)(v15[2] + 8);
        if (v16)
        {
          CFRetain(*(v16 - 1));
          v16 -= 2;
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      CFRelease(*((CFTypeRef *)v10 + 1));
    }
    else
    {
      uint64_t v16 = 0;
    }
    if (!*(unsigned char *)(v7 + 8))
    {
      int v17 = JSStringCreateWithUTF8CString("getPlatformInfo");
      JSPropertyNameAccumulatorAddName(a3, v17);
      if (v17) {
        JSStringRelease(v17);
      }
      uint64_t v18 = JSStringCreateWithUTF8CString("getBackgroundPage");
      JSPropertyNameAccumulatorAddName(a3, v18);
      if (v18) {
        JSStringRelease(v18);
      }
      int v19 = JSStringCreateWithUTF8CString("setUninstallURL");
      JSPropertyNameAccumulatorAddName(a3, v19);
      if (v19) {
        JSStringRelease(v19);
      }
      uint64_t v20 = JSStringCreateWithUTF8CString("openOptionsPage");
      JSPropertyNameAccumulatorAddName(a3, v20);
      if (v20) {
        JSStringRelease(v20);
      }
      __int16 v21 = JSStringCreateWithUTF8CString("reload");
      JSPropertyNameAccumulatorAddName(a3, v21);
      if (v21) {
        JSStringRelease(v21);
      }
      uint64_t v29 = "sendNativeMessage";
      uint64_t v30 = 18;
      if (WebKit::WebExtensionAPIRuntime::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v29, (WebKit::WebPage *)v16))
      {
        uint64_t v22 = JSStringCreateWithUTF8CString("sendNativeMessage");
        JSPropertyNameAccumulatorAddName(a3, v22);
        if (v22) {
          JSStringRelease(v22);
        }
      }
      uint64_t v29 = "connectNative";
      uint64_t v30 = 14;
      if (WebKit::WebExtensionAPIRuntime::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v29, (WebKit::WebPage *)v16))
      {
        __int16 v23 = JSStringCreateWithUTF8CString("connectNative");
        JSPropertyNameAccumulatorAddName(a3, v23);
        if (v23) {
          JSStringRelease(v23);
        }
      }
      uint64_t v24 = JSStringCreateWithUTF8CString("lastError");
      JSPropertyNameAccumulatorAddName(a3, v24);
      if (v24) {
        JSStringRelease(v24);
      }
      uint64_t v25 = JSStringCreateWithUTF8CString("onConnectExternal");
      JSPropertyNameAccumulatorAddName(a3, v25);
      if (v25) {
        JSStringRelease(v25);
      }
      uint64_t v26 = JSStringCreateWithUTF8CString("onMessageExternal");
      JSPropertyNameAccumulatorAddName(a3, v26);
      if (v26) {
        JSStringRelease(v26);
      }
      char v27 = JSStringCreateWithUTF8CString("onStartup");
      JSPropertyNameAccumulatorAddName(a3, v27);
      if (v27) {
        JSStringRelease(v27);
      }
      uint64_t v28 = JSStringCreateWithUTF8CString("onInstalled");
      JSPropertyNameAccumulatorAddName(a3, v28);
      if (v28) {
        JSStringRelease(v28);
      }
    }
    if (v16) {
      CFRelease(v16[1]);
    }
    if (*(_DWORD *)(v7 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v7 + 40) + 8))(v7 + 40);
    }
    else {
      --*(_DWORD *)(v7 + 48);
    }
  }
}

void sub_1989855D4(_Unwind_Exception *exception_object)
{
  if (v3) {
    JSStringRelease(v3);
  }
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  if (*(_DWORD *)(v1 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 40) + 8))(v1 + 40);
  }
  else {
    --*(_DWORD *)(v1 + 48);
  }
  _Unwind_Resume(exception_object);
}

void sub_19898569C()
{
}

void sub_1989856A8()
{
}

unint64_t WebKit::JSWebExtensionAPIRuntime::hasProperty(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4)
{
  uint64_t v6 = WebKit::toWebExtensionAPIRuntime(this, a2, a3);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  ++*(_DWORD *)(v6 + 48);
  GlobalContext  = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v9, &v22);
  uint64_t v10 = v22;
  if (v22)
  {
    uint64_t v11 = *((void *)v22 + 3);
    if (v11
      && (uint64_t v12 = *(void *)(v11 + 8)) != 0
      && (uint64_t v13 = *(void *)(v12 + 24)) != 0
      && (uint64_t v14 = *(void *)(v13 + 8)) != 0
      && (uint64_t v15 = *(void **)(*(void *)(v14 + 48) + 16),
          ((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) == 0))
    {
      uint64_t v16 = *(CFTypeRef **)(v15[2] + 8);
      if (v16)
      {
        CFRetain(*(v16 - 1));
        v16 -= 2;
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    CFRelease(*((CFTypeRef *)v10 + 1));
  }
  else
  {
    uint64_t v16 = 0;
  }
  int v17 = *(unsigned __int8 *)(v7 + 8);
  unint64_t v18 = *(unsigned char *)(v7 + 8) == 0;
  if (!JSStringIsEqualToUTF8CString(a3, "getPlatformInfo")
    && !JSStringIsEqualToUTF8CString(a3, "getBackgroundPage")
    && !JSStringIsEqualToUTF8CString(a3, "setUninstallURL")
    && !JSStringIsEqualToUTF8CString(a3, "openOptionsPage")
    && !JSStringIsEqualToUTF8CString(a3, "reload"))
  {
    if (JSStringIsEqualToUTF8CString(a3, "sendNativeMessage"))
    {
      if (!v17)
      {
        uint64_t v22 = "sendNativeMessage";
        uint64_t v23 = 18;
        int v19 = WebKit::WebExtensionAPIRuntime::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v16);
LABEL_31:
        unint64_t v18 = (unint64_t)v19;
        goto LABEL_32;
      }
    }
    else
    {
      if (!JSStringIsEqualToUTF8CString(a3, "connectNative"))
      {
        if (!JSStringIsEqualToUTF8CString(a3, "lastError")
          && !JSStringIsEqualToUTF8CString(a3, "onConnectExternal")
          && !JSStringIsEqualToUTF8CString(a3, "onMessageExternal")
          && !JSStringIsEqualToUTF8CString(a3, "onStartup"))
        {
          IsEqualToUTF8CString  = JSStringIsEqualToUTF8CString(a3, "onInstalled");
          if (v17) {
            unint64_t v18 = 0;
          }
          else {
            unint64_t v18 = IsEqualToUTF8CString;
          }
        }
        goto LABEL_32;
      }
      if (!v17)
      {
        uint64_t v22 = "connectNative";
        uint64_t v23 = 14;
        int v19 = WebKit::WebExtensionAPIRuntime::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v16);
        goto LABEL_31;
      }
    }
    unint64_t v18 = 0;
  }
LABEL_32:
  if (v16) {
    CFRelease(v16[1]);
  }
  if (*(_DWORD *)(v7 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v7 + 40) + 8))(v7 + 40);
  }
  else {
    --*(_DWORD *)(v7 + 48);
  }
  return v18;
}

void sub_198985950(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  if (*(_DWORD *)(v1 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 40) + 8))(v1 + 40);
  }
  else {
    --*(_DWORD *)(v1 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::getProperty(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = WebKit::toWebExtensionAPIRuntime(this, a2, a3);
  if (v8)
  {
    uint64_t v9 = v8;
    ++*(_DWORD *)(v8 + 48);
    GlobalContext  = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v11, &buf);
    uint64_t v12 = buf;
    if ((void)buf)
    {
      uint64_t v13 = *(void *)(buf + 24);
      if (v13
        && (uint64_t v14 = *(void *)(v13 + 8)) != 0
        && (uint64_t v15 = *(void *)(v14 + 24)) != 0
        && (uint64_t v16 = *(void *)(v15 + 8)) != 0
        && (int v17 = *(void **)(*(void *)(v16 + 48) + 16),
            ((*(uint64_t (**)(void *))(*v17 + 1368))(v17) & 1) == 0))
      {
        unint64_t v18 = *(CFTypeRef **)(v17[2] + 8);
        if (v18)
        {
          CFRetain(*(v18 - 1));
          v18 -= 2;
        }
      }
      else
      {
        unint64_t v18 = 0;
      }
      CFRelease(*(CFTypeRef *)(v12 + 8));
    }
    else
    {
      unint64_t v18 = 0;
    }
    if (*(unsigned char *)(v9 + 8)) {
      goto LABEL_13;
    }
    if (JSStringIsEqualToUTF8CString(a3, "lastError"))
    {
      uint64_t v22 = WebKit::toWebExtensionAPIRuntime(this, a2, v21);
      uint64_t v23 = v22;
      if (v22)
      {
        ++*(_DWORD *)(v22 + 48);
        uint64_t v24 = (id)qword_1EB357DF8;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WTF::String::utf8();
          if (v64) {
            uint64_t v52 = (char *)v64 + 16;
          }
          else {
            uint64_t v52 = 0;
          }
          LODWORD(buf)  = 136446210;
          *(void *)((char *)&buf + 4)  = v52;
          _os_log_debug_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEBUG, "Called getter runtime.lastError in %{public}s world", (uint8_t *)&buf, 0xCu);
          if (v64)
          {
            if (*(_DWORD *)v64 == 1) {
              WTF::fastFree(v64, v53);
            }
            else {
              --*(_DWORD *)v64;
            }
          }
          if (v65)
          {
            if (*(_DWORD *)v65 == 2) {
              WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v53);
            }
            else {
              *(_DWORD *)v65 -= 2;
            }
          }
        }

        *(unsigned char *)(v23 + 52)  = 1;
        WTF::RetainPtr<NSSet>::get((id *)(v23 + 56));
        uint64_t v26 = (const OpaqueJSContext *)(id)objc_claimAutoreleasedReturnValue();
        if (v26) {
          Null  = WebKit::toJSValueRef(this, v26, v25);
        }
        else {
          Null  = JSValueMakeNull(this);
        }
        JSValueRef v20 = Null;

LABEL_40:
        if (*(_DWORD *)(v23 + 48) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)(v23 + 40) + 8))(v23 + 40);
          if (!v18) {
            goto LABEL_43;
          }
        }
        else
        {
          --*(_DWORD *)(v23 + 48);
          if (!v18)
          {
LABEL_43:
            if (*(_DWORD *)(v9 + 48) == 1) {
              (*(void (**)(uint64_t))(*(void *)(v9 + 40) + 8))(v9 + 40);
            }
            else {
              --*(_DWORD *)(v9 + 48);
            }
            return v20;
          }
        }
LABEL_42:
        CFRelease(v18[1]);
        goto LABEL_43;
      }
LABEL_13:
      Undefined  = JSValueMakeUndefined(this);
      goto LABEL_14;
    }
    if (JSStringIsEqualToUTF8CString(a3, "onConnectExternal"))
    {
      uint64_t v29 = WebKit::toWebExtensionAPIRuntime(this, a2, v28);
      uint64_t v23 = v29;
      if (!v29) {
        goto LABEL_13;
      }
      ++*(_DWORD *)(v29 + 48);
      uint64_t v30 = (id)qword_1EB357DF8;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::String::utf8();
        if (v64) {
          uint64_t v54 = (char *)v64 + 16;
        }
        else {
          uint64_t v54 = 0;
        }
        LODWORD(buf)  = 136446210;
        *(void *)((char *)&buf + 4)  = v54;
        _os_log_debug_impl(&dword_1985F2000, v30, OS_LOG_TYPE_DEBUG, "Called getter runtime.onConnectExternal in %{public}s world", (uint8_t *)&buf, 0xCu);
        if (v64)
        {
          if (*(_DWORD *)v64 == 1) {
            WTF::fastFree(v64, v55);
          }
          else {
            --*(_DWORD *)v64;
          }
        }
        if (v65)
        {
          if (*(_DWORD *)v65 == 2) {
            WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v55);
          }
          else {
            *(_DWORD *)v65 -= 2;
          }
        }
      }

      uint64_t v31 = WebKit::WebExtensionAPIRuntime::onConnectExternal((WebKit::WebExtensionAPIRuntime *)v23);
      JSValueRef v32 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v31 + 40));
    }
    else if (JSStringIsEqualToUTF8CString(a3, "onMessageExternal"))
    {
      uint64_t v34 = WebKit::toWebExtensionAPIRuntime(this, a2, v33);
      uint64_t v23 = v34;
      if (!v34) {
        goto LABEL_13;
      }
      ++*(_DWORD *)(v34 + 48);
      uint64_t v35 = (id)qword_1EB357DF8;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::String::utf8();
        if (v64) {
          uint64_t v56 = (char *)v64 + 16;
        }
        else {
          uint64_t v56 = 0;
        }
        LODWORD(buf)  = 136446210;
        *(void *)((char *)&buf + 4)  = v56;
        _os_log_debug_impl(&dword_1985F2000, v35, OS_LOG_TYPE_DEBUG, "Called getter runtime.onMessageExternal in %{public}s world", (uint8_t *)&buf, 0xCu);
        if (v64)
        {
          if (*(_DWORD *)v64 == 1) {
            WTF::fastFree(v64, v57);
          }
          else {
            --*(_DWORD *)v64;
          }
        }
        if (v65)
        {
          if (*(_DWORD *)v65 == 2) {
            WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v57);
          }
          else {
            *(_DWORD *)v65 -= 2;
          }
        }
      }

      uint64_t v36 = WebKit::WebExtensionAPIRuntime::onMessageExternal((WebKit::WebExtensionAPIRuntime *)v23);
      JSValueRef v32 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v36 + 40));
    }
    else if (JSStringIsEqualToUTF8CString(a3, "onStartup"))
    {
      uint64_t v38 = WebKit::toWebExtensionAPIRuntime(this, a2, v37);
      uint64_t v23 = v38;
      if (!v38) {
        goto LABEL_13;
      }
      ++*(_DWORD *)(v38 + 48);
      __int16 v39 = (id)qword_1EB357DF8;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::String::utf8();
        if (v64) {
          uint64_t v60 = (char *)v64 + 16;
        }
        else {
          uint64_t v60 = 0;
        }
        LODWORD(buf)  = 136446210;
        *(void *)((char *)&buf + 4)  = v60;
        _os_log_debug_impl(&dword_1985F2000, v39, OS_LOG_TYPE_DEBUG, "Called getter runtime.onStartup in %{public}s world", (uint8_t *)&buf, 0xCu);
        if (v64)
        {
          if (*(_DWORD *)v64 == 1) {
            WTF::fastFree(v64, v61);
          }
          else {
            --*(_DWORD *)v64;
          }
        }
        if (v65)
        {
          if (*(_DWORD *)v65 == 2) {
            WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v61);
          }
          else {
            *(_DWORD *)v65 -= 2;
          }
        }
      }

      uint64_t v40 = WebKit::WebExtensionAPIRuntime::onStartup((WebKit::WebExtensionAPIRuntime *)v23);
      JSValueRef v32 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v40 + 40));
    }
    else
    {
      if (!JSStringIsEqualToUTF8CString(a3, "onInstalled"))
      {
        IsEqualToUTF8CString  = JSStringIsEqualToUTF8CString(a3, "getPlatformInfo");
        char v47 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIRuntime::getPlatformInfo;
        if (IsEqualToUTF8CString) {
          goto LABEL_54;
        }
        BOOL v48 = JSStringIsEqualToUTF8CString(a3, "getBackgroundPage");
        char v47 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIRuntime::getBackgroundPage;
        if (v48) {
          goto LABEL_54;
        }
        BOOL v49 = JSStringIsEqualToUTF8CString(a3, "setUninstallURL");
        char v47 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIRuntime::setUninstallURL;
        if (v49) {
          goto LABEL_54;
        }
        BOOL v50 = JSStringIsEqualToUTF8CString(a3, "openOptionsPage");
        char v47 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIRuntime::openOptionsPage;
        if (v50) {
          goto LABEL_54;
        }
        BOOL v51 = JSStringIsEqualToUTF8CString(a3, "reload");
        char v47 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIRuntime::reload;
        if (v51) {
          goto LABEL_54;
        }
        if (JSStringIsEqualToUTF8CString(a3, "sendNativeMessage"))
        {
          *(void *)&buf  = "sendNativeMessage";
          *((void *)&buf + 1)  = 18;
          unsigned __int8 v58 = WebKit::WebExtensionAPIRuntime::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18);
          char v47 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIRuntime::sendNativeMessage;
          if (v58) {
            goto LABEL_54;
          }
        }
        if (JSStringIsEqualToUTF8CString(a3, "connectNative"))
        {
          *(void *)&buf  = "connectNative";
          *((void *)&buf + 1)  = 14;
          unsigned int v59 = WebKit::WebExtensionAPIRuntime::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18);
          char v47 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIRuntime::connectNative;
          if (v59)
          {
LABEL_54:
            Undefined  = JSObjectMakeFunctionWithCallback(this, a3, v47);
LABEL_14:
            JSValueRef v20 = Undefined;
            if (!v18) {
              goto LABEL_43;
            }
            goto LABEL_42;
          }
        }
        goto LABEL_13;
      }
      uint64_t v42 = WebKit::toWebExtensionAPIRuntime(this, a2, v41);
      uint64_t v23 = v42;
      if (!v42) {
        goto LABEL_13;
      }
      ++*(_DWORD *)(v42 + 48);
      __int16 v43 = (id)qword_1EB357DF8;
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::String::utf8();
        if (v64) {
          uint64_t v62 = (char *)v64 + 16;
        }
        else {
          uint64_t v62 = 0;
        }
        LODWORD(buf)  = 136446210;
        *(void *)((char *)&buf + 4)  = v62;
        _os_log_debug_impl(&dword_1985F2000, v43, OS_LOG_TYPE_DEBUG, "Called getter runtime.onInstalled in %{public}s world", (uint8_t *)&buf, 0xCu);
        if (v64)
        {
          if (*(_DWORD *)v64 == 1) {
            WTF::fastFree(v64, v63);
          }
          else {
            --*(_DWORD *)v64;
          }
        }
        if (v65)
        {
          if (*(_DWORD *)v65 == 2) {
            WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v63);
          }
          else {
            *(_DWORD *)v65 -= 2;
          }
        }
      }

      uint64_t v44 = WebKit::WebExtensionAPIRuntime::onInstalled((WebKit::WebExtensionAPIRuntime *)v23);
      JSValueRef v32 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v44 + 40));
    }
    JSValueRef v20 = v32;
    goto LABEL_40;
  }

  return JSValueMakeUndefined(this);
}

void sub_198986520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::getURL(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        uint64_t v23 = "argument";
      }
      else {
        uint64_t v23 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v27) {
        uint64_t v24 = (char *)v27 + 16;
      }
      else {
        uint64_t v24 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      uint64_t v30 = a4;
      __int16 v31 = 2082;
      JSValueRef v32 = v23;
      __int16 v33 = 2082;
      uint64_t v34 = v24;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function runtime.getURL() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v27)
      {
        if (*(_DWORD *)v27 == 1) {
          WTF::fastFree(v27, v25);
        }
        else {
          --*(_DWORD *)v27;
        }
      }
      if (v28)
      {
        if (*(_DWORD *)v28 == 2) {
          WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v25);
        }
        else {
          *(_DWORD *)v28 -= 2;
        }
      }
    }

    if (a4)
    {
      if (JSValueIsString(this, *a5))
      {
        int v17 = WebKit::toNSString(this, *a5, 2);
        if (v17)
        {
          unint64_t v18 = WebKit::WebExtensionAPIRuntime::getURL(v12);
          int v19 = (NSString *)0;
          Undefined  = WebKit::toJSValueRef(this, v18, 0);

          if (v19)
          {
            *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.getURL()", 0, v19, v21);
            Undefined  = JSValueMakeUndefined(this);
          }
        }
        else
        {
          *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.getURL()", &cfstr_Resourcepath.isa, &cfstr_AStringIsExpec.isa, v16);
          Undefined  = JSValueMakeUndefined(this);
        }

        goto LABEL_10;
      }
      uint64_t v26 = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.getURL()", &cfstr_Resourcepath.isa, &cfstr_AStringIsExpec.isa, v15);
    }
    else
    {
      uint64_t v26 = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.getURL()", 0, &cfstr_ARequiredArgum.isa, v14);
    }
    *a6  = v26;
    Undefined  = JSValueMakeUndefined(this);
LABEL_10:
    if (*(_DWORD *)(v12 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
    }
    else {
      --*(_DWORD *)(v12 + 48);
    }
    return Undefined;
  }

  return JSValueMakeUndefined(this);
}

void sub_198986B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::getManifest(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (v9)
  {
    uint64_t v10 = v9;
    ++*((_DWORD *)v9 + 12);
    uint64_t v11 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        int v17 = "argument";
      }
      else {
        int v17 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v20) {
        unint64_t v18 = (char *)v20 + 16;
      }
      else {
        unint64_t v18 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      uint64_t v23 = a4;
      __int16 v24 = 2082;
      uint64_t v25 = v17;
      __int16 v26 = 2082;
      char v27 = v18;
      _os_log_debug_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEBUG, "Called function runtime.getManifest() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v20)
      {
        if (*(_DWORD *)v20 == 1) {
          WTF::fastFree(v20, v19);
        }
        else {
          --*(_DWORD *)v20;
        }
      }
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v19);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
    }

    WTF::RetainPtr<NSSet>::get((id *)(*((void *)v10 + 3) + 104));
    uint64_t v13 = (const OpaqueJSContext *)(id)objc_claimAutoreleasedReturnValue();
    if (v13) {
      Null  = WebKit::toJSValueRef(this, v13, v12);
    }
    else {
      Null  = JSValueMakeNull(this);
    }
    JSValueRef v15 = Null;

    if (*((_DWORD *)v10 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v10 + 5) + 8))((uint64_t)v10 + 40);
    }
    else {
      --*((_DWORD *)v10 + 12);
    }
    return v15;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_198986EA4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::getFrameId(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        __int16 v24 = "argument";
      }
      else {
        __int16 v24 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v28) {
        uint64_t v25 = (char *)v28 + 16;
      }
      else {
        uint64_t v25 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      __int16 v31 = a4;
      __int16 v32 = 2082;
      __int16 v33 = v24;
      __int16 v34 = 2082;
      uint64_t v35 = v25;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function runtime.getFrameId() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v28)
      {
        if (*(_DWORD *)v28 == 1) {
          WTF::fastFree(v28, v26);
        }
        else {
          --*(_DWORD *)v28;
        }
      }
      if (v29)
      {
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v26);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
    }

    if (a4)
    {
      if (JSValueIsObject(this, *a5))
      {
        JSValueRef v16 = *a5;
        if (v16
          && (int v17 = (void *)MEMORY[0x1E4F30938],
              [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)],
              unint64_t v18 = objc_claimAutoreleasedReturnValue(),
              [v17 valueWithJSValueRef:v16 inContext:v18],
              JSValueRef v16 = (JSValueRef)objc_claimAutoreleasedReturnValue(),
              v18,
              v16)
          && ([(OpaqueJSValue *)v16 isObject] & 1) == 0)
        {
          *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.getFrameId()", &cfstr_Target.isa, &cfstr_AnObjectIsExpe.isa, v19);
          Undefined  = JSValueMakeUndefined(this);
        }
        else
        {
          WebKit::WebExtensionAPIRuntime::getFrameId(v12, (JSValue *)v16);
          Undefined  = JSValueMakeNumber(this, v20);
        }
        JSValueRef v22 = Undefined;

        goto LABEL_10;
      }
      char v27 = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.getFrameId()", &cfstr_Target.isa, &cfstr_AnObjectIsExpe.isa, v15);
    }
    else
    {
      char v27 = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.getFrameId()", 0, &cfstr_ARequiredArgum.isa, v14);
    }
    *a6  = v27;
    JSValueRef v22 = JSValueMakeUndefined(this);
LABEL_10:
    if (*((_DWORD *)v12 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v12 + 5) + 8))((uint64_t)v12 + 40);
    }
    else {
      --*((_DWORD *)v12 + 12);
    }
    return v22;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989872F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::sendMessage(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, unint64_t a4, JSValueRef *a5, const OpaqueJSValue **a6, const OpaqueJSValue **a7)
{
  exception  = a6;
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (v9)
  {
    uint64_t v63 = (uint64_t)v9;
    ++*((_DWORD *)v9 + 12);
    uint64_t v10 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == 1) {
        uint64_t v52 = "argument";
      }
      else {
        uint64_t v52 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      resolve  = *(JSObjectRef *)v70;
      WTF::String::utf8();
      if (v69) {
        __int16 v53 = (char *)v69 + 16;
      }
      else {
        __int16 v53 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      *(void *)&buf[4]  = a4;
      __int16 v72 = 2082;
      __int16 v73 = v52;
      __int16 v74 = 2082;
      __int16 v75 = v53;
      _os_log_debug_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEBUG, "Called function runtime.sendMessage() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      __int16 v55 = v69;
      uint64_t v69 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 1) {
          WTF::fastFree(v55, v54);
        }
        else {
          --*(_DWORD *)v55;
        }
      }
      uint64_t v56 = resolve;
      resolve  = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2) {
          WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v54);
        }
        else {
          *(_DWORD *)v56 -= 2;
        }
      }
    }

    if (a4 == 4)
    {
      if (JSValueIsString(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        if (JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1])
          || (unint64_t v18 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v18)))
        {
          uint64_t v57 = @"an object is expected";
          unsigned __int8 v58 = @"message";
        }
        else
        {
          JSValueRef v19 = a5[2];
          if (v19)
          {
            double v20 = (void *)MEMORY[0x1E4F30938];
            __int16 v21 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
            uint64_t v22 = [v20 valueWithJSValueRef:v19 inContext:v21];

            uint64_t v23 = (void *)v22;
          }
          else
          {
            uint64_t v23 = 0;
          }
          char v26 = objc_msgSend(v23, "_isDictionary", exception);

          if ((v26 & 1) != 0 || JSValueIsNull(this, a5[2]) || JSValueIsUndefined(this, a5[2]))
          {
            if (JSValueIsObject(this, a5[3])
              && (char v27 = JSValueToObject(this, a5[3], 0), JSObjectIsFunction(this, v27))
              || JSValueIsNull(this, a5[3])
              || JSValueIsUndefined(this, a5[3]))
            {
              uint64_t v28 = WebKit::toNSString(this, *a5, 2);
              uint64_t v30 = WebKit::serializeJSObject(this, a5[1], exception, v29);
              uint64_t v31 = WebKit::toNSDictionary(this, a5[2], 0, 0);
              WebKit::toJSCallbackHandler((uint64_t)this, a5[3], (const OpaqueJSValue *)(v63 + 40), buf);
              unint64_t v32 = 4;
              JSValueRef v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
              a4  = 4;
              uint64_t v25 = (void *)v28;
              __int16 v33 = (void *)v30;
              __int16 v34 = (void *)v31;
              goto LABEL_53;
            }
            uint64_t v57 = @"a function is expected";
            unsigned __int8 v58 = @"callback";
          }
          else
          {
            uint64_t v57 = @"an object is expected";
            unsigned __int8 v58 = @"options";
          }
        }
      }
      else
      {
        uint64_t v57 = @"a string is expected";
        unsigned __int8 v58 = @"extensionID";
      }
      BOOL v50 = 0;
      *exception  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.sendMessage()", &v58->isa, &v57->isa, v17);
      Undefined  = JSValueMakeUndefined(this);
      __int16 v33 = 0;
      uint64_t v25 = 0;
LABEL_71:

LABEL_72:
      if (*(_DWORD *)(v63 + 48) == 1) {
        (*(void (**)(uint64_t))(*(void *)(v63 + 40) + 8))(v63 + 40);
      }
      else {
        --*(_DWORD *)(v63 + 48);
      }
      return Undefined;
    }
    if (!a4)
    {
      *exception  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.sendMessage()", 0, &cfstr_ARequiredArgum.isa, v11);
      Undefined  = JSValueMakeUndefined(this);
      goto LABEL_72;
    }
    unint64_t v12 = a4 - 1;
    if (a4 == 1)
    {
      unint64_t v24 = 0;
      uint64_t v25 = 0;
      JSValueRef v15 = 0;
      a4  = 1;
LABEL_39:
      uint64_t v36 = a5[v24];
      if (v36)
      {
        if (JSValueIsNull(this, a5[v24])
          || JSValueIsUndefined(this, v36)
          || (uint64_t v38 = JSValueToObject(this, v36, 0), JSObjectIsFunction(this, v38)))
        {
          __int16 v33 = 0;
          *exception  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.sendMessage()", &cfstr_Message.isa, &cfstr_AnObjectIsExpe.isa, v37);
          Undefined  = JSValueMakeUndefined(this);
          __int16 v34 = 0;
          goto LABEL_68;
        }
        WebKit::serializeJSObject(this, v36, exception, v39);
        v33 = unint64_t v32 = v24 + 1;
        goto LABEL_45;
      }
LABEL_44:
      __int16 v33 = 0;
      unint64_t v32 = v24;
LABEL_45:
      __int16 v34 = 0;
      if (v24 < v12 && v32 < a4)
      {
        uint64_t v40 = a5[v32];
        if (!v40) {
          goto LABEL_52;
        }
        __int16 v41 = (void *)MEMORY[0x1E4F30938];
        uint64_t v42 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        __int16 v43 = [v41 valueWithJSValueRef:v40 inContext:v42];

        LOBYTE(v42)  = [v43 _isDictionary];
        if ((v42 & 1) != 0 || JSValueIsNull(this, v40) || JSValueIsUndefined(this, v40))
        {
          __int16 v34 = WebKit::toNSDictionary(this, v40, 0, 0);
          ++v32;
        }
        else
        {
LABEL_52:
          __int16 v34 = 0;
        }
      }
LABEL_53:
      if (!*exception)
      {
        if (!v33)
        {
          __int16 v33 = 0;
          *exception  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.sendMessage()", &cfstr_Message.isa, &cfstr_AJsonSerializa.isa, v11);
          JSValueRef v59 = JSValueMakeUndefined(this);
LABEL_103:
          Undefined  = v59;
          goto LABEL_68;
        }
        if (v32 >= a4)
        {
          if (v15)
          {
            Undefined  = 0;
          }
          else
          {
            reject  = 0;
            resolve  = 0;
            Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
            *(void *)buf  = this;
            uint64_t v69 = reject;
            *(void *)uint64_t v70 = resolve;
            WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, (OpaqueJSValue **)v70, &v69, &v66);
            JSValueRef v15 = v66;
          }
          GlobalContext  = JSContextGetGlobalContext(this);
          WebKit::WebFrame::frameForContext(GlobalContext, v46, buf);
          if (*(void *)buf)
          {
            *(void *)uint64_t v70 = v15;
            id v65 = 0;
            WebKit::WebExtensionAPIRuntime::sendMessage(v63, *(WebKit::WebFrame **)buf, v25, v33, v34, (uint64_t *)v70, &v65);
            BOOL v48 = (NSString *)v65;
            BOOL v49 = *(WebKit::WebExtensionCallbackHandler **)v70;
            *(void *)uint64_t v70 = 0;
            if (v49) {
              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v49);
            }
            if (v48)
            {
              *exception  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.sendMessage()", 0, v48, v47);
            }
            else if (Undefined)
            {
LABEL_65:

              if (*(void *)buf) {
                CFRelease(*(CFTypeRef *)(*(void *)buf + 8));
              }
              JSValueRef v15 = 0;
              goto LABEL_68;
            }
            Undefined  = JSValueMakeUndefined(this);
            goto LABEL_65;
          }
          uint64_t v60 = qword_1EB357DF8;
          if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)uint64_t v70 = 0;
            _os_log_error_impl(&dword_1985F2000, v60, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v70, 2u);
            if (Undefined)
            {
LABEL_101:
              Undefined  = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"runtime.sendMessage()", 0, &cfstr_AnUnknownError.isa, v61);
              if (Undefined)
              {
LABEL_68:
                if (v15) {
                  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
                }
                BOOL v50 = v34;
                goto LABEL_71;
              }
            }
          }
          else if (Undefined)
          {
            goto LABEL_101;
          }
          JSValueRef v59 = JSValueMakeUndefined(this);
          goto LABEL_103;
        }
        *exception  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.sendMessage()", 0, &cfstr_AnUnknownArgum.isa, v11);
      }
      JSValueRef v59 = JSValueMakeUndefined(this);
      goto LABEL_103;
    }
    uint64_t v13 = a5[v12];
    if (v13
      && (JSValueIsObject(this, a5[v12]) && (uint64_t v14 = JSValueToObject(this, v13, 0), JSObjectIsFunction(this, v14))
       || JSValueIsNull(this, v13)
       || JSValueIsUndefined(this, v13)))
    {
      WebKit::toJSCallbackHandler((uint64_t)this, v13, (const OpaqueJSValue *)(v63 + 40), buf);
      JSValueRef v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
      JSValueRef v16 = (char *)(a4 - 2);
      --a4;
      unint64_t v12 = (unint64_t)v16;
      if (!v16) {
        goto LABEL_37;
      }
    }
    else
    {
      JSValueRef v15 = 0;
    }
    uint64_t v35 = *a5;
    if (*a5 && (JSValueIsString(this, *a5) || JSValueIsNull(this, v35) || JSValueIsUndefined(this, v35)))
    {
      WebKit::toNSString(this, v35, 2);
      v25 = unint64_t v24 = 1;
      goto LABEL_38;
    }
LABEL_37:
    uint64_t v25 = 0;
    unint64_t v24 = 0;
LABEL_38:
    if (v24 >= a4) {
      goto LABEL_44;
    }
    goto LABEL_39;
  }

  return JSValueMakeUndefined(this);
}

void sub_198987F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19) {
    CFRelease(*(CFTypeRef *)(a19 + 8));
  }
  if (v21) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v21);
  }

  if (*(_DWORD *)(a10 + 48) == 1) {
    (*(void (**)(void))(*(void *)(a10 + 40) + 8))();
  }
  else {
    --*(_DWORD *)(a10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::connect(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        uint64_t v44 = "argument";
      }
      else {
        uint64_t v44 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      __int16 v53 = *(WTF::StringImpl **)v55;
      WTF::String::utf8();
      if (v54) {
        uint64_t v45 = (char *)v54 + 16;
      }
      else {
        uint64_t v45 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      *(void *)&buf[4]  = a4;
      __int16 v57 = 2082;
      unsigned __int8 v58 = v44;
      __int16 v59 = 2082;
      uint64_t v60 = v45;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function runtime.connect() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      char v47 = v54;
      uint64_t v54 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 1) {
          WTF::fastFree(v47, v46);
        }
        else {
          --*(_DWORD *)v47;
        }
      }
      BOOL v48 = v53;
      __int16 v53 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2) {
          WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v46);
        }
        else {
          *(_DWORD *)v48 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)1)
    {
      double v20 = *a5;
      if (*a5)
      {
        __int16 v21 = (void *)MEMORY[0x1E4F30938];
        uint64_t v22 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v23 = [v21 valueWithJSValueRef:v20 inContext:v22];

        unint64_t v24 = (void *)v23;
      }
      else
      {
        unint64_t v24 = 0;
      }
      char v27 = [v24 _isDictionary];

      if ((v27 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        uint64_t v28 = *a5;
        if (*a5)
        {
          uint64_t v29 = (void *)MEMORY[0x1E4F30938];
          uint64_t v30 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
          uint64_t v31 = [v29 valueWithJSValueRef:v28 inContext:v30];

          unint64_t v32 = (void *)v31;
        }
        else
        {
          unint64_t v32 = 0;
        }
        char v35 = [v32 _isDictionary];

        if ((v35 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
        {
          uint64_t v34 = WebKit::toNSDictionary(this, *a5, 0, 0);
          uint64_t v25 = 0;
          goto LABEL_29;
        }
        goto LABEL_73;
      }
      if (JSValueIsString(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        char v26 = 0;
        uint64_t v25 = WebKit::toNSString(this, *a5, 2);
LABEL_30:
        GlobalContext  = JSContextGetGlobalContext(this);
        WebKit::WebFrame::frameForContext(GlobalContext, v37, buf);
        if (!*(void *)buf)
        {
          BOOL v49 = qword_1EB357DF8;
          if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__int16 v55 = 0;
            _os_log_error_impl(&dword_1985F2000, v49, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v55, 2u);
          }
          Undefined  = JSValueMakeUndefined(this);
          goto LABEL_42;
        }
        id v52 = 0;
        WebKit::WebExtensionAPIRuntime::connect(v12, *(WebKit::WebFrame **)buf, this, v25, v26, &v52, (uint64_t *)v55);
        uint64_t v38 = (NSString *)v52;
        if (*(void *)v55) {
          __int16 v39 = (void *)(*(void *)v55 + 40);
        }
        else {
          __int16 v39 = 0;
        }
        Undefined  = WebKit::JSWebExtensionWrapper::wrap(this, v39);
        uint64_t v42 = *(WTF::StringImpl **)v55;
        *(void *)__int16 v55 = 0;
        if (v42)
        {
          if (*((_DWORD *)v42 + 12) == 1)
          {
            (*(void (**)(void))(*((void *)v42 + 5) + 8))();
            if (!v38) {
              goto LABEL_40;
            }
            goto LABEL_72;
          }
          --*((_DWORD *)v42 + 12);
        }
        if (!v38) {
          goto LABEL_40;
        }
LABEL_72:
        *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.connect()", 0, v38, v40);
        Undefined  = JSValueMakeUndefined(this);
LABEL_40:

        if (*(void *)buf) {
          CFRelease(*(CFTypeRef *)(*(void *)buf + 8));
        }
LABEL_42:

LABEL_43:
        if (*(_DWORD *)(v12 + 48) == 1) {
          (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
        }
        else {
          --*(_DWORD *)(v12 + 48);
        }
        return Undefined;
      }
    }
    else
    {
      if (a4 != (OpaqueJSValue *)2)
      {
        uint64_t v25 = 0;
        char v26 = 0;
        goto LABEL_30;
      }
      if (JSValueIsString(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        JSValueRef v15 = a5[1];
        if (v15)
        {
          JSValueRef v16 = (void *)MEMORY[0x1E4F30938];
          int v17 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
          uint64_t v18 = [v16 valueWithJSValueRef:v15 inContext:v17];

          JSValueRef v19 = (void *)v18;
        }
        else
        {
          JSValueRef v19 = 0;
        }
        char v33 = [v19 _isDictionary];

        if ((v33 & 1) != 0 || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
        {
          uint64_t v25 = WebKit::toNSString(this, *a5, 2);
          uint64_t v34 = WebKit::toNSDictionary(this, a5[1], 0, 0);
LABEL_29:
          char v26 = (void *)v34;
          goto LABEL_30;
        }
LABEL_73:
        BOOL v50 = @"an object is expected";
        BOOL v51 = @"options";
LABEL_75:
        *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.connect()", &v51->isa, &v50->isa, v14);
        Undefined  = JSValueMakeUndefined(this);
        goto LABEL_43;
      }
    }
    BOOL v50 = @"a string is expected";
    BOOL v51 = @"extensionID";
    goto LABEL_75;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989887D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::runtimeIdentifier(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPIRuntime(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*((_DWORD *)v6 + 12);
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      int v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter runtime.id in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIRuntime::runtimeIdentifier(v7);
    JSValueRef v10 = WebKit::toJSValueRef(this, v9, 1);

    if (*((_DWORD *)v7 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
    }
    else {
      --*((_DWORD *)v7 + 12);
    }
    return v10;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_198988B74(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::onConnect(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPIRuntime(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*((_DWORD *)v6 + 12);
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      int v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter runtime.onConnect in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIRuntime::onConnect(v7);
    JSValueRef v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
    if (*((_DWORD *)v7 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
    }
    else {
      --*((_DWORD *)v7 + 12);
    }
    return v10;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_198988E6C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::onMessage(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPIRuntime(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*((_DWORD *)v6 + 12);
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)buf  = 136446210;
      int v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter runtime.onMessage in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIRuntime::onMessage(v7);
    JSValueRef v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
    if (*((_DWORD *)v7 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
    }
    else {
      --*((_DWORD *)v7 + 12);
    }
    return v10;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_198989158(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::getPlatformInfo(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*(_DWORD *)(v11 + 48);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        __int16 v21 = "argument";
      }
      else {
        __int16 v21 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      resolve  = v30;
      WTF::String::utf8();
      if (v29) {
        uint64_t v22 = (char *)v29 + 16;
      }
      else {
        uint64_t v22 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      *(void *)&buf[4]  = a4;
      __int16 v32 = 2082;
      char v33 = v21;
      __int16 v34 = 2082;
      char v35 = v22;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function runtime.getPlatformInfo() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      unint64_t v24 = v29;
      uint64_t v29 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 1) {
          WTF::fastFree(v24, v23);
        }
        else {
          --*(_DWORD *)v24;
        }
      }
      uint64_t v25 = resolve;
      resolve  = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v23);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
    }

    if (a4 != (OpaqueJSValue *)1) {
      goto LABEL_10;
    }
    if (!JSValueIsObject(this, *a5) || (uint64_t v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
    {
      if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
      {
        *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.getPlatformInfo()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v15);
        Undefined  = JSValueMakeUndefined(this);
        goto LABEL_15;
      }
    }
    WebKit::toJSCallbackHandler((uint64_t)this, *a5, (const OpaqueJSValue *)(v12 + 40), buf);
    JSValueRef v16 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(void *)buf)
    {
      DeferredPromise  = 0;
    }
    else
    {
LABEL_10:
      reject  = 0;
      resolve  = 0;
      DeferredPromise  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
      uint64_t v30 = resolve;
      *(void *)buf  = this;
      uint64_t v29 = reject;
      WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v30, &v29, &v26);
      JSValueRef v16 = v26;
    }
    *(void *)buf  = v16;
    WebKit::WebExtensionAPIRuntime::getPlatformInfo(v12, (WebKit::WebExtensionCallbackHandler **)buf);
    uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v18) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
    }
    if (DeferredPromise) {
      goto LABEL_16;
    }
    Undefined  = JSValueMakeUndefined(this);
LABEL_15:
    DeferredPromise  = Undefined;
LABEL_16:
    if (*(_DWORD *)(v12 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
    }
    else {
      --*(_DWORD *)(v12 + 48);
    }
    return DeferredPromise;
  }

  return JSValueMakeUndefined(this);
}

void sub_19898959C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::getBackgroundPage(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*(_DWORD *)(v11 + 48);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        __int16 v21 = "argument";
      }
      else {
        __int16 v21 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      resolve  = v30;
      WTF::String::utf8();
      if (v29) {
        uint64_t v22 = (char *)v29 + 16;
      }
      else {
        uint64_t v22 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      *(void *)&buf[4]  = a4;
      __int16 v32 = 2082;
      char v33 = v21;
      __int16 v34 = 2082;
      char v35 = v22;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function runtime.getBackgroundPage() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      unint64_t v24 = v29;
      uint64_t v29 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 1) {
          WTF::fastFree(v24, v23);
        }
        else {
          --*(_DWORD *)v24;
        }
      }
      uint64_t v25 = resolve;
      resolve  = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v23);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
    }

    if (a4 != (OpaqueJSValue *)1) {
      goto LABEL_10;
    }
    if (!JSValueIsObject(this, *a5) || (uint64_t v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
    {
      if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
      {
        *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.getBackgroundPage()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v15);
        Undefined  = JSValueMakeUndefined(this);
        goto LABEL_15;
      }
    }
    WebKit::toJSCallbackHandler((uint64_t)this, *a5, (const OpaqueJSValue *)(v12 + 40), buf);
    JSValueRef v16 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(void *)buf)
    {
      DeferredPromise  = 0;
    }
    else
    {
LABEL_10:
      reject  = 0;
      resolve  = 0;
      DeferredPromise  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
      uint64_t v30 = resolve;
      *(void *)buf  = this;
      uint64_t v29 = reject;
      WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v30, &v29, &v26);
      JSValueRef v16 = v26;
    }
    *(void *)buf  = v16;
    WebKit::WebExtensionAPIRuntime::getBackgroundPage(v12, (WebKit::WebExtensionCallbackHandler **)buf);
    uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v18) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
    }
    if (DeferredPromise) {
      goto LABEL_16;
    }
    Undefined  = JSValueMakeUndefined(this);
LABEL_15:
    DeferredPromise  = Undefined;
LABEL_16:
    if (*(_DWORD *)(v12 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
    }
    else {
      --*(_DWORD *)(v12 + 48);
    }
    return DeferredPromise;
  }

  return JSValueMakeUndefined(this);
}

void sub_198989A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::setUninstallURL(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*(_DWORD *)(v11 + 48);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        uint64_t v31 = "argument";
      }
      else {
        uint64_t v31 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      resolve  = v43;
      WTF::String::utf8();
      if (v42) {
        __int16 v32 = (char *)v42 + 16;
      }
      else {
        __int16 v32 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      *(void *)&buf[4]  = a4;
      __int16 v45 = 2082;
      id v46 = v31;
      __int16 v47 = 2082;
      BOOL v48 = v32;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function runtime.setUninstallURL() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      __int16 v34 = v42;
      uint64_t v42 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 1) {
          WTF::fastFree(v34, v33);
        }
        else {
          --*(_DWORD *)v34;
        }
      }
      char v35 = resolve;
      resolve  = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2) {
          WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v33);
        }
        else {
          *(_DWORD *)v35 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)1)
    {
      if (JSValueIsString(this, *a5))
      {
        double v20 = (void *)MEMORY[0x1E4F1CB10];
        __int16 v21 = WebKit::toNSString(this, *a5, 2);
        JSValueRef v16 = [v20 URLWithString:v21];

        uint64_t v15 = 0;
        goto LABEL_18;
      }
    }
    else
    {
      if (a4 != (OpaqueJSValue *)2)
      {
        if (!a4)
        {
          *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.setUninstallURL()", 0, &cfstr_ARequiredArgum.isa, v14);
          Undefined  = JSValueMakeUndefined(this);
          goto LABEL_34;
        }
        uint64_t v15 = 0;
        goto LABEL_7;
      }
      if (JSValueIsString(this, *a5))
      {
        if (JSValueIsObject(this, a5[1]) && (uint64_t v22 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v22))
          || JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1]))
        {
          uint64_t v23 = (void *)MEMORY[0x1E4F1CB10];
          unint64_t v24 = WebKit::toNSString(this, *a5, 2);
          JSValueRef v16 = [v23 URLWithString:v24];

          WebKit::toJSCallbackHandler((uint64_t)this, a5[1], (const OpaqueJSValue *)(v12 + 40), buf);
          uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
LABEL_18:
          if (!v16)
          {
LABEL_7:
            JSValueRef v16 = 0;
            *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.setUninstallURL()", &cfstr_Url.isa, &cfstr_AStringIsExpec.isa, v14);
            JSValueRef v17 = JSValueMakeUndefined(this);
            goto LABEL_8;
          }
          if ([v16 isFileURL])
          {
            *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.setUninstallURL()", &cfstr_Url.isa, &cfstr_ItCannotBeALoc.isa, v25);
            JSValueRef v17 = JSValueMakeUndefined(this);
LABEL_8:
            Undefined  = v17;
            if (v15) {
              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
            }
            goto LABEL_32;
          }
          if (v15)
          {
            Undefined  = 0;
          }
          else
          {
            reject  = 0;
            resolve  = 0;
            Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
            __int16 v43 = resolve;
            *(void *)buf  = this;
            uint64_t v42 = reject;
            WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v43, &v42, &v39);
            uint64_t v15 = v39;
          }
          MEMORY[0x19972E8A0](&v38, v16);
          id v26 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v15);
          if (v15) {
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
          }
          uint64_t v28 = v38;
          uint64_t v38 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
            {
              WTF::StringImpl::destroy(v28, v27);
              if (!Undefined) {
LABEL_31:
              }
                Undefined  = JSValueMakeUndefined(this);
LABEL_32:
              uint64_t v29 = v16;
LABEL_33:

LABEL_34:
              if (*(_DWORD *)(v12 + 48) == 1) {
                (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
              }
              else {
                --*(_DWORD *)(v12 + 48);
              }
              return Undefined;
            }
            *(_DWORD *)v28 -= 2;
          }
          if (!Undefined) {
            goto LABEL_31;
          }
          goto LABEL_32;
        }
        uint64_t v36 = @"a function is expected";
        uint64_t v37 = @"callback";
LABEL_57:
        uint64_t v29 = 0;
        *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.setUninstallURL()", &v37->isa, &v36->isa, v19);
        Undefined  = JSValueMakeUndefined(this);
        goto LABEL_33;
      }
    }
    uint64_t v36 = @"a string is expected";
    uint64_t v37 = @"url";
    goto LABEL_57;
  }

  return JSValueMakeUndefined(this);
}

void sub_19898A080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  if (*(_DWORD *)(v16 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v16 + 40) + 8))(v16 + 40);
  }
  else {
    --*(_DWORD *)(v16 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::openOptionsPage(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*(_DWORD *)(v11 + 48);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        __int16 v21 = "argument";
      }
      else {
        __int16 v21 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      resolve  = v30;
      WTF::String::utf8();
      if (v29) {
        uint64_t v22 = (char *)v29 + 16;
      }
      else {
        uint64_t v22 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      *(void *)&buf[4]  = a4;
      __int16 v32 = 2082;
      char v33 = v21;
      __int16 v34 = 2082;
      char v35 = v22;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function runtime.openOptionsPage() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      unint64_t v24 = v29;
      uint64_t v29 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 1) {
          WTF::fastFree(v24, v23);
        }
        else {
          --*(_DWORD *)v24;
        }
      }
      uint64_t v25 = resolve;
      resolve  = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v23);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
    }

    if (a4 != (OpaqueJSValue *)1) {
      goto LABEL_10;
    }
    if (!JSValueIsObject(this, *a5) || (uint64_t v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
    {
      if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
      {
        *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.openOptionsPage()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v15);
        Undefined  = JSValueMakeUndefined(this);
        goto LABEL_15;
      }
    }
    WebKit::toJSCallbackHandler((uint64_t)this, *a5, (const OpaqueJSValue *)(v12 + 40), buf);
    uint64_t v16 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(void *)buf)
    {
      DeferredPromise  = 0;
    }
    else
    {
LABEL_10:
      reject  = 0;
      resolve  = 0;
      DeferredPromise  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
      uint64_t v30 = resolve;
      *(void *)buf  = this;
      uint64_t v29 = reject;
      WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v30, &v29, &v26);
      uint64_t v16 = v26;
    }
    *(void *)buf  = v16;
    WebKit::WebExtensionAPIRuntime::openOptionsPage(v12, (uint64_t *)buf);
    uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v18) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
    }
    if (DeferredPromise) {
      goto LABEL_16;
    }
    Undefined  = JSValueMakeUndefined(this);
LABEL_15:
    DeferredPromise  = Undefined;
LABEL_16:
    if (*(_DWORD *)(v12 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
    }
    else {
      --*(_DWORD *)(v12 + 48);
    }
    return DeferredPromise;
  }

  return JSValueMakeUndefined(this);
}

void sub_19898A544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::reload(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (v9)
  {
    uint64_t v10 = v9;
    ++*(_DWORD *)(v9 + 48);
    uint64_t v11 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        uint64_t v14 = "argument";
      }
      else {
        uint64_t v14 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v17) {
        uint64_t v15 = (char *)v17 + 16;
      }
      else {
        uint64_t v15 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      double v20 = a4;
      __int16 v21 = 2082;
      uint64_t v22 = v14;
      __int16 v23 = 2082;
      unint64_t v24 = v15;
      _os_log_debug_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEBUG, "Called function runtime.reload() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v17)
      {
        if (*(_DWORD *)v17 == 1) {
          WTF::fastFree(v17, v16);
        }
        else {
          --*(_DWORD *)v17;
        }
      }
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v16);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
    }

    WebKit::WebExtensionAPIRuntime::reload((WebKit::WebExtensionAPIRuntime *)v10);
    Undefined  = JSValueMakeUndefined(this);
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
    return Undefined;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_19898A894(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::sendNativeMessage(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*(_DWORD *)(v11 + 48);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        char v35 = "argument";
      }
      else {
        char v35 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      resolve  = *(JSObjectRef *)v53;
      WTF::String::utf8();
      if (v52) {
        __int16 v41 = (char *)v52 + 16;
      }
      else {
        __int16 v41 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      *(void *)&buf[4]  = a4;
      __int16 v55 = 2082;
      uint64_t v56 = v35;
      __int16 v57 = 2082;
      unsigned __int8 v58 = v41;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function runtime.sendNativeMessage() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      __int16 v43 = v52;
      id v52 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 1) {
          WTF::fastFree(v43, v42);
        }
        else {
          --*(_DWORD *)v43;
        }
      }
      uint64_t v44 = resolve;
      resolve  = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2) {
          WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v42);
        }
        else {
          *(_DWORD *)v44 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)3)
    {
      if (JSValueIsString(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        if (JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1])
          || (__int16 v21 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v21)))
        {
          __int16 v45 = @"an object is expected";
          id v46 = @"message";
        }
        else
        {
          if (JSValueIsObject(this, a5[2]) && (uint64_t v22 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v22))
            || JSValueIsNull(this, a5[2])
            || JSValueIsUndefined(this, a5[2]))
          {
            uint64_t v23 = WebKit::toNSString(this, *a5, 2);
            uint64_t v25 = WebKit::serializeJSObject(this, a5[1], a6, v24);
            WebKit::toJSCallbackHandler((uint64_t)this, a5[2], (const OpaqueJSValue *)(v12 + 40), buf);
            uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
            uint64_t v19 = -1;
            id v26 = (void *)v23;
            char v27 = (void *)v25;
            goto LABEL_24;
          }
          __int16 v45 = @"a function is expected";
          id v46 = @"callback";
        }
      }
      else
      {
        __int16 v45 = @"a string is expected";
        id v46 = @"applicationID";
      }
      __int16 v32 = 0;
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.sendNativeMessage()", &v46->isa, &v45->isa, v20);
      Undefined  = JSValueMakeUndefined(this);
      id v26 = 0;
LABEL_40:

LABEL_41:
      if (*(_DWORD *)(v12 + 48) == 1) {
        (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
      }
      else {
        --*(_DWORD *)(v12 + 48);
      }
      return Undefined;
    }
    if (!a4)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.sendNativeMessage()", 0, &cfstr_ARequiredArgum.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      goto LABEL_41;
    }
    unint64_t v15 = (unint64_t)a4 - 1;
    if ((uint64_t)a4 - 1 < 0)
    {
      char v27 = 0;
      id v26 = 0;
      uint64_t v18 = 0;
      if (!*a6)
      {
LABEL_46:
        char v27 = 0;
        *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.sendNativeMessage()", &cfstr_Message.isa, &cfstr_AJsonSerializa.isa, v14);
        JSValueRef v34 = JSValueMakeUndefined(this);
LABEL_47:
        Undefined  = v34;
LABEL_37:
        if (v18) {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
        }
        __int16 v32 = v27;
        goto LABEL_40;
      }
LABEL_87:
      JSValueRef v34 = JSValueMakeUndefined(this);
      goto LABEL_47;
    }
    if (a4 != (OpaqueJSValue *)1)
    {
      unint64_t v16 = (unint64_t)a5[v15];
      if (v16)
      {
        if (JSValueIsObject(this, a5[v15])
          && (JSValueRef v17 = JSValueToObject(this, (JSValueRef)v16, 0), JSObjectIsFunction(this, v17))
          || JSValueIsNull(this, (JSValueRef)v16)
          || JSValueIsUndefined(this, (JSValueRef)v16))
        {
          WebKit::toJSCallbackHandler((uint64_t)this, (const OpaqueJSContext *)v16, (const OpaqueJSValue *)(v12 + 40), buf);
          uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          uint64_t v19 = (uint64_t)a4 - 2;
          unint64_t v16 = 1;
LABEL_56:
          uint64_t v36 = a5[v19];
          if (v36)
          {
            if (JSValueIsNull(this, a5[v19])
              || JSValueIsUndefined(this, v36)
              || (uint64_t v38 = JSValueToObject(this, v36, 0), JSObjectIsFunction(this, v38)))
            {
              char v27 = 0;
              *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.sendNativeMessage()", &cfstr_Message.isa, &cfstr_AnObjectIsExpe.isa, v37);
              Undefined  = JSValueMakeUndefined(this);
              id v26 = 0;
              goto LABEL_37;
            }
            WebKit::serializeJSObject(this, v36, a6, v39);
            char v27 = --v19;
          }
          else
          {
            char v27 = 0;
          }
          id v26 = 0;
          if (v16 < v15 && (v19 & 0x8000000000000000) == 0)
          {
            uint64_t v40 = a5[v19];
            if (v40 && (JSValueIsString(this, v40) || JSValueIsNull(this, v40) || JSValueIsUndefined(this, v40)))
            {
              id v26 = WebKit::toNSString(this, v40, 2);
              --v19;
            }
            else
            {
              id v26 = 0;
            }
          }
LABEL_24:
          if (!*a6)
          {
            if (v27)
            {
              if (v19 < 0)
              {
                if (v18)
                {
                  Undefined  = 0;
                }
                else
                {
                  reject  = 0;
                  resolve  = 0;
                  Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
                  *(void *)buf  = this;
                  id v52 = reject;
                  *(void *)__int16 v53 = resolve;
                  WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, (OpaqueJSValue **)v53, &v52, &v49);
                  uint64_t v18 = v49;
                }
                GlobalContext  = JSContextGetGlobalContext(this);
                WebKit::WebFrame::frameForContext(GlobalContext, v30, buf);
                if (*(void *)buf)
                {
                  *(void *)__int16 v53 = v18;
                  WebKit::WebExtensionAPIRuntime::sendNativeMessage(v12, *(uint64_t *)buf, v26, v27, (uint64_t *)v53);
                  uint64_t v31 = *(WebKit::WebExtensionCallbackHandler **)v53;
                  *(void *)__int16 v53 = 0;
                  if (v31) {
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v31);
                  }
                  uint64_t v18 = 0;
                  if (Undefined) {
                    goto LABEL_35;
                  }
                  goto LABEL_34;
                }
                __int16 v47 = qword_1EB357DF8;
                if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)__int16 v53 = 0;
                  _os_log_error_impl(&dword_1985F2000, v47, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v53, 2u);
                  if (!Undefined) {
                    goto LABEL_34;
                  }
                }
                else if (!Undefined)
                {
                  goto LABEL_34;
                }
                Undefined  = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"runtime.sendNativeMessage()", 0, &cfstr_AnUnknownError.isa, v48);
                if (Undefined)
                {
LABEL_35:
                  if (*(void *)buf) {
                    CFRelease(*(CFTypeRef *)(*(void *)buf + 8));
                  }
                  goto LABEL_37;
                }
LABEL_34:
                Undefined  = JSValueMakeUndefined(this);
                goto LABEL_35;
              }
              *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.sendNativeMessage()", 0, &cfstr_AnUnknownArgum.isa, v14);
              JSValueRef v34 = JSValueMakeUndefined(this);
              goto LABEL_47;
            }
            goto LABEL_46;
          }
          goto LABEL_87;
        }
        uint64_t v18 = 0;
        unint64_t v16 = 0;
      }
      else
      {
        uint64_t v18 = 0;
      }
      uint64_t v19 = (uint64_t)a4 - 1;
      goto LABEL_56;
    }
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    unint64_t v16 = 0;
    goto LABEL_56;
  }

  return JSValueMakeUndefined(this);
}

void sub_19898B218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIRuntime::connectNative(WebKit::JSWebExtensionAPIRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIRuntime(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*(_DWORD *)(v11 + 48);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        uint64_t v25 = "argument";
      }
      else {
        uint64_t v25 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v29 = *(WTF::StringImpl **)v31;
      WTF::String::utf8();
      if (v30) {
        id v26 = (char *)v30 + 16;
      }
      else {
        id v26 = 0;
      }
      *(_DWORD *)buf  = 134349570;
      *(void *)&buf[4]  = a4;
      __int16 v33 = 2082;
      JSValueRef v34 = v25;
      __int16 v35 = 2082;
      uint64_t v36 = v26;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function runtime.connectNative() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v30)
      {
        if (*(_DWORD *)v30 == 1) {
          WTF::fastFree(v30, v27);
        }
        else {
          --*(_DWORD *)v30;
        }
      }
      if (v29)
      {
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v27);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)1)
    {
      if (!JSValueIsString(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
      {
        *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"runtime.connectNative()", &cfstr_Applicationid.isa, &cfstr_AStringIsExpec.isa, v14);
        Undefined  = JSValueMakeUndefined(this);
LABEL_19:
        if (*(_DWORD *)(v12 + 48) == 1) {
          (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
        }
        else {
          --*(_DWORD *)(v12 + 48);
        }
        return Undefined;
      }
      WebKit::toNSString(this, *a5, 2);
      uint64_t v15 = (NSString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v15 = 0;
    }
    GlobalContext  = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v17, buf);
    uint64_t v18 = *(void *)buf;
    if (*(void *)buf)
    {
      WebKit::WebExtensionAPIRuntime::connectNative((WebKit::WebExtensionAPIRuntime *)v12, *(WebKit::WebFrame **)buf, this, v15, (uint64_t *)v31);
      if (*(void *)v31) {
        uint64_t v19 = (void *)(*(void *)v31 + 40);
      }
      else {
        uint64_t v19 = 0;
      }
      Undefined  = WebKit::JSWebExtensionWrapper::wrap(this, v19);
      uint64_t v23 = *(WTF::StringImpl **)v31;
      *(void *)uint64_t v31 = 0;
      if (v23)
      {
        if (*((_DWORD *)v23 + 12) == 1) {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*((void *)v23 + 5) + 8))((uint64_t)v23 + 40, v20, v21);
        }
        else {
          --*((_DWORD *)v23 + 12);
        }
      }
      CFRelease(*(CFTypeRef *)(v18 + 8));
    }
    else
    {
      uint64_t v28 = qword_1EB357DF8;
      if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v31 = 0;
        _os_log_error_impl(&dword_1985F2000, v28, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v31, 2u);
      }
      Undefined  = JSValueMakeUndefined(this);
    }

    goto LABEL_19;
  }

  return JSValueMakeUndefined(this);
}

void sub_19898B744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11)
{
  if (*(_DWORD *)(v11 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v11 + 40) + 8))(v11 + 40);
  }
  else {
    --*(_DWORD *)(v11 + 48);
  }
  _Unwind_Resume(a1);
}

WebKit::JSWebExtensionAPIScripting *WebKit::toWebExtensionAPIScripting(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPIScripting::scriptingClass(0);
      if (result)
      {
        uint64_t v6 = WebKit::JSWebExtensionAPIScripting::scriptingClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private  = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIScripting *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIScripting::scriptingClass(WebKit::JSWebExtensionAPIScripting *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIScripting::scriptingClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIScripting::scriptingClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v5.version  = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v5.parentClass  = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v5.getProperty  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v5.deleteProperty  = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v5.callAsFunction  = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v5.hasInstance  = v4;
    v5.hasProperty  = *(JSObjectHasPropertyCallback *)(MEMORY[0x1E4F309C8] + 56);
    *(_OWORD *)&v5.parentClass  = 0uLL;
    v5.className  = "Scripting";
    v5.staticFunctions  = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIScripting::staticFunctions(void)::functions;
    v5.initialize  = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v5.finalize  = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    JSClassRef result = JSClassCreate(&v5);
    WebKit::JSWebExtensionAPIScripting::scriptingClass(void)::jsClass  = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIScripting::executeScript(WebKit::JSWebExtensionAPIScripting *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIScripting(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v51;
    WTF::String::utf8();
    if (v50) {
      __int16 v39 = (char *)v50 + 16;
    }
    else {
      __int16 v39 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v53 = 2082;
    uint64_t v54 = v38;
    __int16 v55 = 2082;
    uint64_t v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function scripting.executeScript() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    __int16 v41 = v50;
    BOOL v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    uint64_t v42 = resolve;
    resolve  = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    JSValueRef v17 = *a5;
    if (*a5)
    {
      uint64_t v18 = (void *)MEMORY[0x1E4F30938];
      uint64_t v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      uint64_t v21 = (void *)v20;
    }
    else
    {
      uint64_t v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      uint64_t v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.executeScript()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    uint64_t v23 = (void *)MEMORY[0x1E4F30938];
    unint64_t v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    id v26 = (void *)v25;
  }
  else
  {
    id v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    uint64_t v44 = @"an object is expected";
    __int16 v45 = @"details";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (uint64_t v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
    __int16 v32 = a5[1];
    __int16 v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.executeScript()", &cfstr_Details.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    BOOL v51 = resolve;
    *(void *)buf  = this;
    BOOL v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    uint64_t v15 = v47;
LABEL_28:
    *(void *)buf  = v15;
    id v46 = 0;
    WebKit::WebExtensionAPIScripting::executeScript(v12, v29, (char **)buf, &v46);
    __int16 v35 = (NSString *)v46;
    uint64_t v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.executeScript()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v44 = @"a function is expected";
  __int16 v45 = @"callback";
LABEL_56:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.executeScript()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  Undefined  = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19898BF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIScripting::insertCSS(WebKit::JSWebExtensionAPIScripting *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIScripting(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v51;
    WTF::String::utf8();
    if (v50) {
      __int16 v39 = (char *)v50 + 16;
    }
    else {
      __int16 v39 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v53 = 2082;
    uint64_t v54 = v38;
    __int16 v55 = 2082;
    uint64_t v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function scripting.insertCSS() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    __int16 v41 = v50;
    BOOL v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    uint64_t v42 = resolve;
    resolve  = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    JSValueRef v17 = *a5;
    if (*a5)
    {
      uint64_t v18 = (void *)MEMORY[0x1E4F30938];
      uint64_t v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      uint64_t v21 = (void *)v20;
    }
    else
    {
      uint64_t v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      uint64_t v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.insertCSS()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    uint64_t v23 = (void *)MEMORY[0x1E4F30938];
    unint64_t v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    id v26 = (void *)v25;
  }
  else
  {
    id v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    uint64_t v44 = @"an object is expected";
    __int16 v45 = @"details";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (uint64_t v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
    __int16 v32 = a5[1];
    __int16 v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.insertCSS()", &cfstr_Details.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    BOOL v51 = resolve;
    *(void *)buf  = this;
    BOOL v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    uint64_t v15 = v47;
LABEL_28:
    *(void *)buf  = v15;
    id v46 = 0;
    WebKit::WebExtensionAPIScripting::insertCSS(v12, v29, (uint64_t *)buf, &v46);
    __int16 v35 = (NSString *)v46;
    uint64_t v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.insertCSS()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v44 = @"a function is expected";
  __int16 v45 = @"callback";
LABEL_56:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.insertCSS()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  Undefined  = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19898C5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIScripting::removeCSS(WebKit::JSWebExtensionAPIScripting *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIScripting(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v51;
    WTF::String::utf8();
    if (v50) {
      __int16 v39 = (char *)v50 + 16;
    }
    else {
      __int16 v39 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v53 = 2082;
    uint64_t v54 = v38;
    __int16 v55 = 2082;
    uint64_t v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function scripting.removeCSS() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    __int16 v41 = v50;
    BOOL v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    uint64_t v42 = resolve;
    resolve  = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    JSValueRef v17 = *a5;
    if (*a5)
    {
      uint64_t v18 = (void *)MEMORY[0x1E4F30938];
      uint64_t v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      uint64_t v21 = (void *)v20;
    }
    else
    {
      uint64_t v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      uint64_t v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.removeCSS()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  uint64_t v22 = *a5;
  if (*a5)
  {
    uint64_t v23 = (void *)MEMORY[0x1E4F30938];
    unint64_t v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    id v26 = (void *)v25;
  }
  else
  {
    id v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    uint64_t v44 = @"an object is expected";
    __int16 v45 = @"details";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (uint64_t v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
    __int16 v32 = a5[1];
    __int16 v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.removeCSS()", &cfstr_Details.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_28;
    }
LABEL_27:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    BOOL v51 = resolve;
    *(void *)buf  = this;
    BOOL v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    uint64_t v15 = v47;
LABEL_28:
    *(void *)buf  = v15;
    id v46 = 0;
    WebKit::WebExtensionAPIScripting::removeCSS(v12, v29, (uint64_t *)buf, &v46);
    __int16 v35 = (NSString *)v46;
    uint64_t v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.removeCSS()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v44 = @"a function is expected";
  __int16 v45 = @"callback";
LABEL_56:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.removeCSS()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  Undefined  = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19898CC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIScripting::registerContentScripts(WebKit::JSWebExtensionAPIScripting *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIScripting(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_26;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      id v26 = "argument";
    }
    else {
      id v26 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v37;
    WTF::String::utf8();
    if (v36) {
      char v27 = (char *)v36 + 16;
    }
    else {
      char v27 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v39 = 2082;
    uint64_t v40 = v26;
    __int16 v41 = 2082;
    uint64_t v42 = v27;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function scripting.registerContentScripts() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v29 = v36;
    uint64_t v36 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 1) {
        WTF::fastFree(v29, v28);
      }
      else {
        --*(_DWORD *)v29;
      }
    }
    int v30 = resolve;
    resolve  = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v28);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    JSValueRef v17 = WebKit::toNSObject(this, *(void *)a5, 0, 0, 0);
    if (!v17) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.registerContentScripts()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v31 = JSValueMakeUndefined(this);
    goto LABEL_47;
  }
  if (JSValueIsObject(this, *(JSValueRef *)(a5 + 8))
    && (uint64_t v18 = JSValueToObject(this, *(JSValueRef *)(a5 + 8), 0), JSObjectIsFunction(this, v18))
    || JSValueIsNull(this, *(JSValueRef *)(a5 + 8))
    || JSValueIsUndefined(this, *(JSValueRef *)(a5 + 8)))
  {
    JSValueRef v17 = WebKit::toNSObject(this, *(void *)a5, 0, 0, 0);
    uint64_t v20 = *(const OpaqueJSContext **)(a5 + 8);
    uint64_t v21 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v20, v21, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v17)
    {
LABEL_8:
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.registerContentScripts()", &cfstr_Details.isa, &cfstr_AnObjectIsExpe.isa, v14);
      Undefined  = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_26;
    }
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_20;
    }
LABEL_19:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v37 = resolve;
    *(void *)buf  = this;
    uint64_t v36 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v37, &v36, &v33);
    uint64_t v15 = v33;
LABEL_20:
    *(void *)buf  = v15;
    id v32 = 0;
    WebKit::WebExtensionAPIScripting::registerContentScripts(v12, v17, (uint64_t *)buf, &v32);
    uint64_t v23 = (NSString *)v32;
    unint64_t v24 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v24) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v24);
    }
    if (v23)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.registerContentScripts()", 0, v23, v22);
    }
    else if (Undefined)
    {
LABEL_25:

      goto LABEL_26;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_25;
  }
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.registerContentScripts()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v19);
  JSValueRef v31 = JSValueMakeUndefined(this);
LABEL_47:
  Undefined  = v31;
LABEL_26:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19898D270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIScripting::getRegisteredContentScripts(WebKit::JSWebExtensionAPIScripting *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIScripting(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_47;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v36 = "argument";
    }
    else {
      uint64_t v36 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v53;
    WTF::String::utf8();
    if (v52) {
      uint64_t v42 = (char *)v52 + 16;
    }
    else {
      uint64_t v42 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v55 = 2082;
    uint64_t v56 = v36;
    __int16 v57 = 2082;
    unsigned __int8 v58 = v42;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function scripting.getRegisteredContentScripts() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v44 = v52;
    id v52 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1) {
        WTF::fastFree(v44, v43);
      }
      else {
        --*(_DWORD *)v44;
      }
    }
    __int16 v45 = resolve;
    resolve  = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v43);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (uint64_t v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (uint64_t v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        uint64_t v22 = *a5;
        uint64_t v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        unint64_t v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_65;
    }
    JSValueRef v31 = *a5;
    if (*a5)
    {
      id v32 = (void *)MEMORY[0x1E4F30938];
      __int16 v33 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v34 = [v32 valueWithJSValueRef:v31 inContext:v33];

      __int16 v35 = (void *)v34;
    }
    else
    {
      __int16 v35 = 0;
    }
    char v37 = [v35 _isDictionary];

    if ((v37 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      unint64_t v24 = WebKit::toNSDictionary(this, *a5, 0, 0);
      goto LABEL_40;
    }
LABEL_66:
    id v46 = @"an object is expected";
    __int16 v47 = @"filter";
    goto LABEL_67;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    unint64_t v24 = 0;
    goto LABEL_40;
  }
  JSValueRef v14 = *a5;
  if (*a5)
  {
    uint64_t v15 = (void *)MEMORY[0x1E4F30938];
    unint64_t v16 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v17 = [v15 valueWithJSValueRef:v14 inContext:v16];

    uint64_t v18 = (void *)v17;
  }
  else
  {
    uint64_t v18 = 0;
  }
  char v25 = [v18 _isDictionary];

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
    goto LABEL_66;
  }
  if (JSValueIsObject(this, a5[1]) && (id v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    unint64_t v24 = WebKit::toNSDictionary(this, *a5, 0, 0);
    char v27 = a5[1];
    uint64_t v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    uint64_t v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_41;
    }
LABEL_40:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    __int16 v53 = resolve;
    *(void *)buf  = this;
    id v52 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v53, &v52, &v49);
    uint64_t v29 = v49;
LABEL_41:
    *(void *)buf  = v29;
    id v48 = 0;
    WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(v12, v24, (uint64_t *)buf, &v48);
    __int16 v39 = (NSString *)v48;
    uint64_t v40 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v40) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v40);
    }
    if (v39)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.getRegisteredContentScripts()", 0, v39, v38);
    }
    else if (Undefined)
    {
LABEL_46:

      goto LABEL_47;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_46;
  }
LABEL_65:
  id v46 = @"a function is expected";
  __int16 v47 = @"callback";
LABEL_67:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.getRegisteredContentScripts()", &v47->isa, &v46->isa, v21);
  Undefined  = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19898D9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIScripting::unregisterContentScripts(WebKit::JSWebExtensionAPIScripting *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIScripting(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    Undefined  = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_47;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v36 = "argument";
    }
    else {
      uint64_t v36 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    resolve  = v53;
    WTF::String::utf8();
    if (v52) {
      uint64_t v42 = (char *)v52 + 16;
    }
    else {
      uint64_t v42 = 0;
    }
    *(_DWORD *)buf  = 134349570;
    *(void *)&buf[4]  = a4;
    __int16 v55 = 2082;
    uint64_t v56 = v36;
    __int16 v57 = 2082;
    unsigned __int8 v58 = v42;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function scripting.unregisterContentScripts() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v44 = v52;
    id v52 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1) {
        WTF::fastFree(v44, v43);
      }
      else {
        --*(_DWORD *)v44;
      }
    }
    __int16 v45 = resolve;
    resolve  = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v43);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (uint64_t v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (uint64_t v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        uint64_t v22 = *a5;
        uint64_t v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        unint64_t v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_65;
    }
    JSValueRef v31 = *a5;
    if (*a5)
    {
      id v32 = (void *)MEMORY[0x1E4F30938];
      __int16 v33 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v34 = [v32 valueWithJSValueRef:v31 inContext:v33];

      __int16 v35 = (void *)v34;
    }
    else
    {
      __int16 v35 = 0;
    }
    char v37 = [v35 _isDictionary];

    if ((v37 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      unint64_t v24 = WebKit::toNSDictionary(this, *a5, 0, 0);
      goto LABEL_40;
    }
LABEL_66:
    id v46 = @"an object is expected";
    __int16 v47 = @"filter";
    goto LABEL_67;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    unint64_t v24 = 0;
    goto LABEL_40;
  }
  JSValueRef v14 = *a5;
  if (*a5)
  {
    uint64_t v15 = (void *)MEMORY[0x1E4F30938];
    unint64_t v16 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v17 = [v15 valueWithJSValueRef:v14 inContext:v16];

    uint64_t v18 = (void *)v17;
  }
  else
  {
    uint64_t v18 = 0;
  }
  char v25 = [v18 _isDictionary];

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
    goto LABEL_66;
  }
  if (JSValueIsObject(this, a5[1]) && (id v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    unint64_t v24 = WebKit::toNSDictionary(this, *a5, 0, 0);
    char v27 = a5[1];
    uint64_t v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    uint64_t v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(void *)buf)
    {
      Undefined  = 0;
      goto LABEL_41;
    }
LABEL_40:
    reject  = 0;
    resolve  = 0;
    Undefined  = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    __int16 v53 = resolve;
    *(void *)buf  = this;
    id v52 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v53, &v52, &v49);
    uint64_t v29 = v49;
LABEL_41:
    *(void *)buf  = v29;
    id v48 = 0;
    WebKit::WebExtensionAPIScripting::unregisterContentScripts(v12, v24, (uint64_t *)buf, &v48);
    __int16 v39 = (NSString *)v48;
    uint64_t v40 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf  = 0;
    if (v40) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v40);
    }
    if (v39)
    {
      *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.unregisterContentScripts()", 0, v39, v38);
    }
    else if (Undefined)
    {
LABEL_46:

      goto LABEL_47;
    }
    Undefined  = JSValueMakeUndefined(this);
    goto LABEL_46;
  }
LABEL_65:
  id v46 = @"a function is expected";
  __int16 v47 = @"callback";
LABEL_67:
  *a6  = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.unregisterContentScripts()", &v47->isa, &v46->isa, v21);
  Undefined  = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}