void std::__optional_storage_base<WebCore::PrivateClickMeasurement,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::PrivateClickMeasurement,false> const&>(WebCore::PrivateClickMeasurement *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t vars8;

  if (*((unsigned __int8 *)a1 + 312) == a2[312])
  {
    if (*((unsigned char *)a1 + 312))
    {
      WebCore::PrivateClickMeasurement::operator=((uint64_t)a1, (uint64_t)a2);
    }
  }
  else if (*((unsigned char *)a1 + 312))
  {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement(a1, (WTF::StringImpl *)a2);
    *(unsigned char *)(v2 + 312) = 0;
  }
  else
  {
    *((unsigned char *)WebCore::PrivateClickMeasurement::PrivateClickMeasurement(a1, (const WebCore::PrivateClickMeasurement *)a2)+ 312) = 1;
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 - 8);
  unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
  uint64_t v7 = *(void *)(a1 + 16 * v6);
  if (v7 == a2) {
    return 1;
  }
  int v9 = 1;
  do
  {
    BOOL v8 = v7 != 0;
    if (!v7) {
      break;
    }
    unsigned int v6 = (v6 + v9) & v2;
    uint64_t v7 = *(void *)(a1 + 16 * v6);
    ++v9;
  }
  while (v7 != a2);
  return v8;
}

void std::__optional_destruct_base<WebKit::FrameInfoData,false>::reset[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 296))
  {
    unint64_t v3 = *(WTF::StringImpl **)(a1 + 240);
    *(void *)(a1 + 240) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(unsigned int *)(a1 + 232);
    if (v4 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v4])(&v6, a1 + 208);
    }
    *(_DWORD *)(a1 + 232) = -1;
    unint64_t v5 = *(const void **)(a1 + 200);
    *(void *)(a1 + 200) = 0;
    if (v5) {
      CFRelease(v5);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 8));
    *(unsigned char *)(a1 + 296) = 0;
  }
}

uint64_t WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::WebPopupItem>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 48 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::WebPopupItem>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    unsigned int v3 = result;
    do
    {
      uint64_t v4 = (WTF::StringImpl *)*((void *)v3 + 4);
      *((void *)v3 + 4) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      unint64_t v5 = (WTF::StringImpl *)*((void *)v3 + 3);
      *((void *)v3 + 3) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, a2);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
      result = (WTF::StringImpl *)*((void *)v3 + 1);
      *((void *)v3 + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      unsigned int v3 = (WTF::StringImpl *)((char *)v3 + 48);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData*>(uint64_t result, long long *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    long long v4 = *a2;
    *(unsigned char *)(result + 16) = *((unsigned char *)a2 + 16);
    *(_OWORD *)result = v4;
    WebCore::Color::Color();
    *(_DWORD *)(v3 + 32) = *((_DWORD *)a2 + 8);
    uint64_t v5 = *((void *)a2 + 5);
    *((void *)a2 + 5) = 0;
    *(void *)(v3 + 40) = v5;
    uint64_t v6 = *((void *)a2 + 6);
    *((void *)a2 + 6) = 0;
    *(void *)(v3 + 48) = v6;
    uint64_t v7 = *((void *)a2 + 7);
    *(_DWORD *)(v3 + 64) = *((_DWORD *)a2 + 16);
    *(void *)(v3 + 56) = v7;
    *(void *)(v3 + 72) = 0;
    *(void *)(v3 + 80) = 0;
    uint64_t v8 = *((void *)a2 + 9);
    *((void *)a2 + 9) = 0;
    *(void *)(v3 + 72) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 20);
    *((_DWORD *)a2 + 20) = 0;
    *(_DWORD *)(v3 + 80) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 21);
    *((_DWORD *)a2 + 21) = 0;
    *(_DWORD *)(v3 + 84) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 22);
    *(unsigned char *)(v3 + 92) = *((unsigned char *)a2 + 92);
    *(_DWORD *)(v3 + 88) = v8;
    WebCore::Color::Color();
    long long v9 = *(long long *)((char *)a2 + 136);
    long long v10 = *(long long *)((char *)a2 + 152);
    long long v11 = *(long long *)((char *)a2 + 168);
    long long v12 = *(long long *)((char *)a2 + 177);
    long long v13 = *(long long *)((char *)a2 + 104);
    long long v14 = *(long long *)((char *)a2 + 120);
    *(unsigned char *)(v3 + 208) = 0;
    *(_OWORD *)(v3 + 120) = v14;
    *(_OWORD *)(v3 + 104) = v13;
    *(_OWORD *)(v3 + 177) = v12;
    *(_OWORD *)(v3 + 168) = v11;
    *(_OWORD *)(v3 + 152) = v10;
    *(_OWORD *)(v3 + 136) = v9;
    *(unsigned char *)(v3 + 288) = 0;
    if (*((unsigned char *)a2 + 288))
    {
      std::construct_at[abi:sn180100]<WebCore::FontAttributes,WebCore::FontAttributes,WebCore::FontAttributes*>((void *)(v3 + 208), (uint64_t *)a2 + 26);
      *(unsigned char *)(v3 + 288) = 1;
    }
    __int16 v15 = *((_WORD *)a2 + 148);
    *(unsigned char *)(v3 + 298) = *((unsigned char *)a2 + 298);
    *(_WORD *)(v3 + 296) = v15;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void std::__optional_storage_base<WebKit::EditorState::PostLayoutData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebKit::EditorState::PostLayoutData,false> const&>(WebKit::EditorState::PostLayoutData *this, unsigned __int8 *a2)
{
  if (*((unsigned __int8 *)this + 304) == a2[304])
  {
    if (*((unsigned char *)this + 304))
    {
      long long v4 = *(_OWORD *)a2;
      *((unsigned char *)this + 16) = a2[16];
      *(_OWORD *)this = v4;
      WebCore::Color::operator=();
      *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
      WTF::String::operator=((uint64_t *)this + 5, (WTF::StringImpl **)a2 + 5);
      WTF::String::operator=((uint64_t *)this + 6, (WTF::StringImpl **)a2 + 6);
      int v5 = *((_DWORD *)a2 + 16);
      *((void *)this + 7) = *((void *)a2 + 7);
      *((_DWORD *)this + 16) = v5;
      WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)this + 72, (uint64_t)(a2 + 72));
      unsigned __int8 v6 = a2[92];
      *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
      *((unsigned char *)this + 92) = v6;
      WebCore::Color::operator=();
      long long v7 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)((char *)this + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)((char *)this + 120) = v7;
      long long v8 = *(_OWORD *)(a2 + 152);
      long long v9 = *(_OWORD *)(a2 + 168);
      long long v10 = *(_OWORD *)(a2 + 177);
      *(_OWORD *)((char *)this + 136) = *(_OWORD *)(a2 + 136);
      *(_OWORD *)((char *)this + 177) = v10;
      *(_OWORD *)((char *)this + 168) = v9;
      *(_OWORD *)((char *)this + 152) = v8;
      std::__optional_storage_base<WebCore::FontAttributes,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::FontAttributes,false> const&>((_DWORD *)this + 52, a2 + 208);
      __int16 v11 = *((_WORD *)a2 + 148);
      *((unsigned char *)this + 298) = a2[298];
      *((_WORD *)this + 148) = v11;
    }
  }
  else if (*((unsigned char *)this + 304))
  {
    WebKit::EditorState::PostLayoutData::~PostLayoutData(this, a2);
    *((unsigned char *)this + 304) = 0;
  }
  else
  {
    std::construct_at[abi:sn180100]<WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData const&,WebKit::EditorState::PostLayoutData*>((uint64_t)this, (long long *)a2);
    *((unsigned char *)this + 304) = 1;
  }
}

uint64_t WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    unsigned int v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        unsigned int v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 12) = v5;
      unsigned int v4 = v5;
    }
    if (v4)
    {
      memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      unsigned int v4 = *(_DWORD *)(a1 + 12);
    }
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (v4 != v6)
    {
      long long v7 = (void *)(*(void *)a1 + 8 * v4);
      long long v8 = (uint64_t *)(*(void *)a2 + 8 * v4);
      uint64_t v9 = 8 * v6 - 8 * v4;
      do
      {
        uint64_t v10 = *v8++;
        *v7++ = v10;
        v9 -= 8;
      }
      while (v9);
      unsigned int v4 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 12) = v4;
  }
  return a1;
}

_DWORD *std::__optional_storage_base<WebCore::FontAttributes,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::FontAttributes,false> const&>(_DWORD *result, unsigned __int8 *a2)
{
  uint64_t v3 = result;
  if (*((unsigned __int8 *)result + 80) == a2[80])
  {
    if (*((unsigned char *)result + 80))
    {
      unsigned int v4 = *(_DWORD **)a2;
      if (*(void *)a2) {
        ++*v4;
      }
      unsigned int v5 = *(_DWORD **)result;
      *(void *)uint64_t v3 = v4;
      if (v5) {
        WTF::RefCounted<WebCore::Font>::deref(v5);
      }
      WebCore::Color::operator=();
      WebCore::Color::operator=();
      WebCore::Color::operator=();
      *((_OWORD *)v3 + 2) = *((_OWORD *)a2 + 2);
      *((_WORD *)v3 + 24) = *((_WORD *)a2 + 24);
      result = WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v3 + 14, (uint64_t)(a2 + 56));
      unsigned __int8 v6 = a2[74];
      *((_WORD *)v3 + 36) = *((_WORD *)a2 + 36);
      *((unsigned char *)v3 + 74) = v6;
    }
  }
  else if (*((unsigned char *)result + 80))
  {
    return std::__optional_destruct_base<WebCore::FontAttributes,false>::reset[abi:sn180100](result, a2);
  }
  else
  {
    result = std::construct_at[abi:sn180100]<WebCore::FontAttributes,WebCore::FontAttributes const&,WebCore::FontAttributes*>(result, (uint64_t)a2);
    *((unsigned char *)v3 + 80) = 1;
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  if ((unsigned int *)a2 != a1)
  {
    unsigned int v4 = a1[3];
    unsigned int v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
        unsigned int v4 = a1[3];
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::TextList>::destruct((WTF::StringImpl *)(*(void *)a1 + 24 * v5), (WTF::StringImpl *)(*(void *)a1 + 24 * v4));
      a1[3] = v5;
      unsigned int v4 = v5;
    }
    std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::TextList const*,WebCore::TextList const*,WebCore::TextList*,0>(*(void *)a2, *(void *)a2 + 24 * v4, *(void *)a1);
    uint64_t v6 = a1[3];
    unsigned int v7 = *(_DWORD *)(a2 + 12);
    if (v6 != v7)
    {
      uint64_t v8 = *(void *)a2 + 24 * v7;
      uint64_t v9 = 3 * v6;
      uint64_t v10 = *(void *)a1 + 24 * v6;
      uint64_t v11 = *(void *)a2 + 8 * v9;
      do
      {
        *(unsigned char *)uint64_t v10 = *(unsigned char *)v11;
        long long v12 = *(_DWORD **)(v11 + 8);
        if (v12) {
          *v12 += 2;
        }
        *(void *)(v10 + 8) = v12;
        int v13 = *(_DWORD *)(v11 + 16);
        *(unsigned char *)(v10 + 20) = *(unsigned char *)(v11 + 20);
        *(_DWORD *)(v10 + 16) = v13;
        v11 += 24;
        v10 += 24;
      }
      while (v11 != v8);
      LODWORD(v6) = *(_DWORD *)(a2 + 12);
    }
    a1[3] = v6;
  }
  return a1;
}

uint64_t std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::TextList const*,WebCore::TextList const*,WebCore::TextList*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    *(unsigned char *)a3 = *(unsigned char *)v4;
    WTF::String::operator=((uint64_t *)(a3 + 8), (WTF::StringImpl **)(v4 + 8));
    char v6 = *(unsigned char *)(v4 + 20);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v4 + 16);
    *(unsigned char *)(a3 + 20) = v6;
    a3 += 24;
    v4 += 24;
  }
  while (v4 != v5);
  return v5;
}

uint64_t std::construct_at[abi:sn180100]<WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData const&,WebKit::EditorState::PostLayoutData*>(uint64_t result, long long *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    long long v4 = *a2;
    *(unsigned char *)(result + 16) = *((unsigned char *)a2 + 16);
    *(_OWORD *)result = v4;
    WebCore::Color::Color((WebCore::Color *)(result + 24), (const Color *)a2 + 3);
    *(_DWORD *)(v3 + 32) = *((_DWORD *)a2 + 8);
    uint64_t v5 = (_DWORD *)*((void *)a2 + 5);
    if (v5) {
      *v5 += 2;
    }
    *(void *)(v3 + 40) = v5;
    char v6 = (_DWORD *)*((void *)a2 + 6);
    if (v6) {
      *v6 += 2;
    }
    *(void *)(v3 + 48) = v6;
    uint64_t v7 = *((void *)a2 + 7);
    *(_DWORD *)(v3 + 64) = *((_DWORD *)a2 + 16);
    *(void *)(v3 + 56) = v7;
    WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v3 + 72, (uint64_t)a2 + 72);
    int v8 = *((_DWORD *)a2 + 22);
    *(unsigned char *)(v3 + 92) = *((unsigned char *)a2 + 92);
    *(_DWORD *)(v3 + 88) = v8;
    WebCore::Color::Color((WebCore::Color *)(v3 + 96), (const Color *)a2 + 12);
    long long v9 = *(long long *)((char *)a2 + 136);
    long long v10 = *(long long *)((char *)a2 + 152);
    long long v11 = *(long long *)((char *)a2 + 168);
    long long v12 = *(long long *)((char *)a2 + 177);
    long long v13 = *(long long *)((char *)a2 + 104);
    long long v14 = *(long long *)((char *)a2 + 120);
    *(unsigned char *)(v3 + 208) = 0;
    *(_OWORD *)(v3 + 120) = v14;
    *(_OWORD *)(v3 + 104) = v13;
    *(_OWORD *)(v3 + 177) = v12;
    *(_OWORD *)(v3 + 168) = v11;
    *(_OWORD *)(v3 + 152) = v10;
    *(_OWORD *)(v3 + 136) = v9;
    *(unsigned char *)(v3 + 288) = 0;
    if (*((unsigned char *)a2 + 288))
    {
      std::construct_at[abi:sn180100]<WebCore::FontAttributes,WebCore::FontAttributes const&,WebCore::FontAttributes*>((void *)(v3 + 208), (uint64_t)(a2 + 13));
      *(unsigned char *)(v3 + 288) = 1;
    }
    __int16 v15 = *((_WORD *)a2 + 148);
    *(unsigned char *)(v3 + 298) = *((unsigned char *)a2 + 298);
    *(_WORD *)(v3 + 296) = v15;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 29))
  {
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (v6)
    {
      uint64_t v7 = *(uint64_t **)a2;
      uint64_t v8 = 8 * v6;
      do
      {
        uint64_t v9 = *v7++;
        *v5++ = v9;
        v8 -= 8;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

__n128 std::__optional_storage_base<WebKit::EditorState::VisualData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebKit::EditorState::VisualData,false> const&>(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned __int8 *)(a1 + 112) == *((unsigned __int8 *)a2 + 112))
  {
    if (*(unsigned char *)(a1 + 112))
    {
      long long v4 = *(_OWORD *)a2;
      long long v5 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)a1 = v4;
      WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 48, (uint64_t)(a2 + 6));
      WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 64, (uint64_t)(a2 + 8));
      __n128 result = *((__n128 *)a2 + 6);
      *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
      *(__n128 *)(a1 + 96) = result;
    }
  }
  else if (*(unsigned char *)(a1 + 112))
  {
    std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::reset[abi:sn180100](a1, a2);
  }
  else
  {
    long long v7 = *(_OWORD *)a2;
    long long v8 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)a1 = v7;
    WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 48, a2 + 6);
    WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 64, a2 + 8);
    __n128 result = *((__n128 *)a2 + 5);
    long long v9 = *((_OWORD *)a2 + 6);
    *(__n128 *)(a1 + 80) = result;
    *(_OWORD *)(a1 + 96) = v9;
    *(unsigned char *)(a1 + 112) = 1;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    unsigned int v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        unsigned int v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 12) = v5;
      unsigned int v4 = v5;
    }
    if (v4)
    {
      memmove(*(void **)a1, *(const void **)a2, 84 * v4);
      unsigned int v6 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      unsigned int v6 = 0;
    }
    unsigned int v7 = *(_DWORD *)(a2 + 12);
    if (v6 != v7)
    {
      uint64_t v8 = *(void *)a1 + 84 * v6;
      uint64_t v9 = *(void *)a2 + 84 * v6;
      uint64_t v10 = 84 * v7 - 84 * v6;
      do
      {
        long long v11 = *(_OWORD *)(v9 + 16);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v11;
        long long v12 = *(_OWORD *)(v9 + 32);
        long long v13 = *(_OWORD *)(v9 + 48);
        long long v14 = *(_OWORD *)(v9 + 64);
        *(_DWORD *)(v8 + 80) = *(_DWORD *)(v9 + 80);
        *(_OWORD *)(v8 + 48) = v13;
        *(_OWORD *)(v8 + 64) = v14;
        *(_OWORD *)(v8 + 32) = v12;
        v8 += 84;
        v9 += 84;
        v10 -= 84;
      }
      while (v10);
      unsigned int v6 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 12) = v6;
  }
  return a1;
}

_OWORD *std::construct_at[abi:sn180100]<WebKit::EditorState::VisualData,WebKit::EditorState::VisualData const&,WebKit::EditorState::VisualData*>(_OWORD *result, uint64_t *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    long long v4 = *(_OWORD *)a2;
    long long v5 = *((_OWORD *)a2 + 2);
    result[1] = *((_OWORD *)a2 + 1);
    result[2] = v5;
    *__n128 result = v4;
    WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(result + 3), a2 + 6);
    WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v3 + 4), a2 + 8);
    long long v6 = *((_OWORD *)a2 + 6);
    v3[5] = *((_OWORD *)a2 + 5);
    v3[6] = v6;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  unsigned int v3 = *((_DWORD *)a2 + 3);
  *(void *)__n128 result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0x30C30C4)
  {
    unsigned int v5 = 84 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(84 * v3));
    *(_DWORD *)(v2 + 8) = v5 / 0x54;
    *(void *)uint64_t v2 = v6;
    unsigned int v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      uint64_t v8 = *a2;
      uint64_t v9 = 84 * v7;
      do
      {
        long long v10 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)uint64_t v6 = *(_OWORD *)v8;
        *(_OWORD *)(v6 + 16) = v10;
        long long v11 = *(_OWORD *)(v8 + 32);
        long long v12 = *(_OWORD *)(v8 + 48);
        long long v13 = *(_OWORD *)(v8 + 64);
        *(_DWORD *)(v6 + 80) = *(_DWORD *)(v8 + 80);
        *(_OWORD *)(v6 + 48) = v12;
        *(_OWORD *)(v6 + 64) = v13;
        *(_OWORD *)(v6 + 32) = v11;
        v6 += 84;
        v8 += 84;
        v9 -= 84;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__optional_move_base<WebKit::EditorState::VisualData,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 112) = 0;
  if (*((unsigned char *)a2 + 112))
  {
    long long v4 = *(_OWORD *)a2;
    long long v5 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v5;
    *(_OWORD *)a1 = v4;
    WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 48, a2 + 6);
    WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 64, a2 + 8);
    long long v6 = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 96) = v6;
    *(unsigned char *)(a1 + 112) = 1;
  }
  return a1;
}

unsigned char *std::__optional_destruct_base<WebKit::RemotePageParameters,false>::reset[abi:sn180100](unsigned char *result, WTF::StringImpl *a2)
{
  if (result[208])
  {
    uint64_t v2 = result;
    if (result[200]) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(result + 80), a2);
    }
    WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v2 + 64), a2);
    long long v4 = (WTF::StringImpl *)*((void *)v2 + 7);
    *((void *)v2 + 7) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    __n128 result = *(unsigned char **)v2;
    *(void *)uint64_t v2 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        __n128 result = (unsigned char *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    v2[208] = 0;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEbjdEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJS9_bjdEEERKSR_EEEDcSJ_DpT0_(uint64_t a1, void *a2, _DWORD **a3)
{
  unsigned int v3 = *a3;
  if (*a3) {
    *v3 += 2;
  }
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEbjdEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJS9_bjdEEERKSR_EEEDcSJ_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

uint64_t WebCore::ApplicationManifest::operator=(uint64_t a1, uint64_t a2)
{
  WTF::String::operator=((uint64_t *)a1, (uint64_t *)a2);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  WTF::String::operator=((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  WTF::String::operator=((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  WTF::String::operator=((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
  WTF::URL::operator=(a1 + 40, a2 + 40);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  WTF::URL::operator=(a1 + 88, a2 + 88);
  WTF::URL::operator=(a1 + 128, a2 + 128);
  WTF::URL::operator=(a1 + 168, a2 + 168);
  WebCore::Color::operator=();
  WebCore::Color::operator=();
  uint64_t v4 = *(unsigned int *)(a1 + 236);
  if (v4) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(a1 + 224), (WTF::StringImpl *)(*(void *)(a1 + 224) + 8 * v4));
  }
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 224, (_DWORD *)(a2 + 224));
  unsigned int v5 = *(_DWORD *)(a1 + 252);
  if (v5) {
    WTF::VectorDestructor<true,WebCore::ApplicationManifest::Icon>::destruct(*(WTF::StringImpl **)(a1 + 240), (WTF::StringImpl *)(*(void *)(a1 + 240) + 72 * v5));
  }
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 240, (_DWORD *)(a2 + 240));
  uint64_t v6 = *(unsigned int *)(a1 + 268);
  if (v6) {
    WTF::VectorDestructor<true,WebCore::ApplicationManifest::Shortcut>::destruct(*(WTF::StringImpl **)(a1 + 256), (WTF::StringImpl *)(*(void *)(a1 + 256) + (v6 << 6)));
  }
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 256, (_DWORD *)(a2 + 256));
  return a1;
}

{
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;

  WTF::String::operator=((uint64_t *)a1, (WTF::StringImpl **)a2);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  WTF::String::operator=((uint64_t *)(a1 + 16), (WTF::StringImpl **)(a2 + 16));
  WTF::String::operator=((uint64_t *)(a1 + 24), (WTF::StringImpl **)(a2 + 24));
  WTF::String::operator=((uint64_t *)(a1 + 32), (WTF::StringImpl **)(a2 + 32));
  WTF::String::operator=((uint64_t *)(a1 + 40), (WTF::StringImpl **)(a2 + 40));
  uint64_t v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  WTF::String::operator=((uint64_t *)(a1 + 88), (WTF::StringImpl **)(a2 + 88));
  unsigned int v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  WTF::String::operator=((uint64_t *)(a1 + 128), (WTF::StringImpl **)(a2 + 128));
  uint64_t v6 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v6;
  WTF::String::operator=((uint64_t *)(a1 + 168), (WTF::StringImpl **)(a2 + 168));
  unsigned int v7 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v7;
  WebCore::Color::operator=();
  WebCore::Color::operator=();
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 224), a2 + 224);
  WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 240), (unsigned int *)(a2 + 240));
  if (a2 != a1)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 268);
    uint64_t v9 = *(unsigned int *)(a2 + 268);
    if (v8 <= v9)
    {
      if (v9 > *(_DWORD *)(a1 + 264))
      {
        WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 256, 0);
        WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 256, *(unsigned int *)(a2 + 268));
        LODWORD(v8) = *(_DWORD *)(a1 + 268);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::ApplicationManifest::Shortcut>::destruct((WTF::StringImpl *)(*(void *)(a1 + 256) + (v9 << 6)), (WTF::StringImpl *)(*(void *)(a1 + 256) + (v8 << 6)));
      *(_DWORD *)(a1 + 268) = v9;
      LODWORD(v8) = v9;
    }
    long long v10 = *(void *)(a2 + 256);
    long long v11 = *(void *)(a1 + 256);
    if (v8)
    {
      long long v12 = v10 + ((unint64_t)v8 << 6);
      do
      {
        WTF::String::operator=((uint64_t *)v11, (WTF::StringImpl **)v10);
        WTF::String::operator=((uint64_t *)(v11 + 8), (WTF::StringImpl **)(v10 + 8));
        long long v13 = *(_OWORD *)(v10 + 32);
        *(_OWORD *)(v11 + 16) = *(_OWORD *)(v10 + 16);
        *(_OWORD *)(v11 + 32) = v13;
        WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v11 + 48), (unsigned int *)(v10 + 48));
        v10 += 64;
        v11 += 64;
      }
      while (v10 != v12);
      long long v10 = *(void *)(a2 + 256);
      long long v14 = *(unsigned int *)(a1 + 268);
      long long v11 = *(void *)(a1 + 256);
    }
    else
    {
      long long v14 = 0;
    }
    WTF::VectorCopier<false,WebCore::ApplicationManifest::Shortcut>::uninitializedCopy<WebCore::ApplicationManifest::Shortcut>(v10 + (v14 << 6), v10 + ((unint64_t)*(unsigned int *)(a2 + 268) << 6), v11 + (v14 << 6));
    *(_DWORD *)(a1 + 268) = *(_DWORD *)(a2 + 268);
  }
  return a1;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::ApplicationManifest,WebCore::ApplicationManifest,WebCore::ApplicationManifest*>(uint64_t result, uint64_t *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    *a2 = 0;
    *(void *)__n128 result = v4;
    *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = a2[2];
    a2[2] = 0;
    *(void *)(result + 16) = v5;
    uint64_t v6 = a2[3];
    a2[3] = 0;
    *(void *)(result + 24) = v6;
    uint64_t v7 = a2[4];
    a2[4] = 0;
    *(void *)(result + 32) = v7;
    WTF::URL::URL(result + 40, a2 + 5);
    *(_DWORD *)(v3 + 80) = *((_DWORD *)a2 + 20);
    WTF::URL::URL(v3 + 88, a2 + 11);
    WTF::URL::URL(v3 + 128, a2 + 16);
    WTF::URL::URL(v3 + 168, a2 + 21);
    WebCore::Color::Color();
    WebCore::Color::Color();
    *(void *)(v3 + 224) = 0;
    *(void *)(v3 + 232) = 0;
    uint64_t v8 = a2[28];
    a2[28] = 0;
    *(void *)(v3 + 224) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 58);
    *((_DWORD *)a2 + 58) = 0;
    *(_DWORD *)(v3 + 232) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 59);
    *((_DWORD *)a2 + 59) = 0;
    *(_DWORD *)(v3 + 236) = v8;
    *(void *)(v3 + 240) = 0;
    *(void *)(v3 + 248) = 0;
    uint64_t v9 = a2[30];
    a2[30] = 0;
    *(void *)(v3 + 240) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 62);
    *((_DWORD *)a2 + 62) = 0;
    *(_DWORD *)(v3 + 248) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 63);
    *((_DWORD *)a2 + 63) = 0;
    *(_DWORD *)(v3 + 252) = v9;
    *(void *)(v3 + 256) = 0;
    *(void *)(v3 + 264) = 0;
    uint64_t v10 = a2[32];
    a2[32] = 0;
    *(void *)(v3 + 256) = v10;
    LODWORD(v10) = *((_DWORD *)a2 + 66);
    *((_DWORD *)a2 + 66) = 0;
    *(_DWORD *)(v3 + 264) = v10;
    LODWORD(v10) = *((_DWORD *)a2 + 67);
    *((_DWORD *)a2 + 67) = 0;
    *(_DWORD *)(v3 + 268) = v10;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

WTF::StringImpl *std::__optional_destruct_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>::reset[abi:sn180100](WTF::StringImpl *result)
{
  if (*((unsigned char *)result + 24))
  {
    v1 = result;
    __n128 result = *(WTF::StringImpl **)result;
    if (result) {
      __n128 result = (WTF::StringImpl *)WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable((WTF::StringImpl **)result, (WTF::StringImpl *)*((unsigned int *)v1 + 2));
    }
    *((unsigned char *)v1 + 24) = 0;
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::operator=(uint64_t a1, uint64_t a2)
{
  WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::RobinHoodHashTable((uint64_t)&v7, a2);
  uint64_t v3 = *(WTF::StringImpl ***)a1;
  *(void *)a1 = v7;
  uint64_t v7 = v3;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v8;
  uint64_t v8 = v4;
  int v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v9;
  int v9 = v5;
  LOBYTE(v5) = *(unsigned char *)(a1 + 20);
  *(unsigned char *)(a1 + 20) = v10;
  char v10 = v5;
  if (v3) {
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(v3, (WTF::StringImpl *)v4);
  }
  return a1;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::RobinHoodHashTable(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 13) = 0;
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3) {
    BOOL v4 = *(_DWORD *)(a2 + 12) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v6 = WTF::fastZeroedMalloc((WTF *)(8 * v3));
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    unint64_t v7 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
    unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    *(_DWORD *)(a1 + 16) = (v9 >> 31) ^ v9;
    *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
    unint64_t v10 = *(unsigned int *)(a2 + 8);
    if (v10)
    {
      for (unint64_t i = 0; i < v10; ++i)
      {
        long long v12 = *(WTF::StringImpl **)(*(void *)a2 + 8 * i);
        if (v12)
        {
          *(_DWORD *)v12 += 2;
          int v13 = *(_DWORD *)(a1 + 8);
          int v14 = *(_DWORD *)(a1 + 16);
          unsigned int v15 = *((_DWORD *)v12 + 4);
          if (v15 >= 0x100) {
            unsigned int v16 = v15 >> 8;
          }
          else {
            unsigned int v16 = WTF::StringImpl::hashSlowCase(v12);
          }
          int v17 = v13 - 1;
          unsigned int v18 = (v16 ^ v14) & (v13 - 1);
          v19 = (WTF::StringImpl **)(*(void *)a1 + 8 * v18);
          v20 = *v19;
          if (*v19)
          {
            unsigned int v21 = 0;
            do
            {
              unsigned int v22 = *((_DWORD *)v20 + 4);
              if (v22 >= 0x100) {
                unsigned int v23 = v22 >> 8;
              }
              else {
                unsigned int v23 = WTF::StringImpl::hashSlowCase(v20);
              }
              if (v21 > ((v18 + v13 - ((v23 ^ v14) & v17)) & v17))
              {
                v24 = *v19;
                *v19 = v12;
                long long v12 = v24;
                unsigned int v21 = (v18 + v13 - ((v23 ^ v14) & v17)) & v17;
              }
              unsigned int v18 = (v18 + 1) & v17;
              ++v21;
              v19 = (WTF::StringImpl **)(*(void *)a1 + 8 * v18);
              v20 = *v19;
            }
            while (*v19);
          }
          *v19 = v12;
          unint64_t v10 = *(unsigned int *)(a2 + 8);
        }
      }
    }
  }
  return a1;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy26validateCaptureStateUpdateENS_23ObjectIdentifierGenericIN7WebCore30UserMediaRequestIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS5_12ClientOriginENS5_16ProcessQualifiedINS4_INS5_19FrameIdentifierTypeES8_yLS9_1EEEEEbNS5_29MediaProducerMediaCaptureKindEONS_17CompletionHandlerIFvONSt3__18optionalINS5_9ExceptionEEEEEEENK3__0clISH_SP_EEDaT_T0_EUlbE_vJbEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D9D98;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy26validateCaptureStateUpdateENS_23ObjectIdentifierGenericIN7WebCore30UserMediaRequestIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS5_12ClientOriginENS5_16ProcessQualifiedINS4_INS5_19FrameIdentifierTypeES8_yLS9_1EEEEEbNS5_29MediaProducerMediaCaptureKindEONS_17CompletionHandlerIFvONSt3__18optionalINS5_9ExceptionEEEEEEENK3__0clISH_SP_EEDaT_T0_EUlbE_vJbEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D9D98;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy26validateCaptureStateUpdateENS_23ObjectIdentifierGenericIN7WebCore30UserMediaRequestIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS5_12ClientOriginENS5_16ProcessQualifiedINS4_INS5_19FrameIdentifierTypeES8_yLS9_1EEEEEbNS5_29MediaProducerMediaCaptureKindEONS_17CompletionHandlerIFvONSt3__18optionalINS5_9ExceptionEEEEEEENK3__0clISH_SP_EEDaT_T0_EUlbE_vJbEE4callEb(uint64_t a1, char a2)
{
  if (a2)
  {
    v6[0] = 0;
    char v8 = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6[0] = 31;
    char v8 = 1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v3 + 16))(v3, v6);
  __n128 result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (v8)
  {
    __n128 result = v7;
    unint64_t v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebKit::PrivateClickMeasurementAndMetadata,WebKit::PrivateClickMeasurementAndMetadata,WebKit::PrivateClickMeasurementAndMetadata*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    *(unsigned char *)__n128 result = *(unsigned char *)a2;
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(result + 8) = v4;
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    *(void *)(result + 16) = v5;
    long long v6 = *(_OWORD *)(a2 + 24);
    long long v7 = *(_OWORD *)(a2 + 33);
    *(unsigned char *)(result + 56) = 0;
    uint64_t v8 = result + 56;
    *(_OWORD *)(v8 - 23) = v7;
    *(_OWORD *)(v8 - 32) = v6;
    *(unsigned char *)(v8 + 128) = 0;
    if (*(unsigned char *)(a2 + 184))
    {
      std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v8, a2 + 56);
      *(unsigned char *)(v3 + 184) = 1;
    }
    long long v9 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(v3 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(v3 + 208) = v9;
    *(unsigned char *)(v3 + 224) = 0;
    *(unsigned char *)(v3 + 232) = 0;
    if (*(unsigned char *)(a2 + 232))
    {
      uint64_t v10 = *(void *)(a2 + 224);
      *(void *)(a2 + 224) = 0;
      *(void *)(v3 + 224) = v10;
      *(unsigned char *)(v3 + 232) = 1;
    }
    uint64_t v11 = *(void *)(a2 + 240);
    *(void *)(a2 + 240) = 0;
    *(void *)(v3 + 240) = v11;
    uint64_t v12 = *(void *)(a2 + 248);
    *(void *)(a2 + 248) = 0;
    *(void *)(v3 + 248) = v12;
    uint64_t v13 = *(void *)(a2 + 256);
    *(void *)(a2 + 256) = 0;
    *(void *)(v3 + 256) = v13;
    uint64_t v14 = *(void *)(a2 + 264);
    *(void *)(a2 + 264) = 0;
    *(void *)(v3 + 264) = v14;
    *(unsigned char *)(v3 + 272) = 0;
    *(unsigned char *)(v3 + 296) = 0;
    if (*(unsigned char *)(a2 + 296))
    {
      uint64_t v15 = *(void *)(a2 + 272);
      *(void *)(a2 + 272) = 0;
      *(void *)(v3 + 272) = v15;
      uint64_t v16 = *(void *)(a2 + 280);
      *(void *)(a2 + 280) = 0;
      *(void *)(v3 + 280) = v16;
      uint64_t v17 = *(void *)(a2 + 288);
      *(void *)(a2 + 288) = 0;
      *(void *)(v3 + 288) = v17;
      *(unsigned char *)(v3 + 296) = 1;
    }
    uint64_t v18 = *(void *)(a2 + 304);
    *(void *)(a2 + 304) = 0;
    *(void *)(v3 + 304) = v18;
    uint64_t v19 = *(void *)(a2 + 312);
    *(void *)(a2 + 312) = 0;
    *(void *)(v3 + 312) = v19;
    uint64_t v20 = *(void *)(a2 + 320);
    *(void *)(a2 + 320) = 0;
    *(void *)(v3 + 320) = v20;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages7WebPage26RenderTreeAsTextForTestingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages7WebPage19FrameTextForTestingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages7WebPage29BindRemoteAccessibilityFramesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(WTF **)(a2 + 8);
  if (v3)
  {
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    WTF::fastFree(v3, (void *)a2);
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

uint64_t WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL const&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  long long v6 = *(_DWORD **)v3;
  if (*(void *)v3) {
    *v6 += 2;
  }
  uint64_t v7 = v5 + 40 * v4;
  *(void *)uint64_t v7 = v6;
  long long v8 = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(v7 + 8) = v8;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebCore::RegistrableDomain>>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash ***a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebCore::RegistrableDomain>>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebCore::RegistrableDomain>>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>>::rehash(uint64_t *a1, unsigned int a2, WTF::ASCIICaseInsensitiveHash ***a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (WTF::ASCIICaseInsensitiveHash ***)(v6 + 8 * v11);
      if ((unint64_t)*v13 + 1 >= 2)
      {
        uint64_t v14 = *a1;
        if (*a1) {
          unsigned int v15 = *(_DWORD *)(v14 - 8);
        }
        else {
          unsigned int v15 = 0;
        }
        int v16 = WTF::ASCIICaseInsensitiveHash::hash(**v13, v10);
        int v17 = 0;
        do
        {
          uint64_t v18 = v16 & v15;
          int v16 = ++v17 + v18;
        }
        while (*(void *)(v14 + 8 * v18));
        *(void *)(v14 + 8 * v18) = *v13;
        if (v13 == a3) {
          uint64_t v12 = v14 + 8 * v18;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void *WTF::Detail::CallableWrapper<WebKit::WebLockRegistryProxy::requestLock(WebCore::ClientOrigin &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin &&<WTF::UUID>,WTF::String &&,WebCore::WebLockMode,BOOL,BOOL)::$_0,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D9E28;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebLockRegistryProxy::requestLock(WebCore::ClientOrigin &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin &&<WTF::UUID>,WTF::String &&,WebCore::WebLockMode,BOOL,BOOL)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D9E28;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebLockRegistryProxy::requestLock(WebCore::ClientOrigin &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin &&<WTF::UUID>,WTF::String &&,WebCore::WebLockMode,BOOL,BOOL)::$_0,void,BOOL>::call(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 16);
      v5[0] = result + 24;
      v5[1] = result + 48;
      char v6 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::RemoteWebLockRegistry::DidCompleteLockRequest>(v4, (uint64_t)v5);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebLockRegistryProxy::requestLock(WebCore::ClientOrigin &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin &&<WTF::UUID>,WTF::String &&,WebCore::WebLockMode,BOOL,BOOL)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D9E50;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebLockRegistryProxy::requestLock(WebCore::ClientOrigin &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin &&<WTF::UUID>,WTF::String &&,WebCore::WebLockMode,BOOL,BOOL)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D9E50;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebLockRegistryProxy::requestLock(WebCore::ClientOrigin &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin &&<WTF::UUID>,WTF::String &&,WebCore::WebLockMode,BOOL,BOOL)::$_1,void>::call(IPC::Encoder *result)
{
  uint64_t v1 = *((void *)result + 2);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = result;
      uint64_t v4 = *(void *)(v2 + 16);
      unsigned int v5 = (uint64_t *)((char *)result + 24);
      char v6 = (uint64_t *)((char *)result + 48);
      int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)int v7 = 1444;
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      uint64_t v14 = v7;
      IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v7, v5);
      v12[0] = *((void *)v3 + 4);
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, v12);
      IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(v7, v6);
      LOBYTE(v12[0]) = 0;
      char v13 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v4, &v14, 0, (uint64_t)v12, 1);
      if (v13)
      {
        uint64_t v9 = v12[0];
        v12[0] = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
      }
      uint64_t result = v14;
      uint64_t v14 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v8);
        return (IPC::Encoder *)WTF::fastFree(v10, v11);
      }
    }
  }
  return result;
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,API::Navigation*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a3;
  unint64_t v12 = *a3 + ~(*a3 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  int v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *int v16 = v11;
    uint64_t v20 = *a4;
    if (v20) {
      CFRetain(*(CFTypeRef *)(v20 + 8));
    }
    uint64_t v21 = v16[1];
    v16[1] = v20;
    if (v21) {
      CFRelease(*(CFTypeRef *)(v21 + 8));
    }
    uint64_t v22 = *a2;
    if (*a2) {
      int v23 = *(_DWORD *)(v22 - 12) + 1;
    }
    else {
      int v23 = 1;
    }
    *(_DWORD *)(v22 - 12) = v23;
    uint64_t v25 = *a2;
    if (*a2) {
      int v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
    unint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_26:
        int v16 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a2, v16);
        uint64_t v25 = *a2;
        if (*a2) {
          unint64_t v28 = *(unsigned int *)(v25 - 4);
        }
        else {
          unint64_t v28 = 0;
        }
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_26;
    }
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = v25 + 16 * v28;
    *(unsigned char *)(a1 + 16) = 1;
    return;
  }
  uint64_t v18 = 0;
  int v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1) {
      uint64_t v18 = v16;
    }
    unsigned int v15 = (v15 + v19) & v10;
    int v16 = (uint64_t *)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *uint64_t v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        uint64_t v11 = *a3;
        int v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *(unsigned int *)(v8 - 4);
  }
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v8 + 16 * v24;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v29 = *a4;
  if (*a4) {
    CFRetain(*(CFTypeRef *)(v29 + 8));
  }
  uint64_t v30 = v16[1];
  v16[1] = v29;
  if (v30)
  {
    v31 = *(const void **)(v30 + 8);
    CFRelease(v31);
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          int v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = v26[1];
          v26[1] = 0;
          if (v27) {
            CFRelease(*(CFTypeRef *)(v27 + 8));
          }
          *int v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30) {
            CFRelease(*(CFTypeRef *)(v30 + 8));
          }
          if (v13 == a3) {
            unint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(void *)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16) {
            CFRelease(*(CFTypeRef *)(v16 + 8));
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v8 >> 1, 0);
    }
  }
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::forMostVisibleWebPageIfAny(PAL::SessionID,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy*)> &&)::$_0,void,WebKit::WebPageProxy&>::call(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 328))
  {
    if ((__int16 v3 = *(_WORD *)(*(void *)(a2 + 32) + 64), (v3 & 4) != 0)
      && ((uint64_t v4 = *(uint64_t **)(a1 + 8), !*v4) || (*(_WORD *)(*(void *)(*v4 + 32) + 64) & 4) == 0)
      || (v3 & 2) != 0 && ((uint64_t v4 = *(uint64_t **)(a1 + 8), !*v4) || (*(_WORD *)(*(void *)(*v4 + 32) + 64) & 2) == 0))
    {
      CFRetain(*(CFTypeRef *)(a2 + 8));
      uint64_t v5 = *v4;
      *uint64_t v4 = a2;
      if (v5)
      {
        uint64_t v6 = *(const void **)(v5 + 8);
        CFRelease(v6);
      }
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::ProcessActivityState::takeMutedCaptureAssertion(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  __int16 v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D9EA0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::ProcessActivityState::takeMutedCaptureAssertion(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  __int16 v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D9EA0;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::ProcessActivityState::takeMutedCaptureAssertion(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      __int16 v3 = qword_1EB358348;
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "Muted capture assertion is invalidated", v6, 2u);
      }
      uint64_t v5 = *(void *)(v2 + 608);
      *(void *)(v2 + 608) = 0;
      if (v5) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 8), v4);
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebPageProxy::*&)(void),WebKit::WebPageProxy*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  __int16 v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

WTF::StringImpl *API::NavigationClient::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 464);
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v8);
  CFTypeRef cf = 0;
  WebKit::AuthenticationDecisionListener::completeChallenge(v3);
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = v9;
  uint64_t v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t result = v8;
  unsigned int v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t API::NavigationClient::shouldAllowLegacyTLS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 1);
  CFTypeRef v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t API::NavigationClient::shouldBypassContentModeSafeguards(API::NavigationClient *this)
{
  return 0;
}

uint64_t API::NavigationClient::processDidTerminate()
{
  return 0;
}

WTF *API::NavigationClient::legacyWebCryptoMasterKey(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  LOBYTE(v6) = 0;
  char v8 = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v3 + 16))(v3, &v6);
  uint64_t result = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (v8)
  {
    uint64_t result = v6;
    if (v6)
    {
      uint64_t v6 = 0;
      int v7 = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

void API::NavigationClient::decidePolicyForNavigationAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
}

void API::NavigationClient::decidePolicyForNavigationResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
}

uint64_t API::NavigationClient::willGoToBackForwardListItem()
{
  return 0;
}

uint64_t API::NavigationClient::decidePolicyForSOAuthorizationLoad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, a3);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::WebPageProxy(WebKit::PageClient &,WebKit::WebProcessProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&)::$_1,void,PAL::HysteresisState>::call(uint64_t a1, char a2)
{
  return WebKit::WebPageProxy::recentGamepadAccessStateChanged(*(void *)(a1 + 8), a2);
}

unsigned int *WTF::Vector<WebKit::WebPageProxy::InjectedBundleMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = (uint64_t *)(*(void *)a1 + 8);
    do
    {
      uint64_t v6 = *v5;
      *uint64_t v5 = 0;
      if (v6) {
        CFRelease(*(CFTypeRef *)(v6 + 8));
      }
      int v7 = (WTF::StringImpl *)*(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, a2);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  char v8 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v8, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::WebPageProxy(WebKit::PageClient &,WebKit::WebProcessProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&)::$_2,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DA0E0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::WebPageProxy(WebKit::PageClient &,WebKit::WebProcessProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DA0E0;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::WebPageProxy(WebKit::PageClient &,WebKit::WebProcessProxy &,WTF::Ref<API::PageConfiguration,WTF::RawPtrTraits<API::PageConfiguration>,WTF::DefaultRefDerefTraits<API::PageConfiguration>> &&)::$_2,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      WebKit::WebPageProxy::sendCachedLinkDecorationFilteringData((WebKit::WebPageProxy *)(v2 - 16));
      uint64_t v3 = *(const void **)(v2 - 8);
      CFRelease(v3);
    }
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetHasResourceLoadClient>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2434;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::handleMessageWithAsyncReply(WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)::$_0,void,WTF::RefPtr<API::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DA108;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::handleMessageWithAsyncReply(WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)::$_0,void,WTF::RefPtr<API::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DA108;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::handleMessageWithAsyncReply(WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)::$_0,void,WTF::RefPtr<API::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v5 = v2;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 16))(v3, &v5);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  uint64_t v4 = v5;
  uint64_t v5 = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::handleSynchronousMessage(IPC::Connection &,WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)::$_0,void,WTF::RefPtr<API::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DA130;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::handleSynchronousMessage(IPC::Connection &,WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)::$_0,void,WTF::RefPtr<API::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DA130;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::handleSynchronousMessage(IPC::Connection &,WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)::$_0,void,WTF::RefPtr<API::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::call(uint64_t a1, const void **a2)
{
  uint64_t v3 = *a2;
  uint64_t v9 = (CFTypeRef *)&unk_1EE9DCAF8;
  WebKit::UserData::transform(v3, (uint64_t)&v9, &v8);
  uint64_t v4 = v8;
  uint64_t v8 = 0;
  uint64_t v9 = (CFTypeRef *)v4;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, CFTypeRef **))(*(void *)v5 + 16))(v5, &v9);
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  uint64_t v6 = v9;
  uint64_t v9 = 0;
  if (v6) {
    CFRelease(v6[1]);
  }
  uint64_t v7 = v8;
  uint64_t v8 = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::PostInjectedBundleMessage>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2339;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v14 = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *a2);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(v6, a2[1]);
  LOBYTE(v12) = 0;
  char v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int> const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int,std::optional<unsigned int> const&>,0ul,1ul>(IPC::Encoder *a1, int *a2)
{
  int v4 = *a2;
  uint64_t v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v5 = v4;
    uint64_t v7 = *((void *)a2 + 1);
    return IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::close(void)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DA158;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)v2;
    uint64_t v4 = *(void *)(v2 + 8) - 1;
    *(void *)(v2 + 8) = v4;
    if (v3)
    {
      uint64_t v5 = *v3;
      if (!*v3) {
        goto LABEL_8;
      }
      char v6 = *(unsigned char *)(v2 + 16);
      *(unsigned char *)(v2 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
      *(unsigned char *)(v2 + 16) = v6;
      if (*(void *)v2) {
        goto LABEL_8;
      }
      uint64_t v4 = *(void *)(v2 + 8);
    }
    if (!v4) {
      MEMORY[0x199740C10](v2, 0x1020C40545B2139);
    }
  }
LABEL_8:
  uint64_t v7 = a1[2];
  a1[2] = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::close(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DA158;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)v3;
    uint64_t v5 = *(void *)(v3 + 8) - 1;
    *(void *)(v3 + 8) = v5;
    if (v4)
    {
      uint64_t v6 = *v4;
      if (!*v4) {
        goto LABEL_8;
      }
      char v7 = *(unsigned char *)(v3 + 16);
      *(unsigned char *)(v3 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
      *(unsigned char *)(v3 + 16) = v7;
      if (*(void *)v3) {
        goto LABEL_8;
      }
      uint64_t v5 = *(void *)(v3 + 8);
    }
    if (!v5) {
      MEMORY[0x199740C10](v3, 0x1020C40545B2139);
    }
  }
LABEL_8:
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v8) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::close(void)::$_0,void>::call(uint64_t a1)
{
  char v2 = 0;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::Close>(*(void *)(a1 + 16), (uint64_t)&v2, *(void *)(a1 + 8), 0);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TryClose,WebKit::WebPageProxy::tryClose(void)::$_0>(WebKit::WebPageProxy::tryClose(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DA180;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TryClose,WebKit::WebPageProxy::tryClose(void)::$_0>(WebKit::WebPageProxy::tryClose(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DA180;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TryClose,WebKit::WebPageProxy::tryClose(void)::$_0>(WebKit::WebPageProxy::tryClose(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 16);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6)
        {
          char v7 = v4;
          uint64_t v8 = *(void *)(a1 + 8);
          CFRetain(*(CFTypeRef *)(v6 - 8));
          if (WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(*(void *)(v8 + 32) + 1784)))
          {
            WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(*(void *)(v8 + 32) + 1784));
            if (v7) {
              WebKit::WebPageProxy::closePage(v8);
            }
          }
          uint64_t v9 = *(const void **)(v6 - 8);
          CFRelease(v9);
        }
      }
      return;
    }
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v12 = a2[3];
    if (v12 && v11) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
    }
  }
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);

  IPC::Connection::cancelReply<Messages::WebPage::TryClose,WebKit::WebPageProxy::tryClose(void)::$_0>(v13, v14);
}

void IPC::Connection::cancelReply<Messages::WebPage::TryClose,WebKit::WebPageProxy::tryClose(void)::$_0>(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a2 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      if (WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(*(void *)(a1 + 32) + 1784))) {
        WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(*(void *)(a1 + 32) + 1784));
      }
      unsigned __int16 v4 = *(const void **)(v2 - 8);
      CFRelease(v4);
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle(WebKit::WebProcessProxy &,WTF::URL const&,WTF::URL const&,BOOL,WTF::CompletionHandler<void ()(std::optional<WebKit::SandboxExtensionHandle>)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9DA1A8;
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 8));
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9DA1A8;
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle(WebKit::WebProcessProxy &,WTF::URL const&,WTF::URL const&,BOOL,WTF::CompletionHandler<void ()(std::optional<WebKit::SandboxExtensionHandle>)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(const char ***)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = v1;
  char v3 = 1;
  WTF::CompletionHandler<void ()(std::optional<WebKit::SandboxExtensionHandle>)>::operator()((uint64_t *)(a1 + 16), (uint64_t)&v2);
  if (v3) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v2);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle(WebKit::WebProcessProxy &,WTF::URL const&,WTF::URL const&,BOOL,WTF::CompletionHandler<void ()(std::optional<WebKit::SandboxExtensionHandle>)> &&)::$_1,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9DA1D0;
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 8));
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9DA1D0;
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle(WebKit::WebProcessProxy &,WTF::URL const&,WTF::URL const&,BOOL,WTF::CompletionHandler<void ()(std::optional<WebKit::SandboxExtensionHandle>)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v1 = *(const char ***)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = v1;
  char v3 = 1;
  WTF::CompletionHandler<void ()(std::optional<WebKit::SandboxExtensionHandle>)>::operator()((uint64_t *)(a1 + 16), (uint64_t)&v2);
  if (v3) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v2);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle(WebKit::WebProcessProxy &,WTF::URL const&,WTF::URL const&,BOOL,WTF::CompletionHandler<void ()(std::optional<WebKit::SandboxExtensionHandle>)> &&)::$_2,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9DA1F8;
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 8));
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9DA1F8;
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle(WebKit::WebProcessProxy &,WTF::URL const&,WTF::URL const&,BOOL,WTF::CompletionHandler<void ()(std::optional<WebKit::SandboxExtensionHandle>)> &&)::$_2,void>::call(uint64_t a1)
{
  uint64_t v1 = *(const char ***)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = v1;
  char v3 = 1;
  WTF::CompletionHandler<void ()(std::optional<WebKit::SandboxExtensionHandle>)>::operator()((uint64_t *)(a1 + 16), (uint64_t)&v2);
  if (v3) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v2);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequest>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2312;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WebKit::LoadParameters,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadRequestWithNavigationShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,API::Navigation &,WTF::ObjectIdentifierGeneric::ResourceRequest &&,WTF::ObjectIdentifierGeneric::ShouldOpenExternalURLsPolicy,WTF::ObjectIdentifierGeneric::IsPerformingHTTPFallback,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::Object *,WTF::ObjectIdentifierGeneric::ShouldTreatAsContinuingLoad,std::optional<WebKit::NavigatingToAppBoundDomain>,WTF::ObjectIdentifierGeneric::ShouldTreatAsContinuingLoad<WebKit::WebsitePoliciesData> &&,WTF::ObjectIdentifierGeneric::ShouldTreatAsContinuingLoad<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>>)::$_0,void,WTF::ObjectIdentifierGeneric::ShouldTreatAsContinuingLoad<WebKit::SandboxExtensionHandle>>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DA220;
  uint64_t v3 = a1[81];
  a1[81] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  unsigned __int16 v4 = (WTF::StringImpl *)a1[76];
  a1[76] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)(a1 + 3), a2);
  uint64_t v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  char v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadRequestWithNavigationShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,API::Navigation &,WTF::ObjectIdentifierGeneric::ResourceRequest &&,WTF::ObjectIdentifierGeneric::ShouldOpenExternalURLsPolicy,WTF::ObjectIdentifierGeneric::IsPerformingHTTPFallback,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::Object *,WTF::ObjectIdentifierGeneric::ShouldTreatAsContinuingLoad,std::optional<WebKit::NavigatingToAppBoundDomain>,WTF::ObjectIdentifierGeneric::ShouldTreatAsContinuingLoad<WebKit::WebsitePoliciesData> &&,WTF::ObjectIdentifierGeneric::ShouldTreatAsContinuingLoad<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>>)::$_0,void,WTF::ObjectIdentifierGeneric::ShouldTreatAsContinuingLoad<WebKit::SandboxExtensionHandle>>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DA220;
  uint64_t v3 = a1[81];
  a1[81] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  unsigned __int16 v4 = (WTF::StringImpl *)a1[76];
  a1[76] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)(a1 + 3), a2);
  uint64_t v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  char v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v5);
  }

  return WTF::fastFree((WTF *)a1, v5);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadRequestWithNavigationShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,API::Navigation &,WTF::ObjectIdentifierGeneric::ResourceRequest &&,WTF::ObjectIdentifierGeneric::ShouldOpenExternalURLsPolicy,WTF::ObjectIdentifierGeneric::IsPerformingHTTPFallback,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::Object *,WTF::ObjectIdentifierGeneric::ShouldTreatAsContinuingLoad,std::optional<WebKit::NavigatingToAppBoundDomain>,WTF::ObjectIdentifierGeneric::ShouldTreatAsContinuingLoad<WebKit::WebsitePoliciesData> &&,WTF::ObjectIdentifierGeneric::ShouldTreatAsContinuingLoad<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1>>)::$_0,void,WTF::ObjectIdentifierGeneric::ShouldTreatAsContinuingLoad<WebKit::SandboxExtensionHandle>>::call(uint64_t a1, uint64_t a2)
{
  int v3 = 0;
  LOBYTE(v27) = 0;
  unsigned __int8 v28 = 0;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a2 + 8))
  {
    int v26 = *(const char ***)a2;
    *(void *)a2 = 0;
    uint64_t v27 = v26;
    int v3 = 1;
    unsigned __int8 v28 = 1;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    if (*(void *)(v5 + 8))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 8);
        if (v7)
        {
          if (v4)
          {
            uint64_t v8 = v27;
            uint64_t v27 = 0;
            std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a1 + 272), v8);
            uint64_t v9 = *(void *)(a1 + 8);
            if (!v9)
            {
              uint64_t v10 = 0;
LABEL_14:
              WebKit::WebPageProxy::prepareToLoadWebPage(v10, a1 + 24);
              if (!*(unsigned char *)(a1 + 664))
              {
                uint64_t v11 = *(void *)(a1 + 8);
                if (v11)
                {
                  uint64_t v12 = *(void *)(v11 + 8);
                  if (v12) {
                    uint64_t v13 = v12 - 16;
                  }
                  else {
                    uint64_t v13 = 0;
                  }
                }
                else
                {
                  uint64_t v13 = 0;
                }
                WebCore::ResourceRequest::ResourceRequest(v29, (const String *)(a1 + 72));
                WebKit::WebPageProxy::preconnectTo(v13, (WebCore::ResourceRequestBase *)v29);
                CFTypeRef v14 = cf;
                CFTypeRef cf = 0;
                if (v14) {
                  CFRelease(v14);
                }
                WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v29);
              }
              *(unsigned char *)(*(void *)(a1 + 648) + 3480) = 1;
              uint64_t v15 = *(void *)(a1 + 16);
              if (v15) {
                uint64_t v16 = *(void *)(v15 + 8);
              }
              else {
                uint64_t v16 = 0;
              }
              {
                WebKit::liveProcessesLRU(void)::processes = 0u;
                *(_OWORD *)algn_1EB35A7B8 = 0u;
              }
              WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, v16);
              uint64_t v17 = *(void *)(a1 + 16);
              uint64_t v18 = *(void *)(*(void *)(v17 + 8) + 136);
              if (!v18 || !*(unsigned char *)(v18 + 104)) {
                goto LABEL_34;
              }
              char v19 = WTF::URL::protocolIs();
              uint64_t v17 = *(void *)(a1 + 16);
              if (v19)
              {
                if (v17) {
                  uint64_t v20 = *(void *)(v17 + 8);
                }
                else {
                  uint64_t v20 = 0;
                }
                uint64_t v23 = *(void *)(*(void *)(a1 + 8) + 8);
                if (v23) {
                  uint64_t v24 = v23 - 16;
                }
                else {
                  uint64_t v24 = 0;
                }
                uint64_t v25 = *(void *)(v24 + 32);
                v29[0] = (CFTypeRef)(a1 + 24);
                v29[1] = (CFTypeRef)(v25 + 1096);
                v29[2] = (CFTypeRef)(v25 + 760);
                char v30 = 1;
                WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequestWaitingForProcessLaunch>(v20, (uint64_t)v29, *(void *)(a1 + 656));
                goto LABEL_36;
              }
              if (!v17) {
                uint64_t v21 = 0;
              }
              else {
LABEL_34:
              }
                uint64_t v21 = *(void *)(v17 + 8);
              v29[0] = (CFTypeRef)(a1 + 24);
              WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequest>(v21, (uint64_t *)v29, *(void *)(a1 + 656), 0);
LABEL_36:
              uint64_t v22 = *(void *)(a1 + 16);
              if (v22) {
                uint64_t v22 = *(void *)(v22 + 8);
              }
              if (*(unsigned char *)(v22 + 169))
              {
                WebKit::ResponsivenessTimer::start(v22 + 56);
                int v3 = v28;
              }
              else if (!*(unsigned char *)(v22 + 185))
              {
                *(_WORD *)(v22 + 184) = 256;
              }
              goto LABEL_42;
            }
            uint64_t v7 = *(void *)(v9 + 8);
          }
          if (v7) {
            uint64_t v10 = v7 - 16;
          }
          else {
            uint64_t v10 = 0;
          }
          goto LABEL_14;
        }
      }
    }
  }
LABEL_42:
  if (v3) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v27);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequestWaitingForProcessLaunch>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2313;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v17 = v6;
  IPC::ArgumentCoder<WebKit::LoadParameters,void>::encode(v6, *(void *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, *(uint64_t **)(a2 + 16));
  char v7 = *(unsigned char *)(a2 + 24);
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(v6, 1uLL, 1);
  if (v9)
  {
    *uint64_t v8 = v7;
    LOBYTE(v15) = 0;
    char v16 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, 0, (uint64_t)&v15, 1);
    if (v16)
    {
      uint64_t v11 = v15;
      uint64_t v15 = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
    }
    uint64_t result = (uint64_t)v17;
    uint64_t v17 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
      return WTF::fastFree(v13, v14);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadFile(WTF::String const&,WTF::String const&,BOOL,API::Object *)::$_0,void,std::optional<WebKit::SandboxExtensionHandle>>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DA248;
  int v3 = (WTF::StringImpl *)a1[81];
  a1[81] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int v4 = (WTF::StringImpl *)a1[76];
  a1[76] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)(a1 + 3), a2);
  uint64_t v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  char v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadFile(WTF::String const&,WTF::String const&,BOOL,API::Object *)::$_0,void,std::optional<WebKit::SandboxExtensionHandle>>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v2 = (WTF *)WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadFile(WTF::String const&,WTF::String const&,BOOL,API::Object *)::$_0,void,std::optional<WebKit::SandboxExtensionHandle>>::~CallableWrapper(a1, a2);

  return WTF::fastFree(v2, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadFile(WTF::String const&,WTF::String const&,BOOL,API::Object *)::$_0,void,std::optional<WebKit::SandboxExtensionHandle>>::call(uint64_t a1, uint64_t a2)
{
  int v3 = 0;
  LOBYTE(v21) = 0;
  unsigned __int8 v22 = 0;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v20 = *(const char ***)a2;
    *(void *)a2 = 0;
    uint64_t v21 = v20;
    int v3 = 1;
    unsigned __int8 v22 = 1;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      if (v7)
      {
        if (*(void *)(v7 + 8))
        {
          if (v4)
          {
            uint64_t v8 = v21;
            uint64_t v21 = 0;
            std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a1 + 272), v8);
            uint64_t v9 = *(void *)(a1 + 8);
            if (!v9)
            {
              uint64_t v10 = 0;
              goto LABEL_14;
            }
            uint64_t v6 = *(void *)(v9 + 8);
          }
          if (v6) {
            uint64_t v10 = v6 - 16;
          }
          else {
            uint64_t v10 = 0;
          }
LABEL_14:
          WebKit::WebPageProxy::prepareToLoadWebPage(v10, a1 + 24);
          uint64_t v11 = *(void *)(a1 + 16);
          if (v11) {
            uint64_t v12 = *(void *)(v11 + 8);
          }
          else {
            uint64_t v12 = 0;
          }
          {
            WebKit::liveProcessesLRU(void)::processes = 0u;
            *(_OWORD *)algn_1EB35A7B8 = 0u;
          }
          WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, v12);
          uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 136);
          if (v13 && *(unsigned char *)(v13 + 104))
          {
            uint64_t v14 = *(void *)(*(void *)(a1 + 8) + 8);
            if (v14) {
              uint64_t v15 = v14 - 16;
            }
            else {
              uint64_t v15 = 0;
            }
            uint64_t v16 = *(void *)(v15 + 32);
            v23[0] = a1 + 24;
            v23[1] = a1 + 648;
            v23[2] = v16 + 760;
            char v24 = 0;
            WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequestWaitingForProcessLaunch>(*(void *)(v15 + 256), (uint64_t)v23, *(void *)(v16 + 1928));
          }
          else
          {
            uint64_t v17 = *(void *)(*(void *)(a1 + 8) + 8);
            if (v17) {
              uint64_t v18 = v17 - 16;
            }
            else {
              uint64_t v18 = 0;
            }
            v23[0] = a1 + 24;
            WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequest>(*(void *)(v18 + 256), v23, *(void *)(*(void *)(v18 + 32) + 1928), 0);
          }
          uint64_t v19 = *(void *)(a1 + 16);
          if (v19) {
            uint64_t v19 = *(void *)(v19 + 8);
          }
          if (*(unsigned char *)(v19 + 169))
          {
            WebKit::ResponsivenessTimer::start(v19 + 56);
            int v3 = v22;
          }
          else if (!*(unsigned char *)(v19 + 185))
          {
            *(_WORD *)(v19 + 184) = 256;
          }
        }
      }
    }
  }
  if (v3) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v21);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadDataWithNavigationShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,API::Navigation &,WTF::Ref<WTF::ObjectIdentifierGeneric::SharedBuffer,WTF::RawPtrTraits<API::Navigation &>,WTF::DefaultRefDerefTraits<API::Navigation &>> &&,WTF::String const&,WTF::String,WTF::String,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::Object *,WTF::ObjectIdentifierGeneric::ShouldTreatAsContinuingLoad,std::optional<WebKit::NavigatingToAppBoundDomain>,WTF::ObjectIdentifierGeneric::ShouldTreatAsContinuingLoad<WebKit::WebsitePoliciesData> &&,WTF::ObjectIdentifierGeneric::ShouldOpenExternalURLsPolicy,WTF::ObjectIdentifierGeneric::SessionHistoryVisibility)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DA270;
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)(a1 + 3), a2);
  int v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadDataWithNavigationShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,API::Navigation &,WTF::Ref<WTF::ObjectIdentifierGeneric::SharedBuffer,WTF::RawPtrTraits<API::Navigation &>,WTF::DefaultRefDerefTraits<API::Navigation &>> &&,WTF::String const&,WTF::String,WTF::String,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::Object *,WTF::ObjectIdentifierGeneric::ShouldTreatAsContinuingLoad,std::optional<WebKit::NavigatingToAppBoundDomain>,WTF::ObjectIdentifierGeneric::ShouldTreatAsContinuingLoad<WebKit::WebsitePoliciesData> &&,WTF::ObjectIdentifierGeneric::ShouldOpenExternalURLsPolicy,WTF::ObjectIdentifierGeneric::SessionHistoryVisibility)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DA270;
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)(a1 + 3), a2);
  int v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadDataWithNavigationShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,API::Navigation &,WTF::Ref<WTF::ObjectIdentifierGeneric::SharedBuffer,WTF::RawPtrTraits<API::Navigation &>,WTF::DefaultRefDerefTraits<API::Navigation &>> &&,WTF::String const&,WTF::String,WTF::String,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::Object *,WTF::ObjectIdentifierGeneric::ShouldTreatAsContinuingLoad,std::optional<WebKit::NavigatingToAppBoundDomain>,WTF::ObjectIdentifierGeneric::ShouldTreatAsContinuingLoad<WebKit::WebsitePoliciesData> &&,WTF::ObjectIdentifierGeneric::ShouldOpenExternalURLsPolicy,WTF::ObjectIdentifierGeneric::SessionHistoryVisibility)::$_0,void>::call(IPC::Encoder *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      int v3 = result;
      uint64_t v4 = (uint64_t)result + 24;
      uint64_t v5 = *((void *)result + 2);
      uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v6 = 2309;
      *((void *)v6 + 1) = v5;
      *((void *)v6 + 66) = (char *)v6 + 16;
      *((void *)v6 + 67) = 512;
      *((void *)v6 + 68) = 0;
      *((void *)v6 + 70) = 0;
      *((void *)v6 + 69) = 0;
      IPC::Encoder::encodeHeader(v6);
      uint64_t v14 = v6;
      IPC::ArgumentCoder<WebKit::LoadParameters,void>::encode(v6, v4);
      LOBYTE(v12) = 0;
      char v13 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v2, &v14, 0, (uint64_t)&v12, 1);
      if (v13)
      {
        uint64_t v8 = v12;
        uint64_t v12 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
      }
      uint64_t result = v14;
      uint64_t v14 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v7);
        uint64_t result = (IPC::Encoder *)WTF::fastFree(v10, v11);
      }
      uint64_t v9 = *((void *)v3 + 1);
      if (v9) {
        uint64_t v9 = *(void *)(v9 + 8);
      }
      if (*(unsigned char *)(v9 + 169))
      {
        return (IPC::Encoder *)WebKit::ResponsivenessTimer::start(v9 + 56);
      }
      else if (!*(unsigned char *)(v9 + 185))
      {
        *(_WORD *)(v9 + 184) = 256;
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadSimulatedRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse &&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::ResourceResponse &&>,WTF::DefaultRefDerefTraits<WebCore::ResourceResponse &&>> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DA298;
  int v3 = (WebCore::ResourceResponseBase *)(a1 + 75);
  uint64_t v4 = (const void *)a1[105];
  a1[105] = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)(a1 + 2), v5);
  uint64_t v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadSimulatedRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse &&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::ResourceResponse &&>,WTF::DefaultRefDerefTraits<WebCore::ResourceResponse &&>> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DA298;
  int v3 = (WebCore::ResourceResponseBase *)(a1 + 75);
  uint64_t v4 = (const void *)a1[105];
  a1[105] = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)(a1 + 2), v5);
  uint64_t v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
  }

  return WTF::fastFree((WTF *)a1, v6);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadSimulatedRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse &&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::ResourceResponse &&>,WTF::DefaultRefDerefTraits<WebCore::ResourceResponse &&>> &&)::$_0,void>::call(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = a1[107];
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2314;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v14 = v5;
  IPC::ArgumentCoder<WebKit::LoadParameters,void>::encode(v5, (uint64_t)(a1 + 2));
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v5, (WebCore::ResourceResponseBase *)(a1 + 75));
  LOBYTE(v12) = 0;
  char v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v3, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    uint64_t v7 = v12;
    uint64_t v12 = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  uint64_t v9 = a1[1];
  if (v9) {
    uint64_t v9 = *(void *)(v9 + 8);
  }
  if (*(unsigned char *)(v9 + 169)) {
    return (IPC::Encoder *)WebKit::ResponsivenessTimer::start(v9 + 56);
  }
  if (!*(unsigned char *)(v9 + 185)) {
    *(_WORD *)(v9 + 184) = 256;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadAlternateHTML(WTF::Ref<WebCore::DataSegment,WTF::RawPtrTraits<WebCore::DataSegment>,WTF::DefaultRefDerefTraits<WebCore::DataSegment>> &&,WTF::String const&,WTF::URL const&,WTF::URL const,API::Object *)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DA2C0;
  WebKit::WebPageProxy::loadAlternateHTML(WTF::Ref<WebCore::DataSegment,WTF::RawPtrTraits<WebCore::DataSegment>,WTF::DefaultRefDerefTraits<WebCore::DataSegment>> &&,WTF::String const&,WTF::URL const&,WTF::URL const,API::Object *)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadAlternateHTML(WTF::Ref<WebCore::DataSegment,WTF::RawPtrTraits<WebCore::DataSegment>,WTF::DefaultRefDerefTraits<WebCore::DataSegment>> &&,WTF::String const&,WTF::URL const&,WTF::URL const,API::Object *)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9DA2C0;
  WebKit::WebPageProxy::loadAlternateHTML(WTF::Ref<WebCore::DataSegment,WTF::RawPtrTraits<WebCore::DataSegment>,WTF::DefaultRefDerefTraits<WebCore::DataSegment>> &&,WTF::String const&,WTF::URL const&,WTF::URL const,API::Object *)::$_0::~$_0((void *)a1 + 1, a2);

  return WTF::fastFree(a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadAlternateHTML(WTF::Ref<WebCore::DataSegment,WTF::RawPtrTraits<WebCore::DataSegment>,WTF::DefaultRefDerefTraits<WebCore::DataSegment>> &&,WTF::String const&,WTF::URL const&,WTF::URL const,API::Object *)::$_0,void>::call(uint64_t a1)
{
  v42[2] = *(_DWORD **)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    *(_OWORD *)algn_1EB35A7B8 = 0u;
  }
  WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, v3);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(_DWORD **)(a1 + 616);
  if (v5) {
    *v5 += 2;
  }
  v42[0] = v5;
  uint64_t v6 = *(_DWORD **)(a1 + 656);
  if (v6) {
    *v6 += 2;
  }
  v42[1] = v6;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v32, v42, 2uLL);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v2 + 24), v2 + 16);
  uint64_t v7 = *(atomic_uint **)(v2 + 24);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  v33 = (WTF *)v7;
  uint64_t v8 = *(void *)(a1 + 24);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 8), v8);
  uint64_t v9 = *(atomic_uint **)(v8 + 8);
  if (v9) {
    atomic_fetch_add(v9, 1u);
  }
  v34 = (WTF *)v9;
  uint64_t v10 = *(WTF::StringImpl **)(a1 + 616);
  if (v10) {
    *(_DWORD *)v10 += 2;
  }
  v35 = v10;
  long long v11 = *(_OWORD *)(a1 + 640);
  long long v36 = *(_OWORD *)(a1 + 624);
  long long v37 = v11;
  uint64_t v12 = *(WTF::StringImpl **)(a1 + 656);
  if (v12) {
    *(_DWORD *)v12 += 2;
  }
  v38 = v12;
  long long v13 = *(_OWORD *)(a1 + 680);
  long long v39 = *(_OWORD *)(a1 + 664);
  long long v40 = v13;
  WebKit::LoadParameters::LoadParameters((uint64_t)v41, (uint64_t *)(a1 + 32));
  uint64_t v14 = WTF::fastMalloc((WTF *)0x2B0);
  uint64_t v15 = v14;
  *(void *)uint64_t v14 = &unk_1EE9DA2E8;
  *(void *)(v14 + 8) = v33;
  uint64_t v16 = v34;
  v33 = 0;
  v34 = 0;
  *(void *)(v14 + 16) = v16;
  uint64_t v17 = v35;
  if (v35) {
    *(_DWORD *)v35 += 2;
  }
  *(void *)(v14 + 24) = v17;
  long long v18 = v37;
  *(_OWORD *)(v14 + 32) = v36;
  *(_OWORD *)(v14 + 48) = v18;
  uint64_t v19 = v38;
  if (v38) {
    *(_DWORD *)v38 += 2;
  }
  *(void *)(v14 + 64) = v19;
  long long v20 = v39;
  *(_OWORD *)(v14 + 88) = v40;
  *(_OWORD *)(v14 + 72) = v20;
  WebKit::LoadParameters::LoadParameters(v14 + 104, v41);
  uint64_t v31 = v15;
  WebKit::WebProcessProxy::assumeReadAccessToBaseURLs(v4, v2, (uint64_t)v32, &v31);
  uint64_t v22 = v31;
  uint64_t v31 = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)v41, v21);
  char v24 = v38;
  v38 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v23);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  uint64_t v25 = v35;
  v35 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v23);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  int v26 = (unsigned int *)v34;
  v34 = 0;
  if (v26 && atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v26);
    WTF::fastFree((WTF *)v26, v23);
  }
  uint64_t v27 = (unsigned int *)v33;
  v33 = 0;
  if (v27 && atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v27);
    WTF::fastFree((WTF *)v27, v23);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v32, v23);
  for (uint64_t i = 1; i != -1; --i)
  {
    uint64_t result = (WTF::StringImpl *)v42[i];
    v42[i] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadAlternateHTML(WTF::Ref<WebCore::DataSegment,WTF::RawPtrTraits<WebCore::DataSegment>,WTF::DefaultRefDerefTraits<WebCore::DataSegment>> &&,WTF::String const&,WTF::URL const&,WTF::URL const,API::Object *)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DA2E8;
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)(a1 + 13), a2);
  uint64_t v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v3);
  }
  uint64_t v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadAlternateHTML(WTF::Ref<WebCore::DataSegment,WTF::RawPtrTraits<WebCore::DataSegment>,WTF::DefaultRefDerefTraits<WebCore::DataSegment>> &&,WTF::String const&,WTF::URL const&,WTF::URL const,API::Object *)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v2 = (WTF *)WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadAlternateHTML(WTF::Ref<WebCore::DataSegment,WTF::RawPtrTraits<WebCore::DataSegment>,WTF::DefaultRefDerefTraits<WebCore::DataSegment>> &&,WTF::String const&,WTF::URL const&,WTF::URL const,API::Object *)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);

  return WTF::fastFree(v2, v3);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::loadAlternateHTML(WTF::Ref<WebCore::DataSegment,WTF::RawPtrTraits<WebCore::DataSegment>,WTF::DefaultRefDerefTraits<WebCore::DataSegment>> &&,WTF::String const&,WTF::URL const&,WTF::URL const,API::Object *)::$_0::operator()(void)::{lambda(void)#1},void>::call(IPC::Encoder *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    if (*(void *)(v1 + 8))
    {
      uint64_t v2 = result;
      uint64_t v3 = *((void *)result + 2);
      if (v3)
      {
        if (*(void *)(v3 + 8))
        {
          if (WTF::URL::protocolIs())
          {
            uint64_t v4 = *((void *)v2 + 2);
            if (v4) {
              uint64_t v5 = *(WebKit::WebProcessProxy **)(v4 + 8);
            }
            else {
              uint64_t v5 = 0;
            }
            WebKit::WebProcessProxy::addPreviouslyApprovedFileURL(v5, (IPC::Encoder *)((char *)v2 + 24));
          }
          if (WTF::URL::protocolIs())
          {
            uint64_t v6 = *((void *)v2 + 2);
            if (v6) {
              uint64_t v7 = *(WebKit::WebProcessProxy **)(v6 + 8);
            }
            else {
              uint64_t v7 = 0;
            }
            WebKit::WebProcessProxy::addPreviouslyApprovedFileURL(v7, (IPC::Encoder *)((char *)v2 + 64));
          }
          uint64_t v8 = *(void *)(*((void *)v2 + 1) + 8);
          if (v8) {
            uint64_t v9 = v8 - 16;
          }
          else {
            uint64_t v9 = 0;
          }
          uint64_t v10 = *(void *)(v9 + 256);
          uint64_t v11 = *(void *)(*(void *)(v9 + 32) + 1928);
          uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v12 = 2307;
          *((void *)v12 + 1) = v11;
          *((void *)v12 + 66) = (char *)v12 + 16;
          *((void *)v12 + 67) = 512;
          *((void *)v12 + 68) = 0;
          *((void *)v12 + 70) = 0;
          *((void *)v12 + 69) = 0;
          IPC::Encoder::encodeHeader(v12);
          long long v20 = v12;
          IPC::ArgumentCoder<WebKit::LoadParameters,void>::encode(v12, (uint64_t)v2 + 104);
          LOBYTE(v18) = 0;
          char v19 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v20, 0, (uint64_t)&v18, 1);
          if (v19)
          {
            uint64_t v14 = v18;
            uint64_t v18 = 0;
            if (v14) {
              (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
            }
          }
          uint64_t result = v20;
          long long v20 = 0;
          if (result)
          {
            IPC::Encoder::~Encoder(result, v13);
            uint64_t result = (IPC::Encoder *)WTF::fastFree(v16, v17);
          }
          uint64_t v15 = *((void *)v2 + 2);
          if (v15) {
            uint64_t v15 = *(void *)(v15 + 8);
          }
          if (*(unsigned char *)(v15 + 169))
          {
            return (IPC::Encoder *)WebKit::ResponsivenessTimer::start(v15 + 56);
          }
          else if (!*(unsigned char *)(v15 + 185))
          {
            *(_WORD *)(v15 + 184) = 256;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::reload(WTF::OptionSet<WebCore::ReloadOption>)::$_0,void,std::optional<WebKit::SandboxExtensionHandle>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9DA310;
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 32));
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }
  uint64_t v5 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v3);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9DA310;
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 32));
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }
  uint64_t v5 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v3);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::reload(WTF::OptionSet<WebCore::ReloadOption>)::$_0,void,std::optional<WebKit::SandboxExtensionHandle>>::call(uint64_t a1, uint64_t a2)
{
  LOBYTE(v29) = 0;
  char v30 = 0;
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a2 + 8))
  {
    unsigned __int8 v28 = *(const char ***)a2;
    *(void *)a2 = 0;
    uint64_t v29 = v28;
    char v30 = 1;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      if (v3)
      {
        uint64_t v6 = v29;
        uint64_t v29 = 0;
        std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a1 + 32), v6);
        uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 8);
      }
      if (v5) {
        uint64_t v7 = v5 - 16;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v31 = *(void *)(*(void *)(a1 + 40) + 16);
      uint64_t v8 = *(void *)(v7 + 256);
      uint64_t v9 = *(void *)(*(void *)(v7 + 32) + 1928);
      uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v10 = 2350;
      *((void *)v10 + 1) = v9;
      *((void *)v10 + 66) = (char *)v10 + 16;
      *((void *)v10 + 67) = 512;
      *((void *)v10 + 68) = 0;
      *((void *)v10 + 70) = 0;
      *((void *)v10 + 69) = 0;
      IPC::Encoder::encodeHeader(v10);
      v35 = v10;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, &v31);
      char v11 = *(unsigned char *)(a1 + 24);
      uint64_t v12 = (unsigned char *)IPC::Encoder::grow(v10, 1uLL, 1);
      if (!v13)
      {
        __break(0xC471u);
        return;
      }
      *uint64_t v12 = v11;
      IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(v10, (const char ***)(a1 + 32));
      LOBYTE(v32) = 0;
      char v34 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v35, 0, (uint64_t)&v32, 1);
      if (v34)
      {
        uint64_t v15 = v32;
        uint64_t v32 = 0;
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
      }
      uint64_t v16 = v35;
      v35 = 0;
      if (v16)
      {
        IPC::Encoder::~Encoder(v16, v14);
        WTF::fastFree(v26, v27);
      }
      uint64_t v17 = *(void *)(a1 + 16);
      if (*(unsigned char *)(v17 + 169))
      {
        WebKit::ResponsivenessTimer::start(v17 + 56);
      }
      else if (!*(unsigned char *)(v17 + 185))
      {
        *(_WORD *)(v17 + 184) = 256;
      }
      uint64_t v18 = *(void *)(a1 + 8);
      if (v18)
      {
        uint64_t v19 = *(void *)(v18 + 8);
        if (v19) {
          long long v20 = (WebKit::WebPageProxy *)(v19 - 16);
        }
        else {
          long long v20 = 0;
        }
      }
      else
      {
        long long v20 = 0;
      }
      if (WebKit::WebPageProxy::shouldForceForegroundPriorityForClientNavigation(v20))
      {
        uint64_t v21 = *(void *)(a1 + 40);
        uint64_t v22 = *(void *)(a1 + 16) + 200;
        uint64_t v23 = WTF::fastMalloc((WTF *)0x28);
        uint64_t v32 = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v23, v22, "Client reload", 14, 1, 0);
        int v33 = 1;
        std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v21 + 3464, (uint64_t)&v32);
        WebKit::ProcessThrottlerTimedActivity::updateTimer((WebKit::ProcessThrottlerTimedActivity *)(v21 + 3424));
        if (v33 != -1) {
          ((void (*)(IPC::Encoder **, uint64_t *))off_1EE9D9C18[v33])(&v35, &v32);
        }
      }
      uint64_t v24 = *(void *)(*(void *)(a1 + 8) + 8);
      if (v24) {
        uint64_t v25 = v24 - 16;
      }
      else {
        uint64_t v25 = 0;
      }
      WebKit::WebPageProxy::resetSpeechSynthesizer(*(void *)(v25 + 32));
    }
  }
  if (v3) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v29);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GoToBackForwardItem>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2282;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::GoToBackForwardItemParameters,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetControlledByAutomation>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2420;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,BOOL>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  char v4 = *(unsigned char *)(a2 + 8);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetBackgroundColor>(uint64_t a1, unsigned __int8 **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2412;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::optional<WebCore::Color>,void>::encode<IPC::Encoder,std::optional<WebCore::Color> const&>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetTopContentInsetFenced>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2476;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v8, *(float *)a2);
  IPC::Encoder::addAttachment((uint64_t)v8, *(void *)(a2 + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::setUnderPageBackgroundColorOverride(WebCore::Color &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DA338;
  int v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::setUnderPageBackgroundColorOverride(WebCore::Color &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DA338;
  int v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::setUnderPageBackgroundColorOverride(WebCore::Color &&)::$_0,void>::call(IPC::Encoder *result)
{
  uint64_t v1 = *((void *)result + 2);
  if (v1)
  {
    if (*(void *)(v1 + 8))
    {
      uint64_t v2 = *((void *)result + 1);
      if (*(unsigned char *)(v2 + 776))
      {
        *(unsigned char *)(v2 + 776) = 0;
        uint64_t v3 = *(void *)(v2 + 40);
        if (v3)
        {
          unint64_t result = *(IPC::Encoder **)(v3 + 8);
          if (result) {
            unint64_t result = (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(void *)result + 1384))(result);
          }
        }
        if (!*(unsigned char *)(v2 + 801) && *(unsigned char *)(v2 + 800))
        {
          uint64_t v4 = *(void *)(v2 + 32);
          uint64_t v5 = (WebCore::Color *)(v4 + 1816);
          uint64_t v6 = *(void *)(v2 + 256);
          uint64_t v7 = *(void *)(v4 + 1928);
          uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v8 = 2477;
          *((void *)v8 + 1) = v7;
          *((void *)v8 + 66) = (char *)v8 + 16;
          *((void *)v8 + 67) = 512;
          *((void *)v8 + 68) = 0;
          *((void *)v8 + 70) = 0;
          *((void *)v8 + 69) = 0;
          IPC::Encoder::encodeHeader(v8);
          uint64_t v15 = v8;
          IPC::ArgumentCoder<WebCore::Color,void>::encode(v8, v5);
          LOBYTE(v13) = 0;
          char v14 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v15, 0, (uint64_t)&v13, 1);
          if (v14)
          {
            uint64_t v10 = v13;
            uint64_t v13 = 0;
            if (v10) {
              (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
            }
          }
          unint64_t result = v15;
          uint64_t v15 = 0;
          if (result)
          {
            IPC::Encoder::~Encoder(result, v9);
            return (IPC::Encoder *)WTF::fastFree(v11, v12);
          }
        }
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::activityStateDidChange(WTF::OptionSet<WebCore::ActivityState>,WebKit::WebPageProxy::ActivityStateChangeDispatchMode,WebKit::WebPageProxy::ActivityStateChangeReplyMode)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DA360;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::activityStateDidChange(WTF::OptionSet<WebCore::ActivityState>,WebKit::WebPageProxy::ActivityStateChangeDispatchMode,WebKit::WebPageProxy::ActivityStateChangeReplyMode)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DA360;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::activityStateDidChange(WTF::OptionSet<WebCore::ActivityState>,WebKit::WebPageProxy::ActivityStateChangeDispatchMode,WebKit::WebPageProxy::ActivityStateChangeReplyMode)::$_0,void>::call(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 8);
      CFRetain(*(CFTypeRef *)(v2 - 8));
      int v4 = *(unsigned __int8 *)(v3 + 930);
      *(unsigned char *)(v3 + 930) = 0;
      if (v4)
      {
        uint64_t v5 = qword_1EB358730;
        if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v6 = *(void *)(v3 + 32);
          uint64_t v7 = *(void *)(v6 + 760);
          uint64_t v8 = *(void *)(v6 + 1928);
          uint64_t v9 = *(void *)(*(void *)(v3 + 256) + 136);
          if (v9) {
            LODWORD(v9) = *(_DWORD *)(v9 + 108);
          }
          int v10 = 134218752;
          uint64_t v11 = v3;
          __int16 v12 = 2048;
          uint64_t v13 = v7;
          __int16 v14 = 2048;
          uint64_t v15 = v8;
          __int16 v16 = 1024;
          int v17 = v9;
          _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::activityStateDidChange: view is becoming visible after a crash, attempt a reload", (uint8_t *)&v10, 0x26u);
        }
        WebKit::WebPageProxy::tryReloadAfterProcessTermination((WebKit::WebPageProxy *)v3);
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::dispatchActivityStateChange(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DA388;
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage16SetActivityStateEZZN6WebKit12WebPageProxy27dispatchActivityStateChangeEvENK3__1clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlvE_EENS_17CompletionHandlerIFvPNS2_7DecoderEEEEOSN_NS_19ThreadLikeAssertionEEUlSR_E_vJSR_EED1Ev(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DA3D8;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

unsigned int *WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, uint64_t a2)
{
  unsigned int v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = result[3];
  if (v4 != a2)
  {
    uint64_t v5 = (unsigned int **)(*(void *)result + 8 * a2);
    uint64_t v6 = 8 * v4 - 8 * a2;
    do
    {
      unint64_t result = *v5;
      *uint64_t v5 = 0;
      if (result) {
        unint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SetInitialFocus,WebKit::WebPageProxy::setInitialFocus(BOOL,BOOL,std::optional<WebKit::WebKeyboardEvent> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::setInitialFocus(BOOL,BOOL,std::optional<WebKit::WebKeyboardEvent> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9DA400;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  void *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9DA400;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SetInitialFocus,WebKit::WebPageProxy::setInitialFocus(BOOL,BOOL,std::optional<WebKit::WebKeyboardEvent> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::setInitialFocus(BOOL,BOOL,std::optional<WebKit::WebKeyboardEvent> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::ClearSelection>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::ClearSelection &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::ClearSelection&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ClearSelection>(*(void *)(v7 + 24), *(void *)a3, *(void *)(v7 + 16), *(unsigned char *)(a3 + 8));
        uint64_t v8 = *(const void **)(v6 + 8);
        CFRelease(v8);
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v9 = *(void *)(a1 + 256);
  uint64_t v10 = *(void *)a3;
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v12 = *(unsigned char *)(a3 + 8);

  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ClearSelection>(v9, v10, v11, v12);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ClearSelection>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2168;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  int v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  int v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RestoreSelectionInFocusedEditableElement>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2382;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  int v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  int v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ValidateCommand,WTF::CompletionHandler<void ()(BOOL,int)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  char v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v12 = 2543;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  __int16 v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *__int16 v14 = &unk_1EE9DA428;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ValidateCommand,WTF::CompletionHandler<void ()(BOOL,int)>>(WTF::CompletionHandler<void ()(BOOL,int)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DA428;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ValidateCommand,WTF::CompletionHandler<void ()(BOOL,int)>>(WTF::CompletionHandler<void ()(BOOL,int)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DA428;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ValidateCommand,WTF::CompletionHandler<void ()(BOOL,int)>>(WTF::CompletionHandler<void ()(BOOL,int)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    if (*a2)
    {
      unint64_t v3 = a2[1];
      if (v3 <= a2[2] - v2)
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
        *a2 = 0;
        a2[1] = 0;
        uint64_t v14 = a2[3];
        if (v14)
        {
          uint64_t v25 = a2;
          uint64_t v26 = a1;
          if (v3)
          {
            (*(void (**)(void, uint64_t))(*(void *)v14 + 16))(a2[3], v2);
            unint64_t v12 = 0;
            uint64_t v28 = *v25;
            uint64_t v27 = v25[1];
            uint64_t v29 = v25[3];
            *uint64_t v25 = 0;
            v25[1] = 0;
            uint64_t v13 = 0;
            if (v29)
            {
              a1 = v26;
              a2 = v25;
              if (v27)
              {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v28);
                a2 = v25;
                a1 = v26;
                uint64_t v13 = *v25;
                unint64_t v12 = v25[1];
              }
              goto LABEL_12;
            }
          }
          else
          {
            unint64_t v12 = 0;
            uint64_t v13 = 0;
          }
          a1 = v26;
          a2 = v25;
        }
      }
      else
      {
        uint64_t v4 = (unsigned __int8 *)a2[2];
        uint64_t v5 = v4 + 1;
        a2[2] = v4 + 1;
        unsigned int v6 = *v4;
        if (v6 < 2)
        {
          unint64_t v7 = ((unint64_t)(v5 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v2;
          if (v3 >= v7 && v3 - v7 > 3)
          {
            uint64_t v9 = (unsigned int *)(v2 + v7);
            uint64_t v10 = *v9;
            a2[2] = v9 + 1;
            uint64_t v11 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = 0;
            (*(void (**)(uint64_t, BOOL, uint64_t))(*(void *)v11 + 16))(v11, v6 != 0, v10);
            goto LABEL_18;
          }
          *a2 = 0;
          a2[1] = 0;
          uint64_t v18 = a2[3];
          if (!v18) {
            goto LABEL_16;
          }
          uint64_t v16 = a1;
          int v17 = a2;
          (*(void (**)(void, uint64_t))(*(void *)v18 + 16))(a2[3], v2);
          a2 = v17;
          a1 = v16;
          uint64_t v30 = *v17;
          uint64_t v31 = v17[1];
          uint64_t v32 = v17[3];
          *int v17 = 0;
          v17[1] = 0;
          if (!v32 || !v31) {
            goto LABEL_16;
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 16))(v32, v30);
          goto LABEL_30;
        }
        unint64_t v12 = v3;
        uint64_t v13 = v2;
      }
LABEL_12:
      *a2 = 0;
      a2[1] = 0;
      uint64_t v15 = a2[3];
      if (!v15 || !v12)
      {
LABEL_16:
        uint64_t v20 = *a2;
        uint64_t v19 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v21 = a2[3];
        if (v21 && v19)
        {
          uint64_t v24 = a1;
          (*(void (**)(void, uint64_t))(*(void *)v21 + 16))(a2[3], v20);
          a1 = v24;
        }
        goto LABEL_17;
      }
      uint64_t v16 = a1;
      int v17 = a2;
      (*(void (**)(void, uint64_t, unint64_t))(*(void *)v15 + 16))(a2[3], v13, v12);
LABEL_30:
      a2 = v17;
      a1 = v16;
      goto LABEL_16;
    }
  }
LABEL_17:
  uint64_t v11 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void, void))(*(void *)v11 + 16))(v11, 0, 0);
LABEL_18:
  uint64_t v22 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);

  return v22(v11);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::IncreaseListLevel>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 2293;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  int v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  int v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DecreaseListLevel>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 2189;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  int v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  int v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ChangeListType>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 2162;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  int v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  int v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetBaseWritingDirection>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2414;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::WritingDirection,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unint64_t IPC::ArgumentCoder<WebCore::WritingDirection,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ScheduleFullEditorStateUpdate>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 2391;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SelectAll>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 2395;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DA450;
  unint64_t v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  unsigned int v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DA450;
  unint64_t v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  unsigned int v6 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()((uint64_t *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DA478;
  unint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DA478;
  unint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&)::$_0,void>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if ((byte_1EB359C48 & 1) == 0)
  {
    WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&)::$_0::operator()(void)::{lambda(void)#1}::operator() const(void)::impl += 2;
    qword_1EB359C68 = (uint64_t)&WebKit::WebPageProxy::executeEditCommand(WTF::String const&,WTF::String const&)::$_0::operator()(void)::{lambda(void)#1}::operator() const(void)::impl;
    byte_1EB359C48 = 1;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 && *(void *)(v4 + 8))
  {
    int v5 = WTF::equal(*(WTF **)(a1 + 16), (const WTF::StringImpl *)qword_1EB359C68, a3);
    uint64_t v6 = *(void *)(a1 + 8);
    if (v5)
    {
      uint64_t v7 = *(void *)(v6 + 8);
      uint64_t v8 = v7 - 16;
      if (!v7) {
        uint64_t v8 = 0;
      }
      ++*(_DWORD *)(v8 + 908);
    }
    else
    {
      if (!v6)
      {
        uint64_t v9 = 0;
LABEL_14:
        long long v13 = *(_OWORD *)(a1 + 32);
        v10[0] = a1 + 16;
        v10[1] = a1 + 24;
        char v14 = 1;
        uint64_t v11 = v10;
        char v12 = 0;
        WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::ExecuteEditCommand>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::ExecuteEditCommand &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::ExecuteEditCommand&)#1}>(v9, (uint64_t)&v13, (uint64_t)&v11);
        return;
      }
      uint64_t v7 = *(void *)(v6 + 8);
    }
    if (v7) {
      uint64_t v9 = v7 - 16;
    }
    else {
      uint64_t v9 = 0;
    }
    goto LABEL_14;
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetEditable>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2425;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::performDragOperation(WebCore::DragData &,WTF::String const&,WebKit::SandboxExtensionHandle &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9DA4A0;
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 128, a2);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 120));
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, v3);
  uint64_t v6 = *(WTF::StringImpl **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  return a1;
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9DA4A0;
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 128, a2);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 120));
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, v3);
  uint64_t v6 = *(WTF::StringImpl **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }

  return WTF::fastFree((WTF *)a1, v5);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::performDragOperation(WebCore::DragData &,WTF::String const&,WebKit::SandboxExtensionHandle &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 32;
  unint64_t v3 = (const char ***)(a1 + 120);
  uint64_t v4 = a1 + 128;
  CFRetain(*(CFTypeRef *)(v1 + 8));
  uint64_t v5 = *(void *)(v1 + 256);
  uint64_t v6 = *(void *)(*(void *)(v1 + 32) + 1928);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2336;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v16 = v7;
  IPC::ArgumentCoder<WebCore::DragData,void>::encode(v7, v2);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(v7, v3);
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v7, v4);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v8 = &unk_1EE9DA4C8;
  v8[1] = v1;
  v8[2] = v1;
  v14[0] = v8;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v15 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v16, 0, (uint64_t)v14, 1);
  if (v15)
  {
    uint64_t v10 = v14[0];
    v14[0] = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  unint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PerformDragOperation,WebKit::WebPageProxy::performDragOperation(WebCore::DragData &,WTF::String const&,WebKit::SandboxExtensionHandle &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()(void)::{lambda(BOOL)#1}>(WebKit::WebPageProxy::performDragOperation(WebCore::DragData &,WTF::String const&,WebKit::SandboxExtensionHandle &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()(void)::{lambda(BOOL)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DA4C8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PerformDragOperation,WebKit::WebPageProxy::performDragOperation(WebCore::DragData &,WTF::String const&,WebKit::SandboxExtensionHandle &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()(void)::{lambda(BOOL)#1}>(WebKit::WebPageProxy::performDragOperation(WebCore::DragData &,WTF::String const&,WebKit::SandboxExtensionHandle &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()(void)::{lambda(BOOL)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DA4C8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PerformDragOperation,WebKit::WebPageProxy::performDragOperation(WebCore::DragData &,WTF::String const&,WebKit::SandboxExtensionHandle &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()(void)::{lambda(BOOL)#1}>(WebKit::WebPageProxy::performDragOperation(WebCore::DragData &,WTF::String const&,WebKit::SandboxExtensionHandle &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()(void)::{lambda(BOOL)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    uint64_t result = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if ((unsigned __int16)result > 0xFFu)
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 40);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6)
        {
          BOOL v7 = result != 0;
          (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
          (*(void (**)(uint64_t, BOOL))(*(void *)v6 + 288))(v6, v7);
          uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 1600);
          return v8(v6);
        }
      }
      return result;
    }
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v11 = a2[3];
    if (v11 && v10) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
    }
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 8) + 40);

  return IPC::Connection::cancelReply<Messages::WebPage::PerformDragOperation,WebKit::WebPageProxy::performDragOperation(WebCore::DragData &,WTF::String const&,WebKit::SandboxExtensionHandle &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()(void)::{lambda(BOOL)#1}>(v12);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::PerformDragOperation,WebKit::WebPageProxy::performDragOperation(WebCore::DragData &,WTF::String const&,WebKit::SandboxExtensionHandle &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()(void)::{lambda(BOOL)#1}>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 8);
    if (v1)
    {
      (*(void (**)(void))(*(void *)v1 + 1592))(*(void *)(result + 8));
      (*(void (**)(uint64_t, void))(*(void *)v1 + 288))(v1, 0);
      uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 1600);
      return v2(v1);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AllowFilesAccessFromWebProcess,WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_1>(WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DA4F0;
  WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_1::~$_1(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AllowFilesAccessFromWebProcess,WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_1>(WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9DA4F0;
  WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_1::~$_1((void *)a1 + 1, a2);

  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AllowFilesAccessFromWebProcess,WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_1>(WebKit::WebPageProxy::performDragControllerAction(WebKit::DragControllerAction,WebCore::DragData &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DragEnded,WebKit::WebPageProxy::dragEnded(WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0,unsigned long long>(uint64_t a1, uint64_t a2, long long *a3, uint64_t *a4, char a5)
{
  uint64_t v8 = *a4;
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 2221;
  *((void *)v10 + 1) = v8;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v21 = v10;
  IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation> const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation> const&>,0ul,1ul,2ul,3ul>(v10, a2);
  uint64_t v18 = *((void *)a3 + 2);
  LOBYTE(v19) = *((unsigned char *)a3 + 24);
  long long v17 = *a3;
  *((void *)a3 + 1) = 0;
  uint64_t v11 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v11 = &unk_1EE9DA518;
  *(_OWORD *)(v11 + 8) = v17;
  *(void *)(v11 + 24) = v18;
  *(unsigned char *)(v11 + 32) = v19;
  uint64_t v18 = v11;
  uint64_t v19 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v20 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v21, a5, (uint64_t)&v18, 1);
  if (v20)
  {
    uint64_t v13 = v18;
    uint64_t v18 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  uint64_t result = v21;
  uint64_t v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation> const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation> const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, *(void *)a2);
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(a1, *(int **)(a2 + 8));
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(a1, *(int **)(a2 + 16));
  uint64_t v4 = *(char **)(a2 + 24);

  return IPC::ArgumentCoder<WTF::OptionSet<WebCore::DragOperation>,void>::encode<IPC::Encoder>(a1, v4);
}

unint64_t IPC::ArgumentCoder<WTF::OptionSet<WebCore::DragOperation>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char *a2)
{
  char v2 = *a2;
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = v2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DragEnded,WebKit::WebPageProxy::dragEnded(WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0>(WebKit::WebPageProxy::dragEnded(WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DA518;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DragEnded,WebKit::WebPageProxy::dragEnded(WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0>(WebKit::WebPageProxy::dragEnded(WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DA518;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DragEnded,WebKit::WebPageProxy::dragEnded(WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0>(WebKit::WebPageProxy::dragEnded(WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragOperation>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::optional<WebCore::RemoteUserInputEventData>>(a2, (uint64_t)&v15);
    if (v17)
    {
      v18[0] = *(_OWORD *)v16;
      *(_OWORD *)((char *)v18 + 15) = *(_OWORD *)&v16[15];
      *(_OWORD *)uint64_t v16 = v18[0];
      uint64_t v4 = *(WebKit::WebPageProxy **)(a1 + 8);
      if (v16[23])
      {
        IntSize v5 = (IntSize)&v16[15];
        char v6 = *(unsigned char *)(a1 + 32);
        char v12 = v15;
        *(void *)uint64_t v13 = *(void *)&v18[0];
        *(void *)&v13[7] = *(void *)((char *)v18 + 7);
        char v14 = 1;
        IntPoint v7 = (IntPoint)&v12;
        WebKit::WebPageProxy::dragEnded((uint64_t)v4, v5, (void *)(a1 + 24), v6, v7);
        return;
      }
    }
    else
    {
      unint64_t v9 = *a2;
      unint64_t v10 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v11 = a2[3];
      if (v11)
      {
        if (v10) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v11 + 16))(v11, v9);
        }
      }
      uint64_t v4 = *(WebKit::WebPageProxy **)(a1 + 8);
    }
    WebKit::WebPageProxy::resetCurrentDragInformation(v4);
  }
  else
  {
    uint64_t v8 = *(WebKit::WebPageProxy **)(a1 + 8);
    WebKit::WebPageProxy::resetCurrentDragInformation(v8);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidStartDrag>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  IntPoint v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)IntPoint v7 = 2216;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  unint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DragCancelled>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  IntPoint v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)IntPoint v7 = 2220;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  unint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::MouseEvent>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2321;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  char v16 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::WebMouseEvent,void>::encode(v8, *(void *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v8, *(void *)(a2 + 16));
  LOBYTE(v14) = 0;
  char v15 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v16, a4, (uint64_t)&v14, 1);
  if (v15)
  {
    uint64_t v10 = v14;
    uint64_t v14 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  unint64_t result = v16;
  char v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[680])
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      IntPoint v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebKit::WebHitTestResultData>(a1, v4);
  if (v5)
  {
    IPC::ArgumentCoder<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,void>::decode<IPC::Decoder,WebKit::WebHitTestResultData>(a1, (uint64_t)v4, a2);
    if (v5) {
      WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)v4);
    }
  }
  else
  {
    *a2 = 0;
    a2[680] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,void>::decode<IPC::Decoder,WebKit::WebHitTestResultData>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unsigned __int16 v6 = IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebEventModifier>,void>::decode<IPC::Decoder>(a1);
  if (v6 <= 0xFFu)
  {
    uint64_t v7 = *(void *)a1;
    uint64_t v8 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v9 = *((void *)a1 + 3);
    if (v9) {
      BOOL v10 = v8 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
    }
    *a3 = 0;
    a3[680] = 0;
  }
  else
  {
    unsigned __int16 v11 = v6;
    IPC::ArgumentCoder<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,void>::decode<IPC::Decoder,WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>>(a1, a2, &v11, a3);
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,void>::decode<IPC::Decoder,WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, unsigned char *a4@<X8>)
{
  IPC::Decoder::decode<WebKit::UserData>(a1, (uint64_t)&v8);
  if (v9)
  {
    IPC::ArgumentCoder<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,void>::decode<IPC::Decoder,WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>(a2, a3, (uint64_t)&v8, (uint64_t)a4);
    if (v9)
    {
      uint64_t v7 = v8;
      uint64_t v8 = 0;
      if (v7) {
        CFRelease(*(CFTypeRef *)(v7 + 8));
      }
    }
  }
  else
  {
    *a4 = 0;
    a4[680] = 0;
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,void>::decode<IPC::Decoder,WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result = a4;
  if (*(unsigned char *)(a1 + 664) && a2[1] && *(unsigned char *)(a3 + 8))
  {
    uint64_t result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN6WebKit20WebHitTestResultDataEN3WTF9OptionSetINS3_16WebEventModifierEEENS3_8UserDataEEEC2B8sn180100IJLm0ELm1ELm2EEJS4_S8_S9_EJEJEJS4_S8_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSD_IJDpT2_EEEDpOT3_(a4, (uint64_t *)a1, a2, (uint64_t *)a3);
    *(unsigned char *)(result + 680) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN6WebKit20WebHitTestResultDataEN3WTF9OptionSetINS3_16WebEventModifierEEENS3_8UserDataEEEC2B8sn180100IJLm0ELm1ELm2EEJS4_S8_S9_EJEJEJS4_S8_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSD_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t *a2, unsigned char *a3, uint64_t *a4)
{
  *(unsigned char *)(WebKit::WebHitTestResultData::WebHitTestResultData(a1, a2) + 664) = *a3;
  uint64_t v6 = *a4;
  if (v6) {
    CFRetain(*(CFTypeRef *)(v6 + 8));
  }
  *(void *)(a1 + 672) = v6;
  return a1;
}

WebKit::WebHitTestResultData *std::__optional_destruct_base<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100](WebKit::WebHitTestResultData *this)
{
  if (*((unsigned char *)this + 680))
  {
    uint64_t v2 = *((void *)this + 84);
    *((void *)this + 84) = 0;
    if (v2) {
      CFRelease(*(CFTypeRef *)(v2 + 8));
    }
    WebKit::WebHitTestResultData::~WebHitTestResultData(this);
  }
  return this;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DispatchWheelEventWithoutScrolling,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  char v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v12 = 2219;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::WebWheelEvent,void>::encode(v12, *(void *)(a2 + 8));
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DA540;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DispatchWheelEventWithoutScrolling,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DA540;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DispatchWheelEventWithoutScrolling,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DA540;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DispatchWheelEventWithoutScrolling,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  char v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::SetLastKnownMousePosition>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::SetLastKnownMousePosition &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::SetLastKnownMousePosition&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetLastKnownMousePosition>(*(void *)(v7 + 24), *(void *)a3, *(void *)(v7 + 16), *(unsigned char *)(a3 + 8));
        uint64_t v8 = *(const void **)(v6 + 8);
        CFRelease(v8);
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v9 = *(void *)(a1 + 256);
  uint64_t v10 = *(void *)a3;
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v12 = *(unsigned char *)(a3 + 8);

  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetLastKnownMousePosition>(v9, v10, v11, v12);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetLastKnownMousePosition>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2442;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::IntPoint const&,WebCore::IntPoint const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::IntPoint const&,WebCore::IntPoint const&>,0ul,1ul,2ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::IntPoint const&,WebCore::IntPoint const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::IntPoint const&,WebCore::IntPoint const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(a1, *(int **)(a2 + 8));
  unsigned __int16 v4 = *(int **)(a2 + 16);

  return IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(a1, v4);
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::HandleWheelEvent,WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0,unsigned long long>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2288;
  *((void *)v8 + 1) = a4;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v26 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::WebWheelEvent,void>::encode(v8, *(void *)(a2 + 8));
  char v9 = **(unsigned char **)(a2 + 16);
  uint64_t v10 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198EA4F0CLL);
  }
  *uint64_t v10 = v9;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(v8, *(char **)(a2 + 24));
  v32[0] = *(_OWORD *)((char *)a3 + 20);
  long long v12 = *((_OWORD *)a3 + 3);
  *(_OWORD *)((char *)v32 + 12) = *((_OWORD *)a3 + 2);
  long long v13 = *((_OWORD *)a3 + 4);
  long long v14 = *((_OWORD *)a3 + 6);
  long long v15 = *((_OWORD *)a3 + 7);
  long long v29 = *((_OWORD *)a3 + 5);
  long long v30 = v14;
  long long v31 = v15;
  uint64_t v16 = *a3;
  *a3 = 0;
  long long v27 = v12;
  long long v28 = v13;
  uint64_t v17 = a3[16];
  uint64_t v18 = WTF::fastMalloc((WTF *)0xA0);
  *(void *)uint64_t v18 = &unk_1EE9DA568;
  *(void *)(v18 + 16) = v16;
  *(_DWORD *)(v18 + 32) = 0;
  *(_OWORD *)(v18 + 36) = v32[0];
  *(_OWORD *)(v18 + 48) = *(_OWORD *)((char *)v32 + 12);
  long long v19 = v30;
  *(_OWORD *)(v18 + 96) = v29;
  *(_OWORD *)(v18 + 112) = v19;
  *(_OWORD *)(v18 + 128) = v31;
  long long v20 = v28;
  *(_OWORD *)(v18 + 64) = v27;
  *(_OWORD *)(v18 + 80) = v20;
  *(void *)(v18 + 144) = v17;
  *(void *)&long long v27 = v18;
  *((void *)&v27 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  LOBYTE(v28) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, 0, (uint64_t)&v27, 1);
  if ((_BYTE)v28)
  {
    uint64_t v22 = v27;
    *(void *)&long long v27 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
  }
  uint64_t result = v26;
  uint64_t v26 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v24, v25);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::HandleWheelEvent,WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0>(WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DA568;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::HandleWheelEvent,WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0>(WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DA568;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::HandleWheelEvent,WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0>(WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (char *)(a1 + 16);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)v39);
    if (!v40) {
      goto LABEL_26;
    }
    unint64_t v5 = a2[1];
    unint64_t v6 = *a2;
    unint64_t v7 = a2[2] - *a2;
    if (v5 <= v7)
    {
      unint64_t v15 = 0;
      unint64_t v14 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v30 = a2[3];
      if (v30)
      {
        if (v5)
        {
          (*(void (**)(unint64_t))(*(void *)v30 + 16))(v30);
          unint64_t v14 = *a2;
          unint64_t v15 = a2[1];
        }
        else
        {
          unint64_t v15 = 0;
          unint64_t v14 = 0;
        }
      }
    }
    else
    {
      uint64_t v8 = (unsigned __int8 *)(v6 + v7);
      uint64_t v9 = v6 + v7 + 1;
      a2[2] = v9;
      if (v6)
      {
        if (*v8 >= 2u) {
          goto LABEL_40;
        }
        if (!*v8) {
          goto LABEL_10;
        }
        if (v5 <= v9 - v6)
        {
          unint64_t v23 = 0;
          *a2 = 0;
          a2[1] = 0;
          unint64_t v35 = a2[3];
          if (v35)
          {
            (*(void (**)(unint64_t))(*(void *)v35 + 16))(v35);
            unint64_t v23 = 0;
            unint64_t v36 = *a2;
            unint64_t v37 = a2[1];
            unint64_t v38 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            if (v38)
            {
              if (v37)
              {
                (*(void (**)(unint64_t, unint64_t))(*(void *)v38 + 16))(v38, v36);
                unint64_t v23 = a2[1];
              }
            }
          }
        }
        else
        {
          uint64_t v9 = (uint64_t)(v8 + 2);
          a2[2] = (unint64_t)(v8 + 2);
          if (v8[1] < 2u)
          {
LABEL_10:
            unint64_t v10 = v9 - v6;
            if (v5 > v10)
            {
              uint64_t v11 = (unsigned __int8 *)(v6 + v10);
              a2[2] = (unint64_t)(v11 + 1);
              unsigned int v12 = *v11;
              if (v12 >= 2)
              {
LABEL_25:
                *a2 = 0;
                a2[1] = 0;
                unint64_t v25 = a2[3];
                if (v25 && v5) {
                  (*(void (**)(unint64_t, unint64_t))(*(void *)v25 + 16))(v25, v6);
                }
                goto LABEL_26;
              }
              long long v13 = IPC::Decoder::decode<std::optional<WebCore::RemoteUserInputEventData>>(a2, (uint64_t)v41);
              if (v43)
              {
                unint64_t v15 = v40;
                if (v40)
                {
                  if (*(void *)v2)
                  {
                    uint64_t v16 = *(void *)(*(void *)v2 + 8);
                    if (v16)
                    {
                      uint64_t v17 = v41[0];
                      uint64_t v18 = v41[1];
                      uint64_t v19 = v41[2];
                      int v20 = v42;
                      CFRetain(*(CFTypeRef *)(v16 - 8));
                      if (!*(unsigned char *)(v16 + 785))
                      {
                        uint64_t v21 = (WebKit::WebPageProxy *)(v16 - 16);
                        if (v20)
                        {
                          *(void *)(a1 + 64) = v19;
                          WebKit::WebPageProxy::sendWheelEvent((uint64_t)v21, v17, v18, (_OWORD *)(a1 + 32), *(unsigned char *)(a1 + 144), *(_DWORD *)(a1 + 145), *(_WORD *)(a1 + 149), *(unsigned char *)(a1 + 151));
                        }
                        else
                        {
                          WebKit::WebPageProxy::handleWheelEventReply(v21, *(unsigned char *)(a1 + 151), v12 != 0);
                        }
                      }
                      CFRelease(*(CFTypeRef *)(v16 - 8));
                    }
                  }
                  return;
                }
                __break(1u);
LABEL_53:
                if (v15)
                {
                  (*(void (**)(unint64_t *, unint64_t, unint64_t))(*v13 + 16))(v13, v14, v15);
                  unint64_t v6 = *a2;
                  unint64_t v5 = a2[1];
                }
                else
                {
                  unint64_t v5 = 0;
                  unint64_t v6 = 0;
                }
LABEL_40:
                *a2 = 0;
                a2[1] = 0;
                unint64_t v31 = a2[3];
                if (v31 && v5) {
                  (*(void (**)(unint64_t, unint64_t))(*(void *)v31 + 16))(v31, v6);
                }
                goto LABEL_24;
              }
LABEL_26:
              unint64_t v26 = *a2;
              unint64_t v27 = a2[1];
              *a2 = 0;
              a2[1] = 0;
              unint64_t v28 = a2[3];
              if (v28 && v27) {
                (*(void (**)(unint64_t, unint64_t))(*(void *)v28 + 16))(v28, v26);
              }
              IPC::Connection::cancelReply<Messages::WebPage::HandleWheelEvent,WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0>(v2);
              return;
            }
            unint64_t v32 = 0;
            *a2 = 0;
            a2[1] = 0;
            unint64_t v33 = a2[3];
            if (v33)
            {
              (*(void (**)(unint64_t))(*(void *)v33 + 16))(v33);
              unint64_t v32 = a2[1];
            }
            unint64_t v5 = 0;
            unint64_t v6 = 0;
            *a2 = 0;
            a2[1] = 0;
            unint64_t v34 = a2[3];
            if (!v34) {
              goto LABEL_25;
            }
            if (!v32)
            {
              unint64_t v5 = 0;
              unint64_t v6 = 0;
              goto LABEL_25;
            }
            long long v29 = *(void (**)(void))(*(void *)v34 + 16);
            goto LABEL_37;
          }
          unint64_t v23 = v5;
        }
        *a2 = 0;
        a2[1] = 0;
        unint64_t v24 = a2[3];
        if (!v24 || !v23) {
          goto LABEL_24;
        }
        long long v29 = *(void (**)(void))(*(void *)v24 + 16);
LABEL_37:
        v29();
LABEL_24:
        unint64_t v6 = *a2;
        unint64_t v5 = a2[1];
        goto LABEL_25;
      }
      unint64_t v15 = v5;
      unint64_t v14 = 0;
    }
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    long long v13 = (unint64_t *)a2[3];
    if (!v13) {
      goto LABEL_40;
    }
    goto LABEL_53;
  }
  uint64_t v22 = (char *)(a1 + 16);

  IPC::Connection::cancelReply<Messages::WebPage::HandleWheelEvent,WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0>(v22);
}

void IPC::Connection::cancelReply<Messages::WebPage::HandleWheelEvent,WebKit::WebPageProxy::sendWheelEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebCore::RectEdges<BOOL>,std::optional<BOOL>,BOOL)::$_0>(char *a1)
{
  if (*(void *)a1)
  {
    uint64_t v1 = *(void *)(*(void *)a1 + 8);
    if (v1)
    {
      CFRetain(*(CFTypeRef *)(v1 - 8));
      if (!*(unsigned char *)(v1 + 785)) {
        WebKit::WebPageProxy::handleWheelEventReply((WebKit::WebPageProxy *)(v1 - 16), a1[135], 0);
      }
      uint64_t v3 = *(const void **)(v1 - 8);
      CFRelease(v3);
    }
  }
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::KeyEvent>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::KeyEvent &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::KeyEvent&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::KeyEvent>(*(void *)(v7 + 24), *(void *)a3, *(void *)(v7 + 16), *(unsigned char *)(a3 + 8));
        uint64_t v8 = *(const void **)(v6 + 8);
        CFRelease(v8);
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v9 = *(void *)(a1 + 256);
  uint64_t v10 = *(void *)a3;
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v12 = *(unsigned char *)(a3 + 8);

  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::KeyEvent>(v9, v10, v11, v12);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::KeyEvent>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2304;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::WebKeyboardEvent,void>::encode(v8, *(void *)(a2 + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void WTF::VectorMover<false,WebKit::NativeWebKeyboardEvent>::move(WebKit::WebKeyboardEvent *this, WTF::StringImpl *a2, uint64_t a3)
{
  if (this != a2)
  {
    uint64_t v5 = this;
    do
    {
      *(_DWORD *)a3 = 0;
      long long v6 = *(_OWORD *)((char *)v5 + 4);
      *(_OWORD *)(a3 + 16) = *((_OWORD *)v5 + 1);
      *(_OWORD *)(a3 + 4) = v6;
      uint64_t v7 = (_DWORD *)*((void *)v5 + 4);
      if (v7) {
        *v7 += 2;
      }
      *(void *)(a3 + 32) = v7;
      uint64_t v8 = (_DWORD *)*((void *)v5 + 5);
      if (v8) {
        *v8 += 2;
      }
      *(void *)(a3 + 40) = v8;
      uint64_t v9 = (_DWORD *)*((void *)v5 + 6);
      if (v9) {
        *v9 += 2;
      }
      *(void *)(a3 + 48) = v9;
      uint64_t v10 = (_DWORD *)*((void *)v5 + 7);
      if (v10) {
        *v10 += 2;
      }
      *(void *)(a3 + 56) = v10;
      uint64_t v11 = (_DWORD *)*((void *)v5 + 8);
      if (v11) {
        *v11 += 2;
      }
      *(void *)(a3 + 64) = v11;
      *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)v5 + 72);
      uint64_t v12 = *((void *)v5 + 11);
      *((void *)v5 + 11) = 0;
      *(void *)(a3 + 88) = v12;
      long long v13 = (const void *)*((void *)v5 + 11);
      *((void *)v5 + 11) = 0;
      if (v13) {
        CFRelease(v13);
      }
      WebKit::WebKeyboardEvent::~WebKeyboardEvent(v5, a2);
      uint64_t v5 = (WebKit::WebKeyboardEvent *)((char *)v5 + 96);
      a3 += 96;
    }
    while (v5 != a2);
  }
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::NativeWebTouchEvent const&)::$_0,unsigned long long>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 35;
  *((void *)v8 + 1) = a4;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v30 = v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebTouchEvent const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebTouchEvent const&>,0ul,1ul,2ul>(v8, a2);
  int v33 = 0;
  *(_OWORD *)unint64_t v34 = *(long long *)((char *)a3 + 20);
  long long v9 = a3[2];
  uint64_t v10 = *((void *)a3 + 6);
  *((void *)a3 + 6) = 0;
  uint64_t v11 = *((void *)a3 + 8);
  *((void *)a3 + 8) = 0;
  uint64_t v12 = *((void *)a3 + 10);
  *((void *)a3 + 10) = 0;
  long long v13 = a3[6];
  *(_OWORD *)&v34[12] = v9;
  long long v39 = v13;
  int v40 = *((_DWORD *)a3 + 28);
  uint64_t v14 = *((void *)a3 + 7);
  *((void *)a3 + 7) = 0;
  uint64_t v15 = *((void *)a3 + 9);
  *((void *)a3 + 9) = 0;
  uint64_t v16 = *((void *)a3 + 11);
  *((void *)a3 + 11) = 0;
  long long v29 = *a3;
  uint64_t v31 = *(void *)a3;
  *((void *)a3 + 1) = 0;
  uint64_t v17 = WTF::fastMalloc((WTF *)0x90);
  *(void *)uint64_t v17 = &unk_1EE9DA590;
  *(_OWORD *)(v17 + 16) = v29;
  *(_DWORD *)(v17 + 32) = 0;
  *(_OWORD *)(v17 + 48) = *(_OWORD *)&v34[12];
  *(_OWORD *)(v17 + 36) = *(_OWORD *)v34;
  unint64_t v32 = 0;
  unint64_t v35 = 0;
  *(void *)(v17 + 64) = v10;
  uint64_t v36 = 0;
  *(void *)(v17 + 72) = v14;
  v37[0] = 0;
  *(void *)(v17 + 80) = v11;
  v37[1] = 0;
  *(void *)(v17 + 88) = v15;
  v38[0] = 0;
  *(void *)(v17 + 96) = v12;
  v38[1] = 0;
  *(void *)(v17 + 104) = v16;
  long long v18 = v39;
  *(_DWORD *)(v17 + 128) = v40;
  *(_OWORD *)(v17 + 112) = v18;
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v38, v19);
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v20);
  uint64_t v22 = v35;
  if (v35)
  {
    unint64_t v35 = 0;
    LODWORD(v36) = 0;
    WTF::fastFree(v22, v21);
  }
  unint64_t v23 = (unsigned int *)v32;
  unint64_t v32 = 0;
  if (v23 && atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v23);
    WTF::fastFree((WTF *)v23, v21);
  }
  uint64_t v31 = v17;
  unint64_t v32 = (WTF *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  LOBYTE(v33) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v30, 0, (uint64_t)&v31, 1);
  if ((_BYTE)v33)
  {
    uint64_t v25 = v31;
    uint64_t v31 = 0;
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
  }
  uint64_t result = v30;
  unint64_t v30 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebTouchEvent const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebTouchEvent const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, *(uint64_t **)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 16);

  return IPC::ArgumentCoder<WebKit::WebTouchEvent,void>::encode(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::NativeWebTouchEvent const&)::$_0>(WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::NativeWebTouchEvent const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9DA590;
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 96, a2);
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 80, v3);
  uint64_t v5 = *(WTF **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v5, v4);
  }
  long long v6 = *(unsigned int **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v4);
  }
  return a1;
}

{
  void *v3;
  void *v4;
  WTF *v5;
  unsigned int *v6;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9DA590;
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 96, a2);
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 80, v3);
  uint64_t v5 = *(WTF **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v5, v4);
  }
  long long v6 = *(unsigned int **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v4);
  }

  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::NativeWebTouchEvent const&)::$_0>(WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::NativeWebTouchEvent const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = a1 + 16;
  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<BOOL,std::optional<WebCore::RemoteUserInputEventData>>>((uint64_t)v6, a2), v9))
  {
    uint64_t v3 = v6[0];
    v10[0] = v7;
    v10[1] = v8;
    uint64_t v4 = v10;
    uint64_t v5 = v2;
  }
  else
  {
    v6[0] = 0;
    LOBYTE(v8) = 0;
    uint64_t v4 = v6;
    uint64_t v5 = v2;
    uint64_t v3 = 0;
  }
  WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::NativeWebTouchEvent const&)::$_0::operator()(v5, v3, (uint64_t)v4);
}

unint64_t *IPC::Decoder::decode<std::tuple<BOOL,std::optional<WebCore::RemoteUserInputEventData>>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = a2[2];
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(unint64_t))(*(void *)v14 + 16))(v14);
        unint64_t v13 = *a2;
        unint64_t v12 = a2[1];
      }
      else
      {
        unint64_t v12 = 0;
        unint64_t v13 = 0;
      }
    }
    goto LABEL_7;
  }
  long long v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (unint64_t)(v8 + 1);
  if (!v5)
  {
    unint64_t v12 = v6;
    unint64_t v13 = 0;
LABEL_7:
    unint64_t v6 = 0;
    unint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v15 = a2[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        unint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        unint64_t v5 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    unint64_t v16 = a2[3];
    if (v16 && v6) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v16 + 16))(v16, v5);
    }
    goto LABEL_9;
  }
  uint64_t result = IPC::Decoder::decode<std::optional<WebCore::RemoteUserInputEventData>>(a2, (uint64_t)v19);
  if (v20)
  {
    long long v11 = v19[1];
    *(_OWORD *)(a1 + 8) = v19[0];
    *(_OWORD *)(a1 + 24) = v11;
    *(unsigned char *)a1 = v9 != 0;
    *(unsigned char *)(a1 + 40) = 1;
    return result;
  }
LABEL_9:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 40) = 0;
  unint64_t v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (unint64_t *)a2[3];
  if (result && v17)
  {
    long long v18 = *(uint64_t (**)(void))(*result + 16);
    return (unint64_t *)v18();
  }
  return result;
}

void WebKit::WebPageProxy::sendPreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::NativeWebTouchEvent const&)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    return;
  }
  uint64_t v8 = *(void *)a1;
  CFRetain(*(CFTypeRef *)(v4 - 8));
  if (*(unsigned char *)(a3 + 24))
  {
    *(void *)(a1 + 96) = *(void *)(a3 + 16);
    if (!*(unsigned char *)(a3 + 24))
    {
      __break(1u);
      return;
    }
    WebKit::WebPageProxy::sendPreventableTouchEvent(v8, *(void *)a3, *(void *)(a3 + 8), a1 + 16);
    goto LABEL_6;
  }
  unsigned int v10 = *(unsigned __int8 *)(a1 + 20);
  if (v10 == 13)
  {
    uint64_t v16 = *(void *)(v8 + 864);
    if (v16)
    {
      int v12 = 0;
      BOOL v15 = 0;
      uint64_t v17 = v16 - 1;
      *(void *)(v8 + 864) = v17;
      BOOL v13 = v17 == 0;
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v10 != 12)
  {
    if (v10 == 11)
    {
      uint64_t v11 = *(void *)(v8 + 856);
      if (v11)
      {
        int v12 = 0;
        BOOL v13 = 0;
        uint64_t v14 = v11 - 1;
        *(void *)(v8 + 856) = v14;
        BOOL v15 = v14 == 0;
        goto LABEL_23;
      }
    }
LABEL_22:
    int v12 = 0;
    BOOL v15 = 0;
    BOOL v13 = 0;
    goto LABEL_23;
  }
  if (*(unsigned char *)(v8 + 872) != 1) {
    goto LABEL_22;
  }
  BOOL v15 = 0;
  BOOL v13 = 0;
  if (a2) {
    char v18 = 2;
  }
  else {
    char v18 = 3;
  }
  *(unsigned char *)(v8 + 872) = v18;
  int v12 = 1;
LABEL_23:
  v27[0] = 0;
  v27[24] = 0;
  WebKit::WebPageProxy::didReceiveEvent(v8, v10, a2, (uint64_t)v27);
  uint64_t v19 = *(void *)(v8 + 40);
  if (!v19) {
    goto LABEL_6;
  }
  uint64_t v20 = *(void *)(v19 + 8);
  if (!v20) {
    goto LABEL_6;
  }
  (*(void (**)(uint64_t))(*(void *)v20 + 1592))(v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20 + 616))(v20, a1 + 16, a2);
  (*(void (**)(uint64_t))(*(void *)v20 + 1600))(v20);
  if (!v15)
  {
    if (!v12) {
      goto LABEL_27;
    }
LABEL_33:
    uint64_t v23 = *(void *)(v8 + 40);
    if (v23) {
      uint64_t v24 = *(void *)(v23 + 8);
    }
    else {
      uint64_t v24 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v24 + 1592))(v24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 632))(v24, a2);
    (*(void (**)(uint64_t))(*(void *)v24 + 1600))(v24);
    if (!v13) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }
  uint64_t v21 = *(void *)(v8 + 40);
  if (v21) {
    uint64_t v22 = *(void *)(v21 + 8);
  }
  else {
    uint64_t v22 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v22 + 1592))(v22);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 624))(v22, a2);
  (*(void (**)(uint64_t))(*(void *)v22 + 1600))(v22);
  if (v12) {
    goto LABEL_33;
  }
LABEL_27:
  if (v13)
  {
LABEL_37:
    uint64_t v25 = *(void *)(v8 + 40);
    if (v25) {
      uint64_t v26 = *(void *)(v25 + 8);
    }
    else {
      uint64_t v26 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v26 + 1592))(v26);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 640))(v26, a2);
    (*(void (**)(uint64_t))(*(void *)v26 + 1600))(v26);
  }
LABEL_6:
  unsigned int v9 = *(const void **)(v4 - 8);

  CFRelease(v9);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ResetPotentialTapSecurityOrigin>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 2379;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendUnpreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::NativeWebTouchEvent const&)::$_0,unsigned long long>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 35;
  *((void *)v8 + 1) = a4;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v30 = v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebTouchEvent const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::WebTouchEvent const&>,0ul,1ul,2ul>(v8, a2);
  int v33 = 0;
  *(_OWORD *)unint64_t v34 = *(long long *)((char *)a3 + 20);
  long long v9 = a3[2];
  uint64_t v10 = *((void *)a3 + 6);
  *((void *)a3 + 6) = 0;
  uint64_t v11 = *((void *)a3 + 8);
  *((void *)a3 + 8) = 0;
  uint64_t v12 = *((void *)a3 + 10);
  *((void *)a3 + 10) = 0;
  long long v13 = a3[6];
  *(_OWORD *)&v34[12] = v9;
  long long v39 = v13;
  int v40 = *((_DWORD *)a3 + 28);
  uint64_t v14 = *((void *)a3 + 7);
  *((void *)a3 + 7) = 0;
  uint64_t v15 = *((void *)a3 + 9);
  *((void *)a3 + 9) = 0;
  uint64_t v16 = *((void *)a3 + 11);
  *((void *)a3 + 11) = 0;
  long long v29 = *a3;
  uint64_t v31 = *(void *)a3;
  *((void *)a3 + 1) = 0;
  uint64_t v17 = WTF::fastMalloc((WTF *)0x90);
  *(void *)uint64_t v17 = &unk_1EE9DA5B8;
  *(_OWORD *)(v17 + 16) = v29;
  *(_DWORD *)(v17 + 32) = 0;
  *(_OWORD *)(v17 + 48) = *(_OWORD *)&v34[12];
  *(_OWORD *)(v17 + 36) = *(_OWORD *)v34;
  uint64_t v32 = 0;
  unint64_t v35 = 0;
  *(void *)(v17 + 64) = v10;
  uint64_t v36 = 0;
  *(void *)(v17 + 72) = v14;
  v37[0] = 0;
  *(void *)(v17 + 80) = v11;
  v37[1] = 0;
  *(void *)(v17 + 88) = v15;
  v38[0] = 0;
  *(void *)(v17 + 96) = v12;
  v38[1] = 0;
  *(void *)(v17 + 104) = v16;
  long long v18 = v39;
  *(_DWORD *)(v17 + 128) = v40;
  *(_OWORD *)(v17 + 112) = v18;
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v38, v19);
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v20);
  uint64_t v22 = v35;
  if (v35)
  {
    unint64_t v35 = 0;
    LODWORD(v36) = 0;
    WTF::fastFree(v22, v21);
  }
  uint64_t v23 = v32;
  uint64_t v32 = 0;
  if (v23) {
    CFRelease(*(CFTypeRef *)(v23 + 8));
  }
  uint64_t v31 = v17;
  uint64_t v32 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  LOBYTE(v33) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v30, 0, (uint64_t)&v31, 1);
  if ((_BYTE)v33)
  {
    uint64_t v25 = v31;
    uint64_t v31 = 0;
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
  }
  uint64_t result = v30;
  unint64_t v30 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendUnpreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::NativeWebTouchEvent const&)::$_0>(WebKit::WebPageProxy::sendUnpreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::NativeWebTouchEvent const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9DA5B8;
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 96, a2);
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 80, v3);
  unint64_t v5 = *(WTF **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v5, v4);
  }
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  return a1;
}

{
  void *v3;
  void *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9DA5B8;
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 96, a2);
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 80, v3);
  unint64_t v5 = *(WTF **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v5, v4);
  }
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }

  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::EventDispatcher::TouchEvent,WebKit::WebPageProxy::sendUnpreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::NativeWebTouchEvent const&)::$_0>(WebKit::WebPageProxy::sendUnpreventableTouchEvent(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::NativeWebTouchEvent const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  if (a2)
  {
    if (*a2)
    {
      IPC::Decoder::decode<std::tuple<BOOL,std::optional<WebCore::RemoteUserInputEventData>>>((uint64_t)v6, a2);
      if (v8)
      {
        if (v7)
        {
          uint64_t v3 = *(void *)(a1 + 16);
          uint64_t v4 = v6[2];
          uint64_t v5 = v6[1];
          *(void *)(a1 + 112) = v6[3];
          WebKit::WebPageProxy::sendUnpreventableTouchEvent(v3, v5, v4, a1 + 32);
        }
      }
    }
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CancelPointer>(uint64_t a1, int **a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2156;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  long long v18 = v8;
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(v8, **a2);
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v8, a2[1]);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  long long v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::TouchWithIdentifierWasRemoved>(uint64_t a1, int **a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2514;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  long long v18 = v8;
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(v8, **a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  long long v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CenterSelectionInVisibleArea>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 2159;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ClearServiceWorkerEntitlementOverride,WebKit::WebPageProxy::clearServiceWorkerEntitlementOverride(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::clearServiceWorkerEntitlementOverride(WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DA5E0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ClearServiceWorkerEntitlementOverride,WebKit::WebPageProxy::clearServiceWorkerEntitlementOverride(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::clearServiceWorkerEntitlementOverride(WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DA5E0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearServiceWorkerEntitlementOverride,WebKit::WebPageProxy::clearServiceWorkerEntitlementOverride(WTF::CompletionHandler<void ()(void)> &&)::$_1>(WebKit::WebPageProxy::clearServiceWorkerEntitlementOverride(WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DA608;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearServiceWorkerEntitlementOverride,WebKit::WebPageProxy::clearServiceWorkerEntitlementOverride(WTF::CompletionHandler<void ()(void)> &&)::$_1>(WebKit::WebPageProxy::clearServiceWorkerEntitlementOverride(WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DA608;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedNavigationActionPolicyDecision(WebKit::WebProcessProxy &,WebCore::PolicyAction,API::Navigation *,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::ProcessSwapRequestedByClient,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WebKit::WasNavigationIntercepted,WTF::URL const&,std::optional<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DA630;
  WebKit::WebPageProxy::receivedNavigationActionPolicyDecision(WebKit::WebProcessProxy &,WebCore::PolicyAction,API::Navigation *,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::ProcessSwapRequestedByClient,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WebKit::WasNavigationIntercepted,WTF::URL const&,std::optional<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedNavigationActionPolicyDecision(WebKit::WebProcessProxy &,WebCore::PolicyAction,API::Navigation *,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::ProcessSwapRequestedByClient,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WebKit::WasNavigationIntercepted,WTF::URL const&,std::optional<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9DA630;
  WebKit::WebPageProxy::receivedNavigationActionPolicyDecision(WebKit::WebProcessProxy &,WebCore::PolicyAction,API::Navigation *,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::ProcessSwapRequestedByClient,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WebKit::WasNavigationIntercepted,WTF::URL const&,std::optional<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedNavigationActionPolicyDecision(WebKit::WebProcessProxy &,WebCore::PolicyAction,API::Navigation *,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::ProcessSwapRequestedByClient,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WebKit::WasNavigationIntercepted,WTF::URL const&,std::optional<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral>::call(uint64_t a1, WebKit::WebProcessProxy **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(v9 + 328);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 272);
    uint64_t v4 = *(void *)(v10 + 280);
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (*(unsigned char *)(v9 + 801))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    goto LABEL_13;
  }
  uint64_t v12 = *(void *)(a1 + 32);
  if (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(*(void *)(*(void *)(v9 + 160) + 8), *(void *)(v12 + 16)))
  {
    uint64_t v14 = a1 + 40;
    uint64_t v13 = *(void *)(a1 + 40);
    if (!*(unsigned char *)(v13 + 2904)
      || v10 && (*(void *)(v13 + 2888) == v11 ? (BOOL v15 = *(void *)(v13 + 2896) == v4) : (BOOL v15 = 0), v15))
    {
      uint64_t v18 = *(void *)(v9 + 40);
      if (v18) {
        uint64_t v19 = *(void *)(v18 + 8);
      }
      else {
        uint64_t v19 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v19 + 1592))(v19);
      uint64_t v21 = *(void *)(v9 + 272);
      {
        WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      int BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v21 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v20);
      uint64_t v23 = *(void *)(a1 + 64);
      if (BoolValueForKey && *(unsigned char *)(v23 + 441) && (uint64_t v24 = *(void *)(v9 + 1192)) != 0) {
        uint64_t v25 = *(void *)(v24 + 40);
      }
      else {
        uint64_t v25 = *(void *)(v23 + 32);
      }
      uint64_t v26 = *(void *)(v25 + 16);
      unint64_t v27 = (unsigned int *)(v26 + 16);
      atomic_fetch_add((atomic_uint *volatile)(v26 + 16), 1u);
      unint64_t v28 = *a2;
      uint64_t v29 = *((void *)*a2 + 22);
      if (v29 != *(void *)(v26 + 176))
      {
        *(unsigned char *)(a1 + 24) = 3;
        unint64_t v37 = qword_1EB358370;
        if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v38 = *(void *)(v9 + 32);
          uint64_t v39 = *(void *)(*(void *)(v9 + 256) + 136);
          if (v39)
          {
            LODWORD(v39) = *(_DWORD *)(v39 + 108);
            if (*(unsigned char *)(v9 + 801)) {
              int v40 = 0;
            }
            else {
              int v40 = v39;
            }
          }
          else
          {
            int v40 = 0;
          }
          uint64_t v71 = *(void *)(v38 + 760);
          uint64_t v72 = *(void *)(v38 + 1928);
          uint64_t v73 = *((void *)v28 + 17);
          if (v73) {
            LODWORD(v73) = *(_DWORD *)(v73 + 108);
          }
          *(_DWORD *)buf = 134219522;
          *(void *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v71;
          __int16 v99 = 2048;
          *(void *)&long long v100 = v72;
          WORD4(v100) = 1024;
          *(_DWORD *)((char *)&v100 + 10) = v39;
          HIWORD(v100) = 1024;
          int v101 = v40;
          __int16 v102 = 1024;
          LODWORD(v103[0]) = v73;
          WORD2(v103[0]) = 2082;
          *(void *)((char *)v103 + 6) = a4;
          _os_log_impl(&dword_1985F2000, v37, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::decidePolicyForNavigationAction, swapping process %i with process %i for navigation, reason=%{public}s", buf, 0x3Cu);
          unint64_t v28 = *a2;
        }
        WTF::RefCounter<WebKit::WebProcessProxy::ShutdownPreventingScopeType>::count((void *)v28 + 126, &v95);
        if (a3)
        {
          uint64_t v74 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(v9 + 48) + 24));
          WebKit::WebBackForwardCache::takeSuspendedPage(*(WebKit::WebBackForwardCache **)(v74 + 760), *(WebKit::WebBackForwardListItem **)(*(void *)(a1 + 32) + 464), &v94);
          v76 = v94;
          if (v94 && (*((unsigned char *)v94 + 88) || *((unsigned char *)v94 + 90)))
          {
            v94 = 0;
            (*(void (**)(API::WebsitePolicies *))(*(void *)v76 + 8))(v76);
          }
        }
        else
        {
          v94 = 0;
          uint64_t v77 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(v9 + 48) + 24));
          WebKit::WebBackForwardCache::removeEntriesForPageAndProcess(*(WebKit::WebBackForwardCache **)(v77 + 760), (WebKit::WebPageProxy *)v9, *a2);
        }
        WebKit::WebPageProxy::continueNavigationInNewProcess(v9, *(void *)(a1 + 32), *(void *)(a1 + 64), (uint64_t *)&v94, a2, *(unsigned char *)(a1 + 56), 1, v75, 0, 0, 0, *(unsigned char *)(a1 + 104), *(unsigned char *)(*(void *)(a1 + 40) + 653), *(void *)(a1 + 112));
        v78 = (WTF::StringImpl *)*(unsigned __int8 *)(a1 + 24);
        uint64_t v79 = *(void *)(a1 + 32);
        v93 = 0;
        buf[0] = 0;
        buf[8] = 0;
        WebKit::WebPageProxy::receivedPolicyDecision(v9, v78, v79, &v93, (const String **)(a1 + 40), 1, (uint64_t)buf, (__int16 *)(a1 + 80), (uint64_t *)(a1 + 48));
        if (buf[8]) {
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)buf);
        }
        v80 = v94;
        v94 = 0;
        if (v80) {
          (*(void (**)(API::WebsitePolicies *))(*(void *)v80 + 8))(v80);
        }
        v81 = v95;
        v95 = 0;
        if (!v81) {
          goto LABEL_117;
        }
        v82 = *v81;
        uint64_t v83 = (uint64_t)(v81[1] - 1);
        v81[1] = (const char *)v83;
        if (v82)
        {
          uint64_t v84 = *(void *)v82;
          if (!*(void *)v82) {
            goto LABEL_117;
          }
          char v85 = *((unsigned char *)v81 + 16);
          *((unsigned char *)v81 + 16) = 1;
          (*(void (**)(uint64_t, void))(*(void *)v84 + 16))(v84, 0);
          *((unsigned char *)v81 + 16) = v85;
          if (*v81) {
            goto LABEL_117;
          }
          uint64_t v83 = (uint64_t)v81[1];
        }
        if (!v83) {
          MEMORY[0x199740C10](v81, 0x1020C40545B2139);
        }
        goto LABEL_117;
      }
      uint64_t v30 = *(void *)(*(void *)(a1 + 72) + 176);
      uint64_t v31 = qword_1EB358370;
      if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v32 = *(void *)(v9 + 32);
        uint64_t v33 = *(void *)(v32 + 760);
        uint64_t v34 = *(void *)(v32 + 1928);
        uint64_t v35 = *(void *)(*(void *)(v9 + 256) + 136);
        if (v35)
        {
          LODWORD(v35) = *(_DWORD *)(v35 + 108);
          if (*(unsigned char *)(v9 + 801)) {
            int v36 = 0;
          }
          else {
            int v36 = v35;
          }
        }
        else
        {
          int v36 = 0;
        }
        *(_DWORD *)buf = 134219266;
        *(void *)&buf[4] = v9;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v33;
        __int16 v99 = 2048;
        *(void *)&long long v100 = v34;
        WORD4(v100) = 1024;
        *(_DWORD *)((char *)&v100 + 10) = v35;
        HIWORD(v100) = 1024;
        int v101 = v36;
        __int16 v102 = 2082;
        v103[0] = a4;
        _os_log_impl(&dword_1985F2000, v31, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::decidePolicyForNavigationAction: keep using process %i for navigation, reason=%{public}s", buf, 0x36u);
      }
      uint64_t v41 = (WebKit::ProvisionalFrameProxy **)(*(void *)(a1 + 64) + 320);
      unsigned __int8 v42 = *v41;
      *uint64_t v41 = 0;
      std::unique_ptr<WebKit::ProvisionalFrameProxy>::reset[abi:sn180100](v41, 0);
      if (v42)
      {
        WebKit::ProvisionalFrameProxy::~ProvisionalFrameProxy(v42, v43);
        WTF::fastFree(v44, v45);
      }
      if (v30 != v29)
      {
        *(void *)buf = 0;
        buf[8] = 0;
        buf[16] = 0;
        LOBYTE(v100) = 0;
        LOBYTE(v101) = 0;
        v46 = WebCore::ResourceRequest::ResourceRequest((StringImpl *)((char *)v103 + 2));
        v107[144] = 0;
        __int16 v108 = 0;
        __int16 v110 = 0;
        v111[0] = 0;
        v111[48] = 0;
        __int16 v112 = 0;
        char v113 = 0;
        char v114 = 0;
        char v115 = 0;
        char v116 = 0;
        char v117 = 0;
        __int16 v118 = 0;
        char v119 = 0;
        char v120 = 0;
        long long v106 = 0u;
        memset(v107, 0, 25);
        long long v105 = 0u;
        *(_DWORD *)((char *)v109 + 7) = 0;
        uint64_t v47 = *(void *)(a1 + 32);
        v109[2] = 0;
        v109[0] = 0;
        WebCore::ResourceRequestBase::operator=((uint64_t)v46, v47 + 232);
        v48 = *(const void **)(v47 + 424);
        if (v48) {
          CFRetain(v48);
        }
        CFTypeRef v49 = cf;
        CFTypeRef cf = v48;
        if (v49) {
          CFRelease(v49);
        }
        uint64_t v50 = *(void *)(a1 + 32);
        if (*(unsigned char *)(v50 + 738)) {
          char v51 = 1;
        }
        else {
          char v51 = 2;
        }
        HIBYTE(v108) = v51;
        long long v100 = *(_OWORD *)(*(void *)(a1 + 64) + 272);
        if (!(_BYTE)v101) {
          LOBYTE(v101) = 1;
        }
        LOBYTE(v118) = *(unsigned char *)(*(void *)v14 + 648);
        uint64_t v52 = *(void *)(v50 + 16);
        if (!buf[16]) {
          buf[16] = 1;
        }
        *(void *)&buf[8] = v52;
        LOBYTE(v95) = 0;
        char v97 = 0;
        if (*(unsigned char *)(v50 + 1048))
        {
          std::construct_at[abi:sn180100]<WebCore::OwnerPermissionsPolicyData,WebCore::OwnerPermissionsPolicyData const&,WebCore::OwnerPermissionsPolicyData*>((uint64_t)&v95, v50 + 1000);
          char v97 = 1;
        }
        std::__optional_storage_base<WebCore::OwnerPermissionsPolicyData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::OwnerPermissionsPolicyData,false>>((uint64_t)v111, (uint64_t)&v95);
        std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v95, v53);
        HIBYTE(v118) = *(unsigned char *)(*(void *)v14 + 653);
        v54 = *a2;
        v95 = (const char **)buf;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequest>((uint64_t)v54, (uint64_t *)&v95, *(void *)(*(void *)(v9 + 32) + 1928), 0);
        WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)buf, v55);
      }
      uint64_t v56 = *(void *)(a1 + 32);
      uint64_t v57 = *(void *)(v56 + 480);
      if (v57 || (uint64_t v57 = *(void *)(v56 + 464)) != 0)
      {
        CFRetain(*(CFTypeRef *)(v57 + 8));
        LOBYTE(v95) = 0;
        char v96 = 0;
        v59 = (unsigned __int8 *)(a1 + 24);
        v58 = (WTF::StringImpl *)*(unsigned __int8 *)(a1 + 24);
        if (*(unsigned char *)(a1 + 24))
        {
          char v60 = 0;
LABEL_107:
          uint64_t v87 = *(void *)(a1 + 32);
          v88 = *(CFTypeRef **)(v87 + 3488);
          if (v88) {
            CFRetain(v88[1]);
          }
          v94 = (API::WebsitePolicies *)v88;
          buf[0] = 0;
          buf[8] = 0;
          if (v96)
          {
            v89 = v95;
            v95 = 0;
            *(void *)buf = v89;
            buf[8] = 1;
          }
          WebKit::WebPageProxy::receivedPolicyDecision(v9, v58, v87, &v94, (const String **)(a1 + 40), 0, (uint64_t)buf, (__int16 *)(a1 + 80), (uint64_t *)(a1 + 48));
          if (!buf[8])
          {
            if (!v88) {
              goto LABEL_114;
            }
            goto LABEL_113;
          }
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)buf);
          if (v88) {
LABEL_113:
          }
            CFRelease(v88[1]);
LABEL_114:
          if (v96)
          {
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v95);
            if (v60) {
              goto LABEL_117;
            }
          }
          else if (v60)
          {
LABEL_117:
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v27);
            (*(void (**)(uint64_t))(*(void *)v19 + 1600))(v19);
            return;
          }
          CFRelease(*(CFTypeRef *)(v57 + 8));
          goto LABEL_117;
        }
        WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(v57 + 56));
        if (WTF::URL::protocolIs())
        {
          v62 = *a2;
          WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v9 + 24), v9 + 16);
          v63 = *(atomic_uint **)(v9 + 24);
          if (v63) {
            atomic_fetch_add(v63, 1u);
          }
          long long v92 = *(_OWORD *)(a1 + 32);
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 40) = 0;
          int v64 = *(unsigned __int8 *)(a1 + 96);
          if (*(unsigned char *)(a1 + 96))
          {
            __int16 v91 = *(_WORD *)(a1 + 80);
            v90 = *(WTF::StringImpl **)(a1 + 88);
            *(void *)(a1 + 88) = 0;
          }
          else
          {
            __int16 v91 = 0;
          }
          uint64_t v65 = *(void *)(a1 + 48);
          *(void *)(a1 + 48) = 0;
          char v66 = *(unsigned char *)(a1 + 24);
          uint64_t v67 = WTF::fastMalloc((WTF *)0x48);
          *(void *)uint64_t v67 = &unk_1EE9DA658;
          *(void *)(v67 + 8) = v63;
          *(_OWORD *)(v67 + 16) = v92;
          *(unsigned char *)(v67 + 32) = 0;
          *(unsigned char *)(v67 + 48) = 0;
          if (v64)
          {
            *(_WORD *)(v67 + 32) = v91;
            *(void *)(v67 + 40) = v90;
            *(unsigned char *)(v67 + 48) = 1;
            v90 = 0;
          }
          *(void *)(v67 + 56) = v65;
          *(unsigned char *)(v67 + 64) = v66;
          v94 = (API::WebsitePolicies *)v67;
          WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle(v9, (uint64_t)v62, (const WTF::URL *)buf, (WTF::URL *)(v57 + 344), 1, (uint64_t *)&v94);
          v69 = v94;
          v94 = 0;
          if (v69) {
            (*(void (**)(API::WebsitePolicies *))(*(void *)v69 + 8))(v69);
          }
          if (v64 && v90)
          {
            if (*(_DWORD *)v90 == 2) {
              WTF::StringImpl::destroy(v90, v68);
            }
            else {
              *(_DWORD *)v90 -= 2;
            }
          }
          v70 = *(WTF::StringImpl **)buf;
          *(void *)buf = 0;
          if (v70)
          {
            if (*(_DWORD *)v70 == 2) {
              WTF::StringImpl::destroy(v70, v68);
            }
            else {
              *(_DWORD *)v70 -= 2;
            }
          }
          char v60 = 0;
          goto LABEL_114;
        }
        v86 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v86)
        {
          if (*(_DWORD *)v86 == 2) {
            WTF::StringImpl::destroy(v86, v61);
          }
          else {
            *(_DWORD *)v86 -= 2;
          }
        }
        char v60 = 0;
      }
      else
      {
        LOBYTE(v95) = 0;
        char v96 = 0;
        v59 = (unsigned __int8 *)(a1 + 24);
        char v60 = 1;
      }
      v58 = (WTF::StringImpl *)*v59;
      goto LABEL_107;
    }
  }
LABEL_13:
  char v16 = (WTF::StringImpl *)*(unsigned __int8 *)(a1 + 24);
  uint64_t v17 = *(void *)(v12 + 3488);
  if (v17)
  {
    CFRetain(*(CFTypeRef *)(v17 + 8));
    CFRetain(*(CFTypeRef *)(v17 + 8));
  }
  v95 = (const char **)v17;
  buf[0] = 0;
  buf[8] = 0;
  WebKit::WebPageProxy::receivedPolicyDecision(v9, v16, v12, (API::WebsitePolicies **)&v95, (const String **)(a1 + 40), 0, (uint64_t)buf, (__int16 *)(a1 + 80), (uint64_t *)(a1 + 48));
  if (!buf[8])
  {
    if (!v17) {
      return;
    }
    goto LABEL_17;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)buf);
  if (v17)
  {
LABEL_17:
    CFRelease(*(CFTypeRef *)(v17 + 8));
    CFRelease(*(CFTypeRef *)(v17 + 8));
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedNavigationActionPolicyDecision(WebKit::WebProcessProxy &,WebCore::PolicyAction,API::Navigation *,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::ProcessSwapRequestedByClient,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WebKit::WasNavigationIntercepted,WTF::URL const&,std::optional<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral)::{lambda(std::__1<WebKit::SandboxExtensionHandle> &&)#1},void,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9DA658;
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(unsigned char *)(a1 + 48))
  {
    char v8 = *(WTF::StringImpl **)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, a2);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
  }
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  uint64_t v6 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedNavigationActionPolicyDecision(WebKit::WebProcessProxy &,WebCore::PolicyAction,API::Navigation *,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::ProcessSwapRequestedByClient,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WebKit::WasNavigationIntercepted,WTF::URL const&,std::optional<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral)::{lambda(std::__1<WebKit::SandboxExtensionHandle> &&)#1},void,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DA658;
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*((unsigned char *)this + 48))
  {
    char v8 = (WTF::StringImpl *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, a2);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedNavigationActionPolicyDecision(WebKit::WebProcessProxy &,WebCore::PolicyAction,API::Navigation *,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::ProcessSwapRequestedByClient,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WebKit::WasNavigationIntercepted,WTF::URL const&,std::optional<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral)::{lambda(std::__1<WebKit::SandboxExtensionHandle> &&)#1},void,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v6 = v3 - 16;
      char v7 = (WTF::StringImpl *)*(unsigned __int8 *)(a1 + 64);
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(CFTypeRef **)(v8 + 3488);
      if (v9) {
        CFRetain(v9[1]);
      }
      uint64_t v13 = v9;
      LOBYTE(v11) = 0;
      char v12 = 0;
      if (*(unsigned char *)(a2 + 8))
      {
        uint64_t v10 = *(const char ***)a2;
        *(void *)a2 = 0;
        uint64_t v11 = v10;
        char v12 = 1;
      }
      WebKit::WebPageProxy::receivedPolicyDecision(v6, v7, v8, (API::WebsitePolicies **)&v13, (const String **)(a1 + 24), 0, (uint64_t)&v11, (__int16 *)(a1 + 32), (uint64_t *)(a1 + 56));
      if (v12)
      {
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v11);
        if (!v9) {
          return;
        }
      }
      else if (!v9)
      {
        return;
      }
      CFRelease(v9[1]);
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedPolicyDecision(WebCore::PolicyAction,API::Navigation *,WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::WebPageProxy::WillContinueLoadInNewProcess,std::optional<WebKit::SandboxExtensionHandle>,WebKit::WebPageProxy::WillContinueLoadInNewProcess<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebKit::DownloadProxy *>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DA680;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedPolicyDecision(WebCore::PolicyAction,API::Navigation *,WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::WebPageProxy::WillContinueLoadInNewProcess,std::optional<WebKit::SandboxExtensionHandle>,WebKit::WebPageProxy::WillContinueLoadInNewProcess<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebKit::DownloadProxy *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DA680;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedPolicyDecision(WebCore::PolicyAction,API::Navigation *,WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::WebPageProxy::WillContinueLoadInNewProcess,std::optional<WebKit::SandboxExtensionHandle>,WebKit::WebPageProxy::WillContinueLoadInNewProcess<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebKit::DownloadProxy *>::call(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v6 = a1[1];
      CFRetain(*(CFTypeRef *)(v3 - 8));
      if (a2) {
        (*(void (**)(void, uint64_t, void, uint64_t))(**(void **)(v6 + 72) + 200))(*(void *)(v6 + 72), v6, a1[3], a2);
      }
      char v7 = *(const void **)(v3 - 8);
      CFRelease(v7);
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedNavigationResponsePolicyDecision(WebCore::PolicyAction,API::Navigation *,WebCore::ResourceRequest const&,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebKit::DownloadProxy *>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DA6A8;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedNavigationResponsePolicyDecision(WebCore::PolicyAction,API::Navigation *,WebCore::ResourceRequest const&,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebKit::DownloadProxy *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DA6A8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::receivedNavigationResponsePolicyDecision(WebCore::PolicyAction,API::Navigation *,WebCore::ResourceRequest const&,WTF::Ref<API::NavigationResponse,WTF::RawPtrTraits<API::NavigationResponse>,WTF::DefaultRefDerefTraits<API::NavigationResponse>> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebKit::DownloadProxy *>::call(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v6 = a1[1];
      CFRetain(*(CFTypeRef *)(v3 - 8));
      if (a2)
      {
        uint64_t v7 = a1[3];
        if (*(void *)(v7 + 488))
        {
          WTF::String::operator=((uint64_t *)(a2 + 272), (WTF::StringImpl **)(v7 + 488));
          uint64_t v7 = a1[3];
        }
        (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v6 + 72) + 192))(*(void *)(v6 + 72), v6, v7, a2);
      }
      uint64_t v8 = *(const void **)(v3 - 8);
      CFRelease(v8);
    }
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SwipeAnimationDidEnd>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2506;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LoadedWebArchive,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&::IsPerformingHTTPFallback,WebKit::WebsiteDataStore *)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DA6D0;
  uint64_t v3 = a1[76];
  a1[76] = 0;
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)v3;
    uint64_t v5 = *(void *)(v3 + 8) - 1;
    *(void *)(v3 + 8) = v5;
    if (v4)
    {
      uint64_t v6 = *v4;
      if (!*v4) {
        goto LABEL_8;
      }
      char v7 = *(unsigned char *)(v3 + 16);
      *(unsigned char *)(v3 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
      *(unsigned char *)(v3 + 16) = v7;
      if (*(void *)v3) {
        goto LABEL_8;
      }
      uint64_t v5 = *(void *)(v3 + 8);
    }
    if (!v5) {
      MEMORY[0x199740C10](v3, 0x1020C40545B2139);
    }
  }
LABEL_8:
  uint64_t v8 = a1[74];
  a1[74] = 0;
  if (v8) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  }
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LoadedWebArchive,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&::IsPerformingHTTPFallback,WebKit::WebsiteDataStore *)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DA6D0;
  uint64_t v3 = a1[76];
  a1[76] = 0;
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)v3;
    uint64_t v5 = *(void *)(v3 + 8) - 1;
    *(void *)(v3 + 8) = v5;
    if (v4)
    {
      uint64_t v6 = *v4;
      if (!*v4) {
        goto LABEL_8;
      }
      char v7 = *(unsigned char *)(v3 + 16);
      *(unsigned char *)(v3 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
      *(unsigned char *)(v3 + 16) = v7;
      if (*(void *)v3) {
        goto LABEL_8;
      }
      uint64_t v5 = *(void *)(v3 + 8);
    }
    if (!v5) {
      MEMORY[0x199740C10](v3, 0x1020C40545B2139);
    }
  }
LABEL_8:
  uint64_t v8 = a1[74];
  a1[74] = 0;
  if (v8) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  }
  WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)(a1 + 1), a2);

  return WTF::fastFree((WTF *)a1, v9);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LoadedWebArchive,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&::IsPerformingHTTPFallback,WebKit::WebsiteDataStore *)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 592);
  uint64_t v3 = a1 + 8;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequest>(v1, &v3, *(void *)(a1 + 600), 0);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LoadedWebArchive,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&::IsPerformingHTTPFallback,WebKit::WebsiteDataStore *)::$_1,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DA6F8;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LoadedWebArchive,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&::IsPerformingHTTPFallback,WebKit::WebsiteDataStore *)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DA6F8;
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LoadedWebArchive,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&::IsPerformingHTTPFallback,WebKit::WebsiteDataStore *)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(v3 + 464);
  if (v4)
  {
    uint64_t v5 = *(void *)(v2 + 32);
    uint64_t v6 = *(void *)(*(void *)(v5 + 992) + 8);
    if (v6)
    {
      uint64_t v7 = v6 - 16;
      CFRetain(*(CFTypeRef *)(v6 - 8));
      uint64_t v8 = *(void *)(v2 + 32);
      uint64_t v3 = *(void *)(a1 + 24);
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(void *)(v2 + 32);
    }
    v47[0] = v7;
    v47[1] = v5 + 976;
    ++*(_DWORD *)(v5 + 1348);
    *(unsigned char *)(v5 + 1344) = 1;
    uint64_t v9 = *(void *)(v3 + 16);
    uint64_t v10 = *(_DWORD **)(v4 + 56);
    if (v10) {
      *v10 += 2;
    }
    unsigned __int8 v42 = 0;
    WTF::URL::invalidate((WTF::URL *)&v42);
    *(void *)(v8 + 1176) = v9;
    char v12 = *(WTF::StringImpl **)(v8 + 1184);
    *(void *)(v8 + 1184) = v10;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v11);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    WTF::String::operator=((uint64_t *)(v8 + 1264), &v42);
    *(_OWORD *)(v8 + 1272) = v43;
    *(_OWORD *)(v8 + 1288) = v44;
    uint64_t v35 = v42;
    unsigned __int8 v42 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2) {
        WTF::StringImpl::destroy(v35, v34);
      }
      else {
        *(_DWORD *)v35 -= 2;
      }
    }
    WebKit::ProvisionalPageProxy::goToBackForwardItem(*(void *)(v2 + 1192), *(void *)(a1 + 24), v4, (API::WebsitePolicies **)(a1 + 40), *(unsigned char *)(a1 + 32), *(void *)(a1 + 48), *(void *)(a1 + 56));
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v47, v36, v37);
  }
  else
  {
    uint64_t v13 = *(void *)(v2 + 664);
    uint64_t v14 = *(void *)(v13 + 16);
    if (v14 && *(void *)(v14 + 8) && *(unsigned char *)(v13 + 48))
    {
      unint64_t v15 = *(void *)(v13 + 40);
      if (v15 >= *(unsigned int *)(v13 + 36))
      {
        __break(0xC471u);
        return;
      }
      uint64_t v16 = *(void *)(*(void *)(v13 + 24) + 8 * v15);
      if (v16 && (*(unsigned char *)(v3 + 977) || *(unsigned char *)(v3 + 976)))
      {
        uint64_t v17 = *(void **)(v2 + 1192);
        uint64_t v18 = v16 + 32;
        uint64_t v19 = v17[2];
        v17 += 2;
        uint64_t v20 = (*(uint64_t (**)(void *))(v19 + 56))(v17);
        uint64_t v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v21 = 2421;
        *((void *)v21 + 1) = v20;
        *((void *)v21 + 66) = (char *)v21 + 16;
        *((void *)v21 + 67) = 512;
        *((void *)v21 + 68) = 0;
        *((void *)v21 + 70) = 0;
        *((void *)v21 + 69) = 0;
        IPC::Encoder::encodeHeader(v21);
        unsigned __int8 v42 = v21;
        IPC::ArgumentCoder<WebKit::BackForwardListItemState,void>::encode(v21, v18);
        (*(void (**)(void *, WTF::StringImpl **, void))(*v17 + 32))(v17, &v42, 0);
        uint64_t v23 = v42;
        unsigned __int8 v42 = 0;
        if (v23)
        {
          IPC::Encoder::~Encoder(v23, v22);
          WTF::fastFree(v40, v41);
        }
      }
    }
    LOBYTE(v47[0]) = 0;
    char v48 = 0;
    uint64_t v24 = *(API::WebsitePolicies **)(a1 + 40);
    if (v24)
    {
      API::WebsitePolicies::data(v24, (__n128 *)&v42);
      std::optional<WebKit::WebsitePoliciesData>::operator=[abi:sn180100]<WebKit::WebsitePoliciesData,void>((uint64_t)v47, (uint64_t *)&v42);
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v42, v25);
    }
    uint64_t v26 = *(const String **)(a1 + 24);
    m_ptr = v26[62].m_impl.m_ptr;
    unint64_t v28 = *(void **)(v2 + 1192);
    if (m_ptr)
    {
      uint64_t v29 = (WTF *)*((unsigned int *)m_ptr + 3);
      unsigned __int8 v42 = 0;
      LODWORD(v43) = 0;
      DWORD1(v43) = v29;
      if (v29)
      {
        uint64_t v30 = (WTF::StringImpl *)WTF::fastMalloc(v29);
        LODWORD(v43) = v29;
        unsigned __int8 v42 = v30;
        memcpy(v30, *(const void **)m_ptr, *((unsigned int *)m_ptr + 3));
      }
      WebCore::SharedBuffer::create<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v46);
      WebKit::ProvisionalPageProxy::loadData(v28, (uint64_t)v26, (uint64_t *)&v46, (WTF::StringImpl **)v26[62].m_impl.m_ptr + 2, (WTF::StringImpl **)v26[62].m_impl.m_ptr + 3, (WTF::StringImpl **)v26[62].m_impl.m_ptr + 4, *((const void **)v26[62].m_impl.m_ptr + 5), *(unsigned char *)(a1 + 32), *(_WORD *)(v2 + 1328), (uint64_t)v47, *((unsigned char *)v26[62].m_impl.m_ptr + 48));
      uint64_t v32 = v46;
      v46 = 0;
      if (v32) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v32, v31);
      }
      uint64_t v33 = v42;
      if (v42)
      {
        unsigned __int8 v42 = 0;
        LODWORD(v43) = 0;
        WTF::fastFree(v33, v31);
      }
    }
    else
    {
      WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&v42, v26 + 29);
      WebKit::ProvisionalPageProxy::loadRequest(v28, (uint64_t)v26, (uint64_t)&v42, 0, *(unsigned char *)(a1 + 32), *(_WORD *)(v2 + 1328), (uint64_t)v47, v38, *(void *)(a1 + 48), *(void *)(a1 + 56), HIDWORD(*(void *)(a1 + 56)), *(unsigned char *)(a1 + 64));
      CFTypeRef v39 = cf;
      CFTypeRef cf = 0;
      if (v39) {
        CFRelease(v39);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v42);
    }
    if (v48) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v47, (WTF::StringImpl *)v31);
    }
  }
}

unsigned int *WebCore::SharedBuffer::create<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(void *a1@<X8>)
{
  WebCore::FragmentedSharedBuffer::create();
  uint64_t v2 = WTF::fastMalloc((WTF *)0x38);
  *a1 = MEMORY[0x199730FA0](v2, &v5);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v3);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LoadedWebArchive,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&::IsPerformingHTTPFallback,WebKit::WebsiteDataStore *)::$_2,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DA720;
  WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,std::unique_ptr<WebKit::SuspendedPageProxy> &&::RawPtrTraits<WTF::Ref>,std::unique_ptr<WebKit::SuspendedPageProxy> &&::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<std::unique_ptr<WebKit::SuspendedPageProxy> &&::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,std::unique_ptr<WebKit::SuspendedPageProxy> &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(std::unique_ptr<WebKit::SuspendedPageProxy> &&::SupportsObjectIdentifierNullState)1>>,WebKit::LoadedWebArchive,WTF::Ref<WebKit::WebProcessProxy,std::unique_ptr<WebKit::SuspendedPageProxy> &&::RawPtrTraits<WTF::Ref>,std::unique_ptr<WebKit::SuspendedPageProxy> &&::DefaultRefDerefTraits<WTF::Ref>> &&::IsPerformingHTTPFallback,WebKit::WebsiteDataStore *)::$_2::~$_2(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LoadedWebArchive,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&::IsPerformingHTTPFallback,WebKit::WebsiteDataStore *)::$_2,void>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  *a1 = (uint64_t)&unk_1EE9DA720;
  WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,std::unique_ptr<WebKit::SuspendedPageProxy> &&::RawPtrTraits<WTF::Ref>,std::unique_ptr<WebKit::SuspendedPageProxy> &&::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<std::unique_ptr<WebKit::SuspendedPageProxy> &&::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,std::unique_ptr<WebKit::SuspendedPageProxy> &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(std::unique_ptr<WebKit::SuspendedPageProxy> &&::SupportsObjectIdentifierNullState)1>>,WebKit::LoadedWebArchive,WTF::Ref<WebKit::WebProcessProxy,std::unique_ptr<WebKit::SuspendedPageProxy> &&::RawPtrTraits<WTF::Ref>,std::unique_ptr<WebKit::SuspendedPageProxy> &&::DefaultRefDerefTraits<WTF::Ref>> &&::IsPerformingHTTPFallback,WebKit::WebsiteDataStore *)::$_2::~$_2(a1 + 1, a2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::continueNavigationInNewProcess(API::Navigation &,WebKit::WebFrameProxy &,std::unique_ptr<WebKit::SuspendedPageProxy> &&,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebKit::ProcessSwapRequestedByClient,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LoadedWebArchive,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&::IsPerformingHTTPFallback,WebKit::WebsiteDataStore *)::$_2,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = v4;
  WebKit::NetworkProcessProxy::addAllowedFirstPartyForCookies(v3, v1, (WTF::StringImpl **)(a1 + 24), v2, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ResumeActiveDOMObjectsAndAnimations>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2385;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SuspendActiveDOMObjectsAndAnimations>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2504;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::Suspend,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DA770;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::Suspend,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DA770;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::Suspend,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::Resume,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DA798;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::Resume,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DA798;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::Resume,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetCustomTextEncodingName>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2422;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetTextZoomFactor>(uint64_t a1, double *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2475;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::setPageZoomFactor(double)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = *(double *)(*(void *)(a1 + 8) + 704);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2459;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v14 = v6;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v6, v5);
  LOBYTE(v12) = 0;
  char v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetPageAndTextZoomFactors>(uint64_t a1, double *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2457;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ScalePage>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2388;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v8, *(double *)a2);
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v8, *(int **)(a2 + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::AccessibilitySettingsDidChange>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2134;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetFixedLayoutSize>(uint64_t a1, int **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2428;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetSuppressScrollbarAnimations>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2472;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetEnableVerticalRubberBanding>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2427;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetEnableHorizontalRubberBanding>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2426;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetBackgroundExtendsBeyondPage>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2413;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetPaginationMode>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2461;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::WritingDirection,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetPaginationBehavesLikeColumns>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2460;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetPageLength>(uint64_t a1, double *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2458;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetGapBetweenPages>(uint64_t a1, double *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2432;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindStringMatches,WebKit::WebPageProxy::findStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0>(WebKit::WebPageProxy::findStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DA7E8;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindStringMatches,WebKit::WebPageProxy::findStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0>(WebKit::WebPageProxy::findStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DA7E8;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindStringMatches,WebKit::WebPageProxy::findStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0>(WebKit::WebPageProxy::findStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  if (a2)
  {
    uint64_t v4 = (void *)*a2;
    if (v4)
    {
      unint64_t v5 = a2[1];
      unint64_t v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v4;
      if (v5 >= v6 && v5 - v6 > 7)
      {
        uint64_t v8 = (WTF **)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v9 = (unint64_t)*v8;
        a2[2] = (unint64_t)(v8 + 1);
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        if (v9 >= 0x10000)
        {
          while (1)
          {
            uint64_t result = IPC::Decoder::decode<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v4, (uint64_t)&v54);
            if (!v57) {
              break;
            }
            int v24 = HIDWORD(v59);
            if (HIDWORD(v59) == v59)
            {
              uint64_t result = (WTF *)WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unsigned int *)&v58, (unint64_t)&v54);
            }
            else
            {
              uint64_t v26 = v58 + 16 * HIDWORD(v59);
              *(void *)uint64_t v26 = 0;
              *(void *)(v26 + 8) = 0;
              unint64_t v27 = v54;
              v54 = 0;
              *(void *)uint64_t v26 = v27;
              *(_DWORD *)(v26 + 8) = v55;
              LODWORD(v27) = v56;
              unsigned int v56 = 0;
              *(_DWORD *)(v26 + 12) = v27;
              HIDWORD(v59) = v24 + 1;
            }
            if (v57)
            {
              uint64_t result = v54;
              if (v54)
              {
                v54 = 0;
                unsigned int v55 = 0;
                uint64_t result = (WTF *)WTF::fastFree(result, v4);
              }
            }
            if (!--v9)
            {
              unsigned int v14 = HIDWORD(v59);
              unint64_t v9 = v58;
              unsigned int v15 = v59;
              if (v59 <= HIDWORD(v59)) {
                goto LABEL_21;
              }
              long long v43 = (WTF *)v58;
              uint64_t v46 = HIDWORD(v59);
              if (HIDWORD(v59))
              {
                if (HIDWORD(v59) >> 28)
                {
                  __break(0xC471u);
                  return result;
                }
                unsigned int v15 = HIDWORD(v59);
                uint64_t v44 = WTF::fastMalloc((WTF *)(16 * HIDWORD(v59)));
                long long v43 = (WTF *)v9;
                if (v44 != v9)
                {
                  uint64_t v45 = v44;
                  unsigned int v15 = v46;
                  WTF::VectorMover<false,WebCore::PlatformTimeRanges>::move((WTF *)v9, (WTF *)(v9 + 16 * v46), v44);
                  long long v43 = (WTF *)v45;
                }
              }
              if (v9)
              {
                if (v43 == (WTF *)v9)
                {
                  unsigned int v15 = 0;
                  long long v43 = 0;
                  uint64_t v58 = 0;
                }
                WTF::fastFree((WTF *)v9, v4);
              }
              unint64_t v9 = (unint64_t)v43;
              unsigned int v14 = v46;
              goto LABEL_21;
            }
          }
        }
        else
        {
          if (!v9)
          {
            unsigned int v14 = 0;
            unsigned int v15 = 0;
LABEL_21:
            uint64_t v58 = 0;
            uint64_t v59 = 0;
            char v51 = (WTF *)v9;
            unint64_t v52 = __PAIR64__(v14, v15);
            char v53 = 1;
            WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v4);
            unint64_t v16 = a2[1];
            char v17 = (char *)*a2;
            unint64_t v18 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
            if (v16 < v18 || v16 - v18 <= 3)
            {
              unint64_t v39 = 0;
              unint64_t v40 = 0;
              *a2 = 0;
              a2[1] = 0;
              unint64_t v41 = a2[3];
              if (v41)
              {
                if (v16)
                {
                  (*(void (**)(unint64_t))(*(void *)v41 + 16))(v41);
                  unint64_t v40 = *a2;
                  unint64_t v39 = a2[1];
                }
                else
                {
                  unint64_t v39 = 0;
                  unint64_t v40 = 0;
                }
              }
            }
            else
            {
              uint64_t v19 = &v17[v18];
              a2[2] = (unint64_t)(v19 + 4);
              if (v17)
              {
                int v20 = *(_DWORD *)v19;
                char v51 = 0;
                unint64_t v52 = 0;
                int v49 = v20;
                char v50 = 1;
                WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v17);
                uint64_t v47 = 0;
                v54 = (WTF *)v9;
                uint64_t v48 = 0;
                unsigned int v55 = v15;
                unsigned int v56 = v14;
                uint64_t v21 = *(void *)(a1 + 8);
                if (v14) {
                  (*(void (**)(void))(**(void **)(v21 + 120) + 16))(*(void *)(v21 + 120));
                }
                else {
                  (*(void (**)(void))(**(void **)(v21 + 112) + 32))(*(void *)(v21 + 112));
                }
                WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v22);
                return (WTF *)WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v23);
              }
              unint64_t v39 = v16;
              unint64_t v40 = 0;
            }
            *a2 = 0;
            a2[1] = 0;
            unint64_t v42 = a2[3];
            if (v42 && v39) {
              (*(void (**)(unint64_t, unint64_t))(*(void *)v42 + 16))(v42, v40);
            }
            WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v17);
            goto LABEL_42;
          }
          LODWORD(v59) = v9;
          uint64_t v58 = WTF::fastMalloc((WTF *)(16 * v9));
          while (1)
          {
            IPC::Decoder::decode<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v4, (uint64_t)&v54);
            if (!v57) {
              break;
            }
            int v10 = HIDWORD(v59);
            if (HIDWORD(v59) == v59)
            {
              WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unsigned int *)&v58, (unint64_t)&v54);
            }
            else
            {
              uint64_t v11 = v58 + 16 * HIDWORD(v59);
              *(void *)uint64_t v11 = 0;
              *(void *)(v11 + 8) = 0;
              uint64_t v12 = v54;
              v54 = 0;
              *(void *)uint64_t v11 = v12;
              *(_DWORD *)(v11 + 8) = v55;
              LODWORD(v12) = v56;
              unsigned int v56 = 0;
              *(_DWORD *)(v11 + 12) = v12;
              HIDWORD(v59) = v10 + 1;
            }
            if (v57)
            {
              char v13 = v54;
              if (v54)
              {
                v54 = 0;
                unsigned int v55 = 0;
                WTF::fastFree(v13, v4);
              }
            }
            if (!--v9)
            {
              unint64_t v9 = v58;
              unsigned int v15 = v59;
              unsigned int v14 = HIDWORD(v59);
              goto LABEL_21;
            }
          }
        }
        WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v4);
      }
      else
      {
        *a2 = 0;
        a2[1] = 0;
        unint64_t v35 = a2[3];
        if (v35)
        {
          if (v5)
          {
            (*(void (**)(unint64_t))(*(void *)v35 + 16))(v35);
            unint64_t v36 = *a2;
            unint64_t v37 = a2[1];
            unint64_t v38 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            if (v38)
            {
              if (v37) {
                (*(void (**)(unint64_t, unint64_t))(*(void *)v38 + 16))(v38, v36);
              }
            }
          }
        }
      }
      unint64_t v28 = *a2;
      unint64_t v29 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v30 = a2[3];
      if (v30) {
        BOOL v31 = v29 == 0;
      }
      else {
        BOOL v31 = 1;
      }
      if (!v31) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v30 + 16))(v30, v28);
      }
LABEL_42:
      unint64_t v32 = *a2;
      unint64_t v33 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v34 = a2[3];
      if (v34)
      {
        if (v33) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v34 + 16))(v34, v32);
        }
      }
    }
  }
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(a1 + 8) + 112) + 32))(*(void *)(*(void *)(a1 + 8) + 112), *(void *)(a1 + 8), a1 + 24);
  return (WTF *)WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v23);
}

unint64_t WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(unsigned int *a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = *(void *)a1 + 16 * a1[3];
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  uint64_t v5 = *(void *)result;
  *(void *)unint64_t result = 0;
  *(void *)uint64_t v4 = v5;
  LODWORD(v5) = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF *WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = (WTF *)(*(void *)result + 16 * *((unsigned int *)result + 3));
      uint64_t v6 = WTF::fastMalloc((WTF *)(16 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *(void *)unint64_t v3 = v6;
      unint64_t result = WTF::VectorMover<false,WebCore::PlatformTimeRanges>::move(v4, v5, v6);
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)unint64_t v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (WTF *)WTF::fastFree(v4, v7);
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindString,WebKit::WebPageProxy::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2>(WebKit::WebPageProxy::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DA838;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindString,WebKit::WebPageProxy::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2>(WebKit::WebPageProxy::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DA838;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindString,WebKit::WebPageProxy::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2>(WebKit::WebPageProxy::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  int v2 = (void *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>>(a2, v11);
    if (v15)
    {
      int v4 = v12;
      uint64_t v5 = **(void **)(*(void *)(a1 + 8) + 112);
      if (v12) {
        (*(void (**)(void))(v5 + 24))();
      }
      else {
        (*(void (**)(void))(v5 + 32))();
      }
      BOOL v8 = v4 != 0;
      uint64_t v9 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v9 + 16))(v9, v8);
      unint64_t result = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
      if (v15)
      {
        unint64_t result = v13;
        if (v13)
        {
          char v13 = 0;
          int v14 = 0;
          return (WTF *)WTF::fastFree(result, v10);
        }
      }
    }
    else
    {
      return (WTF *)IPC::Connection::cancelReply<Messages::WebPage::FindString,WebKit::WebPageProxy::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2>(v2);
    }
  }
  else
  {
    uint64_t v6 = (void *)(a1 + 8);
    return (WTF *)IPC::Connection::cancelReply<Messages::WebPage::FindString,WebKit::WebPageProxy::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2>(v6);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::FindString,WebKit::WebPageProxy::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2>(void *a1)
{
  (*(void (**)(void, void, void *))(**(void **)(*a1 + 112) + 32))(*(void *)(*a1 + 112), *a1, a1 + 1);
  uint64_t v2 = a1[2];
  a1[2] = 0;
  (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, 0);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::FindTextRangesForStringMatches,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  unsigned __int8 v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v12 = 2245;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  int v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v14 = &unk_1EE9DA888;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindTextRangesForStringMatches,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DA888;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindTextRangesForStringMatches,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DA888;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindTextRangesForStringMatches,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && (int v4 = *(WTF::StringImpl **)a2) != 0)
  {
    unint64_t v5 = *((void *)a2 + 1);
    unint64_t v6 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v4;
    if (v5 < v6 || v5 - v6 <= 7)
    {
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v28 = *((void *)a2 + 3);
      if (v28)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v28 + 16))(v28);
          unint64_t v29 = *(WTF::StringImpl **)a2;
          uint64_t v30 = *((void *)a2 + 1);
          uint64_t v31 = *((void *)a2 + 3);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          if (v31)
          {
            if (v30) {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v31 + 16))(v31, v29);
            }
          }
        }
      }
LABEL_40:
      uint64_t v22 = *(WTF::StringImpl **)a2;
      uint64_t v23 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v24 = *((void *)a2 + 3);
      if (v24 && v23)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v24 + 16))(v24, v22);
        uint64_t v25 = *(WTF::StringImpl **)a2;
        uint64_t v26 = *((void *)a2 + 1);
        uint64_t v27 = *((void *)a2 + 3);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        if (v27)
        {
          if (v26) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v27 + 16))(v27, v25);
          }
        }
      }
      else
      {
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
      }
      IPC::Connection::cancelReply<Messages::WebPage::FindTextRangesForStringMatches,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
      return;
    }
    BOOL v8 = (unint64_t *)((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v9 = *v8;
    *((void *)a2 + 2) = v8 + 1;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    if (v9 >= 0x8000)
    {
      do
      {
        IPC::Decoder::decode<WebKit::WebFoundTextRange>(a2, (uint64_t)&v40);
        if (!v43) {
          goto LABEL_39;
        }
        if (HIDWORD(v45) == v45)
        {
          WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebFoundTextRange>((uint64_t)&v44, (unint64_t)&v40);
        }
        else
        {
          uint64_t v19 = v44 + 32 * HIDWORD(v45);
          *(_OWORD *)uint64_t v19 = v40;
          int v20 = v41;
          unint64_t v41 = 0;
          *(void *)(v19 + 16) = v20;
          *(void *)(v19 + 24) = v42;
          ++HIDWORD(v45);
        }
        if (v43)
        {
          uint64_t v21 = v41;
          unint64_t v41 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2) {
              WTF::StringImpl::destroy(v21, v4);
            }
            else {
              *(_DWORD *)v21 -= 2;
            }
          }
        }
        --v9;
      }
      while (v9);
      uint64_t v32 = HIDWORD(v45);
      uint64_t v13 = (WTF::StringImpl *)v44;
      if (v45 > HIDWORD(v45))
      {
        unint64_t v33 = (WTF::StringImpl *)v44;
        if (HIDWORD(v45))
        {
          if (HIDWORD(v45) >> 27)
          {
            __break(0xC471u);
            return;
          }
          uint64_t v34 = WTF::fastMalloc((WTF *)(32 * HIDWORD(v45)));
          LODWORD(v45) = v32;
          uint64_t v44 = v34;
          unint64_t v33 = v13;
          if ((WTF::StringImpl *)v34 != v13)
          {
            WTF::VectorMover<false,WebKit::WebFoundTextRange>::move(v13, (WTF::StringImpl *)((char *)v13 + 32 * v32), v34);
            unint64_t v33 = (WTF::StringImpl *)v44;
          }
        }
        if (v13)
        {
          if (v33 == v13)
          {
            uint64_t v44 = 0;
            LODWORD(v45) = 0;
          }
          WTF::fastFree(v13, v4);
LABEL_21:
          uint64_t v13 = (WTF::StringImpl *)v44;
        }
        else
        {
          uint64_t v13 = v33;
        }
      }
      uint64_t v14 = v45;
      goto LABEL_27;
    }
    if (v9)
    {
      LODWORD(v45) = v9;
      uint64_t v44 = WTF::fastMalloc((WTF *)(32 * v9));
      while (1)
      {
        IPC::Decoder::decode<WebKit::WebFoundTextRange>(a2, (uint64_t)&v40);
        if (!v43) {
          break;
        }
        if (HIDWORD(v45) == v45)
        {
          WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebFoundTextRange>((uint64_t)&v44, (unint64_t)&v40);
        }
        else
        {
          uint64_t v10 = v44 + 32 * HIDWORD(v45);
          *(_OWORD *)uint64_t v10 = v40;
          uint64_t v11 = v41;
          unint64_t v41 = 0;
          *(void *)(v10 + 16) = v11;
          *(void *)(v10 + 24) = v42;
          ++HIDWORD(v45);
        }
        if (v43)
        {
          unsigned __int8 v12 = v41;
          unint64_t v41 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2) {
              WTF::StringImpl::destroy(v12, v4);
            }
            else {
              *(_DWORD *)v12 -= 2;
            }
          }
        }
        if (!--v9) {
          goto LABEL_21;
        }
      }
LABEL_39:
      WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v4);
      goto LABEL_40;
    }
    uint64_t v13 = 0;
    uint64_t v14 = 0;
LABEL_27:
    uint64_t v35 = v14;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    char v39 = 1;
    WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v4);
    v38[0] = 0;
    v38[1] = 0;
    v36[0] = v13;
    v36[1] = v35;
    WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v38, v16);
    char v37 = 1;
    uint64_t v17 = *v2;
    *uint64_t v2 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v17 + 16))(v17, v36);
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    if (v37) {
      WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v36, v18);
    }
  }
  else
  {
    uint64_t v15 = (uint64_t *)(a1 + 8);
    IPC::Connection::cancelReply<Messages::WebPage::FindTextRangesForStringMatches,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v15);
  }
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::FindTextRangesForStringMatches,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t *a1)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebFoundTextRange>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebKit::WebFoundTextRange,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 32))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

__n128 WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebFoundTextRange>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (__n128 *)WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 32 * *(unsigned int *)(a1 + 12);
  __n128 result = *v3;
  *(__n128 *)uint64_t v4 = *v3;
  unint64_t v6 = v3[1].n128_u64[0];
  unint64_t v7 = v3[1].n128_u64[1];
  v3[1].n128_u64[0] = 0;
  *(void *)(v4 + 16) = v6;
  *(void *)(v4 + 24) = v7;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x198EAAFD8);
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    uint64_t v5 = (WTF::StringImpl *)(*(void *)a1 + 32 * *(unsigned int *)(a1 + 12));
    uint64_t v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebFoundTextRange>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::WebFoundTextRange>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      uint64_t v6 = *((void *)v5 + 2);
      uint64_t v7 = *((void *)v5 + 3);
      *((void *)v5 + 2) = 0;
      *(void *)(a3 + 16) = v6;
      *(void *)(a3 + 24) = v7;
      __n128 result = (WTF::StringImpl *)*((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v5 = (WTF::StringImpl *)((char *)v5 + 32);
      a3 += 32;
    }
    while (v5 != a2);
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::WebFoundTextRange>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    unint64_t v3 = (WTF::StringImpl **)result;
    do
    {
      __n128 result = v3[2];
      v3[2] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          __n128 result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 4;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::WebFoundTextRange>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 32 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ReplaceFoundTextRangeWithString>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  unint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v8 = 2359;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::WebFoundTextRange,void>::encode(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unsigned __int8 v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DecorateTextRangeWithStyle>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v8 = 2187;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::WebFoundTextRange,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::WritingDirection,void>::encode<IPC::Encoder>(v8, *(unsigned char *)(a2 + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unsigned __int8 v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ScrollTextRangeToVisible>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  unint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v8 = 2393;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::WebFoundTextRange,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unsigned __int8 v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ClearAllDecoratedFoundText>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2165;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidBeginTextSearchOperation>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2193;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestRectForFoundTextRange,WTF::CompletionHandler<void ()(WebCore::FloatRect)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  unsigned __int8 v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v12 = 2376;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::WebFoundTextRange,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DA8B0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestRectForFoundTextRange,WTF::CompletionHandler<void ()(WebCore::FloatRect)>>(WTF::CompletionHandler<void ()(WebCore::FloatRect)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DA8B0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestRectForFoundTextRange,WTF::CompletionHandler<void ()(WebCore::FloatRect)>>(WTF::CompletionHandler<void ()(WebCore::FloatRect)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DA8B0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestRectForFoundTextRange,WTF::CompletionHandler<void ()(WebCore::FloatRect)>>(WTF::CompletionHandler<void ()(WebCore::FloatRect)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WebCore::FloatRect>>(a2, (uint64_t)v11);
    if (v12)
    {
      v3.n128_u32[0] = v11[0];
      v4.n128_u32[0] = v11[1];
      v5.n128_u32[0] = v11[2];
      v6.n128_u32[0] = v11[3];
      uint64_t v7 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
    }
    else
    {
      uint64_t v7 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      v3.n128_u64[0] = 0;
      v4.n128_u64[0] = 0;
      v5.n128_u64[0] = 0;
      v6.n128_u64[0] = 0;
    }
    (*(void (**)(uint64_t, __n128, __n128, __n128, __n128))(*(void *)v7 + 16))(v7, v3, v4, v5, v6);
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double, double, double, double))(*(void *)v8 + 16))(v8, 0.0, 0.0, 0.0, 0.0);
    uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
    return v9(v8);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::AddLayerForFindOverlay,WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2137;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v13 = &unk_1EE9DA8D8;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::AddLayerForFindOverlay,WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DA8D8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::AddLayerForFindOverlay,WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DA8D8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::AddLayerForFindOverlay,WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (!a2 || !*a2)
  {
LABEL_6:
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    char v11 = 0;
    v12[15] = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v4 + 16))(v4, &v11);
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>(a2, (uint64_t)&v11);
  if (!v13)
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v7 = a2[3];
    if (v7 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
    }
    goto LABEL_6;
  }
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v12;
  *(void *)&v10[15] = *(void *)&v12[15];
  char v9 = v11;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v4 + 16))(v4, &v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoveLayerForFindOverlay,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  char v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v11 = 2356;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  char v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v13 = &unk_1EE9DA900;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoveLayerForFindOverlay,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DA900;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoveLayerForFindOverlay,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DA900;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoveLayerForFindOverlay,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GetImageForFindMatch>(uint64_t a1, int *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2263;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unint64_t IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(IPC::Encoder *a1, int *a2)
{
  int v2 = *a2;
  unint64_t result = IPC::Encoder::grow(a1, 4uLL, 4);
  if (v4 <= 3)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)unint64_t result = v2;
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SelectFindMatch>(uint64_t a1, int *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2396;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::HideFindUI>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2292;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CountStringMatches,WebKit::WebPageProxy::countStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0>(WebKit::WebPageProxy::countStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DA928;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CountStringMatches,WebKit::WebPageProxy::countStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0>(WebKit::WebPageProxy::countStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DA928;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CountStringMatches,WebKit::WebPageProxy::countStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0>(WebKit::WebPageProxy::countStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2 && (IPC::Decoder::decode<std::tuple<float>>(a2) & 0xFF00000000) != 0) {
    uint64_t v3 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16);
  }
  else {
    uint64_t v3 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16);
  }

  return v3();
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,API::ContentWorld &,WebCore::ProcessQualified::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ProcessQualified::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>::SerializedScriptValue,WebCore::ProcessQualified::RawPtrTraits<WebCore::ProcessQualified::RefPtr>,WebCore::ProcessQualified::DefaultRefDerefTraits<WebCore::ProcessQualified::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0,unsigned long long>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2387;
  *((void *)v8 + 1) = a4;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::RunJavaScriptParameters,void>::encode(v8, *a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v8, a2[1]);
  uint64_t v9 = (uint64_t *)a2[2];
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, v9);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, v9 + 1);
  LOBYTE(v19) = 0;
  LODWORD(v20) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v19, a3);
  uint64_t v10 = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = 0;
  uint64_t v21 = v10;
  uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v11 = &unk_1EE9DA950;
  *(unsigned char *)(v11 + 8) = 0;
  *(_DWORD *)(v11 + 16) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v11 + 8, (uint64_t)&v19);
  *(void *)(v11 + 24) = v21;
  uint64_t v21 = 0;
  if (v20 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9D9C18[v20])(&v22, &v19);
  }
  uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v19 = v11;
  uint64_t v20 = v12;
  LOBYTE(v21) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, 0, (uint64_t)&v19, 1);
  if ((_BYTE)v21)
  {
    uint64_t v14 = v19;
    uint64_t v19 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  unint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentWorld &<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,API::ContentWorld &,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0>(WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,API::ContentWorld &,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9DA950;
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9D9C18[v3])(&v5, a1 + 8);
  }
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentWorld &<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,API::ContentWorld &,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0>(WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,API::ContentWorld &,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DA950;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((unsigned int *)this + 4);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1EE9D9C18[v4])(&v6, (char *)this + 8);
  }
  *((_DWORD *)this + 4) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<API::ContentWorld &<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,API::ContentWorld &,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0>(WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,API::ContentWorld &,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::SerializedScriptValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WebCore::ExceptionDetails> &&)> &&>::call(uint64_t a1, WTF::StringImpl **a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 + 8;
  if (a2)
  {
    uint64_t v3 = a2;
    if (*a2)
    {
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)&v43);
      if (!v44)
      {
LABEL_34:
        LOBYTE(v36[0]) = 0;
        char v42 = 0;
        unint64_t v33 = *v3;
        uint64_t v34 = v3[1];
        *uint64_t v3 = 0;
        v3[1] = 0;
        uint64_t v35 = v3[3];
        if (v35 && v34) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v35 + 16))(v35, v33);
        }
        std::__optional_destruct_base<std::tuple<std::span<unsigned char const,18446744073709551615ul>,std::optional<WebCore::ExceptionDetails>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36, v33);
        return IPC::Connection::cancelReply<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,API::ContentWorld &,WebCore::ProcessQualified::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ProcessQualified::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>::SerializedScriptValue,WebCore::ProcessQualified::RawPtrTraits<WebCore::ProcessQualified::RefPtr>,WebCore::ProcessQualified::DefaultRefDerefTraits<WebCore::ProcessQualified::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0>(v2);
      }
      char v5 = v3[1];
      char v6 = *v3;
      unint64_t v7 = v3[2] - *v3;
      if ((unint64_t)v5 <= v7)
      {
        char v22 = 0;
        char v23 = 0;
        *uint64_t v3 = 0;
        v3[1] = 0;
        char v24 = v3[3];
        if (v24)
        {
          if (v5)
          {
            (*(void (**)(WTF::StringImpl *))(*(void *)v24 + 16))(v24);
            char v23 = *v3;
            char v22 = v3[1];
          }
          else
          {
            char v22 = 0;
            char v23 = 0;
          }
        }
      }
      else
      {
        uint64_t v8 = (unsigned __int8 *)v6 + v7;
        v3[2] = (WTF::StringImpl *)(v8 + 1);
        if (v6)
        {
          unsigned int v9 = *v8;
          if (v9 < 2)
          {
            if (v9)
            {
              IPC::ArgumentCoder<WebCore::ExceptionDetails,void>::decode((IPC::Decoder *)v3, (uint64_t)&v45);
              if (!(_BYTE)v48)
              {
                uint64_t v27 = *v3;
                uint64_t v28 = v3[1];
                *uint64_t v3 = 0;
                v3[1] = 0;
                unint64_t v29 = v3[3];
                if (!v29
                  || !v28
                  || ((*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v29 + 16))(v29, v27),
                      !(_BYTE)v48))
                {
LABEL_33:
                  uint64_t v30 = *v3;
                  uint64_t v31 = v3[1];
                  *uint64_t v3 = 0;
                  v3[1] = 0;
                  uint64_t v32 = v3[3];
                  if (v32 && v31) {
                    (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v32 + 16))(v32, v30);
                  }
                  goto LABEL_34;
                }
              }
              uint64_t v49 = v46;
              char v50 = v47;
              if (v44)
              {
                *(_OWORD *)unint64_t v36 = v43;
                uint64_t v38 = v49;
                char v39 = v50;
                char v41 = 1;
                char v42 = 1;
                uint64_t v37 = 0;
                char v47 = v50;
                uint64_t v40 = 0;
                uint64_t v46 = v49;
                int v48 = 1;
                goto LABEL_11;
              }
            }
            else
            {
              *(_OWORD *)unint64_t v36 = v43;
              LOBYTE(v37) = 0;
              char v41 = 0;
              char v42 = 1;
              uint64_t v3 = (WTF::StringImpl **)*((void *)&v43 + 1);
              if (!*((void *)&v43 + 1))
              {
                uint64_t v45 = 0;
                int v48 = 0;
LABEL_11:
                uint64_t v10 = *(void *)(a1 + 24);
                *(void *)(a1 + 24) = 0;
                (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 16))(v10, &v45);
                (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
                if (v48 != -1) {
                  ((void (*)(long long *, uint64_t *))off_1EE9D9D48[v48])(&v43, &v45);
                }
                return std::__optional_destruct_base<std::tuple<std::span<unsigned char const,18446744073709551615ul>,std::optional<WebCore::ExceptionDetails>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36, v11);
              }
              if (!HIDWORD(*((void *)&v43 + 1)))
              {
                uint64_t v14 = v36[0];
                uint64_t v15 = (char *)WTF::fastMalloc(*((WTF **)&v43 + 1));
                char v16 = (WTF *)v15;
                char v17 = 0;
                do
                {
                  *((unsigned char *)v17 + (void)v15) = *((unsigned char *)v17 + (void)v14);
                  char v17 = (WTF::StringImpl **)((char *)v17 + 1);
                }
                while (v3 != v17);
                API::SerializedScriptValue::createFromWireBytes(v15, (WTF *)v3, &v43);
                uint64_t v18 = v43;
                CFRetain(*(CFTypeRef *)(v43 + 8));
                uint64_t v45 = v18;
                int v48 = 0;
                uint64_t v19 = *(void *)(a1 + 24);
                *(void *)(a1 + 24) = 0;
                (*(void (**)(uint64_t, uint64_t *))(*(void *)v19 + 16))(v19, &v45);
                (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
                if (v48 != -1) {
                  ((void (*)(uint64_t *, uint64_t *))off_1EE9D9D48[v48])(&v49, &v45);
                }
                int v48 = -1;
                uint64_t v21 = v43;
                *(void *)&long long v43 = 0;
                if (v21) {
                  CFRelease(*(CFTypeRef *)(v21 + 8));
                }
                WTF::fastFree(v16, v20);
                return std::__optional_destruct_base<std::tuple<std::span<unsigned char const,18446744073709551615ul>,std::optional<WebCore::ExceptionDetails>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36, v11);
              }
              __break(0xC471u);
            }
            __break(1u);
            goto LABEL_50;
          }
          goto LABEL_29;
        }
        char v22 = v5;
        char v23 = 0;
      }
      char v5 = 0;
      char v6 = 0;
      *uint64_t v3 = 0;
      v3[1] = 0;
      uint64_t v25 = v3[3];
      if (v25)
      {
        if (!v22)
        {
LABEL_50:
          char v5 = 0;
          char v6 = 0;
          goto LABEL_29;
        }
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v25 + 16))(v25, v23, v22);
        char v6 = *v3;
        char v5 = v3[1];
      }
LABEL_29:
      *uint64_t v3 = 0;
      v3[1] = 0;
      uint64_t v26 = v3[3];
      if (v26 && v5) {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v26 + 16))(v26, v6);
      }
      goto LABEL_33;
    }
  }
  uint64_t v12 = a1 + 8;

  return IPC::Connection::cancelReply<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,API::ContentWorld &,WebCore::ProcessQualified::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ProcessQualified::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>::SerializedScriptValue,WebCore::ProcessQualified::RawPtrTraits<WebCore::ProcessQualified::RefPtr>,WebCore::ProcessQualified::DefaultRefDerefTraits<WebCore::ProcessQualified::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0>(v12);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>,API::ContentWorld &,WebCore::ProcessQualified::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ProcessQualified::RefPtr<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>>::SerializedScriptValue,WebCore::ProcessQualified::RawPtrTraits<WebCore::ProcessQualified::RefPtr>,WebCore::ProcessQualified::DefaultRefDerefTraits<WebCore::ProcessQualified::RefPtr>>,WebCore::ExceptionDetails> &&)> &&)::$_0>(uint64_t a1)
{
  v3[0] = 0;
  int v4 = 0;
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v4 != -1) {
    return ((uint64_t (*)(char *, void *))off_1EE9D9D48[v4])(&v5, v3);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<std::span<unsigned char const,18446744073709551615ul>,std::optional<WebCore::ExceptionDetails>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 56) && *(unsigned char *)(a1 + 48))
  {
    int v4 = *(WTF::StringImpl **)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    char v5 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2271;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  char v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v13 = &unk_1EE9DA978;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DA978;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DA978;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v3 + 16))(v3, &v7);
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        uint64_t result = v7;
        unint64_t v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
    }
  }
  else
  {
    char v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v6);
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t *a1)
{
  int v4 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t result = v4;
  int v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetSourceForFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2278;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DA9A0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSourceForFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DA9A0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSourceForFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DA9A0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSourceForFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v3 + 16))(v3, &v7);
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        uint64_t result = v7;
        unint64_t v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
    }
  }
  else
  {
    char v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v6);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2260;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebCore::WritingDirection,void>::encode<IPC::Encoder>(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DA9C8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DA9C8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DA9C8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v3 + 16))(v3, &v7);
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        uint64_t result = v7;
        unint64_t v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
    }
  }
  else
  {
    char v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v6);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetContentsAsAttributedString,WebKit::WebPageProxy::getContentsAsAttributedString(WTF::CompletionHandler<void ()(WebCore::AttributedString const&)> &&)::$_0>(WebKit::WebPageProxy::getContentsAsAttributedString(WTF::CompletionHandler<void ()(WebCore::AttributedString const&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9DA9F0;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  void *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9DA9F0;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetContentsAsAttributedString,WebKit::WebPageProxy::getContentsAsAttributedString(WTF::CompletionHandler<void ()(WebCore::AttributedString const&)> &&)::$_0>(WebKit::WebPageProxy::getContentsAsAttributedString(WTF::CompletionHandler<void ()(WebCore::AttributedString const&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<WebCore::AttributedString>(a2, v12);
    if (v13)
    {
      WebCore::AttributedString::AttributedString();
      char v11 = 1;
      if (v13) {
        MEMORY[0x199732DE0](v12);
      }
    }
    else
    {
      v10[0] = 0;
      char v11 = 0;
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v9 = *((void *)a2 + 3);
      if (!v9) {
        return IPC::Connection::cancelReply<Messages::WebPage::GetContentsAsAttributedString,WebKit::WebPageProxy::getContentsAsAttributedString(WTF::CompletionHandler<void ()(WebCore::AttributedString const&)> &&)::$_0>(v2);
      }
      if (!v8) {
        return IPC::Connection::cancelReply<Messages::WebPage::GetContentsAsAttributedString,WebKit::WebPageProxy::getContentsAsAttributedString(WTF::CompletionHandler<void ()(WebCore::AttributedString const&)> &&)::$_0>(v2);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
      if (!v11) {
        return IPC::Connection::cancelReply<Messages::WebPage::GetContentsAsAttributedString,WebKit::WebPageProxy::getContentsAsAttributedString(WTF::CompletionHandler<void ()(WebCore::AttributedString const&)> &&)::$_0>(v2);
      }
    }
    uint64_t v4 = *v2;
    *uint64_t v2 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v4 + 16))(v4, v10);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
    if (v11) {
      return MEMORY[0x199732DE0](v10);
    }
  }
  else
  {
    char v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::GetContentsAsAttributedString,WebKit::WebPageProxy::getContentsAsAttributedString(WTF::CompletionHandler<void ()(WebCore::AttributedString const&)> &&)::$_0>(v6);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::GetContentsAsAttributedString,WebKit::WebPageProxy::getContentsAsAttributedString(WTF::CompletionHandler<void ()(WebCore::AttributedString const&)> &&)::$_0>(uint64_t *a1)
{
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v4);
  uint64_t v2 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, v4);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  return MEMORY[0x199732DE0](v4);
}

WTF **WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getAllFrameTrees(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = **(_DWORD ***)(a1 + 8);
  ++*v5;
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 2262;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v18 = v6;
  uint64_t v15 = 0;
  uint64_t v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v7 = &unk_1EE9DAA40;
  *((void *)v7 + 1) = v5;
  v16[0] = 0;
  WTF::Ref<WebKit::WebPageProxy::getAllFrameTrees(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::FrameTreeCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(v16);
  uint64_t v8 = (WTF *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v16[0] = v7;
  v16[1] = v8;
  char v17 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v18, 0, (uint64_t)v16, 1);
  if (v17)
  {
    uint64_t v10 = v16[0];
    v16[0] = 0;
    if (v10) {
      (*(void (**)(WTF *))(*(void *)v10 + 8))(v10);
    }
  }
  char v11 = v18;
  uint64_t v18 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v13, v14);
  }
  return WTF::Ref<WebKit::WebPageProxy::getAllFrameTrees(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::FrameTreeCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(&v15);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage12GetFrameTreeEZZN6WebKit12WebPageProxy16getAllFrameTreesEONS_17CompletionHandlerIFvONS_6VectorINS8_17FrameTreeNodeDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEENK3__0clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlOSC_E_EENSA_IFvPNS2_7DecoderEEEEOSX_NS_19ThreadLikeAssertionEEUlS11_E_vJS11_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9DAA40;
  WTF::Ref<WebKit::WebPageProxy::getAllFrameTrees(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::FrameTreeCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref((WTF **)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage12GetFrameTreeEZZN6WebKit12WebPageProxy16getAllFrameTreesEONS_17CompletionHandlerIFvONS_6VectorINS8_17FrameTreeNodeDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEENK3__0clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlOSC_E_EENSA_IFvPNS2_7DecoderEEEEOSX_NS_19ThreadLikeAssertionEEUlS11_E_vJS11_EED0Ev(WTF **a1)
{
  *a1 = (WTF *)&unk_1EE9DAA40;
  WTF::Ref<WebKit::WebPageProxy::getAllFrameTrees(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::FrameTreeCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

void _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage12GetFrameTreeEZZN6WebKit12WebPageProxy16getAllFrameTreesEONS_17CompletionHandlerIFvONS_6VectorINS8_17FrameTreeNodeDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEENK3__0clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlOSC_E_EENSA_IFvPNS2_7DecoderEEEEOSX_NS_19ThreadLikeAssertionEEUlS11_E_vJS11_EE4callES11_(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<WebKit::FrameTreeNodeData>(a2, (uint64_t)&v49);
    char v5 = v76;
    if (v76)
    {
      __int16 v20 = v49;
      uint64_t v6 = v50;
      uint64_t v50 = 0;
      uint64_t v21 = v6;
      long long v22 = v51;
      long long v23 = v52;
      LODWORD(v51) = v51 & 0xFFFFFFFE;
      uint64_t v7 = v53;
      uint64_t v53 = 0;
      uint64_t v24 = v7;
      long long v25 = v54;
      long long v26 = v55;
      LODWORD(v54) = v54 & 0xFFFFFFFE;
      uint64_t v27 = v56;
      long long v8 = v57;
      long long v57 = 0u;
      long long v28 = v8;
      *(void *)&long long v8 = v58;
      uint64_t v58 = 0;
      uint64_t v29 = v8;
      uint64_t v9 = v59;
      uint64_t v59 = 0;
      uint64_t v30 = v9;
      *(void *)&long long v8 = v60;
      uint64_t v60 = 0;
      uint64_t v31 = v8;
      uint64_t v10 = v61;
      uint64_t v61 = 0;
      uint64_t v32 = v10;
      *(void *)&long long v8 = v62;
      uint64_t v62 = 0;
      uint64_t v33 = v8;
      char v35 = v64;
      int v34 = v63;
      long long v11 = v65;
      long long v65 = 0u;
      long long v36 = v11;
      char v39 = v68;
      uint64_t v37 = v66;
      uint64_t v38 = v67;
      uint64_t v12 = v69;
      uint64_t v66 = 0;
      uint64_t v69 = 0;
      uint64_t v40 = v12;
      v41[0] = 0;
      int v42 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v41, (uint64_t)&v70);
      uint64_t v13 = v74;
      uint64_t v43 = v71;
      v45[0] = v73[0];
      *(_OWORD *)((char *)v45 + 14) = *(_OWORD *)((char *)v73 + 14);
      long long v44 = v72;
      uint64_t v71 = 0;
      uint64_t v74 = 0;
      uint64_t v46 = v13;
      uint64_t v14 = v75;
      uint64_t v75 = 0;
      char v5 = 1;
      uint64_t v47 = v14;
    }
    else
    {
      LOBYTE(v20) = 0;
    }
    char v48 = v5;
    std::__optional_destruct_base<WebKit::FrameTreeNodeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v49, v4);
    if (v48
      || (char v17 = *(void **)a2,
          uint64_t v18 = *((void *)a2 + 1),
          *(void *)a2 = 0,
          *((void *)a2 + 1) = 0,
          (uint64_t v19 = *((void *)a2 + 3)) != 0)
      && v18
      && ((*(void (**)(uint64_t, void *))(*(void *)v19 + 16))(v19, v17), v48))
    {
      _ZZZN6WebKit12WebPageProxy16getAllFrameTreesEON3WTF17CompletionHandlerIFvONS1_6VectorINS_17FrameTreeNodeDataELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEEENK3__0clINS_15WebProcessProxyENS1_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS1_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS1_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_ENKUlOS4_E_clESQ_(*v2, (unint64_t)&v20);
      std::__optional_destruct_base<std::tuple<WebKit::FrameTreeNodeData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v16);
    }
    else
    {
      std::__optional_destruct_base<std::tuple<WebKit::FrameTreeNodeData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v17);
      _ZN3IPC10Connection11cancelReplyIN8Messages7WebPage12GetFrameTreeEZZN6WebKit12WebPageProxy16getAllFrameTreesEON3WTF17CompletionHandlerIFvONS7_6VectorINS5_17FrameTreeNodeDataELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEEEEENK3__0clINS5_15WebProcessProxyENS7_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS7_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlOSA_E_EEvOSV_(v2);
    }
  }
  else
  {
    uint64_t v15 = (uint64_t *)(a1 + 8);
    _ZN3IPC10Connection11cancelReplyIN8Messages7WebPage12GetFrameTreeEZZN6WebKit12WebPageProxy16getAllFrameTreesEON3WTF17CompletionHandlerIFvONS7_6VectorINS5_17FrameTreeNodeDataELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEEEEENK3__0clINS5_15WebProcessProxyENS7_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS7_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlOSA_E_EEvOSV_(v15);
  }
}

void _ZN3IPC10Connection11cancelReplyIN8Messages7WebPage12GetFrameTreeEZZN6WebKit12WebPageProxy16getAllFrameTreesEON3WTF17CompletionHandlerIFvONS7_6VectorINS5_17FrameTreeNodeDataELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEEEEENK3__0clINS5_15WebProcessProxyENS7_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS7_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlOSA_E_EEvOSV_(uint64_t *a1)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  __int16 v7 = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)v8);
  char v13 = 0;
  int v14 = 0;
  __int16 v15 = 0;
  v16[0] = 0;
  v16[1] = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  memset(v12, 0, 25);
  _ZZZN6WebKit12WebPageProxy16getAllFrameTreesEON3WTF17CompletionHandlerIFvONS1_6VectorINS_17FrameTreeNodeDataELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEEENK3__0clINS_15WebProcessProxyENS1_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS1_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS1_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_ENKUlOS4_E_clESQ_(*a1, (unint64_t)&v7);
  WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v2);
  uint64_t v4 = (WTF::StringImpl *)v12[0];
  v12[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  if (DWORD2(v11) != -1) {
    ((void (*)(char *, long long *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[DWORD2(v11)])(&v6, &v10);
  }
  DWORD2(v11) = -1;
  char v5 = v9;
  uint64_t v9 = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v8);
}

__n128 _ZZZN6WebKit12WebPageProxy16getAllFrameTreesEON3WTF17CompletionHandlerIFvONS1_6VectorINS_17FrameTreeNodeDataELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEEENK3__0clINS_15WebProcessProxyENS1_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS1_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS1_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_ENKUlOS4_E_clESQ_(uint64_t a1, unint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 28);
  if (v4 == *(_DWORD *)(a1 + 24))
  {
    uint64_t v5 = a1 + 16;
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameTreeNodeData>(v5, a2);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 16) + 312 * v4;
    *(_WORD *)uint64_t v7 = *(_WORD *)a2;
    WTF::URL::URL(v7 + 8, (uint64_t *)(a2 + 8));
    WTF::URL::URL(v7 + 48, (uint64_t *)(a2 + 48));
    *(void *)(v7 + 88) = *(void *)(a2 + 88);
    uint64_t v8 = *(void *)(a2 + 96);
    *(void *)(a2 + 96) = 0;
    *(void *)(v7 + 104) = 0;
    *(void *)(v7 + 112) = 0;
    *(void *)(v7 + 96) = v8;
    uint64_t v9 = *(void *)(a2 + 104);
    *(void *)(a2 + 104) = 0;
    *(void *)(v7 + 104) = v9;
    LODWORD(v9) = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(a2 + 112) = 0;
    *(_DWORD *)(v7 + 112) = v9;
    LODWORD(v9) = *(_DWORD *)(a2 + 116);
    *(_DWORD *)(a2 + 116) = 0;
    *(_DWORD *)(v7 + 116) = v9;
    *(void *)(v7 + 120) = 0;
    *(void *)(v7 + 128) = 0;
    uint64_t v10 = *(void *)(a2 + 120);
    *(void *)(a2 + 120) = 0;
    *(void *)(v7 + 120) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 128);
    *(_DWORD *)(a2 + 128) = 0;
    *(_DWORD *)(v7 + 128) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 132);
    *(_DWORD *)(a2 + 132) = 0;
    *(_DWORD *)(v7 + 132) = v10;
    *(void *)(v7 + 136) = 0;
    *(void *)(v7 + 144) = 0;
    uint64_t v11 = *(void *)(a2 + 136);
    *(void *)(a2 + 136) = 0;
    *(void *)(v7 + 136) = v11;
    LODWORD(v11) = *(_DWORD *)(a2 + 144);
    *(_DWORD *)(a2 + 144) = 0;
    *(_DWORD *)(v7 + 144) = v11;
    LODWORD(v11) = *(_DWORD *)(a2 + 148);
    *(_DWORD *)(a2 + 148) = 0;
    *(_DWORD *)(v7 + 148) = v11;
    LODWORD(v11) = *(_DWORD *)(a2 + 152);
    *(unsigned char *)(v7 + 156) = *(unsigned char *)(a2 + 156);
    *(_DWORD *)(v7 + 152) = v11;
    uint64_t v12 = *(void *)(a2 + 160);
    *(void *)(a2 + 160) = 0;
    *(void *)(v7 + 160) = v12;
    uint64_t v13 = *(void *)(a2 + 168);
    *(void *)(a2 + 168) = 0;
    *(void *)(v7 + 168) = v13;
    uint64_t v14 = *(void *)(a2 + 176);
    *(void *)(a2 + 176) = 0;
    *(void *)(v7 + 176) = v14;
    uint64_t v15 = *(void *)(a2 + 184);
    *(unsigned char *)(v7 + 192) = *(unsigned char *)(a2 + 192);
    *(void *)(v7 + 184) = v15;
    uint64_t v16 = *(void *)(a2 + 200);
    *(void *)(a2 + 200) = 0;
    *(unsigned char *)(v7 + 208) = 0;
    v7 += 208;
    *(void *)(v7 - 8) = v16;
    *(_DWORD *)(v7 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v7, a2 + 208);
    uint64_t v17 = *(void *)(a2 + 240);
    *(void *)(a2 + 240) = 0;
    *(void *)(v7 + 32) = v17;
    __n128 result = *(__n128 *)(a2 + 248);
    long long v18 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(v7 + 70) = *(_OWORD *)(a2 + 278);
    *(_OWORD *)(v7 + 56) = v18;
    *(__n128 *)(v7 + 40) = result;
    *(void *)(v7 + 88) = 0;
    *(void *)(v7 + 96) = 0;
    uint64_t v19 = *(void *)(a2 + 296);
    *(void *)(a2 + 296) = 0;
    *(void *)(v7 + 88) = v19;
    LODWORD(v19) = *(_DWORD *)(a2 + 304);
    *(_DWORD *)(a2 + 304) = 0;
    *(_DWORD *)(v7 + 96) = v19;
    LODWORD(v19) = *(_DWORD *)(a2 + 308);
    *(_DWORD *)(a2 + 308) = 0;
    *(_DWORD *)(v7 + 100) = v19;
    ++*(_DWORD *)(a1 + 28);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebKit::FrameTreeNodeData>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 312))
  {
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 296, a2);
    unsigned int v4 = *(WTF::StringImpl **)(a1 + 240);
    *(void *)(a1 + 240) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(unsigned int *)(a1 + 232);
    if (v5 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v5])(&v8, a1 + 208);
    }
    *(_DWORD *)(a1 + 232) = -1;
    char v6 = *(const void **)(a1 + 200);
    *(void *)(a1 + 200) = 0;
    if (v6) {
      CFRelease(v6);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 8));
  }
  return a1;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetBytecodeProfile,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2258;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v13 = &unk_1EE9DAA68;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  long long v18 = v24;
  uint64_t v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetBytecodeProfile,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DAA68;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetBytecodeProfile,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DAA68;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetBytecodeProfile,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v3 + 16))(v3, &v7);
      __n128 result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        __n128 result = v7;
        uint64_t v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
    }
  }
  else
  {
    char v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v6);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetSamplingProfilerOutput,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2273;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v13 = &unk_1EE9DAA90;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  long long v18 = v24;
  uint64_t v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSamplingProfilerOutput,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DAA90;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSamplingProfilerOutput,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DAA90;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSamplingProfilerOutput,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v3 + 16))(v3, &v7);
      __n128 result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        __n128 result = v7;
        uint64_t v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
    }
  }
  else
  {
    char v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> WebKit::toAPIDataCallbackT<std::optional<IPC::SharedBufferReference> const&>(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(std::optional<IPC::SharedBufferReference> const&)#1},void,std::optional<IPC::SharedBufferReference> const&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DAAB8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> WebKit::toAPIDataCallbackT<std::optional<IPC::SharedBufferReference> const&>(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(std::optional<IPC::SharedBufferReference> const&)#1},void,std::optional<IPC::SharedBufferReference> const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DAAB8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> WebKit::toAPIDataCallbackT<std::optional<IPC::SharedBufferReference> const&>(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(std::optional<IPC::SharedBufferReference> const&)#1},void,std::optional<IPC::SharedBufferReference> const&>::call(uint64_t a1, IPC::SharedBufferReference *this)
{
  if (*((unsigned char *)this + 24))
  {
    uint64_t v3 = (const void *)IPC::SharedBufferReference::span(this);
    API::Data::create(v4, v3, &v10);
    uint64_t v5 = v10;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, WebKit *))(*(void *)v6 + 16))(v6, v5);
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    uint64_t v7 = v10;
    uint64_t v10 = 0;
    if (v7) {
      CFRelease(*((CFTypeRef *)v7 + 1));
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v8 + 16))(v8, 0);
    uint64_t v9 = *(void (**)(uint64_t))(*(void *)v8 + 8);
    v9(v8);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> WebKit::toAPIDataCallbackT<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&>(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&<void ()(API::Data *)> &&)::{lambda(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &)#1},void,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DAAE0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> WebKit::toAPIDataCallbackT<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&>(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&<void ()(API::Data *)> &&)::{lambda(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &)#1},void,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DAAE0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> WebKit::toAPIDataCallbackT<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&>(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&<void ()(API::Data *)> &&)::{lambda(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &)#1},void,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &>::call(uint64_t a1, WebCore::SharedBuffer **a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    unsigned int v4 = (const void *)WebCore::SharedBuffer::data(*a2);
    API::Data::create(*((WTF **)v3 + 6), v4, &v10);
    uint64_t v5 = v10;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, WebKit *))(*(void *)v6 + 16))(v6, v5);
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    uint64_t v7 = v10;
    uint64_t v10 = 0;
    if (v7) {
      CFRelease(*((CFTypeRef *)v7 + 1));
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v8 + 16))(v8, 0);
    uint64_t v9 = *(void (**)(uint64_t))(*(void *)v8 + 8);
    v9(v8);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetSelectionOrContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2277;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v13 = &unk_1EE9DAB08;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  long long v18 = v24;
  uint64_t v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSelectionOrContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DAB08;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSelectionOrContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DAB08;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSelectionOrContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v3 + 16))(v3, &v7);
      __n128 result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        __n128 result = v7;
        uint64_t v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v6);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetSelectionAsWebArchiveData,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2275;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v13 = &unk_1EE9DAB30;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  long long v18 = v24;
  uint64_t v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSelectionAsWebArchiveData,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DAB30;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSelectionAsWebArchiveData,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DAB30;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSelectionAsWebArchiveData,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::optional<IPC::SharedBufferReference>>>((uint64_t)v6, a2), v7))
  {
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v6);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
    if (v7) {
      return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v5);
    }
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::WebPage::GetSelectionAsWebArchiveData,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(v2);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::GetSelectionAsWebArchiveData,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(uint64_t *a1)
{
  v4[0] = 0;
  v4[24] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4, v2);
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<IPC::SharedBufferReference>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(char **)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - (void)v5;
  if (v6 <= v7)
  {
    unint64_t v19 = 0;
    __int16 v20 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v21 = *((void *)a2 + 3);
    if (v21)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
        __int16 v20 = *(char **)a2;
        unint64_t v19 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v19 = 0;
        __int16 v20 = 0;
      }
    }
    goto LABEL_20;
  }
  char v8 = &v5[v7];
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v19 = v6;
    __int16 v20 = 0;
LABEL_20:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v22 = *((void *)a2 + 3);
    if (v22)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v22 + 16))(v22, v20, v19);
        uint64_t v5 = *(char **)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_21;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_21:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v23 = *((void *)a2 + 3);
    if (v23 && v6) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v5);
    }
    goto LABEL_10;
  }
  if (!v9)
  {
    LOBYTE(v29) = 0;
    char v31 = 0;
    LOBYTE(v25) = 0;
    char v27 = 0;
    char v28 = 1;
    std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v5);
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    goto LABEL_8;
  }
  IPC::Decoder::decode<IPC::SharedBufferReference>(a2, (uint64_t)&v29);
  if (v31)
  {
    uint64_t v11 = v29;
    uint64_t v25 = v29;
    char v27 = 1;
    char v28 = 1;
    long long v24 = v30;
    long long v30 = 0u;
    std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v10);
    *(void *)a1 = v11;
    long long v26 = 0u;
    *(_OWORD *)(a1 + 8) = v24;
    *(unsigned char *)(a1 + 24) = 1;
LABEL_8:
    *(unsigned char *)(a1 + 32) = 1;
    return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v12);
  }
  std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v10);
LABEL_10:
  uint64_t v14 = *(char **)a2;
  uint64_t v15 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v16 = *((void *)a2 + 3);
  if (v16 && v15) {
    (*(void (**)(uint64_t, char *))(*(void *)v16 + 16))(v16, v14);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v17 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result && v17)
  {
    long long v18 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v18();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetWebArchiveOfFrameWithFileName,WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0>(WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DAB58;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetWebArchiveOfFrameWithFileName,WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0>(WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DAB58;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetWebArchiveOfFrameWithFileName,WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0>(WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = a1 + 8;
  if (!a2
    || !*(void *)a2
    || (IPC::Decoder::decode<std::tuple<std::optional<IPC::SharedBufferReference>>>((uint64_t)v5, a2), !v5[32]))
  {
    v5[0] = 0;
    v5[24] = 0;
  }
  WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0::operator()(v2, (IPC::SharedBufferReference *)v5);
  return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

unsigned int *WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0::operator()(uint64_t a1, IPC::SharedBufferReference *this)
{
  if (*((unsigned char *)this + 24)
    && (IPC::SharedBufferReference::unsafeBuffer((unsigned int *)this, (uint64_t *)&v20), (uint64_t v3 = (atomic_uint *)v20) != 0))
  {
    if (byte_1EB359C49 == 1)
    {
      uint64_t v4 = (WTF::StringImpl *)qword_1EB359C70;
    }
    else
    {
      WTF::WorkQueue::create();
      uint64_t v4 = v16;
      qword_1EB359C70 = (uint64_t)v16;
      byte_1EB359C49 = 1;
    }
    WTF::String::isolatedCopy();
    atomic_fetch_add(v3, 1u);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    uint64_t v17 = (unsigned int *)v3;
    uint64_t v18 = v5;
    unint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
    *unint64_t v6 = &unk_1EE9DAB80;
    v6[1] = v16;
    unint64_t v7 = v17;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    v6[2] = v7;
    uint64_t v8 = v18;
    uint64_t v18 = 0;
    v6[3] = v8;
    unint64_t v19 = v6;
    (*(void (**)(WTF::StringImpl *, void **))(*(void *)v4 + 32))(v4, &v19);
    uint64_t v10 = v19;
    unint64_t v19 = 0;
    if (v10) {
      (*(void (**)(void *))(*v10 + 8))(v10);
    }
    uint64_t v11 = v18;
    uint64_t v18 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    uint64_t v12 = v17;
    uint64_t v17 = 0;
    if (v12) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v12, v9);
    }
    uint64_t v13 = v16;
    uint64_t v16 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t result = v20;
    if (v20) {
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v20, v9);
    }
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    LOWORD(v16) = 261;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v14 + 16))(v14, &v16);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0::operator()(std::optional<IPC::SharedBufferReference> const&)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DAB80;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  uint64_t v5 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0::operator()(std::optional<IPC::SharedBufferReference> const&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DAB80;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WebCore::Archive *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0::operator()(std::optional<IPC::SharedBufferReference> const&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2 = (const WTF::String *)(a1 + 8);
  WebCore::LegacyWebArchive::create();
  uint64_t v3 = (WTF::RunLoop *)WebCore::Archive::saveResourcesToDisk(v12, v14, v2);
  if (v13)
  {
    if (v13 != 1)
    {
      uint64_t v10 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WebCore::Archive *)WTF::Detail::CallableWrapper<WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0::operator()(std::optional<IPC::SharedBufferReference> const&)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(v10);
    }
    __int16 v4 = 1;
    __int16 v5 = LOBYTE(v12[0]);
  }
  else
  {
    __int16 v5 = 0;
    __int16 v4 = 0;
  }
  WTF::RunLoop::main(v3);
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  uint64_t v7 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v7 = &unk_1EE9DABA8;
  *(void *)(v7 + 8) = v6;
  *(_WORD *)(v7 + 16) = v5 | (v4 << 8);
  uint64_t v11 = v7;
  WTF::RunLoop::dispatch();
  uint64_t v8 = v11;
  uint64_t v11 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (v13 != -1) {
    ((void (*)(uint64_t *, uint64_t *))off_1EE9DABC0[v13])(&v11, v12);
  }
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1) {
      return (WebCore::Archive *)(*(uint64_t (**)(WebCore::Archive *))(*(void *)result + 8))(result);
    }
    else {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0::operator()(std::optional<IPC::SharedBufferReference> const&)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DABA8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0::operator()(std::optional<IPC::SharedBufferReference> const&)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DABA8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::saveResources(WebKit::WebFrameProxy *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::ArchiveError>)> &&)::$_0::operator()(std::optional<IPC::SharedBufferReference> const&)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 17))
  {
    __int16 v1 = *(unsigned __int8 *)(a1 + 16);
    uint64_t v2 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    __int16 v4 = v1 | 0x100;
    (*(void (**)(uint64_t, __int16 *))(*(void *)v2 + 16))(v2, &v4);
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    __int16 v5 = 0;
    (*(void (**)(uint64_t, __int16 *))(*(void *)v2 + 16))(v2, &v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore12ArchiveErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetMainResourceDataOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2265;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DABE0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetMainResourceDataOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DABE0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetMainResourceDataOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DABE0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetMainResourceDataOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::optional<IPC::SharedBufferReference>>>((uint64_t)v6, a2), v7))
  {
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v6);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
    if (v7) {
      return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v5);
    }
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::WebPage::GetSelectionAsWebArchiveData,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(v2);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetResourceDataFromFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2272;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DAC08;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetResourceDataFromFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DAC08;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetResourceDataFromFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DAC08;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetResourceDataFromFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::optional<IPC::SharedBufferReference>>>((uint64_t)v6, a2), v7))
  {
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v6);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
    if (v7) {
      return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v5);
    }
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::WebPage::GetSelectionAsWebArchiveData,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(v2);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetWebArchiveOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2280;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DAC30;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetWebArchiveOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DAC30;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetWebArchiveOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DAC30;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetWebArchiveOfFrame,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<std::optional<IPC::SharedBufferReference>>>((uint64_t)v6, a2), v7))
  {
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v6);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
    if (v7) {
      return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v5);
    }
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::WebPage::GetSelectionAsWebArchiveData,WTF::CompletionHandler<void ()(std::optional<IPC::SharedBufferReference> const&)>>(v2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::updateRenderingWithForcedRepaint(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DAC58;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  __int16 v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::updateRenderingWithForcedRepaint(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DAC58;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  __int16 v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::updateRenderingWithForcedRepaint(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && (uint64_t v3 = *(void *)(v2 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v3 - 8));
    WebKit::WebPageProxy::callAfterNextPresentationUpdate(v3 - 16, (uint64_t *)(a1 + 16));
    __int16 v4 = *(const void **)(v3 - 8);
    CFRelease(v4);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    uint64_t v6 = *(void (**)(uint64_t))(*(void *)v5 + 8);
    v6(v5);
  }
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::updateRenderingWithForcedRepaint(WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = **(atomic_uint ***)(a1 + 8);
  atomic_fetch_add(v5, 1u);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2531;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v15 = v6;
  char v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v7 = &unk_1EE9DACA8;
  v7[1] = v5;
  v13[0] = v7;
  v13[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v14 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v15, 0, (uint64_t)v13, 1);
  if (v14)
  {
    uint64_t v9 = v13[0];
    v13[0] = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage32UpdateRenderingWithForcedRepaintEZZN6WebKit12WebPageProxy32updateRenderingWithForcedRepaintEONS_17CompletionHandlerIFvvEEEENK3__1clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlvE_EENSA_IFvPNS2_7DecoderEEEEOSR_NS_19ThreadLikeAssertionEEUlSU_E_vJSU_EED1Ev(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DACA8;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage32UpdateRenderingWithForcedRepaintEZZN6WebKit12WebPageProxy32updateRenderingWithForcedRepaintEONS_17CompletionHandlerIFvvEEEENK3__1clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlvE_EENSA_IFvPNS2_7DecoderEEEEOSR_NS_19ThreadLikeAssertionEEUlSU_E_vJSU_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DACA8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::preferencesDidChange(void)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  LOBYTE(v35) = 0;
  char v36 = 0;
  uint64_t v6 = (void *)(a2 + 1080);
  uint64_t result = (IPC::Encoder *)WebKit::updateSharedPreferencesForWebProcess((unsigned char *)(a2 + 1080), (WebKit::WebPreferencesStore *)(*(void *)(v5 + 272) + 40), a3);
  if (result)
  {
    ++*v6;
    long long v8 = *(_OWORD *)(a2 + 1096);
    long long v31 = *(_OWORD *)v6;
    long long v32 = v8;
    uint64_t v33 = *(void *)(a2 + 1112);
    char v34 = 1;
    uint64_t v35 = v31;
    char v36 = 1;
    uint64_t v9 = *(void *)(*(void *)(v5 + 312) + 400);
    if (v9)
    {
      atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 1u);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
      uint64_t v10 = *(atomic_uint **)(a2 + 8);
      if (v10) {
        atomic_fetch_add(v10, 1u);
      }
      uint64_t v11 = v31;
      uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v12 = &unk_1EE9DACF8;
      v12[1] = v10;
      uint64_t v12[2] = v11;
      long long v30 = v12;
      char v39 = *(IPC::Encoder **)(a2 + 176);
      uint64_t v37 = (IPC::Encoder *)&v39;
      uint64_t v38 = &v31;
      WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SharedPreferencesForWebProcessDidChange,WTF::CompletionHandler<void ()(void)>>(v9, (uint64_t)&v37, (uint64_t *)&v30, 0, 0, 1);
      uint64_t v13 = (uint64_t)v30;
      long long v30 = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      uint64_t result = (IPC::Encoder *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v9 + 16));
    }
    uint64_t v14 = *(void *)(*(void *)(a2 + 512) + 8);
    uint64_t v15 = v14 ? v14 - 16 : 0;
    uint64_t v16 = *(void *)(v15 + 176);
    if (v16)
    {
      atomic_fetch_add((atomic_uint *volatile)(v16 + 16), 1u);
      if (!v34) {
        goto LABEL_30;
      }
      uint64_t result = (IPC::Encoder *)WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
      int v17 = *(atomic_uint **)(a2 + 8);
      if (v17) {
        atomic_fetch_add(v17, 1u);
      }
      if (!v34)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      uint64_t v18 = v31;
      unint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x18);
      *unint64_t v19 = &unk_1EE9DAD20;
      v19[1] = v17;
      _OWORD v19[2] = v18;
      long long v30 = v19;
      char v39 = *(IPC::Encoder **)(a2 + 176);
      uint64_t v37 = (IPC::Encoder *)&v39;
      uint64_t v38 = &v31;
      WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::GPUProcess::SharedPreferencesForWebProcessDidChange,WTF::CompletionHandler<void ()(void)>>(v16, (uint64_t)&v37, (uint64_t *)&v30, 0, 0, 1);
      uint64_t v20 = (uint64_t)v30;
      long long v30 = 0;
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v16 + 16));
    }
  }
  int v21 = *(unsigned __int8 *)(v5 + 804);
  uint64_t v22 = *(void *)(v5 + 272);
  if (v21)
  {
    LOBYTE(v37) = 0;
    LOBYTE(v38) = 0;
    uint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v23 = 2342;
    *((void *)v23 + 1) = a3;
    *((void *)v23 + 66) = (char *)v23 + 16;
    *((void *)v23 + 67) = 512;
    *((void *)v23 + 68) = 0;
    *((void *)v23 + 70) = 0;
    *((void *)v23 + 69) = 0;
    IPC::Encoder::encodeHeader(v23);
    char v39 = v23;
    IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(v23, (uint64_t *)(v22 + 40));
    IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(v23, (uint64_t *)(v22 + 64));
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(v23, (uint64_t)&v37);
    LOBYTE(v31) = 0;
    LOBYTE(v32) = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v39, 2, (uint64_t)&v31, 1);
    if ((_BYTE)v32)
    {
      uint64_t v25 = v31;
      *(void *)&long long v31 = 0;
      if (v25) {
        (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
      }
    }
    uint64_t result = v39;
    char v39 = 0;
    if (!result) {
      return result;
    }
LABEL_29:
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v28, v29);
  }
  long long v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v26 = 2341;
  *((void *)v26 + 1) = a3;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 70) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  uint64_t v37 = v26;
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(v26, (uint64_t *)(v22 + 40));
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(v26, (uint64_t *)(v22 + 64));
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(v26, (uint64_t)&v35);
  LOBYTE(v31) = 0;
  LOBYTE(v32) = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v37, 0, (uint64_t)&v31, 1);
  if ((_BYTE)v32)
  {
    uint64_t v27 = v31;
    *(void *)&long long v31 = 0;
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    }
  }
  uint64_t result = v37;
  uint64_t v37 = 0;
  if (result) {
    goto LABEL_29;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy20preferencesDidChangeEvENK3__0clINS2_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlvE_vJEED1Ev(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DACF8;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy20preferencesDidChangeEvENK3__0clINS2_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DACF8;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy20preferencesDidChangeEvENK3__0clINS2_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlvE_vJEE4callEv(unsigned int *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = (unsigned int *)(v2 + 16);
      atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 1u);
      WebKit::WebProcessProxy::didSyncSharedPreferencesForWebProcessWithNetworkProcess((void *)v2, *((void *)result + 2));
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy20preferencesDidChangeEvENK3__0clINS2_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlvE0_vJEED1Ev(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DAD20;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy20preferencesDidChangeEvENK3__0clINS2_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlvE0_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DAD20;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy20preferencesDidChangeEvENK3__0clINS2_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlvE0_vJEE4callEv(unsigned int *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = (unsigned int *)(v2 + 16);
      atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 1u);
      WebKit::WebProcessProxy::didSyncSharedPreferencesForWebProcessWithGPUProcess((void *)v2, *((void *)result + 2));
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
    }
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::didDestroyFrame(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::call(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 144);
  if (v3 && v3 != *((void *)result + 1))
  {
    uint64_t v6 = (uint64_t *)*((void *)result + 2);
    char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v7 = 2252;
    *((void *)v7 + 1) = a3;
    *((void *)v7 + 66) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    uint64_t v14 = v7;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v7, v6);
    LOBYTE(v12) = 0;
    char v13 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v14, 0, (uint64_t)&v12, 1);
    if (v13)
    {
      uint64_t v9 = v12;
      uint64_t v12 = 0;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
    }
    uint64_t result = v14;
    uint64_t v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (IPC::Encoder *)WTF::fastFree(v10, v11);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetCanUseCredentialStorage>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  long long v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v8 = 2418;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WebCore::ResourceRequest &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::FrameInfoData &::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String const&,WebKit::FrameInfoData &::ResourceError const&,WebKit::FrameInfoData &::WillContinueLoading,WebKit::UserData const&,WebKit::FrameInfoData &::WillInternallyHandleFailure)::$_1,void,WebCore::ResourceRequest::variant<WebKit::ContinueUnsafeLoad,WTF::URL> &&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DAD70;
  WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WebCore::ResourceRequest &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::FrameInfoData &::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String const&,WebKit::FrameInfoData &::ResourceError const&,WebKit::FrameInfoData &::WillContinueLoading,WebKit::UserData const&,WebKit::FrameInfoData &::WillInternallyHandleFailure)::$_0::~$_0((uint64_t)(a1 + 9), a2);
  __int16 v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[3];
  a1[3] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 1600))(v5);
  }
  uint64_t v6 = a1[2];
  a1[2] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WebCore::ResourceRequest &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::FrameInfoData &::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String const&,WebKit::FrameInfoData &::ResourceError const&,WebKit::FrameInfoData &::WillContinueLoading,WebKit::UserData const&,WebKit::FrameInfoData &::WillInternallyHandleFailure)::$_1,void,WebCore::ResourceRequest::variant<WebKit::ContinueUnsafeLoad,WTF::URL> &&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9DAD70;
  WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WebCore::ResourceRequest &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::FrameInfoData &::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String const&,WebKit::FrameInfoData &::ResourceError const&,WebKit::FrameInfoData &::WillContinueLoading,WebKit::UserData const&,WebKit::FrameInfoData &::WillInternallyHandleFailure)::$_0::~$_0((uint64_t)a1 + 72, a2);
  __int16 v4 = (WTF::StringImpl *)*((void *)a1 + 4);
  *((void *)a1 + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 1600))(v5);
  }
  uint64_t v6 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }

  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WebCore::ResourceRequest &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::FrameInfoData &::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String const&,WebKit::FrameInfoData &::ResourceError const&,WebKit::FrameInfoData &::WillContinueLoading,WebKit::UserData const&,WebKit::FrameInfoData &::WillInternallyHandleFailure)::$_1,void,WebCore::ResourceRequest::variant<WebKit::ContinueUnsafeLoad,WTF::URL> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 32);
  uint64_t v6 = *(void *)(*(void *)(v5 + 992) + 8);
  if (v6)
  {
    uint64_t v7 = v6 - 16;
    CFRetain(*(CFTypeRef *)(v6 - 8));
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void *)(v4 + 32);
  v17[0] = v7;
  v17[1] = v5 + 976;
  ++*(_DWORD *)(v5 + 1348);
  *(unsigned char *)(v5 + 1344) = 1;
  v18[0] = 0;
  WTF::String::operator=((uint64_t *)(v8 + 1256), v18);
  uint64_t v10 = v18[0];
  v18[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  int v11 = *(_DWORD *)(a2 + 40);
  if (v11 == 1)
  {
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v18, (const String *)a2, 0);
    CFTypeRef cf = 0;
    uint64_t v12 = v4;
    char v13 = 0;
  }
  else
  {
    if (v11)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      JUMPOUT(0x198EB1880);
    }
    if (!*(unsigned char *)a2)
    {
      WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WebCore::ResourceRequest &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::FrameInfoData &::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String const&,WebKit::FrameInfoData &::ResourceError const&,WebKit::FrameInfoData &::WillContinueLoading,WebKit::UserData const&,WebKit::FrameInfoData &::WillInternallyHandleFailure)::$_0::operator()((uint64_t *)(a1 + 72));
      goto LABEL_17;
    }
    WTF::URL::setProtocol();
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v18, (const String *)(a1 + 32), 0);
    CFTypeRef cf = 0;
    uint64_t v12 = v4;
    char v13 = 1;
  }
  WebKit::WebPageProxy::loadRequest(v12, (WebCore::ResourceRequestBase *)v18, 1, v13, 0, &v20);
  if (v20) {
    CFRelease(*(CFTypeRef *)(v20 + 8));
  }
  CFTypeRef v14 = cf;
  CFTypeRef cf = 0;
  if (v14) {
    CFRelease(v14);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v18);
LABEL_17:
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v17, v15, v16);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::forEachWebContentProcess(WTF::Function<void ()(WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)> &&)::$_0,void,WebKit::RemotePageProxy &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, void))(***(void ***)(a1 + 8) + 16))(**(void **)(a1 + 8), *(void *)(a2 + 24), *(void *)(a2 + 16));
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::createRemoteSubframesInOtherProcesses(WebKit::WebFrameProxy &,WTF::String const&)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::call(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 136);
  if (v5) {
    int v6 = *(_DWORD *)(v5 + 108);
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = *((void *)result + 1);
  uint64_t v8 = *(void *)(*(void *)(*(void *)(v7 + 32) + 16) + 136);
  if (v8) {
    LODWORD(v8) = *(_DWORD *)(v8 + 108);
  }
  if (v6 != v8)
  {
    uint64_t v9 = (uint64_t *)*((void *)result + 3);
    long long v10 = *(_OWORD *)(**((void **)result + 2) + 272);
    long long v16 = *(_OWORD *)(v7 + 272);
    long long v17 = v10;
    v18[0] = (uint64_t *)&v17;
    v18[1] = (uint64_t *)&v16;
    _OWORD v18[2] = v9;
    int v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v11 = 2184;
    *((void *)v11 + 1) = a3;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 68) = 0;
    *((void *)v11 + 70) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    int v21 = v11;
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&>,0ul,1ul,2ul>(v11, v18);
    LOBYTE(v19) = 0;
    char v20 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v21, 0, (uint64_t)&v19, 1);
    if (v20)
    {
      uint64_t v13 = v19;
      uint64_t v19 = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
    }
    uint64_t result = v21;
    int v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v12);
      return (IPC::Encoder *)WTF::fastFree(v14, v15);
    }
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, a2[1]);
  uint64_t v4 = a2[2];

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v4);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::broadcastMainFrameURLChangeToOtherProcesses(IPC::Connection &,WTF::URL const&)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::call(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 144);
  if (v3 && v3 != *((void *)result + 1))
  {
    int v6 = (uint64_t *)*((void *)result + 2);
    uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v7 = 2316;
    *((void *)v7 + 1) = a3;
    *((void *)v7 + 66) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    CFTypeRef v14 = v7;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, v6);
    LOBYTE(v12) = 0;
    char v13 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v14, 0, (uint64_t)&v12, 1);
    if (v13)
    {
      uint64_t v9 = v12;
      uint64_t v12 = 0;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
    }
    uint64_t result = v14;
    CFTypeRef v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (IPC::Encoder *)WTF::fastFree(v10, v11);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNavigationActionAsyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::CompletionHandler>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DAE10;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNavigationActionAsyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::CompletionHandler>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DAE10;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNavigationActionAsyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::CompletionHandler>::call(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 2) && WTF::URL::protocolIs()) {
    WebKit::WebProcessProxy::addPreviouslyApprovedFileURL(*(WebKit::WebProcessProxy **)(a1 + 16), (const WTF::URL *)(a1 + 24));
  }
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t API::NavigationAction::NavigationAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD **a5, uint64_t a6, uint64_t a7, char a8, uint64_t *a9, uint64_t a10, long long *a11)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9DAE38;
  if (a3) {
    CFRetain(*(CFTypeRef *)(a3 + 8));
  }
  *(void *)(a1 + 16) = a3;
  if (a4) {
    CFRetain(*(CFTypeRef *)(a4 + 8));
  }
  *(void *)(a1 + 24) = a4;
  uint64_t v19 = *a5;
  if (*a5) {
    *v19 += 2;
  }
  *(void *)(a1 + 32) = v19;
  WTF::URL::URL(a1 + 40, (uint64_t *)a6);
  WTF::URL::URL(a1 + 80, (uint64_t *)(a6 + 40));
  *(void *)(a1 + 120) = *(void *)(a6 + 80);
  uint64_t v20 = *(void *)(a6 + 88);
  *(void *)(a6 + 88) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = v20;
  uint64_t v21 = *(void *)(a6 + 96);
  *(void *)(a6 + 96) = 0;
  *(void *)(a1 + 136) = v21;
  LODWORD(v21) = *(_DWORD *)(a6 + 104);
  *(_DWORD *)(a6 + 104) = 0;
  *(_DWORD *)(a1 + 144) = v21;
  LODWORD(v21) = *(_DWORD *)(a6 + 108);
  *(_DWORD *)(a6 + 108) = 0;
  *(_DWORD *)(a1 + 148) = v21;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  uint64_t v22 = *(void *)(a6 + 112);
  *(void *)(a6 + 112) = 0;
  *(void *)(a1 + 152) = v22;
  LODWORD(v22) = *(_DWORD *)(a6 + 120);
  *(_DWORD *)(a6 + 120) = 0;
  *(_DWORD *)(a1 + 160) = v22;
  LODWORD(v22) = *(_DWORD *)(a6 + 124);
  *(_DWORD *)(a6 + 124) = 0;
  *(_DWORD *)(a1 + 164) = v22;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  uint64_t v23 = *(void *)(a6 + 128);
  *(void *)(a6 + 128) = 0;
  *(void *)(a1 + 168) = v23;
  LODWORD(v23) = *(_DWORD *)(a6 + 136);
  *(_DWORD *)(a6 + 136) = 0;
  *(_DWORD *)(a1 + 176) = v23;
  LODWORD(v23) = *(_DWORD *)(a6 + 140);
  *(_DWORD *)(a6 + 140) = 0;
  *(_DWORD *)(a1 + 180) = v23;
  LODWORD(v23) = *(_DWORD *)(a6 + 144);
  *(unsigned char *)(a1 + 188) = *(unsigned char *)(a6 + 148);
  *(_DWORD *)(a1 + 184) = v23;
  uint64_t v24 = *(void *)(a6 + 152);
  *(void *)(a6 + 152) = 0;
  *(void *)(a1 + 192) = v24;
  uint64_t v25 = *(void *)(a6 + 160);
  *(void *)(a6 + 160) = 0;
  *(void *)(a1 + 200) = v25;
  uint64_t v26 = *(void *)(a6 + 168);
  *(void *)(a6 + 168) = 0;
  *(void *)(a1 + 208) = v26;
  uint64_t v27 = *(void *)(a6 + 176);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a6 + 184);
  *(void *)(a1 + 216) = v27;
  uint64_t v28 = *(void *)(a6 + 192);
  *(void *)(a6 + 192) = 0;
  *(void *)(a1 + 232) = v28;
  uint64_t v29 = *(_DWORD **)a7;
  if (*(void *)a7) {
    *v29 += 2;
  }
  *(void *)(a1 + 240) = v29;
  long long v30 = *(_OWORD *)(a7 + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a7 + 24);
  *(_OWORD *)(a1 + 248) = v30;
  *(unsigned char *)(a1 + 280) = a8;
  *(unsigned char *)(a1 + 281) = 1;
  uint64_t v31 = *a9;
  *a9 = 0;
  *(void *)(a1 + 288) = v31;
  WebKit::NavigationActionData::NavigationActionData(a1 + 304, a2);
  if (a10) {
    CFRetain(*(CFTypeRef *)(a10 + 8));
  }
  *(void *)(a1 + 2880) = a10;
  long long v32 = *a11;
  *(void *)(a1 + 2904) = *((void *)a11 + 2);
  *(_OWORD *)(a1 + 2888) = v32;
  return a1;
}

uint64_t API::ObjectImpl<(API::Object::Type)77>::type()
{
  return 77;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DAE60;
  WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9DAE60;
  WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted>::call(uint64_t a1, unsigned int a2, uint64_t a3, char a4, uint64_t *a5, __int16 a6, int a7)
{
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v15 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(v14 + 32);
    uint64_t v17 = *(void *)(*(void *)(v14 + 256) + 136);
    if (v17) {
      LODWORD(v17) = *(_DWORD *)(v17 + 108);
    }
    uint64_t v18 = *(void *)(v16 + 760);
    uint64_t v19 = *(void *)(v16 + 1928);
    uint64_t v20 = *(void *)(a1 + 32);
    uint64_t v21 = *(void *)(v20 + 272);
    int v22 = *(unsigned __int8 *)(v20 + 441);
    uint64_t v23 = *(void *)(a1 + 48);
    if (v23) {
      uint64_t v23 = *(void *)(v23 + 16);
    }
    BOOL v24 = *a5 != 0;
    *(_DWORD *)buf = 134220544;
    *(void *)&buf[4] = v14;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v18;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&long long v112 = v19;
    WORD4(v112) = 1024;
    *(_DWORD *)((char *)&v112 + 10) = v17;
    HIWORD(v112) = 2048;
    uint64_t v113 = v21;
    __int16 v114 = 1024;
    int v115 = v22;
    __int16 v116 = 2048;
    uint64_t v117 = v23;
    __int16 v118 = 1024;
    unsigned int v119 = a2;
    __int16 v120 = 1024;
    BOOL v121 = v24;
    __int16 v122 = 1024;
    BOOL v123 = (a6 & 0xFF00) != 0;
    __int16 v124 = 1024;
    int v125 = a7;
    _os_log_impl(&dword_1985F2000, v15, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::decidePolicyForNavigationAction: listener called: frameID=%llu, isMainFrame=%d, navigationID=%llu, policyAction=%u, safeBrowsingWarning=%d, isAppBoundDomain=%d, wasNavigationIntercepted=%d", buf, 0x58u);
  }
  unsigned int v105 = a2;
  uint64_t v25 = *(void *)(a1 + 48);
  if (a3) {
    CFRetain(*(CFTypeRef *)(a3 + 8));
  }
  uint64_t v26 = *(void *)(v25 + 3488);
  *(void *)(v25 + 3488) = a3;
  if (v26) {
    CFRelease(*(CFTypeRef *)(v26 + 8));
  }
  v134[0] = v14;
  uint64_t v27 = *(void *)(a1 + 16);
  CFRetain(*(CFTypeRef *)(v27 + 8));
  uint64_t v28 = *(void *)(a1 + 24);
  uint64_t v29 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = 0;
  v134[1] = v27;
  v134[2] = v28;
  CFRetain(*(CFTypeRef *)(v29 + 8));
  v134[3] = v29;
  __int16 v135 = *(_WORD *)(a1 + 88);
  WebCore::ResourceRequest::ResourceRequest(&v136, (const String *)(a1 + 96));
  v137[0] = 0;
  int v138 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v137, a1 + 296);
  long long v30 = *(_DWORD **)(a1 + 328);
  if (v30) {
    *v30 += 2;
  }
  uint64_t v31 = (long long *)(a1 + 336);
  long long v32 = *(_OWORD *)(a1 + 352);
  long long v140 = *(_OWORD *)(a1 + 336);
  v141[0] = v32;
  *(_OWORD *)((char *)v141 + 14) = *(_OWORD *)(a1 + 366);
  uint64_t v33 = *(void *)(a1 + 40);
  uint64_t v34 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = 0;
  v139 = v30;
  uint64_t v142 = v33;
  if (v34) {
    CFRetain(*(CFTypeRef *)(v34 + 8));
  }
  uint64_t v35 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  uint64_t v143 = v34;
  uint64_t v144 = v35;
  char v145 = a7;
  char v146 = a4;
  char v36 = *(_DWORD **)(a1 + 384);
  if (v36) {
    *v36 += 2;
  }
  uint64_t v104 = a1 + 384;
  v147 = v36;
  __n128 v37 = *(__n128 *)(a1 + 392);
  long long v38 = *(_OWORD *)(a1 + 408);
  __n128 v148 = v37;
  long long v149 = v38;
  LOBYTE(v150) = 0;
  char v152 = 0;
  if (*(unsigned char *)(a1 + 80))
  {
    __int16 v150 = *(_WORD *)(a1 + 64);
    uint64_t v103 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    uint64_t v151 = v103;
    char v152 = 1;
  }
  if (v105 == 2) {
    goto LABEL_36;
  }
  int v39 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 441);
  uint64_t v40 = (WebKit *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*(void *)(a1 + 48) + 232));
  isFullWebBrowserOrRunningTest = (WebKit *)WebKit::isFullWebBrowserOrRunningTest(v40);
  if (isFullWebBrowserOrRunningTest)
  {
    if (!WebKit::hasProhibitedUsageStrings(isFullWebBrowserOrRunningTest)) {
      goto LABEL_34;
    }
    goto LABEL_22;
  }
  if ((a6 & 0xFF00) == 0)
  {
    if (*(unsigned char *)(v14 + 1329)) {
      *(unsigned char *)(v14 + 1329) = 0;
    }
    goto LABEL_34;
  }
  if (!*(unsigned char *)(v14 + 1332))
  {
    if (v39
      && (WebKit::shouldTreatURLProtocolAsAppBound(v40, (const WTF::URL *)*(unsigned __int8 *)(*(void *)(*(void *)(v14 + 312) + 208) + 472)) & 1) != 0)
    {
      *(unsigned char *)(v14 + 1333) = 1;
LABEL_32:
      __int16 v42 = 257;
      goto LABEL_33;
    }
    if (*(unsigned char *)(v14 + 1333))
    {
      if ((_BYTE)a6) {
        goto LABEL_32;
      }
      if (v39)
      {
LABEL_96:
        __int16 v91 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*(void *)(a1 + 48)
                                                                                                 + 232));
        WebKit::WebPageProxy::errorForUnpermittedAppBoundDomainNavigation(v91, (uint64_t)&v107);
        uint64_t v92 = *(void *)(v14 + 72);
        *(_WORD *)buf = *(_WORD *)(a1 + 88);
        WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&buf[8], (const String *)(a1 + 96));
        v127[0] = 0;
        int v128 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v127, a1 + 296);
        v93 = *(WTF::StringImpl **)(a1 + 328);
        if (v93) {
          *(_DWORD *)v93 += 2;
        }
        v129 = v93;
        long long v94 = *v31;
        v131[0] = *(_OWORD *)(a1 + 352);
        *(_OWORD *)((char *)v131 + 14) = *(_OWORD *)(a1 + 366);
        long long v130 = v94;
        (*(void (**)(uint64_t, uint64_t, unsigned char *, void, uint64_t, WTF::StringImpl **, void))(*(void *)v92 + 64))(v92, v14, buf, *(void *)(a1 + 48), v104, &v107, 0);
        char v96 = v129;
        v129 = 0;
        if (v96)
        {
          if (*(_DWORD *)v96 == 2) {
            WTF::StringImpl::destroy(v96, v95);
          }
          else {
            *(_DWORD *)v96 -= 2;
          }
        }
        if (v128 != -1) {
          ((void (*)(uint64_t *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v128])(&v106, v127);
        }
        int v128 = -1;
        CFTypeRef v97 = cf;
        CFTypeRef cf = 0;
        if (v97) {
          CFRelease(v97);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[8]);
        v98 = qword_1EB358050;
        if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_ERROR))
        {
          uint64_t v99 = *(void *)(v14 + 32);
          uint64_t v100 = *(void *)(v99 + 760);
          uint64_t v101 = *(void *)(v99 + 1928);
          uint64_t v102 = *(void *)(*(void *)(v14 + 256) + 136);
          if (v102) {
            LODWORD(v102) = *(_DWORD *)(v102 + 108);
          }
          *(_DWORD *)buf = 134218752;
          *(void *)&buf[4] = v14;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v100;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&long long v112 = v101;
          WORD4(v112) = 1024;
          *(_DWORD *)((char *)&v112 + 10) = v102;
          _os_log_error_impl(&dword_1985F2000, v98, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::Ignoring request to load this main resource because it is attempting to navigate away from an app-bound domain or navigate after using restricted APIs", buf, 0x26u);
        }
        goto LABEL_78;
      }
    }
    else if (*(unsigned char *)(v14 + 1335))
    {
      goto LABEL_96;
    }
LABEL_22:
    __int16 v42 = 256;
LABEL_33:
    *(_WORD *)(v14 + 1328) = v42;
  }
LABEL_34:
  if (*(unsigned char *)(*(void *)(a1 + 32) + 441)) {
    *(_WORD *)(v14 + 1330) = *(_WORD *)(v14 + 1328);
  }
LABEL_36:
  if (*(unsigned char *)(v14 + 1376)) {
    v37.n128_f64[0] = WebKit::WebPageProxy::sendCachedLinkDecorationFilteringData((WebKit::WebPageProxy *)v14);
  }
  (*(void (**)(void, __n128))(**(void **)(a1 + 424) + 264))(*(void *)(a1 + 424), v37);
  uint64_t v43 = *a5;
  if (!*a5)
  {
    WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::operator()((uint64_t)v134, (WTF::StringImpl *)v105);
    return WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::~WasNavigationIntercepted((uint64_t)v134, v52);
  }
  if (*(unsigned char *)(*(void *)(a1 + 32) + 441))
  {
    if ((*(unsigned char *)(v43 + 16) & 1) == 0) {
      goto LABEL_55;
    }
    uint64_t v44 = *(void *)(v14 + 32);
    uint64_t v45 = *(void *)(*(void *)(v44 + 992) + 8);
    if (v45)
    {
      uint64_t v46 = (WTF::StringImpl *)(v45 - 16);
      CFRetain(*(CFTypeRef *)(v45 - 8));
      uint64_t v47 = *(void *)(v14 + 32);
      uint64_t v43 = *a5;
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v47 = *(void *)(v14 + 32);
    }
    v107 = v46;
    __int16 v108 = (WTF::StringImpl *)(v44 + 976);
    ++*(_DWORD *)(v44 + 1348);
    *(unsigned char *)(v44 + 1344) = 1;
    uint64_t v48 = *(void *)(*(void *)(a1 + 48) + 16);
    __int16 v49 = *(_DWORD **)(v43 + 8);
    if (v49) {
      *v49 += 2;
    }
    *(void *)buf = 0;
    WTF::URL::invalidate((WTF::URL *)buf);
    *(void *)(v47 + 1176) = v48;
    long long v51 = *(WTF::StringImpl **)(v47 + 1184);
    *(void *)(v47 + 1184) = v49;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2) {
        WTF::StringImpl::destroy(v51, v50);
      }
      else {
        *(_DWORD *)v51 -= 2;
      }
    }
    WTF::String::operator=((uint64_t *)(v47 + 1264), (WTF::StringImpl **)buf);
    *(_OWORD *)(v47 + 1272) = *(_OWORD *)&buf[8];
    *(_OWORD *)(v47 + 1288) = v112;
    long long v55 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2) {
        WTF::StringImpl::destroy(v55, v53);
      }
      else {
        *(_DWORD *)v55 -= 2;
      }
    }
    WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(*(void *)(v14 + 32) + 976), (uint64_t)v53, v54);
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&v107, v56, v57);
    if (*(unsigned char *)(*(void *)(a1 + 32) + 441))
    {
LABEL_55:
      uint64_t v58 = *(void *)(v14 + 32);
      uint64_t v59 = *(void *)(*(void *)(v58 + 992) + 8);
      if (v59)
      {
        uint64_t v60 = (WTF::StringImpl *)(v59 - 16);
        CFRetain(*(CFTypeRef *)(v59 - 8));
      }
      else
      {
        uint64_t v60 = 0;
      }
      uint64_t v61 = *(void *)(v14 + 32);
      v107 = v60;
      __int16 v108 = (WTF::StringImpl *)(v58 + 976);
      ++*(_DWORD *)(v58 + 1348);
      *(unsigned char *)(v58 + 1344) = 1;
      WTF::String::operator=((uint64_t *)(v61 + 1256), (WTF::StringImpl **)(*a5 + 48));
      uint64_t v62 = *(void *)(a1 + 424);
      uint64_t v63 = *a5;
      uint64_t v64 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = 0;
      *(void *)buf = v14;
      *(void *)&buf[8] = v64;
      WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::WasNavigationIntercepted((uint64_t)&buf[16], (uint64_t)v134);
      char v132 = v105;
      uint64_t v65 = *(void *)(a1 + 424);
      (*(void (**)(uint64_t))(*(void *)v65 + 1592))(v65);
      uint64_t v133 = v65;
      uint64_t v66 = WTF::fastMalloc((WTF *)0x1D0);
      *(void *)uint64_t v66 = &unk_1EE9DAE88;
      *(void *)(v66 + 8) = *(void *)buf;
      uint64_t v67 = *(void *)&buf[8];
      *(void *)&buf[8] = 0;
      *(void *)(v66 + 16) = v67;
      WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::WasNavigationIntercepted(v66 + 24, (uint64_t)&buf[16]);
      *(unsigned char *)(v66 + 448) = v132;
      uint64_t v68 = v133;
      uint64_t v133 = 0;
      *(void *)(v66 + 456) = v68;
      uint64_t v106 = v66;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v62 + 256))(v62, v63, &v106);
      uint64_t v70 = v106;
      uint64_t v106 = 0;
      if (v70) {
        (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
      }
      uint64_t v71 = v133;
      uint64_t v133 = 0;
      if (v71) {
        (*(void (**)(uint64_t))(*(void *)v71 + 1600))(v71);
      }
      WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::~WasNavigationIntercepted((uint64_t)&buf[16], v69);
      uint64_t v72 = *(void *)&buf[8];
      *(void *)&buf[8] = 0;
      if (v72) {
        CFRelease(*(CFTypeRef *)(v72 + 8));
      }
      (*(void (**)(void))(**(void **)(v14 + 104) + 536))(*(void *)(v14 + 104));
      WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)&v107, v73, v74);
      return WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::~WasNavigationIntercepted((uint64_t)v134, v52);
    }
  }
  WebKit::interruptedForPolicyChangeError((WebKit *)(*(void *)(a1 + 48) + 232), (uint64_t)&v107);
  uint64_t v75 = *(void *)(v14 + 72);
  *(_WORD *)buf = *(_WORD *)(a1 + 88);
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&buf[8], (const String *)(a1 + 96));
  v127[0] = 0;
  int v128 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v127, a1 + 296);
  char v76 = *(WTF::StringImpl **)(a1 + 328);
  if (v76) {
    *(_DWORD *)v76 += 2;
  }
  v129 = v76;
  long long v77 = *v31;
  v131[0] = *(_OWORD *)(a1 + 352);
  *(_OWORD *)((char *)v131 + 14) = *(_OWORD *)(a1 + 366);
  long long v130 = v77;
  (*(void (**)(uint64_t, uint64_t, unsigned char *, void, uint64_t, WTF::StringImpl **, void))(*(void *)v75 + 64))(v75, v14, buf, *(void *)(a1 + 48), v104, &v107, 0);
  uint64_t v79 = v129;
  v129 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2) {
      WTF::StringImpl::destroy(v79, v78);
    }
    else {
      *(_DWORD *)v79 -= 2;
    }
  }
  if (v128 != -1) {
    ((void (*)(uint64_t *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v128])(&v106, v127);
  }
  int v128 = -1;
  CFTypeRef v80 = cf;
  CFTypeRef cf = 0;
  if (v80) {
    CFRelease(v80);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[8]);
  v81 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v82 = *(void *)(v14 + 32);
    uint64_t v83 = *(void *)(v82 + 760);
    uint64_t v84 = *(void *)(v82 + 1928);
    uint64_t v85 = *(void *)(*(void *)(v14 + 256) + 136);
    if (v85) {
      LODWORD(v85) = *(_DWORD *)(v85 + 108);
    }
    *(_DWORD *)buf = 134218752;
    *(void *)&buf[4] = v14;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v83;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&long long v112 = v84;
    WORD4(v112) = 1024;
    *(_DWORD *)((char *)&v112 + 10) = v85;
    _os_log_impl(&dword_1985F2000, v81, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::decidePolicyForNavigationAction: Ignoring request to load subframe resource because Safe Browsing found a match.", buf, 0x26u);
  }
LABEL_78:
  WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::operator()((uint64_t)v134, (WTF::StringImpl *)2);
  CFTypeRef v86 = v110;
  CFTypeRef v110 = 0;
  if (v86) {
    CFRelease(v86);
  }
  uint64_t v87 = v109;
  v109 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2) {
      WTF::StringImpl::destroy(v87, v52);
    }
    else {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v108;
  __int16 v108 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2) {
      WTF::StringImpl::destroy(v88, v52);
    }
    else {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = v107;
  v107 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2) {
      WTF::StringImpl::destroy(v89, v52);
    }
    else {
      *(_DWORD *)v89 -= 2;
    }
  }
  return WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::~WasNavigationIntercepted((uint64_t)v134, v52);
}

void WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::operator()(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a1;
  if (*(unsigned char *)(*(void *)(a1 + 24) + 441))
  {
    uint64_t v5 = *(void *)(a1 + 336);
    int v6 = *(CFTypeRef **)(v5 + 3488);
    if (v6) {
      goto LABEL_6;
    }
    uint64_t v7 = API::PageConfiguration::Data::LazyInitializedRef<API::WebsitePolicies,&API::PageConfiguration::Data::createWebsitePolicies>::get((API::WebsitePolicies **)(*(void *)(v4 + 48) + 56));
    API::WebsitePolicies::copy(v7, (API::WebsitePolicies **)buf);
    uint64_t v8 = *(void *)(v5 + 3488);
    *(void *)(v5 + 3488) = *(void *)buf;
    if (v8) {
      CFRelease(*(CFTypeRef *)(v8 + 8));
    }
    int v6 = *(CFTypeRef **)(*(void *)(a1 + 336) + 3488);
    if (v6)
    {
LABEL_6:
      CFRetain(v6[1]);
      uint64_t v9 = *(void *)(a1 + 336);
      *(unsigned char *)(v9 + 3417) = WebKit::WebPageProxy::effectiveContentModeAfterAdjustingPolicies((WebKit::WebPageProxy *)v4, (API::WebsitePolicies *)v6, (const WebCore::ResourceRequest *)(v9 + 232));
      CFRelease(v6[1]);
    }
  }
  uint64_t v10 = *(void *)(a1 + 336);
  BOOL v114 = *(unsigned char *)(a1 + 353) != 0;
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v113 = *(void *)(a1 + 16);
  int v12 = *(unsigned __int8 *)(a1 + 352);
  char v13 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(v4 + 32);
    uint64_t v15 = *(void *)(*(void *)(v4 + 256) + 136);
    if (v15) {
      LODWORD(v15) = *(_DWORD *)(v15 + 108);
    }
    uint64_t v16 = *(void *)(v14 + 760);
    uint64_t v17 = *(void *)(v14 + 1928);
    uint64_t v18 = *(void *)(v11 + 272);
    int v19 = *(unsigned __int8 *)(v11 + 441);
    if (v10) {
      uint64_t v20 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v20 = 0;
    }
    *(_DWORD *)buf = 134219776;
    *(void *)&buf[4] = v4;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v16;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&long long v120 = v17;
    WORD4(v120) = 1024;
    *(_DWORD *)((char *)&v120 + 10) = v15;
    HIWORD(v120) = 2048;
    uint64_t v121 = v18;
    __int16 v122 = 1024;
    int v123 = v19;
    __int16 v124 = 2048;
    *(void *)&long long v125 = v20;
    WORD4(v125) = 1024;
    *(_DWORD *)((char *)&v125 + 10) = a2;
    _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::receivedNavigationActionPolicyDecision: frameID=%llu, isMainFrame=%d, navigationID=%llu, policyAction=%u", buf, 0x46u);
  }
  uint64_t v21 = *(CFTypeRef **)(v4 + 312);
  CFRetain(v21[1]);
  uint64_t v117 = v21;
  uint64_t v24 = *(void *)(v10 + 3488);
  if (v24)
  {
    CFRetain(*(CFTypeRef *)(v24 + 8));
    uint64_t v25 = *(CFTypeRef **)(v24 + 144);
    if (v25) {
      BOOL v26 = v25 == v21;
    }
    else {
      BOOL v26 = 1;
    }
    char v27 = !v26;
    if (v26)
    {
      int v28 = v114;
    }
    else
    {
      CFRetain(v25[1]);
      uint64_t v117 = v25;
      CFRelease(v21[1]);
      int v28 = 1;
      uint64_t v21 = v25;
    }
    uint64_t v29 = *(void *)(v24 + 152);
    if (v29 && v29 != *(void *)(v4 + 280)) {
      int v28 = 1;
    }
    BOOL v114 = v28;
    CFRelease(*(CFTypeRef *)(v24 + 8));
  }
  else
  {
    char v27 = 0;
  }
  if (!*(unsigned char *)(v10 + 3416))
  {
    long long v30 = *(API::WebsitePolicies **)(v10 + 3488);
    if (!v30)
    {
      uint64_t v31 = (API::WebsitePolicies *)API::Object::newObject(0xB0uLL, 126);
      long long v30 = API::WebsitePolicies::WebsitePolicies(v31);
      uint64_t v32 = *(void *)(v10 + 3488);
      *(void *)(v10 + 3488) = v30;
      if (v32)
      {
        CFRelease(*(CFTypeRef *)(v32 + 8));
        long long v30 = *(API::WebsitePolicies **)(v10 + 3488);
      }
    }
    *((unsigned char *)v30 + 104) = 0;
    uint64_t v33 = (WTF::StringImpl **)*((void *)v30 + 14);
    *((void *)v30 + 14) = 0;
    if (v33) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v33, v22);
    }
  }
  uint64_t v34 = *(void *)(v10 + 3488);
  if (!v34 || *(unsigned char *)(v34 + 131) == 2)
  {
    uint64_t v35 = (WebCore::SecurityOriginData *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v10 + 232));
    WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness((uint64_t *)buf, v35, v36);
    int v37 = WebKit::WebDeviceOrientationAndMotionAccessController::cachedDeviceOrientationPermission((WebKit::WebDeviceOrientationAndMotionAccessController *)(v21 + 45), (const WebCore::SecurityOriginData *)buf);
    if (v120 != -1) {
      ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v120])(v138, buf);
    }
    if (v37 != 2)
    {
      uint64_t v38 = *(void *)(v10 + 3488);
      if (v38) {
        goto LABEL_43;
      }
      uint64_t v38 = API::Object::newObject(0xB0uLL, 126);
      int v39 = API::WebsitePolicies::WebsitePolicies((API::WebsitePolicies *)v38);
      uint64_t v40 = *(void *)(v10 + 3488);
      *(void *)(v10 + 3488) = v39;
      if (v40)
      {
        CFRelease(*(CFTypeRef *)(v40 + 8));
        uint64_t v38 = *(void *)(v10 + 3488);
      }
      if (v38)
      {
LABEL_43:
        CFRetain(*(CFTypeRef *)(v38 + 8));
        *(unsigned char *)(v38 + 131) = v37;
        CFRelease(*(CFTypeRef *)(v38 + 8));
      }
      else
      {
        MEMORY[0x83] = v37;
      }
    }
  }
  if (!a2)
  {
    uint64_t v41 = v11;
    uint64_t v42 = *(void *)(v4 + 272);
    {
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v42 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v23) & 1) != 0|| *(unsigned char *)(v11 + 441))
    {
      uint64_t v54 = *(void *)(v4 + 272);
      {
        WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v54 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key, v43)|| (*(unsigned char *)(*(void *)(a1 + 344) + 304) == 3 ? (char v56 = 1) : (char v56 = v27), (v56 & 1) != 0))
      {
        long long v57 = 0;
        char v58 = 0;
        uint64_t v59 = v113;
        goto LABEL_74;
      }
      uint64_t v72 = *(void *)(v10 + 496);
      if (v72
        && WebCore::MIMETypeRegistry::isWebArchiveMIMEType((WebCore::MIMETypeRegistry *)(v72 + 16), v55))
      {
        WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(*(void *)(v10 + 496) + 32));
LABEL_130:
        long long v94 = qword_1EB358050;
        if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v95 = *(void *)(v4 + 32);
          uint64_t v96 = *(void *)(v95 + 760);
          uint64_t v97 = *(void *)(v95 + 1928);
          uint64_t v98 = *(void *)(*(void *)(v4 + 256) + 136);
          if (v98) {
            LODWORD(v98) = *(_DWORD *)(v98 + 108);
          }
          *(_DWORD *)int v138 = 134218752;
          *(void *)&v138[4] = v4;
          *(_WORD *)&v138[12] = 2048;
          *(void *)&v138[14] = v96;
          *(_WORD *)&v138[22] = 2048;
          *(void *)&long long v139 = v97;
          WORD4(v139) = 1024;
          *(_DWORD *)((char *)&v139 + 10) = v98;
          _os_log_impl(&dword_1985F2000, v94, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::receivedNavigationActionPolicyDecision: Swapping in non-persistent websiteDataStore for web archive.", v138, 0x26u);
        }
        uint64_t v99 = *(void *)(v10 + 464);
        if (v99)
        {
          uint64_t v100 = *(void *)(v99 + 24);
          if (v100)
          {
            CFRetain(*(CFTypeRef *)(v100 + 8));
            CFRelease(*(CFTypeRef *)(v100 + 8));
            uint64_t v101 = *(CFTypeRef **)(*(void *)(v10 + 464) + 24);
            if (v101) {
              CFRetain(v101[1]);
            }
            CFRetain(v101[1]);
            uint64_t v102 = v117;
            uint64_t v117 = v101;
            uint64_t v41 = v11;
            if (v102) {
              CFRelease(v102[1]);
            }
            CFRelease(v101[1]);
            long long v57 = 0;
            char v58 = 1;
            goto LABEL_157;
          }
        }
        WebKit::WebsiteDataStore::createNonPersistent((WebKit::WebsiteDataStore **)v138);
        long long v57 = v117;
        uint64_t v41 = v11;
        if (v117)
        {
          CFRetain(v117[1]);
          uint64_t v117 = *(CFTypeRef **)v138;
          CFRelease(v57[1]);
        }
        else
        {
          uint64_t v117 = *(CFTypeRef **)v138;
        }
        uint64_t v59 = v113;
        char v58 = 1;
        goto LABEL_155;
      }
      uint64_t v88 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v10 + 232));
      v89 = *(_DWORD **)v88;
      if (*(void *)v88) {
        *v89 += 2;
      }
      *(void *)buf = v89;
      long long v90 = *(_OWORD *)(v88 + 24);
      *(_OWORD *)&buf[8] = *(_OWORD *)(v88 + 8);
      long long v120 = v90;
      if (WTF::URL::protocolIs())
      {
        WTF::URL::fileSystemPath((uint64_t *)v138, (WTF::URL *)buf);
        if (*(void *)v138)
        {
          int v92 = WTF::StringImpl::endsWith();
          v93 = *(WTF::StringImpl **)v138;
          *(void *)int v138 = 0;
          if (v93)
          {
            if (*(_DWORD *)v93 == 2)
            {
              WTF::StringImpl::destroy(v93, v91);
              if (v92) {
                goto LABEL_130;
              }
            }
            else
            {
              *(_DWORD *)v93 -= 2;
              if (v92) {
                goto LABEL_130;
              }
            }
          }
          else if (v92)
          {
            goto LABEL_130;
          }
        }
      }
      v107 = *(WebKit::WebsiteDataStore **)(v4 + 320);
      if (!v107)
      {
        char v58 = 0;
        long long v57 = 0;
LABEL_157:
        uint64_t v59 = v113;
LABEL_158:
        CFTypeRef v110 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v110)
        {
          if (*(_DWORD *)v110 == 2) {
            WTF::StringImpl::destroy(v110, v91);
          }
          else {
            *(_DWORD *)v110 -= 2;
          }
        }
LABEL_74:
        uint64_t v60 = (uint64_t *)WTF::URL::URL((uint64_t)v138, (WTF::StringImpl **)(*(void *)(v4 + 32) + 1032));
        uint64_t v61 = *(void *)(v4 + 1192);
        if (v61 && *(void *)(v61 + 88) == *(void *)(v10 + 16))
        {
          WTF::String::operator=(v60, (WTF::StringImpl **)(v61 + 312));
          long long v62 = *(_OWORD *)(v61 + 336);
          *(_OWORD *)&v138[8] = *(_OWORD *)(v61 + 320);
          long long v139 = v62;
        }
        uint64_t v63 = *(API::WebsitePolicies **)(v10 + 3488);
        if (v63 && *((unsigned char *)v63 + 161))
        {
          *(unsigned char *)(v4 + 1363) = 1;
        }
        else
        {
          BOOL isLockdownModeExplicitlySet = API::PageConfiguration::isLockdownModeExplicitlySet(*(API::PageConfiguration **)(v4 + 48));
          uint64_t v63 = *(API::WebsitePolicies **)(v10 + 3488);
          *(unsigned char *)(v4 + 1363) = isLockdownModeExplicitlySet;
          if (!v63)
          {
            BOOL v65 = API::PageConfiguration::lockdownModeEnabled(*(API::PageConfiguration **)(v4 + 48));
LABEL_105:
            unsigned int v73 = v65;
            *(void *)buf = v4;
            CFRetain(*(CFTypeRef *)(v4 + 8));
            *(void *)&buf[8] = v4;
            buf[16] = 0;
            CFRetain(*(CFTypeRef *)(v10 + 8));
            uint64_t v74 = *(void *)(a1 + 344);
            *(void *)(a1 + 344) = 0;
            *(void *)&long long v120 = v10;
            *((void *)&v120 + 1) = v74;
            uint64_t v75 = *(void *)(a1 + 328);
            *(void *)(a1 + 328) = 0;
            uint64_t v121 = v75;
            LOBYTE(v122) = v114;
            CFRetain(*(CFTypeRef *)(v41 + 8));
            *(void *)&long long v125 = v41;
            atomic_fetch_add((atomic_uint *volatile)(v59 + 16), 1u);
            LOBYTE(v126) = 0;
            char v128 = 0;
            int v76 = *(unsigned __int8 *)(a1 + 416);
            if (*(unsigned char *)(a1 + 416))
            {
              __int16 v126 = *(_WORD *)(a1 + 400);
              uint64_t v111 = *(void *)(a1 + 408);
              *(void *)(a1 + 408) = 0;
              uint64_t v127 = v111;
              char v128 = 1;
            }
            uint64_t v77 = a1 + 32;
            char v129 = v58;
            if (v57) {
              CFRetain(v57[1]);
            }
            long long v130 = v57;
            v78 = (void *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(v4 + 48) + 24));
            uint64_t v79 = WTF::fastMalloc((WTF *)0x78);
            *(void *)uint64_t v79 = &unk_1EE9DA630;
            *(void *)(v79 + 8) = *(void *)buf;
            uint64_t v80 = *(void *)&buf[8];
            *(void *)&buf[8] = 0;
            *(void *)(v79 + 16) = v80;
            *(unsigned char *)(v79 + 24) = buf[16];
            *(void *)(v79 + 32) = v120;
            uint64_t v81 = *((void *)&v120 + 1);
            long long v120 = 0u;
            *(void *)(v79 + 40) = v81;
            uint64_t v82 = v121;
            uint64_t v121 = 0;
            *(void *)(v79 + 48) = v82;
            *(unsigned char *)(v79 + 56) = v122;
            *(void *)(v79 + 64) = v125;
            *(void *)(v79 + 72) = v59;
            long long v125 = 0u;
            *(unsigned char *)(v79 + 80) = 0;
            *(unsigned char *)(v79 + 96) = 0;
            if (v76)
            {
              *(_WORD *)(v79 + 80) = v126;
              uint64_t v112 = v127;
              uint64_t v127 = 0;
              *(void *)(v79 + 88) = v112;
              *(unsigned char *)(v79 + 96) = 1;
            }
            *(unsigned char *)(v79 + 104) = v58;
            long long v130 = 0;
            *(void *)(v79 + 112) = v57;
            int v115 = (const char **)v79;
            WebKit::WebProcessPool::processForNavigation(v78, v4, v41, v10, (uint64_t)v138, v114, v73, v77, (WebKit::WebsiteDataStore **)&v117, (uint64_t *)&v115);
            uint64_t v84 = v115;
            int v115 = 0;
            if (v84) {
              (*((void (**)(const char **))*v84 + 1))(v84);
            }
            WebKit::WebPageProxy::receivedNavigationActionPolicyDecision(WebKit::WebProcessProxy &,WebCore::PolicyAction,API::Navigation *,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<API::NavigationAction>,WTF::DefaultRefDerefTraits<API::NavigationAction>> &&,WebKit::ProcessSwapRequestedByClient,WebKit::WebFrameProxy &,WebKit::FrameInfoData const&,WebKit::WasNavigationIntercepted,WTF::URL const&,std::optional<WebKit::PolicyDecisionConsoleMessage> &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0((uint64_t)buf, v83);
            CFTypeRef v86 = *(WTF::StringImpl **)v138;
            *(void *)int v138 = 0;
            if (v86)
            {
              if (*(_DWORD *)v86 == 2)
              {
                WTF::StringImpl::destroy(v86, v85);
                if (!v57) {
                  goto LABEL_118;
                }
LABEL_117:
                CFRelease(v57[1]);
                goto LABEL_118;
              }
              *(_DWORD *)v86 -= 2;
            }
            if (!v57) {
              goto LABEL_118;
            }
            goto LABEL_117;
          }
        }
        BOOL v65 = API::WebsitePolicies::lockdownModeEnabled(v63);
        goto LABEL_105;
      }
      *(void *)(v4 + 320) = 0;
      __int16 v108 = v117;
      uint64_t v117 = (CFTypeRef *)v107;
      uint64_t v59 = v113;
      if (v108)
      {
        CFRelease(v108[1]);
        uint64_t v109 = *(void *)(v4 + 320);
        *(void *)(v4 + 320) = 0;
        if (v109) {
          CFRelease(*(CFTypeRef *)(v109 + 8));
        }
      }
      char v58 = 0;
      long long v57 = 0;
LABEL_155:
      BOOL v114 = 1;
      goto LABEL_158;
    }
  }
  uint64_t v44 = *(void *)(*(void *)(v4 + 32) + 1008);
  uint64_t v45 = *(void *)(v10 + 3488);
  if (v45)
  {
    CFRetain(*(CFTypeRef *)(v45 + 8));
    CFRetain(*(CFTypeRef *)(v45 + 8));
  }
  *(void *)buf = v45;
  LOBYTE(v115) = 0;
  char v116 = 0;
  WebKit::WebPageProxy::receivedPolicyDecision(v4, a2, v10, (API::WebsitePolicies **)buf, (const String **)(a1 + 344), 0, (uint64_t)&v115, (__int16 *)(a1 + 400), (uint64_t *)(a1 + 328));
  if (v116)
  {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v115);
    if (!v45) {
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  if (v45)
  {
LABEL_53:
    CFRelease(*(CFTypeRef *)(v45 + 8));
    CFRelease(*(CFTypeRef *)(v45 + 8));
  }
LABEL_54:
  if (a2 == 2 && v12 && v44 && *(void *)(v10 + 16) == v44)
  {
    uint64_t v46 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_ERROR))
    {
      uint64_t v103 = *(void *)(v4 + 32);
      uint64_t v104 = *(void *)(v103 + 760);
      uint64_t v105 = *(void *)(v103 + 1928);
      uint64_t v106 = *(void *)(*(void *)(v4 + 256) + 136);
      if (v106) {
        LODWORD(v106) = *(_DWORD *)(v106 + 108);
      }
      *(_DWORD *)buf = 134218752;
      *(void *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v104;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&long long v120 = v105;
      WORD4(v120) = 1024;
      *(_DWORD *)((char *)&v120 + 10) = v106;
      _os_log_error_impl(&dword_1985F2000, v46, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::receivedNavigationActionPolicyDecision: Failing navigation because decision was intercepted and policy action is Ignore.", buf, 0x26u);
    }
    uint64_t v47 = (const String *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v10 + 232));
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)buf, v47, 0);
    CFTypeRef cf = 0;
    WebKit::cancelledError((WebKit *)buf, (uint64_t)v138);
    CFTypeRef v48 = cf;
    CFTypeRef cf = 0;
    if (v48) {
      CFRelease(v48);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
    WebCore::ResourceErrorBase::setType();
    uint64_t v49 = *(void *)(v4 + 72);
    *(_WORD *)buf = *(_WORD *)(a1 + 32);
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&buf[8], (const String *)(a1 + 40));
    v133[0] = 0;
    int v134 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v133, a1 + 240);
    uint64_t v50 = *(WTF::StringImpl **)(a1 + 272);
    if (v50) {
      *(_DWORD *)v50 += 2;
    }
    __int16 v135 = v50;
    long long v51 = *(_OWORD *)(a1 + 280);
    v137[0] = *(_OWORD *)(a1 + 296);
    *(_OWORD *)((char *)v137 + 14) = *(_OWORD *)(a1 + 310);
    long long v136 = v51;
    (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t, unsigned char *, void))(*(void *)v49 + 64))(v49, v4, buf, v10, a1 + 360, v138, 0);
    uint64_t v53 = v135;
    __int16 v135 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2) {
        WTF::StringImpl::destroy(v53, v52);
      }
      else {
        *(_DWORD *)v53 -= 2;
      }
    }
    if (v134 != -1) {
      ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v134])(&v118, v133);
    }
    int v134 = -1;
    CFTypeRef v66 = v132;
    CFTypeRef v132 = 0;
    if (v66) {
      CFRelease(v66);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[8]);
    uint64_t v68 = v141;
    v141 = 0;
    if (v68) {
      CFRelease(v68);
    }
    uint64_t v69 = v140;
    long long v140 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2) {
        WTF::StringImpl::destroy(v69, v67);
      }
      else {
        *(_DWORD *)v69 -= 2;
      }
    }
    uint64_t v70 = *(WTF::StringImpl **)&v138[8];
    *(void *)&v138[8] = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2) {
        WTF::StringImpl::destroy(v70, v67);
      }
      else {
        *(_DWORD *)v70 -= 2;
      }
    }
    uint64_t v71 = *(WTF::StringImpl **)v138;
    *(void *)int v138 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2) {
        WTF::StringImpl::destroy(v71, v67);
      }
      else {
        *(_DWORD *)v71 -= 2;
      }
    }
  }
LABEL_118:
  uint64_t v87 = v117;
  uint64_t v117 = 0;
  if (v87) {
    CFRelease(v87[1]);
  }
}

uint64_t WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::WasNavigationIntercepted(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = a2 + 32;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v8 = a1 + 32;
  WTF::URL::URL(a1 + 40, (uint64_t *)(a2 + 40));
  WTF::URL::URL(a1 + 80, (uint64_t *)(v7 + 48));
  *(void *)(a1 + 120) = *(void *)(v7 + 88);
  uint64_t v9 = *(void *)(v7 + 96);
  *(void *)(v7 + 96) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = v9;
  uint64_t v10 = *(void *)(v7 + 104);
  *(void *)(v7 + 104) = 0;
  *(void *)(a1 + 136) = v10;
  LODWORD(v10) = *(_DWORD *)(v7 + 112);
  *(_DWORD *)(v7 + 112) = 0;
  *(_DWORD *)(a1 + 144) = v10;
  LODWORD(v10) = *(_DWORD *)(v7 + 116);
  *(_DWORD *)(v7 + 116) = 0;
  *(_DWORD *)(a1 + 148) = v10;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  uint64_t v11 = *(void *)(v7 + 120);
  *(void *)(v7 + 120) = 0;
  *(void *)(a1 + 152) = v11;
  LODWORD(v11) = *(_DWORD *)(v7 + 128);
  *(_DWORD *)(v7 + 128) = 0;
  *(_DWORD *)(a1 + 160) = v11;
  LODWORD(v11) = *(_DWORD *)(v7 + 132);
  *(_DWORD *)(v7 + 132) = 0;
  *(_DWORD *)(a1 + 164) = v11;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  uint64_t v12 = *(void *)(v7 + 136);
  *(void *)(v7 + 136) = 0;
  *(void *)(a1 + 168) = v12;
  LODWORD(v12) = *(_DWORD *)(v7 + 144);
  *(_DWORD *)(v7 + 144) = 0;
  *(_DWORD *)(a1 + 176) = v12;
  LODWORD(v12) = *(_DWORD *)(v7 + 148);
  *(_DWORD *)(v7 + 148) = 0;
  *(_DWORD *)(a1 + 180) = v12;
  LODWORD(v12) = *(_DWORD *)(v7 + 152);
  *(unsigned char *)(a1 + 188) = *(unsigned char *)(v7 + 156);
  *(_DWORD *)(a1 + 184) = v12;
  uint64_t v13 = *(void *)(v7 + 160);
  *(void *)(v7 + 160) = 0;
  *(void *)(a1 + 192) = v13;
  uint64_t v14 = *(void *)(v7 + 168);
  *(void *)(v7 + 168) = 0;
  *(void *)(a1 + 200) = v14;
  uint64_t v15 = *(void *)(v7 + 176);
  *(void *)(v7 + 176) = 0;
  *(void *)(a1 + 208) = v15;
  uint64_t v16 = *(void *)(v7 + 184);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(v7 + 192);
  *(void *)(a1 + 216) = v16;
  uint64_t v17 = *(void *)(v7 + 200);
  *(void *)(v7 + 200) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  *(void *)(a1 + 232) = v17;
  *(_DWORD *)(a1 + 264) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1 + 240, v7 + 208);
  uint64_t v18 = *(void *)(v7 + 240);
  *(void *)(v7 + 240) = 0;
  *(void *)(a1 + 272) = v18;
  long long v19 = *(_OWORD *)(v7 + 248);
  long long v20 = *(_OWORD *)(v7 + 264);
  *(_OWORD *)(v8 + 278) = *(_OWORD *)(v7 + 278);
  *(_OWORD *)(v8 + 264) = v20;
  *(_OWORD *)(v8 + 248) = v19;
  uint64_t v21 = *(void *)(v7 + 296);
  *(void *)(v7 + 296) = 0;
  *(void *)(a1 + 328) = v21;
  uint64_t v22 = *(void *)(v7 + 304);
  *(void *)(v7 + 304) = 0;
  *(void *)(a1 + 336) = v22;
  uint64_t v23 = *(void *)(v7 + 312);
  *(void *)(v7 + 312) = 0;
  *(void *)(a1 + 344) = v23;
  *(_WORD *)(a1 + 352) = *(_WORD *)(v7 + 320);
  WTF::URL::URL(a1 + 360, (uint64_t *)(v7 + 328));
  *(unsigned char *)(a1 + 400) = 0;
  *(unsigned char *)(a1 + 416) = 0;
  if (*(unsigned char *)(v7 + 384))
  {
    *(_WORD *)(a1 + 400) = *(_WORD *)(a2 + 400);
    uint64_t v25 = *(void *)(a2 + 408);
    *(void *)(a2 + 408) = 0;
    *(void *)(a1 + 408) = v25;
    *(unsigned char *)(a1 + 416) = 1;
  }
  return a1;
}

uint64_t WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::~WasNavigationIntercepted(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 416))
  {
    uint64_t v14 = *(WTF::StringImpl **)(a1 + 408);
    *(void *)(a1 + 408) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, a2);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 360);
  *(void *)(a1 + 360) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(void *)(a1 + 344);
  *(void *)(a1 + 344) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = *(void *)(a1 + 336);
  *(void *)(a1 + 336) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  uint64_t v6 = *(void *)(a1 + 328);
  *(void *)(a1 + 328) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(WTF::StringImpl **)(a1 + 272);
  *(void *)(a1 + 272) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = *(unsigned int *)(a1 + 264);
  if (v8 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v8])(&v15, a1 + 240);
  }
  *(_DWORD *)(a1 + 264) = -1;
  uint64_t v9 = *(const void **)(a1 + 232);
  *(void *)(a1 + 232) = 0;
  if (v9) {
    CFRelease(v9);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 40));
  uint64_t v10 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v10) {
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v11) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v11 + 16));
  }
  uint64_t v12 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v12) {
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  return a1;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy31decidePolicyForNavigationActionEONS_3RefINS2_15WebProcessProxyENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEERNS2_13WebFrameProxyEONS2_20NavigationActionDataEONS_17CompletionHandlerIFvONS2_14PolicyDecisionEEEEEN3__0clEN7WebCore12PolicyActionEPN3API15WebsitePoliciesENS2_28ProcessSwapRequestedByClientEONS_6RefPtrINS2_15BrowsingWarningENS6_ISU_EENS8_ISU_EEEENSt3__18optionalINS2_26NavigatingToAppBoundDomainEEENS2_24WasNavigationInterceptedEEUlOT_E_vJONSZ_7variantIJNS2_18ContinueUnsafeLoadENS_3URLEEEEEED1Ev(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DAE88;
  uint64_t v3 = a1[57];
  a1[57] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 1600))(v3);
  }
  WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::~WasNavigationIntercepted((uint64_t)(a1 + 3), a2);
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy31decidePolicyForNavigationActionEONS_3RefINS2_15WebProcessProxyENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEERNS2_13WebFrameProxyEONS2_20NavigationActionDataEONS_17CompletionHandlerIFvONS2_14PolicyDecisionEEEEEN3__0clEN7WebCore12PolicyActionEPN3API15WebsitePoliciesENS2_28ProcessSwapRequestedByClientEONS_6RefPtrINS2_15BrowsingWarningENS6_ISU_EENS8_ISU_EEEENSt3__18optionalINS2_26NavigatingToAppBoundDomainEEENS2_24WasNavigationInterceptedEEUlOT_E_vJONSZ_7variantIJNS2_18ContinueUnsafeLoadENS_3URLEEEEEED0Ev(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9DAE88;
  uint64_t v3 = *((void *)a1 + 57);
  *((void *)a1 + 57) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 1600))(v3);
  }
  WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::~WasNavigationIntercepted((uint64_t)a1 + 24, a2);
  uint64_t v5 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(a1, v4);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy31decidePolicyForNavigationActionEONS_3RefINS2_15WebProcessProxyENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEERNS2_13WebFrameProxyEONS2_20NavigationActionDataEONS_17CompletionHandlerIFvONS2_14PolicyDecisionEEEEEN3__0clEN7WebCore12PolicyActionEPN3API15WebsitePoliciesENS2_28ProcessSwapRequestedByClientEONS_6RefPtrINS2_15BrowsingWarningENS6_ISU_EENS8_ISU_EEEENSt3__18optionalINS2_26NavigatingToAppBoundDomainEEENS2_24WasNavigationInterceptedEEUlOT_E_vJONSZ_7variantIJNS2_18ContinueUnsafeLoadENS_3URLEEEEEE4callES1B_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 32);
  uint64_t v6 = *(void *)(*(void *)(v5 + 992) + 8);
  if (v6)
  {
    uint64_t v7 = v6 - 16;
    CFRetain(*(CFTypeRef *)(v6 - 8));
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void *)(v4 + 32);
  v18[0] = v7;
  v18[1] = v5 + 976;
  ++*(_DWORD *)(v5 + 1348);
  *(unsigned char *)(v5 + 1344) = 1;
  v19[0] = 0;
  WTF::String::operator=((uint64_t *)(v8 + 1256), v19);
  uint64_t v10 = v19[0];
  v19[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  int v11 = *(_DWORD *)(a2 + 40);
  if (v11 == 1)
  {
    WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::operator()(a1 + 24, (WTF::StringImpl *)2);
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v19, (const String *)a2, 0);
    CFTypeRef cf = 0;
    WebKit::WebPageProxy::loadRequest(v4, (WebCore::ResourceRequestBase *)v19, 1, 0, 0, &v21);
    if (v21) {
      CFRelease(*(CFTypeRef *)(v21 + 8));
    }
    CFTypeRef v14 = cf;
    CFTypeRef cf = 0;
    if (v14) {
      CFRelease(v14);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v19);
    goto LABEL_20;
  }
  if (!v11)
  {
    if (*(unsigned char *)a2)
    {
      uint64_t v12 = *(unsigned __int8 *)(a1 + 448);
      uint64_t v13 = a1 + 24;
    }
    else
    {
      if (!*(unsigned char *)(v4 + 1121)) {
        (*(void (**)(void, void))(**(void **)(v4 + 104) + 64))(*(void *)(v4 + 104), *(void *)(a1 + 16));
      }
      uint64_t v13 = a1 + 24;
      uint64_t v12 = 2;
    }
    WebKit::WebPageProxy::decidePolicyForNavigationAction(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebFrameProxy &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::operator()(WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted)::{lambda(WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &)#1}::operator()(v13, (WTF::StringImpl *)v12);
LABEL_20:
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v18, v15, v16);
    return;
  }
  uint64_t v17 = std::__throw_bad_variant_access[abi:sn180100]();
  WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::CompletionHandler>::~CallableWrapper(v17);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::CompletionHandler>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9DAEB0;
  WTF::Ref<WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::PolicyDecisionSender,WTF::RawPtrTraits<void ()(WebKit::PolicyDecision &&)>,WTF::DefaultRefDerefTraits<void ()(WebKit::PolicyDecision &&)>>::~Ref((WTF **)(a1 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::CompletionHandler>::~CallableWrapper(WTF **a1, void *a2)
{
  *a1 = (WTF *)&unk_1EE9DAEB0;
  WTF::Ref<WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::PolicyDecisionSender,WTF::RawPtrTraits<void ()(WebKit::PolicyDecision &&)>,WTF::DefaultRefDerefTraits<void ()(WebKit::PolicyDecision &&)>>::~Ref(a1 + 1, a2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::CompletionHandler>::call(uint64_t a1)
{
  return WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::PolicyDecisionSender::send(*(void *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNewWindowAction(IPC::Connection &,WebKit::NavigationActionData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies *>,WTF::DefaultRefDerefTraits<API::WebsitePolicies *>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DAED8;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNewWindowAction(IPC::Connection &,WebKit::NavigationActionData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies *>,WTF::DefaultRefDerefTraits<API::WebsitePolicies *>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DAED8;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForNewWindowAction(IPC::Connection &,WebKit::NavigationActionData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WebCore::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies *>,WTF::DefaultRefDerefTraits<API::WebsitePolicies *>> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted>::call(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, int a4)
{
  if (a4)
  {
    __break(0xC471u);
    JUMPOUT(0x198EB414CLL);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  int v11 = 0;
  LOBYTE(v9) = 0;
  char v10 = 0;
  LOBYTE(v6) = 0;
  char v8 = 0;
  WebKit::WebPageProxy::receivedPolicyDecision(v4, a2, 0, &v11, (const String **)(a1 + 32), 0, (uint64_t)&v9, &v6, (uint64_t *)(a1 + 24));
  if (v8 && v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  if (v10) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v9);
  }
}

void API::NavigationResponse::~NavigationResponse(API::NavigationResponse *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 61);
  *((void *)this + 61) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (const void *)*((void *)this + 58);
  *((void *)this + 58) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((API::NavigationResponse *)((char *)this + 224), a2);
  uint64_t v5 = (const void *)*((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::NavigationResponse *)((char *)this + 24));
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
}

{
  WTF::StringImpl *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t vars8;

  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 61);
  *((void *)this + 61) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (const void *)*((void *)this + 58);
  *((void *)this + 58) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((API::NavigationResponse *)((char *)this + 224), a2);
  uint64_t v5 = (const void *)*((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::NavigationResponse *)((char *)this + 24));
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)79>::type()
{
  return 79;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForResponseShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::FrameInfoData &&,std::optional<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&<WTF::ObjectIdentifierGeneric::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>>,WTF::ObjectIdentifierGeneric::ResourceResponse const&,WTF::ObjectIdentifierGeneric::ResourceRequest const&,BOOL,WTF::String const&,BOOL,WTF::ObjectIdentifierGeneric::CrossOriginOpenerPolicyValue,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::ObjectIdentifierGeneric::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,WebKit::FrameInfoData &&<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DAF28;
  WebKit::WebPageProxy::decidePolicyForResponseShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::FrameInfoData &&,std::optional<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&<WTF::ObjectIdentifierGeneric::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>>,WTF::ObjectIdentifierGeneric::ResourceResponse const&,WTF::ObjectIdentifierGeneric::ResourceRequest const&,BOOL,WTF::String const&,BOOL,WTF::ObjectIdentifierGeneric::CrossOriginOpenerPolicyValue,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForResponseShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::FrameInfoData &&,std::optional<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&<WTF::ObjectIdentifierGeneric::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>>,WTF::ObjectIdentifierGeneric::ResourceResponse const&,WTF::ObjectIdentifierGeneric::ResourceRequest const&,BOOL,WTF::String const&,BOOL,WTF::ObjectIdentifierGeneric::CrossOriginOpenerPolicyValue,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::ObjectIdentifierGeneric::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,WebKit::FrameInfoData &&<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9DAF28;
  WebKit::WebPageProxy::decidePolicyForResponseShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::FrameInfoData &&,std::optional<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&<WTF::ObjectIdentifierGeneric::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>>,WTF::ObjectIdentifierGeneric::ResourceResponse const&,WTF::ObjectIdentifierGeneric::ResourceRequest const&,BOOL,WTF::String const&,BOOL,WTF::ObjectIdentifierGeneric::CrossOriginOpenerPolicyValue,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0::~$_0((void *)a1 + 1);

  return WTF::fastFree(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::decidePolicyForResponseShared(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::FrameInfoData &&,std::optional<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&<WTF::ObjectIdentifierGeneric::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>>,WTF::ObjectIdentifierGeneric::ResourceResponse const&,WTF::ObjectIdentifierGeneric::ResourceRequest const&,BOOL,WTF::String const&,BOOL,WTF::ObjectIdentifierGeneric::CrossOriginOpenerPolicyValue,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)::$_0,void,WTF::ObjectIdentifierGeneric::PolicyAction,API::WebsitePolicies *,WebKit::ProcessSwapRequestedByClient,WTF::RefPtr<WebKit::BrowsingWarning,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,WebKit::FrameInfoData &&<WebKit::NavigatingToAppBoundDomain>,WebKit::WasNavigationIntercepted>::call(const String *a1, WTF::StringImpl *a2, uint64_t a3, int a4)
{
  v76[7] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  if (a4)
  {
    __break(0xC471u);
    JUMPOUT(0x198EB49ECLL);
  }
  uint64_t v4 = (const char ***)a2;
  m_ptr = a1[1].m_impl.m_ptr;
  if (!a2)
  {
    if (*((unsigned char *)a1[5].m_impl.m_ptr + 779))
    {
      uint64_t v7 = (WebCore::MIMETypeRegistry *)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)((char *)a1[6].m_impl.m_ptr + 224));
      if ((WebCore::MIMETypeRegistry::isPDFMIMEType(v7, v8) & 1) != 0
        || (uint64_t v9 = (WebCore::MIMETypeRegistry *)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)((char *)a1[6].m_impl.m_ptr + 224)),
            (WebCore::MIMETypeRegistry::isSupportedModelMIMEType(v9, v10) & 1) != 0)
        || (int v11 = (WebCore::PreviewConverter *)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)((char *)a1[6].m_impl.m_ptr + 224)),
            (WebCore::PreviewConverter::supportsMIMEType(v11, v12) & 1) != 0))
      {
        LODWORD(v4) = 1;
        goto LABEL_16;
      }
    }
    uint64_t v13 = (WebCore::PreviewConverter *)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)((char *)a1[6].m_impl.m_ptr + 224));
    if (WebCore::PreviewConverter::supportsMIMEType(v13, v14))
    {
      uint64_t v15 = *(void *)(*((void *)m_ptr + 32) + 144);
      if (v15)
      {
        uint64_t v16 = *(WTF::StringImpl **)(v15 + 352);
        if (v16)
        {
          xpc_connection_get_audit_token();
          int v17 = sandbox_enable_state_flag();
          uint64_t v18 = qword_1EB358488;
          LODWORD(v4) = 0;
          if (!os_log_type_enabled((os_log_t)qword_1EB358488, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_16;
          }
          uint64_t v19 = *((void *)m_ptr + 4);
          uint64_t v20 = *(void *)(v19 + 760);
          unint64_t v21 = *(void *)(v19 + 1928);
          uint64_t v22 = *(void *)(*((void *)m_ptr + 32) + 136);
          if (v22) {
            LODWORD(v22) = *(_DWORD *)(v22 + 108);
          }
          *(_DWORD *)buf = 134219008;
          *(void *)&buf[4] = m_ptr;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v20;
          __int16 v62 = 2048;
          unint64_t v63 = v21;
          __int16 v64 = 1024;
          int v65 = v22;
          __int16 v66 = 1024;
          v67[0] = v17;
          _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::Enabling EnableQuickLookSandboxResources state flag, status = %d", buf, 0x2Cu);
          goto LABEL_15;
        }
      }
      else
      {
        a2 = (WTF::StringImpl *)"/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/AuxiliaryProcessProxy.h";
        uint64_t v16 = (WTF::StringImpl *)130;
        __break(0xC471u);
      }
      __break(1u);
      goto LABEL_85;
    }
LABEL_15:
    LODWORD(v4) = 0;
  }
LABEL_16:
  if (!*((unsigned char *)m_ptr + 801) && *((unsigned char *)m_ptr + 800))
  {
    uint64_t v25 = a1[4].m_impl.m_ptr;
    unint64_t v26 = *((void *)m_ptr + 4);
    uint64_t v27 = *(void *)(*(void *)(v26 + 992) + 8);
    if (v27)
    {
      uint64_t v28 = v27 - 16;
      CFRetain(*(CFTypeRef *)(v27 - 8));
    }
    else
    {
      uint64_t v28 = 0;
    }
    v59[0] = v28;
    v59[1] = v26 + 976;
    ++*(_DWORD *)(v26 + 1348);
    if (v4 == 2 && v25)
    {
      uint64_t v29 = (void *)*((void *)m_ptr + 4);
      uint64_t v30 = v29[126];
      if (v30) {
        BOOL v31 = *((void *)v25 + 2) == v30;
      }
      else {
        BOOL v31 = 0;
      }
      if (v31)
      {
        *(unsigned char *)(v26 + 1344) = 1;
        v29[147] = 0;
        uint64_t v32 = (WTF::StringImpl *)v29[148];
        v29[148] = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2) {
            WTF::StringImpl::destroy(v32, a2);
          }
          else {
            *(_DWORD *)v32 -= 2;
          }
        }
      }
      unsigned __int8 v37 = 0;
      char v36 = 0;
      *(_WORD *)buf = *((_WORD *)m_ptr + 664);
      buf[2] = 2;
    }
    else
    {
      if (v4 == 1)
      {
        uint64_t v33 = *(void *)(*((void *)m_ptr + 32) + 512);
        if (v33)
        {
          uint64_t v34 = *(void *)(v33 + 8);
          if (v34) {
            uint64_t v35 = (WebKit::WebProcessPool *)(v34 - 16);
          }
          else {
            uint64_t v35 = 0;
          }
        }
        else
        {
          uint64_t v35 = 0;
        }
        uint64_t v38 = (WebKit::WebsiteDataStore *)*((void *)m_ptr + 39);
        if (v25)
        {
          *(_WORD *)buf = *((_WORD *)v25 + 1544);
          WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&buf[8], (const String *)v25 + 387);
          LOBYTE(v74) = 0;
          DWORD2(v75) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v74, (uint64_t)v25 + 3296);
          int v39 = (WTF::StringImpl *)*((void *)v25 + 416);
          if (v39) {
            *(_DWORD *)v39 += 2;
          }
          v76[0] = v39;
          long long v40 = *(_OWORD *)((char *)v25 + 3336);
          *(_OWORD *)&v76[3] = *(_OWORD *)((char *)v25 + 3352);
          *(_OWORD *)((char *)&v76[4] + 6) = *(_OWORD *)((char *)v25 + 3366);
          *(_OWORD *)&v76[1] = v40;
        }
        else
        {
          *(_WORD *)buf = 0;
          WebCore::ResourceRequest::ResourceRequest((StringImpl *)&buf[8]);
          LOBYTE(v76[5]) = 0;
          LODWORD(v76[6]) = 0;
          WORD2(v76[6]) = 0;
          long long v74 = 0u;
          long long v75 = 0u;
          memset(v76, 0, 25);
        }
        WebKit::WebProcessPool::createDownloadProxy(v35, v38, a1 + 7, (WebKit::WebPageProxy *)m_ptr, (const WebKit::FrameInfoData *)buf, (uint64_t)&v58);
        uint64_t v42 = v76[0];
        v76[0] = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2) {
            WTF::StringImpl::destroy(v42, v41);
          }
          else {
            *(_DWORD *)v42 -= 2;
          }
        }
        if (DWORD2(v75) != -1) {
          ((void (*)(char *, long long *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[DWORD2(v75)])(&v60, &v74);
        }
        DWORD2(v75) = -1;
        CFTypeRef v43 = cf;
        CFTypeRef cf = 0;
        if (v43) {
          CFRelease(v43);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[8]);
        uint64_t v44 = v58;
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)m_ptr + 6, (uint64_t)m_ptr + 16);
        uint64_t v45 = (atomic_uint *)*((void *)m_ptr + 3);
        if (v45) {
          atomic_fetch_add(v45, 1u);
        }
        uint64_t v46 = a1[6].m_impl.m_ptr;
        a1[6].m_impl.m_ptr = 0;
        uint64_t v47 = (void *)WTF::fastMalloc((WTF *)0x20);
        *uint64_t v47 = &unk_1EE9DA6A8;
        v47[1] = m_ptr;
        v47[2] = v45;
        v47[3] = v46;
        uint64_t v48 = *(void *)(v44 + 328);
        *(void *)(v44 + 328) = v47;
        if (v48) {
          (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
        }
        if (v25)
        {
          uint64_t v49 = v58;
          *(unsigned char *)(v58 + 312) = *((unsigned char *)v25 + 536);
          *(void *)buf = *((void *)v25 + 56);
          uint64_t v50 = *((void *)v25 + 57);
          *((void *)v25 + 56) = 0;
          *((void *)v25 + 57) = 0;
          *(void *)&buf[8] = v50;
          WebKit::DownloadProxy::setRedirectChain(v49, (WTF::StringImpl *)buf);
          WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v51);
        }
        uint64_t v52 = v58;
        unint64_t v53 = *(void *)(v58 + 56);
        unint64_t v26 = v53 >> 8;
        uint64_t v58 = 0;
        CFRelease(*(CFTypeRef *)(v52 + 8));
        char v36 = 1;
        unsigned __int8 v37 = v53;
      }
      else
      {
        char v36 = 0;
        unsigned __int8 v37 = 0;
      }
      *(_WORD *)buf = *((_WORD *)m_ptr + 664);
      buf[2] = (_BYTE)v4;
      if (!v25)
      {
        char v54 = 0;
        buf[8] = 0;
        goto LABEL_66;
      }
    }
    *(void *)&buf[8] = *((void *)v25 + 2);
    char v54 = 1;
LABEL_66:
    buf[16] = v54;
    unint64_t v63 = v37 | (v26 << 8);
    LOBYTE(v64) = v36;
    uint64_t v4 = (const char ***)buf;
    LOBYTE(v67[0]) = 0;
    char v68 = 0;
    LOBYTE(v69) = 0;
    char v70 = 0;
    char v71 = 0;
    LOBYTE(cf) = 0;
    long long v55 = a1[3].m_impl.m_ptr;
    a1[3].m_impl.m_ptr = 0;
    (*(void (**)(StringImpl *, unsigned char *))(*(void *)v55 + 16))(v55, buf);
    (*(void (**)(StringImpl *))(*(void *)v55 + 8))(v55);
    if (!(_BYTE)cf) {
      goto LABEL_67;
    }
    uint64_t v16 = v72;
    uint64_t v72 = 0;
    if (!v16) {
      goto LABEL_67;
    }
    if (*(_DWORD *)v16 != 2)
    {
      *(_DWORD *)v16 -= 2;
LABEL_67:
      if (v70) {
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v4 + 21);
      }
      if (v68) {
        WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(v4 + 5), a2);
      }
      WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v59, (uint64_t)a2, v56);
      return;
    }
LABEL_85:
    WTF::StringImpl::destroy(v16, a2);
    goto LABEL_67;
  }
  *(_WORD *)buf = 0;
  buf[2] = 2;
  buf[8] = 0;
  buf[16] = 0;
  LOBYTE(v63) = 0;
  LOBYTE(v64) = 0;
  LOBYTE(v67[0]) = 0;
  char v68 = 0;
  LOBYTE(v69) = 0;
  char v70 = 0;
  char v71 = 0;
  LOBYTE(cf) = 0;
  uint64_t v23 = a1[3].m_impl.m_ptr;
  a1[3].m_impl.m_ptr = 0;
  (*(void (**)(StringImpl *, unsigned char *))(*(void *)v23 + 16))(v23, buf);
  (*(void (**)(StringImpl *))(*(void *)v23 + 8))(v23);
  if ((_BYTE)cf)
  {
    long long v57 = v72;
    uint64_t v72 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2) {
        WTF::StringImpl::destroy(v57, v24);
      }
      else {
        *(_DWORD *)v57 -= 2;
      }
    }
  }
  if (v70) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v69);
  }
  if (v68) {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v67, v24);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::triggerBrowsingContextGroupSwitchForNavigation(WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::BrowsingContextGroupSwitchDecision,WebCore::RegistrableDomain const&,WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DAF50;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)v2;
    uint64_t v4 = *(void *)(v2 + 8) - 1;
    *(void *)(v2 + 8) = v4;
    if (v3)
    {
      uint64_t v5 = *v3;
      if (!*v3) {
        goto LABEL_8;
      }
      char v6 = *(unsigned char *)(v2 + 16);
      *(unsigned char *)(v2 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
      *(unsigned char *)(v2 + 16) = v6;
      if (*(void *)v2) {
        goto LABEL_8;
      }
      uint64_t v4 = *(void *)(v2 + 8);
    }
    if (!v4) {
      MEMORY[0x199740C10](v2, 0x1020C40545B2139);
    }
  }
LABEL_8:
  uint64_t v7 = a1[4];
  a1[4] = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
  }
  uint64_t v8 = a1[3];
  a1[3] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = a1[2];
  a1[2] = 0;
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::triggerBrowsingContextGroupSwitchForNavigation(WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::BrowsingContextGroupSwitchDecision,WebCore::RegistrableDomain const&,WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v1 = (WTF *)WTF::Detail::CallableWrapper<WebKit::WebPageProxy::triggerBrowsingContextGroupSwitchForNavigation(WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::BrowsingContextGroupSwitchDecision,WebCore::RegistrableDomain const&,WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(a1);

  return WTF::fastFree(v1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::triggerBrowsingContextGroupSwitchForNavigation(WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::BrowsingContextGroupSwitchDecision,WebCore::RegistrableDomain const&,WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(v2[20] + 8), *(void *)(a1 + 56));
  uint64_t v4 = v3;
  if (v3 && (CFRetain(*(CFTypeRef *)(v3 + 8)), (uint64_t v6 = v2[41]) != 0))
  {
    if (!v2[149])
    {
      uint64_t v7 = v2[32];
      uint64_t v8 = *(void *)(v2[4] + 1928);
      uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v9 = 2499;
      *((void *)v9 + 1) = v8;
      *((void *)v9 + 66) = (char *)v9 + 16;
      *((void *)v9 + 67) = 512;
      *((void *)v9 + 68) = 0;
      *((void *)v9 + 70) = 0;
      *((void *)v9 + 69) = 0;
      IPC::Encoder::encodeHeader(v9);
      unint64_t v21 = v9;
      LOBYTE(v19[0]) = 0;
      char v20 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v21, 0, (uint64_t)v19, 1);
      if (v20)
      {
        uint64_t v11 = v19[0];
        v19[0] = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
      }
      uint64_t v12 = v21;
      unint64_t v21 = 0;
      if (v12)
      {
        IPC::Encoder::~Encoder(v12, v10);
        WTF::fastFree(v17, v18);
      }
      uint64_t v6 = v2[41];
    }
    unint64_t v21 = *(IPC::Encoder **)(a1 + 32);
    uint64_t v13 = v21;
    *(void *)(a1 + 32) = 0;
    uint64_t v14 = *(void *)(a1 + 48);
    v19[0] = 0;
    WebKit::WebPageProxy::continueNavigationInNewProcess((uint64_t)v2, v4, v6, v19, &v21, 0, 2, v5, v14, 1, 0, 0, 0, 0);
    if (v13) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v13 + 4);
    }
    if (v19[0]) {
      (*(void (**)(uint64_t))(*(void *)v19[0] + 8))(v19[0]);
    }
    uint64_t v15 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, 1);
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v16 + 16))(v16, 0);
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    if (!v4) {
      return;
    }
  }
  CFRelease(*(CFTypeRef *)(v4 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_0,void,WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9DAF78;
  if (*(unsigned char *)(a1 + 584)) {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 272), a2);
  }
  uint64_t v3 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 256);
  *(void *)(a1 + 256) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 64));
  uint64_t v6 = *(WTF::StringImpl **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  return a1;
}

{
  uint64_t v3;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9DAF78;
  if (*(unsigned char *)(a1 + 584)) {
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 272), a2);
  }
  uint64_t v3 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 256);
  *(void *)(a1 + 256) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 64));
  uint64_t v6 = *(WTF::StringImpl **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }

  return WTF::fastFree((WTF *)a1, v5);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_0,void,WTF::RefPtr<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> &&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x1F4188790](a1, a2, a3);
  uint64_t v4 = v3;
  uint64_t v6 = *v5;
  *uint64_t v5 = 0;
  if (v6)
  {
    uint64_t v7 = *(void **)(v3 + 8);
    *(unsigned char *)(v6 + 1120) = 1;
    if (*(unsigned char *)(v3 + 593)) {
      *(unsigned char *)(v6 + 1360) = *(unsigned char *)(v3 + 592);
    }
    uint64_t v8 = *(void *)(v6 + 336);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 24);
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 8);
        if (v10)
        {
          CFRetain(*(CFTypeRef *)(v10 - 8));
          WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>(*(void *)(v10 + 16) + 1984, (unsigned int *)v6, (uint64_t)&v79);
          CFRelease(*(CFTypeRef *)(v10 - 8));
        }
      }
    }
    uint64_t v11 = *(void *)(v7[39] + 400);
    if (v11)
    {
      uint64_t v12 = (unsigned int *)(v11 + 16);
      atomic_fetch_add((atomic_uint *volatile)(v11 + 16), 1u);
      if (!*(unsigned char *)(v4 + 594))
      {
        uint64_t v61 = *(WTF::StringImpl **)(v7[39] + 24);
        uint64_t v99 = *(void *)(v7[4] + 760);
        uint64_t v98 = *(void *)(*(void *)(v6 + 32) + 760);
        uint64_t v79 = &v61;
        *(void *)&long long v80 = &v99;
        *((void *)&v80 + 1) = &v98;
        WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::CloneSessionStorageForWebPage>(v11, (uint64_t **)&v79);
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v12);
    }
    uint64_t v13 = *(void *)(*(void *)(v6 + 32) + 1928);
    uint64_t v14 = (atomic_uint *)v7[32];
    uint64_t v15 = (unsigned int *)(v14 + 4);
    atomic_fetch_add(v14 + 4, 1u);
    uint64_t v16 = *(void *)(v6 + 232);
    uint64_t v17 = *(void *)(v6 + 328);
    uint64_t v18 = *(void *)(v17 + 272);
    uint64_t v19 = *(void *)(v17 + 280);
    LOBYTE(v61) = 0;
    LOBYTE(v69) = 0;
    uint64_t v99 = 0;
    WebKit::WebPageProxy::creationParameters((void *)v6, (WebKit::WebProcessProxy *)v14, v16, v18, v19, (uint64_t)&v61, 0, (uint64_t)&v99, (uint64_t)&v79);
    WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)v96, (uint64_t *)&v79);
    char v97 = 1;
    WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebKit::WebPageCreationParameters>)>::operator()((uint64_t *)(v4 + 264), v13, 1, (uint64_t)v96);
    if (v97) {
      WebKit::WebPageCreationParameters::~WebPageCreationParameters(v96);
    }
    WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)&v79);
    if ((_BYTE)v69)
    {
      if (BYTE8(v68)) {
        WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v66, v20);
      }
      WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v20);
      uint64_t v59 = v64;
      __int16 v64 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2) {
          WTF::StringImpl::destroy(v59, v58);
        }
        else {
          *(_DWORD *)v59 -= 2;
        }
      }
      char v60 = v61;
      uint64_t v61 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2) {
          WTF::StringImpl::destroy(v60, v58);
        }
        else {
          *(_DWORD *)v60 -= 2;
        }
      }
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v15);
    unint64_t v21 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)(v4 + 24));
    uint64_t v23 = v22;
    uint64_t v24 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v4 + 64));
    uint64_t v25 = (unsigned __int8 *)WTF::URL::host(v24);
    BOOL v27 = WTF::operator==(v21, v23, v25, v26);
    *(unsigned char *)(v6 + 808) = v27;
    if (*(unsigned char *)(v4 + 584))
    {
      long long v29 = *(_OWORD *)(v4 + 296);
      long long v62 = *(_OWORD *)(v4 + 280);
      LOBYTE(v61) = *(unsigned char *)(v4 + 272);
      *(void *)(v4 + 280) = 0;
      *(void *)(v4 + 288) = 0;
      v63[0] = v29;
      *(_OWORD *)((char *)v63 + 9) = *(_OWORD *)(v4 + 305);
      LOBYTE(v64) = 0;
      char v67 = 0;
      int v30 = *(unsigned __int8 *)(v4 + 456);
      if (*(unsigned char *)(v4 + 456))
      {
        std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)&v64, v4 + 328);
        char v67 = 1;
      }
      long long v31 = *(_OWORD *)(v4 + 480);
      long long v68 = *(_OWORD *)(v4 + 464);
      long long v69 = v31;
      LOBYTE(v70) = 0;
      unsigned __int8 v71 = 0;
      int v32 = *(unsigned __int8 *)(v4 + 504);
      if (*(unsigned char *)(v4 + 504))
      {
        uint64_t v33 = *(void *)(v4 + 496);
        *(void *)(v4 + 496) = 0;
        uint64_t v70 = v33;
        int v32 = 1;
        unsigned __int8 v71 = 1;
      }
      long long v34 = *(_OWORD *)(v4 + 512);
      long long v35 = *(_OWORD *)(v4 + 528);
      *(_OWORD *)(v4 + 512) = 0u;
      *(_OWORD *)(v4 + 528) = 0u;
      long long v72 = v34;
      long long v73 = v35;
      LOBYTE(v74) = 0;
      char v76 = 0;
      if (*(unsigned char *)(v4 + 568))
      {
        long long v36 = *(_OWORD *)(v4 + 544);
        *(void *)(v4 + 552) = 0;
        *(void *)(v4 + 544) = 0;
        long long v74 = v36;
        uint64_t v37 = *(void *)(v4 + 560);
        *(void *)(v4 + 560) = 0;
        uint64_t v75 = v37;
        char v76 = 1;
      }
      uint64_t v38 = *(WTF::StringImpl **)(v4 + 576);
      *(void *)(v4 + 576) = 0;
      v77[1] = 0;
      v78 = 0;
      v77[0] = v38;
      LOBYTE(v79) = (_BYTE)v61;
      long long v39 = v62;
      long long v62 = 0uLL;
      long long v80 = v39;
      v81[0] = v63[0];
      *(_OWORD *)((char *)v81 + 9) = *(_OWORD *)((char *)v63 + 9);
      v82[0] = 0;
      char v83 = 0;
      if (v30)
      {
        std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)v82, (uint64_t)&v64);
        char v83 = 1;
        int v32 = v71;
      }
      long long v84 = v68;
      long long v85 = v69;
      LOBYTE(v86) = 0;
      char v87 = 0;
      if (v32)
      {
        uint64_t v40 = v70;
        uint64_t v70 = 0;
        uint64_t v86 = v40;
        char v87 = 1;
      }
      long long v41 = v72;
      long long v42 = v73;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v88 = v41;
      long long v89 = v42;
      LOBYTE(v90) = 0;
      char v92 = 0;
      if (v76)
      {
        long long v43 = v74;
        long long v74 = 0uLL;
        long long v90 = v43;
        uint64_t v44 = v75;
        uint64_t v75 = 0;
        uint64_t v91 = v44;
        char v92 = 1;
      }
      long long v45 = *(_OWORD *)v77;
      v77[0] = 0;
      v77[1] = 0;
      long long v93 = v45;
      uint64_t v46 = v78;
      v78 = 0;
      long long v94 = v46;
      char v95 = 1;
      uint64_t v47 = *(void *)(v6 + 32);
      uint64_t v48 = v47 + 1368;
      if (*(unsigned char *)(v47 + 1696))
      {
        WebCore::PrivateClickMeasurement::operator=(v48, (uint64_t)&v79);
        uint64_t v50 = *((void *)&v93 + 1);
        *((void *)&v93 + 1) = 0;
        long long v51 = *(WTF::StringImpl **)(v47 + 1680);
        *(void *)(v47 + 1680) = v50;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2) {
            WTF::StringImpl::destroy(v51, v49);
          }
          else {
            *(_DWORD *)v51 -= 2;
          }
        }
        uint64_t v52 = v94;
        long long v94 = 0;
        unint64_t v53 = *(WTF::StringImpl **)(v47 + 1688);
        *(void *)(v47 + 1688) = v52;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2) {
            WTF::StringImpl::destroy(v53, v49);
          }
          else {
            *(_DWORD *)v53 -= 2;
          }
        }
      }
      else
      {
        std::construct_at[abi:sn180100]<WebKit::PrivateClickMeasurementAndMetadata,WebKit::PrivateClickMeasurementAndMetadata,WebKit::PrivateClickMeasurementAndMetadata*>(v48, (uint64_t)&v79);
        *(unsigned char *)(v47 + 1696) = 1;
      }
      std::__optional_destruct_base<WebKit::PrivateClickMeasurementAndMetadata,false>::~__optional_destruct_base[abi:sn180100]((WebCore::PrivateClickMeasurement *)&v79, v49);
      long long v55 = v78;
      v78 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2) {
          WTF::StringImpl::destroy(v55, v54);
        }
        else {
          *(_DWORD *)v55 -= 2;
        }
      }
      char v56 = v77[1];
      v77[1] = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2) {
          WTF::StringImpl::destroy(v56, v54);
        }
        else {
          *(_DWORD *)v56 -= 2;
        }
      }
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v61, v54);
    }
    BOOL v57 = 1;
    *(unsigned char *)(v6 + 809) = 1;
    {
      BOOL v57 = dword_1EB35A4E4 == 0;
    }
    else
    {
      qword_1EB35A4F0 = 0;
      WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance = 0u;
      unk_1EB35A4E0 = 0u;
    }
    *(unsigned char *)(v6 + 1376) = v57;
    WebKit::WebPageProxy::cachedAllowedQueryParametersForAdvancedPrivacyProtections((WebKit::WebPageProxy *)v27, v28);
    *(unsigned char *)(v6 + 1377) = dword_1EB359C94 == 0;
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  else
  {
    LOBYTE(v100[0]) = 0;
    char v101 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebKit::WebPageCreationParameters>)>::operator()((uint64_t *)(v3 + 264), 0, 0, (uint64_t)v100);
    if (v101) {
      WebKit::WebPageCreationParameters::~WebPageCreationParameters(v100);
    }
  }
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebKit::WebPageCreationParameters>)>::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  *a1 = 0;
  LOBYTE(v8[0]) = 0;
  char v9 = 0;
  if (*(unsigned char *)(a4 + 1480))
  {
    WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)v8, (uint64_t *)a4);
    char v9 = 1;
    LOBYTE(v10[0]) = 0;
    char v11 = 0;
    WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)v10, (uint64_t *)v8);
    char v11 = 1;
  }
  else
  {
    LOBYTE(v10[0]) = 0;
    char v11 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, const char ***))(*(void *)v6 + 16))(v6, a2, a3, v10);
  if (v11) {
    WebKit::WebPageCreationParameters::~WebPageCreationParameters(v10);
  }
  if (v9) {
    WebKit::WebPageCreationParameters::~WebPageCreationParameters(v8);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_1,void,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_1>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_1>> &&,WebKit::NavigationActionData &<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::Ref<WebKit::WebPageProxy>,API::NavigationAction<WebKit::WebPageProxy>> &&)> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DAFA0;
  uint64_t v3 = a1[13];
  a1[13] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 11), a2);
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_1,void,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_1>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_1>> &&,WebKit::NavigationActionData &<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::Ref<WebKit::WebPageProxy>,API::NavigationAction<WebKit::WebPageProxy>> &&)> &&>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9DAFA0;
  uint64_t v3 = *((void *)a1 + 13);
  *((void *)a1 + 13) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 88, a2);
  uint64_t v5 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_1,void,WTF::Ref<API::NavigationAction,WTF::RawPtrTraits<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_1>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy::createNewPage(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)::$_1>> &&,WebKit::NavigationActionData &<void ()(WTF::RefPtr<WebKit::WebPageProxy,WTF::Ref<WebKit::WebPageProxy>,API::NavigationAction<WebKit::WebPageProxy>> &&)> &&>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 104) + 16))(*(void *)(*(void *)(a1 + 8) + 104));
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DAFC8;
  WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9DAFC8;
  WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v1 = a1[1];
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      *(unsigned char *)(v2 + 1345) = 1;
      uint64_t v4 = a1[39];
      uint64_t v5 = a1[1];
      a1[1] = 0;
      uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v6 = &unk_1EE9DAFF0;
      v6[1] = v5;
      char v9 = v6;
      uint64_t v7 = a1[41];
      a1[41] = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, void *, void *, void **))(*(void *)v7 + 16))(v7, v2 - 16, v4, a1 + 2, a1 + 40, &v9);
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      uint64_t v8 = v9;
      char v9 = 0;
      if (v8) {
        (*(void (**)(void *))(*v8 + 8))(v8);
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DAFF0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DAFF0;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runModalJavaScriptDialog(WTF::RefPtr<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>> &&,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::WebPageProxy&,WebKit::WebFrameProxy*,WebKit::FrameInfoData,WTF::String,WTF::String const<void ()(void)> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      *(unsigned char *)(v2 + 1345) = 0;
      uint64_t v3 = *(const void **)(v2 - 8);
      CFRelease(v3);
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptAlert(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::CompletionHandler<void ()(void)>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB018;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptAlert(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::CompletionHandler<void ()(void)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB018;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptAlert(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::CompletionHandler<void ()(void)>>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10 = *(void *)(a2 + 104);
  uint64_t v11 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  uint64_t v12 = *a6;
  *a6 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v13 = &unk_1EE9DB040;
  v13[1] = v11;
  void v13[2] = v12;
  uint64_t v15 = v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v10 + 104))(v10, a2, a5, a3, a4, &v15);
  uint64_t result = (uint64_t)v15;
  uint64_t v15 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptAlert(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::CompletionHandler<void ()(void)>)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DB040;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptAlert(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::CompletionHandler<void ()(void)>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DB040;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptAlert(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::CompletionHandler<void ()(void)>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptConfirm(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::String const&<void ()(void)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB068;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptConfirm(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::String const&<void ()(void)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB068;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptConfirm(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::String const&<void ()(void)> &&>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10 = *(void *)(a2 + 104);
  uint64_t v11 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  uint64_t v12 = *a6;
  *a6 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v13 = &unk_1EE9DB090;
  v13[1] = v11;
  void v13[2] = v12;
  uint64_t v15 = v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v10 + 112))(v10, a2, a5, a3, a4, &v15);
  uint64_t result = (uint64_t)v15;
  uint64_t v15 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptConfirm(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::String const&<void ()(void)> &&)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DB090;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptConfirm(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::String const&<void ()(void)> &&)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DB090;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptConfirm(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::String const&<void ()(void)> &&)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptPrompt(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::String const,WTF::CompletionHandler<void ()(WTF::String const)> &&)::$_0,void,WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::String const&<void ()(void)> &&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DB0B8;
  uint64_t v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptPrompt(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::String const,WTF::CompletionHandler<void ()(WTF::String const)> &&)::$_0,void,WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::String const&<void ()(void)> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DB0B8;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runJavaScriptPrompt(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::String const,WTF::CompletionHandler<void ()(WTF::String const)> &&)::$_0,void,WebKit::WebPageProxy&,WebKit::WebFrameProxy *,WebKit::FrameInfoData &,WTF::String const,WTF::String const&<void ()(void)> &&>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10 = *(void *)(a2 + 104);
  uint64_t v11 = a1 + 16;
  uint64_t v12 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  uint64_t v13 = *a6;
  *a6 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v14 = &unk_1EE9DB0E0;
  v14[1] = v12;
  void v14[2] = v13;
  uint64_t v16 = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v10 + 120))(v10, a2, a5, v11, a3, a4, &v16);
  uint64_t result = (uint64_t)v16;
  uint64_t v16 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy19runJavaScriptPromptERN3IPC10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS7_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS2_13FrameInfoDataERKNS_6StringESK_ONS_17CompletionHandlerIFvSK_EEEEN3__0clERS3_PNS2_13WebFrameProxyESH_SK_ONSL_IFvvEEEEUlRT_E_vJSK_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9DB0E0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy19runJavaScriptPromptERN3IPC10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS7_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS2_13FrameInfoDataERKNS_6StringESK_ONS_17CompletionHandlerIFvSK_EEEEN3__0clERS3_PNS2_13WebFrameProxyESH_SK_ONSL_IFvvEEEEUlRT_E_vJSK_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DB0E0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy19runJavaScriptPromptERN3IPC10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS7_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS2_13FrameInfoDataERKNS_6StringESK_ONS_17CompletionHandlerIFvSK_EEEEN3__0clERS3_PNS2_13WebFrameProxyESH_SK_ONSL_IFvvEEEEUlRT_E_vJSK_EE4callESK_(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getWindowFrame(WTF::CompletionHandler<void ()(WebCore::FloatRect const&)> &&)::$_0,void,WebCore::FloatRect>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DB108;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getWindowFrame(WTF::CompletionHandler<void ()(WebCore::FloatRect const&)> &&)::$_0,void,WebCore::FloatRect>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DB108;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getWindowFrame(WTF::CompletionHandler<void ()(WebCore::FloatRect const&)> &&)::$_0,void,WebCore::FloatRect>::call(uint64_t a1, float a2, float a3, float a4, float a5)
{
  *(float *)uint64_t v14 = a2;
  *(float *)&v14[1] = a3;
  *(float *)&void v14[2] = a4;
  *(float *)&v14[3] = a5;
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 40);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 1592))(v7);
  v13[0] = (*(float (**)(uint64_t, _DWORD *))(*(void *)v7 + 472))(v7, v14);
  v13[1] = v8;
  void v13[2] = v9;
  v13[3] = v10;
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, _DWORD *))(*(void *)v11 + 16))(v11, v13);
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 1600))(v7);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getWindowFrameWithCallback(WTF::Function<void ()(WebCore::FloatRect)> &&)::$_0,void,WebCore::FloatRect>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DB130;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getWindowFrameWithCallback(WTF::Function<void ()(WebCore::FloatRect)> &&)::$_0,void,WebCore::FloatRect>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DB130;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getWindowFrameWithCallback(WTF::Function<void ()(WebCore::FloatRect)> &&)::$_0,void,WebCore::FloatRect>::call(uint64_t a1, float a2, float a3, float a4, float a5)
{
  *(float *)int v9 = a2;
  *(float *)&v9[1] = a3;
  *(float *)&v9[2] = a4;
  *(float *)&v9[3] = a5;
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 40);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 1592))(v7);
  (*(void (**)(uint64_t, _DWORD *))(*(void *)v7 + 472))(v7, v9);
  (*(void (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 1600))(v7);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runBeforeUnloadConfirmPanel(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DB158;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runBeforeUnloadConfirmPanel(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DB158;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::runBeforeUnloadConfirmPanel(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0)
  {
    uint64_t v6 = v5 - 16;
    CFRetain(*(CFTypeRef *)(v5 - 8));
    if (*(unsigned char *)(a1 + 32)) {
      WTF::RunLoop::TimerBase::start();
    }
    char v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    char v7 = 1;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, a2);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  if ((v7 & 1) == 0)
  {
    int v9 = *(const void **)(v6 + 8);
    CFRelease(v9);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::printFrame(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String const&,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DB180;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::printFrame(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String const&,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DB180;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::printFrame(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String const&,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t result = WebKit::WebPageProxy::endPrinting(v1, (uint64_t *)(a1 + 24));
  *(unsigned char *)(v1 + 804) = 0;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMediaVolume>(uint64_t a1, float *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2449;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SetMuted,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB1A8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SetMuted,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB1A8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SetMuted,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::StopMediaCapture,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2500;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebCore::MediaProducerMediaCaptureKind,void>::encode<IPC::Encoder>(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DB1F8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::StopMediaCapture,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB1F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::StopMediaCapture,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB1F8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::StopMediaCapture,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestMediaPlaybackState,WTF::CompletionHandler<void ()(WebKit::MediaPlaybackState)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2373;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v13 = &unk_1EE9DB248;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestMediaPlaybackState,WTF::CompletionHandler<void ()(WebKit::MediaPlaybackState)>>(WTF::CompletionHandler<void ()(WebKit::MediaPlaybackState)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB248;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestMediaPlaybackState,WTF::CompletionHandler<void ()(WebKit::MediaPlaybackState)>>(WTF::CompletionHandler<void ()(WebKit::MediaPlaybackState)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB248;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestMediaPlaybackState,WTF::CompletionHandler<void ()(WebKit::MediaPlaybackState)>>(WTF::CompletionHandler<void ()(WebKit::MediaPlaybackState)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      unint64_t v6 = a2[1];
      if (v6 <= a2[2] - v5)
      {
        a3 = 0;
        uint64_t v9 = 0;
        *a2 = 0;
        a2[1] = 0;
        uint64_t v11 = a2[3];
        if (v11)
        {
          if (v6)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v5, v6);
            a3 = 0;
            uint64_t v17 = *a2;
            uint64_t v18 = a2[1];
            uint64_t v19 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            uint64_t v9 = 0;
            if (v19 && v18)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17, v18);
              uint64_t v9 = *a2;
              a3 = a2[1];
            }
          }
          else
          {
            a3 = 0;
            uint64_t v9 = 0;
          }
        }
      }
      else
      {
        char v7 = (unsigned __int8 *)a2[2];
        a2[2] = (uint64_t)(v7 + 1);
        uint64_t v8 = *v7;
        a3 = v6;
        uint64_t v9 = v5;
        if (v8 < 4)
        {
          uint64_t v10 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v8, v6);
          goto LABEL_9;
        }
      }
      *a2 = 0;
      a2[1] = 0;
      uint64_t v12 = a2[3];
      if (v12)
      {
        if (a3)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v9);
          uint64_t v15 = *a2;
          a3 = a2[1];
          uint64_t v16 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          if (v16)
          {
            if (a3) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v15);
            }
          }
        }
      }
    }
  }
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void, unint64_t))(*(void *)v10 + 16))(v10, 0, a3);
LABEL_9:
  uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);

  return v13(v10);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::PauseAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2330;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v13 = &unk_1EE9DB270;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PauseAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB270;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PauseAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB270;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PauseAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::SuspendAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2505;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v13 = &unk_1EE9DB298;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SuspendAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB298;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SuspendAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB298;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SuspendAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ResumeAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2386;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v13 = &unk_1EE9DB2C0;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ResumeAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB2C0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ResumeAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB2C0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ResumeAllMediaPlayback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMayStartMediaWhenInWindow>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2447;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *WTF::Detail::CallableWrapper<std::optional<WebCore::FloatSize><void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::LoadAndDecodeImage,WebKit::WebPageProxy::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0>(WebKit::WebPageProxy::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DB2E8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)v3;
    uint64_t v5 = *(void *)(v3 + 8) - 1;
    *(void *)(v3 + 8) = v5;
    if (v4)
    {
      uint64_t v6 = *v4;
      if (!*v4) {
        return a1;
      }
      char v7 = *(unsigned char *)(v3 + 16);
      *(unsigned char *)(v3 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
      *(unsigned char *)(v3 + 16) = v7;
      if (*(void *)v3) {
        return a1;
      }
      uint64_t v5 = *(void *)(v3 + 8);
    }
    if (!v5) {
      MEMORY[0x199740C10](v3, 0x1020C40545B2139);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::optional<WebCore::FloatSize><void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::LoadAndDecodeImage,WebKit::WebPageProxy::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0>(WebKit::WebPageProxy::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DB2E8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)v4;
    uint64_t v6 = *(void *)(v4 + 8) - 1;
    *(void *)(v4 + 8) = v6;
    if (v5)
    {
      uint64_t v7 = *v5;
      if (!*v5) {
        goto LABEL_10;
      }
      char v8 = *(unsigned char *)(v4 + 16);
      *(unsigned char *)(v4 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0);
      *(unsigned char *)(v4 + 16) = v8;
      if (*(void *)v4) {
        goto LABEL_10;
      }
      uint64_t v6 = *(void *)(v4 + 8);
    }
    if (!v6) {
      MEMORY[0x199740C10](v4, 0x1020C40545B2139);
    }
  }
LABEL_10:

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<std::optional<WebCore::FloatSize><void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::LoadAndDecodeImage,WebKit::WebPageProxy::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0>(WebKit::WebPageProxy::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 + 8;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (v4)
    {
      unint64_t v6 = a2[1];
      if (v6 <= a2[2] - v4)
      {
        *a2 = 0;
        a2[1] = 0;
        uint64_t v24 = a2[3];
        if (v24)
        {
          if (v6)
          {
            (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
            uint64_t v25 = *a2;
            uint64_t v26 = a2[1];
            uint64_t v27 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            if (v27)
            {
              if (v26) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25);
              }
            }
          }
        }
        goto LABEL_5;
      }
      uint64_t v7 = (unsigned __int8 *)a2[2];
      a2[2] = (uint64_t)(v7 + 1);
      unsigned int v8 = *v7;
      if (v8 > 1)
      {
LABEL_5:
        uint64_t v9 = *a2;
        uint64_t v10 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v11 = a2[3];
        if (v11 && v10) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
        }
        v40[0] = 0;
        char v42 = 0;
        goto LABEL_7;
      }
      if (v8)
      {
        IPC::ArgumentCoder<WebCore::ShareableBitmap,void>::decode(a2, &v31);
        if (BYTE8(v31)
          || (uint64_t v28 = *a2, v29 = a2[1], *a2 = 0, a2[1] = 0, (v30 = a2[3]) != 0)
          && v29
          && ((*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v28), BYTE8(v31)))
        {
          *(void *)&v43[0] = v31;
          int v17 = 1;
          int v49 = 1;
        }
        else
        {
          int v17 = 0;
          LOBYTE(v43[0]) = 0;
        }
        char v50 = v17;
        int v18 = 1;
        if (!v17) {
          goto LABEL_5;
        }
      }
      else
      {
        IPC::Decoder::decode<WebCore::ResourceError>((IPC::Decoder *)a2, (uint64_t)&v31);
        if (v39)
        {
          long long v20 = v31;
          long long v31 = 0uLL;
          v43[0] = v20;
          v43[1] = v32;
          v43[2] = v33;
          LODWORD(v32) = v32 & 0xFFFFFFFE;
          uint64_t v44 = v34;
          int v45 = v35;
          __int16 v46 = v36;
          uint64_t v21 = v37;
          uint64_t v34 = 0;
          uint64_t v37 = 0;
          uint64_t v47 = v21;
          char v48 = v38;
          int v22 = 1;
          int v49 = 0;
        }
        else
        {
          int v22 = 0;
          LOBYTE(v43[0]) = 0;
        }
        char v50 = v22;
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31, v19);
        int v18 = 0;
        if (!v22) {
          goto LABEL_5;
        }
      }
      v40[0] = 0;
      int v41 = -1;
      ((void (*)(long long *, unsigned char *, _OWORD *))off_1EE9DB310[v18])(&v31, v40, v43);
      int v41 = v18;
      char v42 = 1;
      if (!v50 || v49 == -1 || (((void (*)(long long *, _OWORD *))off_1EE9DB300[v49])(&v31, v43), v42))
      {
LABEL_24:
        uint64_t v23 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = 0;
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v23 + 16))(v23, v40);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 8))(v23);
        if (v42)
        {
          if (v41 != -1) {
            return ((uint64_t (*)(_OWORD *, unsigned char *))off_1EE9DB300[v41])(v43, v40);
          }
        }
        return result;
      }
LABEL_7:
      uint64_t v12 = *a2;
      uint64_t v13 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v14 = a2[3];
      if (!v14) {
        return IPC::Connection::cancelReply<Messages::WebPage::LoadAndDecodeImage,WebKit::WebPageProxy::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,std::optional<WebCore::FloatSize>::Ref<WebCore::ShareableBitmap,std::optional<WebCore::FloatSize>::RawPtrTraits<std::optional<WebCore::FloatSize>::Ref>,std::optional<WebCore::FloatSize>::DefaultRefDerefTraits<std::optional<WebCore::FloatSize>::Ref>>> &&)> &&)::$_0>(v2);
      }
      if (!v13) {
        return IPC::Connection::cancelReply<Messages::WebPage::LoadAndDecodeImage,WebKit::WebPageProxy::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,std::optional<WebCore::FloatSize>::Ref<WebCore::ShareableBitmap,std::optional<WebCore::FloatSize>::RawPtrTraits<std::optional<WebCore::FloatSize>::Ref>,std::optional<WebCore::FloatSize>::DefaultRefDerefTraits<std::optional<WebCore::FloatSize>::Ref>>> &&)> &&)::$_0>(v2);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12);
      if (!v42) {
        return IPC::Connection::cancelReply<Messages::WebPage::LoadAndDecodeImage,WebKit::WebPageProxy::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,std::optional<WebCore::FloatSize>::Ref<WebCore::ShareableBitmap,std::optional<WebCore::FloatSize>::RawPtrTraits<std::optional<WebCore::FloatSize>::Ref>,std::optional<WebCore::FloatSize>::DefaultRefDerefTraits<std::optional<WebCore::FloatSize>::Ref>>> &&)> &&)::$_0>(v2);
      }
      goto LABEL_24;
    }
  }
  uint64_t v16 = a1 + 8;

  return IPC::Connection::cancelReply<Messages::WebPage::LoadAndDecodeImage,WebKit::WebPageProxy::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,std::optional<WebCore::FloatSize>::Ref<WebCore::ShareableBitmap,std::optional<WebCore::FloatSize>::RawPtrTraits<std::optional<WebCore::FloatSize>::Ref>,std::optional<WebCore::FloatSize>::DefaultRefDerefTraits<std::optional<WebCore::FloatSize>::Ref>>> &&)> &&)::$_0>(v16);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::LoadAndDecodeImage,WebKit::WebPageProxy::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,std::optional<WebCore::FloatSize>::Ref<WebCore::ShareableBitmap,std::optional<WebCore::FloatSize>::RawPtrTraits<std::optional<WebCore::FloatSize>::Ref>,std::optional<WebCore::FloatSize>::DefaultRefDerefTraits<std::optional<WebCore::FloatSize>::Ref>>> &&)> &&)::$_0>(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 0;
  v6[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v6);
  v6[7] = 0;
  memset(&v6[5], 0, 14);
  char v7 = 1;
  int v8 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v5);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v8 != -1) {
    return ((uint64_t (*)(char *, uint64_t *))off_1EE9DB300[v8])(&v4, &v5);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13ResourceErrorEN3WTF3RefINS8_15ShareableBitmapENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (const void *)*((void *)a2 + 8);
  *((void *)a2 + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  char v4 = (WTF::StringImpl *)*((void *)a2 + 6);
  *((void *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13ResourceErrorEN3WTF3RefINS8_15ShareableBitmapENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13ResourceErrorEN3WTF3RefINS8_15ShareableBitmapENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  *(void *)a2 = v5;
  WTF::URL::URL(a2 + 8, a3 + 1);
  uint64_t v6 = a3[6];
  a3[6] = 0;
  *(void *)(a2 + 48) = v6;
  LODWORD(v6) = *((_DWORD *)a3 + 14);
  *(_WORD *)(a2 + 60) = *((_WORD *)a3 + 30);
  *(_DWORD *)(a2 + 56) = v6;
  uint64_t v7 = a3[8];
  a3[8] = 0;
  *(void *)(a2 + 64) = v7;
  *(unsigned char *)(a2 + 72) = *((unsigned char *)a3 + 72);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13ResourceErrorEN3WTF3RefINS8_15ShareableBitmapENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidChooseColor>(uint64_t a1, WebCore::Color **a2, uint64_t a3, char a4)
{
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2198;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WebCore::Color,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidEndColorPicker>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2204;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidCloseSuggestions>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2202;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidSelectDataListOption>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2215;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetAllowsMediaDocumentInlinePlayback>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2407;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

WTF::StringImpl *WTF::VectorMover<false,std::pair<WTF::String,WTF::ApproximateTime>>::moveOverlapping(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  uint64_t v3 = a2;
  char v4 = result;
  if (result <= (WTF::StringImpl *)a3)
  {
    if (a2 != result)
    {
      uint64_t v5 = (WTF::StringImpl **)((char *)a3 + ((a2 - result) & 0xFFFFFFFFFFFFFFF0) - 8);
      do
      {
        uint64_t v6 = *((void *)v3 - 2);
        uint64_t v3 = (WTF::StringImpl *)((char *)v3 - 16);
        *(void *)uint64_t v3 = 0;
        *(v5 - 1) = v6;
        *uint64_t v5 = *((void *)v3 + 1);
        uint64_t result = *(WTF::StringImpl **)v3;
        *(void *)uint64_t v3 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        v5 -= 2;
      }
      while (v3 != v4);
    }
  }
  else
  {
    return WTF::VectorMover<false,WebKit::OptionItem>::move(result, a2, a3);
  }
  return result;
}

unint64_t WTF::Vector<std::pair<WTF::String,WTF::ApproximateTime>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<WTF::String,WTF::ApproximateTime>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<WTF::String,WTF::ApproximateTime>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<std::pair<WTF::String,WTF::ApproximateTime>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      char v4 = *(WTF::StringImpl **)result;
      uint64_t v5 = (WTF::StringImpl *)(*(void *)result + 16 * *((unsigned int *)result + 3));
      uint64_t v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(16 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *(void *)unint64_t v3 = v6;
      uint64_t result = WTF::VectorMover<false,WebKit::OptionItem>::move(v4, v5, v6);
      if (v4)
      {
        if (*(WTF::StringImpl **)v3 == v4)
        {
          *(void *)unint64_t v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (WTF::StringImpl *)WTF::fastFree(v4, v7);
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0,unsigned long long>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2354;
  *(void *)(v8 + 8) = a4;
  *(void *)(v8 + 528) = v8 + 16;
  *(void *)(v8 + 536) = 512;
  *(void *)(v8 + 544) = 0;
  *(_OWORD *)(v8 + 552) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  long long v33 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v8, *(float **)(a2 + 8));
  uint64_t v9 = *(void *)a3;
  *(void *)a3 = 0;
  uint64_t v34 = v9;
  long long v10 = *(_OWORD *)(a3 + 24);
  long long v35 = *(_OWORD *)(a3 + 8);
  long long v36 = v10;
  long long v37 = *(_OWORD *)(a3 + 40);
  uint64_t v11 = *(WTF **)(a3 + 56);
  *(void *)(a3 + 56) = 0;
  char v38 = v11;
  *(void *)&long long v10 = *(void *)(a3 + 64);
  *(void *)(a3 + 64) = 0;
  uint64_t v39 = v10;
  int v40 = *(_DWORD *)(a3 + 72);
  long long v12 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a3 + 80) = 0u;
  long long v41 = v12;
  char v42 = *(_DWORD **)(a3 + 96);
  *(void *)(a3 + 96) = 0;
  WebCore::Color::Color();
  int v44 = *(_DWORD *)(a3 + 112);
  uint64_t v13 = *(void *)(a3 + 120);
  uint64_t v14 = *(void *)(a3 + 128);
  *(void *)(a3 + 120) = 0;
  uint64_t v45 = v13;
  uint64_t v46 = v14;
  uint64_t v15 = WTF::fastMalloc((WTF *)0x90);
  *(void *)uint64_t v15 = &unk_1EE9DB330;
  *(void *)(v15 + 8) = v34;
  long long v16 = v35;
  long long v17 = v37;
  *(_OWORD *)(v15 + 32) = v36;
  *(_OWORD *)(v15 + 48) = v17;
  *(_OWORD *)(v15 + 16) = v16;
  int v18 = v38;
  uint64_t v34 = 0;
  char v38 = 0;
  *(void *)(v15 + 64) = v18;
  *(void *)&long long v16 = v39;
  uint64_t v39 = 0;
  *(void *)(v15 + 72) = v16;
  *(_DWORD *)(v15 + 80) = v40;
  *(void *)(v15 + 88) = v41;
  uint64_t v19 = *((void *)&v41 + 1);
  long long v41 = 0u;
  *(void *)(v15 + 96) = v19;
  long long v20 = v42;
  char v42 = 0;
  *(void *)(v15 + 104) = v20;
  WebCore::Color::Color();
  *(_DWORD *)(v15 + 120) = v44;
  *(void *)(v15 + 128) = v45;
  *(void *)(v15 + 136) = v46;
  uint64_t v45 = 0;
  if ((v43 & 0x8000000000000) != 0)
  {
    long long v32 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v32);
      WTF::fastFree((WTF *)v32, v21);
    }
  }
  int v22 = v42;
  char v42 = 0;
  if (v22)
  {
    if (v22[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v22 + 8))(v22);
    }
    else {
      --v22[2];
    }
  }
  uint64_t v23 = (_DWORD *)*((void *)&v41 + 1);
  *((void *)&v41 + 1) = 0;
  if (v23)
  {
    if (v23[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v23 + 8))(v23);
    }
    else {
      --v23[2];
    }
  }
  uint64_t v24 = (_DWORD *)v41;
  *(void *)&long long v41 = 0;
  if (v24)
  {
    if (v24[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v24 + 8))(v24);
    }
    else {
      --v24[2];
    }
  }
  uint64_t v25 = v38;
  if (v38)
  {
    char v38 = 0;
    LODWORD(v39) = 0;
    WTF::fastFree(v25, v21);
  }
  uint64_t v26 = v34;
  uint64_t v34 = 0;
  if (v26) {
    CFRelease(*(CFTypeRef *)(v26 + 8));
  }
  uint64_t v34 = v15;
  *(void *)&long long v35 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  BYTE8(v35) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v33, 0, (uint64_t)&v34, 1);
  if (BYTE8(v35))
  {
    uint64_t v28 = v34;
    uint64_t v34 = 0;
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    }
  }
  uint64_t result = v33;
  long long v33 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v27);
    return (IPC::Encoder *)WTF::fastFree(v30, v31);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0>(WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DB330;
  uint64_t v3 = a1[16];
  a1[16] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  WebCore::TextIndicatorData::~TextIndicatorData((WebCore::TextIndicatorData *)(a1 + 2), a2);
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0>(WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DB330;
  uint64_t v3 = a1[16];
  a1[16] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  WebCore::TextIndicatorData::~TextIndicatorData((WebCore::TextIndicatorData *)(a1 + 2), a2);
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0>(WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WebCore::FloatRect>>(a2, (uint64_t)&v7);
    if (v8)
    {
      *(_OWORD *)(a1 + 32) = v7;
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = WebKit::WebFrameProxy::rootFrame(*(CFTypeRef **)(a1 + 128));
      WebKit::WebPageProxy::setTextIndicatorFromFrame(v4, (uint64_t)v5[34], (uint64_t)v5[35], (long long *)(a1 + 16), *(void *)(a1 + 136));
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0>(v2);
    }
  }
  else
  {
    uint64_t v6 = a1 + 8;
    IPC::Connection::cancelReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0>(v6);
  }
}

void IPC::Connection::cancelReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::setTextIndicatorFromFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::TextIndicatorData &&,unsigned long long)::$_0>(uint64_t a1)
{
  uint64_t v2 = (long long *)(a1 + 8);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = WebKit::WebFrameProxy::rootFrame(*(CFTypeRef **)(a1 + 120));
  uint64_t v5 = (uint64_t)v4[34];
  uint64_t v6 = (uint64_t)v4[35];
  uint64_t v7 = *(void *)(a1 + 128);

  WebKit::WebPageProxy::setTextIndicatorFromFrame(v3, v5, v6, v2, v7);
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidChangeSelectedIndexForActivePopupMenu>(uint64_t a1, int *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2197;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  long long v16 = v8;
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(v8, a2);
  LOBYTE(v14) = 0;
  char v15 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v16, a4, (uint64_t)&v14, 1);
  if (v15)
  {
    uint64_t v10 = v14;
    uint64_t v14 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t result = v16;
  long long v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

unint64_t WTF::Vector<WebKit::WebPageProxy::InjectedBundleMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebPageProxy::InjectedBundleMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebPageProxy::InjectedBundleMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebKit::WebPageProxy::InjectedBundleMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = result[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(void *)unint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = result;
        unint64_t v8 = (unsigned int **)((char *)v4 + 16 * v5);
        unint64_t v9 = (unsigned int **)v4;
        do
        {
          unint64_t v10 = *v9;
          *unint64_t v9 = 0;
          *(void *)unint64_t v7 = v10;
          uint64_t v11 = v9[1];
          v9[1] = 0;
          *((void *)v7 + 1) = v11;
          long long v12 = v9[1];
          v9[1] = 0;
          if (v12) {
            CFRelease(*((CFTypeRef *)v12 + 1));
          }
          uint64_t result = *v9;
          *unint64_t v9 = 0;
          if (result)
          {
            if (*result == 2) {
              uint64_t result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            }
            else {
              *result -= 2;
            }
          }
          v9 += 2;
          v7 += 4;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)unint64_t v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0,unsigned long long>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  unint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v8 = 2354;
  *((void *)v8 + 1) = a4;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v24 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v8, *(float **)(a2 + 8));
  long long v23 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v27 = *((void *)a3 + 2);
  int v28 = *((_DWORD *)a3 + 6);
  unint64_t v9 = (const void *)*((void *)a3 + 4);
  CFTypeRef cf = v9;
  if (v9) {
    CFRetain(v9);
  }
  __int16 v30 = *((_WORD *)a3 + 20);
  char v31 = *((unsigned char *)a3 + 42);
  uint64_t v10 = *((void *)a3 + 6);
  uint64_t v11 = *((void *)a3 + 7);
  *((void *)a3 + 6) = 0;
  *((void *)a3 + 7) = 0;
  uint64_t v13 = WTF::fastMalloc((WTF *)0x48);
  *(void *)uint64_t v13 = &unk_1EE9DB358;
  *(_OWORD *)(v13 + 8) = v23;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v14 = v28;
  *(void *)(v13 + 24) = v27;
  *(_DWORD *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v9;
  if (v9) {
    CFRetain(v9);
  }
  *(_WORD *)(v13 + 48) = v30;
  *(unsigned char *)(v13 + 50) = v31;
  *(void *)(v13 + 56) = v10;
  v32[0] = 0;
  v32[1] = 0;
  *(void *)(v13 + 64) = v11;
  WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v32, v12);
  CFTypeRef v15 = cf;
  CFTypeRef cf = 0;
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v16 = v26;
  uint64_t v26 = 0;
  if (v16) {
    CFRelease(*(CFTypeRef *)(v16 + 8));
  }
  uint64_t v17 = v25;
  uint64_t v25 = 0;
  if (v17) {
    CFRelease(*(CFTypeRef *)(v17 + 8));
  }
  uint64_t v25 = v13;
  uint64_t v26 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  LOBYTE(v27) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, 0, (uint64_t)&v25, 1);
  if ((_BYTE)v27)
  {
    uint64_t v19 = v25;
    uint64_t v25 = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
  uint64_t result = v24;
  uint64_t v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v18);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0>(WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DB358;
  WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 7), a2);
  unint64_t v3 = (const void *)a1[5];
  a1[5] = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0>(WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9DB358;
  WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 56, a2);
  uint64_t v4 = (const void *)*((void *)a1 + 5);
  *((void *)a1 + 5) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  uint64_t v6 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }

  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0>(WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WebCore::FloatRect>>(a2, (uint64_t)&v11);
    if (v12)
    {
      FloatRect v14 = v11;
      uint64_t v4 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(*(void *)(*(void *)(v4 + 32) + 16) + 144);
      if (v5)
      {
        uint64_t v6 = *(void *)(a1 + 8);
        unint64_t v7 = WebKit::WebFrameProxy::rootFrame((CFTypeRef *)v4);
        uint64_t v8 = (uint64_t)v7[34];
        uint64_t v9 = (uint64_t)v7[35];
        WebCore::IntRect::IntRect((WebCore::IntRect *)v13, &v14);
        WebKit::WebPageProxy::showPopupMenuFromFrame(v6, v5, v8, v9, (const WebCore::IntRect *)v13, *(void *)(a1 + 24), a1 + 56, *(_DWORD *)(a1 + 32), a1 + 40);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0>(v2);
    }
  }
  else
  {
    uint64_t v10 = a1 + 8;
    IPC::Connection::cancelReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0>(v10);
  }
}

void IPC::Connection::cancelReply<Messages::WebPage::RemoteViewRectToRootView,WebKit::WebPageProxy::showPopupMenuFromFrame(IPC::Connection&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::IntRect const&,unsigned long long,WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,WebKit::PlatformPopupMenuData const&)::$_0>(uint64_t a1)
{
  v9.m_location = 0;
  v9.m_size = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(v2 + 32) + 16) + 144);
  if (v3)
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = WebKit::WebFrameProxy::rootFrame((CFTypeRef *)v2);
    uint64_t v6 = (uint64_t)v5[34];
    uint64_t v7 = (uint64_t)v5[35];
    WebCore::IntRect::IntRect((WebCore::IntRect *)v8, &v9);
    WebKit::WebPageProxy::showPopupMenuFromFrame(v4, v3, v6, v7, (const WebCore::IntRect *)v8, *(void *)(a1 + 16), a1 + 48, *(_DWORD *)(a1 + 24), a1 + 32);
  }
}

uint64_t WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *v3;
  *uint64_t v3 = 0;
  *(void *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    uint64_t v9 = a3 - v5;
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v9;
  }
  else
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10) {
      unint64_t v7 = v6 + 1;
    }
    else {
      unint64_t v7 = 16;
    }
    if (v7 > a2) {
      a2 = v7;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 29))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(WTF **)result;
    uint64_t v5 = (uint64_t *)(*(void *)result + 8 * *(unsigned int *)(result + 12));
    unint64_t v6 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    WTF::VectorMover<false,WTF::CompletionHandler<void ()(BOOL)>>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AllowFilesAccessFromWebProcess,WebKit::WebPageProxy::didChooseFilesForOpenPanelWithDisplayStringAndIcon(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,API::Data const*)::$_0>(WebKit::WebPageProxy::didChooseFilesForOpenPanelWithDisplayStringAndIcon(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,API::Data const*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DB380;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  unint64_t v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AllowFilesAccessFromWebProcess,WebKit::WebPageProxy::didChooseFilesForOpenPanelWithDisplayStringAndIcon(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,API::Data const*)::$_0>(WebKit::WebPageProxy::didChooseFilesForOpenPanelWithDisplayStringAndIcon(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,API::Data const*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9DB380;
  uint64_t v3 = *((void *)a1 + 5);
  *((void *)a1 + 5) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)a1 + 4);
  *((void *)a1 + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  unint64_t v6 = (unsigned int *)*((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }

  return WTF::fastFree(a1, v5);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AllowFilesAccessFromWebProcess,WebKit::WebPageProxy::didChooseFilesForOpenPanelWithDisplayStringAndIcon(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,API::Data const*)::$_0>(WebKit::WebPageProxy::didChooseFilesForOpenPanelWithDisplayStringAndIcon(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,API::Data const*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(void *a1)
{
  uint64_t v1 = a1[1];
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      uint64_t v5 = *(void *)(v2 + 536);
      *(void *)(v2 + 536) = 0;
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 24);
        if (v6)
        {
          uint64_t v7 = *(void *)(v6 + 8);
          if (v7)
          {
            atomic_fetch_add((atomic_uint *volatile)(v7 + 16), 1u);
            uint64_t v8 = (uint64_t)(a1 + 2);
            WebKit::SandboxExtension::createReadOnlyHandlesForFiles((uint64_t)"WebPageProxy::didChooseFilesForOpenPanelWithDisplayStringAndIcon", a1 + 2, (uint64_t)v20);
            v21[0] = (uint64_t)v20;
            WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ExtendSandboxForFilesFromOpenPanel>(v7, v21, *(void *)(*(void *)(v2 + 16) + 1928));
            uint64_t v9 = a1 + 4;
            uint64_t v10 = a1[5];
            if (v10)
            {
              unint64_t v11 = *(const void **)(v10 + 16);
              size_t v12 = *(void *)(v10 + 24);
            }
            else
            {
              unint64_t v11 = 0;
              size_t v12 = 0;
            }
            uint64_t v13 = *(void *)(*(void *)(v2 + 16) + 1928);
            FloatRect v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)FloatRect v14 = 2201;
            *((void *)v14 + 1) = v13;
            *((void *)v14 + 66) = (char *)v14 + 16;
            *((void *)v14 + 67) = 512;
            *((void *)v14 + 68) = 0;
            *((void *)v14 + 70) = 0;
            *((void *)v14 + 69) = 0;
            IPC::Encoder::encodeHeader(v14);
            long long v23 = v14;
            IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v14, v8);
            IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, v9);
            IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v14, v11, v12);
            LOBYTE(v21[0]) = 0;
            char v22 = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v23, 0, (uint64_t)v21, 1);
            if (v22)
            {
              uint64_t v16 = v21[0];
              v21[0] = 0;
              if (v16) {
                (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
              }
            }
            uint64_t v17 = v23;
            long long v23 = 0;
            if (v17)
            {
              IPC::Encoder::~Encoder(v17, v15);
              WTF::fastFree(v18, v19);
            }
            WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v15);
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
          }
        }
        WebKit::WebOpenPanelResultListenerProxy::invalidate((WebKit::WebOpenPanelResultListenerProxy *)v5, v4);
        CFRelease(*(CFTypeRef *)(v5 + 8));
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ExtendSandboxForFilesFromOpenPanel>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2238;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  FloatRect v14 = v6;
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v6, *a2);
  LOBYTE(v12) = 0;
  char v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  uint64_t result = v14;
  FloatRect v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AllowFilesAccessFromWebProcess,WebKit::WebPageProxy::didChooseFilesForOpenPanel(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0>(WebKit::WebPageProxy::didChooseFilesForOpenPanel(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DB3A8;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), v3);
  uint64_t v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AllowFilesAccessFromWebProcess,WebKit::WebPageProxy::didChooseFilesForOpenPanel(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0>(WebKit::WebPageProxy::didChooseFilesForOpenPanel(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9DB3A8;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, v3);
  uint64_t v5 = (unsigned int *)*((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }

  return WTF::fastFree(a1, v4);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AllowFilesAccessFromWebProcess,WebKit::WebPageProxy::didChooseFilesForOpenPanel(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0>(WebKit::WebPageProxy::didChooseFilesForOpenPanel(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      uint64_t v5 = *(void *)(v2 + 536);
      *(void *)(v2 + 536) = 0;
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 24);
        if (v6)
        {
          uint64_t v7 = *(void *)(v6 + 8);
          if (v7)
          {
            atomic_fetch_add((atomic_uint *volatile)(v7 + 16), 1u);
            uint64_t v8 = a1 + 16;
            WebKit::SandboxExtension::createReadOnlyHandlesForFiles((uint64_t)"WebPageProxy::didChooseFilesForOpenPanel", (uint64_t *)(a1 + 16), (uint64_t)v20);
            v21[0] = (uint64_t)v20;
            uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
            if (v9) {
              uint64_t v10 = v9 - 16;
            }
            else {
              uint64_t v10 = 0;
            }
            WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ExtendSandboxForFilesFromOpenPanel>(v7, v21, *(void *)(*(void *)(v10 + 32) + 1928));
            v19[0] = 0;
            v19[1] = 0;
            uint64_t v11 = *(void *)(*(void *)(v2 + 16) + 1928);
            uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v12 = 2200;
            *((void *)v12 + 1) = v11;
            *((void *)v12 + 66) = (char *)v12 + 16;
            *((void *)v12 + 67) = 512;
            *((void *)v12 + 68) = 0;
            *((void *)v12 + 70) = 0;
            *((void *)v12 + 69) = 0;
            IPC::Encoder::encodeHeader(v12);
            long long v23 = v12;
            IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v12, v8);
            IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v12, (uint64_t)v19);
            LOBYTE(v21[0]) = 0;
            char v22 = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v23, 0, (uint64_t)v21, 1);
            if (v22)
            {
              uint64_t v14 = v21[0];
              v21[0] = 0;
              if (v14) {
                (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
              }
            }
            CFTypeRef v15 = v23;
            long long v23 = 0;
            if (v15)
            {
              IPC::Encoder::~Encoder(v15, v13);
              WTF::fastFree(v17, v18);
            }
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v13);
            WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v16);
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
          }
        }
        WebKit::WebOpenPanelResultListenerProxy::invalidate((WebKit::WebOpenPanelResultListenerProxy *)v5, v4);
        CFRelease(*(CFTypeRef *)(v5 + 8));
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidCancelForOpenPanel>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2196;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidRemoveEditCommand>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2214;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::IsJITEnabled,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB3D0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::IsJITEnabled,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB3D0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::IsJITEnabled,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GamepadActivity>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2253;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::VectorArgumentCoder<false,std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v8, *(void *)a2);
  IPC::ArgumentCoder<WebCore::WritingDirection,void>::encode<IPC::Encoder>(v8, *(unsigned char *)(a2 + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unint64_t IPC::VectorArgumentCoder<false,std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 80 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<std::optional<WebKit::GamepadData>,void>::encode<IPC::Encoder,std::optional<WebKit::GamepadData> const&>(a1, v6);
      v6 += 80;
      v7 -= 80;
    }
    while (v7);
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::optional<WebKit::GamepadData>,void>::encode<IPC::Encoder,std::optional<WebKit::GamepadData> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 72);
  unint64_t result = (_DWORD *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198EBAD10);
    }
    *(unsigned char *)unint64_t result = 1;
    if (*(unsigned char *)(a2 + 72))
    {
      return IPC::ArgumentCoder<WebKit::GamepadData,void>::encode(a1, (int *)a2);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (_DWORD *)WTF::Detail::CallableWrapper<WebKit::WebPageProxy::didReceiveAuthenticationChallengeProxy(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&,WebKit::NegotiatedLegacyTLS)::$_0,void,BOOL>::~CallableWrapper(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198EBAD30);
    }
    *(unsigned char *)unint64_t result = 0;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::didReceiveAuthenticationChallengeProxy(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&,WebKit::NegotiatedLegacyTLS)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DB3F8;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::didReceiveAuthenticationChallengeProxy(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&,WebKit::NegotiatedLegacyTLS)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DB3F8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::didReceiveAuthenticationChallengeProxy(WTF::Ref<WebKit::AuthenticationChallengeProxy,WTF::RawPtrTraits<WebKit::AuthenticationChallengeProxy>,WTF::DefaultRefDerefTraits<WebKit::AuthenticationChallengeProxy>> &&,WebKit::NegotiatedLegacyTLS)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(a1 + 8) + 72) + 216);
    uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 72);
    return (WTF::StringImpl *)v2(v3);
  }
  else
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 464);
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v9);
    CFTypeRef cf = 0;
    WebKit::AuthenticationDecisionListener::completeChallenge(v5);
    CFTypeRef v7 = cf;
    CFTypeRef cf = 0;
    if (v7) {
      CFRelease(v7);
    }
    uint64_t v8 = v10;
    uint64_t v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    unint64_t result = v9;
    uint64_t v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::exceededDatabaseQuota(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void,unsigned long long>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB420;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::exceededDatabaseQuota(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB420;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::exceededDatabaseQuota(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void,unsigned long long>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestStorageSpace(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DB448;
  WebKit::WebPageProxy::requestStorageSpace(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestStorageSpace(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9DB448;
  WebKit::WebPageProxy::requestStorageSpace(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0::~$_0((void *)a1 + 1, a2);

  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestStorageSpace(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  long long v8 = *(_OWORD *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  long long v33 = *(_OWORD *)(a1 + 8);
  long long v35 = v8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v11 = WTF::fastMalloc((WTF *)0x40);
  uint64_t v12 = v11;
  *(void *)uint64_t v11 = &unk_1EE9DB470;
  *(_OWORD *)(v11 + 8) = v33;
  *(_OWORD *)(v11 + 24) = v35;
  *(void *)(v11 + 40) = v9;
  *(void *)(v11 + 48) = v10;
  *(void *)(v11 + 56) = v4;
  uint64_t v13 = v33;
  if (*(unsigned char *)(v33 + 1265))
  {
    _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy19requestStorageSpaceEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS4_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS_6StringESF_SF_yyyyONS_17CompletionHandlerIFvyEEEEN3__0clEvEUlT_E_vJyEE4callEy(v11, v4);
    uint64_t v14 = *(void (**)(uint64_t))(*(void *)v12 + 8);
    v14(v12);
    return;
  }
  uint64_t v15 = WebKit::WebFrameProxy::webFrame(v3, v2);
  if (!v15)
  {
    char v31 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      char v42 = "void WebKit::WebPageProxy::makeStorageSpaceRequest(FrameIdentifier, const String &, const String &, const St"
            "ring &, uint64_t, uint64_t, uint64_t, uint64_t, CompletionHandler<void (uint64_t)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v31, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 11061: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    uint64_t v32 = *(void *)(*(void *)(v33 + 256) + 144);
    if (v32)
    {
      *(unsigned char *)(v32 + 98) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      return;
    }
    __break(0xC471u);
    goto LABEL_37;
  }
  uint64_t v16 = v15;
  CFRetain(*(CFTypeRef *)(v15 + 8));
  WebCore::SecurityOriginData::fromDatabaseIdentifier();
  WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)v33, (uint64_t *)&v36);
  MEMORY[0x19972E890](v37, &v36, 0);
  WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness((uint64_t *)v39, (WebCore::SecurityOriginData *)v37, v17);
  if (v44) {
    int v19 = WebCore::operator==() ^ 1;
  }
  else {
    int v19 = 1;
  }
  if (v40 != -1) {
    ((void (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v40])(&v38, v39);
  }
  int v40 = -1;
  long long v20 = v37[0];
  v37[0] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v18);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t v21 = v36;
  long long v36 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::destroy(v21, v18);
      if (v19) {
        goto LABEL_19;
      }
      goto LABEL_21;
    }
    *(_DWORD *)v21 -= 2;
  }
  if (!v19)
  {
LABEL_21:
    if (v44)
    {
      uint64_t v34 = v5;
      uint64_t v22 = a1 + 56;
      uint64_t v23 = a1 + 64;
      WebCore::SecurityOriginData::securityOrigin((uint64_t *)v39, (WebCore::SecurityOriginData *)buf);
      API::SecurityOrigin::create(v37);
      uint64_t v25 = v39[0];
      v39[0] = 0;
      if (v25) {
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v25, v24);
      }
      uint64_t v26 = *(void *)(v13 + 104);
      uint64_t v27 = v37[0];
      int v28 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(void *)int v28 = &unk_1EE9DB498;
      *((void *)v28 + 1) = v12;
      v39[0] = v28;
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v26 + 256))(v26, v13, v16, v27, v22, v23, v4, v34, v7, v6, v39);
      uint64_t v29 = v39[0];
      v39[0] = 0;
      if (v29) {
        (*(void (**)(WTF *))(*(void *)v29 + 8))(v29);
      }
      __int16 v30 = v37[0];
      v37[0] = 0;
      if (v30) {
        CFRelease(*((CFTypeRef *)v30 + 1));
      }
      goto LABEL_28;
    }
LABEL_37:
    __break(1u);
    return;
  }
LABEL_19:
  (*(void (**)(uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v4);
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
LABEL_28:
  if (v44 && v43 != -1) {
    ((void (*)(WTF::StringImpl **, uint8_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v43])(v37, buf);
  }
  CFRelease(*(CFTypeRef *)(v16 + 8));
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy19requestStorageSpaceEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS4_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS_6StringESF_SF_yyyyONS_17CompletionHandlerIFvyEEEEN3__0clEvEUlT_E_vJyEED1Ev(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DB470;
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy19requestStorageSpaceEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS4_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS_6StringESF_SF_yyyyONS_17CompletionHandlerIFvyEEEEN3__0clEvEUlT_E_vJyEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DB470;
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy19requestStorageSpaceEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS4_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS_6StringESF_SF_yyyyONS_17CompletionHandlerIFvyEEEEN3__0clEvEUlT_E_vJyEE4callEy(uint64_t a1, unint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(v4 + 32);
    uint64_t v7 = *(void *)(v6 + 760);
    uint64_t v8 = *(void *)(v6 + 1928);
    uint64_t v9 = *(void *)(*(void *)(v4 + 256) + 136);
    if (v9) {
      LODWORD(v9) = *(_DWORD *)(v9 + 108);
    }
    uint64_t v10 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t v25 = 134219264;
    *(void *)&v25[4] = v4;
    __int16 v26 = 2048;
    uint64_t v27 = v7;
    __int16 v28 = 2048;
    uint64_t v29 = v8;
    __int16 v30 = 1024;
    int v31 = v9;
    __int16 v32 = 2048;
    uint64_t v33 = v10;
    __int16 v34 = 2048;
    unint64_t v35 = a2;
    _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::requestStorageSpace response for frame %llu, quota %llu", v25, 0x3Au);
  }
  if (*(void *)(a1 + 56) >= a2)
  {
    WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)v4, (uint64_t *)v25);
    int v13 = WTF::equal(*(WTF **)v25, *(const WTF::StringImpl **)(a1 + 40), v11);
    uint64_t v14 = *(WTF::StringImpl **)v25;
    *(void *)uint64_t v25 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v12);
        if (!v13) {
          goto LABEL_17;
        }
LABEL_12:
        uint64_t v15 = qword_1EB3585F0;
        if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = *(void *)(v4 + 32);
          uint64_t v17 = *(void *)(v16 + 760);
          uint64_t v18 = *(void *)(v16 + 1928);
          uint64_t v19 = *(void *)(*(void *)(v4 + 256) + 136);
          if (v19) {
            LODWORD(v19) = *(_DWORD *)(v19 + 108);
          }
          *(_DWORD *)uint64_t v25 = 134218752;
          *(void *)&v25[4] = v4;
          __int16 v26 = 2048;
          uint64_t v27 = v17;
          __int16 v28 = 2048;
          uint64_t v29 = v18;
          __int16 v30 = 1024;
          int v31 = v19;
          _os_log_impl(&dword_1985F2000, v15, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::storage space increase denied", v25, 0x26u);
        }
        *(unsigned char *)(v4 + 1265) = 1;
        goto LABEL_17;
      }
      *(_DWORD *)v14 -= 2;
    }
    if (!v13) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }
LABEL_17:
  uint64_t v20 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  (*(void (**)(uint64_t, unint64_t))(*(void *)v20 + 16))(v20, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 8))(v20);
  if ((_MergedGlobals_94 & 1) == 0)
  {
    *(_OWORD *)&qword_1EB359CA8 = 0u;
    *(_OWORD *)&qword_1EB359C98 = 0u;
    _MergedGlobals_94 = 1;
    goto LABEL_19;
  }
  uint64_t v22 = qword_1EB359C98;
  if (qword_1EB359C98 == qword_1EB359CA0)
  {
LABEL_19:
    byte_1EB359CB8 = 0;
    return result;
  }
  uint64_t v23 = *(void *)(qword_1EB359CA8 + 8 * qword_1EB359C98);
  *(void *)(qword_1EB359CA8 + 8 * qword_1EB359C98) = 0;
  if (v22 == dword_1EB359CB0 - 1) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v22 + 1;
  }
  qword_1EB359C98 = v24;
  (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
  return (*(uint64_t (**)(uint64_t))(*(void *)v23 + 8))(v23);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(unsigned long long)>,void,unsigned long long>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB498;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(unsigned long long)>,void,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB498;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(unsigned long long)>,void,unsigned long long>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestGeolocationPermissionForFrame(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::FrameInfoData &&)::$_0,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int **)a1[1];
  *a1 = &unk_1EE9DB4C0;
  a1[1] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestGeolocationPermissionForFrame(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::FrameInfoData &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int **)*((void *)this + 1);
  *(void *)this = &unk_1EE9DB4C0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestGeolocationPermissionForFrame(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::FrameInfoData &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t result = *(WTF::StringImpl **)(v2 + 8);
  if (result)
  {
    uint64_t result = WebKit::GeolocationPermissionRequestManagerProxy::didReceiveGeolocationPermissionDecision(result, *(void *)(v2 + 16), a2);
    *(void *)(v2 + 8) = 0;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::queryPermission(WebCore::ClientOrigin const&,WebCore::PermissionDescriptor const&,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0,void,std::optional<WebCore::PermissionState>>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9DB4E8;
  uint64_t v3 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(unsigned int **)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  uint64_t v5 = *(unsigned int *)(a1 + 64);
  if (v5 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v5])(&v8, a1 + 40);
  }
  *(_DWORD *)(a1 + 64) = -1;
  uint64_t v6 = *(unsigned int *)(a1 + 32);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v6])(&v9, a1 + 8);
  }
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::queryPermission(WebCore::ClientOrigin const&,WebCore::PermissionDescriptor const&,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0,void,std::optional<WebCore::PermissionState>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DB4E8;
  uint64_t v3 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  uint64_t v5 = *((unsigned int *)this + 16);
  if (v5 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v5])(&v8, (char *)this + 40);
  }
  *((_DWORD *)this + 16) = -1;
  uint64_t v6 = *((unsigned int *)this + 8);
  if (v6 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_3[v6])(&v9, (char *)this + 8);
  }
  *((_DWORD *)this + 8) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::queryPermission(WebCore::ClientOrigin const&,WebCore::PermissionDescriptor const&,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0,void,std::optional<WebCore::PermissionState>>::call(uint64_t a1, __int16 a2)
{
  if ((a2 & 0xFF00) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 88);
    *(void *)(a1 + 88) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
    goto LABEL_18;
  }
  if (!(_BYTE)a2) {
    goto LABEL_23;
  }
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      LOBYTE(v3) = 1;
      if (*(unsigned char *)(a1 + 72)) {
        LOBYTE(v3) = 2;
      }
    }
    else
    {
      LOBYTE(v3) = a2;
    }
    goto LABEL_17;
  }
  if (!*(unsigned char *)(a1 + 73))
  {
    LOBYTE(v3) = 2;
  }
  else
  {
LABEL_23:
    if (*(unsigned char *)(a1 + 74))
    {
      uint64_t v3 = *(void *)(a1 + 80);
      if (!v3) {
        goto LABEL_17;
      }
      uint64_t v3 = *(void *)(v3 + 8);
      if (!v3) {
        goto LABEL_17;
      }
      WebKit::WebPageProxy::pageWillLikelyUseNotifications((WebKit::WebPageProxy *)(v3 - 16));
    }
    LOBYTE(v3) = 0;
  }
LABEL_17:
  uint64_t v4 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v3 | 0x100);
LABEL_18:
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::VoiceActivityDetected>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2546;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestMediaKeySystemPermissionForFrame(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::SecurityOriginData const&,WTF::String const&)::$_0,void,BOOL>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl **)a1[1];
  *a1 = &unk_1EE9DB510;
  a1[1] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::MediaKeySystemPermissionRequestProxy>::deref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestMediaKeySystemPermissionForFrame(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::SecurityOriginData const&,WTF::String const&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl **)*((void *)this + 1);
  *(void *)this = &unk_1EE9DB510;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::MediaKeySystemPermissionRequestProxy>::deref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestMediaKeySystemPermissionForFrame(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::SecurityOriginData const&,WTF::String const&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (a2) {
    return WebKit::MediaKeySystemPermissionRequestProxy::allow(v2);
  }
  else {
    return WebKit::MediaKeySystemPermissionRequestProxy::deny(v2);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateWithTextRecognitionResult,WTF::CompletionHandler<void ()(WebKit::TextRecognitionUpdateResult)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2539;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<WebCore::TextRecognitionResult const&,WebCore::ElementContext const&,WebCore::FloatPoint const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::TextRecognitionResult const&,WebCore::ElementContext const&,WebCore::FloatPoint const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DB538;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::TextRecognitionResult const&,WebCore::ElementContext const&,WebCore::FloatPoint const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::TextRecognitionResult const&,WebCore::ElementContext const&,WebCore::FloatPoint const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebCore::TextRecognitionResult,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(a1, a2[1]);
  uint64_t v4 = (float *)a2[2];

  return IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateWithTextRecognitionResult,WTF::CompletionHandler<void ()(WebKit::TextRecognitionUpdateResult)>>(WTF::CompletionHandler<void ()(WebKit::TextRecognitionUpdateResult)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB538;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateWithTextRecognitionResult,WTF::CompletionHandler<void ()(WebKit::TextRecognitionUpdateResult)>>(WTF::CompletionHandler<void ()(WebKit::TextRecognitionUpdateResult)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB538;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateWithTextRecognitionResult,WTF::CompletionHandler<void ()(WebKit::TextRecognitionUpdateResult)>>(WTF::CompletionHandler<void ()(WebKit::TextRecognitionUpdateResult)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      unint64_t v6 = a2[1];
      if (v6 <= a2[2] - v5)
      {
        a3 = 0;
        uint64_t v9 = 0;
        *a2 = 0;
        a2[1] = 0;
        uint64_t v11 = a2[3];
        if (v11)
        {
          if (v6)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v5, v6);
            a3 = 0;
            uint64_t v17 = *a2;
            uint64_t v18 = a2[1];
            uint64_t v19 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            uint64_t v9 = 0;
            if (v19 && v18)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17, v18);
              uint64_t v9 = *a2;
              a3 = a2[1];
            }
          }
          else
          {
            a3 = 0;
            uint64_t v9 = 0;
          }
        }
      }
      else
      {
        uint64_t v7 = (unsigned __int8 *)a2[2];
        a2[2] = (uint64_t)(v7 + 1);
        uint64_t v8 = *v7;
        a3 = v6;
        uint64_t v9 = v5;
        if (v8 < 3)
        {
          uint64_t v10 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v8, v6);
          goto LABEL_9;
        }
      }
      *a2 = 0;
      a2[1] = 0;
      uint64_t v12 = a2[3];
      if (v12)
      {
        if (a3)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v9);
          uint64_t v15 = *a2;
          a3 = a2[1];
          uint64_t v16 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          if (v16)
          {
            if (a3) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v15);
            }
          }
        }
      }
    }
  }
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void, unint64_t))(*(void *)v10 + 16))(v10, 0, a3);
LABEL_9:
  uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);

  return v13(v10);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartVisualTranslation>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2496;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestImageBitmap,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2372;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DB560;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestImageBitmap,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB560;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestImageBitmap,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB560;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Decoder *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestImageBitmap,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::optional<WebCore::ShareableBitmapHandle>>(a2, v17);
    if (!v18)
    {
      v13[0] = 0;
      unsigned __int8 v16 = 0;
      goto LABEL_12;
    }
    uint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v19);
    int v6 = v20;
    if (!v20)
    {
      v13[0] = 0;
      goto LABEL_15;
    }
    if (v18)
    {
      v13[0] = 0;
      char v14 = 0;
      if (v17[64])
      {
        v5.n128_f64[0] = WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v13, (uint64_t)v17);
        int v6 = 1;
        char v14 = 1;
        uint64_t v15 = v19;
      }
      else
      {
        uint64_t v15 = v19;
        int v6 = 1;
      }
LABEL_15:
      unsigned __int8 v16 = v6;
      if (v18)
      {
        std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v17);
        int v6 = v16;
      }
      if (v6)
      {
LABEL_18:
        uint64_t v11 = *v2;
        *uint64_t v2 = 0;
        (*(void (**)(uint64_t, unsigned char *, uint64_t *, __n128))(*(void *)v11 + 16))(v11, v13, &v15, v5);
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        return std::__optional_destruct_base<std::tuple<std::optional<WebCore::ShareableBitmapHandle>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v13, v12);
      }
LABEL_12:
      uint64_t v8 = (WTF::StringImpl *)*a2;
      uint64_t v9 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v10 = a2[3];
      if (!v10 || !v9 || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v10 + 16))(v10, v8), !v16))
      {
        std::__optional_destruct_base<std::tuple<std::optional<WebCore::ShareableBitmapHandle>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v13, v8);
        return IPC::Connection::cancelReply<Messages::WebPage::RequestImageBitmap,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)>>(v2);
      }
      goto LABEL_18;
    }
    __break(1u);
  }
  else
  {
    uint64_t v7 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::RequestImageBitmap,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)>>(v7);
  }
  return result;
}

WTF::MachSendRight *IPC::Connection::cancelReply<Messages::WebPage::RequestImageBitmap,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&,WTF::String const&)>>(uint64_t *a1)
{
  v6[0] = 0;
  v6[64] = 0;
  __n128 v5 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *, WTF::StringImpl **))(*(void *)v1 + 16))(v1, v6, &v5);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t v3 = v5;
  __n128 v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v6);
}

WTF::MachSendRight *std::__optional_destruct_base<std::tuple<std::optional<WebCore::ShareableBitmapHandle>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](WTF::MachSendRight *this, WTF::StringImpl *a2)
{
  if (*((unsigned char *)this + 80))
  {
    uint64_t v3 = (WTF::StringImpl *)*((void *)this + 9);
    *((void *)this + 9) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100](this);
  }
  return this;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestNotificationPermission(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DB588;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestNotificationPermission(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DB588;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::requestNotificationPermission(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0)
  {
    int v6 = (WebKit::WebPageProxy *)(v5 - 16);
    CFRetain(*(CFTypeRef *)(v5 - 8));
    if (a2) {
      WebKit::WebPageProxy::pageWillLikelyUseNotifications(v6);
    }
    char v7 = 0;
  }
  else
  {
    int v6 = 0;
    char v7 = 1;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, a2);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  if ((v7 & 1) == 0)
  {
    uint64_t v9 = (const void *)*((void *)v6 + 1);
    CFRelease(v9);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CopyLinkWithHighlight>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 2180;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  int v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  int v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::updateWebsitePolicies(WebKit::WebsitePoliciesData &&)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 2538;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  char v14 = v6;
  IPC::ArgumentCoder<WebKit::WebsitePoliciesData,void>::encode(v6, v5);
  LOBYTE(v12) = 0;
  char v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  uint64_t result = v14;
  char v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::NotifyUserScripts>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 2327;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  int v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  int v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidRemoveBackForwardItem>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2213;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  char v18 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  char v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::BeginPrintingDuringDOMPrintOperation>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::BeginPrintingDuringDOMPrintOperation &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::BeginPrintingDuringDOMPrintOperation&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::BeginPrintingDuringDOMPrintOperation>(*(void *)(v7 + 24), *(void *)a3, *(void *)(v7 + 16), *(unsigned char *)(a3 + 8));
        uint64_t v8 = *(const void **)(v6 + 8);
        CFRelease(v8);
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v9 = *(void *)(a1 + 256);
  uint64_t v10 = *(void *)a3;
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v12 = *(unsigned char *)(a3 + 8);

  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::BeginPrintingDuringDOMPrintOperation>(v9, v10, v11, v12);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::BeginPrintingDuringDOMPrintOperation>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2151;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  char v18 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::PrintInfo,void>::encode(v8, *(void *)(a2 + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  char v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::BeginPrinting>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::BeginPrinting &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::BeginPrinting&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::BeginPrinting>(*(void *)(v7 + 24), *(void *)a3, *(void *)(v7 + 16), *(unsigned char *)(a3 + 8));
        uint64_t v8 = *(const void **)(v6 + 8);
        CFRelease(v8);
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v9 = *(void *)(a1 + 256);
  uint64_t v10 = *(void *)a3;
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v12 = *(unsigned char *)(a3 + 8);

  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::BeginPrinting>(v9, v10, v11, v12);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::BeginPrinting>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2150;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  char v18 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::PrintInfo,void>::encode(v8, *(void *)(a2 + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  char v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::EndPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2234;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  char v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v13 = &unk_1EE9DB5D8;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  char v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::EndPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB5D8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::EndPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB5D8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::EndPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::EndPrinting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2233;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  char v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v13 = &unk_1EE9DB600;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  char v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::EndPrinting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB600;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::EndPrinting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB600;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::EndPrinting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        uint64_t v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(*(void *)(v7 + 24), *(void *)a3, *(uint64_t **)(a3 + 8), *(void *)(v7 + 16), *(unsigned char *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v10 = *(void *)(a1 + 256);
  uint64_t v11 = *(void *)a3;
  uint64_t v12 = *(uint64_t **)(a3 + 8);
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v14 = *(unsigned char *)(a3 + 16);

  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(v10, v11, v12, v13, v14, 1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2176;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::PrintInfo,void>::encode(v12, *(void *)(a2 + 8));
  uint64_t v13 = *a3;
  *a3 = 0;
  char v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v14 = &unk_1EE9DB628;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB628;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB628;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,double,WebCore::RectEdges<float>>>((uint64_t)&v7, a2), v11))
  {
    double v3 = v9;
    uint64_t v4 = *v2;
    *uint64_t v2 = 0;
    (*(void (**)(uint64_t, WTF **, uint64_t *, double))(*(void *)v4 + 16))(v4, &v7, &v10, v3);
    uint64_t result = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
    if (v11)
    {
      uint64_t result = v7;
      if (v7)
      {
        uint64_t v7 = 0;
        int v8 = 0;
        return (WTF *)WTF::fastFree(result, v6);
      }
    }
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(v2);
  }
  return result;
}

WTF *IPC::Connection::cancelReply<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(uint64_t *a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF **, void *, double))(*(void *)v1 + 16))(v1, &v5, v4, 0.0);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t result = v5;
  if (v5)
  {
    uint64_t v5 = 0;
    LODWORD(v6) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

WTF *IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,double,WebCore::RectEdges<float>>>(uint64_t a1, unint64_t *a2)
{
  IPC::Decoder::decode<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v20);
  if (!v22)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 40) = 0;
LABEL_12:
    unint64_t v16 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF *)a2[3];
    if (result) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (!v17)
    {
      uint64_t v18 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF *)v18();
    }
    return result;
  }
  unint64_t v4 = a2[1];
  unint64_t v5 = *a2;
  unint64_t v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    unint64_t v12 = 0;
    char v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v19 = a2[3];
    if (v19)
    {
      if (v4)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v19 + 16))(v19, v5, v4);
        char v11 = (void *)*a2;
        unint64_t v12 = a2[1];
      }
      else
      {
        unint64_t v12 = 0;
        char v11 = 0;
      }
    }
LABEL_27:
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF *)a2[3];
    if (!result)
    {
LABEL_28:
      int v15 = 0;
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 40) = 0;
      goto LABEL_21;
    }
LABEL_30:
    if (v12) {
      uint64_t result = (WTF *)(*(uint64_t (**)(WTF *, void *))(*(void *)result + 16))(result, v11);
    }
    goto LABEL_28;
  }
  int v8 = (uint64_t *)(v5 + v6);
  a2[2] = (unint64_t)(v8 + 1);
  if (!v5)
  {
    unint64_t v12 = v4;
    char v11 = 0;
    goto LABEL_27;
  }
  uint64_t v9 = *v8;
  uint64_t result = (WTF *)IPC::Decoder::decode<WebCore::RectEdges<float>>((uint64_t *)a2, (uint64_t)&v23);
  if (v24)
  {
    if (!v22)
    {
      __break(1u);
      goto LABEL_30;
    }
    uint64_t v13 = v20;
    unsigned __int8 v20 = 0;
    *(void *)a1 = v13;
    uint64_t v14 = v21;
    HIDWORD(v21) = 0;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 24) = v23;
    int v15 = 1;
  }
  else
  {
    int v15 = 0;
    *(unsigned char *)a1 = 0;
  }
  *(unsigned char *)(a1 + 40) = v15;
LABEL_21:
  if (v22)
  {
    uint64_t result = v20;
    if (v20)
    {
      unsigned __int8 v20 = 0;
      LODWORD(v21) = 0;
      uint64_t result = (WTF *)WTF::fastFree(result, v11);
    }
  }
  if (!v15) {
    goto LABEL_12;
  }
  return result;
}

uint64_t WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::ComputePagesForPrinting,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::ComputePagesForPrinting &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::ComputePagesForPrinting&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        uint64_t v8 = WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ComputePagesForPrinting,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(*(void *)(v7 + 24), *(void *)a3, *(uint64_t **)(a3 + 8), *(void *)(v7 + 16), *(unsigned char *)(a3 + 16), 1);
        CFRelease(*(CFTypeRef *)(v6 + 8));
        return v8;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v10 = *(void *)(a1 + 256);
  uint64_t v11 = *(void *)a3;
  unint64_t v12 = *(uint64_t **)(a3 + 8);
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v14 = *(unsigned char *)(a3 + 16);

  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ComputePagesForPrinting,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(v10, v11, v12, v13, v14, 1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ComputePagesForPrinting,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  unint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v12 = 2175;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::PrintInfo,void>::encode(v12, *(void *)(a2 + 8));
  uint64_t v13 = *a3;
  *a3 = 0;
  char v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v14 = &unk_1EE9DB650;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ComputePagesForPrinting,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB650;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ComputePagesForPrinting,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB650;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ComputePagesForPrinting,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,double,WebCore::RectEdges<float>>>((uint64_t)&v7, a2), v11))
  {
    double v3 = v9;
    uint64_t v4 = *v2;
    *uint64_t v2 = 0;
    (*(void (**)(uint64_t, WTF **, uint64_t *, double))(*(void *)v4 + 16))(v4, &v7, &v10, v3);
    uint64_t result = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
    if (v11)
    {
      uint64_t result = v7;
      if (v7)
      {
        uint64_t v7 = 0;
        int v8 = 0;
        return (WTF *)WTF::fastFree(result, v6);
      }
    }
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::WebPage::ComputePagesForPrintingDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&)>>(v2);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawPagesToPDFDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 2223;
  *((void *)v10 + 1) = a4;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  long long v23 = v10;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::PrintInfo const&,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::PrintInfo const&,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>(v10, a2);
  uint64_t v11 = *a3;
  *a3 = 0;
  unint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unint64_t v12 = &unk_1EE9DB678;
  v12[1] = v11;
  uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v21[0] = v12;
  v21[1] = v13;
  char v22 = 1;
  int v15 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v23, a5, (uint64_t)v21, 1);
  if (v22)
  {
    uint64_t v16 = v21[0];
    v21[0] = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  int v17 = v23;
  long long v23 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v19, v20);
  }
  if (v15) {
    return v13;
  }
  else {
    return 0;
  }
}

_DWORD *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::PrintInfo const&,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::PrintInfo const&,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::PrintInfo,void>::encode(a1, *(void *)(a2 + 8));
  int v4 = *(_DWORD *)(a2 + 16);
  uint64_t v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3 || (*uint64_t v5 = v4, v7 = *(_DWORD *)(a2 + 20), result = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4), v9 <= 3))
  {
    __break(0xC471u);
    JUMPOUT(0x198EBE804);
  }
  *uint64_t result = v7;
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawPagesToPDFDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB678;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawPagesToPDFDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB678;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawPagesToPDFDuringDOMPrintOperation,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned int **))(*(void *)v3 + 16))(v3, &v7);
      uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        uint64_t result = v7;
        int v7 = 0;
        if (result) {
          return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(v2);
    }
  }
  else
  {
    unint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(v6);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawPagesToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 2222;
  *((void *)v10 + 1) = a4;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  long long v23 = v10;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::PrintInfo const&,unsigned int,unsigned int>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::PrintInfo const&,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>(v10, a2);
  uint64_t v11 = *a3;
  *a3 = 0;
  unint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unint64_t v12 = &unk_1EE9DB6A0;
  v12[1] = v11;
  uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v21[0] = v12;
  v21[1] = v13;
  char v22 = 1;
  int v15 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v23, a5, (uint64_t)v21, 1);
  if (v22)
  {
    uint64_t v16 = v21[0];
    v21[0] = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  int v17 = v23;
  long long v23 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v19, v20);
  }
  if (v15) {
    return v13;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawPagesToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB6A0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawPagesToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB6A0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawPagesToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned int **))(*(void *)v3 + 16))(v3, &v7);
      uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        uint64_t result = v7;
        int v7 = 0;
        if (result) {
          return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(v2);
    }
  }
  else
  {
    unint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(v6);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DrawToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  unint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v12 = 2227;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WebCore::FloatRect> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WebCore::FloatRect> const&,BOOL>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  char v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v14 = &unk_1EE9DB6C8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WebCore::FloatRect> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WebCore::FloatRect> const&,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::optional<WebCore::FloatRect>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatRect> const&>(a1, *(void *)(a2 + 8));
  char v4 = *(unsigned char *)(a2 + 16);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *IPC::ArgumentCoder<std::optional<WebCore::FloatRect>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatRect> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  unint64_t result = (void *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198EBEF88);
    }
    *(unsigned char *)unint64_t result = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      return (void *)IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)a2);
    }
    else
    {
      int v7 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
      return WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198EBEFA8);
    }
    *(unsigned char *)unint64_t result = 0;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB6C8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB6C8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DrawToPDF,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned int **))(*(void *)v3 + 16))(v3, &v7);
      unint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        unint64_t result = v7;
        int v7 = 0;
        if (result) {
          return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(v6);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetPDFFirstPageSize,WTF::CompletionHandler<void ()(WebCore::FloatSize)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  unint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v12 = 2267;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  char v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v14 = &unk_1EE9DB6F0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetPDFFirstPageSize,WTF::CompletionHandler<void ()(WebCore::FloatSize)>>(WTF::CompletionHandler<void ()(WebCore::FloatSize)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB6F0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetPDFFirstPageSize,WTF::CompletionHandler<void ()(WebCore::FloatSize)>>(WTF::CompletionHandler<void ()(WebCore::FloatSize)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB6F0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetPDFFirstPageSize,WTF::CompletionHandler<void ()(WebCore::FloatSize)>>(WTF::CompletionHandler<void ()(WebCore::FloatSize)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2, __n128 a3, __n128 a4)
{
  if (a2 && *a2 && (uint64_t v5 = IPC::Decoder::decode<std::tuple<WebCore::FloatSize>>(a2), v6))
  {
    a4.n128_u32[0] = HIDWORD(v5);
    a3.n128_u32[0] = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, __n128, __n128))(*(void *)v7 + 16))(v7, a3, a4);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    a3.n128_u64[0] = 0;
    a4.n128_u64[0] = 0;
    (*(void (**)(uint64_t, __n128, __n128))(*(void *)v7 + 16))(v7, a3, a4);
  }
  char v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);

  return v8(v7);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetViewportSizeForCSSViewportUnits>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2484;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatSize> const&>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetScrollPinningBehavior>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2464;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::WritingDirection,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getWebCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DB718;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getWebCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DB718;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getWebCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return v4(v3);
  }
  else
  {
    char v6 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 72) + 272);
    return v6();
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::wrapCryptoKey(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9DB740;
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::wrapCryptoKey(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DB740;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::wrapCryptoKey(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::call(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 16)) {
    goto LABEL_7;
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v3 = WebCore::wrapSerializedCryptoKey();
  char v5 = v3;
  if (v3)
  {
    unint64_t v12 = v15;
    uint64_t v6 = v16;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v13 = v6;
    char v14 = 1;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, WTF **))(*(void *)v7 + 16))(v7, &v12);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    if (v14)
    {
      uint64_t v11 = v12;
      if (v12)
      {
        unint64_t v12 = 0;
        LODWORD(v13) = 0;
        WTF::fastFree(v11, v4);
      }
    }
  }
  unint64_t result = v15;
  if (v15)
  {
    uint64_t v15 = 0;
    LODWORD(v16) = 0;
    unint64_t result = (WTF *)WTF::fastFree(result, v4);
  }
  if ((v5 & 1) == 0)
  {
LABEL_7:
    LOBYTE(v12) = 0;
    char v14 = 0;
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, WTF **))(*(void *)v9 + 16))(v9, &v12);
    unint64_t result = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
    if (v14)
    {
      unint64_t result = v12;
      if (v12)
      {
        unint64_t v12 = 0;
        LODWORD(v13) = 0;
        return (WTF *)WTF::fastFree(result, v10);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::unwrapCryptoKey(WebCore::WrappedCryptoKey &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9DB768;
  uint64_t v3 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WTF **)(a1 + 32);
  if (v4)
  {
    *(void *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::unwrapCryptoKey(WebCore::WrappedCryptoKey &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DB768;
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::unwrapCryptoKey(WebCore::WrappedCryptoKey &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::call(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 16) || (WebCore::unwrapCryptoKey(), !v8))
  {
    LOBYTE(v6) = 0;
    char v8 = 0;
  }
  uint64_t v3 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v3 + 16))(v3, &v6);
  unint64_t result = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (v8)
  {
    unint64_t result = v6;
    if (v6)
    {
      uint64_t v6 = 0;
      int v7 = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ChangeFont>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2160;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::FontChanges,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::InsertTextAsync>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2299;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WebKit::EditingRange const&,WebKit::InsertTextOptions const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WebKit::EditingRange const&,WebKit::InsertTextOptions const&>,0ul,1ul,2ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::String const&,WebKit::EditingRange const&,WebKit::InsertTextOptions const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WebKit::EditingRange const&,WebKit::InsertTextOptions const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, v4);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, v4 + 1);
  char v5 = *(char **)(a2 + 16);

  return IPC::ArgumentCoder<WebKit::InsertTextOptions,void>::encode(a1, v5);
}

void *IPC::Decoder::decode<std::tuple<WebKit::EditingRange>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<WebKit::EditingRange>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a2 = v8;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (void *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v5);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetCompositionAsync>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  long long v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v8 = 2419;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&,WebKit::EditingRange const&,WebKit::EditingRange const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&,WebKit::EditingRange const&,WebKit::EditingRange const&>,0ul,1ul,2ul,3ul,4ul,5ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&,WebKit::EditingRange const&,WebKit::EditingRange const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&,WebKit::EditingRange const&,WebKit::EditingRange const&>,0ul,1ul,2ul,3ul,4ul,5ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::VectorArgumentCoder<false,WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, *(void *)(a2 + 8));
  IPC::VectorArgumentCoder<false,WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, *(void *)(a2 + 16));
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&>(a1, *(uint64_t **)(a2 + 24));
  uint64_t v4 = *(uint64_t **)(a2 + 32);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, v4);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, v4 + 1);
  uint64_t v5 = *(uint64_t **)(a2 + 40);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, v5);

  return IPC::Encoder::operator<<<unsigned long long const&>(a1, v5 + 1);
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 32 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::CompositionUnderline,void>::encode(a1, v6);
      v6 += 32;
      v7 -= 32;
    }
    while (v7);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 40 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebCore::CompositionHighlight,void>::encode(a1, v6);
      v6 += 40;
      v7 -= 40;
    }
    while (v7);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&>(IPC::Encoder *this, uint64_t *a2)
{
  if (*a2) {
    int v4 = *(_DWORD *)(*a2 - 12);
  }
  else {
    int v4 = 0;
  }
  uint64_t result = IPC::Encoder::grow(this, 4uLL, 4);
  if (v6 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
    return result;
  }
  *(_DWORD *)uint64_t result = v4;
  uint64_t v7 = *a2;
  if (*a2)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    uint64_t v9 = v7 + 24 * v8;
    if (*(_DWORD *)(v7 - 12))
    {
      uint64_t v10 = *a2;
      if (v8)
      {
        uint64_t v11 = 24 * v8;
        uint64_t v10 = v7;
        while ((unint64_t)(*(void *)v10 + 1) <= 1)
        {
          v10 += 24;
          v11 -= 24;
          if (!v11)
          {
            uint64_t v10 = v9;
            break;
          }
        }
      }
      if (v7) {
        goto LABEL_13;
      }
      goto LABEL_17;
    }
    uint64_t v10 = v7 + 24 * v8;
  }
  else
  {
    uint64_t v10 = 0;
    LODWORD(v8) = 0;
  }
  uint64_t v9 = v7 + 24 * v8;
  if (v7)
  {
LABEL_13:
    uint64_t v12 = v7 + 24 * *(unsigned int *)(v7 - 4);
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v12 = 0;
LABEL_18:
  while (v10 != v12)
  {
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, (uint64_t *)v10);
    uint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(this, *(unsigned int *)(v10 + 20));
    uint64_t v13 = *(unsigned int *)(v10 + 20);
    if (v13)
    {
      char v14 = *(uint64_t **)(v10 + 8);
      uint64_t v15 = &v14[2 * v13];
      do
      {
        IPC::Encoder::operator<<<unsigned long long const&>(this, v14);
        uint64_t result = IPC::Encoder::operator<<<unsigned long long const&>(this, v14 + 1);
        v14 += 2;
      }
      while (v14 != v15);
    }
    uint64_t v16 = v10 + 24;
    uint64_t v10 = v9;
    if (v16 != v9)
    {
      uint64_t v10 = v16;
      while ((unint64_t)(*(void *)v10 + 1) <= 1)
      {
        v10 += 24;
        if (v10 == v9)
        {
          uint64_t v10 = v9;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetWritingSuggestion>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2485;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v19 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  uint64_t v9 = a2[1];
  IPC::Encoder::operator<<<unsigned long long const&>(v8, v9);
  IPC::Encoder::operator<<<unsigned long long const&>(v8, v9 + 1);
  LOBYTE(v17) = 0;
  char v18 = 0;
  uint64_t v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    uint64_t v12 = v17;
    uint64_t v17 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  uint64_t v13 = v19;
  unint64_t v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v15, v16);
  }
  return v11;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ConfirmCompositionAsync>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2177;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::TakeSnapshot,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2509;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<WebCore::IntRect const&,WebCore::IntSize const&,WTF::OptionSet<WebKit::SnapshotOption> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntRect const&,WebCore::IntSize const&,WTF::OptionSet<WebKit::SnapshotOption> const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  char v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v14 = &unk_1EE9DB790;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::IntRect const&,WebCore::IntSize const&,WTF::OptionSet<WebKit::SnapshotOption> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntRect const&,WebCore::IntSize const&,WTF::OptionSet<WebKit::SnapshotOption> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, *(void **)a2);
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(a1, *(int **)(a2 + 8));
  __int16 v4 = **(_WORD **)(a2 + 16);

  return IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TakeSnapshot,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB790;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TakeSnapshot,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB790;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::MachSendRight *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TakeSnapshot,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>(a2, v6);
    if (v7)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v6);
      uint64_t result = (WTF::MachSendRight *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v7) {
        return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v6);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(v5);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SwipeAnimationDidStart>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 2507;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  int v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  int v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::callAfterNextPresentationUpdate(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(atomic_uint ***)(a1 + 8);
  atomic_fetch_add(v3, 1u);
  uint64_t v4 = **(void **)(a1 + 16);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 28;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v14 = v5;
  unint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unint64_t v6 = &unk_1EE9DB7E0;
  v6[1] = v3;
  v12[0] = v6;
  v12[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v13 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v14, 0, (uint64_t)v12, 1);
  if (v13)
  {
    uint64_t v8 = v12[0];
    v12[0] = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  uint64_t result = v14;
  char v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages11DrawingArea28DispatchAfterEnsuringDrawingEZZN6WebKit12WebPageProxy31callAfterNextPresentationUpdateEONS_17CompletionHandlerIFvvEEEENK3__0clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlvE_EENSA_IFvPNS2_7DecoderEEEEOSR_NS_19ThreadLikeAssertionEEUlSU_E_vJSU_EED1Ev(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DB7E0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages11DrawingArea28DispatchAfterEnsuringDrawingEZZN6WebKit12WebPageProxy31callAfterNextPresentationUpdateEONS_17CompletionHandlerIFvvEEEENK3__0clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlvE_EENSA_IFvPNS2_7DecoderEEEEOSR_NS_19ThreadLikeAssertionEEUlSU_E_vJSU_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DB7E0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0,void,WTF::CompletionHandler<void ()(API::Data *)> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DB808;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0,void,WTF::CompletionHandler<void ()(API::Data *)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DB808;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0,void,WTF::CompletionHandler<void ()(API::Data *)> &&>::call(IPC::Encoder *result, uint64_t *a2)
{
  uint64_t v2 = *((void *)result + 1);
  if (*(unsigned char *)(v2 + 801) || !*(unsigned char *)(v2 + 800))
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      *a2 = 0;
      (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, 0);
      uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
      return (IPC::Encoder *)v4(v3);
    }
  }
  else
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      v17[0] = 1;
      uint64_t v18 = (char *)result + 24;
      *a2 = 0;
      uint64_t v6 = *(void *)(v2 + 256);
      uint64_t v7 = *(void *)(*(void *)(v2 + 32) + 1928);
      uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v8 = 2209;
      *((void *)v8 + 1) = v7;
      *((void *)v8 + 66) = (char *)v8 + 16;
      *((void *)v8 + 67) = 512;
      *((void *)v8 + 68) = 0;
      *((void *)v8 + 70) = 0;
      *((void *)v8 + 69) = 0;
      IPC::Encoder::encodeHeader(v8);
      uint64_t v21 = v8;
      IPC::ArgumentCoder<std::tuple<BOOL,WebKit::CallbackID const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WebKit::CallbackID const&>,0ul,1ul>(v8, v17);
      uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v9 = &unk_1EE9DB858;
      v9[1] = v5;
    }
    else
    {
      v17[0] = 0;
      uint64_t v18 = (char *)result + 24;
      uint64_t v6 = *(void *)(v2 + 256);
      uint64_t v11 = *(void *)(*(void *)(v2 + 32) + 1928);
      uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v12 = 2209;
      *((void *)v12 + 1) = v11;
      *((void *)v12 + 66) = (char *)v12 + 16;
      *((void *)v12 + 67) = 512;
      *((void *)v12 + 68) = 0;
      *((void *)v12 + 70) = 0;
      *((void *)v12 + 69) = 0;
      IPC::Encoder::encodeHeader(v12);
      uint64_t v21 = v12;
      IPC::ArgumentCoder<std::tuple<BOOL,WebKit::CallbackID const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WebKit::CallbackID const&>,0ul,1ul>(v12, v17);
      uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v9 = &unk_1EE9DB830;
    }
    uint64_t v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v19[0] = v9;
    v19[1] = v10;
    char v20 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v21, 0, (uint64_t)v19, 1);
    if (v20)
    {
      uint64_t v14 = v19[0];
      v19[0] = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
    uint64_t result = v21;
    uint64_t v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v13);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<BOOL,WebKit::CallbackID const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WebKit::CallbackID const&>,0ul,1ul>(IPC::Encoder *a1, char *a2)
{
  char v4 = *a2;
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = v4;
    uint64_t v7 = (uint64_t *)*((void *)a2 + 1);
    return IPC::Encoder::operator<<<unsigned long long const&>(a1, v7);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DidGetLoadDecisionForIcon,WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0::operator() const(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(Messages::WebPage::DidGetLoadDecisionForIcon)#1}>(WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0::operator() const(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(Messages::WebPage::DidGetLoadDecisionForIcon)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<IPC::SharedBufferReference>>(a2, (uint64_t)&v5);
    if (v8)
    {
      char v4 = v6;
      uint64_t v3 = v7;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      if (v3) {
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
      }
      if (v4) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, v2);
      }
    }
    std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v5, v2);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DidGetLoadDecisionForIcon,WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0::operator() const(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(IPC::SharedBufferReference const&)#1}>(WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0::operator() const(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(IPC::SharedBufferReference const&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB858;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DidGetLoadDecisionForIcon,WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0::operator() const(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(IPC::SharedBufferReference const&)#1}>(WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0::operator() const(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(IPC::SharedBufferReference const&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB858;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DidGetLoadDecisionForIcon,WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0::operator() const(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(IPC::SharedBufferReference const&)#1}>(WebKit::WebPageProxy::getLoadDecisionForIcon(WebCore::LinkIcon const&,WebKit::CallbackID)::$_0::operator() const(WTF::CompletionHandler<void ()(API::Data *)> &&)::{lambda(IPC::SharedBufferReference const&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<IPC::SharedBufferReference>>(a2, (uint64_t)v15);
    if (v16)
    {
      if (v15[0] || v15[1])
      {
        char v4 = (const void *)IPC::SharedBufferReference::span((IPC::SharedBufferReference *)v15);
        API::Data::create(v5, v4, &v17);
        uint64_t v6 = v17;
        uint64_t v7 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = 0;
        (*(void (**)(uint64_t, WebKit *))(*(void *)v7 + 16))(v7, v6);
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        uint64_t v9 = v17;
        int v17 = 0;
        if (v9) {
          CFRelease(*((CFTypeRef *)v9 + 1));
        }
      }
      else
      {
        uint64_t v14 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = 0;
        (*(void (**)(uint64_t, void))(*(void *)v14 + 16))(v14, 0);
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
      return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v8);
    }
    else
    {
      std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v3);
      uint64_t v13 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, void))(*(void *)v13 + 16))(v13, 0);
      return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v11 + 16))(v11, 0);
    uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);
    return v12(v11);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetUserInterfaceLayoutDirection>(uint64_t a1, int *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2482;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<unsigned int>,void>::encode<IPC::Encoder,std::tuple<unsigned int>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    uint64_t v13 = v6;
    do
    {
      uint64_t v14 = *(WTF::StringImpl **)v13;
      if (*(void *)v13 != -1)
      {
        if (v14)
        {
          uint64_t v16 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, (WTF::StringImpl **)v13);
          char v17 = *(_DWORD **)(v16 + 8);
          *(void *)(v16 + 8) = 0;
          if (v17)
          {
            if (v17[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v17 + 8))(v17);
            }
            else {
              --v17[2];
            }
          }
          uint64_t v18 = *(WTF::StringImpl **)v16;
          *(void *)uint64_t v16 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2) {
              WTF::StringImpl::destroy(v18, v10);
            }
            else {
              *(_DWORD *)v18 -= 2;
            }
          }
          unint64_t v19 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          *(void *)uint64_t v16 = v19;
          uint64_t v20 = *(void *)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          *(void *)(v16 + 8) = v20;
          uint64_t v21 = *(_DWORD **)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          if (v21)
          {
            if (v21[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v21 + 8))(v21);
            }
            else {
              --v21[2];
            }
          }
          char v22 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v10);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v11 = v16;
          }
        }
        else
        {
          uint64_t v15 = *(_DWORD **)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          if (v15)
          {
            if (v15[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
              uint64_t v14 = *(WTF::StringImpl **)v13;
            }
            else
            {
              --v15[2];
            }
          }
          *(void *)uint64_t v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v10);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
      }
      v13 += 16;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = (uint64_t *)(v4 + 16 * v10);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
          int v22 = 1;
          do
          {
            unsigned int v23 = v21;
            uint64_t v24 = *(void *)(v16 + 16 * v21);
            unsigned int v21 = (v21 + v22++) & v17;
          }
          while (v24);
          uint64_t v25 = (uint64_t *)(v16 + 16 * v23);
          __int16 v26 = (_DWORD *)v25[1];
          v25[1] = 0;
          if (v26)
          {
            if (v26[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v26 + 8))(v26);
            }
            else {
              --v26[2];
            }
          }
          *uint64_t v25 = *v12;
          uint64_t v27 = v4 + 16 * v10;
          uint64_t v28 = *(void *)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          v25[1] = v28;
          uint64_t v29 = *(_DWORD **)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          if (v29)
          {
            if (v29[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v29 + 8))(v29);
            }
            else {
              --v29[2];
            }
          }
          if (v12 == a2) {
            uint64_t v11 = v25;
          }
        }
        else
        {
          uint64_t v14 = v4 + 16 * v10;
          uint64_t v15 = *(_DWORD **)(v14 + 8);
          *(void *)(v14 + 8) = 0;
          if (v15)
          {
            if (v15[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
            }
            else {
              --v15[2];
            }
          }
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RegisterURLSchemeHandler>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2349;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  unint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::WasLoadedWithDataTransferFromPrevalentResource>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unsigned int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v7 = 2548;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::EffectiveAppearanceDidChange>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2230;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v24 = v8;
  char v9 = *a2;
  uint64_t v10 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
  if (!v11 || (*uint64_t v10 = v9, v12 = a2[1], v13 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1), !v14))
  {
    __break(0xC471u);
    JUMPOUT(0x198EC1CFCLL);
  }
  *uint64_t v13 = v12;
  LOBYTE(v22) = 0;
  char v23 = 0;
  uint64_t v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a4, (uint64_t)&v22, 1);
  if (v23)
  {
    uint64_t v17 = v22;
    uint64_t v22 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  unint64_t v18 = v24;
  uint64_t v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  return v16;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::InsertAttachment,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  char v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v12 = 2295;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,std::optional<unsigned long long> const&,WTF::String const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,std::optional<unsigned long long> const&,WTF::String const&,WTF::String const&>,0ul,1ul,2ul,3ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DB880;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

_DWORD *IPC::ArgumentCoder<std::tuple<WTF::String const&,std::optional<unsigned long long> const&,WTF::String const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,std::optional<unsigned long long> const&,WTF::String const&,WTF::String const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(a1, *(void *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 16));
  uint64_t v4 = *(uint64_t **)(a2 + 24);

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::InsertAttachment,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB880;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::InsertAttachment,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB880;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::InsertAttachment,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a2);
  }
  char v12 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v14 = v11 & v9;
    uint64_t v15 = (uint64_t *)(v8 + 16 * v14);
    uint64_t v16 = (WTF *)*v15;
    if (*v15 != -1) {
      break;
    }
    char v12 = (uint64_t *)(v8 + 16 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *char v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v15 = v12;
    }
    WTF::String::operator=(v15, a2);
    uint64_t v17 = *(void *)a3;
    *(void *)a3 = 0;
    uint64_t v18 = v15[1];
    v15[1] = v17;
    if (v18) {
      CFRelease(*(CFTypeRef *)(v18 + 8));
    }
    uint64_t v19 = *a1;
    if (*a1) {
      int v20 = *(_DWORD *)(v19 - 12) + 1;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(v19 - 12) = v20;
    uint64_t v23 = *a1;
    if (*a1) {
      int v24 = *(_DWORD *)(v23 - 12);
    }
    else {
      int v24 = 0;
    }
    uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
    unint64_t v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
      {
LABEL_28:
        uint64_t v15 = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v15);
        uint64_t v23 = *a1;
        if (*a1) {
          unint64_t v26 = *(unsigned int *)(v23 - 4);
        }
        else {
          unint64_t v26 = 0;
        }
      }
    }
    else if (3 * v26 <= 4 * v25)
    {
      goto LABEL_28;
    }
    *(void *)a4 = v15;
    *(void *)(a4 + 8) = v23 + 16 * v26;
    *(unsigned char *)(a4 + 16) = 1;
    return;
  }
  if (!WTF::equal(v16, *a2, a3)) {
    goto LABEL_13;
  }
  uint64_t v21 = *a1;
  if (*a1) {
    uint64_t v22 = *(unsigned int *)(v21 - 4);
  }
  else {
    uint64_t v22 = 0;
  }
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v21 + 16 * v22;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v27 = v8 + 16 * v14;
  uint64_t v28 = *(void *)a3;
  *(void *)a3 = 0;
  uint64_t v29 = *(void *)(v27 + 8);
  *(void *)(v27 + 8) = v28;
  if (v29)
  {
    __int16 v30 = *(const void **)(v29 + 8);
    CFRelease(v30);
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      char v12 = (WTF::StringImpl **)(v4 + 16 * v10);
      uint64_t v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unsigned int v18 = *((_DWORD *)v13 + 4);
          if (v18 >= 0x100) {
            unsigned int v19 = v18 >> 8;
          }
          else {
            unsigned int v19 = WTF::StringImpl::hashSlowCase(v13);
          }
          int v20 = 0;
          do
          {
            uint64_t v21 = v19 & v17;
            unsigned int v19 = ++v20 + v21;
          }
          while (*(void *)(v16 + 16 * v21));
          uint64_t v22 = v16 + 16 * v21;
          uint64_t v23 = *(void *)(v22 + 8);
          *(void *)(v22 + 8) = 0;
          if (v23)
          {
            CFRelease(*(CFTypeRef *)(v23 + 8));
            int v24 = *(WTF::StringImpl **)v22;
            *(void *)uint64_t v22 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2) {
                WTF::StringImpl::destroy(v24, v9);
              }
              else {
                *(_DWORD *)v24 -= 2;
              }
            }
          }
          else
          {
            *(void *)uint64_t v22 = 0;
          }
          uint64_t v25 = *v12;
          *char v12 = 0;
          *(void *)uint64_t v22 = v25;
          uint64_t v26 = v4 + 16 * v10;
          uint64_t v27 = *(void *)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          *(void *)(v22 + 8) = v27;
          uint64_t v28 = *(void *)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          if (v28) {
            CFRelease(*(CFTypeRef *)(v28 + 8));
          }
          uint64_t v29 = *v12;
          *char v12 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, v9);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          if (v12 == a2) {
            uint64_t v11 = v22;
          }
        }
        else
        {
          uint64_t v14 = v4 + 16 * v10;
          uint64_t v15 = *(void *)(v14 + 8);
          *(void *)(v14 + 8) = 0;
          if (v15)
          {
            CFRelease(*(CFTypeRef *)(v15 + 8));
            uint64_t v13 = *v12;
          }
          *char v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, v9);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateAttachmentAttributes,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  char v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v12 = 2523;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,std::optional<unsigned long long> const&,WTF::String const&,WTF::String const&,IPC::SharedBufferReference const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,std::optional<unsigned long long> const&,WTF::String const&,WTF::String const&,IPC::SharedBufferReference const&>,0ul,1ul,2ul,3ul,4ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DB8A8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned int v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::String const&,std::optional<unsigned long long> const&,WTF::String const&,WTF::String const&,IPC::SharedBufferReference const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,std::optional<unsigned long long> const&,WTF::String const&,WTF::String const&,IPC::SharedBufferReference const&>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(a1, *(void *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 24));
  uint64_t v4 = *(IPC::SharedBufferReference **)(a2 + 32);

  IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateAttachmentAttributes,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB8A8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateAttachmentAttributes,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB8A8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateAttachmentAttributes,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::SerializedAttachmentData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 24 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::SerializedAttachmentData>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    unsigned int v3 = result;
    do
    {
      uint64_t v4 = (unsigned int *)*((void *)v3 + 2);
      *((void *)v3 + 2) = 0;
      if (v4) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
      }
      int v5 = (WTF::StringImpl *)*((void *)v3 + 1);
      *((void *)v3 + 1) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, a2);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
      uint64_t result = *(WTF::StringImpl **)v3;
      *(void *)unsigned int v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      unsigned int v3 = (WTF::StringImpl *)((char *)v3 + 24);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SerializedAttachmentData>(uint64_t a1, unint64_t a2)
{
  unsigned int v3 = (uint64_t *)WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  unsigned int v5 = v4 + 1;
  int v6 = (void *)(*(void *)a1 + 24 * v4);
  uint64_t v7 = *v3;
  *unsigned int v3 = 0;
  *int v6 = v7;
  uint64_t v8 = v3[1];
  v3[1] = 0;
  v6[1] = v8;
  uint64_t v9 = v3[2];
  v3[2] = 0;
  v6[2] = v9;
  *(_DWORD *)(a1 + 12) = v5;
  return 1;
}

unint64_t WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x198EC2A54);
    }
    unint64_t v3 = *(WTF::StringImpl **)a1;
    unsigned int v4 = (WTF::StringImpl *)(*(void *)a1 + 24 * *(unsigned int *)(a1 + 12));
    int v5 = 24 * a2;
    uint64_t v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::SerializedAttachmentData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::SerializedAttachmentData>::move(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  if (result != a2)
  {
    int v5 = result;
    do
    {
      uint64_t v6 = *(WTF::StringImpl **)v5;
      *(void *)int v5 = 0;
      *a3 = v6;
      unint64_t v7 = (WTF::StringImpl *)*((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      a3[1] = v7;
      unint64_t v8 = (WTF::StringImpl *)*((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      a3[2] = v8;
      unint64_t v9 = (unsigned int *)*((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      if (v9) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v9, a2);
      }
      unint64_t v10 = (WTF::StringImpl *)*((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, a2);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      uint64_t result = *(WTF::StringImpl **)v5;
      *(void *)int v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      int v5 = (WTF::StringImpl *)((char *)v5 + 24);
      a3 += 3;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetApplicationManifest,WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2257;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v13 = &unk_1EE9DB8F8;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetApplicationManifest,WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB8F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetApplicationManifest,WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB8F8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetApplicationManifest,WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::optional<WebCore::ApplicationManifest>>(a2, v14);
    v11[0] = 0;
    if (v16)
    {
      char v12 = 0;
      if (!v15)
      {
        char v13 = 1;
        goto LABEL_6;
      }
      std::construct_at[abi:sn180100]<WebCore::ApplicationManifest,WebCore::ApplicationManifest,WebCore::ApplicationManifest*>((uint64_t)v11, v14);
      char v12 = 1;
      char v13 = 1;
      if (!v16
        || !v15
        || (WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)v14, v7), v13))
      {
LABEL_6:
        uint64_t v4 = *v2;
        *uint64_t v2 = 0;
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v4 + 16))(v4, v11);
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        if (v13)
        {
          if (v12) {
            WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)v11, v5);
          }
        }
        return;
      }
    }
    else
    {
      char v13 = 0;
    }
    uint64_t v8 = *(void *)a2;
    uint64_t v9 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v10 = *((void *)a2 + 3);
    if (!v10 || !v9 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8), !v13))
    {
      IPC::Connection::cancelReply<Messages::WebPage::GetApplicationManifest,WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)>>(v2);
      return;
    }
    goto LABEL_6;
  }
  uint64_t v6 = (uint64_t *)(a1 + 8);

  IPC::Connection::cancelReply<Messages::WebPage::GetApplicationManifest,WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)>>(v6);
}

void IPC::Connection::cancelReply<Messages::WebPage::GetApplicationManifest,WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)>>(uint64_t *a1)
{
  v3[0] = 0;
  char v4 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v3);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v4) {
    WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)v3, v2);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetTextFragmentMatch,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2279;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  char v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v13 = &unk_1EE9DB920;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetTextFragmentMatch,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB920;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetTextFragmentMatch,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB920;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetTextFragmentMatch,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v3 + 16))(v3, &v7);
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        uint64_t result = v7;
        unint64_t v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v6);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::InsertTextPlaceholder,WTF::CompletionHandler<void ()(std::optional<WebCore::ElementContext> const&)>>(uint64_t a1, int **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2300;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DB948;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned int v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::InsertTextPlaceholder,WTF::CompletionHandler<void ()(std::optional<WebCore::ElementContext> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ElementContext> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB948;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::InsertTextPlaceholder,WTF::CompletionHandler<void ()(std::optional<WebCore::ElementContext> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ElementContext> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB948;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::InsertTextPlaceholder,WTF::CompletionHandler<void ()(std::optional<WebCore::ElementContext> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ElementContext> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!a2 || !*a2)
  {
LABEL_6:
    LOBYTE(v11[0]) = 0;
    LOBYTE(v12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v4 + 16))(v4, v11);
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  IPC::Decoder::decode<std::optional<WebCore::ElementContext>>(a2, (uint64_t)v11);
  if (!v13)
  {
    unint64_t v5 = *a2;
    unint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v7 = a2[3];
    if (v7 && v6) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v7 + 16))(v7, v5);
    }
    goto LABEL_6;
  }
  v9[2] = v11[2];
  v9[3] = v11[3];
  _DWORD v9[4] = v11[4];
  v9[5] = v12;
  v9[0] = v11[0];
  v9[1] = v11[1];
  char v10 = 1;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v4 + 16))(v4, v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoveTextPlaceholder,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  long long v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v12 = 2357;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DB970;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned int v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoveTextPlaceholder,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB970;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoveTextPlaceholder,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB970;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoveTextPlaceholder,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SimulateDeviceOrientationChange>(uint64_t a1, double *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2489;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::HTMLModelElementCamera,void>::encode(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  long long v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(uint64_t a1, char **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  long long v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v12 = 2191;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WTF::OptionSet<WebCore::DragOperation>,void>::encode<IPC::Encoder>(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DB998;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned int v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB998;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB998;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WebKit::DataDetectionResult>>(a2, (uint64_t)&cf);
    if (v7)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v3 + 16))(v3, &cf);
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v7)
      {
        CFTypeRef v4 = cf;
        CFTypeRef cf = 0;
        if (v4) {
          CFRelease(v4);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(v2);
    }
  }
  else
  {
    unint64_t v5 = (uint64_t *)(a1 + 8);
    IPC::Connection::cancelReply<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(v5);
  }
}

void IPC::Connection::cancelReply<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(uint64_t *a1)
{
  CFTypeRef cf = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v1 + 16))(v1, &cf);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  CFTypeRef v2 = cf;
  CFTypeRef cf = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void IPC::Decoder::decode<std::tuple<WebKit::DataDetectionResult>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebKit::DataDetectionResult>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(void *)a2 = v8;
    *(unsigned char *)(a2 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void IPC::Decoder::decode<WebKit::DataDetectionResult>(void *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebKit::DataDetectionResult,void>::decode((uint64_t)a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5 && v4 != 0)
    {
      BOOL v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RemoveDataDetectedLinks,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2355;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v13 = &unk_1EE9DB9C0;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoveDataDetectedLinks,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DB9C0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoveDataDetectedLinks,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DB9C0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RemoveDataDetectedLinks,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WebKit::DataDetectionResult>>(a2, (uint64_t)&cf);
    if (v7)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v3 + 16))(v3, &cf);
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v7)
      {
        CFTypeRef v4 = cf;
        CFTypeRef cf = 0;
        if (v4) {
          CFRelease(v4);
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(v2);
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)(a1 + 8);
    IPC::Connection::cancelReply<Messages::WebPage::DetectDataInAllFrames,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)>>(v5);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SystemPreviewActionTriggered>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2508;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::SystemPreviewInfo,void>::encode(v8, *(void *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *(uint64_t **)(a2 + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::webViewDidMoveToWindow(void)::$_0,void,WebKit::WebViewDidMoveToWindowObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetCanShowPlaceholder>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2417;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WebCore::ElementContext const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::ElementContext const&,BOOL>,0ul,1ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ElementContext const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::ElementContext const&,BOOL>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(a1, *(void *)a2);
  char v4 = *(unsigned char *)(a2 + 8);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::StartTextManipulations,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2495;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,0ul,1ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DBA10;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned int v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, *(void *)a2);
  char v4 = *(unsigned char *)(a2 + 8);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 32 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebCore::TextManipulationControllerExclusionRule,void>::encode(a1, v6);
      v6 += 32;
      v7 -= 32;
    }
    while (v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::StartTextManipulations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DBA10;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::StartTextManipulations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DBA10;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::StartTextManipulations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::CompleteTextManipulation,WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2173;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::VectorArgumentCoder<false,WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DBA38;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned int v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 48 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::TextManipulationItem,void>::encode(a1, v6);
      v6 += 48;
      v7 -= 48;
    }
    while (v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CompleteTextManipulation,WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DBA38;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CompleteTextManipulation,WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DBA38;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CompleteTextManipulation,WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (!a2 || (uint64_t v4 = *(void *)a2) == 0)
  {
    uint64_t v25 = *(void *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::CompleteTextManipulation,WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v25);
  }
  unint64_t v5 = *((void *)a2 + 1);
  if (v5 <= *((void *)a2 + 2) - v4)
  {
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v29 = *((void *)a2 + 3);
    if (v29)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
        unint64_t v27 = 0;
        uint64_t v58 = *(void *)a2;
        uint64_t v59 = *((void *)a2 + 1);
        uint64_t v60 = *((void *)a2 + 3);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v28 = 0;
        if (v60 && v59)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v60 + 16))(v60, v58);
          uint64_t v28 = *(void *)a2;
          unint64_t v27 = *((void *)a2 + 1);
        }
      }
      else
      {
        unint64_t v27 = 0;
        uint64_t v28 = 0;
      }
    }
    goto LABEL_27;
  }
  uint64_t v6 = (unsigned __int8 *)*((void *)a2 + 2);
  *((void *)a2 + 2) = v6 + 1;
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
    unint64_t v27 = v5;
    uint64_t v28 = v4;
LABEL_27:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v30 = *((void *)a2 + 3);
    if (v30 && v27) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v30 + 16))(v30, v28, v27);
    }
    goto LABEL_50;
  }
  unint64_t v8 = ((unint64_t)(v6 + 8) & 0xFFFFFFFFFFFFFFF8) - v4;
  if (v5 < v8 || v5 - v8 <= 7)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v31 = *((void *)a2 + 3);
    if (v31)
    {
      (*(void (**)(uint64_t))(*(void *)v31 + 16))(v31);
      uint64_t v32 = *(void *)a2;
      uint64_t v33 = *((void *)a2 + 1);
      uint64_t v34 = *((void *)a2 + 3);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      if (v34)
      {
        if (v33) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32);
        }
      }
    }
LABEL_49:
    uint64_t v52 = *(void *)a2;
    uint64_t v53 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v54 = *((void *)a2 + 3);
    if (v54 && v53) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v54 + 16))(v54, v52);
    }
LABEL_50:
    uint64_t v55 = *(void *)a2;
    uint64_t v56 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v57 = *((void *)a2 + 3);
    if (v57)
    {
      if (v56) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v57 + 16))(v57, v55);
      }
    }
    return IPC::Connection::cancelReply<Messages::WebPage::CompleteTextManipulation,WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(*(void *)(a1 + 8));
  }
  uint64_t v10 = (unint64_t *)((unint64_t)(v6 + 8) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = *v10;
  *((void *)a2 + 2) = v10 + 1;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  if (v11 >= 0x6666)
  {
    do
    {
      IPC::Decoder::decode<WebCore::TextManipulationControllerManipulationFailure>((uint64_t)&v65, a2);
      if (!v68) {
        goto LABEL_47;
      }
      int v35 = HIDWORD(v70);
      if (HIDWORD(v70) == v70)
      {
        unint64_t v36 = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v69, HIDWORD(v70) + 1, (unint64_t)&v65);
        int v37 = HIDWORD(v70);
        unint64_t result = (WTF *)v69;
        uint64_t v38 = v69 + 40 * HIDWORD(v70);
        uint64_t v39 = *(void *)(v36 + 32);
        long long v40 = *(_OWORD *)(v36 + 16);
        *(_OWORD *)uint64_t v38 = *(_OWORD *)v36;
        *(_OWORD *)(v38 + 16) = v40;
        *(void *)(v38 + 32) = v39;
        int v35 = v37;
      }
      else
      {
        unint64_t result = (WTF *)v69;
        uint64_t v41 = v69 + 40 * HIDWORD(v70);
        long long v42 = v65;
        long long v43 = v66;
        *(void *)(v41 + 32) = v67;
        *(_OWORD *)uint64_t v41 = v42;
        *(_OWORD *)(v41 + 16) = v43;
      }
      uint64_t v44 = (v35 + 1);
      HIDWORD(v70) = v35 + 1;
      --v11;
    }
    while (v11);
    unsigned int v24 = v70;
    if (v70 > v44)
    {
      uint64_t v45 = result;
      if (!v44) {
        goto LABEL_57;
      }
      if (v44 >= 0x6666667)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v46 = 40 * v44;
      unint64_t result = (WTF *)WTF::fastMalloc((WTF *)(40 * v44));
      unsigned int v24 = (v46 & 0xFFFFFFF8) / 0x28;
      LODWORD(v70) = v24;
      uint64_t v69 = (uint64_t)result;
      if (result == v45)
      {
LABEL_57:
        uint64_t v69 = 0;
        LODWORD(v70) = 0;
      }
      else
      {
        uint64_t v47 = 0;
        do
        {
          char v48 = (char *)result + v47;
          long long v49 = *(_OWORD *)((char *)v45 + v47);
          long long v50 = *(_OWORD *)((char *)v45 + v47 + 16);
          *((void *)v48 + 4) = *(void *)((char *)v45 + v47 + 32);
          *(_OWORD *)char v48 = v49;
          *((_OWORD *)v48 + 1) = v50;
          v47 += 40;
        }
        while (v46 != v47);
        if (!v45) {
          goto LABEL_59;
        }
      }
      WTF::fastFree(v45, v12);
      unint64_t result = (WTF *)v69;
      unsigned int v24 = v70;
    }
LABEL_59:
    int v23 = HIDWORD(v70);
    goto LABEL_23;
  }
  if (v11)
  {
    LODWORD(v70) = 40 * (int)v11 / 0x28u;
    uint64_t v69 = WTF::fastMalloc((WTF *)(40 * v11));
    while (1)
    {
      IPC::Decoder::decode<WebCore::TextManipulationControllerManipulationFailure>((uint64_t)&v65, a2);
      if (!v68) {
        break;
      }
      int v13 = HIDWORD(v70);
      if (HIDWORD(v70) == v70)
      {
        unint64_t v14 = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v69, HIDWORD(v70) + 1, (unint64_t)&v65);
        int v15 = HIDWORD(v70);
        unint64_t result = (WTF *)v69;
        uint64_t v17 = v69 + 40 * HIDWORD(v70);
        uint64_t v18 = *(void *)(v14 + 32);
        long long v19 = *(_OWORD *)(v14 + 16);
        *(_OWORD *)uint64_t v17 = *(_OWORD *)v14;
        *(_OWORD *)(v17 + 16) = v19;
        *(void *)(v17 + 32) = v18;
        int v13 = v15;
      }
      else
      {
        unint64_t result = (WTF *)v69;
        uint64_t v20 = v69 + 40 * HIDWORD(v70);
        long long v21 = v65;
        long long v22 = v66;
        *(void *)(v20 + 32) = v67;
        *(_OWORD *)uint64_t v20 = v21;
        *(_OWORD *)(v20 + 16) = v22;
      }
      int v23 = v13 + 1;
      HIDWORD(v70) = v13 + 1;
      if (!--v11)
      {
        unsigned int v24 = v70;
        goto LABEL_23;
      }
    }
LABEL_47:
    uint64_t v51 = (WTF *)v69;
    if (v69)
    {
      uint64_t v69 = 0;
      LODWORD(v70) = 0;
      WTF::fastFree(v51, v12);
    }
    goto LABEL_49;
  }
  int v23 = 0;
  unsigned int v24 = 0;
  unint64_t result = 0;
LABEL_23:
  uint64_t v61 = result;
  unsigned int v62 = v24;
  int v63 = v23;
  char v64 = 1;
  unint64_t result = (WTF *)(*(uint64_t (**)(void, BOOL, WTF **))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), v7 != 0, &v61);
  if (v64)
  {
    unint64_t result = v61;
    if (v61)
    {
      uint64_t v61 = 0;
      unsigned int v62 = 0;
      return (WTF *)WTF::fastFree(result, v26);
    }
  }
  return result;
}

WTF *IPC::Connection::cancelReply<Messages::WebPage::CompleteTextManipulation,WTF::Function<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t a1)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  (*(void (**)(uint64_t, void, WTF **))(*(void *)a1 + 16))(a1, 0, &v3);
  unint64_t result = v3;
  if (v3)
  {
    uint64_t v3 = 0;
    LODWORD(v4) = 0;
    return (WTF *)WTF::fastFree(result, v1);
  }
  return result;
}

void *IPC::Decoder::decode<WebCore::TextManipulationControllerManipulationFailure>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::TextManipulationControllerManipulationFailure,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 40))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t result = (void *)*((void *)a2 + 3);
    if (result && v5 != 0)
    {
      unsigned int v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetOverriddenMediaType>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  unint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v8 = 2455;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetIsTakingSnapshotsForApplicationSuspension>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  unint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v8 = 2440;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetNeedsDOMWindowResizeEvent>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unsigned int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v7 = 2453;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetProcessDisplayName,WTF::CompletionHandler<void ()(WTF::String &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2268;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  unsigned int v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  int v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v13 = &unk_1EE9DBA60;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  unsigned int v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetProcessDisplayName,WTF::CompletionHandler<void ()(WTF::String &&)>>(WTF::CompletionHandler<void ()(WTF::String &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DBA60;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetProcessDisplayName,WTF::CompletionHandler<void ()(WTF::String &&)>>(WTF::CompletionHandler<void ()(WTF::String &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DBA60;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetProcessDisplayName,WTF::CompletionHandler<void ()(WTF::String &&)>>(WTF::CompletionHandler<void ()(WTF::String &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v3 + 16))(v3, &v7);
      unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        unint64_t result = v7;
        unsigned int v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::GetProcessDisplayName,WTF::CompletionHandler<void ()(WTF::String &&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::GetProcessDisplayName,WTF::CompletionHandler<void ()(WTF::String &&)>>(v6);
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebPage::GetProcessDisplayName,WTF::CompletionHandler<void ()(WTF::String &&)>>(uint64_t *a1)
{
  uint64_t v4 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  unint64_t result = v4;
  uint64_t v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetLoadedSubresourceDomains,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2264;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  unsigned int v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  int v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v13 = &unk_1EE9DBA88;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  unsigned int v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetLoadedSubresourceDomains,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DBA88;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetLoadedSubresourceDomains,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DBA88;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetLoadedSubresourceDomains,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v7);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8) {
        return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::GetLoadedSubresourceDomains,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::GetLoadedSubresourceDomains,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v6);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::GetLoadedSubresourceDomains,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t *a1)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v6 != 0)
    {
      char v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v8);
  char v6 = v10;
  if (v10)
  {
    *(void *)a3 = v8;
    uint64_t v7 = v9;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    *(void *)(a3 + 8) = v7;
    uint64_t result = WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
    char v6 = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 16) = v6;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ClearLoadedSubresourceDomains>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2167;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ModelInlinePreviewDidLoad>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2320;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ModelInlinePreviewDidFailToLoad>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2319;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v8, *(WebCore::ResourceError **)(a2 + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AppPrivacyReportTestingData,WTF::CompletionHandler<void ()(WebKit::AppPrivacyReportTestingData const&)>>(WTF::CompletionHandler<void ()(WebKit::AppPrivacyReportTestingData const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DBAD8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AppPrivacyReportTestingData,WTF::CompletionHandler<void ()(WebKit::AppPrivacyReportTestingData const&)>>(WTF::CompletionHandler<void ()(WebKit::AppPrivacyReportTestingData const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DBAD8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AppPrivacyReportTestingData,WTF::CompletionHandler<void ()(WebKit::AppPrivacyReportTestingData const&)>>(WTF::CompletionHandler<void ()(WebKit::AppPrivacyReportTestingData const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned int v4 = IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::decode(a2);
    if (HIBYTE(v4))
    {
      int v15 = v4 & 0xFFFFFF | 0x1000000;
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, int *))(*(void *)v5 + 16))(v5, &v15);
    }
    else
    {
      uint64_t v7 = *a2;
      uint64_t v8 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v9 = a2[3];
      if (v9)
      {
        if (v8)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
          uint64_t v10 = *a2;
          uint64_t v11 = a2[1];
          uint64_t v12 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          if (v12)
          {
            if (v11) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
            }
          }
        }
      }
      char v17 = 0;
      __int16 v16 = 0;
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, __int16 *))(*(void *)v5 + 16))(v5, &v16);
    }
  }
  else
  {
    char v14 = 0;
    __int16 v13 = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, __int16 *))(*(void *)v5 + 16))(v5, &v13);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearAppPrivacyReportTestingData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DBB00;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearAppPrivacyReportTestingData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DBB00;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearAppPrivacyReportTestingData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::beginTextRecognitionForVideoInElementFullScreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect)::$_0,void,std::optional<WebCore::ShareableBitmapHandle> &&>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DBB28;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::beginTextRecognitionForVideoInElementFullScreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect)::$_0,void,std::optional<WebCore::ShareableBitmapHandle> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DBB28;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::beginTextRecognitionForVideoInElementFullScreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect)::$_0,void,std::optional<WebCore::ShareableBitmapHandle> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      if (*(unsigned char *)(v3 + 1376) && *(unsigned char *)(a2 + 64))
      {
        uint64_t v6 = *(void *)(v3 + 24);
        if (v6) {
          uint64_t v7 = *(void *)(v6 + 8);
        }
        else {
          uint64_t v7 = 0;
        }
        (*(void (**)(uint64_t))(*(void *)v7 + 1592))(v7);
        if (!*(unsigned char *)(a2 + 64))
        {
          __break(1u);
          return;
        }
        (*(void (**)(uint64_t, uint64_t, float, float, float, float))(*(void *)v7 + 1192))(v7, a2, *(float *)(a1 + 16), *(float *)(a1 + 20), *(float *)(a1 + 24), *(float *)(a1 + 28));
        (*(void (**)(uint64_t))(*(void *)v7 + 1600))(v7);
        *(unsigned char *)(v3 + 1376) = 0;
      }
      uint64_t v8 = *(const void **)(v3 - 8);
      CFRelease(v8);
    }
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ShouldAllowRemoveBackground,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2486;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  char v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v14 = &unk_1EE9DBB50;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  long long v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ShouldAllowRemoveBackground,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DBB50;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ShouldAllowRemoveBackground,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DBB50;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ShouldAllowRemoveBackground,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GenerateTestReport>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2255;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::updateAllowedQueryParametersForAdvancedPrivacyProtectionsIfNeeded(void)::$_0,void,WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DBB78;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::updateAllowedQueryParametersForAdvancedPrivacyProtectionsIfNeeded(void)::$_0,void,WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DBB78;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::updateAllowedQueryParametersForAdvancedPrivacyProtectionsIfNeeded(void)::$_0,void,WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(WebKit::WebPageProxy *a1, _DWORD *a2)
{
  ParametersForAdvancedPrivacyProtections = (WebKit::WebPageProxy *)WebKit::WebPageProxy::cachedAllowedQueryParametersForAdvancedPrivacyProtections(a1, a2);
  if (!dword_1EB359C94)
  {
    WebKit::WebPageProxy::cachedAllowedQueryParametersForAdvancedPrivacyProtections(ParametersForAdvancedPrivacyProtections, v5);
    if (dword_1EB359C94) {
      WTF::VectorDestructor<true,WebCore::LinkDecorationFilteringData>::destruct((WTF::StringImpl *)qword_1EB359C88, (WTF::StringImpl *)(qword_1EB359C88 + 24 * dword_1EB359C94));
    }
    uint64_t v6 = WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt((uint64_t)&qword_1EB359C88, a2);
    WebKit::WebPageProxy::cachedAllowedQueryParametersForAdvancedPrivacyProtections(v6, v7);
    WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&qword_1EB359C88, dword_1EB359C94);
  }
  uint64_t v8 = *((void *)a1 + 1);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9)
    {
      uint64_t v10 = (WebKit::WebPageProxy *)CFRetain(*(CFTypeRef *)(v9 - 8));
      if (!*(unsigned char *)(v9 + 785) && *(unsigned char *)(v9 + 784))
      {
        WebKit::WebPageProxy::cachedAllowedQueryParametersForAdvancedPrivacyProtections(v10, v11);
        uint64_t v12 = *(void *)(v9 + 240);
        uint64_t v13 = *(void *)(*(void *)(v9 + 16) + 1928);
        char v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)char v14 = 2406;
        *((void *)v14 + 1) = v13;
        *((void *)v14 + 66) = (char *)v14 + 16;
        *((void *)v14 + 67) = 512;
        *((void *)v14 + 68) = 0;
        *((void *)v14 + 70) = 0;
        *((void *)v14 + 69) = 0;
        IPC::Encoder::encodeHeader(v14);
        long long v22 = v14;
        IPC::VectorArgumentCoder<false,WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v14, (uint64_t)&qword_1EB359C88);
        LOBYTE(v20) = 0;
        char v21 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v22, 0, (uint64_t)&v20, 1);
        if (v21)
        {
          uint64_t v16 = v20;
          uint64_t v20 = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
        }
        char v17 = v22;
        long long v22 = 0;
        if (v17)
        {
          IPC::Encoder::~Encoder(v17, v15);
          WTF::fastFree(v18, v19);
        }
      }
      CFRelease(*(CFTypeRef *)(v9 - 8));
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::waitForInitialLinkDecorationFilteringData(WebKit::WebFramePolicyListenerProxy &)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DBBA0;
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::waitForInitialLinkDecorationFilteringData(WebKit::WebFramePolicyListenerProxy &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DBBA0;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::waitForInitialLinkDecorationFilteringData(WebKit::WebFramePolicyListenerProxy &)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebFramePolicyListenerProxy::didReceiveInitialLinkDecorationFilteringData(*(void *)(a1 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::PauseAllAnimations,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2329;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v13 = &unk_1EE9DBBC8;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PauseAllAnimations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DBBC8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PauseAllAnimations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DBBC8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PauseAllAnimations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::PlayAllAnimations,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2338;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v13 = &unk_1EE9DBBF0;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PlayAllAnimations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DBBF0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PlayAllAnimations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DBBF0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PlayAllAnimations,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 16 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          uint64_t v24 = v15 + 16 * v22;
          std::unique_ptr<WebCore::SleepDisabler>::reset[abi:sn180100]((WebCore::SleepDisabler **)(v24 + 8), 0);
          *(void *)uint64_t v24 = *v13;
          uint64_t v25 = v6 + 16 * v11;
          uint64_t v26 = *(void *)(v25 + 8);
          v25 += 8;
          *(void *)uint64_t v25 = 0;
          *(void *)(v24 + 8) = v26;
          std::unique_ptr<WebCore::SleepDisabler>::reset[abi:sn180100]((WebCore::SleepDisabler **)v25, 0);
          if (v13 == a3) {
            uint64_t v12 = v24;
          }
        }
        else
        {
          std::unique_ptr<WebCore::SleepDisabler>::reset[abi:sn180100]((WebCore::SleepDisabler **)(v6 + 16 * v11 + 8), 0);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WebCore::SleepDisabler *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, uint64_t a2)
{
  *(void *)a2 = -1;
  uint64_t result = std::unique_ptr<WebCore::SleepDisabler>::reset[abi:sn180100]((WebCore::SleepDisabler **)(a2 + 8), 0);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WebCore::SleepDisabler *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UseRedirectionForCurrentNavigation>(uint64_t a1, WebCore::ResourceResponseBase **a2, uint64_t a3, char a4)
{
  unsigned int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v8 = 2540;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  unint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::OptionSet<WebCore::WindowProxyProperty>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::OptionSet<WebCore::WindowProxyProperty>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::OptionSet<WebCore::WindowProxyProperty>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::OptionSet<WebCore::WindowProxyProperty>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    int v4 = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
    if (v4)
    {
      unsigned int v6 = v4 << (6 * v5 >= (2 * v4));
      goto LABEL_6;
    }
  }
  else
  {
    int v4 = 0;
    int v5 = 0;
  }
  unsigned int v6 = 8;
LABEL_6:
  uint64_t v7 = WTF::fastMalloc((WTF *)(16 * v6 + 16));
  if (v6)
  {
    uint64_t v10 = v6;
    uint64_t v11 = (unsigned char *)(v7 + 24);
    do
    {
      *((void *)v11 - 1) = 0;
      *uint64_t v11 = 0;
      v11 += 16;
      --v10;
    }
    while (v10);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = v6;
  *(_DWORD *)(*a1 - 8) = v6 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = (WTF::ASCIICaseInsensitiveHash **)(v3 + 16 * v12);
      if (*v14 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v14, 0, v9))
        {
          uint64_t v15 = *v14;
          *uint64_t v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v8);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
        }
        else
        {
          uint64_t v16 = *a1;
          if (*a1) {
            unsigned int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            unsigned int v17 = 0;
          }
          int v18 = WTF::ASCIICaseInsensitiveHash::hash(*v14, v8);
          int v19 = 0;
          do
          {
            uint64_t v20 = v18 & v17;
            int v21 = WTF::equal(*(WTF **)(v16 + 16 * v20), 0, v9);
            int v18 = ++v19 + v20;
          }
          while (!v21);
          uint64_t v22 = v16 + 16 * v20;
          uint64_t v23 = *(WTF::StringImpl **)v22;
          *(void *)uint64_t v22 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v8);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
          uint64_t v24 = *v14;
          *uint64_t v14 = 0;
          *(void *)uint64_t v22 = v24;
          *(unsigned char *)(v22 + 8) = *(unsigned char *)(v3 + 16 * v12 + 8);
          uint64_t v25 = *v14;
          *uint64_t v14 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2) {
              WTF::StringImpl::destroy(v25, v8);
            }
            else {
              *(_DWORD *)v25 -= 2;
            }
          }
          if (v14 == a2) {
            uint64_t v13 = v22;
          }
        }
      }
      ++v12;
    }
    while (v12 != v4);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
    if (!v3) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v3 - 16), v8);
  return v13;
}

void WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::DispatchLoadEventToFrameOwnerElement>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::DispatchLoadEventToFrameOwnerElement &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::DispatchLoadEventToFrameOwnerElement&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)a2, *(void *)(a2 + 8));
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      uint64_t v7 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(a1 + 1416), (const WebKit::WebPageProxy *)a1, *(const WebKit::WebProcessProxy **)(*(void *)(v6 + 32) + 16));
      if (v7)
      {
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DispatchLoadEventToFrameOwnerElement>(*(void *)(v7 + 24), *(uint64_t ***)a3, *(void *)(v7 + 16), *(unsigned char *)(a3 + 8));
        unsigned int v8 = *(const void **)(v6 + 8);
        CFRelease(v8);
        return;
      }
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
  uint64_t v9 = *(void *)(a1 + 256);
  uint64_t v10 = *(uint64_t ***)a3;
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 1928);
  char v12 = *(unsigned char *)(a3 + 8);

  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DispatchLoadEventToFrameOwnerElement>(v9, v10, v11, v12);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DispatchLoadEventToFrameOwnerElement>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  unsigned int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v8 = 2218;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::broadcastFocusedFrameToOtherProcesses(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::call(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 144);
  if (v3 && v3 != *((void *)result + 1))
  {
    uint64_t v6 = (uint64_t *)*((void *)result + 2);
    uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v7 = 2251;
    *((void *)v7 + 1) = a3;
    *((void *)v7 + 66) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    uint64_t v14 = v7;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v7, v6);
    LOBYTE(v12) = 0;
    char v13 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v14, 0, (uint64_t)&v12, 1);
    if (v13)
    {
      uint64_t v9 = v12;
      uint64_t v12 = 0;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
    }
    uint64_t result = v14;
    uint64_t v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (IPC::Encoder *)WTF::fastFree(v10, v11);
    }
  }
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RemotePostMessage>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unsigned int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v8 = 2352;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v16 = v8;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WebCore::SecurityOriginData> const&,WebCore::MessageWithMessagePorts const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WebCore::SecurityOriginData> const&,WebCore::MessageWithMessagePorts const&>,0ul,1ul,2ul,3ul,4ul>(v8, a2);
  LOBYTE(v14) = 0;
  char v15 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v16, a4, (uint64_t)&v14, 1);
  if (v15)
  {
    uint64_t v10 = v14;
    uint64_t v14 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WebCore::SecurityOriginData> const&,WebCore::MessageWithMessagePorts const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WebCore::SecurityOriginData> const&,WebCore::MessageWithMessagePorts const&>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(a1, *(void *)(a2 + 24));
  int v4 = *(uint64_t **)(a2 + 32);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>(a1, v4);

  return IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v4 + 1));
}

IPC::Decoder *WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::RenderTreeAsTextForTesting>(IPC::Decoder *result, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5 = result;
  if (!*(void *)(a2 + 144))
  {
    *(unsigned char *)uint64_t result = 1;
    *((_DWORD *)result + 4) = 1;
    return result;
  }
  kdebug_trace();
  uint64_t v10 = *(void *)(a2 + 144);
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x198EC7E24);
  }
  uint64_t v25 = 0;
  IPC::Connection::createSyncMessageEncoder(3789, a4, &v25, &v24);
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag> const&>,0ul,1ul,2ul>(v24, a3);
  IPC::Connection::sendSyncMessage(v10, v25, (uint64_t *)&v24, 0, (uint64_t)&v22, a5);
  if (v23)
  {
    if (v23 == 1)
    {
      *(unsigned char *)uint64_t v5 = (_BYTE)v22;
      int v11 = 1;
      *((_DWORD *)v5 + 4) = 1;
LABEL_11:
      ((void (*)(uint64_t *, IPC::Decoder **))off_1EE9D9AC8[v11])(&v20, &v22);
      goto LABEL_12;
    }
    goto LABEL_18;
  }
  LOBYTE(v20) = 0;
  char v21 = 0;
  IPC::Decoder::operator>><std::tuple<WTF::String>>(v22, &v20);
  if (v21)
  {
    int v11 = v23;
    if (!v23)
    {
      char v13 = v22;
      uint64_t v22 = 0;
      uint64_t v14 = v20;
      *(void *)uint64_t v5 = v13;
      *((void *)v5 + 1) = v14;
      *((_DWORD *)v5 + 4) = 0;
      goto LABEL_11;
    }
LABEL_18:
    int v18 = (IPC::Decoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Decoder::operator>><std::tuple<WTF::String>>(v18, v19);
  }
  *(unsigned char *)uint64_t v5 = 13;
  *((_DWORD *)v5 + 4) = 1;
  int v11 = v23;
  if (v23 != -1) {
    goto LABEL_11;
  }
LABEL_12:
  char v15 = v24;
  uint64_t v24 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v12);
    WTF::fastFree(v16, v17);
  }

  return (IPC::Decoder *)kdebug_trace();
}

IPC::Decoder *IPC::Decoder::operator>><std::tuple<WTF::String>>(IPC::Decoder *a1, uint64_t *a2)
{
  IPC::Decoder::decode<std::tuple<WTF::String>>(a1, (uint64_t)&v7);
  std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>(a2, (uint64_t *)&v7);
  if (v8)
  {
    uint64_t v5 = v7;
    uint64_t v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 8));
  __int16 v4 = **(_WORD **)(a2 + 16);

  return IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::FrameTextForTesting>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4, double a5)
{
  uint64_t v5 = result;
  if (!*(void *)(a2 + 144))
  {
    *(unsigned char *)uint64_t result = 1;
    *(_DWORD *)(result + 16) = 1;
    return result;
  }
  kdebug_trace();
  uint64_t v10 = *(void *)(a2 + 144);
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x198EC80CCLL);
  }
  uint64_t v24 = 0;
  IPC::Connection::createSyncMessageEncoder(3785, a4, &v24, &v23);
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v23, *a3);
  IPC::Connection::sendSyncMessage(v10, v24, (uint64_t *)&v23, 0, (uint64_t)&v21, a5);
  if (v22)
  {
    if (v22 == 1)
    {
      *(unsigned char *)uint64_t v5 = (_BYTE)v21;
      int v11 = 1;
      *(_DWORD *)(v5 + 16) = 1;
LABEL_11:
      ((void (*)(uint64_t *, IPC::Decoder **))off_1EE9D9AC8[v11])(&v19, &v21);
      goto LABEL_12;
    }
    goto LABEL_18;
  }
  LOBYTE(v19) = 0;
  char v20 = 0;
  IPC::Decoder::operator>><std::tuple<WTF::String>>(v21, &v19);
  if (v20)
  {
    int v11 = v22;
    if (!v22)
    {
      char v13 = v21;
      char v21 = 0;
      uint64_t v14 = v19;
      *(void *)uint64_t v5 = v13;
      *(void *)(v5 + 8) = v14;
      *(_DWORD *)(v5 + 16) = 0;
      goto LABEL_11;
    }
LABEL_18:
    uint64_t v18 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestTargetedElement,WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0>(WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(v18);
  }
  *(unsigned char *)uint64_t v5 = 13;
  *(_DWORD *)(v5 + 16) = 1;
  int v11 = v22;
  if (v22 != -1) {
    goto LABEL_11;
  }
LABEL_12:
  char v15 = v23;
  int v23 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v12);
    WTF::fastFree(v16, v17);
  }

  return kdebug_trace();
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestTargetedElement,WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0>(WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DBC40;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestTargetedElement,WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0>(WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DBC40;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestTargetedElement,WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0>(WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (!a2 || (uint64_t v4 = (WTF::StringImpl *)*a2) == 0)
  {
LABEL_43:
    long long v59 = 0uLL;
    WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0::operator()(v2, (uint64_t)&v59);
    unint64_t v27 = (WTF::StringImpl **)&v59;
    goto LABEL_44;
  }
  unint64_t v5 = a2[1];
  unint64_t v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v4;
  if (v5 < v6 || v5 - v6 <= 7)
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t v28 = a2[3];
    if (v28)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v28 + 16))(v28);
        uint64_t v29 = *a2;
        uint64_t v30 = a2[1];
        uint64_t v31 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v31)
        {
          if (v30) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v29);
          }
        }
      }
    }
LABEL_39:
    uint64_t v47 = *a2;
    uint64_t v48 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v49 = a2[3];
    if (v49)
    {
      if (v48)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v49 + 16))(v49, v47);
        uint64_t v50 = *a2;
        uint64_t v48 = a2[1];
        uint64_t v49 = a2[3];
LABEL_42:
        *a2 = 0;
        a2[1] = 0;
        if (v49)
        {
          if (v48) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v49 + 16))(v49, v50);
          }
        }
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v48 = 0;
    }
    uint64_t v50 = 0;
    goto LABEL_42;
  }
  char v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = *v8;
  a2[2] = (uint64_t)(v8 + 1);
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  if (v9 >= 0x1745)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::TargetedElementInfo>((uint64_t)&v59, a2);
      if (!v78) {
        goto LABEL_38;
      }
      int v32 = HIDWORD(v58);
      if (HIDWORD(v58) == v58)
      {
        WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TargetedElementInfo>((unsigned int *)&v57, (unint64_t)&v59);
      }
      else
      {
        uint64_t v33 = (char *)v57 + 176 * HIDWORD(v58);
        long long v34 = v59;
        long long v35 = v60;
        long long v36 = v61;
        *((_DWORD *)v33 + 12) = v62;
        *((_OWORD *)v33 + 1) = v35;
        *((_OWORD *)v33 + 2) = v36;
        *(_OWORD *)uint64_t v33 = v34;
        uint64_t v37 = v63;
        uint64_t v63 = 0;
        *((void *)v33 + 7) = v37;
        uint64_t v38 = v64;
        uint64_t v64 = 0;
        *((void *)v33 + 8) = v38;
        uint64_t v39 = v65;
        uint64_t v65 = 0;
        *((void *)v33 + 10) = 0;
        *((void *)v33 + 11) = 0;
        *((void *)v33 + 9) = v39;
        uint64_t v40 = v66;
        uint64_t v66 = 0;
        *((void *)v33 + 10) = v40;
        LODWORD(v40) = v67;
        int v67 = 0;
        *((_DWORD *)v33 + 22) = v40;
        LODWORD(v40) = v68;
        int v68 = 0;
        *((_DWORD *)v33 + 23) = v40;
        long long v41 = v69;
        long long v42 = v70;
        v33[128] = v71;
        *((_OWORD *)v33 + 6) = v41;
        *((_OWORD *)v33 + 7) = v42;
        *((void *)v33 + 17) = 0;
        *((void *)v33 + 18) = 0;
        uint64_t v43 = v72;
        uint64_t v72 = 0;
        *((void *)v33 + 17) = v43;
        LODWORD(v43) = v73;
        int v73 = 0;
        *((_DWORD *)v33 + 36) = v43;
        LODWORD(v43) = v74;
        int v74 = 0;
        *((_DWORD *)v33 + 37) = v43;
        *((void *)v33 + 19) = 0;
        uint64_t v44 = v75;
        uint64_t v75 = 0;
        *((void *)v33 + 19) = v44;
        LODWORD(v44) = v76;
        *((_WORD *)v33 + 82) = v77;
        *((_DWORD *)v33 + 40) = v44;
        HIDWORD(v58) = v32 + 1;
      }
      if (v78) {
        WebCore::TargetedElementInfo::~TargetedElementInfo((WebCore::TargetedElementInfo *)&v59, v4);
      }
      if (!--v9)
      {
        LODWORD(v9) = v58;
        unsigned int v24 = HIDWORD(v58);
        int v23 = v57;
        if (v58 <= HIDWORD(v58)) {
          goto LABEL_20;
        }
        uint64_t v45 = v57;
        if (HIDWORD(v58))
        {
          if (HIDWORD(v58) >= 0x1745D18)
          {
            __break(0xC471u);
            return;
          }
          uint64_t v46 = WTF::fastMalloc((WTF *)(176 * HIDWORD(v58)));
          LODWORD(v9) = 176 * v24 / 0xB0;
          if ((WTF::StringImpl *)v46 == v23)
          {
            uint64_t v45 = v23;
          }
          else
          {
            uint64_t v45 = (WTF *)v46;
            WTF::VectorMover<false,WebCore::TargetedElementInfo>::move(v23, (WTF::StringImpl *)((char *)v23 + 176 * v24), v46);
          }
        }
        if (v23)
        {
          if (v45 == v23)
          {
            LODWORD(v9) = 0;
            uint64_t v45 = 0;
          }
          WTF::fastFree(v23, v4);
        }
        int v23 = v45;
        goto LABEL_20;
      }
    }
  }
  if (v9)
  {
    LODWORD(v58) = 176 * (int)v9 / 0xB0u;
    uint64_t v57 = (WTF *)WTF::fastMalloc((WTF *)(176 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebCore::TargetedElementInfo>((uint64_t)&v59, a2);
      if (!v78) {
        break;
      }
      int v10 = HIDWORD(v58);
      if (HIDWORD(v58) == v58)
      {
        WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TargetedElementInfo>((unsigned int *)&v57, (unint64_t)&v59);
      }
      else
      {
        int v11 = (char *)v57 + 176 * HIDWORD(v58);
        long long v12 = v59;
        long long v13 = v60;
        long long v14 = v61;
        *((_DWORD *)v11 + 12) = v62;
        *((_OWORD *)v11 + 1) = v13;
        *((_OWORD *)v11 + 2) = v14;
        *(_OWORD *)int v11 = v12;
        uint64_t v15 = v63;
        uint64_t v63 = 0;
        *((void *)v11 + 7) = v15;
        uint64_t v16 = v64;
        uint64_t v64 = 0;
        *((void *)v11 + 8) = v16;
        uint64_t v17 = v65;
        uint64_t v65 = 0;
        *((void *)v11 + 10) = 0;
        *((void *)v11 + 11) = 0;
        *((void *)v11 + 9) = v17;
        uint64_t v18 = v66;
        uint64_t v66 = 0;
        *((void *)v11 + 10) = v18;
        LODWORD(v18) = v67;
        int v67 = 0;
        *((_DWORD *)v11 + 22) = v18;
        LODWORD(v18) = v68;
        int v68 = 0;
        *((_DWORD *)v11 + 23) = v18;
        long long v19 = v69;
        long long v20 = v70;
        v11[128] = v71;
        *((_OWORD *)v11 + 6) = v19;
        *((_OWORD *)v11 + 7) = v20;
        *((void *)v11 + 17) = 0;
        *((void *)v11 + 18) = 0;
        uint64_t v21 = v72;
        uint64_t v72 = 0;
        *((void *)v11 + 17) = v21;
        LODWORD(v21) = v73;
        int v73 = 0;
        *((_DWORD *)v11 + 36) = v21;
        LODWORD(v21) = v74;
        int v74 = 0;
        *((_DWORD *)v11 + 37) = v21;
        *((void *)v11 + 19) = 0;
        uint64_t v22 = v75;
        uint64_t v75 = 0;
        *((void *)v11 + 19) = v22;
        LODWORD(v22) = v76;
        *((_WORD *)v11 + 82) = v77;
        *((_DWORD *)v11 + 40) = v22;
        HIDWORD(v58) = v10 + 1;
      }
      if (v78) {
        WebCore::TargetedElementInfo::~TargetedElementInfo((WebCore::TargetedElementInfo *)&v59, v4);
      }
      if (!--v9)
      {
        int v23 = v57;
        LODWORD(v9) = v58;
        unsigned int v24 = HIDWORD(v58);
        goto LABEL_20;
      }
    }
LABEL_38:
    WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v4);
    goto LABEL_39;
  }
  unsigned int v24 = 0;
  int v23 = 0;
LABEL_20:
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  char v56 = 1;
  WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v4);
  v55[0] = 0;
  v55[1] = 0;
  uint64_t v51 = v23;
  int v52 = v9;
  unsigned int v53 = v24;
  WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v55, v25);
  char v54 = 1;
  WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0::operator()(v2, (uint64_t)&v51);
  unint64_t v27 = &v51;
LABEL_44:
  WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v26);
}

void IPC::Decoder::decode<WebCore::TargetedElementInfo>(uint64_t a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebCore::TargetedElementInfo,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 176))
  {
    uint64_t v4 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v5 = a2[3];
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

__n128 WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TargetedElementInfo>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = *(void *)a1 + 176 * a1[3];
  long long v5 = *(_OWORD *)v3;
  long long v6 = *(_OWORD *)(v3 + 16);
  long long v7 = *(_OWORD *)(v3 + 32);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(v3 + 48);
  *(_OWORD *)(v4 + 16) = v6;
  *(_OWORD *)(v4 + 32) = v7;
  *(_OWORD *)uint64_t v4 = v5;
  uint64_t v8 = *(void *)(v3 + 56);
  *(void *)(v3 + 56) = 0;
  *(void *)(v4 + 56) = v8;
  uint64_t v9 = *(void *)(v3 + 64);
  *(void *)(v3 + 64) = 0;
  *(void *)(v4 + 64) = v9;
  uint64_t v10 = *(void *)(v3 + 72);
  *(void *)(v3 + 72) = 0;
  *(void *)(v4 + 72) = v10;
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 88) = 0;
  uint64_t v11 = *(void *)(v3 + 80);
  *(void *)(v3 + 80) = 0;
  *(void *)(v4 + 80) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 88);
  *(_DWORD *)(v3 + 88) = 0;
  *(_DWORD *)(v4 + 88) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 92);
  *(_DWORD *)(v3 + 92) = 0;
  *(_DWORD *)(v4 + 92) = v11;
  __n128 result = *(__n128 *)(v3 + 96);
  long long v13 = *(_OWORD *)(v3 + 112);
  *(unsigned char *)(v4 + 128) = *(unsigned char *)(v3 + 128);
  *(__n128 *)(v4 + 96) = result;
  *(_OWORD *)(v4 + 112) = v13;
  *(void *)(v4 + 136) = 0;
  *(void *)(v4 + 144) = 0;
  uint64_t v14 = *(void *)(v3 + 136);
  *(void *)(v3 + 136) = 0;
  *(void *)(v4 + 136) = v14;
  LODWORD(v14) = *(_DWORD *)(v3 + 144);
  *(_DWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v4 + 144) = v14;
  LODWORD(v14) = *(_DWORD *)(v3 + 148);
  *(_DWORD *)(v3 + 148) = 0;
  *(_DWORD *)(v4 + 148) = v14;
  *(void *)(v4 + 152) = 0;
  uint64_t v15 = *(void *)(v3 + 152);
  *(void *)(v3 + 152) = 0;
  *(void *)(v4 + 152) = v15;
  LODWORD(v15) = *(_DWORD *)(v3 + 160);
  *(_WORD *)(v4 + 164) = *(_WORD *)(v3 + 164);
  *(_DWORD *)(v4 + 160) = v15;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 176 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x1745D18)
    {
      __break(0xC471u);
      JUMPOUT(0x198EC8A3CLL);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)result + 176 * *((unsigned int *)result + 3));
    int v5 = 176 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(176 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF0) / 0xB0;
    *(void *)uint64_t v2 = v6;
    __n128 result = WTF::VectorMover<false,WebCore::TargetedElementInfo>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::TargetedElementInfo>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  for (; result != a2; a3 += 176)
  {
    long long v5 = *(_OWORD *)result;
    long long v6 = *((_OWORD *)result + 1);
    long long v7 = *((_OWORD *)result + 2);
    *(_DWORD *)(a3 + 48) = *((_DWORD *)result + 12);
    *(_OWORD *)(a3 + 16) = v6;
    *(_OWORD *)(a3 + 32) = v7;
    *(_OWORD *)a3 = v5;
    uint64_t v8 = *((void *)result + 7);
    *((void *)result + 7) = 0;
    *(void *)(a3 + 56) = v8;
    uint64_t v9 = *((void *)result + 8);
    *((void *)result + 8) = 0;
    *(void *)(a3 + 64) = v9;
    uint64_t v10 = *((void *)result + 9);
    *((void *)result + 9) = 0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 72) = v10;
    uint64_t v11 = *((void *)result + 10);
    *((void *)result + 10) = 0;
    *(void *)(a3 + 80) = v11;
    LODWORD(v11) = *((_DWORD *)result + 22);
    *((_DWORD *)result + 22) = 0;
    *(_DWORD *)(a3 + 88) = v11;
    LODWORD(v11) = *((_DWORD *)result + 23);
    *((_DWORD *)result + 23) = 0;
    *(_DWORD *)(a3 + 92) = v11;
    long long v12 = *((_OWORD *)result + 6);
    long long v13 = *((_OWORD *)result + 7);
    *(unsigned char *)(a3 + 128) = *((unsigned char *)result + 128);
    *(_OWORD *)(a3 + 96) = v12;
    *(_OWORD *)(a3 + 112) = v13;
    *(void *)(a3 + 136) = 0;
    *(void *)(a3 + 144) = 0;
    uint64_t v14 = *((void *)result + 17);
    *((void *)result + 17) = 0;
    *(void *)(a3 + 136) = v14;
    LODWORD(v14) = *((_DWORD *)result + 36);
    *((_DWORD *)result + 36) = 0;
    *(_DWORD *)(a3 + 144) = v14;
    LODWORD(v14) = *((_DWORD *)result + 37);
    *((_DWORD *)result + 37) = 0;
    *(_DWORD *)(a3 + 148) = v14;
    *(void *)(a3 + 152) = 0;
    uint64_t v15 = *((void *)result + 19);
    *((void *)result + 19) = 0;
    *(void *)(a3 + 152) = v15;
    LODWORD(v15) = *((_DWORD *)result + 40);
    *(_WORD *)(a3 + 164) = *((_WORD *)result + 82);
    *(_DWORD *)(a3 + 160) = v15;
    WebCore::TargetedElementInfo::~TargetedElementInfo(result, a2);
    __n128 result = (WTF::StringImpl *)(v16 + 176);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WebCore::TargetedElementInfo **)a1;
    uint64_t v5 = 176 * v3;
    do
    {
      WebCore::TargetedElementInfo::~TargetedElementInfo(v4, a2);
      uint64_t v4 = (WebCore::TargetedElementInfo *)(v6 + 176);
      v5 -= 176;
    }
    while (v5);
  }
  long long v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WebKit::WebPageProxy::requestTargetedElement(API::TargetedElementRequest const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::TargetedElementInfo,WTF::RawPtrTraits<API::TargetedElementInfo>,WTF::DefaultRefDerefTraits<API::TargetedElementInfo>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1[1];
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v4 - 8));
    CFRetain(*(CFTypeRef *)(v4 - 8));
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (!v6)
    {
LABEL_9:
      uint64_t v16 = *a1;
      *a1 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v16 + 16))(v16, &v20);
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v17);
      CFRelease(*(CFTypeRef *)(v4 - 8));
      CFRelease(*(CFTypeRef *)(v4 - 8));
      return;
    }
    if (!(v6 >> 29))
    {
      uint64_t v7 = WTF::fastMalloc((WTF *)(8 * v6));
      LODWORD(v21) = v6;
      uint64_t v20 = v7;
      unsigned int v8 = *(_DWORD *)(a2 + 12);
      if (v8)
      {
        uint64_t v9 = v7;
        uint64_t v10 = 0;
        uint64_t v11 = *(long long **)a2;
        uint64_t v12 = 176 * v8;
        do
        {
          uint64_t v13 = v10;
          uint64_t v14 = API::Object::newObject(0xD0uLL, 22);
          uint64_t v15 = API::TargetedElementInfo::TargetedElementInfo(v14, v4 - 16, v11);
          uint64_t v10 = v13 + 1;
          *(void *)(v9 + 8 * v13) = v15;
          v11 += 11;
          v12 -= 176;
        }
        while (v12);
        HIDWORD(v21) = v13 + 1;
      }
      goto LABEL_9;
    }
    __break(0xC471u);
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v18 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v18 + 16))(v18, &v20);
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v19);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::TakeSnapshotForTargetedElement,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2510;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DBC68;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  long long v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TakeSnapshotForTargetedElement,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DBC68;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TakeSnapshotForTargetedElement,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DBC68;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::MachSendRight *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TakeSnapshotForTargetedElement,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>(a2, v6);
    if (v7)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v6);
      __n128 result = (WTF::MachSendRight *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v7) {
        return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v6);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(v5);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestTextExtraction,WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2378;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::optional<WebCore::FloatRect>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatRect> const&>(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DBC90;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  long long v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestTextExtraction,WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)>>(WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DBC90;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestTextExtraction,WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)>>(WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DBC90;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestTextExtraction,WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)>>(WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<WebCore::TextExtraction::Item>(a2, (uint64_t)v20);
    char v5 = v24;
    v14[0] = 0;
    if (v24)
    {
      int v15 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,(std::__variant_detail::_Trait)1>>((uint64_t)v14, (uint64_t)v20);
      long long v16 = v21;
      uint64_t v17 = v22;
      uint64_t v6 = v23;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v18 = v6;
      char v5 = 1;
    }
    char v19 = v5;
    std::__optional_destruct_base<WebCore::TextExtraction::Item,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, v4);
    if (v19
      || (uint64_t v11 = *(void **)a2,
          uint64_t v12 = *((void *)a2 + 1),
          *(void *)a2 = 0,
          *((void *)a2 + 1) = 0,
          (uint64_t v13 = *((void *)a2 + 3)) != 0)
      && v12
      && ((*(void (**)(uint64_t, void *))(*(void *)v13 + 16))(v13, v11), v19))
    {
      uint64_t v9 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 16))(v9, v14);
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      return std::__optional_destruct_base<std::tuple<WebCore::TextExtraction::Item>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v10);
    }
    else
    {
      std::__optional_destruct_base<std::tuple<WebCore::TextExtraction::Item>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v11);
      return IPC::Connection::cancelReply<Messages::WebPage::RequestTextExtraction,WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)>>(v2);
    }
  }
  else
  {
    char v7 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::RequestTextExtraction,WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)>>(v7);
  }
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::RequestTextExtraction,WTF::CompletionHandler<void ()(WebCore::TextExtraction::Item &&)>>(uint64_t *a1)
{
  v4[0] = 0;
  int v5 = 0;
  long long v7 = 0u;
  long long v6 = 0u;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t result = WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v2);
  if (v5 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS7_12TextItemDataENS7_18ScrollableItemDataENS7_13ImageItemDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v5])(&v8, v4);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::TextExtraction::Item>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 120))
  {
    WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 104, a2);
    uint64_t v3 = *(unsigned int *)(a1 + 80);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS7_12TextItemDataENS7_18ScrollableItemDataENS7_13ImageItemDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix_0[v3])(&v5, a1);
    }
    *(_DWORD *)(a1 + 80) = -1;
  }
  return a1;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::AddConsoleMessage>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2135;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,0ul,1ul,2ul,3ul,4ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::RemoteScrollingCoordinator::ScrollPositionChangedForNode,WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0,unsigned long long>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, char a5)
{
  uint64_t v8 = *a4;
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 1366;
  *((void *)v10 + 1) = v8;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v20 = v10;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint> const&,BOOL>,0ul,1ul,2ul,3ul>(v10, a2);
  uint64_t v11 = *a3;
  *a3 = 0;
  LOBYTE(v10) = *((unsigned char *)a3 + 8);
  uint64_t v12 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v12 = &unk_1EE9DBCB8;
  *(void *)(v12 + 8) = v11;
  *(unsigned char *)(v12 + 16) = (_BYTE)v10;
  v18[0] = v12;
  v18[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v19 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v20, a5, (uint64_t)v18, 1);
  if (v19)
  {
    uint64_t v14 = v18[0];
    v18[0] = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  uint64_t result = v20;
  uint64_t v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint> const&,BOOL>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(a1, *(float **)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WebCore::FloatPoint>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatPoint> const&>(a1, *(void *)(a2 + 16));
  char v4 = *(unsigned char *)(a2 + 24);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::FloatPoint>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatPoint> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198EC98F4);
    }
    *unint64_t result = 1;
    if (*(unsigned char *)(a2 + 8))
    {
      return (unsigned char *)IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(a1, (float *)a2);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteScrollingCoordinator::ScrollPositionChangedForNode,WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0>(WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198EC9914);
    }
    *unint64_t result = 0;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteScrollingCoordinator::ScrollPositionChangedForNode,WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0>(WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DBCB8;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteScrollingCoordinator::ScrollPositionChangedForNode,WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0>(WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DBCB8;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WebCore::ScrollingTree *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteScrollingCoordinator::ScrollPositionChangedForNode,WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0>(WebKit::WebPageProxy::sendScrollPositionChangedForNode(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(WebCore::ScrollingTree *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t v2 = *(WebKit::RemoteScrollingCoordinatorProxy **)(v1 + 8);
    if (v2) {
      BOOL v3 = *((unsigned char *)result + 16) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    if (!v3) {
      return WebKit::RemoteScrollingCoordinatorProxy::receivedLastScrollingTreeNodeDidScrollReply(v2);
    }
  }
  return result;
}

IPC::Decoder *WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::BindRemoteAccessibilityFrames>(IPC::Decoder *result, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  char v5 = result;
  if (!*(void *)(a2 + 144))
  {
    *(unsigned char *)unint64_t result = 1;
    *((_DWORD *)result + 8) = 1;
    return result;
  }
  kdebug_trace();
  uint64_t v10 = *(void *)(a2 + 144);
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x198EC9C10);
  }
  uint64_t v27 = 0;
  IPC::Connection::createSyncMessageEncoder(3783, a4, &v27, &v26);
  IPC::ArgumentCoder<std::tuple<int const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<int const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul>(v26, a3);
  IPC::Connection::sendSyncMessage(v10, v27, (uint64_t *)&v26, 0, (uint64_t)&v24, a5);
  if (v25)
  {
    if (v25 == 1)
    {
      *(unsigned char *)char v5 = (_BYTE)v24;
      int v11 = 1;
      *((_DWORD *)v5 + 8) = 1;
LABEL_11:
      ((void (*)(void *, IPC::Decoder **))off_1EE9D9AC8[v11])(v21, &v24);
      goto LABEL_12;
    }
    goto LABEL_18;
  }
  LOBYTE(v21[0]) = 0;
  char v23 = 0;
  IPC::Decoder::operator>><std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>>(v24, (uint64_t)v21);
  if (v23)
  {
    int v11 = v25;
    if (!v25)
    {
      uint64_t v13 = v24;
      char v24 = 0;
      uint64_t v14 = v21[0];
      int v15 = v22;
      *(void *)char v5 = v13;
      *((void *)v5 + 1) = v14;
      *((void *)v5 + 2) = v21[1];
      *((_DWORD *)v5 + 6) = v15;
      *((_DWORD *)v5 + 8) = 0;
      goto LABEL_11;
    }
LABEL_18:
    char v19 = (IPC::Decoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Decoder::operator>><std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>>(v19, v20);
  }
  *(unsigned char *)char v5 = 13;
  *((_DWORD *)v5 + 8) = 1;
  int v11 = v25;
  if (v25 != -1) {
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v16 = v26;
  uint64_t v26 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v12);
    WTF::fastFree(v17, v18);
  }

  return (IPC::Decoder *)kdebug_trace();
}

IPC::Decoder *IPC::Decoder::operator>><std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>>(a1, &v7);
  std::__optional_storage_base<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>,false>>(a2, (uint64_t)&v7);
  if (v9)
  {
    char v5 = v7;
    if (v7)
    {
      uint64_t v7 = 0;
      int v8 = 0;
      WTF::fastFree(v5, v4);
    }
  }
  return a1;
}

unint64_t IPC::ArgumentCoder<std::tuple<int const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<int const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  BOOL v3 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(a1, *(int **)a2);
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v3, *(uint64_t **)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(const void **)v4;
  size_t v6 = *(unsigned int *)(v4 + 12);

  return IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v3, v5, v6);
}

WTF *IPC::Decoder::decode<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (WTF *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF *)v7();
    }
  }
  return result;
}

WTF *IPC::ArgumentCoder<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = (WTF *)IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v7);
  if (v9)
  {
    unint64_t result = (WTF *)IPC::ArgumentCoder<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>,void>::decode<IPC::Decoder,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v7, v5, (uint64_t)a2);
    if (v9)
    {
      unint64_t result = v7;
      if (v7)
      {
        uint64_t v7 = 0;
        int v8 = 0;
        return (WTF *)WTF::fastFree(result, v6);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
  return result;
}

void *IPC::ArgumentCoder<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>,void>::decode<IPC::Decoder,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4 = result[1];
  uint64_t v5 = *result;
  unint64_t v6 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *result;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    a3 = 0;
    a2 = 0;
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      uint64_t v13 = result;
      uint64_t v15 = a4;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v5, v4);
        unint64_t result = v13;
        a4 = v15;
        a2 = *v13;
        a3 = v13[1];
      }
      else
      {
        a3 = 0;
        a2 = 0;
      }
    }
LABEL_11:
    *unint64_t result = 0;
    result[1] = 0;
    unint64_t result = (void *)result[3];
    if (!result)
    {
LABEL_12:
      char v11 = 0;
      *(unsigned char *)a4 = 0;
      goto LABEL_9;
    }
LABEL_14:
    if (a3)
    {
      uint64_t v14 = a4;
      unint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, a2);
      a4 = v14;
    }
    goto LABEL_12;
  }
  int v8 = (int *)(v5 + v6);
  result[2] = v8 + 1;
  if (!v5)
  {
    a3 = v4;
    a2 = 0;
    goto LABEL_11;
  }
  if (!*(unsigned char *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_14;
  }
  int v9 = *v8;
  *(void *)a4 = *(void *)a2;
  uint64_t v10 = *(void *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a4 + 8) = v10;
  *(_DWORD *)(a4 + 16) = v9;
  char v11 = 1;
LABEL_9:
  *(unsigned char *)(a4 + 24) = v11;
  return result;
}

uint64_t std::__optional_storage_base<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned __int8 *)(result + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(unsigned char *)(result + 24))
    {
      unint64_t result = WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(result, (uint64_t *)a2);
      *(_DWORD *)(v3 + 16) = *(_DWORD *)(a2 + 16);
    }
  }
  else if (*(unsigned char *)(result + 24))
  {
    unint64_t result = *(void *)result;
    if (*(void *)v3)
    {
      *(void *)uint64_t v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
      unint64_t result = WTF::fastFree((WTF *)result, (void *)a2);
    }
    *(unsigned char *)(v3 + 24) = 0;
  }
  else
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    uint64_t v4 = *(void *)a2;
    *(void *)a2 = 0;
    *(void *)unint64_t result = v4;
    LODWORD(v4) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(result + 8) = v4;
    LODWORD(v4) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    *(_DWORD *)(result + 12) = v4;
    *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
    *(unsigned char *)(result + 24) = 1;
  }
  return result;
}

WTF *WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v6 = *(WTF **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v7 = v3;
  (*(void (**)(uint64_t, WTF **))(*(void *)v2 + 16))(v2, &v6);
  unint64_t result = v6;
  if (v6)
  {
    unint64_t v6 = 0;
    LODWORD(v7) = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UpdateRemotePageAccessibilityOffset>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2530;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v16 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v8, *(int **)(a2 + 8));
  LOBYTE(v14) = 0;
  char v15 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v16, a4, (uint64_t)&v14, 1);
  if (v15)
  {
    uint64_t v10 = v14;
    uint64_t v14 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  unint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ResetVisibilityAdjustmentsForTargetedElements,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DBCE0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ResetVisibilityAdjustmentsForTargetedElements,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DBCE0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ResetVisibilityAdjustmentsForTargetedElements,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  int v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

uint64_t WTF::Vector<WebCore::TargetedElementAdjustment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = v3 << 6;
    uint64_t v5 = *(void *)a1 + 48;
    do
    {
      uint64_t v5 = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2)+ 64;
      v4 -= 64;
    }
    while (v4);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::AdjustVisibilityForTargetedElements,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DBD08;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::AdjustVisibilityForTargetedElements,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DBD08;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::AdjustVisibilityForTargetedElements,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  int v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::NumberOfVisibilityAdjustmentRects,WTF::CompletionHandler<void ()(unsigned long long)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  char v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v11 = 2328;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v13 = &unk_1EE9DBD30;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::NumberOfVisibilityAdjustmentRects,WTF::CompletionHandler<void ()(unsigned long long)>>(WTF::CompletionHandler<void ()(unsigned long long)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DBD30;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::NumberOfVisibilityAdjustmentRects,WTF::CompletionHandler<void ()(unsigned long long)>>(WTF::CompletionHandler<void ()(unsigned long long)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DBD30;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::NumberOfVisibilityAdjustmentRects,WTF::CompletionHandler<void ()(unsigned long long)>>(WTF::CompletionHandler<void ()(unsigned long long)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && *(void *)a2 && (unint64_t v3 = IPC::Decoder::decode<std::tuple<unsigned long long>>(a2), v4))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, unint64_t))(*(void *)v5 + 16))(v5, v3);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartObservingNowPlayingMetadata>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2493;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  char v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StopObservingNowPlayingMetadata>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2501;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  char v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::nowPlayingMetadataChanged(WebCore::NowPlayingMetadata const&)::$_0,void,WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)> &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8), *(void *)(a1 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::SimulateClickOverFirstMatchingTextInViewportWithUserInteraction,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2488;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  int v25 = v12;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DBD80;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  char v19 = v25;
  int v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SimulateClickOverFirstMatchingTextInViewportWithUserInteraction,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DBD80;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SimulateClickOverFirstMatchingTextInViewportWithUserInteraction,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DBD80;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SimulateClickOverFirstMatchingTextInViewportWithUserInteraction,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::frameNameChanged(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String const&)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::call(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 144);
  if (v3 && v3 != *((void *)result + 1))
  {
    uint64_t v6 = (uint64_t *)*((void *)result + 2);
    uint64_t v7 = (uint64_t *)*((void *)result + 3);
    uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v8 = 2250;
    *((void *)v8 + 1) = a3;
    *((void *)v8 + 66) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 68) = 0;
    *((void *)v8 + 70) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    uint64_t v15 = v8;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, v6);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, v7);
    LOBYTE(v13) = 0;
    char v14 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v15, 0, (uint64_t)&v13, 1);
    if (v14)
    {
      uint64_t v10 = v13;
      uint64_t v13 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
    unint64_t result = v15;
    uint64_t v15 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v11, v12);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CloseCurrentTypingCommand>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2171;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  int v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  char v11 = v17;
  int v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void sub_198ECB1D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::UnifiedPDFPlugin::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x3F0);
  uint64_t result = WebKit::UnifiedPDFPlugin::UnifiedPDFPlugin(v4, a1);
  *a2 = v4;
  return result;
}

void sub_198ECB240(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::UnifiedPDFPlugin(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = WebKit::PDFPluginBase::PDFPluginBase(a1, a2);
  *(void *)uint64_t v4 = &unk_1EE9DBE20;
  *(void *)(v4 + 592) = &unk_1EE9DC3E8;
  uint64_t v5 = v4 + 600;
  *(_OWORD *)(v4 + 600) = 0u;
  *(_OWORD *)(v4 + 616) = 0u;
  *(_OWORD *)(v4 + 632) = 0u;
  *(_DWORD *)(v4 + 648) = 1065353216;
  *(unsigned char *)(v4 + 652) = 1;
  *(_OWORD *)(v4 + 656) = 0u;
  *(_OWORD *)(v4 + 672) = 0u;
  *(_OWORD *)(v4 + 688) = 0u;
  *(_OWORD *)(v4 + 704) = 0u;
  *(void *)(v4 + 720) = 0;
  *(void *)(v4 + 728) = 0x3FF0000000000000;
  *(void *)(v4 + 736) = 0x3FF0000000000000;
  *(unsigned char *)(v4 + 744) = 0;
  *(unsigned char *)(v4 + 752) = 0;
  *(unsigned char *)(v4 + 756) = 0;
  *(unsigned char *)(v4 + 764) = 0;
  *(_DWORD *)(v4 + 768) = 0;
  *(unsigned char *)(v4 + 772) = 1;
  *(void *)(v4 + 776) = 0;
  *(unsigned char *)(v4 + 784) = 0;
  *(unsigned char *)(v4 + 796) = 0;
  *(_DWORD *)(v4 + 792) = 0;
  *(_OWORD *)(v4 + 808) = 0u;
  *(_OWORD *)(v4 + 824) = 0u;
  *(_OWORD *)(v4 + 833) = 0u;
  WebCore::Timer::Timer<WebKit::UnifiedPDFPlugin,WebKit::UnifiedPDFPlugin>((WebCore::TimerBase *)(v4 + 856), a1, (uint64_t)WebKit::UnifiedPDFPlugin::autoscrollTimerFired, 0);
  WebCore::Timer::Timer<WebKit::UnifiedPDFPlugin,WebKit::UnifiedPDFPlugin>((WebCore::TimerBase *)(a1 + 912), a1, (uint64_t)WebKit::UnifiedPDFPlugin::incrementalLoadingRepaintTimerFired, 0);
  *(void *)(a1 + 968) = [[WKPDFFormMutationObserver alloc] initWithPlugin:a1];
  *(_WORD *)(a1 + 41) = 0;
  *(void *)(a1 + 976) = 0;
  *(void *)(a1 + 992) = 0;
  *(void *)(a1 + 984) = 0;
  uint64_t v6 = *(WebCore::Document **)(*(void *)(a2 + 48) + 8);
  *((_DWORD *)v6 + 7) += 2;
  long long v41 = v6;
  WebCore::Document::createElement(v6, MEMORY[0x1E4FB6890]);
  uint64_t v7 = v42;
  long long v42 = 0;
  uint64_t v8 = *(void *)(a1 + 568);
  *(void *)(a1 + 568) = v7;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 28) == 2)
    {
      if ((*(_WORD *)(v8 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
      }
    }
    else
    {
      *(_DWORD *)(v8 + 28) -= 2;
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v42);
  uint64_t v9 = *(WebCore::Element **)(a1 + 568);
  WTF::AtomStringImpl::add();
  v45.var0.m_impl.m_ptr = (StringImpl *)v42;
  WebCore::Element::setAttributeWithoutSynchronization(v9, MEMORY[0x1E4FB6898], &v45);
  m_ptr = v45.var0.m_impl.m_ptr;
  v45.var0.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v10);
    }
    else {
      *(_DWORD *)m_ptr -= 2;
    }
  }
  WebCore::Document::createElement(v41, MEMORY[0x1E4FB6A08]);
  WebKit::PDFPluginBase::annotationStyle((WebKit::PDFPluginBase *)a1, &v42);
  WebCore::Node::setTextContent();
  if (v39)
  {
    uint64_t v13 = v38;
    uint64_t v38 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
  char v14 = v42;
  long long v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v12);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  WebCore::ContainerNode::appendChild(&v35, *(WebCore::ContainerNode **)(a1 + 568), v40);
  if (v37)
  {
    char v16 = v36;
    long long v36 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
  }
  if (*(void *)(a1 + 568))
  {
    uint64_t v17 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 48) + 8);
    *(_DWORD *)(v17 + 28) += 2;
    v45.var0.m_impl.m_ptr = (StringImpl *)v17;
    if (WebKit::PDFPluginBase::isFullFramePlugin((WebKit::PDFPluginBase *)a1))
    {
      uint64_t v18 = (WebCore::ContainerNode *)WebCore::Document::bodyOrFrameset((WebCore::Document *)v45.var0.m_impl.m_ptr);
      char v19 = v18;
      if (v18) {
        *((_DWORD *)v18 + 7) += 2;
      }
      WebCore::ContainerNode::appendChild((uint64_t *)&v42, v18, *(Node **)(a1 + 568));
      if (v44)
      {
        long long v21 = v43;
        uint64_t v43 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
          {
            WTF::StringImpl::destroy(v21, v20);
            if (v19)
            {
LABEL_31:
              if (*((_DWORD *)v19 + 7) == 2)
              {
                if ((*((_WORD *)v19 + 17) & 0x400) == 0) {
                  WebCore::Node::removedLastRef(v19);
                }
              }
              else
              {
                *((_DWORD *)v19 + 7) -= 2;
              }
            }
LABEL_58:
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v45);
            goto LABEL_59;
          }
          *(_DWORD *)v21 -= 2;
        }
      }
      if (v19) {
        goto LABEL_31;
      }
      goto LABEL_58;
    }
    uint64_t v22 = *(void *)(a1 + 112);
    if (v22) {
      char v23 = *(WebCore::Element **)(v22 + 8);
    }
    else {
      char v23 = 0;
    }
    char v24 = (WebCore::ContainerNode *)WebCore::Element::userAgentShadowRoot(v23);
    int v25 = v24;
    if (v24)
    {
      *((_DWORD *)v24 + 7) += 2;
      WebCore::ContainerNode::removeChildren(v24);
      if (*((_DWORD *)v25 + 7) == 2)
      {
        if ((*((_WORD *)v25 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v25);
        }
      }
      else
      {
        *((_DWORD *)v25 + 7) -= 2;
      }
    }
    uint64_t v26 = *(void *)(a1 + 112);
    if (v26) {
      uint64_t v27 = *(WebCore::Element **)(v26 + 8);
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v28 = (WebCore::ContainerNode *)WebCore::Element::ensureUserAgentShadowRoot(v27);
    *((_DWORD *)v28 + 7) += 2;
    uint64_t v29 = *(void *)(a1 + 992);
    *(void *)(a1 + 992) = v28;
    if (v29)
    {
      if (*(_DWORD *)(v29 + 28) == 2)
      {
        if ((*(_WORD *)(v29 + 34) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v29);
          uint64_t v28 = *(WebCore::ContainerNode **)(a1 + 992);
        }
      }
      else
      {
        *(_DWORD *)(v29 + 28) -= 2;
      }
    }
    WebCore::ContainerNode::appendChild((uint64_t *)&v42, v28, *(Node **)(a1 + 568));
    if (v44)
    {
      uint64_t v31 = v43;
      uint64_t v43 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2) {
          WTF::StringImpl::destroy(v31, v30);
        }
        else {
          *(_DWORD *)v31 -= 2;
        }
      }
    }
    uint64_t v32 = *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 72) & 0xFFFFFFFFFFFFLL;
    if (v32)
    {
      if ((*(unsigned char *)((*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 72) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0) {
        goto LABEL_70;
      }
      if (*(unsigned char *)((*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 72) & 0xFFFFFFFFFFFFLL) + 0x2E) == 7)
      {
        int v33 = *(_DWORD *)((*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 72) & 0xFFFFFFFFFFFFLL) + 0x10);
        *(unsigned char *)((*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 72) & 0xFFFFFFFFFFFFLL) + 0x128) = 1;
        *(_DWORD *)(v32 + 16) = v33 + 1;
        if (v33 != -1)
        {
          *(_DWORD *)(v32 + 16) = v33;
          goto LABEL_57;
        }
LABEL_70:
        __break(0xC471u);
        JUMPOUT(0x198ECB7A8);
      }
    }
LABEL_57:
    WebCore::Document::updateLayoutIgnorePendingStylesheets();
    goto LABEL_58;
  }
LABEL_59:
  WebKit::UnifiedPDFPlugin::setDisplayMode(a1, (WebKit::PDFPresentationController *)1);
  if ((*(unsigned int (**)(void))(**(void **)v5 + 200))()) {
    WebKit::PDFPluginBase::wantsWheelEventsChanged((void *)a1);
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v40);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v41);
  return a1;
}

void sub_198ECB7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17)
{
  uint64_t v23 = v20;
  uint64_t v25 = v23;
  int v26 = *(_DWORD *)(v23 + 28) - 2;
  if (v26)
  {
    *(_DWORD *)(v25 + 28) = v26;
  }
  else if ((*(_WORD *)(v25 + 34) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v25);
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v22 - 56));
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a15);
  uint64_t v27 = (WTF **)(v17 + 976);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a16);
  uint64_t v29 = *(void *)(v17 + 992);
  *(void *)(v17 + 992) = 0;
  if (v29)
  {
    if (*(_DWORD *)(v29 + 28) == 2)
    {
      if ((*(_WORD *)(v29 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v29);
      }
    }
    else
    {
      *(_DWORD *)(v29 + 28) -= 2;
    }
  }
  uint64_t v30 = *v27;
  if (*v27)
  {
    *(void *)(v17 + 976) = 0;
    *(_DWORD *)(v17 + 984) = 0;
    WTF::fastFree(v30, v28);
  }
  uint64_t v31 = *(const void **)(v17 + 968);
  *(void *)(v17 + 968) = 0;
  if (v31) {
    CFRelease(v31);
  }
  *(void *)(v17 + 912) = &unk_1EE9BA5F0;
  uint64_t v32 = *(void *)(v17 + 960);
  *(void *)(v17 + 960) = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  WebCore::TimerBase::~TimerBase(v19);
  *(void *)(v17 + 856) = &unk_1EE9BA5F0;
  uint64_t v33 = *(void *)(v17 + 904);
  *(void *)(v17 + 904) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  WebCore::TimerBase::~TimerBase(v18);
  uint64_t v35 = *(const void **)(v17 + 840);
  *(void *)(v17 + 840) = 0;
  if (v35) {
    CFRelease(v35);
  }
  long long v36 = *(const void **)(v17 + 816);
  *(void *)(v17 + 816) = 0;
  if (v36) {
    CFRelease(v36);
  }
  char v37 = *(const void **)(v17 + 776);
  *(void *)(v17 + 776) = 0;
  if (v37) {
    CFRelease(v37);
  }
  uint64_t v38 = *(_DWORD **)(v17 + 704);
  *(void *)(v17 + 704) = 0;
  if (v38)
  {
    if (v38[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v38 + 16))(v38);
    }
    else {
      --v38[2];
    }
  }
  char v39 = *(_DWORD **)(v17 + 696);
  *(void *)(v17 + 696) = 0;
  if (v39)
  {
    if (v39[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v39 + 16))(v39);
    }
    else {
      --v39[2];
    }
  }
  uint64_t v40 = *(_DWORD **)(v17 + 688);
  *(void *)(v17 + 688) = 0;
  if (v40)
  {
    if (v40[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v40 + 16))(v40);
    }
    else {
      --v40[2];
    }
  }
  long long v41 = *(_DWORD **)(v17 + 680);
  *(void *)(v17 + 680) = 0;
  if (v41)
  {
    if (v41[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v41 + 16))(v41);
    }
    else {
      --v41[2];
    }
  }
  long long v42 = *(_DWORD **)(v17 + 672);
  *(void *)(v17 + 672) = 0;
  if (v42)
  {
    if (v42[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v42 + 16))(v42);
    }
    else {
      --v42[2];
    }
  }
  uint64_t v43 = (_DWORD **)(v17 + 656);
  char v44 = *(_DWORD **)(v17 + 664);
  *(void *)(v17 + 664) = 0;
  if (v44)
  {
    if (v44[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v44 + 16))(v44);
    }
    else {
      --v44[2];
    }
  }
  AtomString v45 = *v43;
  *uint64_t v43 = 0;
  if (v45)
  {
    if (v45[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v45 + 16))(v45);
    }
    else {
      --v45[2];
    }
  }
  WebKit::PDFDocumentLayout::~PDFDocumentLayout((WebKit::PDFDocumentLayout *)(v17 + 608), v34);
  uint64_t v47 = *v21;
  *long long v21 = 0;
  if (v47) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(*(atomic_uchar **)(v47 + 8), v46);
  }
  WebKit::PDFPluginBase::~PDFPluginBase((WebKit::PDFPluginBase *)v17, (WTF::StringImpl *)v46);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::autoscrollTimerFired(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 848))
  {
    this = *(void *)(this + 840);
    if (this)
    {
      this = [(id)this isEmpty];
      if ((this & 1) == 0)
      {
        this = *(unsigned char *)(v1 + 528)
             ? WebCore::AffineTransform::mapPoint((WebCore::AffineTransform *)(v1 + 328), (const WebCore::IntPoint *)(v1 + 420)): 0;
        IntPoint v15 = (IntPoint)this;
        float32x2_t v3 = vcvt_f32_s32(*(int32x2_t *)(v1 + 320));
        float32x2_t v4 = vcvt_f32_s32((int32x2_t)this);
        int8x8_t v5 = vbsl_s8((int8x8_t)vcgt_f32(v4, v3), (int8x8_t)vcvt_s32_f32(vsub_f32(v4, v3)), (int8x8_t)vmin_s32((int32x2_t)this, 0));
        if (v5)
        {
          int32x2_t v13 = (int32x2_t)v5;
          if (([*(id *)(v1 + 296) isLocked] & 1) == 0)
          {
            unint64_t v17 = (unint64_t)vadd_s32(*(int32x2_t *)(v1 + 376), v13);
            *(void *)(v1 + 376) = WebCore::ScrollableArea::constrainedScrollPosition((WebCore::ScrollableArea *)v1, (const WebCore::IntPoint *)&v17);
            (*(void (**)(uint64_t))(*(void *)v1 + 1384))(v1);
            IntPoint v16 = *(IntPoint *)(v1 + 376);
            WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v17, &v16);
            WebKit::UnifiedPDFPlugin::scrollToPointInContentsSpace(v1, *(float *)&v17, *((float *)&v17 + 1));
          }
          WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v16, &v15);
          WebKit::UnifiedPDFPlugin::convertDown<WebCore::FloatPoint>((WebKit::UnifiedPDFPlugin *)v1, 4, 1, 0, 0, *(float *)&v16.m_x, *(float *)&v16.m_y);
          float v7 = v6;
          float v9 = v8;
          unint64_t v17 = __PAIR64__(LODWORD(v8), LODWORD(v6));
          uint64_t v10 = WebKit::PDFPresentationController::nearestPageIndexForDocumentPoint(*(WebKit::PDFPresentationController **)(v1 + 600), (const WebCore::FloatPoint *)&v17);
          WebKit::PDFDocumentLayout::documentToPDFPage(v1 + 608, v10, v7, v9);
          v14[0] = v11;
          v14[1] = v12;
          return WebKit::UnifiedPDFPlugin::continueTrackingSelection(v1, v10, v14, 1);
        }
      }
    }
  }
  else if ((*(void *)(this + 888) & 0xFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v2 = (WebCore::TimerBase *)(this + 856);
    return WebCore::TimerBase::stopSlowCase(v2);
  }
  return this;
}

uint64_t WebKit::UnifiedPDFPlugin::incrementalLoadingRepaintTimerFired(uint64_t this)
{
  if (*(void *)(this + 296)) {
    return (*(uint64_t (**)(void))(**(void **)(this + 600) + 136))();
  }
  return this;
}

atomic_uchar *WebKit::UnifiedPDFPlugin::setDisplayMode(uint64_t a1, WebKit::PDFPresentationController *a2)
{
  *(unsigned char *)(a1 + 652) = (_BYTE)a2;
  uint64_t v4 = *(void *)(a1 + 600);
  if (v4
    && (*(unsigned int (**)(uint64_t, WebKit::PDFPresentationController *))(*(void *)v4 + 32))(v4, a2))
  {
    int8x8_t v5 = *(uint64_t (**)(void))(**(void **)(a1 + 600) + 40);
    return (atomic_uchar *)v5();
  }
  else
  {
    WebKit::PDFPresentationController::createForMode(a2, (atomic_uchar *volatile *)a1, &v9);
    uint64_t result = WebKit::UnifiedPDFPlugin::setPresentationController(a1, &v9);
    if (v9)
    {
      float v8 = *(atomic_uchar **)(v9 + 8);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(v8, v7);
    }
  }
  return result;
}

void sub_198ECBEF8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(*(atomic_uchar **)(a10 + 8), a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::UnifiedPDFPlugin::~UnifiedPDFPlugin(WebKit::UnifiedPDFPlugin *this, void *a2)
{
  uint64_t v3 = *((void *)this + 124);
  *((void *)this + 124) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 28) == 2)
    {
      if ((*(_WORD *)(v3 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
    }
    else
    {
      *(_DWORD *)(v3 + 28) -= 2;
    }
  }
  uint64_t v4 = (WTF *)*((void *)this + 122);
  if (v4)
  {
    *((void *)this + 122) = 0;
    *((_DWORD *)this + 246) = 0;
    WTF::fastFree(v4, a2);
  }
  int8x8_t v5 = (const void *)*((void *)this + 121);
  *((void *)this + 121) = 0;
  if (v5) {
    CFRelease(v5);
  }
  *((void *)this + 114) = &unk_1EE9BA5F0;
  uint64_t v6 = *((void *)this + 120);
  *((void *)this + 120) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  WebCore::TimerBase::~TimerBase((WebKit::UnifiedPDFPlugin *)((char *)this + 912));
  *((void *)this + 107) = &unk_1EE9BA5F0;
  uint64_t v7 = *((void *)this + 113);
  *((void *)this + 113) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  WebCore::TimerBase::~TimerBase((WebKit::UnifiedPDFPlugin *)((char *)this + 856));
  uint64_t v9 = (const void *)*((void *)this + 105);
  *((void *)this + 105) = 0;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = (const void *)*((void *)this + 102);
  *((void *)this + 102) = 0;
  if (v10) {
    CFRelease(v10);
  }
  float v11 = (const void *)*((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v11) {
    CFRelease(v11);
  }
  float v12 = (_DWORD *)*((void *)this + 88);
  *((void *)this + 88) = 0;
  if (v12)
  {
    if (v12[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v12 + 16))(v12);
    }
    else {
      --v12[2];
    }
  }
  int32x2_t v13 = (_DWORD *)*((void *)this + 87);
  *((void *)this + 87) = 0;
  if (v13)
  {
    if (v13[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v13 + 16))(v13);
    }
    else {
      --v13[2];
    }
  }
  char v14 = (_DWORD *)*((void *)this + 86);
  *((void *)this + 86) = 0;
  if (v14)
  {
    if (v14[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v14 + 16))(v14);
    }
    else {
      --v14[2];
    }
  }
  IntPoint v15 = (_DWORD *)*((void *)this + 85);
  *((void *)this + 85) = 0;
  if (v15)
  {
    if (v15[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v15 + 16))(v15);
    }
    else {
      --v15[2];
    }
  }
  IntPoint v16 = (_DWORD *)*((void *)this + 84);
  *((void *)this + 84) = 0;
  if (v16)
  {
    if (v16[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v16 + 16))(v16);
    }
    else {
      --v16[2];
    }
  }
  unint64_t v17 = (_DWORD *)*((void *)this + 83);
  *((void *)this + 83) = 0;
  if (v17)
  {
    if (v17[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v17 + 16))(v17);
    }
    else {
      --v17[2];
    }
  }
  uint64_t v18 = (_DWORD *)*((void *)this + 82);
  *((void *)this + 82) = 0;
  if (v18)
  {
    if (v18[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v18 + 16))(v18);
    }
    else {
      --v18[2];
    }
  }
  WebKit::PDFDocumentLayout::~PDFDocumentLayout((WebKit::UnifiedPDFPlugin *)((char *)this + 608), v8);
  uint64_t v20 = *((void *)this + 75);
  *((void *)this + 75) = 0;
  if (v20) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(*(atomic_uchar **)(v20 + 8), v19);
  }

  WebKit::PDFPluginBase::~PDFPluginBase(this, (WTF::StringImpl *)v19);
}

void non-virtual thunk to'WebKit::UnifiedPDFPlugin::~UnifiedPDFPlugin(WebKit::UnifiedPDFPlugin *this, void *a2)
{
}

{
  WebKit::UnifiedPDFPlugin::operator delete((WebKit::UnifiedPDFPlugin *)((char *)this - 592), a2);
}

void WebKit::UnifiedPDFPlugin::operator delete(WebKit::UnifiedPDFPlugin *a1, void *a2)
{
  WebKit::UnifiedPDFPlugin::~UnifiedPDFPlugin(a1, a2);
  if (atomic_load(v2 + 20))
  {
    bzero(v2, 0x3F0uLL);
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
}

WebCore::Node *WebKit::UnifiedPDFPlugin::teardown(WebKit::UnifiedPDFPlugin *this)
{
  WebKit::PDFPluginBase::teardown(this);
  WebCore::GraphicsLayer::unparentAndClear();
  int v2 = (*(uint64_t (**)(void))(**((void **)this + 75) + 200))(*((void *)this + 75));
  v38[0] = 0;
  WebKit::UnifiedPDFPlugin::setPresentationController((uint64_t)this, v38);
  if (v38[0]) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(*(atomic_uchar **)(v38[0] + 8), v3);
  }
  if (v2) {
    WebKit::PDFPluginBase::wantsWheelEventsChanged(this);
  }
  uint64_t v4 = (WebCore::Page *)WebKit::PDFPluginBase::page(this);
  int8x8_t v5 = v4;
  if (v4)
  {
    ++*(_DWORD *)v4;
    if (*((void *)this + 89))
    {
      uint64_t v6 = WebCore::Page::scrollingCoordinator(v4);
      uint64_t v7 = (atomic_uchar **)v6;
      if (v6) {
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v6 + 8));
      }
      (*((void (**)(atomic_uchar **, void, void))*v7 + 32))(v7, *((void *)this + 89), *((void *)this + 90));
      uint64_t v9 = *(void *)(*(void *)(*(void *)(*((void *)this + 13) + 8) + 24) + 8);
      if (*(unsigned char *)(v9 + 144)) {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(void *)(v9 + 288);
      if (v10) {
        ++*(_DWORD *)(v10 + 8);
      }
      *(_OWORD *)uint64_t v38 = *(_OWORD *)((char *)this + 712);
      uint64_t v11 = *(void *)(v10 + 576);
      if (!v11) {
        goto LABEL_44;
      }
      unsigned int v12 = *(_DWORD *)(v11 - 8);
      unsigned int v39 = -1640531527;
      __int16 v40 = 0;
      char v41 = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v39, v38);
      int v13 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v39);
      char v14 = (uint64_t *)(v10 + 576);
      unsigned int v15 = v13 & v12;
      IntPoint v16 = (uint64_t *)(v11 + 24 * (v13 & v12));
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      if (*v16 == v38[0] && v18 == v38[1])
      {
LABEL_25:
        uint64_t v22 = *v14;
        if (!*v14) {
          goto LABEL_30;
        }
        unsigned int v23 = *(_DWORD *)(v22 - 4);
      }
      else
      {
        int v20 = 1;
        while (v17 | v18)
        {
          unsigned int v15 = (v15 + v20) & v12;
          IntPoint v16 = (uint64_t *)(v11 + 24 * v15);
          uint64_t v17 = *v16;
          uint64_t v18 = v16[1];
          ++v20;
          if (*v16 == v38[0] && v18 == v38[1]) {
            goto LABEL_25;
          }
        }
        uint64_t v22 = *v14;
        if (!*v14) {
          goto LABEL_44;
        }
        unsigned int v23 = *(_DWORD *)(v22 - 4);
        IntPoint v16 = (uint64_t *)(v22 + 24 * v23);
      }
      v22 += 24 * v23;
      if ((uint64_t *)v22 == v16)
      {
LABEL_44:
        if (*(_DWORD *)(v10 + 8) == 1) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
        else {
          --*(_DWORD *)(v10 + 8);
        }
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>(v7[1], v8);
        goto LABEL_48;
      }
LABEL_30:
      if ((uint64_t *)v22 != v16)
      {
        *IntPoint v16 = -1;
        v16[1] = -1;
        char v24 = (unsigned int *)v16[2];
        v16[2] = 0;
        if (v24 && atomic_fetch_add((atomic_uint *volatile)v24, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v24);
          WTF::fastFree((WTF *)v24, v8);
          char v14 = (uint64_t *)(v10 + 576);
        }
        ++*(_DWORD *)(*v14 - 16);
        uint64_t v25 = *v14;
        if (*v14) {
          int v26 = *(_DWORD *)(v25 - 12) - 1;
        }
        else {
          int v26 = -1;
        }
        *(_DWORD *)(v25 - 12) = v26;
        uint64_t v27 = *v14;
        if (*v14)
        {
          unsigned int v28 = 6 * *(_DWORD *)(v27 - 12);
          unsigned int v29 = *(_DWORD *)(v27 - 4);
          if (v28 < v29 && v29 >= 9) {
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(v14, v29 >> 1);
          }
        }
      }
      goto LABEL_44;
    }
  }
LABEL_48:
  uint64_t v31 = objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter", v38[0]);
  uint64_t v32 = *((void *)this + 121);
  WebKit::mutationObserverNotificationString(v38);
  uint64_t v33 = (WTF::StringImpl *)v38[0];
  if (v38[0]) {
    long long v34 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    long long v34 = &stru_1EEA10550;
  }
  [v31 removeObserver:v32 name:v34 object:*((void *)this + 37)];
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, v35);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  long long v36 = (const void *)*((void *)this + 121);
  *((void *)this + 121) = 0;
  if (v36) {
    CFRelease(v36);
  }
  uint64_t result = (WebCore::Node *)*((void *)this + 71);
  *((void *)this + 71) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 7) == 2)
    {
      if ((*((_WORD *)result + 17) & 0x400) == 0) {
        uint64_t result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
      }
    }
    else
    {
      *((_DWORD *)result + 7) -= 2;
    }
  }
  if (v5)
  {
    return (WebCore::Node *)WTF::RefCounted<WebCore::Page>::deref(v5);
  }
  return result;
}

void sub_198ECC6A4(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  WTF::RefCounted<WebCore::Page>::deref(v2);
  _Unwind_Resume(a1);
}

atomic_uchar *WebKit::UnifiedPDFPlugin::setPresentationController(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *(atomic_uchar **)(a1 + 600);
  if (result) {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 24))(result);
  }
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = *(void *)(a1 + 600);
  *(void *)(a1 + 600) = v5;
  if (v6)
  {
    uint64_t v7 = *(atomic_uchar **)(v6 + 8);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPresentationController,(WTF::DestructionThread)0>(v7, a2);
  }
  return result;
}

uint64_t *WebKit::mutationObserverNotificationString(uint64_t *this)
{
  if ((_MergedGlobals_95 & 1) == 0)
  {
    v3[0] = "PDFFormDidChangeValue";
    v3[1] = 22;
    int v2 = this;
    WTF::NeverDestroyed<WTF::String,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1EB359CC8, (uint64_t)v3);
    this = v2;
    _MergedGlobals_95 = 1;
  }
  uint64_t v1 = qword_1EB359CC8;
  if (qword_1EB359CC8) {
    *(_DWORD *)qword_1EB359CC8 += 2;
  }
  *this = v1;
  return this;
}

uint64_t WebKit::UnifiedPDFPlugin::graphicsLayer(WebKit::UnifiedPDFPlugin *this)
{
  return *((void *)this + 82);
}

_DWORD *WebKit::UnifiedPDFPlugin::installPDFDocument(_DWORD *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 562);
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = (uint64_t)this;
    uint64_t v3 = *((void *)this + 37);
    if (v3)
    {
      uint64_t v4 = *((void *)this + 12);
      if (v4)
      {
        if (*(void *)(v4 + 8))
        {
          CFRetain(*((CFTypeRef *)this + 37));
          uint64_t v5 = *(const void **)(v2 + 608);
          *(void *)(v2 + 608) = v3;
          if (v5) {
            CFRelease(v5);
          }
          WebKit::UnifiedPDFPlugin::updateLayout(v2, 1, 0);
          uint64_t v6 = *(void *)(v2 + 96);
          if (v6)
          {
            uint64_t v7 = *(uint64_t **)(v6 + 8);
            if (v7) {
              WebKit::PluginView::layerHostingStrategyDidChange(v7);
            }
          }
          float v8 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
          uint64_t v9 = *(void *)(v2 + 968);
          WebKit::mutationObserverNotificationString((uint64_t *)&v14);
          uint64_t v10 = v14;
          if (v14) {
            uint64_t v11 = (__CFString *)WTF::StringImpl::operator NSString *();
          }
          else {
            uint64_t v11 = &stru_1EEA10550;
          }
          [v8 addObserver:v9 selector:sel_formChanged_ name:v11 object:*(void *)(v2 + 296)];
          if (v10)
          {
            if (*(_DWORD *)v10 == 2) {
              WTF::StringImpl::destroy(v10, v12);
            }
            else {
              *(_DWORD *)v10 -= 2;
            }
          }
          if ((*(unsigned int (**)(void))(**(void **)(v2 + 600) + 200))(*(void *)(v2 + 600))) {
            WebKit::PDFPluginBase::wantsWheelEventsChanged((void *)v2);
          }
          WebKit::UnifiedPDFPlugin::revealFragmentIfNeeded((WebKit::UnifiedPDFPlugin *)v2);
          this = *(_DWORD **)(v2 + 584);
          if (this)
          {
            (*(void (**)(_DWORD *))(*(void *)this + 40))(this);
            this = *(_DWORD **)(v2 + 584);
            *(void *)(v2 + 584) = 0;
            if (this)
            {
              if (this[4] == 1)
              {
                int v13 = *(uint64_t (**)(void))(*(void *)this + 16);
                return (_DWORD *)v13();
              }
              else
              {
                --this[4];
              }
            }
          }
        }
      }
    }
  }
  return this;
}

void sub_198ECCA48(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WebKit::UnifiedPDFPlugin::updateLayout(uint64_t a1, int a2, __int16 a3)
{
  WebKit::UnifiedPDFPlugin::availableContentsRect((WebCore::Widget **)a1);
  uint64_t v7 = v6;
  if (*(unsigned char *)(a1 + 771)) {
    BOOL v8 = *(unsigned char *)(a1 + 772) != 0;
  }
  else {
    BOOL v8 = 1;
  }
  if ((a3 & 0xFF00) != 0) {
    BOOL v9 = a3 != 0;
  }
  else {
    BOOL v9 = v8;
  }
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 600) + 168))(&v69);
  int updated = WebKit::PDFDocumentLayout::updateLayout(a1 + 608, v7, v9);
  WebKit::UnifiedPDFPlugin::updateScrollbars((WebKit::UnifiedPDFPlugin *)a1);
  WebKit::UnifiedPDFPlugin::availableContentsRect((WebCore::Widget **)a1);
  if (v7 != v11)
  {
    updated |= WebKit::PDFDocumentLayout::updateLayout(a1 + 608, v11, v9);
    WebKit::UnifiedPDFPlugin::updateScrollbars((WebKit::UnifiedPDFPlugin *)a1);
  }
  *(unsigned char *)(a1 + 771) = *(void *)(a1 + 608) != 0;
  unsigned int v12 = (_DWORD *)WebKit::PDFPluginBase::page((WebKit::PDFPluginBase *)a1);
  if (v12)
  {
    int v13 = v12;
    ++*v12;
    if (!*(void *)(a1 + 656))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      char v71 = (WTF::StringImpl *)v67;
      WebKit::UnifiedPDFPlugin::createGraphicsLayer(&v72, (WebKit::PDFPluginBase *)a1, (uint64_t)&v71);
      unsigned int v15 = *(_DWORD **)(a1 + 656);
      *(IntPoint *)(a1 + 656) = v72;
      if (v15)
      {
        if (v15[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v15 + 16))(v15);
        }
        else {
          --v15[2];
        }
      }
      IntPoint v16 = v71;
      char v71 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v14);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      uint64_t v17 = *(void *)(a1 + 656);
      DWORD2(v67) = 0;
      *(void *)&long long v67 = 0;
      (*(void (**)(uint64_t, long long *))(*(void *)v17 + 152))(v17, &v67);
      uint64_t v18 = *(void *)(a1 + 656);
      char v19 = (WebCore *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F428B8], "grayColor"), "CGColor");
      uint64_t v21 = WebCore::roundAndClampToSRGBALossy(v19, v20);
      uint64_t v22 = bswap32(v21) | 0x1104000000000000;
      if (!BYTE4(v21)) {
        uint64_t v22 = 0;
      }
      *(void *)&long long v67 = v22;
      (*(void (**)(uint64_t, long long *))(*(void *)v18 + 256))(v18, &v67);
      if ((v67 & 0x8000000000000) != 0)
      {
        uint64_t v66 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v66);
          WTF::fastFree((WTF *)v66, v23);
        }
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 656) + 680))(*(void *)(a1 + 656), 1);
    }
    if (!*(void *)(a1 + 664))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      char v71 = (WTF::StringImpl *)v67;
      WebKit::UnifiedPDFPlugin::createGraphicsLayer(&v72, (WebKit::PDFPluginBase *)a1, (uint64_t)&v71);
      uint64_t v25 = *(_DWORD **)(a1 + 664);
      *(IntPoint *)(a1 + 664) = v72;
      if (v25)
      {
        if (v25[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v25 + 16))(v25);
        }
        else {
          --v25[2];
        }
      }
      int v26 = v71;
      char v71 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, v24);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
      uint64_t v27 = *(void *)(a1 + 664);
      DWORD2(v67) = 0;
      *(void *)&long long v67 = 0;
      (*(void (**)(uint64_t, long long *))(*(void *)v27 + 152))(v27, &v67);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 664) + 208))(*(void *)(a1 + 664), 1);
      uint64_t v28 = *(void *)(a1 + 656);
      uint64_t v29 = *(void *)(a1 + 664);
      ++*(_DWORD *)(v29 + 8);
      *(void *)&long long v67 = v29;
      (*(void (**)(uint64_t, long long *))(*(void *)v28 + 64))(v28, &v67);
      uint64_t v30 = (_DWORD *)v67;
      *(void *)&long long v67 = 0;
      if (v30)
      {
        if (v30[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v30 + 16))(v30);
        }
        else {
          --v30[2];
        }
      }
    }
    if (!*(void *)(a1 + 672))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      char v71 = (WTF::StringImpl *)v67;
      WebKit::UnifiedPDFPlugin::createGraphicsLayer(&v72, (WebKit::PDFPluginBase *)a1, (uint64_t)&v71);
      uint64_t v32 = *(_DWORD **)(a1 + 672);
      *(IntPoint *)(a1 + 672) = v72;
      if (v32)
      {
        if (v32[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v32 + 16))(v32);
        }
        else {
          --v32[2];
        }
      }
      uint64_t v33 = v71;
      char v71 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2) {
          WTF::StringImpl::destroy(v33, v31);
        }
        else {
          *(_DWORD *)v33 -= 2;
        }
      }
      uint64_t v34 = *(void *)(a1 + 672);
      DWORD2(v67) = 0;
      *(void *)&long long v67 = 0;
      (*(void (**)(uint64_t, long long *))(*(void *)v34 + 152))(v34, &v67);
      uint64_t v35 = *(void *)(a1 + 664);
      uint64_t v36 = *(void *)(a1 + 672);
      ++*(_DWORD *)(v36 + 8);
      *(void *)&long long v67 = v36;
      (*(void (**)(uint64_t, long long *))(*(void *)v35 + 64))(v35, &v67);
      char v37 = (_DWORD *)v67;
      *(void *)&long long v67 = 0;
      if (v37)
      {
        if (v37[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v37 + 16))(v37);
        }
        else {
          --v37[2];
        }
      }
    }
    if (!*(void *)(a1 + 680))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      char v71 = (WTF::StringImpl *)v67;
      WebKit::UnifiedPDFPlugin::createGraphicsLayer(&v72, (WebKit::PDFPluginBase *)a1, (uint64_t)&v71);
      unsigned int v39 = *(_DWORD **)(a1 + 680);
      *(IntPoint *)(a1 + 680) = v72;
      if (v39)
      {
        if (v39[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v39 + 16))(v39);
        }
        else {
          --v39[2];
        }
      }
      __int16 v40 = v71;
      char v71 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2) {
          WTF::StringImpl::destroy(v40, v38);
        }
        else {
          *(_DWORD *)v40 -= 2;
        }
      }
      uint64_t v41 = *(void *)(a1 + 680);
      DWORD2(v67) = 0;
      *(void *)&long long v67 = 0;
      (*(void (**)(uint64_t, long long *))(*(void *)v41 + 152))(v41, &v67);
      uint64_t v42 = *(void *)(a1 + 656);
      uint64_t v43 = *(void *)(a1 + 680);
      ++*(_DWORD *)(v43 + 8);
      *(void *)&long long v67 = v43;
      (*(void (**)(uint64_t, long long *))(*(void *)v42 + 64))(v42, &v67);
      char v44 = (_DWORD *)v67;
      *(void *)&long long v67 = 0;
      if (v44)
      {
        if (v44[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v44 + 16))(v44);
        }
        else {
          --v44[2];
        }
      }
    }
    (*(void (**)(void, void))(**(void **)(a1 + 600) + 88))(*(void *)(a1 + 600), *(void *)(a1 + 664));
    WTF::RefCounted<WebCore::Page>::deref(v13);
  }
  uint64_t v45 = *(void *)(a1 + 656);
  float v46 = (float)*(int *)(a1 + 324);
  *(float *)&long long v67 = (float)*(int *)(a1 + 320);
  *((float *)&v67 + 1) = v46;
  (*(void (**)(uint64_t, long long *))(*(void *)v45 + 160))(v45, &v67);
  uint64_t v47 = *(void *)(a1 + 680);
  float v48 = (float)*(int *)(a1 + 324);
  *(float *)&long long v67 = (float)*(int *)(a1 + 320);
  *((float *)&v67 + 1) = v48;
  (*(void (**)(uint64_t, long long *))(*(void *)v47 + 160))(v47, &v67);
  uint64_t v49 = WebKit::UnifiedPDFPlugin::availableContentsRect((WebCore::Widget **)a1);
  uint64_t v51 = v50;
  uint64_t v52 = *(void *)(a1 + 664);
  IntPoint v72 = (IntPoint)v49;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v67, &v72);
  (*(void (**)(uint64_t, long long *))(*(void *)v52 + 128))(v52, &v67);
  uint64_t v53 = *(void *)(a1 + 664);
  *(float *)&long long v67 = (float)(int)v51;
  *((float *)&v67 + 1) = (float)SHIDWORD(v51);
  (*(void (**)(uint64_t, long long *))(*(void *)v53 + 160))(v53, &v67);
  uint64_t v54 = *(void *)(a1 + 600);
  unint64_t v55 = WebKit::UnifiedPDFPlugin::documentSize((WebKit::UnifiedPDFPlugin *)a1);
  float v56 = (float)(int)v55;
  float v57 = (float)SHIDWORD(v55);
  float v58 = WebKit::UnifiedPDFPlugin::centeringOffset((WebCore::Widget **)a1);
  (*(void (**)(uint64_t, float, float, float, float, double))(*(void *)v54 + 96))(v54, v56, v57, v58, v59, *(double *)(a1 + 728));
  WebKit::UnifiedPDFPlugin::didChangeSettings((WebKit::UnifiedPDFPlugin *)a1);
  WebKit::UnifiedPDFPlugin::didChangeIsInWindow((_DWORD *)a1);
  uint64_t result = (_DWORD *)WebKit::UnifiedPDFPlugin::updateScrollingExtents((WebKit::UnifiedPDFPlugin *)a1);
  *(void *)(a1 + 736) = 0x3FF0000000000000;
  if (a2)
  {
    uint64_t v61 = *(void *)(a1 + 96);
    if (v61)
    {
      if (*(void *)(v61 + 8))
      {
        float v62 = *(float *)(a1 + 644);
        float v63 = *(float *)(a1 + 648);
        float v64 = *(float *)(a1 + 640) * v63;
        WebKit::UnifiedPDFPlugin::availableContentsRect((WebCore::Widget **)a1);
        if (v64 > 0.0 && (float)(v62 * v63) > 0.0 && (int)v65 >= 1 && SHIDWORD(v65) >= 1)
        {
          *(void *)&long long v67 = 0;
          *((float *)&v67 + 2) = (float)(int)v65;
          *((float *)&v67 + 3) = (float)SHIDWORD(v65);
          WebCore::largestRectWithAspectRatioInsideRect((WebCore *)&v67, v64 / (float)(v62 * v63), v65);
        }
        uint64_t result = WebKit::UnifiedPDFPlugin::setScaleFactor(a1, 0, 0, 1.0);
        *(unsigned char *)(a1 + 772) = 0;
      }
    }
  }
  if ((~updated & 3) == 0)
  {
    if (v70)
    {
      uint64_t result = (*(void *(**)(long long *__return_ptr))(**(void **)(a1 + 600) + 168))(&v67);
    }
    else
    {
      LOBYTE(v67) = 0;
      char v68 = 0;
    }
    long long v69 = v67;
    char v70 = v68;
  }
  if (v70) {
    return (_DWORD *)(*(uint64_t (**)(void, long long *))(**(void **)(a1 + 600) + 176))(*(void *)(a1 + 600), &v69);
  }
  return result;
}

void sub_198ECD46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17)
{
  if (a10)
  {
    if (a10[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a10 + 16))(a10);
    }
    else {
      --a10[2];
    }
  }
  WTF::RefCounted<WebCore::Page>::deref(v17);
  _Unwind_Resume(a1);
}

unint64_t WebKit::UnifiedPDFPlugin::revealFragmentIfNeeded(WebKit::UnifiedPDFPlugin *this)
{
  unint64_t result = *((void *)this + 37);
  if (!result) {
    return result;
  }
  if (!*((unsigned char *)this + 769)) {
    return result;
  }
  unint64_t result = [(id)result isLocked];
  if (result) {
    return result;
  }
  if (*((unsigned char *)this + 770)) {
    return result;
  }
  *((unsigned char *)this + 770) = 1;
  uint64_t v3 = *((void *)this + 13);
  if (!v3) {
    return result;
  }
  unint64_t result = *(void *)(v3 + 8);
  if (!result) {
    return result;
  }
  WebKit::WebFrame::url((WebKit::WebFrame *)result, (uint64_t)v88);
  unint64_t result = WTF::URL::fragmentIdentifier((WTF::URL *)v88);
  uint64_t v6 = (const char *)result;
  uint64_t v7 = v4;
  uint64_t v86 = (const char *)result;
  uint64_t v87 = v4;
  if (!result) {
    goto LABEL_149;
  }
  int v8 = BYTE4(v4);
  if (!BYTE4(v4))
  {
    if (!v4) {
      goto LABEL_149;
    }
    unint64_t v10 = v4;
    uint64_t v41 = 2 * v4;
    if (v41 <= -2) {
      goto LABEL_158;
    }
    unint64_t v42 = result + 2 * v4;
    if ((unint64_t)v41 <= 0x3E)
    {
      uint64_t v62 = 0;
      while (*(_WORD *)(result + v62) != 38)
      {
        v62 += 2;
        if (v41 == v62) {
          goto LABEL_37;
        }
      }
      uint64_t v49 = (char *)(result + v62);
    }
    else
    {
      unint64_t v43 = result;
      if (v4 < 8)
      {
LABEL_82:
        if (v43 >= v42) {
          goto LABEL_37;
        }
        uint64_t v45 = (int16x8_t *)(v42 - 16);
        v48.i64[0] = 0x26002600260026;
        v48.i64[1] = 0x26002600260026;
        int8x16_t v46 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v42 - 16), v48);
        v48.i16[0] = vmaxvq_u16((uint16x8_t)v46);
        if (!v48.i32[0]) {
          goto LABEL_37;
        }
      }
      else
      {
        v44.i64[0] = 0x26002600260026;
        v44.i64[1] = 0x26002600260026;
        uint64_t v45 = (int16x8_t *)result;
        while (1)
        {
          int8x16_t v46 = (int8x16_t)vceqq_s16(*v45, v44);
          LOWORD(v5) = vmaxvq_u16((uint16x8_t)v46);
          if (v5) {
            break;
          }
          unint64_t v43 = (unint64_t)&v45[1];
          uint64_t v47 = &v45[1].i8[14];
          ++v45;
          if ((unint64_t)v47 >= v42) {
            goto LABEL_82;
          }
        }
      }
      uint64_t v49 = &v45->i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_1994F66B0, v46))];
    }
    if (v49 != (char *)v42)
    {
      uint64_t v13 = (uint64_t)&v49[-result] >> 1;
LABEL_20:
      if (v13 != -1)
      {
        uint64_t v14 = v13;
        if (v8) {
          uint64_t v14 = v13 | 0x100000000;
        }
        if (v7 > v13) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = v7;
        }
        if (v7)
        {
          uint64_t v7 = v15;
        }
        else
        {
          uint64_t v6 = "";
          uint64_t v7 = 0x100000000;
        }
        uint64_t v86 = v6;
        LODWORD(v87) = v7;
        BYTE4(v87) = BYTE4(v7);
        int v8 = BYTE4(v7);
      }
      unint64_t v10 = v7;
      if (v8)
      {
        if (!v7) {
          goto LABEL_149;
        }
        goto LABEL_32;
      }
      if (!v7) {
        goto LABEL_149;
      }
    }
LABEL_37:
    uint64_t v4 = 0;
    while (*(_WORD *)&v6[2 * v4] == 35)
    {
      if (v10 == ++v4) {
        goto LABEL_149;
      }
    }
    goto LABEL_41;
  }
  if (!v4) {
    goto LABEL_149;
  }
  uint64_t v9 = 0;
  unint64_t v10 = v4;
  uint64_t v11 = 16;
  if ((v4 & 0xFFFFFFF0) == 0) {
    uint64_t v11 = v4;
  }
  do
  {
    if (*(unsigned char *)(result + v9) == 38)
    {
      unsigned int v12 = (unsigned char *)(result + v9);
LABEL_19:
      uint64_t v13 = v12 - v6;
      goto LABEL_20;
    }
    ++v9;
  }
  while (v11 != v9);
  if (v4 >= 0x11)
  {
    unsigned int v12 = memchr((void *)(result + v11), 38, v4 - v11);
    if (v12) {
      goto LABEL_19;
    }
  }
LABEL_32:
  uint64_t v4 = 0;
  while (v6[v4] == 35)
  {
    if (v10 == ++v4) {
      goto LABEL_149;
    }
  }
LABEL_41:
  uint64_t v86 = WTF::StringView::substring((const char *)&v86, v4, 0xFFFFFFFF);
  LODWORD(v87) = v16;
  BYTE4(v87) = v17;
  unint64_t result = WTF::StringView::startsWith();
  if (result)
  {
    if (v87 < 6) {
      goto LABEL_143;
    }
    unint64_t v19 = v87 - 5;
    uint64_t v18 = v19;
    if (BYTE4(v87))
    {
      if (v19 >= v19)
      {
        int v20 = v86 + 5;
        uint64_t v18 = v19 | 0x100000000;
        goto LABEL_46;
      }
    }
    else if (v19 >= v19)
    {
      int v20 = v86 + 10;
LABEL_46:
      uint64_t v21 = v18;
      if ((v18 & 0x100000000) != 0)
      {
        if (v18)
        {
          uint64_t v22 = 0;
          while (1)
          {
            unsigned int v23 = v20[v22];
            if (v23 - 9 >= 5 && v23 != 32) {
              break;
            }
            if (v21 == ++v22) {
              goto LABEL_143;
            }
          }
          if (v23 == 43)
          {
            if (v21 - 1 == v22) {
              goto LABEL_143;
            }
            uint64_t v24 = ~v22 + v21;
            uint64_t v25 = &v20[v22];
            unsigned int v27 = *((unsigned __int8 *)v25 + 1);
            int v26 = v25 + 1;
            unsigned int v23 = v27;
          }
          else
          {
            int v26 = &v20[v22];
            uint64_t v24 = v21 - v22;
          }
          if (v23 - 48 <= 9)
          {
            unint64_t v50 = 0;
            char v51 = 0;
            while (1)
            {
              uint64_t v52 = v23 - 48;
              uint64_t v53 = (v50 * (unsigned __int128)0xAuLL) >> 64;
              if (is_mul_ok(v50, 0xAuLL)) {
                v50 *= 10;
              }
              BOOL v54 = __CFADD__(v50, v52);
              unint64_t v55 = v50 + v52;
              int v56 = v54;
              if (!v54) {
                unint64_t v50 = v55;
              }
              if (v53) {
                int v57 = 1;
              }
              else {
                int v57 = v56;
              }
              if (v57) {
                char v51 = 1;
              }
              if (!--v24) {
                goto LABEL_153;
              }
              unsigned int v58 = *(unsigned __int8 *)++v26;
              unsigned int v23 = v58;
              unsigned int v59 = v58 - 48;
              if (v58 - 48 > 9 || v59 >= 0xA)
              {
                if (!v51)
                {
                  uint64_t v60 = 0;
                  while (1)
                  {
                    int v61 = v26[v60];
                    if ((v61 - 9) >= 5 && v61 != 32) {
                      break;
                    }
                    if (v24 == ++v60) {
                      goto LABEL_154;
                    }
                  }
                }
                break;
              }
            }
          }
LABEL_143:
          uint64_t v40 = 0;
          uint64_t v21 = 0;
          goto LABEL_144;
        }
      }
      else if (v18)
      {
        uint64_t v34 = 0;
        uint64_t v35 = 2 * v21;
        while (1)
        {
          unsigned int v36 = *(unsigned __int16 *)&v20[v34];
          if (v36 - 9 >= 5 && v36 != 32) {
            break;
          }
          --v21;
          v34 += 2;
          if (v35 == v34) {
            goto LABEL_143;
          }
        }
        if (v36 == 43)
        {
          if (v35 - 2 == v34) {
            goto LABEL_143;
          }
          --v21;
          char v37 = &v20[v34];
          unsigned int v39 = *((unsigned __int16 *)v37 + 1);
          uint64_t v38 = v37 + 2;
          unsigned int v36 = v39;
        }
        else
        {
          uint64_t v38 = &v20[v34];
        }
        if (v36 - 48 <= 9)
        {
          unint64_t v50 = 0;
          char v51 = 0;
          while (1)
          {
            uint64_t v63 = v36 - 48;
            uint64_t v64 = (v50 * (unsigned __int128)0xAuLL) >> 64;
            if (is_mul_ok(v50, 0xAuLL)) {
              v50 *= 10;
            }
            BOOL v65 = __CFADD__(v50, v63);
            unint64_t v66 = v50 + v63;
            int v67 = v65;
            if (!v65) {
              unint64_t v50 = v66;
            }
            if (v64) {
              int v68 = 1;
            }
            else {
              int v68 = v67;
            }
            if (v68) {
              char v51 = 1;
            }
            if (!--v21) {
              break;
            }
            unsigned int v69 = *((unsigned __int16 *)v38 + 1);
            v38 += 2;
            unsigned int v36 = v69;
            unsigned int v70 = v69 - 48;
            if (v69 - 48 > 9 || v70 >= 0xA)
            {
              if (!v51)
              {
                uint64_t v71 = 0;
                while (1)
                {
                  int v72 = *(unsigned __int16 *)&v38[2 * v71];
                  if ((v72 - 9) >= 5 && v72 != 32) {
                    break;
                  }
                  if (v21 == ++v71) {
                    goto LABEL_154;
                  }
                }
              }
              goto LABEL_143;
            }
          }
LABEL_153:
          if (!v51)
          {
LABEL_154:
            unint64_t v73 = v50 & 0xFFFFFFFFFFFFFF00;
            uint64_t v40 = v50;
            uint64_t v21 = 1;
LABEL_145:
            unint64_t v74 = v73 | v40;
            if (v21)
            {
              unint64_t v75 = v74 - 1;
              (*(void (**)(void, unint64_t))(**((void **)this + 75) + 184))(*((void *)this + 75), v74 - 1);
              float v76 = 0.0;
              float v77 = 0.0;
              float v78 = 0.0;
              float v79 = 0.0;
              if (v75 < *((unsigned int *)this + 157))
              {
                long long v80 = (float *)(*((void *)this + 77) + 36 * v75);
                float v76 = v80[4];
                float v77 = v80[5];
                float v78 = v80[6];
                float v79 = v80[7];
              }
              WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>(this, 1, 3, 0, 0, v76, v77, v78, v79);
              WebKit::UnifiedPDFPlugin::scrollToPointInContentsSpace((uint64_t)this, v81, v82);
            }
            goto LABEL_149;
          }
          goto LABEL_143;
        }
        goto LABEL_143;
      }
      uint64_t v40 = 0;
LABEL_144:
      unint64_t v73 = 0;
      goto LABEL_145;
    }
LABEL_158:
    __break(1u);
    return result;
  }
  unint64_t result = WTF::StringView::startsWith();
  if (result)
  {
    if (v87 < 0xB)
    {
      uint64_t v28 = 0x100000000;
      uint64_t v30 = "";
    }
    else
    {
      unint64_t v29 = v87 - 10;
      uint64_t v28 = v29;
      if (BYTE4(v87))
      {
        if (v29 < v29) {
          goto LABEL_158;
        }
        uint64_t v30 = v86 + 10;
        v28 |= 0x100000000uLL;
      }
      else
      {
        if (v29 < v29) {
          goto LABEL_158;
        }
        uint64_t v30 = v86 + 20;
      }
    }
    v84[0] = v30;
    v84[1] = v28;
    char v85 = 1;
    uint64_t v31 = (void *)*((void *)this + 37);
    WTF::StringView::createNSString((uint64_t *)&cf, (WTF::StringView *)v84);
    uint64_t v32 = (PDFDestination *)[v31 namedDestination:cf];
    CFTypeRef v33 = cf;
    CFTypeRef cf = 0;
    if (v33) {
      CFRelease(v33);
    }
    if (v32) {
      WebKit::UnifiedPDFPlugin::revealPDFDestination((id *)this, v32);
    }
  }
LABEL_149:
  unint64_t result = (unint64_t)v88[0];
  v88[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198ECDBEC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

double WebKit::UnifiedPDFPlugin::incrementalLoadingDidProgress(WebKit::UnifiedPDFPlugin *this)
{
  if ((*((void *)this + 118) & 0xFFFFFFFFFFFFLL) == 0
    || (double result = *(double *)((*((void *)this + 118) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    WebCore::TimerBase::start();
  }
  return result;
}

uint64_t WebKit::UnifiedPDFPlugin::incrementalLoadingDidCancel(uint64_t this)
{
  if ((*(void *)(this + 944) & 0xFFFFFFFFFFFFLL) != 0) {
    return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 912));
  }
  return this;
}

uint64_t WebKit::UnifiedPDFPlugin::incrementalLoadingDidFinish(uint64_t this)
{
  uint64_t v1 = this;
  if ((*(void *)(this + 944) & 0xFFFFFFFFFFFFLL) != 0) {
    this = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 912));
  }
  if (*(void *)(v1 + 296))
  {
    uint64_t v2 = *(uint64_t (**)(void))(**(void **)(v1 + 600) + 136);
    return v2();
  }
  return this;
}

unint64_t WebKit::UnifiedPDFPlugin::attemptToUnlockPDF(id *this, const WTF::String *a2)
{
  int v4 = [this[37] isLocked];
  id v5 = this[37];
  if (*(void *)a2) {
    uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v6 = &stru_1EEA10550;
  }
  unint64_t result = [v5 unlockWithPassword:v6];
  if (result)
  {
    __int16 v8 = 256;
    if (!v4) {
      __int16 v8 = 0;
    }
    WebKit::UnifiedPDFPlugin::updateLayout((uint64_t)this, 1, v8 | v4);
    return WebKit::UnifiedPDFPlugin::revealFragmentIfNeeded((WebKit::UnifiedPDFPlugin *)this);
  }
  return result;
}

_DWORD *WebKit::UnifiedPDFPlugin::createGraphicsLayer(void *a1, WebKit::PDFPluginBase *this, uint64_t a3)
{
  unint64_t result = (_DWORD *)WebKit::PDFPluginBase::page(this);
  if (result)
  {
    uint64_t v6 = result;
    ++*result;
    (*(void (**)(void))(**(void **)(*((void *)result + 6) + 16) + 896))(*(void *)(*((void *)result + 6) + 16));
    WebCore::GraphicsLayer::create();
    *a1 = v7;
    unint64_t result = WTF::RefCounted<WebCore::Page>::deref(v6);
    if (v7) {
      return (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, a3);
    }
  }
  else
  {
    *a1 = 0;
  }
  *a1 = 0;
  return result;
}

void sub_198ECDEA8(_Unwind_Exception *exception_object)
{
  void *v1 = 0;
  if (v2[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v2 + 16))(v2);
  }
  else {
    --v2[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::UnifiedPDFPlugin::graphicsLayerFactory(WebKit::UnifiedPDFPlugin *this)
{
  uint64_t v1 = WebKit::PDFPluginBase::page(this);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (_DWORD *)v1;
  ++*(_DWORD *)v1;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v1 + 48) + 16) + 896))(*(void *)(*(void *)(v1 + 48) + 16));
  WTF::RefCounted<WebCore::Page>::deref(v2);
  return v3;
}

void sub_198ECDF88(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::setNeedsRepaintForAnnotation(uint64_t result, void *a2, unsigned __int8 a3)
{
  if (a3)
  {
    id v5 = (uint64_t **)result;
    unint64_t result = objc_msgSend(*(id *)(result + 296), "indexForPage:", objc_msgSend(a2, "page"));
    if (result != 0x7FFFFFFFFFFFFFFFLL)
    {
      unint64_t v6 = result;
      [a2 bounds];
      __src.origin.x = v7;
      __src.origin.y = v8;
      __src.size.width = v9;
      __src.size.height = v10;
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v23, &__src);
      WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>((WebKit::UnifiedPDFPlugin *)v5, 0, 1, v6, 1, v23[0], v23[1], v23[2], v23[3]);
      v24[0] = v11;
      v24[1] = v12;
      v24[2] = v13;
      v24[3] = v14;
      WebKit::PDFDocumentLayout::rowForPageIndex(v5 + 76, v6, (uint64_t *)&__src);
      uint64_t y_high = HIDWORD(__src.origin.y);
      unint64_t result = (uint64_t)v21;
      uint64_t v18 = v21;
      int v19 = 2;
      int v20 = HIDWORD(__src.origin.y);
      if (HIDWORD(__src.origin.y) >= 3)
      {
        if (HIDWORD(__src.origin.y) >> 29)
        {
          __break(0xC471u);
          return result;
        }
        unint64_t result = WTF::fastMalloc((WTF *)(8 * HIDWORD(__src.origin.y)));
        int v19 = y_high;
        uint64_t v18 = (unsigned char *)result;
        uint64_t y_high = HIDWORD(__src.origin.y);
      }
      memcpy((void *)result, *(const void **)&__src.origin.x, 8 * y_high);
      v21[16] = 1;
      WebKit::UnifiedPDFPlugin::setNeedsRepaintInDocumentRect((uint64_t)v5, a3, (uint64_t)v24, (uint64_t)&v18);
      std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, v16);
      unint64_t result = *(void *)&__src.origin.x;
      if (&__src.size != (CGSize *)*(CGRect **)&__src.origin.x)
      {
        if (*(void *)&__src.origin.x)
        {
          __src.origin.x = 0.0;
          LODWORD(__src.origin.y) = 0;
          return WTF::fastFree((WTF *)result, v17);
        }
      }
    }
  }
  return result;
}

void sub_198ECE0F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, uint64_t a17)
{
  if (&a17 != (uint64_t *)a15)
  {
    if (a15) {
      WTF::fastFree(a15, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>(WebKit::UnifiedPDFPlugin *this, int a2, int a3, unint64_t a4, char a5, float a6, float a7, float a8, float a9)
{
  float v17 = a6;
  float v18 = a7;
  float v19 = a8;
  float v20 = a9;
  if (a2 == 2) {
    goto LABEL_8;
  }
  if (a2 != 1)
  {
    if (a2) {
      return;
    }
    if (!a5)
    {
      __break(1u);
      return;
    }
    float v17 = WebKit::PDFDocumentLayout::pdfPageToDocument((uint64_t)this + 608, a4, a6, a7, a8, a9);
    float v18 = v11;
    float v19 = v12;
    float v20 = v13;
  }
  if (a3 != 1)
  {
    WebCore::FloatRect::scale((WebCore::FloatRect *)&v17, *((float *)this + 162), *((float *)this + 162));
LABEL_8:
    if (a3 != 2)
    {
      float v14 = WebKit::UnifiedPDFPlugin::centeringOffset((WebCore::Widget **)this);
      float v17 = v14 + v17;
      float v18 = v15 + v18;
      float v16 = *((double *)this + 91);
      WebCore::FloatRect::scale((WebCore::FloatRect *)&v17, v16, v16);
    }
  }
}

uint64_t WebKit::UnifiedPDFPlugin::setNeedsRepaintInDocumentRect(uint64_t result, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  if (a2)
  {
    uint64_t v6 = *(void *)(result + 600);
    std::__optional_copy_base<WebKit::PDFLayoutRow,false>::__optional_copy_base[abi:sn180100](v8, a4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)v6 + 144))(v6, v4, a3, v8);
    return std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v7);
  }
  return result;
}

void sub_198ECE29C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

_DWORD *WebKit::UnifiedPDFPlugin::scheduleRenderingUpdate(WebKit::PDFPluginBase *a1)
{
  unint64_t result = (_DWORD *)WebKit::PDFPluginBase::page(a1);
  if (result)
  {
    uint64_t v2 = result;
    ++*result;
    WebCore::Page::scheduleRenderingUpdate();
    return WTF::RefCounted<WebCore::Page>::deref(v2);
  }
  return result;
}

void sub_198ECE310(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

_DWORD *WebKit::UnifiedPDFPlugin::willAttachScrollingNode(_DWORD *this)
{
  if (!*((void *)this + 89))
  {
    uint64_t v1 = this;
    this = (_DWORD *)WebKit::PDFPluginBase::page((WebKit::PDFPluginBase *)this);
    if (this)
    {
      uint64_t v2 = this;
      ++*this;
      uint64_t v3 = WebCore::Page::scrollingCoordinator((WebCore::Page *)this);
      uint64_t v4 = (atomic_uchar **)v3;
      if (!v3) {
        return WTF::RefCounted<WebCore::Page>::deref(v2);
      }
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v3 + 8));
      uint64_t v6 = WebCore::ScrollingCoordinator::uniqueScrollingNodeID((WebCore::ScrollingCoordinator *)v4);
      *((void *)v1 + 89) = v6;
      *((void *)v1 + 90) = v5;
      uint64_t v7 = *(void *)(*(void *)(*(void *)(*((void *)v1 + 13) + 8) + 24) + 8);
      if (*(unsigned char *)(v7 + 144)) {
        uint64_t v7 = 0;
      }
      (*((void (**)(atomic_uchar **, void, void, uint64_t, uint64_t, uint64_t))*v4 + 29))(v4, *(void *)(*(void *)(*(void *)(v7 + 616) + 8) + 32), *(void *)(*(void *)(*(void *)(v7 + 616) + 8) + 40), 3, v6, v5);
      uint64_t v8 = *(void *)(*(void *)(*(void *)(*((void *)v1 + 13) + 8) + 24) + 8);
      if (*(unsigned char *)(v8 + 144)) {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(void *)(v8 + 288);
      if (v9) {
        ++*(_DWORD *)(v9 + 8);
      }
      long long v31 = *(_OWORD *)(v1 + 178);
      CGFloat v10 = (uint64_t *)(v9 + 576);
      uint64_t v11 = *(void *)(v9 + 576);
      if (v11
        || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand((uint64_t *)(v9 + 576)),
            (uint64_t v11 = *v10) != 0))
      {
        int v12 = *(_DWORD *)(v11 - 8);
      }
      else
      {
        int v12 = 0;
      }
      unsigned int v37 = -1640531527;
      __int16 v38 = 0;
      char v39 = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v37, &v31);
      unsigned int v14 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v37) & v12;
      float v15 = (void *)(v11 + 24 * v14);
      unint64_t v17 = *v15;
      unint64_t v16 = v15[1];
      if (*(_OWORD *)v15 != 0)
      {
        float v19 = 0;
        int v20 = 1;
        while (__PAIR128__(v16, v17) != v31)
        {
          if (v16 == -1) {
            float v19 = v15;
          }
          unsigned int v14 = (v14 + v20) & v12;
          float v15 = (void *)(v11 + 24 * v14);
          unint64_t v17 = *v15;
          unint64_t v16 = v15[1];
          ++v20;
          if (*(_OWORD *)v15 == 0)
          {
            if (v19)
            {
              *float v19 = 0;
              v19[1] = 0;
              void v19[2] = 0;
              --*(_DWORD *)(*v10 - 16);
              float v15 = v19;
            }
            *(_OWORD *)float v15 = v31;
            float v18 = (unsigned int **)(v15 + 2);
            if (!v1)
            {
              uint64_t v21 = 0;
              goto LABEL_29;
            }
            goto LABEL_23;
          }
        }
        goto LABEL_41;
      }
      *(_OWORD *)float v15 = v31;
      float v18 = (unsigned int **)(v11 + 24 * v14 + 16);
LABEL_23:
      uint64_t v21 = *((void *)v1 + 1);
      if (v21) {
        goto LABEL_28;
      }
      uint64_t v21 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = v1;
      uint64_t v22 = (unsigned int *)*((void *)v1 + 1);
      *((void *)v1 + 1) = v21;
      if (!v22) {
        goto LABEL_28;
      }
      if (atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v13);
      }
      uint64_t v21 = *((void *)v1 + 1);
      if (v21) {
LABEL_28:
      }
        atomic_fetch_add((atomic_uint *volatile)v21, 1u);
LABEL_29:
      unsigned int v23 = *v18;
      *float v18 = (unsigned int *)v21;
      if (v23 && atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, v13);
      }
      uint64_t v24 = *v10;
      if (*v10) {
        int v25 = *(_DWORD *)(v24 - 12) + 1;
      }
      else {
        int v25 = 1;
      }
      *(_DWORD *)(v24 - 12) = v25;
      uint64_t v26 = *v10;
      if (*v10) {
        int v27 = *(_DWORD *)(v26 - 12);
      }
      else {
        int v27 = 0;
      }
      uint64_t v28 = (*(_DWORD *)(v26 - 16) + v27);
      unint64_t v29 = *(unsigned int *)(v26 - 4);
      if (v29 > 0x400)
      {
        if (v29 > 2 * v28) {
          goto LABEL_41;
        }
      }
      else if (3 * v29 > 4 * v28)
      {
LABEL_41:
        if (*(_DWORD *)(v9 + 8) == 1) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
        else {
          --*(_DWORD *)(v9 + 8);
        }
        (*((void (**)(atomic_uchar **, void, void, _DWORD *))*v4 + 39))(v4, *((void *)v1 + 89), *((void *)v1 + 90), v1);
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        long long v31 = *((_OWORD *)v1 + 41);
        uint64_t v32 = *((void *)v1 + 84);
        uint64_t v33 = 0;
        long long v36 = *((_OWORD *)v1 + 43);
        (*((void (**)(atomic_uchar **, void, void, long long *))*v4 + 38))(v4, *((void *)v1 + 89), *((void *)v1 + 90), &v31);
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>(v4[1], v30);
        return WTF::RefCounted<WebCore::Page>::deref(v2);
      }
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand((uint64_t *)(v9 + 576));
      goto LABEL_41;
    }
  }
  return this;
}

void sub_198ECE718(_Unwind_Exception *a1, void *a2)
{
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>(*v3, a2);
  WTF::RefCounted<WebCore::Page>::deref(v2);
  _Unwind_Resume(a1);
}

unint64_t WebKit::UnifiedPDFPlugin::didAttachScrollingNode(WebKit::UnifiedPDFPlugin *this)
{
  *((unsigned char *)this + 769) = 1;
  return WebKit::UnifiedPDFPlugin::revealFragmentIfNeeded(this);
}

unint64_t WebKit::UnifiedPDFPlugin::didSameDocumentNavigationForFrame(unint64_t this, WebKit::WebFrame *a2)
{
  uint64_t v2 = *(void *)(this + 104);
  if (v2)
  {
    if (*(WebKit::WebFrame **)(v2 + 8) == a2)
    {
      *(unsigned char *)(this + 770) = 0;
      return WebKit::UnifiedPDFPlugin::revealFragmentIfNeeded((WebKit::UnifiedPDFPlugin *)this);
    }
  }
  return this;
}

uint64_t WebKit::UnifiedPDFPlugin::scrollingNodeID(WebKit::UnifiedPDFPlugin *this)
{
  return *((void *)this + 89);
}

uint64_t WebKit::UnifiedPDFPlugin::layerForHorizontalScrollbar(WebKit::UnifiedPDFPlugin *this)
{
  return *((void *)this + 86);
}

uint64_t WebKit::UnifiedPDFPlugin::layerForVerticalScrollbar(WebKit::UnifiedPDFPlugin *this)
{
  return *((void *)this + 87);
}

uint64_t WebKit::UnifiedPDFPlugin::availableContentsRect(WebCore::Widget **this)
{
  uint64_t v2 = WebCore::ScrollbarTheme::theme((WebCore::ScrollbarTheme *)this);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2) & 1) == 0)
  {
    uint64_t v3 = this[69];
    if (v3) {
      WebCore::Widget::frameRect(v3);
    }
    uint64_t v4 = this[68];
    if (v4) {
      WebCore::Widget::frameRect(v4);
    }
  }
  return 0;
}

unint64_t WebKit::UnifiedPDFPlugin::documentSize(WebKit::UnifiedPDFPlugin *this)
{
  if ([*((id *)this + 37) isLocked])
  {
    unsigned int v2 = 0;
    unint64_t v3 = 0;
  }
  else
  {
    float v4 = *((float *)this + 162);
    float v5 = ceilf(*((float *)this + 160) * v4);
    if (v5 > -2147500000.0) {
      int v6 = (int)v5;
    }
    else {
      int v6 = 0x80000000;
    }
    if (v5 < 2147500000.0) {
      unsigned int v2 = v6;
    }
    else {
      unsigned int v2 = 0x7FFFFFFF;
    }
    float v7 = ceilf(*((float *)this + 161) * v4);
    if (v7 >= 2147500000.0)
    {
      unint64_t v3 = 0x7FFFFFFF00000000;
    }
    else if (v7 <= -2147500000.0)
    {
      unint64_t v3 = 0x8000000000000000;
    }
    else
    {
      unint64_t v3 = (unint64_t)(int)v7 << 32;
    }
  }
  return v3 | v2;
}

float WebKit::UnifiedPDFPlugin::centeringOffset(WebCore::Widget **this)
{
  WebKit::UnifiedPDFPlugin::availableContentsRect(this);
  float result = 0.0;
  if (v2 >= 1 && v3 >= 1)
  {
    float v5 = *((float *)this + 162);
    double v6 = *((double *)this + 91);
    float v7 = v6;
    float v8 = (float)(*((float *)this + 160) * v5) * v7;
    if (v8 > 0.0 && (float)((float)(*((float *)this + 161) * v5) * v7) > 0.0)
    {
      float v9 = (float)v2 - v8;
      float v10 = v9 * 0.5;
      if (v9 < 0.0) {
        float v10 = 0.0;
      }
      float v11 = 1.0 / v6;
      return floorf(v10) * v11;
    }
  }
  return result;
}

_DWORD *WebKit::UnifiedPDFPlugin::didChangeSettings(WebKit::UnifiedPDFPlugin *this)
{
  float result = (_DWORD *)WebKit::PDFPluginBase::page(this);
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    ++*result;
    uint64_t shouldShowDebugIndicators = WebKit::UnifiedPDFPlugin::shouldShowDebugIndicators(this);
    uint64_t v5 = WebCore::Settings::showRepaintCounter(*(WebCore::Settings **)(v3 + 112));
    uint64_t v6 = *((void *)this + 82);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 616))(v6, shouldShowDebugIndicators);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 624))(v6, v5);
    uint64_t v7 = *((void *)this + 83);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 616))(v7, shouldShowDebugIndicators);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 624))(v7, v5);
    uint64_t v8 = *((void *)this + 84);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 616))(v8, shouldShowDebugIndicators);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 624))(v8, v5);
    uint64_t v9 = *((void *)this + 86);
    if (v9)
    {
      (*(void (**)(void, uint64_t))(*(void *)v9 + 616))(*((void *)this + 86), shouldShowDebugIndicators);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 624))(v9, v5);
    }
    uint64_t v10 = *((void *)this + 87);
    if (v10)
    {
      (*(void (**)(void, uint64_t))(*(void *)v10 + 616))(*((void *)this + 87), shouldShowDebugIndicators);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 624))(v10, v5);
    }
    uint64_t v11 = *((void *)this + 88);
    if (v11)
    {
      (*(void (**)(void, uint64_t))(*(void *)v11 + 616))(*((void *)this + 88), shouldShowDebugIndicators);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 624))(v11, v5);
    }
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 75) + 112))(*((void *)this + 75), shouldShowDebugIndicators, v5);
    return WTF::RefCounted<WebCore::Page>::deref((_DWORD *)v3);
  }
  return result;
}

void sub_198ECED4C(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

_DWORD *WebKit::UnifiedPDFPlugin::didChangeIsInWindow(_DWORD *this)
{
  if (*((void *)this + 37))
  {
    uint64_t v1 = this;
    this = (_DWORD *)WebKit::PDFPluginBase::page((WebKit::PDFPluginBase *)this);
    if (this)
    {
      int v2 = (WebCore::Page *)this;
      ++*this;
      unsigned int v3 = *((unsigned __int16 *)this + 329);
      (*(void (**)(void, void))(**((void **)v1 + 75) + 104))(*((void *)v1 + 75), (v3 >> 4) & 1);
      if ((v3 & 0x10) == 0)
      {
        uint64_t v4 = WebCore::Page::scrollingCoordinator(v2);
        (*(void (**)(uint64_t, _DWORD *))(*(void *)v4 + 464))(v4, v1);
      }
      return WTF::RefCounted<WebCore::Page>::deref(v2);
    }
  }
  return this;
}

void sub_198ECEE40(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::shouldShowDebugIndicators(WebKit::UnifiedPDFPlugin *this)
{
  uint64_t v1 = WebKit::PDFPluginBase::page(this);
  if (!v1) {
    return 0;
  }
  int v2 = (_DWORD *)v1;
  ++*(_DWORD *)v1;
  uint64_t v3 = WebCore::Settings::showDebugBorders(*(WebCore::Settings **)(v1 + 112));
  WTF::RefCounted<WebCore::Page>::deref(v2);
  return v3;
}

void sub_198ECEEAC(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

_DWORD *WebKit::UnifiedPDFPlugin::notifyFlushRequired(WebKit::PDFPluginBase *this, const WebCore::GraphicsLayer *a2)
{
  return WebKit::UnifiedPDFPlugin::scheduleRenderingUpdate(this);
}

_DWORD *non-virtual thunk to'WebKit::UnifiedPDFPlugin::notifyFlushRequired(WebKit::UnifiedPDFPlugin *this, const WebCore::GraphicsLayer *a2)
{
  return WebKit::UnifiedPDFPlugin::scheduleRenderingUpdate((WebKit::UnifiedPDFPlugin *)((char *)this - 592));
}

uint64_t WebKit::UnifiedPDFPlugin::isInWindow(WebKit::UnifiedPDFPlugin *this)
{
  uint64_t v1 = WebKit::PDFPluginBase::page(this);
  if (!v1) {
    return 0;
  }
  ++*(_DWORD *)v1;
  uint64_t v2 = (*(unsigned __int16 *)(v1 + 658) >> 4) & 1;
  WTF::RefCounted<WebCore::Page>::deref((_DWORD *)v1);
  return v2;
}

void WebKit::UnifiedPDFPlugin::windowActivityDidChange(WebKit::UnifiedPDFPlugin *this)
{
}

void WebKit::UnifiedPDFPlugin::repaintOnSelectionChange(uint64_t a1, int a2, void *a3)
{
  if (!a2 || (uint64_t v5 = *(void **)(a1 + 840)) != 0 && ([v5 isEmpty] & 1) == 0)
  {
    if (a3) {
      WebKit::UnifiedPDFPlugin::repaintOnSelectionChange(WebKit::UnifiedPDFPlugin::ActiveStateChangeReason,PDFSelection *)::$_0::operator()((uint64_t **)a1, a3);
    }
    uint64_t v6 = *(void **)(a1 + 840);
    if (v6) {
      CFRetain(*(CFTypeRef *)(a1 + 840));
    }
    WebKit::UnifiedPDFPlugin::repaintOnSelectionChange(WebKit::UnifiedPDFPlugin::ActiveStateChangeReason,PDFSelection *)::$_0::operator()((uint64_t **)a1, v6);
    if (v6)
    {
      CFRelease(v6);
    }
  }
}

void sub_198ECEFB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

int *WebKit::UnifiedPDFPlugin::paint(int *this, WebCore::GraphicsContext *a2, const WebCore::IntRect *a3)
{
  if (this[80] >= 1 && this[81] >= 1)
  {
    uint64_t v5 = (uint64_t)this;
    (*(void (**)(WebCore::GraphicsContext *, float, float))(*(void *)a2 + 640))(a2, (float)-this[94], (float)-this[95]);
    float v6 = (float)*(int *)(v5 + 320);
    float v7 = (float)*(int *)(v5 + 324);
    float32x2_t v19 = vcvt_f32_s32(*(int32x2_t *)(v5 + 376));
    float v20 = v6;
    float v21 = v7;
    (*(void (**)(WebCore::GraphicsContext *, float32x2_t *))(*(void *)a2 + 448))(a2, &v19);
    uint64_t v8 = (WebCore *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F428B8], "grayColor"), "CGColor");
    uint64_t v10 = WebCore::roundAndClampToSRGBALossy(v8, v9);
    uint64_t v11 = bswap32(v10) | 0x1104000000000000;
    if (!BYTE4(v10)) {
      uint64_t v11 = 0;
    }
    *(void *)float v18 = v11;
    (*(void (**)(WebCore::GraphicsContext *, float32x2_t *, float *))(*(void *)a2 + 224))(a2, &v19, v18);
    if ((*(void *)v18 & 0x8000000000000) != 0)
    {
      unint64_t v17 = (unsigned int *)(*(void *)v18 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v18 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v12);
      }
    }
    float v13 = *(double *)(v5 + 728);
    v18[0] = v13;
    v18[1] = v13;
    (*(void (**)(WebCore::GraphicsContext *, float *))(*(void *)a2 + 624))(a2, v18);
    v14.n128_f32[0] = WebKit::UnifiedPDFPlugin::centeringOffset((WebCore::Widget **)v5);
    (*(void (**)(WebCore::GraphicsContext *, __n128))(*(void *)a2 + 640))(a2, v14);
    float v15 = 1.0 / *(double *)(v5 + 728);
    WebCore::FloatRect::scale((WebCore::FloatRect *)&v19, v15, v15);
    (*(void (**)(float *__return_ptr))(**(void **)(v5 + 600) + 152))(v18);
    WebKit::UnifiedPDFPlugin::paintPDFContent(v5, 0, a2, (const WebCore::FloatRect *)&v19, v18, 0, 0);
    return (int *)std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v16);
  }
  return this;
}

void sub_198ECF22C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::paintPDFContent(uint64_t a1, const WebCore::GraphicsLayer *a2, WebCore::GraphicsContext *a3, const WebCore::FloatRect *a4, void *a5, char a6, WebKit::AsyncPDFRenderer *a7)
{
  void (*v26)(uint64_t *__return_ptr, uint64_t, const WebCore::FloatRect *, unsigned char *, float);
  uint64_t v27;
  const WebCore::FloatRect *v28;
  void *v29;
  void *v30;
  WTF *v31;
  float v32;
  int v33;
  uint64_t v34;
  const WebCore::FloatRect *v35;
  void *v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  void *v40;
  BOOL v41;
  void *v42;
  CGRect *v43;
  CGSize size;
  void *v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  void *v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int *v53;
  void *v54;
  unsigned int *v55;
  unsigned int isVisibleAndActive;
  int v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  int v62;
  BOOL v63;
  void v64[6];
  CGRect v65;
  char v66;
  _OWORD v67[3];
  CFTypeRef v68;
  float32x2_t v69[4];
  char v70;
  CGPoint v71;
  unsigned char v72[40];
  uint64_t v73;
  int v74;
  unsigned int v75;
  float v76;
  void v77[2];

  uint64_t result = WebKit::UnifiedPDFPlugin::visibleOrDocumentSizeIsEmpty((WebKit::UnifiedPDFPlugin *)a1);
  if ((result & 1) == 0 && *(void *)(a1 + 600))
  {
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 96))(a3, 1);
    uint64_t shouldShowDebugIndicators = (WebKit *)WebKit::UnifiedPDFPlugin::shouldShowDebugIndicators((WebKit::UnifiedPDFPlugin *)a1);
    unsigned int v58 = (int)shouldShowDebugIndicators;
    if (a6) {
      int v15 = 1;
    }
    else {
      int v15 = [(id)WebKit::getPDFSelectionClass(shouldShowDebugIndicators) instancesRespondToSelector:sel_enumerateRectsAndTransformsForPage_usingBlock_];
    }
    unint64_t v16 = *(void **)(a1 + 840);
    if (v16 && (([v16 isEmpty] | v15) & 1) == 0)
    {
      unint64_t v17 = (WebCore::Page *)WebKit::PDFPluginBase::page((WebKit::PDFPluginBase *)a1);
      float v18 = v17;
      if (!v17) {
        goto LABEL_78;
      }
      ++*(_DWORD *)v17;
      isVisibleAndActive = WebCore::Page::isVisibleAndActive(v17);
      WTF::RefCounted<WebCore::Page>::deref(v18);
LABEL_11:
      int v61 = 1;
    }
    else
    {
      isVisibleAndActive = 0;
      int v61 = 0;
    }
    float32x2_t v19 = *(void **)(a1 + 776);
    if (v19)
    {
      float v20 = (WebKit *)CFRetain(*(CFTypeRef *)(a1 + 776));
      WebKit::getPDFAnnotationTextWidgetClass[0](v20);
      if ((objc_opt_isKindOfClass() & 1) != 0 && *(unsigned char *)(a1 + 784))
      {
        uint64_t v21 = objc_msgSend(*(id *)(a1 + 296), "indexForPage:", objc_msgSend(v19, "page"));
        uint64_t v63 = v21 != 0x7FFFFFFFFFFFFFFFLL;
        if (v21 == 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = v21;
        }
        unsigned int v59 = v22 & 0xFFFFFFFFFFFFFF00;
      }
      else
      {
        unsigned int v59 = 0;
        uint64_t v63 = 0;
        LOBYTE(v22) = 0;
      }
      CFRelease(v19);
    }
    else
    {
      LOBYTE(v22) = 0;
      uint64_t v63 = 0;
      unsigned int v59 = 0;
    }
    float v23 = 1.0;
    if (a2)
    {
      uint64_t v24 = (*(uint64_t (**)(const WebCore::GraphicsLayer *))(*(void *)a2 + 832))(a2);
      if (v24) {
        float v23 = (*(float (**)(uint64_t))(*(void *)v24 + 328))(v24);
      }
    }
    uint64_t v25 = *(void *)(a1 + 600);
    std::__optional_copy_base<WebKit::PDFLayoutRow,false>::__optional_copy_base[abi:sn180100](v72, (uint64_t)a5);
    uint64_t v26 = *(void (**)(uint64_t *__return_ptr, uint64_t, const WebCore::FloatRect *, unsigned char *, float))(*(void *)v25 + 56);
    int v27 = v25;
    uint64_t v28 = a4;
    v26(&v73, v27, a4, v72, v23);
    std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v72, v29);
    long long v31 = (WTF *)v73;
    if (v75)
    {
      uint64_t v60 = v59 & 0xFFFFFFFFFFFFFF00 | v22;
      uint64_t v32 = v76;
      uint64_t v33 = v61;
      if (!a7) {
        uint64_t v33 = 1;
      }
      uint64_t v62 = v33;
      uint64_t v34 = 40 * v75;
      uint64_t v35 = (const WebCore::FloatRect *)(v73 + 24);
      while (1)
      {
        long long v36 = (void *)[*(id *)(a1 + 608) pageAtIndex:*((void *)v35 - 3)];
        a5 = v36;
        if (v36)
        {
          CFRetain(v36);
          uint64_t v71 = (CGPoint)*((_OWORD *)v35 - 1);
          if (a7)
          {
            v65.origin = v71;
            WebCore::FloatRect::scale((WebCore::FloatRect *)&v65, *(float *)(a1 + 648), *(float *)(a1 + 648));
            v67[0] = v65.origin;
            LODWORD(v65.origin.x) = (*(float (**)(void, _OWORD *, void, uint64_t))(**(void **)(a1 + 600)
                                                                                               + 64))(*(void *)(a1 + 600), v67, *((void *)v35 - 3), 1);
            HIDWORD(v65.origin.x) = v37;
            *(void *)&v65.origin.y = __PAIR64__(v39, v38);
            (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 96))(a3, 1);
            (*(void (**)(WebCore::GraphicsContext *, CGRect *))(*(void *)a3 + 448))(a3, &v65);
            if (v58)
            {
              v64[0] = 0x11040000FFFF0080;
              (*(void (**)(WebCore::GraphicsContext *, CGRect *, void *))(*(void *)a3 + 224))(a3, &v65, v64);
              if ((v64[0] & 0x8000000000000) != 0)
              {
                char v51 = (unsigned int *)(v64[0] & 0xFFFFFFFFFFFFLL);
                if (atomic_fetch_add((atomic_uint *volatile)(v64[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, v51);
                  WTF::fastFree((WTF *)v51, v40);
                }
              }
            }
            WebKit::AsyncPDFRenderer::paintTilesForPage(a7, a2, a3, v32, v28, v35, (FloatRect *)&v65, *((void *)v35 - 3));
            (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 104))(a3, 1);
          }
          uint64_t v41 = v63 && v60 == *((void *)v35 - 3);
          if ((v62 | v41) == 1)
          {
            (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 96))(a3, 1);
            if (a2)
            {
              v65.origin.x = 0.0;
              v65.origin.y = 0.0;
              (*(void (**)(void, CGRect *, void, uint64_t))(**(void **)(a1 + 600) + 64))(*(void *)(a1 + 600), &v65, *((void *)v35 - 3), 1);
              (*(void (**)(WebCore::GraphicsContext *))(*(void *)a3 + 640))(a3);
            }
            *(float *)&v65.origin.x = v32;
            *((float *)&v65.origin.x + 1) = v32;
            (*(void (**)(WebCore::GraphicsContext *, CGRect *))(*(void *)a3 + 624))(a3, &v65);
            (*(void (**)(WebCore::GraphicsContext *, CGPoint *))(*(void *)a3 + 448))(a3, &v71);
            if (!a7)
            {
              v65.origin.x = 1.05531862e-226;
              (*(void (**)(WebCore::GraphicsContext *, CGPoint *, CGRect *))(*(void *)a3 + 224))(a3, &v71, &v65);
              if ((*(void *)&v65.origin.x & 0x8000000000000) != 0)
              {
                uint64_t v52 = (unsigned int *)(*(void *)&v65.origin.x & 0xFFFFFFFFFFFFLL);
                if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v65.origin.x & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, v52);
                  WTF::fastFree((WTF *)v52, v42);
                }
              }
            }
            (*(void (**)(WebCore::GraphicsContext *, float, float))(*(void *)a3 + 640))(a3, *(float *)&v71.x, *((float *)&v71.x + 1) + *((float *)&v71.y + 1));
            v65.origin.x = -0.00781250185;
            (*(void (**)(WebCore::GraphicsContext *, CGRect *))(*(void *)a3 + 624))(a3, &v65);
            if (!a7) {
              [a5 drawWithBox:1 toContext:(*(uint64_t (**)(WebCore::GraphicsContext *))(*(void *)a3 + 24))(a3)];
            }
            if ((v61 | v41) == 1)
            {
              int v68 = a5;
              CFRetain(a5);
              WebKit::PDFDocumentLayout::geometryForPage(a1 + 608, &v68, (uint64_t)v69);
              int v68 = 0;
              CFRelease(a5);
              if (!v70)
              {
                __break(1u);
LABEL_78:
                isVisibleAndActive = 0;
                goto LABEL_11;
              }
              WebKit::PDFDocumentLayout::toPageTransform(v69, (uint64_t)v64);
              WebCore::AffineTransform::inverse((uint64_t *)&v65, (WebCore::AffineTransform *)v64);
              unint64_t v43 = &v65;
              if (!v66) {
                unint64_t v43 = (CGRect *)&unk_1994F71C0;
              }
              size = v43->size;
              v67[0] = v43->origin;
              v67[1] = size;
              v67[2] = v43[1].origin;
              (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 96))(a3, 1);
              (*(void (**)(WebCore::GraphicsContext *, _OWORD *))(*(void *)a3 + 648))(a3, v67);
              if (v61) {
                [*(id *)(a1 + 840) drawForPage:a5 withBox:1 active:isVisibleAndActive inContext:(*(uint64_t (**)(WebCore::GraphicsContext *))(*(void *)a3 + 24))(a3)];
              }
              if (v41)
              {
                uint64_t v45 = *(void **)(a1 + 776);
                if (v45) {
                  CFRetain(*(CFTypeRef *)(a1 + 776));
                }
                if (objc_msgSend(*(id *)(a1 + 296), "indexForPage:", objc_msgSend(v45, "page")) != 0x7FFFFFFFFFFFFFFFLL)
                {
                  [v45 bounds];
                  v65.origin.x = v46;
                  v65.origin.y = v47;
                  v65.size.width = v48;
                  v65.size.height = v49;
                  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v64, &v65);
                  if ((byte_1EB359CC1 & 1) == 0)
                  {
                    objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F428B8], "systemBlueColor"), "colorWithAlphaComponent:", 0.12), "CGColor");
                    WebCore::Color::createAndPreserveColorSpace();
                    WebCore::Color::Color();
                    if ((*(void *)&v65.origin.x & 0x8000000000000) != 0)
                    {
                      unint64_t v55 = (unsigned int *)(*(void *)&v65.origin.x & 0xFFFFFFFFFFFFLL);
                      if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v65.origin.x & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                      {
                        atomic_store(1u, v55);
                        WTF::fastFree((WTF *)v55, v54);
                      }
                    }
                    byte_1EB359CC1 = 1;
                  }
                  WebCore::Color::Color((WebCore::Color *)v77, &stru_1EB359CD0);
                  (*(void (**)(WebCore::GraphicsContext *, void *, void *))(*(void *)a3 + 224))(a3, v64, v77);
                  if ((v77[0] & 0x8000000000000) != 0)
                  {
                    uint64_t v53 = (unsigned int *)(v77[0] & 0xFFFFFFFFFFFFLL);
                    if (atomic_fetch_add((atomic_uint *volatile)(v77[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                    {
                      atomic_store(1u, v53);
                      WTF::fastFree((WTF *)v53, v50);
                    }
                  }
                }
                if (v45) {
                  CFRelease(v45);
                }
              }
              (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 104))(a3, 1);
              uint64_t v28 = a4;
            }
            (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 104))(a3, 1);
          }
          CFRelease(a5);
        }
        uint64_t v35 = (const WebCore::FloatRect *)((char *)v35 + 40);
        v34 -= 40;
        if (!v34)
        {
          long long v31 = (WTF *)v73;
          break;
        }
      }
    }
    if (v31)
    {
      unint64_t v73 = 0;
      unint64_t v74 = 0;
      WTF::fastFree(v31, v30);
    }
    return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 104))(a3, 1);
  }
  return result;
}

void sub_198ECFC74(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if ((a21 & 0x8000000000000) != 0)
  {
    uint64_t v26 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, a2);
    }
  }
  if (v22) {
    CFRelease(v22);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 104))(v21, 1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 104))(v21, 1);
  CFRelease(v23);
  uint64_t v28 = *(WTF **)(v24 - 168);
  if (v28)
  {
    *(void *)(v24 - 168) = 0;
    *(_DWORD *)(v24 - 16WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
    WTF::fastFree(v28, v27);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 104))(v21, 1);
  _Unwind_Resume(a1);
}

void *WebKit::UnifiedPDFPlugin::paintContents(void *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = this;
  if (this[86] == a2)
  {
    uint64_t v8 = (WebCore::Widget *)this[68];
    if (!v8) {
      return this;
    }
  }
  else
  {
    if (this[87] != a2)
    {
      if (this[88] != a2) {
        return this;
      }
      unint64_t v13 = WebKit::PDFPluginBase::viewRelativeScrollCornerRect((WebKit::PDFPluginBase *)this);
      uint64_t v14 = v5;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 96))(a3, 1);
      unint64_t v10 = -(int)v13 - (v13 & 0xFFFFFFFF00000000);
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v11, (const IntPoint *)&v10);
      float v6 = (WebCore::ScrollbarTheme *)(*(uint64_t (**)(uint64_t, float, float))(*(void *)a3 + 640))(a3, v11, v12);
      uint64_t v7 = WebCore::ScrollbarTheme::theme(v6);
      (*(void (**)(uint64_t, void *, uint64_t, unint64_t *))(*(void *)v7 + 112))(v7, v4, a3, &v13);
      return (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 104))(a3, 1);
    }
    uint64_t v8 = (WebCore::Widget *)this[69];
    if (!v8) {
      return this;
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 96))(a3, 1);
  unint64_t v13 = WebCore::Widget::frameRect(v8);
  uint64_t v14 = v9;
  unint64_t v10 = -(int)v13 - (v13 & 0xFFFFFFFF00000000);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v11, (const IntPoint *)&v10);
  (*(void (**)(uint64_t, float, float))(*(void *)a3 + 640))(a3, v11, v12);
  (*(void (**)(WebCore::Widget *, uint64_t, unint64_t *, void, void))(*(void *)v8 + 24))(v8, a3, &v13, 0, 0);
  return (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 104))(a3, 1);
}

void sub_198ED0130(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 104))(v1, 1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::layerForScrollCorner(WebKit::UnifiedPDFPlugin *this)
{
  return *((void *)this + 88);
}

void *non-virtual thunk to'WebKit::UnifiedPDFPlugin::paintContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::UnifiedPDFPlugin::paintContents((void *)(a1 - 592), a2, a3);
}

uint64_t WebKit::UnifiedPDFPlugin::canPaintSelectionIntoOwnedLayer(WebKit::UnifiedPDFPlugin *this)
{
  PDFSelectionClass = (void *)WebKit::getPDFSelectionClass(this);

  return [PDFSelectionClass instancesRespondToSelector:sel_enumerateRectsAndTransformsForPage_usingBlock_];
}

void WebKit::UnifiedPDFPlugin::paintPDFSelection(uint64_t a1, id *a2, uint64_t a3, const void *a4, WTF *a5)
{
  float v6 = *(void **)(a1 + 840);
  if (v6)
  {
    float v11 = (WebKit *)[v6 isEmpty];
    if ((v11 & 1) == 0
      && [(id)WebKit::getPDFSelectionClass(v11) instancesRespondToSelector:sel_enumerateRectsAndTransformsForPage_usingBlock_]&& *(void *)(a1 + 600))
    {
      float v12 = (WebCore::Page *)WebKit::PDFPluginBase::page((WebKit::PDFPluginBase *)a1);
      if (v12)
      {
        unint64_t v13 = v12;
        ++*(_DWORD *)v12;
        int isVisibleAndActive = WebCore::Page::isVisibleAndActive(v12);
        WTF::RefCounted<WebCore::Page>::deref(v13);
      }
      else
      {
        int isVisibleAndActive = 0;
      }
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 72);
      unint64_t v16 = (WebCore::RenderObject *)(v15 & 0xFFFFFFFFFFFFLL);
      if ((v15 & 0xFFFFFFFFFFFFLL) != 0 && (*(unsigned char *)((v15 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        return;
      }
      WebCore::RenderObject::theme(v16);
      WebCore::RenderObject::styleColorOptions(v16);
      if (isVisibleAndActive) {
        WebCore::RenderTheme::activeSelectionBackgroundColor();
      }
      else {
        WebCore::RenderTheme::inactiveSelectionBackgroundColor();
      }
      *(void *)&v39[0] = 0x11040000FFFFFFFFLL;
      WebCore::blendSourceOver(v49, (WebCore *)v39, &v36, v17);
      uint64_t v19 = *(void *)&v39[0];
      if ((*(void *)&v39[0] & 0x8000000000000) != 0) {
        goto LABEL_36;
      }
LABEL_13:
      if ((v36.m_colorAndFlags & 0x8000000000000) != 0)
      {
        uint64_t v32 = (unsigned int *)(v36.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v36.m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v32);
          WTF::fastFree((WTF *)v32, v18);
        }
      }
      uint64_t v20 = (*((uint64_t (**)(id *))*a2 + 104))(a2);
      if (v20) {
        float v21 = (*(float (**)(uint64_t))(*(void *)v20 + 328))(v20);
      }
      else {
        float v21 = 1.0;
      }
      uint64_t v22 = *(void *)(a1 + 600);
      std::__optional_copy_base<WebKit::PDFLayoutRow,false>::__optional_copy_base[abi:sn180100](v44, (uint64_t)a5);
      (*(void (**)(WTF **__return_ptr, uint64_t, const void *, unsigned char *, float))(*(void *)v22 + 56))(&v45, v22, a4, v44, v21);
      std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v44, v23);
      a5 = v45;
      if (v47)
      {
        int v25 = v48;
        a2 = (id *)(a1 + 608);
        uint64_t v26 = 40 * v47;
        while (1)
        {
          int v27 = (const void *)[*a2 pageAtIndex:*(void *)a5];
          a4 = v27;
          if (v27)
          {
            CFRetain(v27);
            long long v43 = *(_OWORD *)((char *)a5 + 8);
            (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 96))(a3, 1);
            v36.m_colorAndFlags = 0;
            uint64_t v37 = 0;
            (*(void (**)(void, Color *, void, uint64_t))(**(void **)(a1 + 600) + 64))(*(void *)(a1 + 600), &v36, *(void *)a5, 1);
            (*(void (**)(uint64_t))(*(void *)a3 + 640))(a3);
            LODWORD(v36.m_colorAndFlags) = v25;
            HIDWORD(v36.m_colorAndFlags) = v25;
            (*(void (**)(uint64_t, Color *))(*(void *)a3 + 624))(a3, &v36);
            (*(void (**)(uint64_t, long long *))(*(void *)a3 + 448))(a3, &v43);
            (*(void (**)(uint64_t, float, float))(*(void *)a3 + 640))(a3, *(float *)&v43, *((float *)&v43 + 1) + *((float *)&v43 + 3));
            v36.m_colorAndFlags = 0xBF8000003F800000;
            (*(void (**)(uint64_t, Color *))(*(void *)a3 + 624))(a3, &v36);
            CFTypeRef v40 = a4;
            CFRetain(a4);
            WebKit::PDFDocumentLayout::geometryForPage(a1 + 608, &v40, (uint64_t)v41);
            CFTypeRef v40 = 0;
            CFRelease(a4);
            uint64_t v19 = v42;
            if (!v42)
            {
              __break(1u);
LABEL_36:
              long long v31 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
              if (atomic_fetch_add((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
              {
                atomic_store(1u, v31);
                WTF::fastFree((WTF *)v31, v18);
              }
              goto LABEL_13;
            }
            WebKit::PDFDocumentLayout::toPageTransform(v41, (uint64_t)v35);
            WebCore::AffineTransform::inverse((uint64_t *)&v36, (WebCore::AffineTransform *)v35);
            uint64_t v28 = &v36;
            if (!v38) {
              uint64_t v28 = (Color *)&unk_1994F71C0;
            }
            long long v29 = *(_OWORD *)&v28[2].m_colorAndFlags;
            v39[0] = *(_OWORD *)&v28->m_colorAndFlags;
            v39[1] = v29;
            v39[2] = *(_OWORD *)&v28[4].m_colorAndFlags;
            (*(void (**)(uint64_t, _OWORD *))(*(void *)a3 + 648))(a3, v39);
            if (objc_opt_respondsToSelector())
            {
              uint64_t v30 = *(void **)(a1 + 840);
              if (v30) {
                CFRetain(*(CFTypeRef *)(a1 + 840));
              }
              v34[0] = MEMORY[0x1E4F143A8];
              v34[1] = 3321888768;
              v34[2] = ___ZN6WebKit16UnifiedPDFPlugin17paintPDFSelectionEPKN7WebCore13GraphicsLayerERNS1_15GraphicsContextERKNS1_9FloatRectENSt3__18optionalINS_12PDFLayoutRowEEE_block_invoke;
              v34[3] = &__block_descriptor_48_e8_32c161_ZTSKZN6WebKit16UnifiedPDFPlugin17paintPDFSelectionEPKN7WebCore13GraphicsLayerERNS1_15GraphicsContextERKNS1_9FloatRectENSt3__18optionalINS_12PDFLayoutRowEEEE3__1_e67_v88__0_CGRect__CGPoint_dd__CGSize_dd__8_CGAffineTransform_dddddd_40l;
              v34[4] = a3;
              v34[5] = v49;
              [v30 enumerateRectsAndTransformsForPage:a4 usingBlock:v34];
              if (v30) {
                CFRelease(v30);
              }
            }
            (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 104))(a3, 1);
            CFRelease(a4);
          }
          a5 = (WTF *)((char *)a5 + 40);
          v26 -= 40;
          if (!v26)
          {
            a5 = v45;
            break;
          }
        }
      }
      if (a5)
      {
        uint64_t v45 = 0;
        int v46 = 0;
        WTF::fastFree(a5, v24);
      }
      if ((v49[0] & 0x8000000000000) != 0)
      {
        uint64_t v33 = (unsigned int *)(v49[0] & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v49[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v33);
          WTF::fastFree((WTF *)v33, v24);
        }
      }
    }
  }
}

void sub_198ED07B0(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_198ED08DC()
{
}

uint64_t ___ZN6WebKit16UnifiedPDFPlugin17paintPDFSelectionEPKN7WebCore13GraphicsLayerERNS1_15GraphicsContextERKNS1_9FloatRectENSt3__18optionalINS_12PDFLayoutRowEEE_block_invoke(uint64_t a1, const CGAffineTransform *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  v12.origin.x = a3;
  v12.origin.y = a4;
  v12.size.width = a5;
  v12.size.height = a6;
  uint64_t v7 = *(void *)(a1 + 32);
  WebCore::AffineTransform::AffineTransform((WebCore::AffineTransform *)v11, a2);
  char isIdentity = WebCore::AffineTransform::isIdentity((WebCore::AffineTransform *)v11);
  if ((isIdentity & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 96))(v7, 1);
    (*(void (**)(void, unsigned char *))(**(void **)(a1 + 32) + 648))(*(void *)(a1 + 32), v11);
  }
  uint64_t v9 = *(void *)(a1 + 32);
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v11, &v12);
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *, void))(*(void *)v9 + 224))(v9, v11, *(void *)(a1 + 40));
  if ((isIdentity & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 104))(v7, 1);
  }
  return result;
}

void sub_198ED0A2C(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 104))(v1, 1);
  }
  _Unwind_Resume(exception_object);
}

__n128 __copy_helper_block_e8_32c161_ZTSKZN6WebKit16UnifiedPDFPlugin17paintPDFSelectionEPKN7WebCore13GraphicsLayerERNS1_15GraphicsContextERKNS1_9FloatRectENSt3__18optionalINS_12PDFLayoutRowEEEE3__1(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

double WebKit::UnifiedPDFPlugin::minScaleFactor(WebKit::UnifiedPDFPlugin *this)
{
  return 0.2;
}

double WebKit::UnifiedPDFPlugin::maxScaleFactor(WebKit::UnifiedPDFPlugin *this)
{
  return 6.0;
}

double WebKit::UnifiedPDFPlugin::scaleFactor(WebKit::UnifiedPDFPlugin *this)
{
  return *((double *)this + 91) * *((double *)this + 92);
}

float WebKit::UnifiedPDFPlugin::pageScaleFactor(WebKit::UnifiedPDFPlugin *this)
{
  return *((double *)this + 91);
}

float non-virtual thunk to'WebKit::UnifiedPDFPlugin::pageScaleFactor(WebKit::UnifiedPDFPlugin *this)
{
  return *((double *)this + 17);
}

double WebKit::UnifiedPDFPlugin::contentScaleFactor(WebKit::UnifiedPDFPlugin *this)
{
  return *((double *)this + 91) * *((float *)this + 162);
}

float non-virtual thunk to'WebKit::UnifiedPDFPlugin::deviceScaleFactor(WebKit::UnifiedPDFPlugin *this)
{
  return WebKit::PDFPluginBase::deviceScaleFactor((WebKit::UnifiedPDFPlugin *)((char *)this - 592));
}

uint64_t WebKit::UnifiedPDFPlugin::didBeginMagnificationGesture(uint64_t this)
{
  *(unsigned char *)(this + 768) = 1;
  return this;
}

uint64_t WebKit::UnifiedPDFPlugin::didEndMagnificationGesture(WebKit::UnifiedPDFPlugin *this)
{
  *((unsigned char *)this + 768) = 0;
  *((unsigned char *)this + 744) = 0;
  *((unsigned char *)this + 752) = 0;
  *((unsigned char *)this + 756) = 0;
  *((unsigned char *)this + 764) = 0;
  return WebKit::UnifiedPDFPlugin::deviceOrPageScaleFactorChanged((WebCore::GraphicsLayer **)this, 0);
}

uint64_t WebKit::UnifiedPDFPlugin::deviceOrPageScaleFactorChanged(WebCore::GraphicsLayer **this, char a2)
{
  if ((a2 & 1) == 0)
  {
    WebKit::PDFPluginBase::handlesPageScaleFactor((WebKit::PDFPluginBase *)this);
    WebCore::GraphicsLayer::noteDeviceOrPageScaleFactorChangedIncludingDescendants(this[82]);
LABEL_7:
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)this[75] + 80);
    return v5();
  }
  int v3 = *((unsigned __int8 *)this + 768);
  uint64_t result = WebKit::PDFPluginBase::handlesPageScaleFactor((WebKit::PDFPluginBase *)this);
  if (!v3 || (result & 1) == 0)
  {
    uint64_t result = WebCore::GraphicsLayer::noteDeviceOrPageScaleFactorChangedIncludingDescendants(this[82]);
    if (!v3) {
      goto LABEL_7;
    }
  }
  return result;
}

_DWORD *WebKit::UnifiedPDFPlugin::setScaleFactor(uint64_t a1, uint64_t a2, int a3, double a4)
{
  char v4 = a3;
  uint64_t v47 = a2;
  int v48 = a3;
  uint64_t result = (_DWORD *)WebKit::PDFPluginBase::page((WebKit::PDFPluginBase *)a1);
  if (!result) {
    return result;
  }
  uint64_t v9 = result;
  ++*result;
  IntPoint v46 = 0;
  if (v4) {
    unint64_t v10 = WebCore::AffineTransform::mapPoint((WebCore::AffineTransform *)(a1 + 328), (const WebCore::IntPoint *)&v47);
  }
  else {
    unint64_t v10 = (*(_DWORD *)(a1 + 320) / 2) | ((unint64_t)(*(_DWORD *)(a1 + 324) / 2) << 32);
  }
  IntPoint v46 = (IntPoint)v10;
  if (*(unsigned char *)(a1 + 752))
  {
    if (!*(unsigned char *)(a1 + 764))
    {
      __break(1u);
      goto LABEL_32;
    }
    IntPoint v46 = *(IntPoint *)(a1 + 756);
    IntPoint v11 = *(IntPoint *)(a1 + 744);
  }
  else
  {
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v49, &v46);
    int m_x = v49.m_x;
    int m_y = v49.m_y;
    int v30 = *(_DWORD *)(a1 + 376);
    int v31 = *(_DWORD *)(a1 + 380);
    double v32 = *(double *)(a1 + 728);
    float v33 = WebKit::UnifiedPDFPlugin::centeringOffset((WebCore::Widget **)a1);
    float v34 = 1.0 / v32;
    float v36 = (float)((float)(*(float *)&m_y + (float)v31) * v34) - v35;
    float v37 = roundf((float)((float)(*(float *)&m_x + (float)v30) * v34) - v33);
    uint64_t v38 = 0x7FFFFFFFLL;
    uint64_t v39 = 0x80000000;
    if (v37 > -2147500000.0) {
      uint64_t v39 = (int)v37;
    }
    if (v37 < 2147500000.0) {
      uint64_t v38 = v39;
    }
    float v40 = roundf(v36);
    if (v40 >= 2147500000.0)
    {
      unint64_t v41 = 0x7FFFFFFF00000000;
    }
    else if (v40 <= -2147500000.0)
    {
      unint64_t v41 = 0x8000000000000000;
    }
    else
    {
      unint64_t v41 = (unint64_t)(int)v40 << 32;
    }
    IntPoint v11 = (IntPoint)(v41 | v38);
    if (*(unsigned char *)(a1 + 768) && !*(unsigned char *)(a1 + 752))
    {
      IntPoint v42 = v46;
      if (!*(unsigned char *)(a1 + 764)) {
        *(unsigned char *)(a1 + 764) = 1;
      }
      *(IntPoint *)(a1 + 756) = v42;
      *(unsigned char *)(a1 + 752) = 1;
      *(IntPoint *)(a1 + 744) = v11;
    }
  }
  IntPoint v45 = v11;
  *(double *)(a1 + 728) = a4;
  WebKit::UnifiedPDFPlugin::updateScrollbars((WebKit::UnifiedPDFPlugin *)a1);
  WebKit::UnifiedPDFPlugin::updateScrollingExtents((WebKit::UnifiedPDFPlugin *)a1);
  WebKit::UnifiedPDFPlugin::deviceOrPageScaleFactorChanged((WebCore::GraphicsLayer **)a1, 1);
  uint64_t v12 = *(void *)(a1 + 600);
  unint64_t v13 = WebKit::UnifiedPDFPlugin::documentSize((WebKit::UnifiedPDFPlugin *)a1);
  float v14 = WebKit::UnifiedPDFPlugin::centeringOffset((WebCore::Widget **)a1);
  (*(void (**)(uint64_t, float, float, float, float, double))(*(void *)v12 + 96))(v12, (float)(int)v13, (float)SHIDWORD(v13), v14, v15, *(double *)(a1 + 728));
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v44, &v45);
  float v16 = *(float *)v44;
  float v17 = *(float *)&v44[1];
  float v18 = WebKit::UnifiedPDFPlugin::centeringOffset((WebCore::Widget **)a1);
  float v20 = *(double *)(a1 + 728);
  float v21 = (float)(v16 + v18) * v20;
  float v8 = (float)(v17 + v19) * v20;
  float v22 = roundf(v21);
  if (v22 >= 2147500000.0)
  {
LABEL_32:
    int v23 = 0x7FFFFFFF;
    goto LABEL_11;
  }
  if (v22 <= -2147500000.0) {
    int v23 = 0x80000000;
  }
  else {
    int v23 = (int)v22;
  }
LABEL_11:
  float v24 = roundf(v8);
  if (v24 >= 2147500000.0)
  {
    int v25 = 0x7FFFFFFF;
  }
  else if (v24 <= -2147500000.0)
  {
    int v25 = 0x80000000;
  }
  else
  {
    int v25 = (int)v24;
  }
  v49.int m_x = (v23 - v46.m_x) & ~((v23 - v46.m_x) >> 31);
  v49.int m_y = (v25 - v46.m_y) & ~((v25 - v46.m_y) >> 31);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v43, &v49);
  WebKit::UnifiedPDFPlugin::scrollToPointInContentsSpace(a1, v43[0], v43[1]);
  WebKit::UnifiedPDFPlugin::scheduleRenderingUpdate((WebKit::PDFPluginBase *)a1);
  uint64_t v26 = *(void *)(a1 + 96);
  if (v26) {
    int v27 = *(WebKit::PluginView **)(v26 + 8);
  }
  else {
    int v27 = 0;
  }
  WebKit::PluginView::pluginScaleFactorDidChange(v27);
  return WTF::RefCounted<WebCore::Page>::deref(v9);
}

void sub_198ED0EBC(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::updateScrollbars(WebKit::UnifiedPDFPlugin *this)
{
  WebKit::PDFPluginBase::updateScrollbars((unint64_t)this);
  uint64_t result = *((void *)this + 69);
  if (*((void *)this + 68)) {
    BOOL v3 = result == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 272))(result);
  }
  uint64_t v4 = *((void *)this + 86);
  if (v4)
  {
    uint64_t v5 = WebKit::PDFPluginBase::viewRelativeHorizontalScrollbarRect(this);
    uint64_t v7 = v6;
    unint64_t v18 = v5;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v19, (const IntPoint *)&v18);
    (*(void (**)(uint64_t, float *))(*(void *)v4 + 128))(v4, &v19);
    float v19 = (float)(int)v7;
    float v20 = (float)SHIDWORD(v7);
    uint64_t result = (*(uint64_t (**)(uint64_t, float *))(*(void *)v4 + 160))(v4, &v19);
  }
  uint64_t v8 = *((void *)this + 87);
  if (v8)
  {
    uint64_t v9 = WebKit::PDFPluginBase::viewRelativeVerticalScrollbarRect(this);
    uint64_t v11 = v10;
    unint64_t v18 = v9;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v19, (const IntPoint *)&v18);
    (*(void (**)(uint64_t, float *))(*(void *)v8 + 128))(v8, &v19);
    float v19 = (float)(int)v11;
    float v20 = (float)SHIDWORD(v11);
    uint64_t result = (*(uint64_t (**)(uint64_t, float *))(*(void *)v8 + 160))(v8, &v19);
  }
  uint64_t v12 = *((void *)this + 88);
  if (v12)
  {
    unint64_t v13 = WebKit::PDFPluginBase::viewRelativeScrollCornerRect(this);
    uint64_t v15 = v14;
    unint64_t v18 = v13;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v19, (const IntPoint *)&v18);
    (*(void (**)(uint64_t, float *))(*(void *)v12 + 128))(v12, &v19);
    float v19 = (float)(int)v15;
    float v20 = (float)SHIDWORD(v15);
    (*(void (**)(uint64_t, float *))(*(void *)v12 + 160))(v12, &v19);
    BOOL v17 = (int)v15 > 0 && SHIDWORD(v15) > 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)v12 + 216))(v12, v17);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 240))(v12, 1);
  }
  return result;
}

uint64_t WebKit::UnifiedPDFPlugin::updateScrollingExtents(WebKit::UnifiedPDFPlugin *this)
{
  uint64_t result = WebKit::PDFPluginBase::page(this);
  if (result)
  {
    BOOL v3 = (WebCore::Page *)result;
    ++*(_DWORD *)result;
    uint64_t v24 = *((void *)this + 47);
    uint64_t v23 = WebCore::ScrollableArea::constrainedScrollPosition(this, (const WebCore::IntPoint *)&v24);
    if (v24 != v23 || HIDWORD(v24) != HIDWORD(v23))
    {
      char v5 = *((unsigned char *)this + 44);
      *((unsigned char *)this + 44) = 1;
      long long v18 = xmmword_1994F7190;
      WebKit::UnifiedPDFPlugin::requestScrollToPosition(this, (uint64_t)&v23, (uint64_t)&v18);
      *((unsigned char *)this + 44) = v5;
    }
    uint64_t v6 = WebCore::Page::scrollingCoordinator(v3);
    (*(void (**)(uint64_t, void, void, WebKit::UnifiedPDFPlugin *))(*(void *)v6 + 312))(v6, *((void *)this + 89), *((void *)this + 90), this);
    uint64_t v7 = *((void *)this + 75);
    unsigned int v8 = WebCore::ScrollableArea::allowsHorizontalScrolling(this);
    if (WebCore::ScrollableArea::allowsVerticalScrolling(this)) {
      uint64_t v9 = v8 | 2;
    }
    else {
      uint64_t v9 = v8;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 120))(v7, v9);
    WebCore::EventRegion::EventRegion((WebCore::EventRegion *)&v18);
    WebCore::EventRegionContext::EventRegionContext((WebCore::EventRegionContext *)v17, (WebCore::EventRegion *)&v18);
    float v10 = (float)*((int *)this + 80);
    float v11 = (float)*((int *)this + 81);
    v15.m_location = 0;
    v15.m_size.m_width = v10;
    v15.m_size.m_height = v11;
    memset(&v14, 0, sizeof(v14));
    WebCore::FloatRoundedRect::FloatRoundedRect((WebCore::FloatRoundedRect *)v16, &v15, &v14);
    uint64_t v12 = *(void *)(*(void *)(*((void *)this + 14) + 8) + 72);
    if ((v12 & 0xFFFFFFFFFFFFLL) != 0 && (*(unsigned char *)((v12 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      uint64_t result = 105;
      __break(0xC471u);
    }
    else
    {
      WebCore::EventRegionContext::unite();
      (*(void (**)(void, long long *))(**((void **)this + 83) + 416))(*((void *)this + 83), &v18);
      WebCore::EventRegionContext::~EventRegionContext((WebCore::EventRegionContext *)v17);
      if (v22[24]) {
        WebCore::Region::~Region((WebCore::Region *)v22);
      }
      WebCore::Region::~Region((WebCore::Region *)&v21);
      WebCore::Region::~Region((WebCore::Region *)&v20);
      WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v13);
      WebCore::Region::~Region((WebCore::Region *)&v18);
      return (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v3);
    }
  }
  return result;
}

void sub_198ED139C(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

float WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatPoint>(WebKit::UnifiedPDFPlugin *this, int a2, int a3, unint64_t a4, char a5, float a6, float a7)
{
  float v7 = a6;
  switch(a2)
  {
    case 0:
      if (a3)
      {
        if (!a5)
        {
          __break(1u);
          JUMPOUT(0x198ED1500);
        }
        float v7 = WebKit::PDFDocumentLayout::pdfPageToDocument((uint64_t)this + 608, a4, a6, a7);
        goto LABEL_5;
      }
      break;
    case 1:
LABEL_5:
      if (a3 != 1)
      {
        float v7 = v7 * *((float *)this + 162);
        goto LABEL_7;
      }
      break;
    case 2:
LABEL_7:
      if (a3 != 2)
      {
        float v10 = WebKit::UnifiedPDFPlugin::centeringOffset((WebCore::Widget **)this);
        float v11 = *((double *)this + 91);
        float v7 = (float)(v7 + v10) * v11;
        goto LABEL_9;
      }
      break;
    case 3:
LABEL_9:
      if (a3 != 3) {
        float v7 = v7 - (float)*((int *)this + 94);
      }
      break;
    default:
      return v7;
  }
  return v7;
}

uint64_t WebKit::UnifiedPDFPlugin::scrollToPointInContentsSpace(uint64_t a1, float a2, float a3)
{
  char v4 = *(unsigned char *)(a1 + 44);
  *(unsigned char *)(a1 + 44) = 1;
  float v5 = roundf(a2);
  uint64_t v6 = 0x7FFFFFFFLL;
  uint64_t v7 = 0x80000000;
  if (v5 > -2147500000.0) {
    uint64_t v7 = (int)v5;
  }
  if (v5 < 2147500000.0) {
    uint64_t v6 = v7;
  }
  float v8 = roundf(a3);
  uint64_t v9 = 0x7FFFFFFF00000000;
  unint64_t v10 = 0x8000000000000000;
  if (v8 > -2147500000.0) {
    unint64_t v10 = (unint64_t)(int)v8 << 32;
  }
  if (v8 < 2147500000.0) {
    uint64_t v9 = v10;
  }
  uint64_t v12 = v9 | v6;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v13, (const IntPoint *)&v12);
  uint64_t result = WebCore::ScrollableArea::scrollToPositionWithoutAnimation();
  *(unsigned char *)(a1 + 44) = v4;
  return result;
}

_DWORD *WebKit::UnifiedPDFPlugin::setPageScaleFactor(uint64_t a1, unint64_t a2, int a3, double a4)
{
  WebKit::UnifiedPDFPlugin::deviceOrPageScaleFactorChanged((WebCore::GraphicsLayer **)a1, 1);
  uint64_t result = (_DWORD *)WebKit::PDFPluginBase::handlesPageScaleFactor((WebKit::PDFPluginBase *)a1);
  if (result)
  {
    unint64_t v9 = HIDWORD(a2);
    if ((_BYTE)a3)
    {
      uint64_t v10 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) + 8);
      if (*(unsigned char *)(v10 + 144)) {
        uint64_t v10 = 0;
      }
      float v11 = *(_DWORD **)(v10 + 288);
      if (v11)
      {
        ++v11[2];
        WebCore::FrameView::topContentInset();
        LODWORD(v9) = llroundf(v12) + HIDWORD(a2);
        if (v11[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v11 + 8))(v11);
        }
        else {
          --v11[2];
        }
      }
    }
    if (a4 != 1.0) {
      *(unsigned char *)(a1 + 772) = 0;
    }
    WebKit::UnifiedPDFPlugin::updateFindOverlay(a1, 1);
    double v13 = a4 / *(double *)(a1 + 736);
    return WebKit::UnifiedPDFPlugin::setScaleFactor(a1, a2 | ((unint64_t)v9 << 32), a3, v13);
  }
  return result;
}

void sub_198ED1700(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[2];
  }
  _Unwind_Resume(exception_object);
}

void WebKit::UnifiedPDFPlugin::updateFindOverlay(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 104);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  WebKit::WebFrame::protectedPage(v5, &v10);
  uint64_t v6 = v10;
  WebKit::FindController::didInvalidateFindRects(*(_DWORD **)(v10 + 448));
  CFRelease(*(CFTypeRef *)(v6 + 8));
  if (a2)
  {
    uint64_t v7 = *(void *)(a1 + 104);
    if (v7) {
      uint64_t v8 = *(void *)(v7 + 8);
    }
    else {
      uint64_t v8 = 0;
    }
    WebKit::WebFrame::protectedPage(v8, &v10);
    uint64_t v9 = v10;
    WebKit::FindController::hideFindIndicator(*(void *)(v10 + 448));
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
}

void sub_198ED17E0(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL WebKit::UnifiedPDFPlugin::geometryDidChange(WebKit::UnifiedPDFPlugin *this, const WebCore::IntSize *a2, const WebCore::AffineTransform *a3)
{
  BOOL v5 = *(_DWORD *)a2 == *((_DWORD *)this + 80) && *((_DWORD *)a2 + 1) == *((_DWORD *)this + 81);
  BOOL v6 = WebKit::PDFPluginBase::geometryDidChange(this, a2, a3);
  if (v6 && !v5) {
    WebKit::UnifiedPDFPlugin::updateLayout((uint64_t)this, 0, 0);
  }
  return v6;
}

unint64_t WebKit::UnifiedPDFPlugin::contentsSize(WebKit::UnifiedPDFPlugin *this)
{
  if ([*((id *)this + 37) isLocked])
  {
    unsigned int v2 = 0;
    unint64_t v3 = 0;
  }
  else
  {
    float v4 = *((float *)this + 162);
    float v5 = *((float *)this + 160) * v4;
    float v6 = *((float *)this + 161) * v4;
    float v7 = *((double *)this + 91);
    float v8 = v6 * v7;
    float v9 = ceilf(v5 * v7);
    if (v9 > -2147500000.0) {
      int v10 = (int)v9;
    }
    else {
      int v10 = 0x80000000;
    }
    if (v9 < 2147500000.0) {
      unsigned int v2 = v10;
    }
    else {
      unsigned int v2 = 0x7FFFFFFF;
    }
    float v11 = ceilf(v8);
    if (v11 >= 2147500000.0)
    {
      unint64_t v3 = 0x7FFFFFFF00000000;
    }
    else if (v11 <= -2147500000.0)
    {
      unint64_t v3 = 0x8000000000000000;
    }
    else
    {
      unint64_t v3 = (unint64_t)(int)v11 << 32;
    }
  }
  return v3 | v2;
}

int WebKit::UnifiedPDFPlugin::heightForPageAtIndex(id *this, unint64_t a2)
{
  if ([this[37] isLocked]) {
    goto LABEL_7;
  }
  id v4 = this[76];
  if (!v4) {
    return (int)v4;
  }
  if ([v4 pageCount] <= a2)
  {
LABEL_7:
    LODWORD(v4) = 0;
    return (int)v4;
  }
  float v5 = 0.0;
  if (*((unsigned int *)this + 157) > a2) {
    float v5 = *((float *)this[77] + 9 * a2 + 7);
  }
  LODWORD(v4) = vcvtps_u32_f32(v5);
  return (int)v4;
}

uint64_t WebKit::UnifiedPDFPlugin::firstPageHeight(id *this)
{
  return WebKit::UnifiedPDFPlugin::heightForPageAtIndex(this, 0);
}

float WebKit::UnifiedPDFPlugin::layoutBoundsForPageAtIndex(WebKit::UnifiedPDFPlugin *this, unint64_t a2)
{
  float v4 = 0.0;
  if (([*((id *)this + 37) isLocked] & 1) == 0)
  {
    float v5 = (void *)*((void *)this + 76);
    if (v5)
    {
      if ([v5 pageCount] > a2 && *((unsigned int *)this + 157) > a2) {
        return *(float *)(*((void *)this + 77) + 36 * a2 + 16);
      }
    }
  }
  return v4;
}

WebCore::FragmentedSharedBuffer *WebKit::UnifiedPDFPlugin::liveResourceData@<X0>(id *this@<X0>, uint64_t *a2@<X8>)
{
  if (*((unsigned char *)this + 576)) {
    uint64_t result = (WebCore::FragmentedSharedBuffer *)[this[37] dataRepresentation];
  }
  else {
    uint64_t result = (WebCore::FragmentedSharedBuffer *)WebKit::PDFPluginBase::originalData((atomic_uchar *)this);
  }
  float v7 = result;
  if (result)
  {
    uint64_t result = (WebCore::FragmentedSharedBuffer *)WebCore::SharedBuffer::create<NSData *&>(&v7, v4, &v6);
    uint64_t v5 = v6;
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t WebKit::UnifiedPDFPlugin::liveData(id *this)
{
  if (*((unsigned char *)this + 576)) {
    return [this[37] dataRepresentation];
  }
  else {
    return WebKit::PDFPluginBase::originalData((atomic_uchar *)this);
  }
}

atomic_uchar *WebKit::UnifiedPDFPlugin::releaseMemory(WebKit::UnifiedPDFPlugin *this)
{
  uint64_t result = (atomic_uchar *)*((void *)this + 75);
  if (result) {
    return WebKit::PDFPresentationController::releaseMemory(result);
  }
  return result;
}

_DWORD *WebKit::UnifiedPDFPlugin::didChangeScrollOffset(WebKit::UnifiedPDFPlugin *this)
{
  uint64_t v2 = *((void *)this + 83);
  if (*((unsigned char *)this + 44))
  {
    IntPoint v4 = (IntPoint)*((void *)this + 47);
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v5, &v4);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 168))(v2, v5);
  }
  else
  {
    IntPoint v4 = (IntPoint)*((void *)this + 47);
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v5, &v4);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 176))(v2, v5);
  }
  WebKit::UnifiedPDFPlugin::updateFindOverlay((uint64_t)this, 1);
  return WebKit::UnifiedPDFPlugin::scheduleRenderingUpdate(this);
}

uint64_t WebKit::UnifiedPDFPlugin::didChangeVisibleRow(WebKit::UnifiedPDFPlugin *this)
{
  WebKit::UnifiedPDFPlugin::updateFindOverlay((uint64_t)this, 1);
  uint64_t v2 = *((void *)this + 75);
  unsigned int v3 = WebCore::ScrollableArea::allowsHorizontalScrolling(this);
  if (WebCore::ScrollableArea::allowsVerticalScrolling(this)) {
    uint64_t v4 = v3 | 2;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 120);

  return v5(v2, v4);
}

uint64_t WebKit::UnifiedPDFPlugin::invalidateScrollbarRect(uint64_t this, WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  if (*(WebCore::Scrollbar **)(this + 552) == a2)
  {
    uint64_t v3 = *(void *)(this + 696);
    if (!v3) {
      return this;
    }
    goto LABEL_6;
  }
  if (*(WebCore::Scrollbar **)(this + 544) == a2)
  {
    uint64_t v3 = *(void *)(this + 688);
    if (v3)
    {
LABEL_6:
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v4, a3);
      return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v3 + 328))(v3, v4, 1);
    }
  }
  return this;
}

uint64_t WebKit::UnifiedPDFPlugin::invalidateScrollCornerRect(uint64_t this, const WebCore::IntRect *a2)
{
  uint64_t v2 = *(void *)(this + 704);
  if (v2)
  {
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v3, a2);
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v2 + 328))(v2, v3, 1);
  }
  return this;
}

_DWORD *WebKit::UnifiedPDFPlugin::createScrollbarsController(WebKit::UnifiedPDFPlugin *this)
{
  uint64_t result = (_DWORD *)WebKit::PDFPluginBase::page(this);
  if (result)
  {
    uint64_t v3 = result;
    ++*result;
    (*(void (**)(void, _DWORD *, WebKit::UnifiedPDFPlugin *, void))(**(void **)(*((void *)result + 6)
                                                                                               + 16)
                                                                                 + 1080))(*(void *)(*((void *)result + 6) + 16), result, this, 0);
    return WTF::RefCounted<WebCore::Page>::deref(v3);
  }
  return result;
}

void sub_198ED1D98(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

BOOL WebKit::UnifiedPDFPlugin::isFullMainFramePlugin(WebKit::UnifiedPDFPlugin *this)
{
  uint64_t v1 = *(void *)(*(void *)(*((void *)this + 13) + 8) + 24);
  return v1
      && (uint64_t v2 = *(void *)(v1 + 8)) != 0
      && *(void *)(*(void *)(v2 + 128) + 8) == v2
      && WebKit::PDFPluginBase::isFullFramePlugin(this);
}

unsigned __int8 *WebKit::UnifiedPDFPlugin::scrollbarStyleChanged(unsigned __int8 *result, uint64_t a2, int a3)
{
  if (a3)
  {
    unsigned __int8 v3 = atomic_load(result + 562);
    if ((v3 & 1) == 0) {
      return (unsigned __int8 *)WebKit::UnifiedPDFPlugin::updateLayout((uint64_t)result, 0, 0);
    }
  }
  return result;
}

uint64_t WebCore::ScrollableArea::constrainedScrollPosition(WebCore::ScrollableArea *this, const WebCore::IntPoint *a2)
{
  uint64_t v6 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(void *)this + 424))(this);
  uint64_t v5 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(void *)this + 432))(this);
  return WebCore::IntPoint::constrainedBetween(a2, (const WebCore::IntPoint *)&v6, (const WebCore::IntPoint *)&v5);
}

uint64_t WebKit::UnifiedPDFPlugin::requestScrollToPosition(WebKit::PDFPluginBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (WebCore::Page *)WebKit::PDFPluginBase::page(a1);
  if (!v6) {
    return 0;
  }
  float v7 = v6;
  ++*(_DWORD *)v6;
  uint64_t v8 = WebCore::Page::scrollingCoordinator(v6);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, WebKit::PDFPluginBase *, uint64_t, uint64_t))(*(void *)v8 + 200))(v8, a1, a2, a3);
  WTF::RefCounted<WebCore::Page>::deref(v7);
  return v9;
}

void sub_198ED1F40(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::requestStartKeyboardScrollAnimation(WebKit::UnifiedPDFPlugin *this, const KeyboardScroll *a2)
{
  uint64_t v4 = (WebCore::Page *)WebKit::PDFPluginBase::page(this);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  ++*(_DWORD *)v4;
  uint64_t v6 = WebCore::Page::scrollingCoordinator(v4);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, WebKit::UnifiedPDFPlugin *, const KeyboardScroll *))(*(void *)v6 + 184))(v6, this, a2);
  WTF::RefCounted<WebCore::Page>::deref(v5);
  return v7;
}

void sub_198ED1FE0(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::requestStopKeyboardScrollAnimation(WebKit::UnifiedPDFPlugin *this, uint64_t a2)
{
  uint64_t v4 = (WebCore::Page *)WebKit::PDFPluginBase::page(this);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  ++*(_DWORD *)v4;
  uint64_t v6 = WebCore::Page::scrollingCoordinator(v4);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, WebKit::UnifiedPDFPlugin *, uint64_t))(*(void *)v6 + 192))(v6, this, a2);
  WTF::RefCounted<WebCore::Page>::deref(v5);
  return v7;
}

void sub_198ED2080(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

void WebKit::UnifiedPDFPlugin::annotationForRootViewPoint(WebKit::UnifiedPDFPlugin *this, const WebCore::IntPoint *a2, const WebCore::IntPoint *a3)
{
  IntPoint v16 = (IntPoint)WebCore::AffineTransform::mapPoint((const WebCore::IntPoint *)((char *)a2 + 328), a3);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v17, &v16);
  WebKit::UnifiedPDFPlugin::convertDown<WebCore::FloatPoint>(a2, 4, 1, 0, 0, v17[0], v17[1]);
  float v18 = v5;
  float v19 = v6;
  unint64_t v7 = WebKit::PDFPresentationController::pageIndexForDocumentPoint(*((WebKit::PDFPresentationController **)a2 + 75), (const WebCore::FloatPoint *)&v18);
  if (v8)
  {
    unint64_t v9 = v7;
    int v10 = (char *)a2 + 608;
    float v11 = (void *)[*((id *)a2 + 76) pageAtIndex:v7];
    float v12 = v11;
    if (v11) {
      CFRetain(v11);
    }
    WebKit::PDFDocumentLayout::documentToPDFPage((uint64_t)v10, v9, v18, v19);
    v16.int m_x = v13;
    v16.int m_y = v14;
    WebCore::FloatPoint::operator CGPoint();
    FloatRect v15 = (const void *)objc_msgSend(v12, "annotationAtPoint:");
    *(void *)this = v15;
    if (v15) {
      CFRetain(v15);
    }
    if (v12) {
      CFRelease(v12);
    }
  }
  else
  {
    *(void *)this = 0;
  }
}

void sub_198ED2180(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::UnifiedPDFPlugin::pdfElementTypesForPluginPoint(WebKit::UnifiedPDFPlugin *this, const IntPoint *a2)
{
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v25, a2);
  WebKit::UnifiedPDFPlugin::convertDown<WebCore::FloatPoint>(this, 4, 1, 0, 0, v25[0], v25[1]);
  float v26 = v3;
  float v27 = v4;
  unint64_t v5 = WebKit::PDFPresentationController::pageIndexForDocumentPoint(*((WebKit::PDFPresentationController **)this + 75), (const WebCore::FloatPoint *)&v26);
  if (!v6) {
    return 0;
  }
  unint64_t v7 = v5;
  char v8 = (void *)*((void *)this + 76);
  if (!v8 || v7 >= [v8 pageCount]) {
    return 0;
  }
  unint64_t v9 = (void *)[*((id *)this + 76) pageAtIndex:v7];
  int v10 = v9;
  if (v9) {
    CFRetain(v9);
  }
  WebKit::PDFDocumentLayout::documentToPDFPage((uint64_t)this + 608, v7, v26, v27);
  if (objc_opt_respondsToSelector())
  {
    WebCore::FloatPoint::operator CGPoint();
    __int16 v11 = objc_msgSend(v10, "areaOfInterestAtPoint:");
    int v12 = v11 & 6 | 1;
    if ((v11 & 8) != 0)
    {
      WebCore::FloatPoint::operator CGPoint();
      int v13 = (WebKit *)objc_msgSend(v10, "annotationAtPoint:");
      if (WebKit::annotationIsLinkWithDestination(v13, v14)) {
        int v12 = v11 & 6 | 9;
      }
    }
    uint64_t v15 = v12 | v11 & 0x1F0u;
  }
  else
  {
    WebCore::FloatPoint::operator CGPoint();
    BOOL v17 = (WebKit *)objc_msgSend(v10, "annotationAtPoint:");
    float v19 = v17;
    if (v17)
    {
      BOOL IsLinkWithDestination = WebKit::annotationIsLinkWithDestination(v17, v18);
      if (IsLinkWithDestination) {
        LODWORD(v15) = 13;
      }
      else {
        LODWORD(v15) = 5;
      }
      WebKit::getPDFAnnotationPopupClass[0]((WebKit *)IsLinkWithDestination);
      uint64_t isKindOfClass = objc_opt_isKindOfClass();
      if (isKindOfClass) {
        LODWORD(v15) = v15 | 0x80;
      }
      WebKit::getPDFAnnotationTextClass[0]((WebKit *)isKindOfClass);
      uint64_t v22 = objc_opt_isKindOfClass();
      if (v22) {
        uint64_t v15 = v15 | 0x40;
      }
      else {
        uint64_t v15 = v15;
      }
      WebKit::getPDFAnnotationTextWidgetClass[0]((WebKit *)v22);
      uint64_t v23 = objc_opt_isKindOfClass();
      if (v23)
      {
        uint64_t v23 = [(WebKit *)v19 isReadOnly];
        if (v23) {
          uint64_t v15 = v15;
        }
        else {
          uint64_t v15 = v15 | 0x20;
        }
      }
      WebKit::getPDFAnnotationButtonWidgetClass[0]((WebKit *)v23);
      if (objc_opt_isKindOfClass())
      {
        if ([(WebKit *)v19 isReadOnly]) {
          uint64_t v15 = v15;
        }
        else {
          uint64_t v15 = v15 | 0x10;
        }
      }
    }
    else
    {
      uint64_t v15 = 1;
    }
    [*((id *)this + 37) documentRef];
    if (CGPDFDocumentIsTaggedPDF() && [v10 pageLayout])
    {
      WebCore::FloatPoint::operator CGPoint();
      int AreaOfInterestAtPoint = CGPDFPageLayoutGetAreaOfInterestAtPoint();
      uint64_t v15 = (AreaOfInterestAtPoint << 7) & 0x100 | (2 * (AreaOfInterestAtPoint & 1)) | v15;
    }
  }
  if (v10) {
    CFRelease(v10);
  }
  return v15;
}

void sub_198ED23EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::annotationIsLinkWithDestination(WebKit *this, PDFAnnotation *a2)
{
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }
  if ([(WebKit *)this URL]) {
    return 1;
  }
  return [(WebKit *)this destination] != 0;
}

uint64_t WebKit::UnifiedPDFPlugin::handleMouseEvent(WebKit::UnifiedPDFPlugin *this, const WebMouseEvent *a2)
{
  if (*((unsigned char *)this + 528))
  {
    long long v4 = *(_OWORD *)((char *)a2 + 4);
    *((_OWORD *)this + 25) = *((_OWORD *)a2 + 1);
    *(_OWORD *)((char *)this + 388) = v4;
    long long v5 = *((_OWORD *)a2 + 2);
    long long v6 = *((_OWORD *)a2 + 3);
    long long v7 = *((_OWORD *)a2 + 5);
    *((_OWORD *)this + 28) = *((_OWORD *)a2 + 4);
    *((_OWORD *)this + 29) = v7;
    *((_OWORD *)this + 26) = v5;
    *((_OWORD *)this + 27) = v6;
    WTF::String::operator=((uint64_t *)this + 60, (WTF::StringImpl **)a2 + 12);
    *((unsigned char *)this + 488) = *((unsigned char *)a2 + 104);
    WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)this + 124, (uint64_t)a2 + 112);
    WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)this + 128, (uint64_t)a2 + 128);
  }
  else
  {
    *((_DWORD *)this + 96) = 0;
    long long v8 = *(_OWORD *)((char *)a2 + 4);
    *((_OWORD *)this + 25) = *((_OWORD *)a2 + 1);
    *(_OWORD *)((char *)this + 388) = v8;
    long long v9 = *((_OWORD *)a2 + 2);
    long long v10 = *((_OWORD *)a2 + 3);
    long long v11 = *((_OWORD *)a2 + 5);
    *((_OWORD *)this + 28) = *((_OWORD *)a2 + 4);
    *((_OWORD *)this + 29) = v11;
    *((_OWORD *)this + 26) = v9;
    *((_OWORD *)this + 27) = v10;
    int v12 = (_DWORD *)*((void *)a2 + 12);
    if (v12) {
      *v12 += 2;
    }
    *((void *)this + 6WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v12;
    *((unsigned char *)this + 488) = *((unsigned char *)a2 + 104);
    WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 496, (uint64_t *)a2 + 14);
    WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 512, (uint64_t *)a2 + 16);
    *((unsigned char *)this + 528) = 1;
  }
  if (!*((void *)this + 37)) {
    return 0;
  }
  int v13 = *((unsigned __int8 *)a2 + 4);
  if (*((unsigned char *)this + 528)) {
    CGFloat v14 = COERCE_DOUBLE(WebCore::AffineTransform::mapPoint((WebKit::UnifiedPDFPlugin *)((char *)this + 328), (WebKit::UnifiedPDFPlugin *)((char *)this + 420)));
  }
  else {
    CGFloat v14 = 0.0;
  }
  cf[0].CGFloat x = v14;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v86, (const IntPoint *)cf);
  WebKit::UnifiedPDFPlugin::convertDown<WebCore::FloatPoint>(this, 4, 1, 0, 0, v86[0], v86[1]);
  float v17 = v16;
  float v19 = v18;
  *(float *)uint64_t v87 = v16;
  *(float *)&v87[1] = v18;
  uint64_t v20 = WebKit::PDFPresentationController::nearestPageIndexForDocumentPoint(*((WebKit::PDFPresentationController **)this + 75), (const WebCore::FloatPoint *)v87);
  WebKit::PDFDocumentLayout::documentToPDFPage((uint64_t)this + 608, v20, v17, v19);
  unint64_t v85 = __PAIR64__(v22, v21);
  int v23 = *((unsigned __int8 *)a2 + 32);
  int v24 = *((unsigned __int8 *)a2 + 4);
  if (v24 == 2)
  {
    WebCore::ScrollableArea::mouseMovedInContentArea(this);
    if (v23)
    {
      if (v23 != 254) {
        goto LABEL_108;
      }
      if (*((unsigned char *)this + 528)) {
        CGFloat v44 = COERCE_DOUBLE(WebCore::AffineTransform::mapPoint((WebKit::UnifiedPDFPlugin *)((char *)this + 328), (WebKit::UnifiedPDFPlugin *)((char *)this + 420)));
      }
      else {
        CGFloat v44 = 0.0;
      }
      cf[0].CGFloat x = v44;
      WebKit::UnifiedPDFPlugin::pdfElementTypesForPluginPoint(this, (const IntPoint *)cf);
      WebKit::PDFPluginBase::notifyCursorChanged((uint64_t)this);
      WebKit::UnifiedPDFPlugin::annotationForRootViewPoint((WebKit::UnifiedPDFPlugin *)cf, this, (const WebCore::IntPoint *)((char *)a2 + 36));
      double v50 = *((double *)this + 97);
      CGFloat x = cf[0].x;
      if (v50 == 0.0) {
        goto LABEL_49;
      }
      if (*(void *)&cf[0].x == *(void *)&v50 && *((unsigned char *)this + 784))
      {
        cf[0].CGFloat x = 0.0;
        CGFloat x = v50;
        goto LABEL_62;
      }
      WebKit::UnifiedPDFPlugin::finishTrackingAnnotation((uint64_t)this, *(void **)&cf[0].x, 2, -2, 4);
      if (!*((void *)this + 97))
      {
LABEL_49:
        if (x == 0.0) {
          goto LABEL_74;
        }
        WebKit::getPDFAnnotationTextWidgetClass[0](v49);
        if ((objc_opt_isKindOfClass() & 1) == 0 || !WebKit::PDFPluginBase::isFullFramePlugin(this))
        {
          cf[0].CGFloat x = 0.0;
LABEL_62:
          CGFloat v54 = x;
LABEL_73:
          CFRelease(*(CFTypeRef *)&v54);
          goto LABEL_74;
        }
        unsigned __int8 started = WebKit::AnnotationTrackingState::startAnnotationTracking((uint64_t)this + 776, (uint64_t *)cf, 2, -2);
        WebKit::UnifiedPDFPlugin::setNeedsRepaintForAnnotation((uint64_t)this, *((void **)this + 97), started);
        CGFloat x = cf[0].x;
      }
      cf[0].CGFloat x = 0.0;
      if (x == 0.0) {
        goto LABEL_74;
      }
      goto LABEL_62;
    }
    double v45 = *((double *)this + 97);
    if (v45 == 0.0)
    {
      if (*((unsigned char *)this + 792))
      {
        uint64_t v15 = 1;
        WebKit::UnifiedPDFPlugin::continueTrackingSelection((uint64_t)this, v20, (float *)&v85, 1);
        goto LABEL_109;
      }
      goto LABEL_74;
    }
    CFRetain(*((CFTypeRef *)this + 97));
    WebKit::UnifiedPDFPlugin::annotationForRootViewPoint((WebKit::UnifiedPDFPlugin *)cf, this, (const WebCore::IntPoint *)((char *)a2 + 36));
    CGFloat v46 = cf[0].x;
    uint64_t v47 = (void *)*((void *)this + 97);
    if (v47) {
      CFRetain(*((CFTypeRef *)this + 97));
    }
    if ([v47 isHighlighted])
    {
      if (v47 != *(void **)&v46)
      {
        [v47 setHighlighted:0];
        int v48 = (WebKit *)v47;
LABEL_64:
        unsigned __int8 v53 = WebKit::UnifiedPDFPlugin::repaintRequirementsForAnnotation(v48, 0);
        goto LABEL_65;
      }
    }
    else if (v47 == *(void **)&v46)
    {
      [*(id *)&v46 setHighlighted:1];
      int v48 = *(WebKit **)&v46;
      goto LABEL_64;
    }
    unsigned __int8 v53 = 0;
LABEL_65:
    WebKit::UnifiedPDFPlugin::setNeedsRepaintForAnnotation((uint64_t)this, v47, v53);
    if (v47) {
      CFRelease(v47);
    }
    if (v46 != 0.0) {
      CFRelease(*(CFTypeRef *)&v46);
    }
    CGFloat v54 = v45;
    goto LABEL_73;
  }
  if (v24 != 1)
  {
    if (!*((unsigned char *)a2 + 4) && !*((unsigned char *)a2 + 32))
    {
      WebKit::UnifiedPDFPlugin::annotationForRootViewPoint((WebKit::UnifiedPDFPlugin *)cf, this, (const WebCore::IntPoint *)((char *)a2 + 36));
      CGFloat v26 = cf[0].x;
      if (*(void *)&cf[0].x)
      {
        WebKit::getPDFAnnotationButtonWidgetClass[0](v25);
        uint64_t isKindOfClass = objc_opt_isKindOfClass();
        if ((isKindOfClass & 1) != 0
          || (WebKit::getPDFAnnotationTextWidgetClass[0]((WebKit *)isKindOfClass),
              uint64_t v28 = objc_opt_isKindOfClass(),
              (v28 & 1) != 0)
          || (WebKit::getPDFAnnotationChoiceWidgetClass[0]((WebKit *)v28), uint64_t v29 = objc_opt_isKindOfClass(),
                                                                           (v29 & 1) != 0))
        {
          uint64_t v29 = [*(id *)&v26 isReadOnly];
          if (v29) {
            goto LABEL_72;
          }
        }
        WebKit::getPDFAnnotationTextWidgetClass[0]((WebKit *)v29);
        uint64_t v30 = objc_opt_isKindOfClass();
        if (v30) {
          goto LABEL_72;
        }
        WebKit::getPDFAnnotationChoiceWidgetClass[0]((WebKit *)v30);
        uint64_t v31 = objc_opt_isKindOfClass();
        if (v31) {
          goto LABEL_72;
        }
        WebKit::getPDFAnnotationButtonWidgetClass[0]((WebKit *)v31);
        if ((objc_opt_isKindOfClass() & 1) != 0 || WebKit::annotationIsLinkWithDestination(*(WebKit **)&v26, v32))
        {
          unsigned __int8 v55 = WebKit::AnnotationTrackingState::startAnnotationTracking((uint64_t)this + 776, (uint64_t *)cf, 0, 0);
          WebKit::UnifiedPDFPlugin::setNeedsRepaintForAnnotation((uint64_t)this, *((void **)this + 97), v55);
          CGFloat v26 = cf[0].x;
          if (*(void *)&cf[0].x)
          {
LABEL_72:
            CGFloat v54 = v26;
            goto LABEL_73;
          }
LABEL_74:
          uint64_t v15 = 1;
          goto LABEL_109;
        }
        CFRelease(*(CFTypeRef *)&v26);
      }
      char v59 = *((unsigned char *)a2 + 5);
      int v60 = *((_DWORD *)a2 + 18);
      *((unsigned char *)this + 792) = 1;
      if (v60 == 2) {
        char v61 = 1;
      }
      else {
        char v61 = 2 * (v60 == 3);
      }
      *((unsigned char *)this + 796) = v61;
      *((void *)this + 10WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v20;
      *((void *)this + 101) = v85;
      *((void *)this + 104) = 0;
      *((void *)this + 103) = 0;
      *((unsigned char *)this + 794) = (v59 & 4) != 0;
      int v62 = v59 & 1;
      *((unsigned char *)this + 793) = v62;
      uint64_t v63 = (const void *)*((void *)this + 102);
      *((void *)this + 102) = 0;
      if (v63)
      {
        CFRelease(v63);
        int v62 = *((unsigned __int8 *)this + 793);
      }
      if (v62)
      {
        uint64_t v64 = (void *)*((void *)this + 105);
        if (v64)
        {
          uint64_t v65 = objc_msgSend((id)objc_msgSend(v64, "pages"), "firstObject");
          uint64_t v66 = [*((id *)this + 37) indexForPage:v65];
          uint64_t v67 = *((void *)this + 100);
          *((void *)this + 10WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v66;
          [*((id *)this + 105) firstCharCenter];
          cf[0].CGFloat x = v68;
          cf[0].y = v69;
          WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v88, cf);
          uint64_t v70 = *((void *)this + 101);
          WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v90, &v88);
          *((void *)this + 101) = v90;
          uint64_t v89 = v70;
          uint64_t v71 = *((void *)this + 105);
          *((void *)this + 105) = 0;
          int v72 = (const void *)*((void *)this + 102);
          *((void *)this + 102) = v71;
          if (v72) {
            CFRelease(v72);
          }
          unint64_t v73 = (void *)*((void *)this + 37);
          WebCore::FloatPoint::operator CGPoint();
          double v75 = v74;
          double v77 = v76;
          float v78 = (const void *)[*((id *)this + 76) pageAtIndex:v67];
          float v79 = v78;
          if (v78) {
            CFRetain(v78);
          }
          WebCore::FloatPoint::operator CGPoint();
          float v82 = objc_msgSend(v73, "selectionFromPage:atPoint:toPage:atPoint:", v65, v79, v75, v77, v80, v81);
          char v83 = v82;
          *(void *)&cf[0].CGFloat x = v82;
          if (v82) {
            CFRetain(v82);
          }
          if (v79) {
            CFRelease(v79);
          }
          [v83 addSelection:*((void *)this + 102)];
          WebKit::UnifiedPDFPlugin::setCurrentSelection(this, (uint64_t *)cf);
          if (*(void *)&cf[0].x) {
            CFRelease(*(CFTypeRef *)&cf[0].x);
          }
        }
      }
      WebKit::UnifiedPDFPlugin::continueTrackingSelection((uint64_t)this, v20, (float *)&v85, 0);
      uint64_t v15 = 0;
      goto LABEL_109;
    }
LABEL_108:
    uint64_t v15 = 0;
LABEL_109:
    if (v13 == 1)
    {
      WebKit::UnifiedPDFPlugin::stopTrackingSelection(this);
      *((unsigned char *)this + 848) = 0;
    }
    return v15;
  }
  if (*((unsigned char *)a2 + 32)) {
    goto LABEL_108;
  }
  float v33 = (void *)*((void *)this + 97);
  if (!v33) {
    goto LABEL_108;
  }
  float v34 = (WebKit *)CFRetain(*((CFTypeRef *)this + 97));
  WebKit::getPDFAnnotationTextWidgetClass[0](v34);
  if (objc_opt_isKindOfClass())
  {
LABEL_107:
    CFRelease(v33);
    goto LABEL_108;
  }
  WebKit::UnifiedPDFPlugin::annotationForRootViewPoint((WebKit::UnifiedPDFPlugin *)&v90, this, (const WebCore::IntPoint *)((char *)a2 + 36));
  WebKit::UnifiedPDFPlugin::finishTrackingAnnotation((uint64_t)this, (void *)v90, 1, 0, 0);
  uint64_t v36 = *((void *)this + 13);
  if (!v36) {
    goto LABEL_78;
  }
  unsigned int v37 = 1;
  atomic_fetch_add((atomic_uint *volatile)v36, 1u);
  uint64_t v38 = *(void *)(v36 + 8);
  if (!v38 || (uint64_t v39 = *(void *)(v38 + 24)) == 0 || (v40 = *(void *)(v39 + 8)) == 0 || *(unsigned char *)(v40 + 144))
  {
LABEL_76:
    if (atomic_fetch_add((atomic_uint *volatile)v36, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v36);
      WTF::fastFree((WTF *)v36, v35);
      if (v37)
      {
LABEL_78:
        if (WebKit::annotationIsLinkWithDestination((WebKit *)v33, v35))
        {
          if ([v33 URL])
          {
            MEMORY[0x19972E8A0](cf);
            WebKit::PDFPluginBase::navigateToURL(this, (const WTF::URL *)cf);
            CGFloat v57 = cf[0].x;
            cf[0].CGFloat x = 0.0;
            if (v57 != 0.0)
            {
              if (**(_DWORD **)&v57 == 2) {
                WTF::StringImpl::destroy(*(WTF::StringImpl **)&v57, v56);
              }
              else {
                **(_DWORD **)&v57 -= 2;
              }
            }
          }
          else
          {
            unsigned int v58 = (PDFDestination *)[v33 destination];
            if (v58) {
              WebKit::UnifiedPDFPlugin::revealPDFDestination((id *)this, v58);
            }
          }
        }
      }
    }
    else if (v37)
    {
      goto LABEL_78;
    }
    if (v90) {
      CFRelease(v90);
    }
    goto LABEL_107;
  }
  unint64_t v41 = (unsigned int *)(v40 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v40 + 8), 1u);
  WebCore::LocalFrame::checkedEventHandler((uint64_t *)cf, (WebCore::LocalFrame *)v40);
  CGFloat v42 = cf[0].x;
  unsigned int v43 = *(unsigned __int8 *)(*(void *)&cf[0].x + 193);
  cf[0].CGFloat x = 0.0;
  if (**(_DWORD **)&v42)
  {
    --**(_DWORD **)&v42;
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v41);
    if (v43 >= 6) {
      unsigned int v37 = 1;
    }
    else {
      unsigned int v37 = (0xBu >> v43) & 1;
    }
    goto LABEL_76;
  }
  uint64_t result = 286;
  __break(0xC471u);
  return result;
}

void sub_198ED2CDC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, WTF::StringImpl *a16)
{
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v17);
  if (v18 == 1)
  {
    WebKit::UnifiedPDFPlugin::stopTrackingSelection(v16);
    *((unsigned char *)v16 + 848) = 0;
  }
  _Unwind_Resume(a1);
}

void WebKit::UnifiedPDFPlugin::finishTrackingAnnotation(uint64_t a1, void *a2, int a3, int a4, char a5)
{
  long long v10 = *(void **)(a1 + 776);
  if (v10)
  {
    CFRetain(*(CFTypeRef *)(a1 + 776));
    long long v11 = *(void **)(a1 + 776);
  }
  else
  {
    long long v11 = 0;
  }
  char v12 = 0;
  if (!a4 && a3 == 1 && v11 == a2)
  {
    int v13 = (WebKit *)[a2 isHighlighted];
    if (v13)
    {
      [*(id *)(a1 + 776) setHighlighted:0];
      int v13 = (WebKit *)WebKit::UnifiedPDFPlugin::repaintRequirementsForAnnotation(*(WebKit **)(a1 + 776), 0);
      char v12 = (char)v13;
    }
    else
    {
      char v12 = 0;
    }
    WebKit::getPDFAnnotationButtonWidgetClass[0](v13);
    if (objc_opt_isKindOfClass())
    {
      if ([*(id *)(a1 + 776) widgetControlType])
      {
        uint64_t v14 = [*(id *)(a1 + 776) buttonWidgetState];
        if (!v14)
        {
          uint64_t v15 = 1;
          goto LABEL_17;
        }
        if (v14 == 1 && [*(id *)(a1 + 776) allowsToggleToOff])
        {
          uint64_t v15 = 0;
LABEL_17:
          [*(id *)(a1 + 776) setButtonWidgetState:v15];
          v12 |= 1u;
        }
      }
    }
  }
  float v16 = *(const void **)(a1 + 776);
  *(void *)(a1 + 776) = 0;
  if (v16) {
    CFRelease(v16);
  }
  *(unsigned char *)(a1 + 784) = 0;
  WebKit::UnifiedPDFPlugin::setNeedsRepaintForAnnotation(a1, v10, v12 | a5);
  if (v10)
  {
    CFRelease(v10);
  }
}

void sub_198ED2FCC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::UnifiedPDFPlugin::continueTrackingSelection(uint64_t a1, uint64_t a2, float *a3, int a4)
{
  char v45 = a4;
  int v7 = *(unsigned __int8 *)(a1 + 794);
  if (a4)
  {
    long long v8 = *(void **)(a1 + 840);
    if (v8)
    {
      if (([v8 isEmpty] & 1) == 0)
      {
        int v9 = *(unsigned __int8 *)(a1 + 795);
        *(unsigned char *)(a1 + 795) = 1;
        if (!v9) {
          WebKit::PDFPluginBase::notifyCursorChanged(a1);
        }
      }
    }
    int v7 = *(unsigned __int8 *)(a1 + 794);
  }
  v43[0] = &v45;
  v43[1] = a1;
  char v44 = 1;
  if (!v7)
  {
    uint64_t v20 = (void *)[*(id *)(a1 + 608) pageAtIndex:*(void *)(a1 + 800)];
    float v17 = v20;
    if (v20) {
      CFRetain(v20);
    }
    unsigned int v21 = (const void *)[*(id *)(a1 + 608) pageAtIndex:a2];
    unsigned int v22 = v21;
    if (v21) {
      CFRetain(v21);
    }
    CFTypeRef cf = 0;
    char v23 = objc_opt_respondsToSelector();
    int v24 = *(void **)(a1 + 296);
    if (v23)
    {
      WebCore::FloatPoint::operator CGPoint();
      double v26 = v25;
      double v28 = v27;
      WebCore::FloatPoint::operator CGPoint();
      int v31 = *(unsigned __int8 *)(a1 + 796);
      if (v31 == 2) {
        uint64_t v32 = 2;
      }
      else {
        uint64_t v32 = v31 == 1;
      }
      float v33 = objc_msgSend(v24, "selectionFromPage:atPoint:toPage:atPoint:withGranularity:", v17, v22, v32, v26, v28, v29, v30);
      float v34 = v33;
      if (!v33) {
        goto LABEL_33;
      }
    }
    else
    {
      WebCore::FloatPoint::operator CGPoint();
      double v36 = v35;
      double v38 = v37;
      WebCore::FloatPoint::operator CGPoint();
      float v33 = objc_msgSend(v24, "selectionFromPage:atPoint:toPage:atPoint:", v17, v22, v36, v38, v39, v40);
      float v34 = v33;
      if (!v33) {
        goto LABEL_33;
      }
    }
    CFRetain(v33);
LABEL_33:
    CFTypeRef cf = v34;
    if (!*(unsigned char *)(a1 + 796) && *(unsigned char *)(a1 + 793)) {
      [v34 addSelection:*(void *)(a1 + 816)];
    }
    WebKit::UnifiedPDFPlugin::setCurrentSelection((WebKit::PDFPluginBase *)a1, (uint64_t *)&cf);
    if (cf) {
      CFRelease(cf);
    }
    if (!v22) {
      goto LABEL_41;
    }
    CFTypeRef v19 = v22;
    goto LABEL_40;
  }
  if (*(void *)(a1 + 800) != a2) {
    return WTF::ScopeExit<WebKit::UnifiedPDFPlugin::continueTrackingSelection(unsigned long,WebCore::FloatPoint const&,WebKit::UnifiedPDFPlugin::IsDraggingSelection)::$_0>::~ScopeExit((uint64_t)v43);
  }
  float v10 = *(float *)(a1 + 808);
  float v11 = *a3;
  float v12 = a3[1];
  if (v10 >= *a3) {
    float v13 = *a3;
  }
  else {
    float v13 = *(float *)(a1 + 808);
  }
  float v14 = *(float *)(a1 + 812);
  if (v14 >= v12) {
    int v15 = *((_DWORD *)a3 + 1);
  }
  else {
    int v15 = *(_DWORD *)(a1 + 812);
  }
  *(float *)(a1 + 824) = v13;
  *(_DWORD *)(a1 + 828) = v15;
  *(float *)(a1 + 832) = vabds_f32(v11, v10);
  *(float *)(a1 + 836) = vabds_f32(v12, v14);
  float v16 = (void *)[*(id *)(a1 + 608) pageAtIndex:a2];
  float v17 = v16;
  if (v16) {
    CFRetain(v16);
  }
  WebCore::FloatRect::operator CGRect();
  int v18 = (const void *)objc_msgSend(v17, "selectionForRect:");
  CFTypeRef cf = v18;
  if (v18) {
    CFRetain(v18);
  }
  WebKit::UnifiedPDFPlugin::setCurrentSelection((WebKit::PDFPluginBase *)a1, (uint64_t *)&cf);
  CFTypeRef v19 = cf;
  if (cf) {
LABEL_40:
  }
    CFRelease(v19);
LABEL_41:
  if (v17) {
    CFRelease(v17);
  }
  return WTF::ScopeExit<WebKit::UnifiedPDFPlugin::continueTrackingSelection(unsigned long,WebCore::FloatPoint const&,WebKit::UnifiedPDFPlugin::IsDraggingSelection)::$_0>::~ScopeExit((uint64_t)v43);
}

void sub_198ED3270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v11) {
    CFRelease(v11);
  }
  WTF::ScopeExit<WebKit::UnifiedPDFPlugin::continueTrackingSelection(unsigned long,WebCore::FloatPoint const&,WebKit::UnifiedPDFPlugin::IsDraggingSelection)::$_0>::~ScopeExit((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::handleMouseEnterEvent(WebKit::UnifiedPDFPlugin *this, const WebMouseEvent *a2)
{
  return 0;
}

uint64_t WebKit::UnifiedPDFPlugin::handleMouseLeaveEvent(WebKit::UnifiedPDFPlugin *this, const WebMouseEvent *a2)
{
  return 0;
}

uint64_t WebKit::UnifiedPDFPlugin::wantsWheelEvents(WebKit::UnifiedPDFPlugin *this)
{
  if (*((void *)this + 37) && (uint64_t v1 = *((void *)this + 75)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 200))();
  }
  else {
    return 0;
  }
}

uint64_t WebKit::UnifiedPDFPlugin::handleWheelEvent(uint64_t a1, uint64_t a2)
{
  v4[17] = *MEMORY[0x1E4F143B8];
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 600) + 208))(*(void *)(a1 + 600))) {
    return 1;
  }
  WebKit::WebKit2PlatformWheelEvent::WebKit2PlatformWheelEvent((uint64_t)v4, a2);
  return WebCore::ScrollableArea::handleWheelEventForScrolling();
}

__n128 WebKit::UnifiedPDFPlugin::wheelEventCopyWithVelocity@<Q0>(WebKit::UnifiedPDFPlugin *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (WebKit::UnifiedPDFPlugin::isFullMainFramePlugin(a1)
    && (uint64_t v6 = *(void *)(*(void *)(*((void *)a1 + 13) + 8) + 24)) != 0
    && (uint64_t v7 = *(void *)(v6 + 8)) != 0
    && (uint64_t v8 = *(void *)(v7 + 24)) != 0
    && (uint64_t v9 = *(void *)(v8 + 8)) != 0
    && (float v10 = *(void **)(*(void *)(v9 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v10 + 1368))(v10) & 1) == 0)
    && (uint64_t v11 = *(void *)(v10[2] + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v11 - 8));
    WebCore::WheelEventDeltaFilter::eventCopyWithVelocity();
    float v12 = *(const void **)(v11 - 8);
    CFRelease(v12);
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a3 + 8WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v14;
    long long v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a3 + 112) = v15;
    long long v16 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 16) = v16;
    __n128 result = *(__n128 *)(a2 + 32);
    long long v17 = *(_OWORD *)(a2 + 48);
    *(__n128 *)(a3 + 32) = result;
    *(_OWORD *)(a3 + 48) = v17;
  }
  return result;
}

void sub_198ED34CC(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::handleContextMenuEvent(WebKit::UnifiedPDFPlugin *this, const WebMouseEvent *a2)
{
  return 0;
}

uint64_t WebKit::UnifiedPDFPlugin::handleKeyboardEvent(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 600) + 192))();
}

uint64_t WebKit::UnifiedPDFPlugin::revealPDFDestination(id *this, PDFDestination *a2)
{
  double PDFKit_kPDFDestinationUnspecifiedValue = WebKit::get_PDFKit_kPDFDestinationUnspecifiedValue((WebKit *)this);
  unint64_t v5 = objc_msgSend(this[37], "indexForPage:", -[PDFDestination page](a2, "page"));
  [(PDFDestination *)a2 point];
  v10.CGFloat x = v7;
  v10.y = v6;
  if (v7 == PDFKit_kPDFDestinationUnspecifiedValue) {
    v10.CGFloat x = 0.0;
  }
  if (v6 == PDFKit_kPDFDestinationUnspecifiedValue) {
    v10.y = (double)WebKit::UnifiedPDFPlugin::heightForPageAtIndex(this, v5);
  }
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v9, &v10);
  return WebKit::UnifiedPDFPlugin::revealPointInPage((WebKit::UnifiedPDFPlugin *)this, v5, v9[0], v9[1]);
}

uint64_t WebKit::UnifiedPDFPlugin::repaintRequirementsForAnnotation(WebKit *a1, int a2)
{
  WebKit::getPDFAnnotationButtonWidgetClass[0](a1);
  uint64_t isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass) {
    return 1;
  }
  WebKit::getPDFAnnotationPopupClass[0]((WebKit *)isKindOfClass);
  uint64_t v4 = objc_opt_isKindOfClass();
  if (v4) {
    return 1;
  }
  WebKit::getPDFAnnotationChoiceWidgetClass[0]((WebKit *)v4);
  uint64_t v5 = objc_opt_isKindOfClass();
  if (v5) {
    return 1;
  }
  WebKit::getPDFAnnotationTextClass[0]((WebKit *)v5);
  uint64_t v6 = objc_opt_isKindOfClass();
  if (v6) {
    return 1;
  }
  WebKit::getPDFAnnotationTextWidgetClass[0]((WebKit *)v6);
  char v8 = objc_opt_isKindOfClass();
  if (a2) {
    unsigned int v9 = 1;
  }
  else {
    unsigned int v9 = 4;
  }
  if (v8) {
    return v9;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AnnotationTrackingState::startAnnotationTracking(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v7 = *a2;
  *a2 = 0;
  id v8 = *(id *)a1;
  *(void *)a1 = v7;
  if (v8) {
    CFRelease(v8);
  }
  WebKit::getPDFAnnotationButtonWidgetClass[0]((WebKit *)v8);
  if (objc_opt_isKindOfClass())
  {
    [*(id *)a1 setHighlighted:1];
    uint64_t result = WebKit::UnifiedPDFPlugin::repaintRequirementsForAnnotation(*(WebKit **)a1, 0);
  }
  else
  {
    uint64_t result = 0;
  }
  if (a3 == 2 && a4 == -2)
  {
    if (*(unsigned char *)(a1 + 8)) {
      uint64_t result = result;
    }
    else {
      uint64_t result = result | 4;
    }
    *(unsigned char *)(a1 + 8) = 1;
  }
  return result;
}

uint64_t WebKit::UnifiedPDFPlugin::revealPointInPage(WebKit::UnifiedPDFPlugin *a1, unint64_t a2, float a3, float a4)
{
  (*(void (**)(void *))(**((void **)a1 + 75) + 184))(*((void **)a1 + 75));
  float v8 = WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatPoint>(a1, 0, 3, a2, 1, a3, a4);

  return WebKit::UnifiedPDFPlugin::scrollToPointInContentsSpace((uint64_t)a1, v8, v9);
}

uint64_t WebKit::UnifiedPDFPlugin::handleEditingCommand(WebKit::UnifiedPDFPlugin *this, const WTF::String *a2, const WTF::String *a3)
{
  if ((MEMORY[0x19972E990](*(void *)a2, "ScrollPageBackward", 18) & 1) != 0
    || MEMORY[0x19972E990](*(void *)a2, "ScrollPageForward", 17))
  {
    uint64_t v5 = *((void *)this + 13);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 24);
        if (v7)
        {
          float v8 = *(WebCore::LocalFrame **)(v7 + 8);
          if (v8)
          {
            if (!*((unsigned char *)v8 + 144))
            {
              WebCore::LocalFrame::checkedEditor((uint64_t *)&v29, v8);
              WebCore::Editor::command((uint64_t *)cf, v29, a2);
              uint64_t v9 = WebCore::Editor::Command::execute();
              uint64_t v10 = v28;
              uint64_t v28 = 0;
              if (v10) {
                WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
              }
              uint64_t v11 = v27;
              double v27 = 0;
              if (v11)
              {
                if (*((_DWORD *)v11 + 7) == 2)
                {
                  if ((*((_WORD *)v11 + 17) & 0x400) == 0) {
                    WebCore::Node::removedLastRef(v11);
                  }
                }
                else
                {
                  *((_DWORD *)v11 + 7) -= 2;
                }
              }
              float v12 = v29;
              double v29 = 0;
              if (v12)
              {
                if (*(_DWORD *)v12)
                {
                  --*(_DWORD *)v12;
                  return v9;
                }
LABEL_51:
                __break(0xC471u);
                JUMPOUT(0x198ED3A90);
              }
              return v9;
            }
          }
        }
      }
    }
    return 0;
  }
  if (MEMORY[0x19972E990](*(void *)a2, "copy", 4)) {
    return 0;
  }
  if (MEMORY[0x19972E990](*(void *)a2, "selectAll", 9))
  {
    long long v14 = (const void *)[*((id *)this + 37) selectionForEntireDocument];
    cf[0] = v14;
    if (v14) {
      CFRetain(v14);
    }
    WebKit::UnifiedPDFPlugin::setCurrentSelection(this, (uint64_t *)cf);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    return 1;
  }
  if (!MEMORY[0x19972E990](*(void *)a2, "takeFindStringFromSelection", 27)) {
    return 0;
  }
  long long v15 = (void *)*((void *)this + 105);
  if (!v15) {
    return 0;
  }
  MEMORY[0x19972EAD0](cf, [v15 string]);
  if (!cf[0]) {
    return 0;
  }
  if (!*((_DWORD *)cf[0] + 1)) {
    goto LABEL_34;
  }
  uint64_t v17 = *((void *)this + 13);
  if (!v17) {
    goto LABEL_34;
  }
  uint64_t v18 = *(void *)(v17 + 8);
  if (!v18) {
    goto LABEL_34;
  }
  uint64_t v19 = *(void *)(v18 + 24);
  if (!v19) {
    goto LABEL_34;
  }
  uint64_t v20 = *(WebCore::LocalFrame **)(v19 + 8);
  if (!v20 || *((unsigned char *)v20 + 144)) {
    goto LABEL_34;
  }
  WebCore::LocalFrame::checkedEditor((uint64_t *)&v29, v20);
  unsigned int v22 = (_DWORD *)WebCore::Editor::client(v29);
  char v23 = v22;
  if (v22) {
    ++v22[4];
  }
  int v24 = v29;
  double v29 = 0;
  if (v24)
  {
    if (!*(_DWORD *)v24)
    {
      __break(0xC471u);
      JUMPOUT(0x198ED3AB0);
    }
    --*(_DWORD *)v24;
  }
  if (v22)
  {
    (*(void (**)(_DWORD *, CFTypeRef *))(*(void *)v22 + 568))(v22, cf);
    int v25 = v23[4];
    if (!v25) {
      goto LABEL_51;
    }
    float v23[4] = v25 - 1;
    uint64_t v9 = 1;
  }
  else
  {
LABEL_34:
    uint64_t v9 = 0;
  }
  unsigned int v21 = (WTF::StringImpl *)cf[0];
  cf[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v16);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  return v9;
}

void sub_198ED3AD4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *cf, uint64_t a11, WebCore::Node *a12, uint64_t a13, uint64_t a14)
{
  int v15 = *(_DWORD *)(v14 + 16);
  if (v15)
  {
    *(_DWORD *)(v14 + 16) = v15 - 1;
    if (cf)
    {
      if (*(_DWORD *)cf == 2) {
        WTF::StringImpl::destroy(cf, a2);
      }
      else {
        *(_DWORD *)cf -= 2;
      }
    }
    _Unwind_Resume(exception_object);
  }
  __break(0xC471u);
  JUMPOUT(0x198ED3B08);
}

uint64_t WebKit::UnifiedPDFPlugin::isEditingCommandEnabled(WebKit::UnifiedPDFPlugin *this, const WTF::String *a2)
{
  if ((MEMORY[0x19972E990](*(void *)a2, "ScrollPageBackward", 18) & 1) != 0
    || (MEMORY[0x19972E990](*(void *)a2, "ScrollPageForward", 17) & 1) != 0
    || (MEMORY[0x19972E990](*(void *)a2, "selectAll", 9) & 1) != 0)
  {
    return 1;
  }
  if (MEMORY[0x19972E990](*(void *)a2, "copy", 4)) {
    return *((void *)this + 105) != 0;
  }
  uint64_t result = MEMORY[0x19972E990](*(void *)a2, "takeFindStringFromSelection", 27);
  if (result) {
    return *((void *)this + 105) != 0;
  }
  return result;
}

void WebKit::UnifiedPDFPlugin::setCurrentSelection(WebKit::PDFPluginBase *a1, uint64_t *a2)
{
  float v3 = (void *)*((void *)a1 + 105);
  *((void *)a1 + 105) = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = (const void *)*((void *)a1 + 105);
  *((void *)a1 + 105) = v4;
  if (v5) {
    CFRelease(v5);
  }
  WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)a1, 0, v3);
  WebKit::PDFPluginBase::notifySelectionChanged(a1);
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_198ED3D4C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::ScopeExit<WebKit::UnifiedPDFPlugin::continueTrackingSelection(unsigned long,WebCore::FloatPoint const&,WebKit::UnifiedPDFPlugin::IsDraggingSelection)::$_0>::~ScopeExit(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if (**(unsigned char **)a1)
    {
      uint64_t v2 = *(void *)(a1 + 8);
      int v3 = *(unsigned __int8 *)(v2 + 848);
      *(unsigned char *)(v2 + 848) = 1;
      if (!v3) {
        WebCore::TimerBase::start();
      }
    }
  }
  return a1;
}

void WebKit::UnifiedPDFPlugin::stopTrackingSelection(WebKit::UnifiedPDFPlugin *this)
{
  uint64_t v2 = (const void *)*((void *)this + 102);
  *((void *)this + 102) = 0;
  if (v2) {
    CFRelease(v2);
  }
  *((unsigned char *)this + 792) = 0;
  int v3 = *((unsigned __int8 *)this + 795);
  *((unsigned char *)this + 795) = 0;
  if (v3)
  {
    if (*((unsigned char *)this + 528))
    {
      uint64_t v4 = WebCore::AffineTransform::mapPoint((WebKit::UnifiedPDFPlugin *)((char *)this + 328), (WebKit::UnifiedPDFPlugin *)((char *)this + 420));
      WebKit::UnifiedPDFPlugin::pdfElementTypesForPluginPoint(this, (const IntPoint *)&v4);
      WebKit::PDFPluginBase::notifyCursorChanged((uint64_t)this);
    }
  }
}

unint64_t WebKit::UnifiedPDFPlugin::pageCoverageForSelection(unint64_t result, uint64_t a2, void *a3, char a4)
{
  uint64_t v4 = result;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a3 && (uint64_t result = [a3 isEmpty], !result))
  {
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t v7 = (void *)[a3 pages];
    uint64_t result = [v7 countByEnumeratingWithState:&v24 objects:v28 count:16];
    unint64_t v8 = result;
    if (result)
    {
      uint64_t v9 = *(void *)v25;
LABEL_7:
      uint64_t v10 = 0;
      while (1)
      {
        if (*(void *)v25 != v9) {
          objc_enumerationMutation(v7);
        }
        uint64_t v11 = *(const void **)(*((void *)&v24 + 1) + 8 * v10);
        if (v11) {
          CFRetain(*(CFTypeRef *)(*((void *)&v24 + 1) + 8 * v10));
        }
        uint64_t v12 = [*(id *)(a2 + 608) indexForPage:v11];
        if (v11) {
          CFRelease(v11);
        }
        if (v12 != 0x7FFFFFFFFFFFFFFFLL)
        {
          [a3 boundsForPage:v11];
          *(void *)unsigned int v22 = v13;
          *(void *)&v22[8] = v14;
          *(void *)&v22[16] = v15;
          *(void *)&v22[24] = v16;
          uint64_t result = WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v23, (const CGRect *)v22);
          *(void *)unsigned int v22 = v12;
          *(_OWORD *)&v22[8] = v23;
          *(_OWORD *)&v22[24] = v23;
          uint64_t v17 = *(unsigned int *)(v4 + 12);
          if (v17 == *(_DWORD *)(v4 + 8))
          {
            uint64_t result = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v17 + 1, (unint64_t)v22);
            LODWORD(v17) = *(_DWORD *)(v4 + 12);
            uint64_t v18 = *(void *)v4 + 40 * v17;
            long long v19 = *(_OWORD *)result;
            long long v20 = *(_OWORD *)(result + 16);
            *(void *)(v18 + 32) = *(void *)(result + 32);
          }
          else
          {
            uint64_t v18 = *(void *)v4 + 40 * v17;
            long long v19 = *(_OWORD *)v22;
            long long v20 = *(_OWORD *)&v22[16];
            *(void *)(v18 + 32) = *(void *)&v22[32];
          }
          *(_OWORD *)uint64_t v18 = v19;
          *(_OWORD *)(v18 + 16) = v20;
          *(_DWORD *)(v4 + 12) = v17 + 1;
          if (a4) {
            break;
          }
        }
        if (v8 == ++v10)
        {
          uint64_t result = [v7 countByEnumeratingWithState:&v24 objects:v28 count:16];
          unint64_t v8 = result;
          if (result) {
            goto LABEL_7;
          }
          return result;
        }
      }
    }
  }
  else
  {
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
  }
  return result;
}

void sub_198ED4070(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198ED40A4()
{
  if (v0) {
    CFRelease(v0);
  }
  JUMPOUT(0x198ED4088);
}

void WebKit::UnifiedPDFPlugin::repaintOnSelectionChange(WebKit::UnifiedPDFPlugin::ActiveStateChangeReason,PDFSelection *)::$_0::operator()(uint64_t **a1, void *a2)
{
  WebKit::UnifiedPDFPlugin::pageCoverageForSelection((unint64_t)&v23, (uint64_t)a1, a2, 0);
  uint64_t v4 = v23;
  if (v25)
  {
    uint64_t v5 = (WTF *)((char *)v23 + 40 * v25);
    while (1)
    {
      WebKit::PDFDocumentLayout::rowForPageIndex(a1 + 76, *(void *)v4, (uint64_t *)&__src);
      WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>((WebKit::UnifiedPDFPlugin *)a1, 0, 1, *(void *)v4, 1, *((float *)v4 + 2), *((float *)v4 + 3), *((float *)v4 + 4), *((float *)v4 + 5));
      v18[0] = v6;
      v18[1] = v7;
      void v18[2] = v8;
      v18[3] = v9;
      uint64_t v10 = v21;
      uint64_t v14 = v17;
      int v15 = 2;
      unsigned int v16 = v21;
      if (v21 < 3)
      {
        uint64_t v11 = v17;
      }
      else
      {
        if (v21 >> 29)
        {
          __break(0xC471u);
          return;
        }
        uint64_t v11 = (unsigned char *)WTF::fastMalloc((WTF *)(8 * v21));
        int v15 = v10;
        uint64_t v14 = v11;
        uint64_t v10 = v21;
      }
      memcpy(v11, __src, 8 * v10);
      v17[16] = 1;
      WebKit::UnifiedPDFPlugin::setNeedsRepaintInDocumentRect((uint64_t)a1, 2u, (uint64_t)v18, (uint64_t)&v14);
      std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14, v12);
      uint64_t v13 = (WTF *)__src;
      if (&v22 != __src && __src)
      {
        CGRect __src = 0;
        int v20 = 0;
        WTF::fastFree(v13, v3);
      }
      uint64_t v4 = (WTF *)((char *)v4 + 40);
      if (v4 == v5)
      {
        uint64_t v4 = v23;
        break;
      }
    }
  }
  if (v4)
  {
    long long v23 = 0;
    int v24 = 0;
    WTF::fastFree(v4, v3);
  }
}

void sub_198ED4230(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, uint64_t a19, uint64_t a20,WTF *a21,int a22)
{
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a10, a2);
  unsigned int v25 = a17;
  if (v22 != a17 && a17 != 0)
  {
    a17 = 0;
    a18 = 0;
    WTF::fastFree(v25, v24);
  }
  long long v27 = a21;
  if (a21)
  {
    a21 = 0;
    a22 = 0;
    WTF::fastFree(v27, v24);
  }
  _Unwind_Resume(a1);
}

void *WebKit::UnifiedPDFPlugin::selectionString@<X0>(WebKit::UnifiedPDFPlugin *this@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)*((void *)this + 105);
  if (result)
  {
    [result string];
    JUMPOUT(0x19972EAD0);
  }
  *a2 = 0;
  return result;
}

uint64_t WebKit::UnifiedPDFPlugin::existingSelectionContainsPoint(WebKit::UnifiedPDFPlugin *this, const WebCore::FloatPoint *a2)
{
  float v3 = roundf(*(float *)a2);
  uint64_t v4 = 0x7FFFFFFFLL;
  uint64_t v5 = 0x80000000;
  if (v3 > -2147500000.0) {
    uint64_t v5 = (int)v3;
  }
  if (v3 < 2147500000.0) {
    uint64_t v4 = v5;
  }
  float v6 = roundf(*((float *)a2 + 1));
  uint64_t v7 = 0x7FFFFFFF00000000;
  unint64_t v8 = 0x8000000000000000;
  if (v6 > -2147500000.0) {
    unint64_t v8 = (unint64_t)(int)v6 << 32;
  }
  if (v6 < 2147500000.0) {
    uint64_t v7 = v8;
  }
  *(void *)&v24.origin.CGFloat x = v7 | v4;
  IntPoint v31 = (IntPoint)WebCore::AffineTransform::mapPoint((WebKit::UnifiedPDFPlugin *)((char *)this + 328), (const WebCore::IntPoint *)&v24);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v28, &v31);
  WebKit::UnifiedPDFPlugin::convertDown<WebCore::FloatPoint>(this, 4, 1, 0, 0, v28[0], v28[1]);
  float v29 = v9;
  float v30 = v10;
  unint64_t v11 = WebKit::PDFPresentationController::pageIndexForDocumentPoint(*((WebKit::PDFPresentationController **)this + 75), (const WebCore::FloatPoint *)&v29);
  if (!v12) {
    return 0;
  }
  unint64_t v13 = v11;
  uint64_t v14 = (const void *)[*((id *)this + 76) pageAtIndex:v11];
  int v15 = v14;
  if (v14) {
    CFRetain(v14);
  }
  WebKit::PDFDocumentLayout::documentToPDFPage((uint64_t)this + 608, v13, v29, v30);
  int v26 = v16;
  int v27 = v17;
  [*((id *)this + 105) boundsForPage:v15];
  v24.origin.CGFloat x = v18;
  v24.origin.y = v19;
  v24.size.width = v20;
  v24.size.height = v21;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v25, &v24);
  uint64_t v22 = WebCore::FloatRect::contains();
  if (v15) {
    CFRelease(v15);
  }
  return v22;
}

void sub_198ED4440(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

float WebKit::UnifiedPDFPlugin::rectForSelectionInRootView(id *this, PDFSelection *a2)
{
  if (a2 && [(PDFSelection *)a2 pages])
  {
    id v4 = [(NSArray *)[(PDFSelection *)a2 pages] firstObject];
    uint64_t v5 = v4;
    if (v4)
    {
      CFRetain(v4);
      CFRetain(v5);
    }
    uint64_t v6 = [this[76] indexForPage:v5];
    uint64_t v7 = v6;
    if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
      unint64_t v8 = 0;
    }
    else {
      unint64_t v8 = v6;
    }
    if (v5) {
      CFRelease(v5);
    }
    if (v7 == 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v25 = 0;
      uint64_t v26 = 0;
    }
    else
    {
      [(PDFSelection *)a2 boundsForPage:v5];
      v22.origin.CGFloat x = v9;
      v22.origin.y = v10;
      v22.size.width = v11;
      v22.size.height = v12;
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v23, &v22);
      WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>((WebKit::UnifiedPDFPlugin *)this, 0, 4, v8, 1, v23[0], v23[1], v23[2], v23[3]);
      v24[0] = v13;
      v24[1] = v14;
      v24[2] = v15;
      v24[3] = v16;
      v21[0] = WebCore::enclosingIntRect((WebCore *)v24, v17);
      v21[1] = v18;
      *(void *)&v22.origin.CGFloat x = WebKit::PDFPluginBase::convertFromPluginToRootView((WebKit::PDFPluginBase *)this, (const WebCore::IntRect *)v21);
      v22.origin.y = v19;
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v25, (const WebCore::IntRect *)&v22);
    }
    if (v5) {
      CFRelease(v5);
    }
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  return *(float *)&v25;
}

void sub_198ED4590(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::countFindMatches(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t result = *a2;
  if (*a2)
  {
    if (*(_DWORD *)(result + 4)) {
      return objc_msgSend((id)objc_msgSend(*(id *)(a1 + 296), "findString:withOptions:", WTF::StringImpl::operator NSString *(), a3 & 1), "count");
    }
    else {
      return 0;
    }
  }
  return result;
}

BOOL WebKit::UnifiedPDFPlugin::findString(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3, int a4)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  if (!v6 || !*((_DWORD *)v6 + 1))
  {
    WTF::String::operator=((uint64_t *)(a1 + 312), a2);
    v77.origin.CGFloat x = 0.0;
    WebKit::UnifiedPDFPlugin::setCurrentSelection((WebKit::PDFPluginBase *)a1, (uint64_t *)&v77);
    if (*(void *)&v77.origin.x) {
      CFRelease(*(CFTypeRef *)&v77.origin.x);
    }
    WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 976, v40);
    return 0;
  }
  char v7 = (char)a3;
  if (((unsigned __int16)a3 & 0x200) != 0) {
    return !a4 || WebKit::UnifiedPDFPlugin::countFindMatches(a1, (uint64_t *)a2, (char)a3) != 0;
  }
  uint64_t v8 = a3 & 1 | (4 * (((unint64_t)a3 >> 3) & 1));
  if ((WTF::equal(*(WTF **)(a1 + 312), v6, a3) & 1) == 0)
  {
    v77.origin.CGFloat x = 0.0;
    WebKit::UnifiedPDFPlugin::setCurrentSelection((WebKit::PDFPluginBase *)a1, (uint64_t *)&v77);
    if (*(void *)&v77.origin.x) {
      CFRelease(*(CFTypeRef *)&v77.origin.x);
    }
    WTF::String::operator=((uint64_t *)(a1 + 312), a2);
    uint64_t v63 = (void *)(a1 + 976);
    WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 976, v9);
    CGFloat v10 = *(void **)(a1 + 296);
    if (*a2) {
      CGFloat v11 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      CGFloat v11 = &stru_1EEA10550;
    }
    char v57 = v7;
    CGFloat v12 = (void *)[v10 findString:v11 withOptions:v8];
    int v13 = v12;
    if (v12) {
      CFRetain(v12);
    }
    uint64_t v58 = v8;
    long long v73 = 0u;
    long long v74 = 0u;
    FloatRect v71 = (FloatRect)0;
    long long v72 = 0u;
    id obj = v13;
    uint64_t v14 = [v13 countByEnumeratingWithState:&v71 objects:&v77 count:16];
    if (v14)
    {
      uint64_t v60 = *(void *)v72;
      do
      {
        uint64_t v15 = 0;
        uint64_t v61 = v14;
        do
        {
          if (*(void *)v72 != v60) {
            objc_enumerationMutation(obj);
          }
          uint64_t v62 = v15;
          int v16 = *(void **)(*(void *)&v71.m_size + 8 * v15);
          FloatRect v67 = (FloatRect)0;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v70 = 0u;
          int v17 = (void *)[v16 pages];
          uint64_t v18 = [v17 countByEnumeratingWithState:&v67 objects:v76 count:16];
          if (v18)
          {
            uint64_t v19 = *(void *)v68;
            do
            {
              for (uint64_t i = 0; i != v18; ++i)
              {
                if (*(void *)v68 != v19) {
                  objc_enumerationMutation(v17);
                }
                CGFloat v21 = *(const void **)(*(void *)&v67.m_size + 8 * i);
                if (v21) {
                  CFRetain(*(CFTypeRef *)(*(void *)&v67.m_size + 8 * i));
                }
                uint64_t v22 = [*(id *)(a1 + 608) indexForPage:v21];
                if (v21) {
                  CFRelease(v21);
                }
                if (v22 != 0x7FFFFFFFFFFFFFFFLL)
                {
                  [v16 boundsForPage:v21];
                  *(void *)uint64_t v66 = v23;
                  *(void *)&v66[8] = v24;
                  *(void *)&v66[16] = v25;
                  *(void *)&v66[24] = v26;
                  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v75, (const CGRect *)v66);
                  *(void *)uint64_t v66 = v22;
                  *(_OWORD *)&v66[8] = v75;
                  *(_OWORD *)&v66[24] = v75;
                  uint64_t v27 = *(unsigned int *)(a1 + 988);
                  if (v27 == *(_DWORD *)(a1 + 984))
                  {
                    unint64_t v28 = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v63, v27 + 1, (unint64_t)v66);
                    uint64_t v29 = *(void *)(a1 + 976) + 40 * *(unsigned int *)(a1 + 988);
                    long long v30 = *(_OWORD *)v28;
                    long long v31 = *(_OWORD *)(v28 + 16);
                    uint64_t v32 = *(void *)(v28 + 32);
                  }
                  else
                  {
                    uint64_t v29 = *v63 + 40 * v27;
                    long long v30 = *(_OWORD *)v66;
                    long long v31 = *(_OWORD *)&v66[16];
                    uint64_t v32 = *(void *)&v66[32];
                  }
                  *(void *)(v29 + 32) = v32;
                  *(_OWORD *)uint64_t v29 = v30;
                  *(_OWORD *)(v29 + 16) = v31;
                  ++*(_DWORD *)(a1 + 988);
                }
              }
              uint64_t v18 = [v17 countByEnumeratingWithState:&v67 objects:v76 count:16];
            }
            while (v18);
          }
          uint64_t v15 = v62 + 1;
        }
        while (v62 + 1 != v61);
        uint64_t v14 = [obj countByEnumeratingWithState:&v71 objects:&v77 count:16];
      }
      while (v14);
    }
    WebKit::UnifiedPDFPlugin::updateFindOverlay(a1, 0);
    uint64_t v8 = v58;
    char v7 = v57;
    if (obj) {
      CFRelease(obj);
    }
  }
  if (!*a2 || !*((_DWORD *)*a2 + 1)) {
    return 0;
  }
  float v33 = (void *)[*(id *)(a1 + 296) findString:WTF::StringImpl::operator NSString *() fromSelection:*(void *)(a1 + 840) withOptions:v8];
  uint64_t v65 = v33;
  if (v33)
  {
    float v34 = v33;
    CFRetain(v33);
    goto LABEL_40;
  }
  if ((v7 & 0x10) == 0) {
    return 0;
  }
  CGFloat v42 = (const void *)[objc_alloc((Class)WebKit::getPDFSelectionClass(0)) initWithDocument:*(void *)(a1 + 296)];
  unsigned int v43 = *(void **)(a1 + 296);
  if (*a2) {
    char v44 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    char v44 = &stru_1EEA10550;
  }
  char v45 = (void *)[v43 findString:v44 fromSelection:v42 withOptions:v8];
  float v34 = v45;
  if (v45) {
    CFRetain(v45);
  }
  uint64_t v65 = v34;
  if (v42) {
    CFRelease(v42);
  }
  if (!v34) {
    return 0;
  }
LABEL_40:
  double v35 = (const void *)objc_msgSend((id)objc_msgSend(v34, "pages"), "firstObject");
  double v36 = v35;
  if (!v35)
  {
LABEL_47:
    uint64_t v39 = 0;
    uint64_t v65 = 0;
LABEL_66:
    CFRelease(v34);
    return v39;
  }
  CFRetain(v35);
  CFRetain(v36);
  uint64_t v37 = [*(id *)(a1 + 608) indexForPage:v36];
  CFRelease(v36);
  if (v37 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v38 = 0;
  }
  else {
    unint64_t v38 = v37;
  }
  if (v37 == 0x7FFFFFFFFFFFFFFFLL)
  {
    CFRelease(v36);
    goto LABEL_47;
  }
  [v34 boundsForPage:v36];
  v77.origin.CGFloat x = v46;
  v77.origin.y = v47;
  v77.size.width = v48;
  v77.size.height = v49;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v64, &v77);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 600) + 184))(*(void *)(a1 + 600), v37);
  WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>((WebKit::UnifiedPDFPlugin *)a1, 0, 3, v38, 1, v64[0], v64[1], v64[2], v64[3]);
  v71.m_location.int m_x = v50;
  v71.m_location.int m_y = v51;
  v71.m_size.m_width = v52;
  v71.m_size.m_height = v53;
  float v54 = (float)*(int *)(a1 + 320);
  float v55 = (float)*(int *)(a1 + 324);
  v67.m_location = (FloatPoint)vcvt_f32_s32(*(int32x2_t *)(a1 + 376));
  v67.m_size.m_width = v54;
  v67.m_size.m_height = v55;
  WebCore::LayoutRect::LayoutRect((WebCore::LayoutRect *)v66, &v67);
  WebCore::LayoutRect::LayoutRect((WebCore::LayoutRect *)&v75, &v71);
  v76[0] = 0;
  v76[16] = 0;
  uint64_t RectToExposeForScrollIntoView = WebCore::ScrollableArea::getRectToExposeForScrollIntoView();
  WebKit::UnifiedPDFPlugin::scrollToPointInContentsSpace(a1, (float)(int)RectToExposeForScrollIntoView * 0.015625, (float)SHIDWORD(RectToExposeForScrollIntoView) * 0.015625);
  WebKit::UnifiedPDFPlugin::setCurrentSelection((WebKit::PDFPluginBase *)a1, (uint64_t *)&v65);
  float v34 = v65;
  CFRelease(v36);
  uint64_t v65 = 0;
  uint64_t v39 = 1;
  if (v34) {
    goto LABEL_66;
  }
  return v39;
}

void sub_198ED4C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (v21) {
    CFRelease(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_198ED4CB4()
{
  if (v0) {
    CFRelease(v0);
  }
  JUMPOUT(0x198ED4CA0);
}

uint64_t WebKit::UnifiedPDFPlugin::rectsForTextMatchesInRect@<X0>(WebKit::UnifiedPDFPlugin *this@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t **__return_ptr))(**((void **)this + 75) + 152))(&v22);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (!v24) {
    WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a2, *((unsigned int *)this + 247));
  }
  unsigned int v6 = *((_DWORD *)this + 247);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 122);
    uint64_t v8 = v7 + 40 * v6;
    while (1)
    {
      if (!v24) {
        goto LABEL_11;
      }
      uint64_t v9 = v23;
      if (v23) {
        break;
      }
LABEL_15:
      v7 += 40;
      if (v7 == v8) {
        return std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v22, v5);
      }
    }
    CGFloat v10 = v22;
    while (1)
    {
      uint64_t v11 = *v10++;
      if (v11 == *(void *)v7) {
        break;
      }
      if (!--v9) {
        goto LABEL_15;
      }
    }
LABEL_11:
    WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>(this, 0, 4, *(void *)v7, 1, *(float *)(v7 + 8), *(float *)(v7 + 12), *(float *)(v7 + 16), *(float *)(v7 + 20));
    *(void *)&long long v21 = __PAIR64__(v13, v12);
    *((void *)&v21 + 1) = __PAIR64__(v15, v14);
    uint64_t v16 = *(unsigned int *)(a2 + 12);
    if (v16 == *(_DWORD *)(a2 + 8))
    {
      int v17 = (long long *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v16 + 1, (unint64_t)&v21);
      uint64_t v16 = *(unsigned int *)(a2 + 12);
      uint64_t v18 = *(void *)a2;
      long long v19 = *v17;
    }
    else
    {
      uint64_t v18 = *(void *)a2;
      long long v19 = v21;
    }
    *(_OWORD *)(v18 + 16 * v16) = v19;
    ++*(_DWORD *)(a2 + 12);
    goto LABEL_15;
  }
  return std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v22, v5);
}

void sub_198ED4E04(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  uint64_t v7 = *(WTF **)v5;
  if (*(void *)v5)
  {
    *(void *)uint64_t v5 = 0;
    *(_DWORD *)(v5 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void WebKit::UnifiedPDFPlugin::textIndicatorForCurrentSelection(uint64_t a1@<X0>, __int16 a2@<W1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v8 = *(void **)(a1 + 840);
  if (v8) {
    CFRetain(*(CFTypeRef *)(a1 + 840));
  }
  WebKit::UnifiedPDFPlugin::textIndicatorForSelection(a4, a1, v8, a2, a3);
  if (v8)
  {
    CFRelease(v8);
  }
}

void sub_198ED4EC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WTF *WebKit::UnifiedPDFPlugin::textIndicatorForSelection(void *a1, uint64_t a2, void *a3, __int16 a4, char a5)
{
  WebKit::UnifiedPDFPlugin::pageCoverageForSelection((unint64_t)&v96, a2, a3, 1);
  if (!v98) {
    goto LABEL_13;
  }
  WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>((WebKit::UnifiedPDFPlugin *)a2, 0, 2, *(void *)v96, 1, *(float *)(v96 + 8), *(float *)(v96 + 12), *(float *)(v96 + 16), *(float *)(v96 + 20));
  float v92 = v10;
  float v93 = v11;
  float v94 = v12;
  float v95 = v13;
  WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>((WebKit::UnifiedPDFPlugin *)a2, 2, 4, 0, 0, v10, v11, v12, v13);
  v91[0] = v14;
  v91[1] = v15;
  v91[2] = v16;
  v91[3] = v17;
  *(void *)&long long v76 = WebCore::enclosingIntRect((WebCore *)v91, v18);
  *((void *)&v76 + 1) = v19;
  uint64_t v89 = WebKit::PDFPluginBase::convertFromPluginToRootView((WebKit::PDFPluginBase *)a2, (const WebCore::IntRect *)&v76);
  int32x2_t v90 = v20;
  float v21 = WebKit::PDFPluginBase::deviceScaleFactor((WebKit::PDFPluginBase *)a2);
  *(float *)&long long v76 = (float)v90.i32[0];
  *((float *)&v76 + 1) = (float)v90.i32[1];
  WebCore::DestinationColorSpace::SRGB(v22);
  WebCore::ImageBuffer::create();
  if (!v88)
  {
LABEL_13:
    *a1 = 0;
    goto LABEL_75;
  }
  unsigned int v23 = (WebCore::GraphicsContext *)(*(uint64_t (**)(uint64_t))(*(void *)v88 + 16))(v88);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)v23 + 96))(v23, 1);
  float v24 = *(double *)(a2 + 728);
  *(float *)&long long v76 = v24;
  *((float *)&v76 + 1) = v24;
  (*(void (**)(WebCore::GraphicsContext *, long long *))(*(void *)v23 + 624))(v23, &v76);
  (*(void (**)(WebCore::GraphicsContext *, float, float))(*(void *)v23 + 640))(v23, -v92, -v93);
  if (!v98) {
    goto LABEL_91;
  }
  WebKit::PDFDocumentLayout::rowForPageIndex((uint64_t **)(a2 + 608), *(void *)v96, (uint64_t *)&__src);
  uint64_t v25 = HIDWORD(__src);
  uint64_t v26 = &v77;
  *(void *)&long long v76 = &v77;
  DWORD2(v76) = 2;
  HIDWORD(v76) = HIDWORD(__src);
  if (HIDWORD(__src) >= 3)
  {
    if (!(HIDWORD(__src) >> 29))
    {
      uint64_t v26 = (long long *)WTF::fastMalloc((WTF *)(8 * HIDWORD(__src)));
      DWORD2(v76) = v25;
      *(void *)&long long v76 = v26;
      uint64_t v25 = HIDWORD(__src);
      goto LABEL_7;
    }
LABEL_91:
    __break(0xC471u);
    JUMPOUT(0x198ED5768);
  }
LABEL_7:
  memcpy(v26, (const void *)__src, 8 * v25);
  LOBYTE(v78) = 1;
  WebKit::UnifiedPDFPlugin::paintPDFContent(a2, 0, v23, (const WebCore::FloatRect *)&v92, &v76, 1, 0);
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v76, v27);
  uint64_t v29 = (WTF *)__src;
  if (&v87 != (uint64_t *)__src && (void)__src)
  {
    *(void *)&long long __src = 0;
    DWORD2(__src) = 0;
    WTF::fastFree(v29, v28);
  }
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)v23 + 104))(v23, 1);
  uint64_t v85 = 0;
  uint64_t v30 = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)uint64_t v30 = 1;
  *(_OWORD *)(v30 + 4) = xmmword_1994F71A0;
  uint64_t v85 = v30 | 0x110C000000000000;
  *(void *)&long long v76 = 0;
  *((float *)&v76 + 2) = (float)v90.i32[0];
  *((float *)&v76 + 3) = (float)v90.i32[1];
  (*(void (**)(WebCore::GraphicsContext *, long long *, uint64_t *, uint64_t, uint64_t))(*(void *)v23 + 248))(v23, &v76, &v85, 2, 2);
  long long v78 = 0u;
  *(_OWORD *)float v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  int v80 = 1065353216;
  __int16 v84 = 0;
  long long v81 = 0u;
  long long v82 = 0u;
  char v83 = 0;
  uint64_t v31 = v88;
  uint64_t v88 = 0;
  uint64_t v74 = v31;
  WebCore::ImageBuffer::sinkIntoNativeImage();
  WebCore::BitmapImage::create();
  uint64_t v33 = __src;
  *(void *)&long long __src = 0;
  float v34 = (_DWORD *)v82;
  *(void *)&long long v82 = v33;
  if (v34)
  {
    if (v34[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)v34 + 8))(v34);
      double v35 = (_DWORD *)__src;
      *(void *)&long long __src = 0;
      if (v35)
      {
        if (v35[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v35 + 8))(v35);
        }
        else {
          --v35[2];
        }
      }
    }
    else
    {
      --v34[2];
      *(void *)&long long __src = 0;
    }
  }
  if (v75)
  {
    char v36 = 0;
    uint64_t v37 = *(void *)(v75 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v37, (unsigned __int8 *)&v36, 1u, memory_order_acquire, memory_order_acquire);
    if (v36) {
      MEMORY[0x19972E8D0](v37);
    }
    uint64_t v38 = *(void *)(v37 + 8);
    int v39 = 1;
    uint64_t v40 = v38 - 1;
    *(void *)(v37 + 8) = v38 - 1;
    if (v38 == 1)
    {
      uint64_t v72 = *(void *)(v37 + 16);
      uint64_t v41 = *(void *)(v37 + 24);
      *(void *)(v37 + 24) = 0;
      BOOL v42 = v72 != 0;
    }
    else
    {
      uint64_t v41 = 0;
      BOOL v42 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v37, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
    if (v39 == 1)
    {
      if (v40) {
        goto LABEL_29;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v37);
      if (v40) {
        goto LABEL_29;
      }
    }
    if (v41) {
      (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
    }
    if (!v42) {
      WTF::fastFree((WTF *)v37, v32);
    }
  }
LABEL_29:
  if (!v74) {
    goto LABEL_40;
  }
  char v43 = 0;
  uint64_t v44 = *(void *)(v74 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v44, (unsigned __int8 *)&v43, 1u, memory_order_acquire, memory_order_acquire);
  if (v43) {
    MEMORY[0x19972E8D0](v44);
  }
  uint64_t v45 = *(void *)(v44 + 8);
  int v46 = 1;
  uint64_t v47 = v45 - 1;
  *(void *)(v44 + 8) = v45 - 1;
  if (v45 == 1)
  {
    uint64_t v73 = *(void *)(v44 + 16);
    uint64_t v48 = *(void *)(v44 + 24);
    *(void *)(v44 + 24) = 0;
    BOOL v49 = v73 != 0;
  }
  else
  {
    uint64_t v48 = 0;
    BOOL v49 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v44, (unsigned __int8 *)&v46, 0, memory_order_release, memory_order_relaxed);
  if (v46 == 1)
  {
    if (v47) {
      goto LABEL_40;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
    if (v47) {
      goto LABEL_40;
    }
  }
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
  }
  if (!v49) {
    WTF::fastFree((WTF *)v44, v32);
  }
LABEL_40:
  int v80 = LODWORD(v21);
  uint64_t v50 = v82;
  if ((void)v82) {
    ++*(_DWORD *)(v82 + 8);
  }
  float v51 = (_DWORD *)*((void *)&v81 + 1);
  *((void *)&v81 + 1) = v50;
  if (v51)
  {
    if (v51[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v51 + 8))(v51);
    }
    else {
      --v51[2];
    }
  }
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&__src, (const WebCore::IntRect *)&v89);
  long long v78 = __src;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&__src, (const WebCore::IntRect *)&v89);
  long long v76 = __src;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&__src, (const WebCore::IntRect *)&v89);
  long long v77 = __src;
  int32x2_t v52 = v90;
  float v54 = (float32x2_t *)WTF::fastMalloc((WTF *)0x10);
  float32x2_t *v54 = 0;
  v54[1] = vcvt_f32_s32(v52);
  float v55 = v79[0];
  if (v79[0])
  {
    v79[0] = 0;
    LODWORD(v79[1]) = 0;
    WTF::fastFree(v55, v53);
  }
  v79[0] = (WTF *)v54;
  v79[1] = (WTF *)0x100000001;
  char v83 = a5;
  __int16 v84 = a4;
  WebCore::TextIndicator::create((uint64_t *)&__src, (WebCore::TextIndicator *)&v76, v53);
  *a1 = __src;
  if ((*((void *)&v82 + 1) & 0x8000000000000) != 0)
  {
    long long v69 = (unsigned int *)(*((void *)&v82 + 1) & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(*((void *)&v82 + 1) & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v69);
      WTF::fastFree((WTF *)v69, v9);
    }
  }
  int v56 = (_DWORD *)v82;
  *(void *)&long long v82 = 0;
  if (v56)
  {
    if (v56[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v56 + 8))(v56);
    }
    else {
      --v56[2];
    }
  }
  char v57 = (_DWORD *)*((void *)&v81 + 1);
  *((void *)&v81 + 1) = 0;
  if (v57)
  {
    if (v57[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v57 + 8))(v57);
    }
    else {
      --v57[2];
    }
  }
  uint64_t v58 = (_DWORD *)v81;
  *(void *)&long long v81 = 0;
  if (v58)
  {
    if (v58[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v58 + 8))(v58);
    }
    else {
      --v58[2];
    }
  }
  char v59 = v79[0];
  if (v79[0])
  {
    v79[0] = 0;
    LODWORD(v79[1]) = 0;
    WTF::fastFree(v59, v9);
  }
  if ((v85 & 0x8000000000000) != 0)
  {
    long long v70 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v85 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v70);
      WTF::fastFree((WTF *)v70, v9);
    }
  }
  uint64_t v60 = v88;
  uint64_t v88 = 0;
  if (v60)
  {
    char v61 = 0;
    uint64_t v62 = *(void *)(v60 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v62, (unsigned __int8 *)&v61, 1u, memory_order_acquire, memory_order_acquire);
    if (v61) {
      MEMORY[0x19972E8D0](v62);
    }
    uint64_t v63 = *(void *)(v62 + 8);
    int v64 = 1;
    uint64_t v65 = v63 - 1;
    *(void *)(v62 + 8) = v63 - 1;
    if (v63 == 1)
    {
      uint64_t v71 = *(void *)(v62 + 16);
      uint64_t v66 = *(void *)(v62 + 24);
      *(void *)(v62 + 24) = 0;
      BOOL v67 = v71 != 0;
    }
    else
    {
      uint64_t v66 = 0;
      BOOL v67 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v62, (unsigned __int8 *)&v64, 0, memory_order_release, memory_order_relaxed);
    if (v64 == 1)
    {
      if (v65) {
        goto LABEL_75;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v62);
      if (v65) {
        goto LABEL_75;
      }
    }
    if (v66) {
      (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
    }
    if (!v67) {
      WTF::fastFree((WTF *)v62, v9);
    }
  }
LABEL_75:
  uint64_t result = (WTF *)v96;
  if (v96)
  {
    uint64_t v96 = 0;
    int v97 = 0;
    return (WTF *)WTF::fastFree(result, v9);
  }
  return result;
}

void sub_198ED5774(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, uint64_t a19, _DWORD *a20,_DWORD *a21,_DWORD *a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,int a27)
{
  WTF::fastFree(v27, a2);
  if ((a23 & 0x8000000000000) != 0)
  {
    uint64_t v30 = (unsigned int *)(a23 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a23 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, v31);
    }
  }
  if (a22)
  {
    if (a22[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a22 + 8))(a22);
    }
    else {
      --a22[2];
    }
  }
  if (a21)
  {
    if (a21[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a21 + 8))(a21);
    }
    else {
      --a21[2];
    }
  }
  if (a20)
  {
    if (a20[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
    }
    else {
      --a20[2];
    }
  }
  if (a17) {
    WTF::fastFree(a17, v31);
  }
  if ((a25 & 0x8000000000000) != 0)
  {
    uint64_t v32 = (unsigned int *)(a25 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a25 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v32);
      WTF::fastFree((WTF *)v32, v31);
    }
  }
  uint64_t v33 = *(void *)(v28 - 152);
  *(void *)(v28 - 152) = 0;
  if (v33)
  {
    char v34 = 0;
    uint64_t v35 = *(void *)(v33 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v35, (unsigned __int8 *)&v34, 1u, memory_order_acquire, memory_order_acquire);
    if (v34) {
      MEMORY[0x19972E8D0](v35);
    }
    uint64_t v36 = *(void *)(v35 + 8);
    int v37 = 1;
    uint64_t v38 = v36 - 1;
    *(void *)(v35 + 8) = v36 - 1;
    if (v36 == 1)
    {
      uint64_t v41 = *(void *)(v35 + 16);
      uint64_t v39 = *(void *)(v35 + 24);
      *(void *)(v35 + 24) = 0;
      BOOL v40 = v41 != 0;
    }
    else
    {
      uint64_t v39 = 0;
      BOOL v40 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v35, (unsigned __int8 *)&v37, 0, memory_order_release, memory_order_relaxed);
    if (v37 == 1)
    {
      if (v38) {
        goto LABEL_34;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v35);
      if (v38) {
        goto LABEL_34;
      }
    }
    if (v39) {
      (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
    }
    if (!v40) {
      WTF::fastFree((WTF *)v35, v31);
    }
  }
LABEL_34:
  BOOL v42 = *(WTF **)(v28 - 96);
  if (v42)
  {
    *(void *)(v28 - 96) = 0;
    *(_DWORD *)(v28 - 88) = 0;
    WTF::fastFree(v42, v31);
  }
  _Unwind_Resume(a1);
}

WTF *WebKit::UnifiedPDFPlugin::dictionaryPopupInfoForSelection@<X0>(id *a1@<X0>, PDFSelection *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 72) = 1065353216;
  *(_WORD *)(a4 + 114) = 0;
  *(_OWORD *)(a4 + 8WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(unsigned char *)(a4 + 112) = 0;
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)(a4 + 120));
  uint64_t result = [(NSString *)[(PDFSelection *)a2 string] length];
  if (result)
  {
    unint64_t v9 = [(NSString *)[(PDFSelection *)a2 string] length];
    float v10 = [(PDFSelection *)a2 attributedString];
    float v11 = (WebCore::TextIndicator *)v10;
    if (v9 >= 0xFB) {
      float v11 = -[NSAttributedString attributedSubstringFromRange:](v10, "attributedSubstringFromRange:", 0, 250);
    }
    *(float *)a4 = WebKit::UnifiedPDFPlugin::rectForSelectionInRootView(a1, a2);
    *(_DWORD *)(a4 + 4) = v12;
    uint64_t v27 = v11;
    if (v11) {
      CFRetain(v11);
    }
    WebCore::AttributedString::fromNSAttributedString();
    WebCore::AttributedString::operator=();
    MEMORY[0x199732DE0](v20);
    float v13 = v27;
    uint64_t v27 = 0;
    if (v13) {
      CFRelease(v13);
    }
    uint64_t result = WebKit::UnifiedPDFPlugin::textIndicatorForSelection(&v27, (uint64_t)a1, a2, 0, a3);
    if (v27)
    {
      WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v20, (WebCore::TextIndicator *)((char *)v27 + 8));
      WebCore::TextIndicatorData::operator=(a4 + 8, v20);
      if ((v26 & 0x8000000000000) != 0)
      {
        uint64_t v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v19);
          WTF::fastFree((WTF *)v19, v14);
        }
      }
      int v15 = v25;
      uint64_t v25 = 0;
      if (v15)
      {
        if (v15[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
        }
        else {
          --v15[2];
        }
      }
      int v16 = v24;
      float v24 = 0;
      if (v16)
      {
        if (v16[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v16 + 8))(v16);
        }
        else {
          --v16[2];
        }
      }
      int v17 = v23;
      unsigned int v23 = 0;
      if (v17)
      {
        if (v17[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v17 + 8))(v17);
        }
        else {
          --v17[2];
        }
      }
      uint64_t v18 = v21;
      if (v21)
      {
        float v21 = 0;
        int v22 = 0;
        WTF::fastFree(v18, v14);
      }
      uint64_t result = v27;
      if (v27) {
        return WTF::RefCounted<WebCore::TextIndicator>::deref(v27);
      }
    }
  }
  return result;
}

void sub_198ED5E1C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22)
{
  if ((a22 & 0x8000000000000) != 0)
  {
    uint64_t v26 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, a2);
    }
  }
  if (a21)
  {
    if (a21[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a21 + 8))(a21);
    }
    else {
      --a21[2];
    }
  }
  if (a20)
  {
    if (a20[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
    }
    else {
      --a20[2];
    }
  }
  if (a19)
  {
    if (a19[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
    }
    else {
      --a19[2];
    }
  }
  if (a16) {
    WTF::fastFree(a16, a2);
  }
  uint64_t v27 = *(WebCore::TextIndicator **)(v24 - 72);
  if (v27) {
    WTF::RefCounted<WebCore::TextIndicator>::deref(v27);
  }
  MEMORY[0x199732DE0](v23);
  WebCore::TextIndicatorData::~TextIndicatorData((WebCore::TextIndicatorData *)(v22 + 8), v28);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::performDictionaryLookupAtLocation(WebKit::UnifiedPDFPlugin *this, const WebCore::FloatPoint *a2)
{
  float v3 = roundf(*(float *)a2);
  uint64_t v4 = 0x7FFFFFFFLL;
  uint64_t v5 = 0x80000000;
  if (v3 > -2147500000.0) {
    uint64_t v5 = (int)v3;
  }
  if (v3 < 2147500000.0) {
    uint64_t v4 = v5;
  }
  float v6 = roundf(*((float *)a2 + 1));
  uint64_t v7 = 0x7FFFFFFF00000000;
  unint64_t v8 = 0x8000000000000000;
  if (v6 > -2147500000.0) {
    unint64_t v8 = (unint64_t)(int)v6 << 32;
  }
  if (v6 < 2147500000.0) {
    uint64_t v7 = v8;
  }
  v45[0] = v7 | v4;
  IntPoint v43 = (IntPoint)WebCore::AffineTransform::mapPoint((WebKit::UnifiedPDFPlugin *)((char *)this + 328), (const WebCore::IntPoint *)v45);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v40, &v43);
  WebKit::UnifiedPDFPlugin::convertDown<WebCore::FloatPoint>(this, 4, 1, 0, 0, v40[0], v40[1]);
  float v41 = v9;
  float v42 = v10;
  unint64_t v11 = WebKit::PDFPresentationController::pageIndexForDocumentPoint(*((WebKit::PDFPresentationController **)this + 75), (const WebCore::FloatPoint *)&v41);
  if (!v12) {
    return 0;
  }
  unint64_t v13 = v11;
  int v14 = (void *)[*((id *)this + 76) pageAtIndex:v11];
  int v15 = v14;
  if (v14) {
    CFRetain(v14);
  }
  WebKit::PDFDocumentLayout::documentToPDFPage((uint64_t)this + 608, v13, v41, v42);
  WebCore::FloatPoint::operator CGPoint();
  int v16 = (PDFSelection *)objc_msgSend(v15, "selectionForWordAtPoint:");
  int v17 = v16;
  if (v16) {
    CFRetain(v16);
  }
  uint64_t v18 = *((void *)this + 13);
  if (!v18
    || (uint64_t v19 = *(void *)(v18 + 8)) == 0
    || (uint64_t v20 = *(void *)(v19 + 24)) == 0
    || (uint64_t v21 = *(void *)(v20 + 8)) == 0
    || (uint64_t v22 = *(void *)(v21 + 24)) == 0
    || (uint64_t v23 = *(void *)(v22 + 8)) == 0
    || (uint64_t v24 = *(void **)(*(void *)(v23 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v24 + 1368))(v24) & 1) != 0)
    || !*(void *)(v24[2] + 8))
  {
    uint64_t v32 = 0;
    if (!v17) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v25 = *(void *)(*(void *)(*((void *)this + 13) + 8) + 24);
  if (!v25
    || (uint64_t v26 = *(void *)(v25 + 8)) == 0
    || (uint64_t v27 = *(void *)(v26 + 24)) == 0
    || (uint64_t v28 = *(void *)(v27 + 8)) == 0
    || (uint64_t v29 = *(void **)(*(void *)(v28 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v29 + 1368))(v29) & 1) != 0))
  {
    uint64_t v30 = 0;
    goto LABEL_36;
  }
  uint64_t v30 = *(void *)(v29[2] + 8);
  if (!v30)
  {
LABEL_36:
    char v31 = 1;
    goto LABEL_37;
  }
  CFRetain(*(CFTypeRef *)(v30 - 8));
  char v31 = 0;
  v30 -= 16;
LABEL_37:
  WebKit::UnifiedPDFPlugin::dictionaryPopupInfoForSelection((id *)this, v17, 1, (uint64_t)v45);
  uint64_t v44 = v45;
  IPC::MessageSender::send<Messages::WebPageProxy::DidPerformDictionaryLookup>(v30 + 32, (uint64_t *)&v44);
  MEMORY[0x199732DE0](&v52);
  if ((v51 & 0x8000000000000) != 0)
  {
    uint64_t v39 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v39);
      WTF::fastFree((WTF *)v39, v34);
    }
  }
  uint64_t v35 = v50;
  uint64_t v50 = 0;
  if (v35)
  {
    if (v35[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v35 + 8))(v35);
    }
    else {
      --v35[2];
    }
  }
  uint64_t v36 = v49;
  BOOL v49 = 0;
  if (v36)
  {
    if (v36[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v36 + 8))(v36);
    }
    else {
      --v36[2];
    }
  }
  int v37 = v48;
  uint64_t v48 = 0;
  if (v37)
  {
    if (v37[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v37 + 8))(v37);
    }
    else {
      --v37[2];
    }
  }
  uint64_t v38 = v46;
  if (v46)
  {
    int v46 = 0;
    int v47 = 0;
    WTF::fastFree(v38, v34);
  }
  if ((v31 & 1) == 0) {
    CFRelease(*(CFTypeRef *)(v30 + 8));
  }
  uint64_t v32 = 1;
  if (!v17) {
    goto LABEL_31;
  }
LABEL_30:
  CFRelease(v17);
LABEL_31:
  if (v15) {
    CFRelease(v15);
  }
  return v32;
}

void sub_198ED6364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF *a22,int a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (v29) {
    CFRelease(v29);
  }
  if (v28) {
    CFRelease(v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::DidPerformDictionaryLookup>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1936;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v12 = v5;
  IPC::ArgumentCoder<WebCore::DictionaryPopupInfo,void>::encode(v5, *a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v12, 0);
  unint64_t v8 = v12;
  char v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v10, v11);
  }
  return v7;
}

void sub_198ED65B8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::UnifiedPDFPlugin::textForImmediateActionHitTestAtPoint(WebKit::UnifiedPDFPlugin *this@<X0>, const WebCore::FloatPoint *a2@<X1>, WebKit::WebHitTestResultData *a3@<X2>, void *a4@<X8>)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (!WebKit::UnifiedPDFPlugin::existingSelectionContainsPoint(this, a2))
  {
    float v9 = roundf(*(float *)a2);
    uint64_t v10 = 0x7FFFFFFFLL;
    uint64_t v11 = 0x80000000;
    if (v9 > -2147500000.0) {
      uint64_t v11 = (int)v9;
    }
    if (v9 < 2147500000.0) {
      uint64_t v10 = v11;
    }
    float v12 = roundf(*((float *)a2 + 1));
    if (v12 >= 2147500000.0)
    {
      unint64_t v13 = 0x7FFFFFFF00000000;
    }
    else if (v12 <= -2147500000.0)
    {
      unint64_t v13 = 0x8000000000000000;
    }
    else
    {
      unint64_t v13 = (unint64_t)(int)v12 << 32;
    }
    *(void *)&v55.origin.CGFloat x = v13 | v10;
    IntPoint v67 = (IntPoint)WebCore::AffineTransform::mapPoint((WebKit::UnifiedPDFPlugin *)((char *)this + 328), (const WebCore::IntPoint *)&v55);
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v64, &v67);
    WebKit::UnifiedPDFPlugin::convertDown<WebCore::FloatPoint>(this, 4, 1, 0, 0, v64[0], v64[1]);
    float v65 = v14;
    float v66 = v15;
    unint64_t v16 = WebKit::PDFPresentationController::pageIndexForDocumentPoint(*((WebKit::PDFPresentationController **)this + 75), (const WebCore::FloatPoint *)&v65);
    if (!v17)
    {
      v55.origin.CGFloat x = 0.0;
      std::pair<WTF::String,WTF::RetainPtr<PDFSelection>>::pair[abi:sn180100]<WTF::String,WTF::RetainPtr<PDFSelection>&,0>(a4, (uint64_t *)&v55, (const void **)this + 105);
      CGFloat x = v55.origin.x;
      if (!*(void *)&v55.origin.x) {
        return;
      }
      goto LABEL_34;
    }
    unint64_t v18 = v16;
    uint64_t v19 = (id *)((char *)this + 608);
    WebKit::PDFDocumentLayout::documentToPDFPage((uint64_t)v19, v16, v65, v66);
    int v62 = v20;
    int v63 = v21;
    uint64_t v22 = (void *)[*v19 pageAtIndex:v18];
    uint64_t v23 = v22;
    if (v22) {
      CFRetain(v22);
    }
    WebCore::FloatPoint::operator CGPoint();
    uint64_t v24 = objc_msgSend(v23, "selectionForWordAtPoint:");
    uint64_t v25 = v24;
    char v61 = v24;
    if (v24)
    {
      CFRetain(v24);
      uint64_t v26 = (void *)[v23 annotations];
      uint64_t v27 = v26;
      if (v26)
      {
        CFRetain(v26);
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        uint64_t v29 = [v27 countByEnumeratingWithState:&v57 objects:v68 count:16];
        if (v29)
        {
          uint64_t v30 = *(void *)v58;
LABEL_18:
          uint64_t v31 = 0;
          while (1)
          {
            if (*(void *)v58 != v30) {
              objc_enumerationMutation(v27);
            }
            uint64_t v32 = *(void **)(*((void *)&v57 + 1) + 8 * v31);
            [v32 bounds];
            v55.origin.CGFloat x = v33;
            v55.origin.y = v34;
            v55.size.width = v35;
            v55.size.height = v36;
            WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v56, &v55);
            uint64_t v37 = WebCore::FloatRect::contains();
            if (v37)
            {
              WebKit::getPDFAnnotationLinkClass[0]((WebKit *)v37);
              if (objc_opt_isKindOfClass())
              {
                if ([v32 URL])
                {
                  uint64_t v38 = (void *)[v32 URL];
                  uint64_t v39 = v38;
                  if (v38) {
                    break;
                  }
                }
              }
            }
            if (v29 == ++v31)
            {
              uint64_t v29 = [v27 countByEnumeratingWithState:&v57 objects:v68 count:16];
              if (v29) {
                goto LABEL_18;
              }
              goto LABEL_27;
            }
          }
          CFRetain(v38);
          MEMORY[0x19972EAD0](&v55, [v39 absoluteString]);
          CGFloat v45 = v55.origin.x;
          v55.origin.CGFloat x = 0.0;
          int v46 = (WTF::StringImpl *)*((void *)a3 + 2);
          *((CGFloat *)a3 + 2) = v45;
          if (v46)
          {
            int v47 = *(_DWORD *)v46 - 2;
            if (*(_DWORD *)v46 != 2) {
              goto LABEL_44;
            }
            WTF::StringImpl::destroy(v46, v44);
            int v46 = *(WTF::StringImpl **)&v55.origin.x;
            v55.origin.CGFloat x = 0.0;
            if (!v46) {
              goto LABEL_45;
            }
            int v47 = *(_DWORD *)v46 - 2;
            if (*(_DWORD *)v46 == 2) {
              WTF::StringImpl::destroy(v46, v48);
            }
            else {
LABEL_44:
            }
              *(_DWORD *)int v46 = v47;
          }
LABEL_45:
          MEMORY[0x19972EAD0](&v55, objc_msgSend(v25, "string", *(void *)&v55.origin.x));
          CGFloat v50 = v55.origin.x;
          v55.origin.CGFloat x = 0.0;
          uint64_t v51 = (WTF::StringImpl *)*((void *)a3 + 4);
          *((CGFloat *)a3 + 4) = v50;
          if (v51)
          {
            int v52 = *(_DWORD *)v51 - 2;
            if (*(_DWORD *)v51 != 2)
            {
LABEL_49:
              *(_DWORD *)uint64_t v51 = v52;
              goto LABEL_50;
            }
            WTF::StringImpl::destroy(v51, v49);
            uint64_t v51 = *(WTF::StringImpl **)&v55.origin.x;
            v55.origin.CGFloat x = 0.0;
            if (v51)
            {
              int v52 = *(_DWORD *)v51 - 2;
              if (*(_DWORD *)v51 == 2)
              {
                WTF::StringImpl::destroy(v51, v53);
                goto LABEL_50;
              }
              goto LABEL_49;
            }
          }
LABEL_50:
          MEMORY[0x19972EAD0](a4, objc_msgSend(v25, "string", *(void *)&v55.origin.x));
          a4[1] = v25;
          CFRetain(v25);
          CFRelease(v39);
          goto LABEL_55;
        }
LABEL_27:
        BOOL v40 = (void *)WebCore::DictionaryLookup::stringForPDFSelection((WebCore::DictionaryLookup *)v25, v28);
        float v41 = v40;
        if (v40 && [v40 length])
        {
          MEMORY[0x19972EAD0](a4, v41);
          a4[1] = v25;
          CFRetain(v25);
        }
        else
        {
          v55.origin.CGFloat x = 0.0;
          std::pair<WTF::String,WTF::RetainPtr<PDFSelection>>::pair[abi:sn180100]<WTF::String,WTF::RetainPtr<PDFSelection>&,0>(a4, (uint64_t *)&v55, &v61);
          if (*(void *)&v55.origin.x)
          {
            if (**(_DWORD **)&v55.origin.x == 2) {
              WTF::StringImpl::destroy(*(WTF::StringImpl **)&v55.origin.x, v54);
            }
            else {
              **(_DWORD **)&v55.origin.x -= 2;
            }
          }
        }
LABEL_55:
        CFRelease(v27);
      }
      else
      {
        *a4 = 0;
        a4[1] = 0;
      }
      CFRelease(v25);
      if (!v23) {
        return;
      }
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
      if (!v23) {
        return;
      }
    }
    CFRelease(v23);
    return;
  }
  unint64_t v8 = (void *)*((void *)this + 105);
  if (v8) {
    MEMORY[0x19972EAD0](&v55, [v8 string]);
  }
  else {
    v55.origin.CGFloat x = 0.0;
  }
  std::pair<WTF::String,WTF::RetainPtr<PDFSelection>>::pair[abi:sn180100]<WTF::String,WTF::RetainPtr<PDFSelection>&,0>(a4, (uint64_t *)&v55, (const void **)this + 105);
  CGFloat x = v55.origin.x;
  v55.origin.CGFloat x = 0.0;
  if (x != 0.0)
  {
LABEL_34:
    if (**(_DWORD **)&x == 2) {
      WTF::StringImpl::destroy(*(WTF::StringImpl **)&x, v42);
    }
    else {
      **(_DWORD **)&x -= 2;
    }
  }
}

void sub_198ED6A74(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  float v14 = *v10;
  *uint64_t v10 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, a2);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  CFRelease(v12);
  CFRelease(v11);
  if (v9) {
    CFRelease(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::accessibilityHitTest(WebKit::UnifiedPDFPlugin *this, const IntPoint *a2)
{
  return 0;
}

uint64_t WebKit::UnifiedPDFPlugin::accessibilityObject(WebKit::UnifiedPDFPlugin *this)
{
  return 0;
}

uint64_t WebKit::UnifiedPDFPlugin::pluginBoundsForAnnotation(id *a1, id *a2)
{
  [*a2 bounds];
  v18.origin.CGFloat x = v4;
  v18.origin.y = v5;
  v18.size.width = v6;
  v18.size.height = v7;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v19, &v18);
  unint64_t v8 = (const void *)[*a2 page];
  float v9 = v8;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v10 = [a1[76] indexForPage:v9];
  uint64_t v11 = v10;
  if (v10 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v11 != 0x7FFFFFFFFFFFFFFFLL)
  {
    WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>((WebKit::UnifiedPDFPlugin *)a1, 0, 4, v12, 1, v19[0], v19[1], v19[2], v19[3]);
    *(void *)&v18.origin.CGFloat x = __PAIR64__(v14, v13);
    *(void *)&v18.origin.y = __PAIR64__(v16, v15);
  }
  return WebCore::FloatRect::operator CGRect();
}

void sub_198ED6C74(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::UnifiedPDFPlugin::annotationRectsForTesting@<X0>(WebKit::UnifiedPDFPlugin *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  while (1)
  {
    uint64_t result = (void *)*((void *)this + 76);
    if (result) {
      uint64_t result = (void *)[result pageCount];
    }
    if (v4 >= (unint64_t)result) {
      break;
    }
    uint64_t result = (void *)[*((id *)this + 76) pageAtIndex:v4];
    CGFloat v6 = result;
    if (!result) {
      break;
    }
    CFRetain(result);
    CGFloat v7 = (void *)[v6 annotations];
    unint64_t v8 = v7;
    if (v7)
    {
      CFRetain(v7);
      for (unsigned int i = 0; [v8 count] > (unint64_t)i; ++i)
      {
        memset(&v24, 0, sizeof(v24));
        objc_msgSend((id)objc_msgSend(v8, "objectAtIndex:", i), "bounds");
        v24.origin.CGFloat x = v10;
        v24.origin.y = v11;
        v24.size.width = v12;
        v24.size.height = v13;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v22, &v24);
        WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>(this, 0, 4, v4, 1, v22[0], v22[1], v22[2], v22[3]);
        *(void *)&long long v23 = __PAIR64__(v15, v14);
        *((void *)&v23 + 1) = __PAIR64__(v17, v16);
        uint64_t v18 = *(unsigned int *)(a2 + 12);
        if (v18 == *(_DWORD *)(a2 + 8))
        {
          int v21 = (long long *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v18 + 1, (unint64_t)&v23);
          uint64_t v18 = *(unsigned int *)(a2 + 12);
          uint64_t v19 = *(void *)a2;
          long long v20 = *v21;
        }
        else
        {
          uint64_t v19 = *(void *)a2;
          long long v20 = v23;
        }
        *(_OWORD *)(v19 + 16 * v18) = v20;
        ++*(_DWORD *)(a2 + 12);
      }
      CFRelease(v8);
    }
    CFRelease(v6);
    ++v4;
  }
  return result;
}

void sub_198ED6DF0(_Unwind_Exception *exception_object, void *a2)
{
  unint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::UnifiedPDFPlugin::setTextAnnotationValueForTesting(WebKit::UnifiedPDFPlugin *this, unsigned int a2, unsigned int a3, const WTF::String *a4)
{
  CGFloat v5 = (void *)*((void *)this + 76);
  if (v5)
  {
    uint64_t v8 = a2;
    if ([v5 pageCount] > (unint64_t)a2)
    {
      float v9 = (void *)[*((id *)this + 76) pageAtIndex:v8];
      CGFloat v10 = v9;
      if (v9) {
        CFRetain(v9);
      }
      CGFloat v11 = (void *)[v10 annotations];
      CGFloat v12 = v11;
      if (v11) {
        CFRetain(v11);
      }
      if ([v12 count] > (unint64_t)a3)
      {
        CGFloat v13 = objc_msgSend(v12, "objectAtIndex:");
        unsigned int v14 = v13;
        if (v13) {
          CGFloat v13 = (void *)CFRetain(v13);
        }
        WebKit::getPDFAnnotationTextWidgetClass[0]((WebKit *)v13);
        if (objc_opt_isKindOfClass())
        {
          if (*(void *)a4) {
            unsigned int v15 = (__CFString *)WTF::StringImpl::operator NSString *();
          }
          else {
            unsigned int v15 = &stru_1EEA10550;
          }
          [v14 setWidgetStringValue:v15];
          unsigned __int8 v16 = WebKit::UnifiedPDFPlugin::repaintRequirementsForAnnotation((WebKit *)v14, 1);
          WebKit::UnifiedPDFPlugin::setNeedsRepaintForAnnotation((uint64_t)this, v14, v16);
        }
        if (v14) {
          CFRelease(v14);
        }
      }
      if (v12) {
        CFRelease(v12);
      }
      if (v10)
      {
        CFRelease(v10);
      }
    }
  }
}

void sub_198ED6F8C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    CFRelease(v2);
    if (!v1) {
LABEL_4:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v1)
  {
    goto LABEL_4;
  }
  CFRelease(v1);
  goto LABEL_4;
}

void *WebKit::UnifiedPDFPlugin::setPDFDisplayModeForTesting(WebKit::UnifiedPDFPlugin *this, WTF::StringImpl **a2)
{
  float v3 = *a2;
  if (*a2) {
    *(_DWORD *)v3 += 2;
  }
  if (MEMORY[0x19972E990](v3, "SinglePageDiscrete", 18))
  {
    uint64_t v4 = 0;
  }
  else if (MEMORY[0x19972E990](v3, "SinglePageContinuous", 20))
  {
    uint64_t v4 = 1;
  }
  else if (MEMORY[0x19972E990](v3, "TwoUpDiscrete", 13))
  {
    uint64_t v4 = 2;
  }
  else if (MEMORY[0x19972E990](v3, "TwoUpContinuous", 15))
  {
    uint64_t v4 = 3;
  }
  else
  {
    uint64_t v4 = 1;
  }
  int v5 = *((unsigned __int8 *)this + 772);
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 75) + 200))(*((void *)this + 75));
  (*(void (**)(void *__return_ptr))(**((void **)this + 75) + 168))(v10);
  WebKit::UnifiedPDFPlugin::setDisplayMode((uint64_t)this, (WebKit::PDFPresentationController *)v4);
  char v7 = *((unsigned char *)this + 772);
  *((unsigned char *)this + 772) = 1;
  WebKit::UnifiedPDFPlugin::updateLayout((uint64_t)this, v5 == 0, 0);
  *((unsigned char *)this + 772) = v7;
  if (v11) {
    (*(void (**)(void, void *))(**((void **)this + 75) + 176))(*((void *)this + 75), v10);
  }
  uint64_t result = (void *)(*(uint64_t (**)(void))(**((void **)this + 75) + 200))(*((void *)this + 75));
  if (v6 != result) {
    uint64_t result = WebKit::PDFPluginBase::wantsWheelEventsChanged(this);
  }
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      return (void *)WTF::StringImpl::destroy(v3, v9);
    }
    else
    {
      *(_DWORD *)v3 -= 2;
    }
  }
  return result;
}

void sub_198ED71EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  *(unsigned char *)(v3 + 772) = v4;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebChromeClient::didPreventDefaultForEvent(unsigned int *this, WebCore::LocalFrame *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v3 + 48);
  if (v4)
  {
    this = *(unsigned int **)(v4 + 160);
    if (this)
    {
      if (!*((unsigned char *)this + 144))
      {
        int v5 = this + 2;
        atomic_fetch_add((atomic_uint *volatile)this + 2, 1u);
        WebCore::ContentChangeObserver::didPreventDefaultForEvent((WebCore::ContentChangeObserver *)this, a2);
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
      }
    }
  }
  return this;
}

void sub_198ED729C(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebChromeClient::didFinishContentChangeObserving(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  CFRetain(*(CFTypeRef *)(v5 + 8));
  WebKit::WebPage::didFinishContentChangeObserving(v5, a3);
  if (v4)
  {
    int v6 = *(const void **)(v5 + 8);
    CFRelease(v6);
  }
}

void sub_198ED732C(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebChromeClient::notifyRevealedSelectionByScrollingFrame(WebKit::WebChromeClient *this, WebCore::LocalFrame *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  CFRetain(*(CFTypeRef *)(v3 + 8));
  WebKit::WebPage::didChangeSelectionOrOverflowScrollPosition((WebCore::Page **)v3);
  if (v2)
  {
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

uint64_t WebKit::WebChromeClient::isStopping(WebKit::WebChromeClient *this)
{
  return 0;
}

void WebKit::WebChromeClient::didStartOverflowScroll(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v9[0] = 0;
  v9[16] = 0;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 32) + 56))(v2 + 32);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2060;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  CGFloat v10 = v4;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v4, (uint64_t)v9);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v2 + 32) + 32))(v2 + 32, &v10, 0);
  int v6 = v10;
  CGFloat v10 = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v7, v8);
    if (!v1) {
      return;
    }
  }
  else if (!v1)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v2 + 8));
}

void sub_198ED74D8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v15, v16);
  }
  if (v13) {
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebChromeClient::didEndOverflowScroll(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v9[0] = 0;
  v9[16] = 0;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 32) + 56))(v2 + 32);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2059;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  CGFloat v10 = v4;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v4, (uint64_t)v9);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v2 + 32) + 32))(v2 + 32, &v10, 0);
  int v6 = v10;
  CGFloat v10 = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v7, v8);
    if (!v1) {
      return;
    }
  }
  else if (!v1)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v2 + 8));
}

void sub_198ED7634(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v15, v16);
  }
  if (v13) {
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebChromeClient::showPlaybackTargetPicker(uint64_t a1, char a2, char a3, uint64_t *a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v7) {
    uint64_t v8 = (int32x2_t *)(v7 - 16);
  }
  else {
    uint64_t v8 = 0;
  }
  CFRetain(*(CFTypeRef *)&v8[1]);
  uint64_t v9 = WebKit::WebPage::rectForElementAtInteractionLocation(v8);
  int32x2_t v10 = v8[4];
  v20[0] = v9;
  v20[1] = v11;
  uint64_t v12 = (*(uint64_t (**)(int32x2_t *))(*(void *)&v10 + 56))(v8 + 4);
  uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v13 = 2096;
  *((void *)v13 + 1) = v12;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  int v21 = v13;
  unsigned int v14 = (unsigned char *)IPC::Encoder::grow(v13, 1uLL, 1);
  if (!v15)
  {
    __break(0xC471u);
    return;
  }
  *unsigned int v14 = a2;
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v13, v20);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v13, a3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a4);
  (*(void (**)(int32x2_t *, IPC::Encoder **, void))(*(void *)&v8[4] + 32))(v8 + 4, &v21, 0);
  unsigned int v17 = v21;
  int v21 = 0;
  if (!v17)
  {
    if (!v7) {
      return;
    }
    goto LABEL_7;
  }
  IPC::Encoder::~Encoder(v17, v16);
  WTF::fastFree(v18, v19);
  if (v7) {
LABEL_7:
  }
    CFRelease(*(CFTypeRef *)&v8[1]);
}

void sub_198ED780C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v15, v16);
  }
  if (v13) {
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  _Unwind_Resume(exception_object);
}

double WebKit::WebChromeClient::eventThrottlingDelay(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  if (*(unsigned __int16 *)(*(void *)(v2 + 48) + 1133) >= 0x100u)
  {
    if (*(_WORD *)(*(void *)(v2 + 48) + 1133)) {
      double v3 = 1.0;
    }
    else {
      double v3 = 0.0;
    }
  }
  else
  {
    double v3 = 0.0;
    if (!*(unsigned char *)(v2 + 1285))
    {
      double v4 = *(double *)(v2 + 1296);
      double v5 = v4 + v4;
      if (v4 + v4 > 1.0) {
        double v5 = 1.0;
      }
      if (v4 > 0.0166666667) {
        double v3 = v5;
      }
      else {
        double v3 = 0.0;
      }
    }
  }
  if (v1) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return v3;
}

uint64_t WebKit::WebChromeClient::deviceOrientation(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v3 = *(unsigned int *)(v2 + 1480);
  CFRelease(*(CFTypeRef *)(v2 + 8));
  return v3;
}

BOOL WebKit::WebChromeClient::shouldUseMouseEventForSelection(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 112) < 2;
}

uint64_t WebKit::WebChromeClient::showDataDetectorsUIForElement(uint64_t a1, uint64_t a2, WebCore::MouseRelatedEvent *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (*(uint64_t (**)(WebCore::MouseRelatedEvent *))(*(void *)a3 + 88))(a3);
  if (v5)
  {
    WebCore::MouseRelatedEvent::locationInRootViewCoordinates(a3);
    float v8 = roundf(v7);
    uint64_t v9 = 0x7FFFFFFFLL;
    uint64_t v10 = 0x80000000;
    if (v8 > -2147500000.0) {
      uint64_t v10 = (int)v8;
    }
    if (v8 < 2147500000.0) {
      uint64_t v9 = v10;
    }
    float v11 = roundf(v6);
    uint64_t v12 = 0x7FFFFFFF00000000;
    unint64_t v13 = 0x8000000000000000;
    if (v11 > -2147500000.0) {
      unint64_t v13 = (unint64_t)(int)v11 << 32;
    }
    if (v11 < 2147500000.0) {
      uint64_t v12 = v13;
    }
    uint64_t v23 = v12 | v9;
    __int16 v25 = 0;
    char v26 = 0;
    int v24 = 16777472;
    uint64_t v14 = *(void *)(*(void *)(a1 + 16) + 8);
    if (v14) {
      uint64_t v15 = v14 - 16;
    }
    else {
      uint64_t v15 = 0;
    }
    CFRetain(*(CFTypeRef *)(v15 + 8));
    WebKit::WebPage::positionInformation((WebKit::WebPage *)v15, (const WebKit::InteractionInformationRequest *)&v23, (uint64_t)v28);
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)(v15 + 32) + 56))(v15 + 32);
    unsigned int v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unsigned int v17 = 2088;
    *((void *)v17 + 1) = v16;
    *((void *)v17 + 66) = (char *)v17 + 16;
    *((void *)v17 + 67) = 512;
    *((void *)v17 + 68) = 0;
    *((void *)v17 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
    *((void *)v17 + 69) = 0;
    IPC::Encoder::encodeHeader(v17);
    uint64_t v27 = v17;
    IPC::ArgumentCoder<WebKit::InteractionInformationAtPosition,void>::encode(v17, (uint64_t)v28);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v15 + 32) + 32))(v15 + 32, &v27, 0);
    uint64_t v19 = v27;
    uint64_t v27 = 0;
    if (v19)
    {
      IPC::Encoder::~Encoder(v19, v18);
      WTF::fastFree(v21, v22);
    }
    WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)v28, v18);
    if (v14) {
      CFRelease(*(CFTypeRef *)(v15 + 8));
    }
  }
  return v5;
}

void sub_198ED7B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12, char a13)
{
  if (v14) {
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebChromeClient::relayAccessibilityNotification(uint64_t a1, uint64_t a2, id *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  WebKit::WebPage::relayAccessibilityNotification(v6, a2, a3);
  if (v5)
  {
    float v7 = *(const void **)(v6 + 8);
    CFRelease(v7);
  }
}

void sub_198ED7C20(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebEditorClient::handleKeyboardEvent(WebKit::WebEditorClient *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4) {
      uint64_t v5 = (WebKit::WebPage *)(v4 - 16);
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t result = WebKit::WebPage::handleEditingKeyboardEvent(v5, a2);
  if (result) {
    *((_DWORD *)a2 + 5) |= 0x80u;
  }
  return result;
}

void WebKit::WebEditorClient::handleInputMethodKeydown(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 152)) {
    *(_DWORD *)(a2 + 20) |= 0x80u;
  }
}

uint64_t WebKit::WebEditorClient::hasRichlyEditableSelection(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return WebKit::WebPage::hasRichlyEditableSelection((WebCore::Page **)(v2 - 16));
  }
  else {
    return WebKit::WebPage::hasRichlyEditableSelection(0);
  }
}

uint64_t WebKit::WebEditorClient::getPasteboardItemsCount(WebKit::WebEditorClient *this)
{
  return 0;
}

void WebKit::WebEditorClient::documentFragmentFromDelegate(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::WebEditorClient::performsTwoStepPaste()
{
  return 0;
}

uint64_t WebKit::WebEditorClient::updateStringForFind(WebKit::WebEditorClient *this, const WTF::String *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      uint64_t v2 = v3 - 16;
    }
    else {
      uint64_t v2 = 0;
    }
  }
  uint64_t v5 = (uint64_t *)a2;
  return IPC::MessageSender::send<Messages::WebPageProxy::UpdateStringForFind>(v2 + 32, &v5);
}

uint64_t WebKit::WebEditorClient::overflowScrollPositionChanged(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return WebKit::WebPage::didChangeSelectionOrOverflowScrollPosition((WebCore::Page **)(v2 - 16));
  }
  else {
    return WebKit::WebPage::didChangeSelectionOrOverflowScrollPosition(0);
  }
}

uint64_t WebKit::WebEditorClient::subFrameScrollPositionChanged(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return WebKit::WebPage::didChangeSelectionOrOverflowScrollPosition((WebCore::Page **)(v2 - 16));
  }
  else {
    return WebKit::WebPage::didChangeSelectionOrOverflowScrollPosition(0);
  }
}

uint64_t WebKit::WebEditorClient::shouldAllowSingleClickToChangeSelection(WebKit::WebEditorClient *this, WebCore::Node *a2, const WebCore::VisibleSelection *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4) {
      uint64_t v5 = (WebKit::WebPage *)(v4 - 16);
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  return WebKit::WebPage::shouldAllowSingleClickToChangeSelection(v5, a2, a3);
}

BOOL WebKit::WebEditorClient::shouldSuppressPasswordEcho(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1 && ((uint64_t v2 = *(void *)(v1 + 8)) != 0 ? (v3 = v2 - 16) : (v3 = 0), !*(unsigned char *)(v3 + 1287))) {
    return *(unsigned char *)(v3 + 1484) != 0;
  }
  else {
    return 1;
  }
}

BOOL WebKit::WebEditorClient::shouldRemoveDictationAlternativesAfterEditing(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 4) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(void *)(v2 + 1680) == 0;
}

uint64_t WebKit::WebLocalFrameLoaderClient::forceLayoutOnRestoreFromBackForwardCache(WebKit::WebLocalFrameLoaderClient *this)
{
  return 0;
}

void WebKit::WebLocalFrameLoaderClient::connectionProperties(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::WebLocalFrameLoaderClient::createPreviewLoaderClient@<X0>(WebKit::WebLocalFrameLoaderClient *this@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(*((void *)this + 2) + 24);
  if (v5
    && (uint64_t v6 = *(void *)(v5 + 8)) != 0
    && *(void *)(*(void *)(v6 + 128) + 8) == v6
    && (uint64_t v8 = *(void *)(v6 + 24)) != 0
    && (uint64_t v9 = *(void *)(v8 + 8)) != 0
    && (uint64_t v12 = *(void **)(*(void *)(v9 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v12 + 1368))(v12) & 1) == 0)
    && (uint64_t v13 = *(void *)(v12[2] + 8)) != 0)
  {
    uint64_t v14 = *(void *)(v13 + 24);
    uint64_t v15 = WTF::fastMalloc((WTF *)0x30);
    uint64_t result = WebKit::WebPreviewLoaderClient::WebPreviewLoaderClient(v15, (_DWORD **)a2, (_DWORD **)a3, v14);
  }
  else
  {
    uint64_t result = 0;
  }
  *a4 = result;
  return result;
}

void WebKit::WebDragClient::startDrag(uint64_t a1, CFTypeRef *a2, uint64_t a3, uint64_t a4)
{
  float v7 = (CGImage *)*a2;
  if (*a2) {
    CFRetain(*a2);
  }
  int Width = CGImageGetWidth(v7);
  uint64_t v9 = (CGImage *)*a2;
  if (*a2) {
    CFRetain(*a2);
  }
  int v40 = Width;
  int Height = CGImageGetHeight(v9);
  if (v9)
  {
    CFRelease(v9);
    if (!v7) {
      goto LABEL_7;
    }
  }
  else if (!v7)
  {
    goto LABEL_7;
  }
  CFRelease(v7);
LABEL_7:
  uint64_t v10 = (CGImage *)*a2;
  if (*a2) {
    CFRetain(*a2);
  }
  float v11 = (WebCore *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a4 + 128) + 8) + 56))(*(void *)(*(void *)(a4 + 128) + 8));
  WebCore::screenColorSpace((uint64_t *)&v42, v11, v12);
  uint64_t v13 = (IPC::Encoder *)v42;
  CFTypeRef v42 = 0;
  IntPoint v43 = v13;
  char v44 = 1;
  MEMORY[0x199738D60](&v36, &v40, &v43, 0);
  WebCore::ShareableBitmap::create();
  if (v38)
  {
    CFTypeRef v14 = cf;
    CFTypeRef cf = 0;
    if (v14) {
      CFRelease(v14);
    }
  }
  if (v44)
  {
    uint64_t v15 = v43;
    IntPoint v43 = 0;
    if (v15) {
      CFRelease(v15);
    }
  }
  CFTypeRef v16 = v42;
  CFTypeRef v42 = 0;
  if (v16) {
    CFRelease(v16);
  }
  if (v45)
  {
    WebCore::ShareableBitmap::createGraphicsContext((uint64_t *)&v42, v45);
    unsigned int v17 = (void *)v42;
    if (v42)
    {
      WebCore::LocalCurrentGraphicsContext::LocalCurrentGraphicsContext((WebCore::LocalCurrentGraphicsContext *)&v36, (WebCore::GraphicsContext *)v42);
      uint64_t v18 = (CGContext *)(*(uint64_t (**)(CFTypeRef))(*(void *)v42 + 24))(v42);
      v46.size.width = (double)v40;
      v46.size.height = (double)Height;
      v46.origin.CGFloat x = 0.0;
      v46.origin.y = 0.0;
      CGContextDrawImage(v18, v46, v10);
      uint64_t v19 = v45;
      CGFloat v45 = 0;
      WebCore::LocalCurrentGraphicsContext::~LocalCurrentGraphicsContext((WebCore::LocalCurrentGraphicsContext *)&v36);
      CFTypeRef v20 = v42;
      CFTypeRef v42 = 0;
      if (v20) {
        (*(void (**)(CFTypeRef))(*(void *)v20 + 8))(v20);
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    int v21 = v45;
    CGFloat v45 = 0;
    if (v21) {
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v21, v17);
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  if (v10)
  {
    CFRelease(v10);
    if (!v19) {
      return;
    }
  }
  else if (!v19)
  {
    return;
  }
  WebCore::ShareableBitmap::createHandle();
  if (v39)
  {
    uint64_t v22 = *(void *)(a1 + 8);
    if (v22)
    {
      uint64_t v23 = *(void *)(v22 + 8);
      uint64_t v24 = v23 - 16;
      if (v23) {
        uint64_t v25 = v23 - 16;
      }
      else {
        uint64_t v25 = 0;
      }
      uint64_t v26 = v25 + 795;
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v26 = 795;
    }
    *(unsigned char *)uint64_t v26 = 1;
    uint64_t v28 = *(void *)(v24 + 32);
    uint64_t v27 = v24 + 32;
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(v28 + 56))(v27);
    uint64_t v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v30 = 2107;
    *((void *)v30 + 1) = v29;
    *((void *)v30 + 66) = (char *)v30 + 16;
    *((void *)v30 + 67) = 512;
    *((void *)v30 + 68) = 0;
    *((void *)v30 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
    *((void *)v30 + 69) = 0;
    IPC::Encoder::encodeHeader(v30);
    IntPoint v43 = v30;
    IPC::ArgumentCoder<WebCore::DragItem,void>::encode(v30, (uint64_t)a2);
    IPC::ArgumentCoder<WebCore::ShareableBitmapHandle,void>::encode(v30, (unint64_t)&v36);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v27 + 32))(v27, &v43, 0);
    uint64_t v32 = v43;
    IntPoint v43 = 0;
    if (v32)
    {
      IPC::Encoder::~Encoder(v32, v31);
      WTF::fastFree(v34, v35);
    }
  }
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v36);
  WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v19, v33);
}

void sub_198ED8238(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef a19)
{
  if (a19) {
    (*(void (**)(CFTypeRef))(*(void *)a19 + 8))(a19);
  }
  uint64_t v22 = *(void *)(v20 - 56);
  *(void *)(v20 - 56) = 0;
  if (v22) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v22, a2);
  }
  if (v19) {
    CFRelease(v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebDragClient::didConcludeEditDrag(WebKit::WebDragClient *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return WebKit::WebPage::didConcludeEditDrag((WebKit::WebPage *)(v2 - 16));
  }
  else {
    return WebKit::WebPage::didConcludeEditDrag(0);
  }
}

void WebKit::WebDragClient::declareAndWriteDragImage(WebKit::WebDragClient *this, const WTF::String *a2, WebCore::Element *a3, const WTF::URL *a4, const WTF::String *a5, WebCore::LocalFrame *a6)
{
  uint64_t v6 = *(void *)(*(void *)(*((void *)a3 + 6) + 8) + 544);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7)
    {
      uint64_t v8 = (unsigned int *)(v7 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
      WebCore::Document::editor(*(WebCore::Document **)(v7 + 296));
      uint64_t v9 = WebCore::Frame::pageID((WebCore::Frame *)v7);
      uint64_t v11 = v10;
      uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v12 = &unk_1EE9DC600;
      v12[1] = v9;
      void v12[2] = v11;
      uint64_t v13 = v12;
      WebCore::Pasteboard::createForDragAndDrop();
      WebCore::Editor::writeImageToPasteboard();
      if (v14) {
        (*(void (**)())(*(void *)v14 + 8))();
      }
      if (v13) {
        (*(void (**)(void *))(*v13 + 8))(v13);
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
    }
  }
}

void sub_198ED84C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebFrameNetworkingContext::localFileContentSniffingEnabled(WebKit::WebFrameNetworkingContext *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return *(unsigned char *)(*(void *)(v2 + 136) + 690) & 1;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::WebFrameNetworkingContext::scheduledRunLoopPairs(WebKit::WebFrameNetworkingContext *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0 && (v3 = *(void *)(v2 + 24)) != 0 && (v4 = *(void *)(v3 + 8)) != 0) {
    return *(void *)(v4 + 24);
  }
  else {
    return 0;
  }
}

CFDataRef WebKit::WebFrameNetworkingContext::sourceApplicationAuditData@<X0>(CFDataRef *a1@<X8>)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  CFDataRef v2 = (const __CFData *)WebKit::WebProcess::singleton(void)::process;

  return WebKit::WebProcess::sourceApplicationAuditData(v2, a1);
}

uint64_t WebKit::WebFrameNetworkingContext::sourceApplicationIdentifier@<X0>(void *a1@<X8>)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t result = WebKit::WebProcess::singleton(void)::process;
  uint64_t v3 = *(_DWORD **)(WebKit::WebProcess::singleton(void)::process + 288);
  if (v3) {
    *v3 += 2;
  }
  *a1 = v3;
  return result;
}

uint64_t WebKit::WebFrameNetworkingContext::blockedError(WebKit::WebFrameNetworkingContext *this, const ResourceRequest *a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*((void *)this + 2) + 8) + 280) + 16);
  return (*(uint64_t (**)(uint64_t, const ResourceRequest *))(*(void *)v2 + 576))(v2, a2);
}

uint64_t WebKit::UnifiedPDFPlugin::horizontalOverscrollBehavior(WebKit::UnifiedPDFPlugin *this)
{
  return 2 * ((*((unsigned char *)this + 652) & 0xFD) == 0);
}

uint64_t WebKit::UnifiedPDFPlugin::verticalOverscrollBehavior(WebKit::UnifiedPDFPlugin *this)
{
  return 2 * ((*((unsigned char *)this + 652) & 0xFD) == 0);
}

uint64_t WebKit::UnifiedPDFPlugin::usesAsyncScrolling(WebKit::UnifiedPDFPlugin *this)
{
  return 1;
}

uint64_t WebKit::UnifiedPDFPlugin::isUnifiedPDFPlugin(WebKit::UnifiedPDFPlugin *this)
{
  return 1;
}

uint64_t WebKit::UnifiedPDFPlugin::layerHostingStrategy(WebKit::UnifiedPDFPlugin *this)
{
  return 2;
}

uint64_t WebKit::UnifiedPDFPlugin::drawsFindOverlay(WebKit::UnifiedPDFPlugin *this)
{
  return 0;
}

uint64_t WebKit::WebFrameNetworkingContext::storageSession(WebKit::WebFrameNetworkingContext *this)
{
  return 0;
}

void WebKit::WebFrameNetworkingContext::~WebFrameNetworkingContext(WebKit::WebFrameNetworkingContext *this, void *a2)
{
  *(void *)this = &unk_1EE9DC578;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE9DC578;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  WTF::fastFree(this, a2);
}

BOOL WebCore::FrameNetworkingContext::isValid(WebCore::FrameNetworkingContext *this)
{
  uint64_t v1 = *((void *)this + 2);
  return v1 && *(void *)(v1 + 8) != 0;
}

BOOL WebCore::FrameNetworkingContext::shouldClearReferrerOnHTTPSToHTTPRedirect(WebCore::FrameNetworkingContext *this)
{
  uint64_t v1 = *((void *)this + 2);
  return !v1
      || (uint64_t v2 = *(void *)(v1 + 8)) == 0
      || (*(unsigned int (**)(void))(*(void *)(*(void *)(v2 + 296) + 208) + 8))() == 2;
}

void WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 24 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = v4 + 24 * v11;
      if (*(void *)(v12 + 8) != -1)
      {
        if (*(_OWORD *)v12 == 0)
        {
          uint64_t v15 = v4 + 24 * v11;
          CFTypeRef v16 = *(atomic_uint **)(v15 + 16);
          *(void *)(v15 + 16) = 0;
          if (!v16 || atomic_fetch_add(v16, 0xFFFFFFFF) != 1) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v13 = *a1;
          if (*a1) {
            unsigned int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            unsigned int v14 = 0;
          }
          unsigned int v27 = -1640531527;
          __int16 v28 = 0;
          char v29 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v27, (void *)(v4 + 24 * v11));
          int v17 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27);
          int v18 = 0;
          do
          {
            unsigned int v19 = v17 & v14;
            uint64_t v20 = (_OWORD *)(v13 + 24 * (v17 & v14));
            int v17 = ++v18 + (v17 & v14);
          }
          while (*v20 != 0);
          uint64_t v21 = v13 + 24 * v19;
          uint64_t v24 = *(unsigned int **)(v21 + 16);
          uint64_t v23 = (void *)(v21 + 16);
          uint64_t v22 = v24;
          *uint64_t v23 = 0;
          if (v24 && atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v22);
            WTF::fastFree((WTF *)v22, v8);
          }
          _OWORD *v20 = *(_OWORD *)v12;
          uint64_t v25 = v4 + 24 * v11;
          uint64_t v26 = *(void *)(v25 + 16);
          *(void *)(v25 + 16) = 0;
          *uint64_t v23 = v26;
          CFTypeRef v16 = *(atomic_uint **)(v25 + 16);
          *(void *)(v25 + 16) = 0;
          if (!v16 || atomic_fetch_add(v16, 0xFFFFFFFF) != 1) {
            goto LABEL_24;
          }
        }
        atomic_store(1u, (unsigned int *)v16);
        WTF::fastFree((WTF *)v16, v8);
      }
LABEL_24:
      if (++v11 == v5) {
        goto LABEL_27;
      }
    }
  }
  if (v4)
  {
LABEL_27:
    WTF::fastFree((WTF *)(v4 - 16), v8);
  }
}

void *WTF::NeverDestroyed<WTF::String,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    if (v3 == 1)
    {
      uint64_t v4 = MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v4 = v6;
    }
    *a1 = v4;
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v3);
}

void *std::pair<WTF::String,WTF::RetainPtr<PDFSelection>>::pair[abi:sn180100]<WTF::String,WTF::RetainPtr<PDFSelection>&,0>(void *a1, uint64_t *a2, const void **a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  int v5 = *a3;
  *a1 = v4;
  a1[1] = v5;
  if (v5) {
    CFRetain(v5);
  }
  return a1;
}

void sub_198ED8B9C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *v2;
  *int v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::PagePasteboardContext::isPagePasteboardContext(WebCore::PagePasteboardContext *this)
{
  return 1;
}

uint64_t WebCore::NetworkingContext::scheduledRunLoopPairs(WebCore::NetworkingContext *this)
{
  return 0;
}

void WebCore::NetworkingContext::sourceApplicationIdentifier(void *a1@<X8>)
{
  int v2 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v2 += 2;
  }
  *a1 = v2;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebKit::UnifiedPDFPlugin,WebKit::UnifiedPDFPlugin>(WebCore::TimerBase *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)WebCore::TimerBase::TimerBase(a1) = &unk_1EE9BA5F0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v8 = &unk_1EE9DC5D8;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a2;
  *((void *)a1 + 6) = v8;
  return a1;
}

void sub_198ED8C94(_Unwind_Exception *a1)
{
  WebCore::TimerBase::~TimerBase(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::UnifiedPDFPlugin::*&)(void),WebKit::UnifiedPDFPlugin*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  int v2 = (uint64_t (*)(void *))a1[1];
  unsigned int v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, void *a2)
{
  if (*(_DWORD *)(result + 8))
  {
    if (*(_DWORD *)(result + 12)) {
      *(_DWORD *)(result + 12) = 0;
    }
    int v2 = *(WTF **)result;
    if (*(void *)result)
    {
      *(void *)uint64_t result = 0;
      *(_DWORD *)(result + 8) = 0;
      return WTF::fastFree(v2, a2);
    }
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  int v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198ED8DC8);
    }
    *int v5 = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      uint64_t v7 = (WebKit::WebPageProxyMessageReceiverRegistration *)std::__throw_bad_optional_access[abi:sn180100]();
      WebKit::WebPageProxyMessageReceiverRegistration::~WebPageProxyMessageReceiverRegistration(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198ED8DE8);
    }
    *int v5 = 0;
  }
}

void WebKit::WebPageProxyMessageReceiverRegistration::~WebPageProxyMessageReceiverRegistration(WebKit::WebPageProxyMessageReceiverRegistration *this)
{
  WebKit::WebPageProxyMessageReceiverRegistration::stopReceivingMessages((unsigned __int8 *)this);
  if (*((unsigned char *)this + 16))
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v2) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
    }
  }
}

unsigned __int8 *WebKit::WebPageProxyMessageReceiverRegistration::transferMessageReceivingFrom(WebKit::WebPageProxyMessageReceiverRegistration *this, WebKit::WebPageProxyMessageReceiverRegistration *a2, IPC::MessageReceiver *a3)
{
  if (*((unsigned char *)a2 + 16))
  {
    int v5 = *(unsigned __int8 **)a2;
    uint64_t v6 = *((void *)a2 + 1);
    *((void *)a2 + 1) = 0;
    *((unsigned char *)a2 + 16) = 0;
    IPC::MessageReceiverMap::removeMessageReceiver(v6 + 152, 0xB8u, (uint64_t)v5);
    WebKit::WebPageProxyMessageReceiverRegistration::startReceivingMessages((unsigned __int8 *)this, v6, v5, (uint64_t)a3);
    return (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  }
  else
  {
    return WebKit::WebPageProxyMessageReceiverRegistration::stopReceivingMessages((unsigned __int8 *)this);
  }
}

uint64_t WebKit::WebPageProxyTesting::sendMessage(uint64_t a1, IPC::Encoder **a2, char a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  uint64_t v7 = *(void *)(v6 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v7 + 16), 1u);
  LOBYTE(v11) = 0;
  char v12 = 0;
  uint64_t v8 = WebKit::AuxiliaryProcessProxy::sendMessage(v7, a2, a3, (uint64_t)&v11, 1);
  if (!v12 || (uint64_t v9 = v11, v11 = 0, !v9))
  {
    if (!v7) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  if (v7) {
LABEL_7:
  }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
LABEL_8:
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 - 8));
  }
  return v8;
}

uint64_t WebKit::WebPageProxyTesting::sendMessageWithAsyncReply(uint64_t a1, IPC::Encoder **a2, uint64_t *a3, char a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v7) {
    uint64_t v8 = v7 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
  uint64_t v9 = *(void *)(v8 + 256);
  atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 1u);
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  *a3 = 0;
  v15[0] = v10;
  v15[1] = v11;
  char v16 = 1;
  uint64_t v12 = WebKit::AuxiliaryProcessProxy::sendMessage(v9, a2, a4, (uint64_t)v15, 1);
  if (!v16 || (uint64_t v13 = v15[0], v15[0] = 0, !v13))
  {
    if (!v9) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  if (v9) {
LABEL_7:
  }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v9 + 16));
LABEL_8:
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 - 8));
  }
  return v12;
}

uint64_t WebKit::WebPageProxyTesting::messageSenderConnection(WebKit::WebPageProxyTesting *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 1) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t result = *(void *)(*(void *)(v2 + 256) + 144);
  if (!result)
  {
    uint64_t result = 130;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::WebPageProxyTesting::messageSenderDestinationID(WebKit::WebPageProxyTesting *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 1) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(void *)(*(void *)(v2 + 32) + 1928);
}

IPC::Encoder *WebKit::WebPageProxyTesting::setDefersLoading(WebKit::WebPageProxyTesting *this, char a2)
{
  char v9 = a2;
  uint64_t v3 = (*(uint64_t (**)(WebKit::WebPageProxyTesting *))(*(void *)this + 56))(this);
  int v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v4 = 2130;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v4, &v9);
  (*(void (**)(WebKit::WebPageProxyTesting *, IPC::Encoder **, void))(*(void *)this + 32))(this, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::WebPageProxyTesting::dispatchActivityStateUpdate(WebKit::WebPageProxyTesting *this)
{
  WTF::RunLoop::current(this);
  uint64_t v2 = *(void *)(*((void *)this + 1) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  CFRetain(*(CFTypeRef *)(v3 + 8));
  int v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v4 = &unk_1EE9DCBB0;
  v4[1] = v3;
  uint64_t v6 = (uint64_t)v4;
  WTF::RunLoop::dispatch();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void WebKit::WebPageProxyTesting::setCrossSiteLoadWithLinkDecorationForTesting(uint64_t a1, const WTF::URL *a2, const WTF::URL *a3, char a4, uint64_t *a5)
{
  uint64_t v10 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v10) {
    uint64_t v11 = v10 - 16;
  }
  else {
    uint64_t v11 = 0;
  }
  CFRetain(*(CFTypeRef *)(v11 + 8));
  uint64_t v12 = *(CFTypeRef **)(v11 + 312);
  CFRetain(v12[1]);
  uint64_t v13 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v12);
  atomic_fetch_add((atomic_uint *volatile)(v13 + 16), 1u);
  uint64_t v14 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v14) {
    uint64_t v15 = v14 - 16;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void *)(*(void *)(v15 + 312) + 24);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v21, a2);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v20, a3);
  WebKit::NetworkProcessProxy::setCrossSiteLoadWithLinkDecorationForTesting(v13, v16, (uint64_t)&v21, (uint64_t)&v20, a4, a5);
  int v18 = v20;
  uint64_t v20 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v17);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  unsigned int v19 = v21;
  uint64_t v21 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v17);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v13 + 16));
  CFRelease(v12[1]);
  if (v10) {
    CFRelease(*(CFTypeRef *)(v10 - 8));
  }
}

void WebKit::WebPageProxyTesting::setPermissionLevel(WebKit::WebPageProxyTesting *this, const WTF::String *a2, char a3)
{
  char v9 = a3;
  uint64_t v4 = *(void *)(*((void *)this + 1) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  CFRetain(*(CFTypeRef *)(v5 + 8));
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v6 = &unk_1EE9DCC00;
  v6[1] = a2;
  v6[2] = &v9;
  uint64_t v8 = v6;
  WebKit::WebPageProxy::forEachWebContentProcess((void *)v5, &v8);
  uint64_t v7 = v8;
  uint64_t v8 = 0;
  if (v7) {
    (*(void (**)(void *))(*v7 + 8))(v7);
  }
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 - 8));
  }
}

BOOL WebKit::WebPageProxyTesting::isEditingCommandEnabled(WebKit::WebPageProxyTesting *this, const WTF::String *a2)
{
  uint64_t v5 = *(void *)(*((void *)this + 1) + 8);
  uint64_t v6 = v5 - 16;
  if (!v5) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(v6 + 344);
  if (v7 || (uint64_t v7 = *(void *)(v6 + 328)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v7 + 8));
    char v8 = 0;
    uint64_t v2 = *(void *)(v7 + 280);
    unint64_t v9 = *(void *)(v7 + 272) & 0xFFFFFFFFFFFFFF00;
    uint64_t v10 = *(void *)(v7 + 272);
    uint64_t v5 = *(void *)(*((void *)this + 1) + 8);
    char v11 = 1;
  }
  else
  {
    char v11 = 0;
    uint64_t v10 = 0;
    unint64_t v9 = 0;
    char v8 = 1;
  }
  if (v5) {
    uint64_t v12 = v5 - 16;
  }
  else {
    uint64_t v12 = 0;
  }
  CFRetain(*(CFTypeRef *)(v12 + 8));
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v19;
  *(_DWORD *)&uint64_t v23[3] = *(_DWORD *)&v19[3];
  uint64_t v15 = 0x7FF0000000000000;
  uint64_t v16 = a2;
  v21[0] = v9 | v10;
  v21[1] = v2;
  char v22 = v11;
  v20[0] = &v16;
  v20[1] = &v15;
  WebKit::WebPageProxy::sendToWebPage<IPC::ConnectionSendSyncResult<Messages::WebPageTesting::IsEditingCommandEnabled> WebKit::WebPageProxy::sendSyncToProcessContainingFrame<Messages::WebPageTesting::IsEditingCommandEnabled>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPageTesting::IsEditingCommandEnabled&&,IPC::Timeout const&)::{lambda(Messages::WebPageTesting::IsEditingCommandEnabled&)#1}>(v12, (uint64_t)v21, (uint64_t)v20, (uint64_t)v17);
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 - 8));
  }
  BOOL v13 = 0;
  if (v18 != -1)
  {
    if (!v18) {
      BOOL v13 = v17[8] != 0;
    }
    ((void (*)(void *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14WebPageTesting23IsEditingCommandEnabledEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v18])(v21, v17);
  }
  if ((v8 & 1) == 0) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  return v13;
}

void WebKit::WebPageProxyTesting::dumpPrivateClickMeasurement(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  CFRetain(*(CFTypeRef *)(v5 + 8));
  uint64_t v6 = *(CFTypeRef **)(v5 + 312);
  CFRetain(v6[1]);
  uint64_t v7 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v6);
  char v8 = (unsigned int *)(v7 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v7 + 16), 1u);
  uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v9) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(*(void *)(v10 + 312) + 24);
  uint64_t v12 = &v11;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DumpPrivateClickMeasurement,WTF::CompletionHandler<void ()(WTF::String const&)>>(v7, &v12, a2, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v8);
  CFRelease(v6[1]);
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 - 8));
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DumpPrivateClickMeasurement,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 398;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DCC28;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned int v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void WebKit::WebPageProxyTesting::clearPrivateClickMeasurement(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  CFRetain(*(CFTypeRef *)(v5 + 8));
  uint64_t v6 = *(CFTypeRef **)(v5 + 312);
  CFRetain(v6[1]);
  uint64_t v7 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v6);
  char v8 = (unsigned int *)(v7 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v7 + 16), 1u);
  uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v9) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(*(void *)(v10 + 312) + 24);
  uint64_t v12 = &v11;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearPrivateClickMeasurement,WTF::CompletionHandler<void ()(void)>>(v7, &v12, a2, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v8);
  CFRelease(v6[1]);
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 - 8));
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearPrivateClickMeasurement,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 378;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DCC50;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned int v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void WebKit::WebPageProxyTesting::setPrivateClickMeasurementOverrideTimer(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v6) {
    uint64_t v7 = v6 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  CFRetain(*(CFTypeRef *)(v7 + 8));
  char v8 = *(CFTypeRef **)(v7 + 312);
  CFRetain(v8[1]);
  uint64_t v9 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v8);
  uint64_t v10 = (unsigned int *)(v9 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 1u);
  uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v11) {
    uint64_t v12 = v11 - 16;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(void *)(*(void *)(v12 + 312) + 24);
  uint64_t v14 = &v13;
  char v15 = a2;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementOverrideTimerForTesting,WTF::CompletionHandler<void ()(void)>>(v9, (uint64_t)&v14, a3, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10);
  CFRelease(v8[1]);
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 - 8));
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementOverrideTimerForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 480;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,BOOL>,0ul,1ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DCC78;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned int v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void WebKit::WebPageProxyTesting::markAttributedPrivateClickMeasurementsAsExpired(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  CFRetain(*(CFTypeRef *)(v5 + 8));
  uint64_t v6 = *(CFTypeRef **)(v5 + 312);
  CFRetain(v6[1]);
  uint64_t v7 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v6);
  char v8 = (unsigned int *)(v7 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v7 + 16), 1u);
  uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v9) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(*(void *)(v10 + 312) + 24);
  uint64_t v12 = &v11;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::MarkAttributedPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(v7, &v12, a2, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v8);
  CFRelease(v6[1]);
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 - 8));
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::MarkAttributedPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 427;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DCCA0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned int v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void WebKit::WebPageProxyTesting::setPrivateClickMeasurementEphemeralMeasurement(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v6) {
    uint64_t v7 = v6 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  CFRetain(*(CFTypeRef *)(v7 + 8));
  char v8 = *(CFTypeRef **)(v7 + 312);
  CFRetain(v8[1]);
  uint64_t v9 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v8);
  uint64_t v10 = (unsigned int *)(v9 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 1u);
  uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v11) {
    uint64_t v12 = v11 - 16;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(void *)(*(void *)(v12 + 312) + 24);
  uint64_t v14 = &v13;
  char v15 = a2;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementEphemeralMeasurementForTesting,WTF::CompletionHandler<void ()(void)>>(v9, (uint64_t)&v14, a3, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10);
  CFRelease(v8[1]);
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 - 8));
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementEphemeralMeasurementForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 479;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,BOOL>,0ul,1ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DCCC8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned int v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void WebKit::WebPageProxyTesting::simulatePrivateClickMeasurementSessionRestart(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  CFRetain(*(CFTypeRef *)(v5 + 8));
  uint64_t v6 = *(CFTypeRef **)(v5 + 312);
  CFRetain(v6[1]);
  uint64_t v7 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v6);
  char v8 = (unsigned int *)(v7 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v7 + 16), 1u);
  uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v9) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(*(void *)(v10 + 312) + 24);
  uint64_t v12 = &v11;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SimulatePrivateClickMeasurementSessionRestart,WTF::CompletionHandler<void ()(void)>>(v7, &v12, a2, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v8);
  CFRelease(v6[1]);
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 - 8));
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SimulatePrivateClickMeasurementSessionRestart,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 508;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DCCF0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned int v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void WebKit::WebPageProxyTesting::setPrivateClickMeasurementTokenPublicKeyURL(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v6) {
    uint64_t v7 = v6 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  CFRetain(*(CFTypeRef *)(v7 + 8));
  char v8 = *(CFTypeRef **)(v7 + 312);
  CFRetain(v8[1]);
  uint64_t v9 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v8);
  uint64_t v10 = (unsigned int *)(v9 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 1u);
  uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v11) {
    uint64_t v12 = v11 - 16;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(void *)(*(void *)(v12 + 312) + 24);
  v14[0] = &v13;
  v14[1] = a2;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementTokenPublicKeyURLForTesting,WTF::CompletionHandler<void ()(void)>>(v9, v14, a3, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10);
  CFRelease(v8[1]);
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 - 8));
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementTokenPublicKeyURLForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 481;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DCD18;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned int v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void WebKit::WebPageProxyTesting::setPrivateClickMeasurementTokenSignatureURL(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v6) {
    uint64_t v7 = v6 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  CFRetain(*(CFTypeRef *)(v7 + 8));
  char v8 = *(CFTypeRef **)(v7 + 312);
  CFRetain(v8[1]);
  uint64_t v9 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v8);
  uint64_t v10 = (unsigned int *)(v9 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 1u);
  uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v11) {
    uint64_t v12 = v11 - 16;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(void *)(*(void *)(v12 + 312) + 24);
  v14[0] = &v13;
  v14[1] = a2;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementTokenSignatureURLForTesting,WTF::CompletionHandler<void ()(void)>>(v9, v14, a3, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10);
  CFRelease(v8[1]);
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 - 8));
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementTokenSignatureURLForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 482;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DCD40;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned int v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void WebKit::WebPageProxyTesting::setPrivateClickMeasurementAttributionReportURLs(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v8) {
    uint64_t v9 = v8 - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  CFRetain(*(CFTypeRef *)(v9 + 8));
  uint64_t v10 = *(CFTypeRef **)(v9 + 312);
  CFRetain(v10[1]);
  uint64_t v11 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v10);
  uint64_t v12 = (unsigned int *)(v11 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v11 + 16), 1u);
  uint64_t v13 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v13) {
    uint64_t v14 = v13 - 16;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(void *)(*(void *)(v14 + 312) + 24);
  v16[0] = &v15;
  v16[1] = a2;
  v16[2] = a3;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementAttributionReportURLsForTesting,WTF::CompletionHandler<void ()(void)>>(v11, v16, a4, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v12);
  CFRelease(v10[1]);
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 - 8));
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementAttributionReportURLsForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 477;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DCD68;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned int v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void WebKit::WebPageProxyTesting::markPrivateClickMeasurementsAsExpired(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  CFRetain(*(CFTypeRef *)(v5 + 8));
  uint64_t v6 = *(CFTypeRef **)(v5 + 312);
  CFRetain(v6[1]);
  uint64_t v7 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v6);
  uint64_t v8 = (unsigned int *)(v7 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v7 + 16), 1u);
  uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v9) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(*(void *)(v10 + 312) + 24);
  uint64_t v12 = &v11;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::MarkPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(v7, &v12, a2, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v8);
  CFRelease(v6[1]);
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 - 8));
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::MarkPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 428;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DCD90;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned int v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void WebKit::WebPageProxyTesting::setPCMFraudPreventionValues(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v12) {
    uint64_t v13 = v12 - 16;
  }
  else {
    uint64_t v13 = 0;
  }
  CFRetain(*(CFTypeRef *)(v13 + 8));
  uint64_t v14 = *(CFTypeRef **)(v13 + 312);
  CFRetain(v14[1]);
  uint64_t v15 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v14);
  uint64_t v16 = (unsigned int *)(v15 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v15 + 16), 1u);
  uint64_t v17 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v17) {
    uint64_t v18 = v17 - 16;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(void *)(*(void *)(v18 + 312) + 24);
  v20[0] = &v19;
  v20[1] = a2;
  void v20[2] = a3;
  long long v20[3] = a4;
  v20[4] = a5;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPCMFraudPreventionValuesForTesting,WTF::CompletionHandler<void ()(void)>>(v15, v20, a6, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v16);
  CFRelease(v14[1]);
  if (v12) {
    CFRelease(*(CFTypeRef *)(v12 - 8));
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPCMFraudPreventionValuesForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 472;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&>,0ul,1ul,2ul,3ul,4ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DCDB8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void WebKit::WebPageProxyTesting::setPrivateClickMeasurementAppBundleID(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v6) {
    uint64_t v7 = v6 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  CFRetain(*(CFTypeRef *)(v7 + 8));
  uint64_t v8 = *(CFTypeRef **)(v7 + 312);
  CFRetain(v8[1]);
  uint64_t v9 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v8);
  uint64_t v10 = (unsigned int *)(v9 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 1u);
  uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v11) {
    uint64_t v12 = v11 - 16;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(void *)(*(void *)(v12 + 312) + 24);
  v14[0] = &v13;
  v14[1] = a2;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementAppBundleIDForTesting,WTF::CompletionHandler<void ()(void)>>(v9, v14, a3, 0, 0, 1);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10);
  CFRelease(v8[1]);
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 - 8));
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrivateClickMeasurementAppBundleIDForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 476;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DCDE0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

IPC::Encoder *WebKit::WebPageProxyTesting::clearNotificationPermissionState(WebKit::WebPageProxyTesting *this)
{
  uint64_t v2 = (*(uint64_t (**)(WebKit::WebPageProxyTesting *))(*(void *)this + 56))(this);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2127;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  (*(void (**)(WebKit::WebPageProxyTesting *, IPC::Encoder **, void))(*(void *)this + 32))(this, &v8, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::WebPageProxyTesting::clearWheelEventTestMonitor(IPC::Encoder *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 1) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(unsigned char *)(v2 + 801) && *(unsigned char *)(v2 + 800))
  {
    uint64_t v3 = this;
    uint64_t v4 = (*(uint64_t (**)(IPC::Encoder *))(*(void *)this + 56))(this);
    uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v5 = 2128;
    *((void *)v5 + 1) = v4;
    *((void *)v5 + 66) = (char *)v5 + 16;
    *((void *)v5 + 67) = 512;
    *((void *)v5 + 68) = 0;
    *((void *)v5 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
    *((void *)v5 + 69) = 0;
    IPC::Encoder::encodeHeader(v5);
    uint64_t v9 = v5;
    (*(void (**)(IPC::Encoder *, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v9, 0);
    this = v9;
    uint64_t v9 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v6);
      return (IPC::Encoder *)WTF::fastFree(v7, v8);
    }
  }
  return this;
}

unsigned int *WebKit::WebPageProxyTesting::setPageScaleFactor(uint64_t a1, uint64_t a2, uint64_t *a3, float a4)
{
  uint64_t v16 = a2;
  float v15 = a4;
  uint64_t v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v6 = 1;
  uint64_t v7 = *a3;
  *a3 = 0;
  *(void *)(v6 + 8) = v7;
  uint64_t v14 = (unsigned int *)v6;
  uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v8) {
    uint64_t v9 = v8 - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  CFRetain(*(CFTypeRef *)(v9 + 8));
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v10 = &unk_1EE9DCE30;
  v10[1] = &v14;
  void v10[2] = &v15;
  v10[3] = &v16;
  uint64_t v13 = v10;
  WebKit::WebPageProxy::forEachWebContentProcess((void *)v9, &v13);
  uint64_t v11 = v13;
  uint64_t v13 = 0;
  if (v11) {
    (*(void (**)(void *))(*v11 + 8))(v11);
  }
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 - 8));
  }
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

uint64_t WebKit::WebPasteboardProxy::webProcessProxyForConnection(WebKit::WebPasteboardProxy *this, IPC::Connection *a2)
{
  uint64_t v4 = (char *)this + 16;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 2, &v14);
  uint64_t v5 = *((void *)this + 2);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v9 = v4;
  uint64_t v10 = v7;
  uint64_t v11 = v7;
  uint64_t v12 = v7;
  uint64_t v13 = v5 + 8 * v6;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    uint64_t result = *(void *)(*(void *)v15 + 8);
    if (*(IPC::Connection **)(result + 144) == a2) {
      return result;
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return 0;
}

void WebKit::WebPermissionControllerProxy::~WebPermissionControllerProxy(WebKit::WebPermissionControllerProxy *this)
{
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(*((void *)this + 2) + 152), 0xBEu);
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(*((void *)this + 2) + 152), 0xBEu);
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);

  WTF::fastFree(this, v3);
}

void WebKit::WebPermissionControllerProxy::query(uint64_t a1, const WebCore::ClientOrigin *a2, unsigned char *a3, uint64_t a4, char a5, int a6, uint64_t *a7)
{
  uint64_t v8 = a3;
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    WebKit::WebProcessProxy::webPage(a4, (uint64_t *)&v50);
    goto LABEL_65;
  }
  uint64_t v11 = a1;
  CGFloat v50 = 0;
  uint64_t v12 = *(atomic_uint **)(a1 + 16);
  atomic_fetch_add(v12 + 4, 1u);
  uint64_t v52 = 1;
  uint64_t v51 = (WebKit::WebProcessProxy **)WTF::fastMalloc((WTF *)8);
  atomic_fetch_add(v12 + 4, 1u);
  *uint64_t v51 = (WebKit::WebProcessProxy *)v12;
  int v14 = ++HIDWORD(v52);
  if (v12) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v12 + 4);
  }
  if (v14)
  {
    int v45 = a6;
    uint64_t v46 = v11;
    int v47 = a7;
    uint64_t v15 = v50;
    uint64_t v16 = v51;
    BOOL v49 = &v51[v14];
    while (1)
    {
      WebKit::WebProcessProxy::pages(*v16, (uint64_t)&v54);
      if (v55) {
        break;
      }
LABEL_28:
      WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v17);
      if (++v16 == v49)
      {
        CGFloat v50 = v15;
        uint64_t v11 = v46;
        a7 = v47;
        a6 = v45;
        goto LABEL_30;
      }
    }
    uint64_t v18 = v54;
    uint64_t v19 = 8 * v55;
    uint64_t v20 = (CFTypeRef *)v15;
    while (1)
    {
      uint64_t v15 = *(WebKit::WebPageProxy **)v18;
      uint64_t v21 = (CFTypeRef *)(*(void *)v18 + 8);
      CFRetain(*v21);
      WebKit::WebPageProxy::currentURL(v15, v61);
      MEMORY[0x19972E890](&v58, v61, 0);
      WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness((uint64_t *)&v63, (WebCore::SecurityOriginData *)&v58, v22);
      int v23 = WebCore::operator==();
      if (v66 != -1) {
        ((void (*)(WebKit::WebPageProxy ***, void ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_4[v66])(&v56, &v63);
      }
      LODWORD(v66) = -1;
      char v24 = v58;
      long long v58 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v17);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      uint64_t v25 = (WTF::StringImpl *)v61[0];
      v61[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
        {
          WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v17);
          if (!v23) {
            goto LABEL_24;
          }
          goto LABEL_21;
        }
        *(_DWORD *)v25 -= 2;
      }
      if (!v23) {
        goto LABEL_24;
      }
LABEL_21:
      if (!v20)
      {
        uint64_t v20 = (CFTypeRef *)v15;
        goto LABEL_25;
      }
      if (*((void *)v20[4] + 95) <= *(void *)(*((void *)v15 + 4) + 760))
      {
        uint64_t v21 = v20 + 1;
        uint64_t v20 = (CFTypeRef *)v15;
      }
LABEL_24:
      CFRelease(*v21);
      uint64_t v15 = (WebKit::WebPageProxy *)v20;
LABEL_25:
      uint64_t v18 = (WTF::StringImpl *)((char *)v18 + 8);
      v19 -= 8;
      if (!v19) {
        goto LABEL_28;
      }
    }
  }
LABEL_30:
  if (a6 == 2)
  {
    uint64_t v28 = *(void *)(v11 + 16);
    if (!*(unsigned char *)(v28 + 952)) {
      goto LABEL_64;
    }
    unsigned int v27 = (void **)(v28 + 936);
  }
  else
  {
    if (a6 != 3)
    {
      __break(0xC471u);
      return;
    }
    uint64_t v26 = *(void *)(v11 + 16);
    if (!*(unsigned char *)(v26 + 872)) {
      goto LABEL_64;
    }
    unsigned int v27 = (void **)(v26 + 856);
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v27, &v58);
  char v29 = *v27;
  if (*v27)
  {
    uint64_t v30 = *((unsigned int *)v29 - 1);
    uint64_t v31 = &v29[v30];
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v30 = 0;
  }
  int v63 = v27;
  int v64 = v31;
  float v65 = v31;
  float v66 = v31;
  IntPoint v67 = &v29[v30];
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v63);
  uint64_t v32 = v59;
  if (v59 != v64)
  {
    CGFloat v33 = v50;
    while (1)
    {
      WebKit::WebProcessProxy::pages(*(WebKit::WebProcessProxy **)(*v32 + 8), (uint64_t)&v56);
      if (v57) {
        break;
      }
LABEL_62:
      WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v34);
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v58);
      uint64_t v32 = v59;
      if (v59 == v64)
      {
        CGFloat v50 = v33;
        goto LABEL_64;
      }
    }
    CGFloat v35 = v56;
    uint64_t v36 = 8 * v57;
    uint64_t v37 = (CFTypeRef *)v33;
    while (1)
    {
      CGFloat v33 = *v35;
      char v38 = (CFTypeRef *)((char *)*v35 + 8);
      CFRetain(*v38);
      WebKit::WebPageProxy::currentURL(v33, (uint64_t *)&v53);
      MEMORY[0x19972E890](&v54, &v53, 0);
      WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(v61, (WebCore::SecurityOriginData *)&v54, v39);
      int v40 = WebCore::operator==();
      if (v62 != -1) {
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_4[v62])(&v60, v61);
      }
      int v62 = -1;
      float v41 = v54;
      float v54 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2) {
          WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v34);
        }
        else {
          *(_DWORD *)v41 -= 2;
        }
      }
      CFTypeRef v42 = v53;
      float v53 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
        {
          WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v34);
          if (!v40) {
            goto LABEL_58;
          }
          goto LABEL_55;
        }
        *(_DWORD *)v42 -= 2;
      }
      if (!v40) {
        goto LABEL_58;
      }
LABEL_55:
      if (!v37)
      {
        uint64_t v37 = (CFTypeRef *)v33;
        goto LABEL_59;
      }
      if (*((void *)v37[4] + 95) <= *(void *)(*((void *)v33 + 4) + 760))
      {
        char v38 = v37 + 1;
        uint64_t v37 = (CFTypeRef *)v33;
      }
LABEL_58:
      CFRelease(*v38);
      CGFloat v33 = (WebKit::WebPageProxy *)v37;
LABEL_59:
      ++v35;
      v36 -= 8;
      if (!v36) {
        goto LABEL_62;
      }
    }
  }
LABEL_64:
  WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v13);
  uint64_t v8 = a3;
LABEL_65:
  uint64_t v43 = (uint64_t)v50;
  if (v50)
  {
    WebKit::WebPageProxy::queryPermission((uint64_t)v50, a2, v8, a7);
    CFRelease(*(CFTypeRef *)(v43 + 8));
  }
  else
  {
    uint64_t v44 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v44 + 16))(v44, 258);
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
}

WebKit::WebPreferences *WebKit::WebPreferences::WebPreferences(WebKit::WebPreferences *this, const WebKit::WebPreferences *a2)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9DC6B0;
  *((void *)this + 2) = 0;
  uint64_t v4 = (_DWORD *)*((void *)a2 + 3);
  if (v4) {
    *v4 += 2;
  }
  *((void *)this + 3) = v4;
  uint64_t v5 = (_DWORD *)*((void *)a2 + 4);
  if (v5) {
    *v5 += 2;
  }
  *((void *)this + 4) = v5;
  WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::RobinHoodHashTable((uint64_t)this + 40, (uint64_t *)a2 + 5);
  WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::RobinHoodHashTable((uint64_t)this + 64, (uint64_t *)a2 + 8);
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *(void *)((char *)this + 101) = 0;
  WebKit::WebPreferences::platformInitializeStore(this);
  return this;
}

void WebKit::WebPreferences::~WebPreferences(WebKit::WebPreferences *this, void *a2)
{
  *(void *)this = &unk_1EE9DC6B0;
  uint64_t v3 = (unsigned int **)*((void *)this + 11);
  if (v3) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (WTF *)*((void *)this + 8);
  if (v4) {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v4, (WTF::StringImpl *)*((unsigned int *)this + 18));
  }
  uint64_t v5 = (WTF *)*((void *)this + 5);
  if (v5) {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v5, (WTF::StringImpl *)*((unsigned int *)this + 12));
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
}

{
  uint64_t vars8;

  WebKit::WebPreferences::~WebPreferences(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t *WebKit::WebPreferences::experimentalFeatures(WebKit::WebPreferences *this)
{
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v2 = WebKit::WebPreferences::features(this);
    uint64_t v4 = *(unsigned int *)(v2 + 12);
    if (v4)
    {
      uint64_t v5 = *(uint64_t **)v2;
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *v5;
        if (*v5) {
          CFRetain(*(CFTypeRef *)(v7 + 8));
        }
        int v8 = *(unsigned __int8 *)(v7 + 40);
        CFRelease(*(CFTypeRef *)(v7 + 8));
        if ((v8 - 3) <= 3)
        {
          uint64_t v9 = HIDWORD(v16);
          if (HIDWORD(v16) == v16)
          {
            WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>> const&>((uint64_t)&v15, (unint64_t)v5);
          }
          else
          {
            uint64_t v10 = v15;
            uint64_t v11 = *v5;
            if (*v5) {
              CFRetain(*(CFTypeRef *)(v11 + 8));
            }
            int v12 = HIDWORD(v16);
            *(void *)(v10 + 8 * v9) = v11;
            HIDWORD(v16) = v12 + 1;
          }
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
      uint64_t v13 = v15;
      uint64_t v14 = v16;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    WebKit::WebPreferences::experimentalFeatures(void)::experimentalFeatures = v13;
    qword_1E93CFC40 = v14;
    WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v3);
  }
  return &WebKit::WebPreferences::experimentalFeatures(void)::experimentalFeatures;
}

uint64_t *WebKit::WebPreferences::internalDebugFeatures(WebKit::WebPreferences *this)
{
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v2 = WebKit::WebPreferences::features(this);
    uint64_t v4 = *(unsigned int *)(v2 + 12);
    if (v4)
    {
      uint64_t v5 = *(uint64_t **)v2;
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *v5;
        if (*v5) {
          CFRetain(*(CFTypeRef *)(v7 + 8));
        }
        int v8 = *(unsigned __int8 *)(v7 + 40);
        CFRelease(*(CFTypeRef *)(v7 + 8));
        if ((v8 - 1) <= 1)
        {
          uint64_t v9 = HIDWORD(v16);
          if (HIDWORD(v16) == v16)
          {
            WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>> const&>((uint64_t)&v15, (unint64_t)v5);
          }
          else
          {
            uint64_t v10 = v15;
            uint64_t v11 = *v5;
            if (*v5) {
              CFRetain(*(CFTypeRef *)(v11 + 8));
            }
            int v12 = HIDWORD(v16);
            *(void *)(v10 + 8 * v9) = v11;
            HIDWORD(v16) = v12 + 1;
          }
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
      uint64_t v13 = v15;
      uint64_t v14 = v16;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    WebKit::WebPreferences::internalDebugFeatures(void)::internalDebugFeatures = v13;
    qword_1E93CFC58 = v14;
    WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v3);
  }
  return &WebKit::WebPreferences::internalDebugFeatures(void)::internalDebugFeatures;
}

uint64_t WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>(uint64_t a1, void *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  unsigned int v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    uint64_t v6 = *(void *)a1;
    if (*(void *)a1)
    {
      int v7 = *(_DWORD *)(v6 - 4);
      if (!v7) {
        goto LABEL_22;
      }
      int v8 = 0;
      unsigned int v9 = v7 - 1;
      do
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)(v6 + 8 * v9);
        if ((unint64_t)(v11 + 1) >= 2 && !*(void *)(v11 + 8))
        {
          *(void *)(v6 + 8 * v9) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v11);
            WTF::fastFree((WTF *)v11, a2);
          }
          *(void *)(v6 + 8 * v9) = -1;
          ++v8;
        }
        --v9;
      }
      while (v10);
      uint64_t v6 = *(void *)a1;
      if (v8)
      {
        *(_DWORD *)(v6 - 16) += v8;
        uint64_t v12 = *(void *)a1;
        if (*(void *)a1) {
          int v13 = *(_DWORD *)(v12 - 12);
        }
        else {
          int v13 = 0;
        }
        *(_DWORD *)(v12 - 12) = v13 - v8;
        uint64_t v6 = *(void *)a1;
      }
      if (v6)
      {
        unsigned int v14 = *(_DWORD *)(v6 - 4);
        if (v14 >= 9 && 6 * *(_DWORD *)(v6 - 12) < v14)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v6 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v6)
          {
            unsigned int v16 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
        unsigned int v16 = *(_DWORD *)(v6 - 12);
        int v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + 12) = 2 * v17;
          goto LABEL_28;
        }
LABEL_26:
        int v17 = v16;
        goto LABEL_27;
      }
    }
    unsigned int v16 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v18 = a2[3];
  if (!v18 || !*(void *)(v18 + 8)) {
    return 0;
  }
  uint64_t v22 = a2[3];
  uint64_t v19 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v22);
  if (*(void *)a1)
  {
    uint64_t v20 = *(void *)a1 + 8 * *(unsigned int *)(*(void *)a1 - 4);
    if ((unsigned int **)v20 == v19) {
      return 0;
    }
  }
  else
  {
    if (!v19) {
      return 0;
    }
    uint64_t v20 = 0;
  }
  if ((unsigned int **)v20 != v19) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)a1, v19);
  }
  return 1;
}

void *WebKit::WebPreferences::setBoolValueForKey(WebKit::WebPreferences *this, WTF::StringImpl **a2, const WTF::StringImpl *a3, char a4)
{
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), a2, a3);
  if (result)
  {
    return WebKit::WebPreferences::updateBoolValueForKey(this, a2, a3, a4);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setUInt32ValueForKey(WebKit::WebPreferences *this, WTF::StringImpl **a2, unsigned int a3)
{
  uint64_t result = WebKit::WebPreferencesStore::setUInt32ValueForKey((WebKit::WebPreferences *)((char *)this + 40), a2, a3);
  if (result)
  {
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, a2, a3);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setStringValueForKey(WebKit::WebPreferences *this, WTF::StringImpl **a2, const WTF::StringImpl **a3)
{
  uint64_t result = (void *)WebKit::WebPreferencesStore::setStringValueForKey((WebKit::WebPreferences *)((char *)this + 40), a2, a3);
  if (result)
  {
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, a2, (const WTF::String *)a3);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::deleteKey(WebKit::WebPreferences *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WebKit::WebPreferencesStore::deleteKey((WebKit::WebPreferences *)((char *)this + 40), a2, a3);
  WebKit::WebPreferences::platformDeleteKey((uint64_t)this, a2);

  return WebKit::WebPreferences::update(this);
}

uint64_t WebKit::WebProcessCache::canCacheProcess(WebKit::WebProcessCache *this, WebKit::WebProcessProxy *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)this + 1))
  {
    uint64_t v10 = qword_1EB358370;
    BOOL v11 = os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v11) {
      return result;
    }
    uint64_t v13 = *((void *)a2 + 17);
    if (v13) {
      LODWORD(v13) = *(_DWORD *)(v13 + 108);
    }
    int v23 = 134218240;
    char v24 = this;
    __int16 v25 = 1024;
    int v26 = v13;
    unsigned int v14 = "%p - [PID=%d] WebProcessCache::canCacheProcess: Not caching process because the cache has no capacity";
    goto LABEL_17;
  }
  if (!*((unsigned char *)a2 + 704)) {
    goto LABEL_13;
  }
  unsigned int v4 = (WTF::StringImpl *)*((void *)a2 + 87);
  if (!v4) {
    goto LABEL_13;
  }
  int v5 = *(_DWORD *)v4;
  int v6 = *((_DWORD *)v4 + 1);
  *(_DWORD *)v4 += 2;
  if (!v6)
  {
    if (v5) {
      *(_DWORD *)unsigned int v4 = v5;
    }
    else {
      WTF::StringImpl::destroy(v4, a2);
    }
    goto LABEL_13;
  }
  int v7 = (WTF::MemoryPressureHandler *)MEMORY[0x19972E990](v4, "nullOrigin", 10);
  char v9 = (char)v7;
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 -= 2;
    if (!v7) {
      goto LABEL_19;
    }
LABEL_13:
    uint64_t v10 = qword_1EB358370;
    BOOL v15 = os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v15) {
      return result;
    }
    uint64_t v16 = *((void *)a2 + 17);
    if (v16) {
      LODWORD(v16) = *(_DWORD *)(v16 + 108);
    }
    int v23 = 134218240;
    char v24 = this;
    __int16 v25 = 1024;
    int v26 = v16;
    unsigned int v14 = "%p - [PID=%d] WebProcessCache::canCacheProcess: Not caching process because it does not have an associated registrable domain";
    goto LABEL_17;
  }
  int v7 = (WTF::MemoryPressureHandler *)WTF::StringImpl::destroy(v4, v8);
  if (v9) {
    goto LABEL_13;
  }
LABEL_19:
  uint64_t v17 = WTF::MemoryPressureHandler::singleton(v7);
  int v18 = atomic_load((unsigned __int8 *)(v17 + 4));
  if (v18 == 2 || *(unsigned char *)(v17 + 7))
  {
    uint64_t v10 = qword_1EB358370;
    BOOL v19 = os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v19)
    {
      uint64_t v20 = *((void *)a2 + 17);
      if (v20) {
        LODWORD(v2WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = *(_DWORD *)(v20 + 108);
      }
      int v23 = 134218240;
      char v24 = this;
      __int16 v25 = 1024;
      int v26 = v20;
      unsigned int v14 = "%p - [PID=%d] WebProcessCache::canCacheProcess: Not caching process because we are under memory pressure";
      goto LABEL_17;
    }
  }
  else
  {
    if (*((void *)a2 + 94)) {
      return 1;
    }
    uint64_t v10 = qword_1EB358370;
    BOOL v21 = os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v21)
    {
      uint64_t v22 = *((void *)a2 + 17);
      if (v22) {
        LODWORD(v22) = *(_DWORD *)(v22 + 108);
      }
      int v23 = 134218240;
      char v24 = this;
      __int16 v25 = 1024;
      int v26 = v22;
      unsigned int v14 = "%p - [PID=%d] WebProcessCache::canCacheProcess: Not caching process because this session has been destroyed";
LABEL_17:
      _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v23, 0x12u);
      return 0;
    }
  }
  return result;
}

BOOL WebKit::WebProcessProxy::hasSameGPUAndNetworkProcessPreferencesAs(WebKit::WebProcessProxy *this, WebKit::WebPreferences **a2)
{
  BOOL result = 1;
  if (*((void *)this + 135))
  {
    long long v2 = *(_OWORD *)((char *)this + 1096);
    v6[0] = *(_OWORD *)((char *)this + 1080);
    v6[1] = v2;
    uint64_t v7 = *((void *)this + 139);
    uint64_t v3 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebPreferences,&API::PageConfiguration::Data::createWebPreferences>::get(a2 + 5);
    if (WebKit::updateSharedPreferencesForWebProcess(v6, (WebKit::WebPreferences *)((char *)v3 + 40), v4)) {
      return 0;
    }
  }
  return result;
}

uint64_t WebKit::WebProcessCache::clearAllProcessesForSession(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = a2;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  int v6 = (uint64_t *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
LABEL_6:
    uint64_t v8 = v5 + 16 * v10;
    goto LABEL_7;
  }
  if (!*(_DWORD *)(v5 - 12))
  {
    uint64_t v10 = *(unsigned int *)(v5 - 4);
    unint64_t v9 = v5 + 16 * v10;
    goto LABEL_6;
  }
  uint64_t v7 = v5 + 16 * *(unsigned int *)(v5 - 4);
  *(void *)buf = *(void *)(a1 + 16);
  *(void *)&buf[8] = v7;
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)buf, (uint64_t)a2, a3);
  unint64_t v9 = *(void *)buf;
  uint64_t v8 = *(void *)&buf[8];
  uint64_t v5 = *v6;
LABEL_7:
  uint64_t v44 = (uint64_t *)v9;
  uint64_t v45 = v8;
  if (v5) {
    uint64_t v11 = v5 + 16 * *(unsigned int *)(v5 - 4);
  }
  else {
    uint64_t v11 = 0;
  }
  if (v11 != v9)
  {
    do
    {
      uint64_t v12 = **(void **)(v9 + 8);
      uint64_t v13 = *(void *)(v12 + 752);
      if (!v13 || *(WTF::StringImpl ***)(v13 + 24) == v3)
      {
        unsigned int v14 = qword_1EB358370;
        if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = *(void *)(v12 + 136);
          if (v15) {
            LODWORD(v15) = *(_DWORD *)(v15 + 108);
          }
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = a1;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v15;
          _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::clearAllProcessesForSession: Evicting process because its session was destroyed", buf, 0x12u);
        }
        uint64_t v16 = HIDWORD(v47);
        if (HIDWORD(v47) == v47)
        {
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)&v46, v9);
        }
        else
        {
          uint64_t v17 = v46;
          int v18 = *(WTF::ASCIICaseInsensitiveHash **)v9;
          if (*(void *)v9) {
            *(_DWORD *)v18 += 2;
          }
          v17[v16] = v18;
          HIDWORD(v47) = v16 + 1;
        }
      }
      uint64_t v44 = (uint64_t *)(v9 + 16);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v44, (uint64_t)a2, a3);
      unint64_t v9 = (unint64_t)v44;
    }
    while (v44 != (uint64_t *)v11);
    if (HIDWORD(v47))
    {
      BOOL v19 = v46;
      for (uint64_t i = 8 * HIDWORD(v47); i; i -= 8)
      {
        BOOL v21 = (WTF::StringImpl **)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(v6, v19);
        a2 = v21;
        if (*v6)
        {
          uint64_t v22 = *v6 + 16 * *(unsigned int *)(*v6 - 4);
          if ((WTF::StringImpl **)v22 != v21) {
            goto LABEL_30;
          }
        }
        else if (v21)
        {
          uint64_t v22 = 0;
LABEL_30:
          if ((WTF::StringImpl **)v22 != v21) {
            WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::remove(v6, v21);
          }
        }
        ++v19;
      }
    }
  }
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  char v24 = (uint64_t *)(a1 + 8);
  uint64_t v23 = *(void *)(a1 + 8);
  if (v23)
  {
    uint64_t v25 = *(unsigned int *)(v23 - 4);
    unint64_t v26 = v23 + 16 * v25;
    if (*(_DWORD *)(v23 - 12))
    {
      unint64_t v27 = *(void *)(a1 + 8);
      if (v25)
      {
        uint64_t v28 = 16 * v25;
        unint64_t v27 = *(void *)(a1 + 8);
        while ((unint64_t)(*(void *)v27 + 1) <= 1)
        {
          v27 += 16;
          v28 -= 16;
          if (!v28)
          {
            unint64_t v27 = v26;
            goto LABEL_40;
          }
        }
      }
      goto LABEL_40;
    }
    unint64_t v27 = v23 + 16 * v25;
  }
  else
  {
    unint64_t v27 = 0;
    uint64_t v25 = 0;
  }
  unint64_t v26 = v23 + 16 * v25;
  if (v23)
  {
LABEL_40:
    uint64_t v29 = v23 + 16 * *(unsigned int *)(v23 - 4);
    goto LABEL_45;
  }
  uint64_t v29 = 0;
LABEL_45:
  if (v29 != v27)
  {
    uint64_t v30 = 0;
    unsigned int v31 = 0;
    do
    {
      uint64_t v32 = **(void **)(v27 + 8);
      uint64_t v33 = *(void *)(v32 + 752);
      if (!v33 || *(WTF::StringImpl ***)(v33 + 24) == v3)
      {
        CGFloat v34 = qword_1EB358370;
        if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v35 = *(void *)(v32 + 136);
          if (v35) {
            LODWORD(v35) = *(_DWORD *)(v35 + 108);
          }
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = a1;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v35;
          _os_log_impl(&dword_1985F2000, v34, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::clearAllProcessesForSession: Evicting process because its session was destroyed", buf, 0x12u);
          unsigned int v31 = HIDWORD(v45);
        }
        if (v31 == v45)
        {
          uint64_t v36 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v44, v31 + 1, v27);
          unsigned int v31 = HIDWORD(v45);
          uint64_t v30 = v44;
          uint64_t v37 = &v44[HIDWORD(v45)];
        }
        else
        {
          uint64_t v30 = v44;
          uint64_t v37 = &v44[v31];
          uint64_t v36 = (uint64_t *)v27;
        }
        ++v31;
        *uint64_t v37 = *v36;
        HIDWORD(v45) = v31;
      }
      unint64_t v38 = v27 + 16;
      unint64_t v27 = v26;
      if (v38 != v26)
      {
        unint64_t v27 = v38;
        while ((unint64_t)(*(void *)v27 + 1) <= 1)
        {
          v27 += 16;
          if (v27 == v26)
          {
            unint64_t v27 = v26;
            break;
          }
        }
      }
    }
    while (v27 != v29);
    if (v31)
    {
      uint64_t v39 = 8 * v31;
      while (1)
      {
        uint64_t v40 = *v24;
        float v41 = (WTF::StringImpl **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*v24, *v30);
        a2 = v41;
        if (v40)
        {
          CFTypeRef v42 = (WTF::StringImpl **)(v40 + 16 * *(unsigned int *)(v40 - 4));
          if (v42 != v41) {
            goto LABEL_70;
          }
        }
        else if (v41)
        {
          CFTypeRef v42 = 0;
LABEL_70:
          if (v42 != v41) {
            WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(v24, v41);
          }
        }
        ++v30;
        v39 -= 8;
        if (!v39)
        {
          uint64_t v30 = v44;
          break;
        }
      }
    }
    if (v30)
    {
      uint64_t v44 = 0;
      LODWORD(v45) = 0;
      WTF::fastFree((WTF *)v30, a2);
    }
  }
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, a2);
}

uint64_t WebKit::WebProcessCache::removeProcess(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a2 + 704)) {
    goto LABEL_64;
  }
  unsigned int v4 = *(WTF::StringImpl **)(a2 + 696);
  if (!v4) {
    goto LABEL_64;
  }
  int v5 = *(_DWORD *)v4;
  int v6 = *((_DWORD *)v4 + 1);
  *(_DWORD *)v4 += 2;
  if (!v6)
  {
    if (v5) {
      *(_DWORD *)unsigned int v4 = v5;
    }
    else {
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    }
    goto LABEL_64;
  }
  int v9 = MEMORY[0x19972E990](v4, "nullOrigin", 10);
  char v11 = v9;
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::destroy(v4, v10);
    if (v11)
    {
LABEL_64:
      uint64_t result = 273;
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    *(_DWORD *)v4 -= 2;
    if (v9) {
      goto LABEL_64;
    }
  }
  uint64_t v12 = qword_1EB358370;
  if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a2 + 136);
    if (v13) {
      LODWORD(v13) = *(_DWORD *)(v13 + 108);
    }
    *(_DWORD *)uint64_t v36 = 134218240;
    *(void *)&v36[4] = a1;
    __int16 v37 = 1024;
    int v38 = v13;
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::removeProcess: Evicting process from WebProcess cache because it expired", v36, 0x12u);
  }
  unsigned int v14 = (uint64_t *)(a1 + 16);
  if (*(unsigned char *)(a2 + 704))
  {
    uint64_t v15 = *(WTF::StringImpl **)(a2 + 696);
    if (v15) {
      *(_DWORD *)v15 += 2;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  *(void *)uint64_t v36 = v15;
  uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(a1 + 16), (WTF::ASCIICaseInsensitiveHash **)v36);
  uint64_t v18 = result;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      uint64_t result = WTF::StringImpl::destroy(v15, v17);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v19 = *v14;
  if (*v14) {
    v19 += 16 * *(unsigned int *)(v19 - 4);
  }
  if (v19 != v18)
  {
    uint64_t v20 = *(uint64_t **)(v18 + 8);
    if (*v20 == a2)
    {
      *(void *)(v18 + 8) = 0;
      uint64_t v28 = *v14;
      if (!*v14 || (v28 += 16 * *(unsigned int *)(v28 - 4), v28 != v18))
      {
        if (v28 != v18) {
          WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::remove((uint64_t *)(a1 + 16), (WTF::StringImpl **)v18);
        }
      }
      goto LABEL_56;
    }
  }
  uint64_t v23 = *(uint64_t **)(a1 + 8);
  uint64_t v22 = (uint64_t *)(a1 + 8);
  BOOL v21 = v23;
  if (!v23)
  {
    unint64_t v26 = 0;
    uint64_t v24 = 0;
LABEL_37:
    uint64_t v25 = &v21[2 * v24];
    goto LABEL_38;
  }
  uint64_t v24 = *((unsigned int *)v21 - 1);
  uint64_t v25 = &v21[2 * v24];
  if (!*((_DWORD *)v21 - 3))
  {
    unint64_t v26 = &v21[2 * v24];
    goto LABEL_37;
  }
  unint64_t v26 = v21;
  if (v24)
  {
    uint64_t v27 = 16 * v24;
    unint64_t v26 = v21;
    while ((unint64_t)(*v26 + 1) <= 1)
    {
      v26 += 2;
      v27 -= 16;
      if (!v27)
      {
        unint64_t v26 = v25;
        break;
      }
    }
  }
LABEL_38:
  if (v21) {
    v21 += 2 * *((unsigned int *)v21 - 1);
  }
  if (v21 != v26)
  {
    while (1)
    {
      uint64_t v20 = (uint64_t *)v26[1];
      if (*v20 == a2) {
        break;
      }
      uint64_t v29 = v26 + 2;
      unint64_t v26 = v25;
      if (v29 != v25)
      {
        unint64_t v26 = v29;
        while ((unint64_t)(*v26 + 1) <= 1)
        {
          v26 += 2;
          if (v26 == v25)
          {
            unint64_t v26 = v25;
            break;
          }
        }
      }
      if (v26 == v21) {
        return result;
      }
    }
    v26[1] = 0;
    uint64_t v30 = *v22;
    unsigned int v31 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*v22, *v26);
    if (v30)
    {
      uint64_t v32 = (void *)(v30 + 16 * *(unsigned int *)(v30 - 4));
      if (v32 == v31) {
        goto LABEL_56;
      }
    }
    else
    {
      if (!v31)
      {
LABEL_56:
        if ((a3 & 1) == 0)
        {
          WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v20 + 1));
          WebKit::WebProcessProxy::setIsInProcessCache(*v20, 0, 0);
          uint64_t v33 = *v20;
          uint64_t *v20 = 0;
          if (v33) {
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v33 + 16));
          }
        }
        WebKit::WebProcessCache::CachedProcess::~CachedProcess((WebKit::WebProcessCache::CachedProcess *)v20);
        return WTF::fastFree(v34, v35);
      }
      uint64_t v32 = 0;
    }
    if (v32 != v31) {
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(v22, v31);
    }
    goto LABEL_56;
  }
  return result;
}

uint64_t WebKit::WebProcessCache::CachedProcess::evictionTimerFired(WebKit::WebProcessCache::CachedProcess *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this) {
    atomic_fetch_add((atomic_uint *volatile)(v1 + 16), 1u);
  }
  uint64_t v2 = *(void *)(*(void *)(v1 + 512) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  unsigned int v4 = *(_DWORD **)(v3 + 768);
  ++*v4;
  WebKit::WebProcessCache::removeProcess((uint64_t)v4, v1, 1);
  if (*v4)
  {
    --*v4;
    return (uint64_t)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v1 + 16));
  }
  else
  {
    uint64_t result = 286;
    __break(0xC471u);
  }
  return result;
}

void WebKit::WebProcessProxy::setIsInProcessCache(uint64_t a1, int a2, char a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v6 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 136);
    if (v7) {
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    }
    *(_DWORD *)buf = 134218496;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v7;
    __int16 v24 = 1024;
    int v25 = a2;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::setIsInProcessCache(%d)", buf, 0x18u);
  }
  if (a2)
  {
    uint64_t v8 = *(void *)(a1 + 552);
    if (v8 && *(_DWORD *)(v8 - 12))
    {
      __break(0xC471u);
      JUMPOUT(0x198EDCEFCLL);
    }
    if (!WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(a1 + 592)))
    {
      __break(0xC471u);
      JUMPOUT(0x198EDCEBCLL);
    }
    if (!WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(a1 + 576)))
    {
      __break(0xC471u);
      JUMPOUT(0x198EDCEDCLL);
    }
    uint64_t v10 = *(WTF::StringImpl ***)(a1 + 544);
    if (v10)
    {
      *(void *)(a1 + 544) = 0;
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v9);
    }
  }
  *(unsigned char *)(a1 + 712) = a2;
  if ((a3 & 1) == 0)
  {
    char v21 = a2;
    char v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v11 = 2685;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 68) = 0;
    *((void *)v11 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    uint64_t v22 = v11;
    IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v11, &v21);
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v12 = &unk_1EE9DD440;
    uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    *(void *)buf = v12;
    *(void *)&buf[8] = v13;
    buf[16] = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v22, 0, (uint64_t)buf, 1);
    if (buf[16])
    {
      uint64_t v15 = *(void *)buf;
      *(void *)buf = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
    }
    uint64_t v16 = v22;
    uint64_t v22 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v14);
      WTF::fastFree(v19, v20);
    }
    if (*(unsigned char *)(a1 + 712))
    {
      char v17 = 1;
    }
    else
    {
      uint64_t v18 = *(void *)(a1 + 512);
      if (!v18 || !*(void *)(v18 + 8))
      {
        __break(0xC471u);
        JUMPOUT(0x198EDCF1CLL);
      }
      char v17 = 0;
    }
    *(unsigned char *)(a1 + 504) = v17;
    WebKit::WebProcessProxy::WeakOrStrongPtr<WebKit::WebProcessPool>::updateStrongReference(a1 + 504);
    WebKit::WebProcessProxy::updateRuntimeStatistics(a1);
  }
}

void WebKit::WebProcessCache::CachedProcess::~CachedProcess(atomic_uchar **this)
{
  uint64_t v2 = *this;
  if (v2)
  {
    WebKit::WebProcessProxy::setIsInProcessCache((uint64_t)v2, 0, 1);
    WebKit::WebProcessProxy::shutDown(*this);
  }
  this[1] = (atomic_uchar *)&unk_1EE9B3390;
  uint64_t v3 = this[4];
  this[4] = 0;
  if (v3) {
    (*(void (**)(atomic_uchar *))(*(void *)v3 + 8))(v3);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(this + 1));
  unsigned int v4 = *this;
  *this = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v4 + 4);
  }
}

void WebKit::WebProcessProxy::shutDown(atomic_uchar *this)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if ((WebKit::isMainThreadOrCheckDisabled((WebKit *)this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198EDD3ECLL);
  }
  uint64_t v2 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 17);
    if (v3) {
      LODWORD(v3) = *(_DWORD *)(v3 + 108);
    }
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = this;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::shutDown:", buf, 0x12u);
  }
  if (this[712])
  {
    uint64_t v4 = *((void *)this + 64);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5) {
        uint64_t v6 = v5 - 16;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    CFRetain(*(CFTypeRef *)(v6 + 8));
    uint64_t v7 = *(_DWORD **)(v6 + 768);
    ++*v7;
    WebKit::WebProcessCache::removeProcess((uint64_t)v7, (uint64_t)this, 0);
    if (!*v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198EDD40CLL);
    }
    --*v7;
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  WebKit::AuxiliaryProcessProxy::shutDownProcess((WebKit::AuxiliaryProcessProxy *)this);
  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(this + 464));
  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(this + 432));
  std::__optional_destruct_base<WebKit::WebProcessProxy::AudibleMediaActivity,false>::reset[abi:sn180100](this + 968, v8);
  std::__optional_destruct_base<WTF::RefPtr<WTF::RefCounter<WebKit::WebProcessWithMediaStreamingCounterType>::Count,WTF::RawPtrTraits<WTF::RefCounter<WebKit::WebProcessWithMediaStreamingCounterType>::Count>,WTF::DefaultRefDerefTraits<WTF::RefCounter<WebKit::WebProcessWithMediaStreamingCounterType>::Count>>,false>::reset[abi:sn180100](this + 992);
  uint64_t v9 = *((void *)this + 83);
  *((void *)this + 83) = 0;
  if (v9)
  {
    uint64_t v10 = *(uint64_t **)v9;
    uint64_t v11 = *(void *)(v9 + 8) - 1;
    *(void *)(v9 + 8) = v11;
    if (v10)
    {
      uint64_t v12 = *v10;
      if (!*v10) {
        goto LABEL_21;
      }
      char v13 = *(unsigned char *)(v9 + 16);
      *(unsigned char *)(v9 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
      *(unsigned char *)(v9 + 16) = v13;
      if (*(void *)v9) {
        goto LABEL_21;
      }
      uint64_t v11 = *(void *)(v9 + 8);
    }
    if (!v11) {
      MEMORY[0x199740C10](v9, 0x1020C40545B2139);
    }
  }
LABEL_21:
  uint64_t v14 = *((void *)this + 84);
  *((void *)this + 84) = 0;
  if (!v14) {
    goto LABEL_28;
  }
  uint64_t v15 = *(uint64_t **)v14;
  uint64_t v16 = *(void *)(v14 + 8) - 1;
  *(void *)(v14 + 8) = v16;
  if (v15)
  {
    uint64_t v17 = *v15;
    if (!*v15) {
      goto LABEL_28;
    }
    char v18 = *(unsigned char *)(v14 + 16);
    *(unsigned char *)(v14 + 16) = 1;
    (*(void (**)(uint64_t, void))(*(void *)v17 + 16))(v17, 0);
    *(unsigned char *)(v14 + 16) = v18;
    if (*(void *)v14) {
      goto LABEL_28;
    }
    uint64_t v16 = *(void *)(v14 + 8);
  }
  if (!v16) {
    MEMORY[0x199740C10](v14, 0x1020C40545B2139);
  }
LABEL_28:
  WebKit::WebProcessProxy::mainPages(this, (uint64_t)buf);
  if (*(_DWORD *)&buf[12])
  {
    uint64_t v20 = *(CFTypeRef ***)buf;
    uint64_t v21 = 8 * *(unsigned int *)&buf[12];
    do
    {
      uint64_t v22 = *v20++;
      CFRetain(v22[1]);
      WebKit::WebPageProxy::disconnectFramesFromPage((WebKit::WebPageProxy *)v22, v23);
      CFRelease(v22[1]);
      v21 -= 8;
    }
    while (v21);
  }
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v19);
  __int16 v24 = (unsigned int ***)(this + 640);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 80, buf);
  uint64_t v25 = *((void *)this + 80);
  if (v25)
  {
    uint64_t v26 = *(unsigned int *)(v25 - 4);
    uint64_t v27 = v25 + 8 * v26;
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v26 = 0;
  }
  uint64_t v39 = this + 640;
  uint64_t v40 = v27;
  uint64_t v41 = v27;
  uint64_t v42 = v27;
  uint64_t v43 = v25 + 8 * v26;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v39);
  for (uint64_t i = *(void *)&buf[8]; *(void *)&buf[8] != v40; uint64_t i = *(void *)&buf[8])
  {
    uint64_t v30 = *(void *)(*(void *)i + 8);
    if (v30) {
      uint64_t v31 = v30 - 16;
    }
    else {
      uint64_t v31 = 0;
    }
    CFRetain(*(CFTypeRef *)(v31 + 8));
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(v31 + 40, this);
    IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)(this + 152), 0xD3u, *(void *)(v31 + 32));
    if (v30) {
      CFRelease(*(CFTypeRef *)(v30 - 8));
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
  uint64_t v32 = *v24;
  if (*v24)
  {
    *((void *)this + 8WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v32, v28);
    uint64_t v33 = *((void *)this + 80);
    *((_DWORD *)this + 162) = 0;
    if (v33)
    {
      LODWORD(v33) = *(_DWORD *)(v33 - 12);
      if (v33 > 0x7FFFFFFE) {
        LODWORD(v33) = 0x7FFFFFFF;
      }
    }
  }
  else
  {
    LODWORD(v33) = 0;
    *((_DWORD *)this + 162) = 0;
  }
  *((_DWORD *)this + 163) = 2 * v33;
  uint64_t v34 = *((void *)this + 76);
  if (v34)
  {
    *((void *)this + 76) = 0;
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v34, v28);
  }
  uint64_t v35 = *((void *)this + 131);
  if (v35) {
    WebKit::WebLockRegistryProxy::processDidExit(v35);
  }
  uint64_t v36 = *((void *)this + 64);
  if (v36)
  {
    uint64_t v37 = *(void *)(v36 + 8);
    if (v37) {
      int v38 = (CFTypeRef *)(v37 - 16);
    }
    else {
      int v38 = 0;
    }
  }
  else
  {
    int v38 = 0;
  }
  CFRetain(v38[1]);
  WebKit::WebProcessPool::disconnectProcess((WebKit::WebProcessPool *)v38, (WebKit::WebProcessProxy *)this);
  CFRelease(v38[1]);
}

void WebKit::WebProcessPool::create(WebKit::WebProcessPool *this, API::ProcessPoolConfiguration *a2)
{
  WebKit::InitializeWebKit2(this);
  uint64_t v3 = (WebKit::WebProcessPool *)API::Object::newObject(0x3C8uLL, 89);
  WebKit::WebProcessPool::WebProcessPool(v3, this);
}

IPC::Encoder *WebKit::WebProcessPool::updateHiddenPageThrottlingAutoIncreaseLimit(IPC::Encoder *this)
{
  double v5 = (double)(20000 * *(_DWORD *)(*((void *)this + 71) + 8)) / 1000.0;
  uint64_t v1 = *((unsigned int *)this + 21);
  if (v1)
  {
    uint64_t v2 = (IPC::Encoder **)*((void *)this + 9);
    uint64_t v3 = 8 * v1;
    do
    {
      this = *v2;
      uint64_t v4 = *((void *)*v2 + 17);
      if ((v4 && *(unsigned char *)(v4 + 104) || *((void *)this + 18)) && (!*((unsigned char *)this + 389) || *((void *)this + 28)))
      {
        uint64_t v6 = &v5;
        this = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHiddenPageDOMTimerThrottlingIncreaseLimit>((uint64_t)this, &v6);
      }
      ++v2;
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

void WebKit::WebProcessPool::clearAudibleActivity(WebKit::WebProcessPool *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 134217984;
    uint64_t v7 = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::clearAudibleActivity: The number of processes playing audible media is now zero. Releasing UI process assertion.", (uint8_t *)&v6, 0xCu);
  }
  if (*((unsigned char *)this + 824))
  {
    uint64_t v4 = *((void *)this + 102);
    *((void *)this + 102) = 0;
    if (v4) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), v3);
    }
    uint64_t v5 = *((void *)this + 101);
    *((void *)this + 101) = 0;
    if (v5) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 8), v3);
    }
    *((unsigned char *)this + 824) = 0;
  }
}

void WebKit::WebProcessPool::~WebProcessPool(WebKit::WebProcessPool *this)
{
  uint64_t v2 = *((void *)this + 22);
  if (v2)
  {
    {
      uint64_t v3 = WebKit::singleton(void)::singleton;
      if (WebKit::singleton(void)::singleton) {
        uint64_t v3 = *(void *)(WebKit::singleton(void)::singleton + 8);
      }
    }
    else
    {
      uint64_t v3 = 0;
      WebKit::singleton(void)::singleton = 0;
    }
    if (v3 == v2) {
      WebKit::GPUProcessProxy::keepProcessAliveTemporarily((unsigned int *)this);
    }
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 96);
  ++*v4;
  WebKit::WebProcessCache::clear((uint64_t)v4);
  if (!*v4)
  {
    __break(0xC471u);
    JUMPOUT(0x198EDE38CLL);
  }
  --*v4;
  {
    if (dword_1EB35A78C)
    {
      uint64_t v6 = *(void *)WebKit::processPools(void)::processPools;
      uint64_t v7 = *(void *)(*(void *)WebKit::processPools(void)::processPools + 8);
      uint64_t v8 = (WebKit::WebProcessPool *)(v7 - 16);
      BOOL v10 = v7 == 0;
      uint64_t v9 = 0;
      BOOL v10 = !v10 && v8 == this;
      if (v10)
      {
LABEL_20:
        uint64_t v13 = WebKit::processPools(void)::processPools + 8 * v9;
        *(void *)uint64_t v13 = 0;
        if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v6);
          WTF::fastFree((WTF *)v6, v5);
        }
        WTF::VectorMover<false,WTF::WeakRef<WebKit::WebProcessPool,WTF::DefaultWeakPtrImpl>>::move((unsigned int *)(v13 + 8), (unsigned int *)(WebKit::processPools(void)::processPools + 8 * dword_1EB35A78C), (unsigned int **)v13);
        --dword_1EB35A78C;
      }
      else
      {
        while (dword_1EB35A78C - 1 != v9)
        {
          uint64_t v6 = *(void *)(WebKit::processPools(void)::processPools + 8 + 8 * v9);
          uint64_t v11 = *(void *)(v6 + 8);
          ++v9;
          if (v11) {
            BOOL v12 = v11 - 16 == (void)this;
          }
          else {
            BOOL v12 = 0;
          }
          if (v12) {
            goto LABEL_20;
          }
        }
      }
    }
  }
  else
  {
    WebKit::processPools(void)::processPools = 0;
    *(void *)&dword_1EB35A788 = 0;
  }
  IPC::MessageReceiverMap::invalidate((WebKit::WebProcessPool *)((char *)this + 56), v5);
  uint64_t v14 = *((void *)this + 57);
  if (v14)
  {
    uint64_t v15 = *(unsigned int *)(v14 - 4);
    uint64_t v16 = v14 + 24 * v15;
    if (*(_DWORD *)(v14 - 12))
    {
      uint64_t v17 = *((void *)this + 57);
      if (v15)
      {
        uint64_t v18 = 24 * v15;
        uint64_t v17 = *((void *)this + 57);
        while (!*(void *)v17 || *(void *)v17 == -1)
        {
          v17 += 24;
          v18 -= 24;
          if (!v18)
          {
            uint64_t v17 = v16;
            goto LABEL_34;
          }
        }
      }
      goto LABEL_34;
    }
    uint64_t v17 = v14 + 24 * v15;
  }
  else
  {
    uint64_t v17 = 0;
    LODWORD(v15) = 0;
  }
  uint64_t v16 = v14 + 24 * v15;
  if (v14)
  {
LABEL_34:
    uint64_t v20 = v14 + 24 * *(unsigned int *)(v14 - 4);
    goto LABEL_39;
  }
  uint64_t v20 = 0;
LABEL_39:
  while (v17 != v20)
  {
    (*(void (**)(void))(**(void **)(v17 + 16) + 16))(*(void *)(v17 + 16));
    uint64_t v22 = *(void *)(v17 + 16);
    uint64_t v23 = *(unsigned int **)(v22 + 8);
    *(void *)(v22 + 8) = 0;
    if (v23 && atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, v21);
    }
    uint64_t v24 = v17 + 24;
    uint64_t v17 = v16;
    if (v24 != v16)
    {
      uint64_t v17 = v24;
      while (!*(void *)v17 || *(void *)v17 == -1)
      {
        v17 += 24;
        if (v17 == v16)
        {
          uint64_t v17 = v16;
          break;
        }
      }
    }
  }
  WebKit::WebProcessPool::unregisterNotificationObservers(this);
  uint64_t v26 = (unsigned int ***)((char *)this + 664);
  if (!WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)this + 83))
  {
    {
      WebKit::UIGamepadProvider::UIGamepadProvider((WebKit::UIGamepadProvider *)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider);
    }
    WebKit::UIGamepadProvider::processPoolStoppedUsingGamepads((WebKit::UIGamepadProvider *)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider, this);
  }
  while (*((_DWORD *)this + 21))
    WebKit::WebProcessProxy::shutDown(**((atomic_uchar ***)this + 9));
  uint64_t v28 = (WebKit::LinkDecorationFilteringDataObserver *)*((void *)this + 120);
  *((void *)this + 12WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  if (v28) {
    WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v28, v27);
  }
  uint64_t v29 = (WebKit::LinkDecorationFilteringDataObserver *)*((void *)this + 119);
  *((void *)this + 119) = 0;
  if (v29) {
    WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v29, v27);
  }
  uint64_t v30 = (void *)*((void *)this + 117);
  *((void *)this + 117) = 0;
  if (v30) {
    std::default_delete<WebKit::ExtensionCapabilityGranter>::operator()[abi:sn180100]((uint64_t)this + 936, v30);
  }
  WTF::Vector<WTF::RetainPtr<NSObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 920, v30);
  uint64_t v32 = (WTF *)*((void *)this + 113);
  if (v32)
  {
    *((void *)this + 113) = 0;
    *((_DWORD *)this + 228) = 0;
    WTF::fastFree(v32, v31);
  }
  uint64_t v33 = *((void *)this + 112);
  if (v33) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v33, v31);
  }
  uint64_t v34 = (WTF::StringImpl **)*((void *)this + 111);
  if (v34) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v34, (WTF::StringImpl *)v31);
  }
  uint64_t v35 = *((void *)this + 109);
  *(void *)uint64_t v35 = 0;
  if (!*(unsigned char *)(v35 + 16) && !*(void *)(v35 + 8)) {
    MEMORY[0x199740C10]();
  }
  uint64_t v36 = *((void *)this + 108);
  *((void *)this + 108) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  *((void *)this + 104) = &unk_1EE9B3390;
  uint64_t v37 = *((void *)this + 107);
  *((void *)this + 107) = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebProcessPool *)((char *)this + 832));
  if (*((unsigned char *)this + 824))
  {
    uint64_t v39 = *((void *)this + 102);
    *((void *)this + 102) = 0;
    if (v39) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v39 + 8), v38);
    }
    uint64_t v40 = *((void *)this + 101);
    *((void *)this + 101) = 0;
    if (v40) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v40 + 8), v38);
    }
  }
  uint64_t v41 = *((void *)this + 100);
  *(void *)uint64_t v41 = 0;
  if (!*(unsigned char *)(v41 + 16) && !*(void *)(v41 + 8)) {
    MEMORY[0x199740C10]();
  }
  uint64_t v42 = *((void *)this + 99);
  *((void *)this + 99) = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  uint64_t v43 = *((void *)this + 98);
  if (v43)
  {
    uint64_t v44 = *(unsigned int *)(v43 - 4);
    if (v44)
    {
      uint64_t v45 = (uint64_t *)(v43 + 8);
      do
      {
        if (*(v45 - 1) != -1)
        {
          std::unique_ptr<WebCore::PrewarmInformation>::reset[abi:sn180100](v45, 0);
          uint64_t v46 = (WTF::StringImpl *)*(v45 - 1);
          *(v45 - 1) = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2) {
              WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v38);
            }
            else {
              *(_DWORD *)v46 -= 2;
            }
          }
        }
        v45 += 2;
        --v44;
      }
      while (v44);
    }
    WTF::fastFree((WTF *)(v43 - 16), v38);
  }
  uint64_t v47 = *((void *)this + 97);
  if (v47)
  {
    uint64_t v48 = *(unsigned int *)(v47 - 4);
    if (v48)
    {
      uint64_t v49 = *((void *)this + 97);
      do
      {
        CGFloat v50 = *(WTF::StringImpl **)v49;
        if (*(void *)v49 != -1)
        {
          uint64_t v51 = *(void *)(v49 + 8);
          *(void *)(v49 + 8) = 0;
          if (v51)
          {
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v51 + 16));
            CGFloat v50 = *(WTF::StringImpl **)v49;
          }
          *(void *)uint64_t v49 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2) {
              WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v38);
            }
            else {
              *(_DWORD *)v50 -= 2;
            }
          }
        }
        v49 += 16;
        --v48;
      }
      while (v48);
    }
    WTF::fastFree((WTF *)(v47 - 16), v38);
  }
  uint64_t v52 = *((void *)this + 96);
  *((void *)this + 96) = 0;
  if (v52)
  {
    *(void *)(v52 + 24) = &unk_1EE9B3390;
    uint64_t v53 = *(void *)(v52 + 48);
    *(void *)(v52 + 48) = 0;
    if (v53) {
      (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
    }
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v52 + 24));
    uint64_t v54 = *(void *)(v52 + 16);
    if (v54) {
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v54, (WTF::StringImpl *)v38);
    }
    uint64_t v55 = *(void *)(v52 + 8);
    if (v55) {
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v55, v38);
    }
    if (*(_DWORD *)v52)
    {
      *(void *)(v52 + 48) = 0;
      *(_OWORD *)(v52 + 16) = 0u;
      *(_OWORD *)(v52 + 32) = 0u;
      *(_OWORD *)uint64_t v52 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v52, v38);
    }
  }
  int v56 = (WebKit::WebBackForwardCache *)*((void *)this + 95);
  *((void *)this + 95) = 0;
  if (v56)
  {
    WebKit::WebBackForwardCache::~WebBackForwardCache(v56);
    if (*(_DWORD *)v57)
    {
      *(void *)(v57 + 48) = 0;
      *(_OWORD *)(v57 + 16) = 0u;
      *(_OWORD *)(v57 + 32) = 0u;
      *(_OWORD *)uint64_t v57 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v57, v38);
    }
  }
  uint64_t v58 = *((void *)this + 94);
  *(void *)uint64_t v58 = 0;
  if (!*(unsigned char *)(v58 + 16) && !*(void *)(v58 + 8)) {
    MEMORY[0x199740C10]();
  }
  uint64_t v59 = *((void *)this + 93);
  *((void *)this + 93) = 0;
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
  }
  uint64_t v60 = *((void *)this + 92);
  *(void *)uint64_t v60 = 0;
  if (!*(unsigned char *)(v60 + 16) && !*(void *)(v60 + 8)) {
    MEMORY[0x199740C10]();
  }
  uint64_t v61 = *((void *)this + 91);
  *((void *)this + 91) = 0;
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  uint64_t v62 = *((void *)this + 90);
  if (v62)
  {
    uint64_t v63 = *(unsigned int *)(v62 - 4);
    if (v63)
    {
      int v64 = (void *)(v62 + 8);
      do
      {
        if (*(v64 - 1) != -1 && *v64) {
          WTF::fastFree((WTF *)(*v64 - 16), v38);
        }
        v64 += 2;
        --v63;
      }
      while (v63);
    }
    WTF::fastFree((WTF *)(v62 - 16), v38);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 704, v38);
  float v66 = (WTF::StringImpl *)*((void *)this + 87);
  *((void *)this + 87) = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2) {
      WTF::StringImpl::destroy(v66, v65);
    }
    else {
      *(_DWORD *)v66 -= 2;
    }
  }
  IntPoint v67 = (WTF::StringImpl *)*((void *)this + 86);
  *((void *)this + 86) = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2) {
      WTF::StringImpl::destroy(v67, v65);
    }
    else {
      *(_DWORD *)v67 -= 2;
    }
  }
  if (*v26) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v26, v65);
  }
  uint64_t v68 = (WTF::StringImpl **)*((void *)this + 82);
  if (v68) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v68, v65);
  }
  uint64_t v69 = (const void *)*((void *)this + 81);
  *((void *)this + 81) = 0;
  if (v69) {
    CFRelease(v69);
  }
  *((void *)this + 76) = &unk_1EE9B3390;
  uint64_t v70 = *((void *)this + 79);
  *((void *)this + 79) = 0;
  if (v70) {
    (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebProcessPool *)((char *)this + 608));
  *((void *)this + 72) = &unk_1EE9B3390;
  uint64_t v71 = *((void *)this + 75);
  *((void *)this + 75) = 0;
  if (v71) {
    (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebProcessPool *)((char *)this + 576));
  uint64_t v73 = *((void *)this + 71);
  *(void *)uint64_t v73 = 0;
  if (!*(unsigned char *)(v73 + 16) && !*(void *)(v73 + 8)) {
    MEMORY[0x199740C10]();
  }
  uint64_t v74 = *((void *)this + 70);
  *((void *)this + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  if (v74) {
    (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
  }
  uint64_t v75 = *((void *)this + 69);
  *(void *)uint64_t v75 = 0;
  if (!*(unsigned char *)(v75 + 16) && !*(void *)(v75 + 8)) {
    MEMORY[0x199740C10]();
  }
  uint64_t v76 = *((void *)this + 68);
  *((void *)this + 68) = 0;
  if (v76) {
    (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
  }
  uint64_t v77 = *((void *)this + 67);
  *(void *)uint64_t v77 = 0;
  if (!*(unsigned char *)(v77 + 16) && !*(void *)(v77 + 8)) {
    MEMORY[0x199740C10]();
  }
  uint64_t v78 = *((void *)this + 66);
  *((void *)this + 66) = 0;
  if (v78) {
    (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
  }
  float v79 = (WTF::StringImpl *)*((void *)this + 64);
  *((void *)this + 64) = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2) {
      WTF::StringImpl::destroy(v79, v72);
    }
    else {
      *(_DWORD *)v79 -= 2;
    }
  }
  int v80 = (const void *)*((void *)this + 62);
  *((void *)this + 62) = 0;
  if (v80) {
    CFRelease(v80);
  }
  long long v81 = (const void *)*((void *)this + 61);
  *((void *)this + 61) = 0;
  if (v81) {
    CFRelease(v81);
  }
  long long v82 = (const void *)*((void *)this + 60);
  *((void *)this + 6WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  if (v82) {
    CFRelease(v82);
  }
  char v83 = (const void *)*((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v83) {
    CFRelease(v83);
  }
  std::unique_ptr<WebCore::PowerSourceNotifier>::reset[abi:sn180100]((uint64_t *)this + 58, 0);
  uint64_t v85 = *((void *)this + 57);
  if (v85)
  {
    uint64_t v86 = *(unsigned int *)(v85 - 4);
    if (v86)
    {
      uint64_t v87 = (uint64_t *)(v85 + 16);
      do
      {
        if (*(v87 - 2) != -1)
        {
          uint64_t v88 = *v87;
          *uint64_t v87 = 0;
          if (v88) {
            (*(void (**)(uint64_t))(*(void *)v88 + 32))(v88);
          }
        }
        v87 += 3;
        --v86;
      }
      while (v86);
    }
    WTF::fastFree((WTF *)(v85 - 16), v84);
  }
  uint64_t v89 = *((unsigned int *)this + 109);
  if (v89)
  {
    uint64_t v90 = 16 * v89;
    uint64_t v91 = (uint64_t *)(*((void *)this + 53) + 8);
    do
    {
      uint64_t v92 = *v91;
      *uint64_t v91 = 0;
      if (v92) {
        CFRelease(*(CFTypeRef *)(v92 + 8));
      }
      float v93 = (WTF::StringImpl *)*(v91 - 1);
      *(v91 - 1) = 0;
      if (v93)
      {
        if (*(_DWORD *)v93 == 2) {
          WTF::StringImpl::destroy(v93, (WTF::StringImpl *)v84);
        }
        else {
          *(_DWORD *)v93 -= 2;
        }
      }
      v91 += 2;
      v90 -= 16;
    }
    while (v90);
  }
  float v94 = (WTF *)*((void *)this + 53);
  if (v94)
  {
    *((void *)this + 53) = 0;
    *((_DWORD *)this + 108) = 0;
    WTF::fastFree(v94, v84);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 408, v84);
  uint64_t v96 = (WTF::StringImpl **)*((void *)this + 49);
  if (v96) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v96, v95);
  }
  int v97 = (WTF::StringImpl **)*((void *)this + 48);
  if (v97) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v97, v95);
  }
  int v98 = (WTF::StringImpl **)*((void *)this + 47);
  if (v98) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v98, v95);
  }
  uint64_t v99 = (WTF::StringImpl **)*((void *)this + 46);
  if (v99) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v99, v95);
  }
  uint64_t v100 = (WTF::StringImpl **)*((void *)this + 45);
  if (v100) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v100, v95);
  }
  char v101 = (WTF::StringImpl **)*((void *)this + 44);
  if (v101) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v101, v95);
  }
  uint64_t v102 = (WTF::StringImpl **)*((void *)this + 43);
  if (v102) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v102, v95);
  }
  uint64_t v103 = *((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v103) {
    CFRelease(*(CFTypeRef *)(v103 + 8));
  }
  uint64_t v104 = *((void *)this + 40);
  *((void *)this + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  if (v104) {
    CFRelease(*(CFTypeRef *)(v104 + 8));
  }
  uint64_t v105 = *((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v105) {
    (*(void (**)(uint64_t))(*(void *)v105 + 8))(v105);
  }
  uint64_t v106 = (_DWORD *)*((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v106)
  {
    if (v106[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v106 + 8))(v106);
    }
    else {
      --v106[2];
    }
  }
  uint64_t v107 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v107) {
    (*(void (**)(uint64_t))(*(void *)v107 + 8))(v107);
  }
  uint64_t v108 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v108) {
    (*(void (**)(uint64_t))(*(void *)v108 + 8))(v108);
  }
  uint64_t v109 = *((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v109) {
    CFRelease(*(CFTypeRef *)(v109 + 8));
  }
  uint64_t v110 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v110) {
    CFRelease(*(CFTypeRef *)(v110 + 8));
  }
  uint64_t v111 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v111) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v111 + 16));
  }
  uint64_t v112 = (WTF::StringImpl *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2) {
      WTF::StringImpl::destroy(v112, v95);
    }
    else {
      *(_DWORD *)v112 -= 2;
    }
  }
  uint64_t v113 = *((void *)this + 20);
  *((void *)this + 2WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  if (v113) {
    CFRelease(*(CFTypeRef *)(v113 + 8));
  }
  if (*((unsigned char *)this + 152))
  {
    BOOL v114 = (WTF *)*((void *)this + 16);
    if (v114) {
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v114, (WTF::StringImpl *)*((unsigned int *)this + 34));
    }
    int v115 = (WTF *)*((void *)this + 13);
    if (v115) {
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v115, (WTF::StringImpl *)*((unsigned int *)this + 28));
    }
  }
  uint64_t v116 = *((void *)this + 12);
  if (v116)
  {
    uint64_t v117 = *(unsigned int *)(v116 - 4);
    if (v117)
    {
      char v118 = (unsigned int **)(v116 + 8);
      do
      {
        if (*(v118 - 1) != (unsigned int *)-1)
        {
          unsigned int v119 = *v118;
          *char v118 = 0;
          if (v119)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v119, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v119);
              WTF::fastFree((WTF *)v119, v95);
            }
          }
        }
        v118 += 2;
        --v117;
      }
      while (v117);
    }
    WTF::fastFree((WTF *)(v116 - 16), v95);
  }
  long long v120 = (unsigned int *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v120 && atomic_fetch_add((atomic_uint *volatile)v120, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v120);
    WTF::fastFree((WTF *)v120, v95);
  }
  WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v95);
  IPC::MessageReceiverMap::~MessageReceiverMap((WebKit::WebProcessPool *)((char *)this + 56), v121);
  uint64_t v123 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v123) {
    CFRelease(*(CFTypeRef *)(v123 + 8));
  }
  uint64_t v124 = *((void *)this + 5);
  if (v124)
  {
    *(void *)(v124 + 8) = 0;
    long long v125 = (unsigned int *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (v125 && atomic_fetch_add((atomic_uint *volatile)v125, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v125);
      WTF::fastFree((WTF *)v125, v122);
    }
  }
  else
  {
    *((void *)this + 5) = 0;
  }
  *((void *)this + 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v122);
}

{
  uint64_t vars8;

  WebKit::WebProcessPool::~WebProcessPool(this);

  JUMPOUT(0x199740C10);
}

void non-virtual thunk to'WebKit::WebProcessPool::~WebProcessPool(WebKit::WebProcessPool *this)
{
}

{
  WebKit::WebProcessPool::~WebProcessPool((WebKit::WebProcessPool *)((char *)this - 32));
}

{
  uint64_t vars8;

  WebKit::WebProcessPool::~WebProcessPool((WebKit::WebProcessPool *)((char *)this - 16));

  JUMPOUT(0x199740C10);
}

{
  uint64_t vars8;

  WebKit::WebProcessPool::~WebProcessPool((WebKit::WebProcessPool *)((char *)this - 32));

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::WebProcessPool::setInjectedBundleClient(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    uint64_t v3 = (void *)WTF::fastMalloc((WTF *)8);
    *uint64_t v3 = &unk_1EE9DC968;
  }
  uint64_t result = *(void *)(a1 + 200);
  *(void *)(a1 + 20WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v3;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

uint64_t WebKit::WebProcessPool::setHistoryClient(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    uint64_t v3 = (void *)WTF::fastMalloc((WTF *)8);
    *uint64_t v3 = &unk_1EE9DC9D0;
  }
  uint64_t result = *(void *)(a1 + 312);
  *(void *)(a1 + 312) = v3;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

uint64_t WebKit::WebProcessPool::setAutomationClient(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    uint64_t v3 = (void *)WTF::fastMalloc((WTF *)8);
    *uint64_t v3 = &unk_1EE9DC9A0;
  }
  uint64_t result = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = v3;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::FullKeyboardAccessModeChanged>(uint64_t result, char *a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        char v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::FullKeyboardAccessModeChanged>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void WebKit::WebProcessPool::networkProcessDidTerminate(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 <= 5 && ((1 << a3) & 0x33) != 0)
  {
    uint64_t v5 = (void *)(a1 + 208);
    uint64_t v6 = *(void *)(a2 + 136);
    if (v6) {
      uint64_t v7 = *(unsigned int *)(v6 + 108);
    }
    else {
      uint64_t v7 = 0;
    }
    WebKit::WebContextClient::networkProcessDidCrash(v5, a1, v7, a3);
  }
  uint64_t v8 = *(CFTypeRef **)(a1 + 320);
  if (v8)
  {
    CFRetain(v8[1]);
    WebKit::WebAutomationSession::terminate((WebKit::WebAutomationSession *)v8);
    CFRelease(v8[1]);
  }

  WebKit::WebProcessPool::terminateServiceWorkers((CFTypeRef *)a1);
}

void WebKit::WebProcessPool::terminateServiceWorkers(CFTypeRef *this)
{
  CFRetain(this[1]);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  {
    WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
    unk_1EB35A750 = 0;
  }
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v2 = &unk_1EE9DD160;
  v2[1] = &v11;
  BOOL v10 = v2;
  WTF::WeakHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, &v10);
  uint64_t v4 = v10;
  BOOL v10 = 0;
  if (v4) {
    (*(void (**)(void *))(*v4 + 8))(v4);
  }
  if (!HIDWORD(v12))
  {
    WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v3);
LABEL_13:
    CFRelease(this[1]);
    return;
  }
  uint64_t v5 = v11;
  uint64_t v6 = 8 * HIDWORD(v12);
  do
  {
    uint64_t v7 = *v5;
    uint64_t v8 = (atomic_uint *)(*v5 + 16);
    atomic_fetch_add(v8, 1u);
    WebKit::WebProcessProxy::disableRemoteWorkers(v7, 1);
    if (v7) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v8);
    }
    ++v5;
    v6 -= 8;
  }
  while (v6);
  WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v9);
  if (this) {
    goto LABEL_13;
  }
}

uint64_t WebKit::WebProcessPool::gpuProcessExited(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218498;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)uint64_t v29 = 1024;
    *(_DWORD *)&v29[2] = a2;
    __int16 v30 = 2082;
    uint64_t v31 = (uint64_t)WebKit::processTerminationReasonToString();
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::gpuProcessDidExit: PID=%d, reason=%{public}s", buf, 0x1Cu);
  }
  uint64_t v7 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
  }
  if (a3 <= 5 && ((1 << a3) & 0x33) != 0) {
    WebKit::WebContextClient::gpuProcessDidCrash((void *)(a1 + 208), a1, a2, a3);
  }
  uint64_t v25 = a1;
  WTF::Vector<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v26, a1 + 72);
  if (v27)
  {
    char v9 = v26;
    BOOL v10 = &v26[v27];
    do
    {
      uint64_t v11 = *v9;
      uint64_t v12 = (atomic_uint *)((char *)*v9 + 16);
      atomic_fetch_add(v12, 1u);
      uint64_t v13 = qword_1EB358960;
      if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = *((void *)v11 + 17);
        if (v19) {
          int v20 = *(_DWORD *)(v19 + 108);
        }
        else {
          int v20 = 0;
        }
        uint64_t v21 = WebKit::processTerminationReasonToString();
        *(_DWORD *)buf = 134218498;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)uint64_t v29 = 1024;
        *(_DWORD *)&v29[2] = v20;
        __int16 v30 = 2082;
        uint64_t v31 = (uint64_t)v21;
        _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::gpuProcessExited: reason=%{public}s", buf, 0x1Cu);
      }
      *((void *)v11 + 144) = 0;
      WebKit::WebProcessProxy::pages(v11, (uint64_t)buf);
      if (*(_DWORD *)v29)
      {
        uint64_t v15 = *(uint64_t **)buf;
        uint64_t v16 = 8 * *(unsigned int *)v29;
        do
        {
          uint64_t v17 = *v15++;
          CFRetain(*(CFTypeRef *)(v17 + 8));
          WebKit::WebPageProxy::gpuProcessExited(v17);
          CFRelease(*(CFTypeRef *)(v17 + 8));
          v16 -= 8;
        }
        while (v16);
        WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v18);
        if (!v11) {
          goto LABEL_18;
        }
      }
      else
      {
        WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v14);
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v12);
LABEL_18:
      ++v9;
    }
    while (v9 != v10);
  }
  if ((a3 & 0xFE) == 4)
  {
    unsigned int v22 = *(_DWORD *)(v25 + 640) + 1;
    *(_DWORD *)(v25 + 64WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v22;
    if (v22 < 3)
    {
      if ((WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v25 + 608)) & 1) == 0) {
        WTF::RunLoop::TimerBase::start();
      }
    }
    else
    {
      uint64_t v23 = qword_1EB358960;
      if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218496;
        *(void *)&uint8_t buf[4] = v25;
        *(_WORD *)uint64_t v29 = 1024;
        *(_DWORD *)&v29[2] = 2;
        __int16 v30 = 2048;
        uint64_t v31 = 0x403E000000000000;
        _os_log_error_impl(&dword_1985F2000, v23, OS_LOG_TYPE_ERROR, "%p - WebProcessPool::gpuProcessDidExit: GPU Process has crashed more than %u times in the last %g seconds, terminating all WebProcesses", buf, 0x1Cu);
      }
      WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v25 + 608));
      *(_DWORD *)(v25 + 64WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
      WebKit::WebProcessPool::terminateAllWebContentProcesses(v25, 11);
    }
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v8);
}

uint64_t WebKit::WebProcessPool::terminateAllWebContentProcesses(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t v11 = 134217984;
    *(void *)&_DWORD v11[4] = a1;
    _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "%p - WebProcessPool::terminateAllWebContentProcesses", v11, 0xCu);
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v11, a1 + 72);
  if (v12)
  {
    uint64_t v6 = *(unsigned int ***)v11;
    uint64_t v7 = 8 * v12;
    do
    {
      uint64_t v8 = *v6;
      char v9 = (atomic_uint *)(*v6 + 4);
      atomic_fetch_add(v9, 1u);
      WebKit::WebProcessProxy::requestTermination(v8, a2);
      if (v8) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v9);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v5);
}

void WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess(WebKit *a1, const WTF::StringImpl **a2, WebKit::WebsiteDataStore *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  LOBYTE(v9) = a4;
  int v71 = (int)a1;
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  *(void *)buf = a6;
  unsigned int v12 = WebKit::allDataStores(a1);
  uint64_t v13 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v12, buf);
  if (v13)
  {
    uint64_t v70 = v13;
    uint64_t v14 = (uint64_t)CFRetain(*(CFTypeRef *)(v13 + 8));
  }
  else
  {
    WebKit::WebsiteDataStore::defaultDataStore(0, (WebKit::WebsiteDataStore **)buf);
    uint64_t v70 = *(void *)buf;
  }
  uint64_t v15 = &qword_1EB35A000;
  uint64_t v16 = &qword_1EB35A000;
    goto LABEL_127;
  if (dword_1EB35A78C) {
    goto LABEL_6;
  }
  while (2)
  {
    {
      uint64_t v62 = (API::ProcessPoolConfiguration *)API::Object::newObject(0xA8uLL, 90);
      uint64_t v63 = API::ProcessPoolConfiguration::ProcessPoolConfiguration(v62);
      WebKit::InitializeWebKit2(v63);
      int v64 = (WebKit::WebProcessPool *)API::Object::newObject(0x3C8uLL, 89);
      WebKit::WebProcessPool::WebProcessPool(v64, v62);
    }
    if (!(_BYTE)v9) {
      goto LABEL_14;
    }
LABEL_6:
    *(void *)buf = a3;
    {
      WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
    }
    uint64_t v14 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, buf);
    a3 = (WebKit::WebsiteDataStore *)v70;
    if (v14)
    {
      uint64_t v9 = v14;
      atomic_fetch_add((atomic_uint *volatile)(v14 + 16), 1u);
      BOOL isLockdownModeEnabledBySystemIgnoringCaching = *(unsigned char *)(v14 + 779) != 0;
      uint64_t v18 = *(void *)(v14 + 512);
      if (v18)
      {
        char v19 = 0;
        uint64_t v20 = *(void *)(v18 + 8);
        if (v20) {
          uint64_t v15 = (uint64_t *)(v20 - 16);
        }
        else {
          uint64_t v15 = 0;
        }
      }
      else
      {
        char v19 = 0;
        uint64_t v15 = 0;
      }
    }
    else
    {
LABEL_14:
      if (HIBYTE(WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally))
      {
        BOOL isLockdownModeEnabledBySystemIgnoringCaching = (_BYTE)WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally != 0;
      }
      else
      {
        BOOL isLockdownModeEnabledBySystemIgnoringCaching = WebKit::isLockdownModeEnabledBySystemIgnoringCaching((WebKit *)v14);
        WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally = isLockdownModeEnabledBySystemIgnoringCaching | 0x100;
      }
      a3 = (WebKit::WebsiteDataStore *)v70;
      if ((v15[242] & 1) == 0)
      {
        WebKit::processPools(void)::processPools = 0;
        *(void *)&dword_1EB35A788 = 0;
        *((unsigned char *)v15 + 1936) = 1;
        goto LABEL_130;
      }
      if (!*((_DWORD *)v16 + 483)) {
        goto LABEL_130;
      }
      uint64_t v9 = 0;
      uint64_t v21 = *(void *)(*(void *)WebKit::processPools(void)::processPools + 8);
      if (v21) {
        uint64_t v15 = (uint64_t *)(v21 - 16);
      }
      else {
        uint64_t v15 = 0;
      }
      char v19 = 1;
    }
    CFRetain((CFTypeRef)v15[1]);
    uint64_t v72 = (WebKit::WebProcessPool *)v15;
    uint64_t v68 = v9;
    if (*(unsigned char *)(a5 + 32))
    {
      *(void *)buf = *(void *)(a5 + 16);
      {
        WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
      }
      uint64_t v23 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, buf);
      if (v23)
      {
        uint64_t v16 = (uint64_t *)v23;
        uint64_t v24 = (unsigned int *)(v23 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v23 + 16), 1u);
        atomic_fetch_add((atomic_uint *volatile)(v23 + 16), 1u);
        *(void *)buf = WebKit::WebProcessPool::userContentControllerIdentifierForRemoteWorkers((WebKit::WebProcessPool *)v15);
        WebKit::WebProcessProxy::enableRemoteWorkers((uint64_t)v16, v71, (uint64_t *)buf);
        if (!*((unsigned char *)v16 + 712))
        {
LABEL_31:
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v24);
          goto LABEL_71;
        }
        uint64_t v25 = (_DWORD *)v15[96];
        ++*v25;
        WebKit::WebProcessCache::removeProcess((uint64_t)v25, (uint64_t)v16, 0);
        if (*v25)
        {
          --*v25;
          uint64_t v15 = (uint64_t *)v72;
          goto LABEL_31;
        }
LABEL_130:
        __break(0xC471u);
        JUMPOUT(0x198EDF8DCLL);
      }
    }
    if (WebKit::WebProcessPool::s_useSeparateServiceWorkerProcess) {
      char v26 = 1;
    }
    else {
      char v26 = v19;
    }
    if (v26)
    {
      if (WebKit::WebProcessPool::s_useSeparateServiceWorkerProcess) {
        goto LABEL_70;
      }
    }
    else if (a3 == *(WebKit::WebsiteDataStore **)(v9 + 752) && *(unsigned char *)(v9 + 704))
    {
      if (WTF::equal(*(WTF **)(v9 + 696), *a2, v22))
      {
        atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 1u);
        *(void *)buf = WebKit::WebProcessPool::userContentControllerIdentifierForRemoteWorkers((WebKit::WebProcessPool *)v15);
        WebKit::WebProcessProxy::enableRemoteWorkers(v9, v71, (uint64_t *)buf);
        uint64_t v16 = (uint64_t *)v9;
        if (*(unsigned char *)(v9 + 712))
        {
          uint64_t v36 = (_DWORD *)v15[96];
          ++*v36;
          WebKit::WebProcessCache::removeProcess((uint64_t)v36, v9, 0);
          if (!*v36)
          {
            __break(0xC471u);
            JUMPOUT(0x198EDF8FCLL);
          }
          --*v36;
          uint64_t v16 = (uint64_t *)v9;
        }
        goto LABEL_71;
      }
      if (WebKit::WebProcessPool::s_useSeparateServiceWorkerProcess)
      {
LABEL_70:
        uint64_t v16 = 0;
        goto LABEL_71;
      }
    }
    uint64_t v27 = *((unsigned int *)v15 + 21);
    if (!v27) {
      goto LABEL_70;
    }
    uint64_t v9 = (uint64_t)a2;
    uint64_t v28 = (uint64_t **)v15[9];
    uint64_t v29 = 8 * v27;
    while (1)
    {
      uint64_t v16 = *v28;
      a2 = (const WTF::StringImpl **)(*v28 + 2);
      atomic_fetch_add((atomic_uint *volatile)a2, 1u);
      __int16 v30 = (uint64_t *)v15[11];
      if (v30) {
        __int16 v30 = (uint64_t *)v30[1];
      }
      if (v16 == v30 || WebKit::WebProcessProxy::isDummyProcessProxy((WebKit::WebProcessProxy *)v16))
      {
        if (!v16) {
          goto LABEL_49;
        }
        goto LABEL_48;
      }
      if (a3 == (WebKit::WebsiteDataStore *)v16[94]
        && *((unsigned char *)v16 + 704)
        && WTF::equal((WTF *)v16[87], *(const WTF::StringImpl **)v9, v31)
        && ((isLockdownModeEnabledBySystemIgnoringCaching ^ (*((unsigned char *)v16 + 779) != 0)) & 1) == 0)
      {
        break;
      }
LABEL_48:
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)a2);
LABEL_49:
      ++v28;
      v29 -= 8;
      if (!v29)
      {
        uint64_t v16 = 0;
        a2 = (const WTF::StringImpl **)v9;
        goto LABEL_71;
      }
    }
    atomic_fetch_add((atomic_uint *volatile)v16 + 4, 1u);
    *(void *)buf = WebKit::WebProcessPool::userContentControllerIdentifierForRemoteWorkers((WebKit::WebProcessPool *)v15);
    WebKit::WebProcessProxy::enableRemoteWorkers((uint64_t)v16, v71, (uint64_t *)buf);
    if (!*((unsigned char *)v16 + 712)) {
      goto LABEL_57;
    }
    uint64_t v32 = (_DWORD *)v15[96];
    ++*v32;
    WebKit::WebProcessCache::removeProcess((uint64_t)v32, (uint64_t)v16, 0);
    if (!*v32)
    {
      uint64_t v14 = 286;
      __break(0xC471u);
      goto LABEL_126;
    }
    --*v32;
LABEL_57:
    uint64_t v33 = qword_1EB358550;
    if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v34 = "shared";
      if (v71 == 1) {
        uint64_t v34 = "service";
      }
      uint64_t v35 = v16[17];
      if (v35) {
        LODWORD(v35) = *(_DWORD *)(v35 + 108);
      }
      *(_DWORD *)buf = 134218498;
      *(void *)&uint8_t buf[4] = v16;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v34;
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = v35;
      _os_log_impl(&dword_1985F2000, v33, OS_LOG_TYPE_DEFAULT, "WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess reusing an existing web process (process=%p, workerType=%{public}s, PID=%d)", buf, 0x1Cu);
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)a2);
    a2 = (const WTF::StringImpl **)v9;
LABEL_71:
    if (v71 == 1)
    {
      uint64_t v37 = *((void *)a3 + 54);
      if (v37)
      {
        uint64_t v67 = *((void *)a3 + 54);
        CFRetain(*(CFTypeRef *)(v37 + 8));
        float v65 = 0;
        uint64_t v66 = 0;
        uint64_t v38 = *((void *)a3 + 54);
        goto LABEL_79;
      }
    }
    if (*((unsigned char *)v15 + 152))
    {
      uint64_t v14 = (uint64_t)CFRetain((CFTypeRef)v15[1]);
      if (*((unsigned char *)v15 + 152))
      {
        uint64_t v66 = 0;
        uint64_t v67 = 0;
        uint64_t v69 = v15 + 13;
        float v65 = v15;
        if (!v16) {
          goto LABEL_80;
        }
        goto LABEL_83;
      }
      goto LABEL_126;
    }
    uint64_t v66 = v15[23];
    CFRetain(*(CFTypeRef *)(v66 + 8));
    float v65 = 0;
    uint64_t v67 = 0;
    uint64_t v38 = *(void *)(v15[23] + 40);
LABEL_79:
    uint64_t v69 = (uint64_t *)(v38 + 40);
    if (!v16)
    {
LABEL_80:
      if (*a2) {
        *(_DWORD *)*a2 += 2;
      }
      uint64_t v39 = WTF::fastMalloc((WTF *)0x4B8);
      WebKit::WebProcessProxy::WebProcessProxy(v39, (uint64_t)v15, (uint64_t)a3, 0);
    }
LABEL_83:
    uint64_t v40 = *(void *)a7;
    *(void *)a7 = 0;
    uint64_t v41 = v16[22];
    uint64_t v42 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v42 = &unk_1EE9DD0D8;
    v42[1] = v40;
    v42[2] = v41;
    a7 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)a7 = 1;
    *(void *)(a7 + 8) = v42;
    uint64_t v15 = (uint64_t *)WebKit::WebsiteDataStore::networkProcess(a3);
    atomic_fetch_add((atomic_uint *volatile)v15 + 4, 1u);
    atomic_fetch_add((atomic_uint *volatile)a7, 1u);
    uint64_t v43 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v43 = &unk_1EE9DD100;
    v43[1] = a7;
    *(void *)buf = v43;
    WebKit::NetworkProcessProxy::addAllowedFirstPartyForCookies((uint64_t)v15, (uint64_t)v16, a2, 0, (uint64_t *)buf);
    uint64_t v44 = *(void *)buf;
    *(void *)buf = 0;
    if (v44) {
      (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v15 + 4);
    long long v45 = *(_OWORD *)(a5 + 16);
    v75[0] = *(_OWORD *)a5;
    v75[1] = v45;
    v75[2] = *(_OWORD *)(a5 + 32);
    atomic_fetch_add((atomic_uint *volatile)a7, 1u);
    a5 = WTF::fastMalloc((WTF *)0x10);
    *(void *)a5 = &unk_1EE9DD128;
    *(void *)(a5 + 8) = a7;
    if (WebKit::updateSharedPreferencesForWebProcess((unsigned char *)v16 + 1080, (WebKit::WebPreferencesStore *)v69, v46))++v16[135]; {
    uint64_t v47 = qword_1EB358050;
    }
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v48 = v16[17];
      if (v48) {
        LODWORD(v48) = *(_DWORD *)(v48 + 108);
      }
      uint64_t v49 = "shared";
      *(_DWORD *)buf = 134218498;
      *(void *)&uint8_t buf[4] = v16;
      if (v71 == 1) {
        uint64_t v49 = "service";
      }
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v48;
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = v49;
      _os_log_impl(&dword_1985F2000, v47, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::establishRemoteWorkerContext: Started (workerType=%{public}s)", buf, 0x1Cu);
    }
    {
      WebKit::liveProcessesLRU(void)::processes = 0u;
      *(_OWORD *)algn_1EB35A7B8 = 0u;
    }
    uint64_t v14 = WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, (uint64_t)v16);
    if (v71 == 1) {
      CGFloat v50 = v16 + 100;
    }
    else {
      CGFloat v50 = v16 + 110;
    }
    uint64_t v51 = *(void *)(v16[64] + 8);
    if (v51) {
      uint64_t v52 = v51 - 16;
    }
    else {
      uint64_t v52 = 0;
    }
    uint64_t v73 = *(void *)(*(void *)(v52 + 184) + 32);
    if (!*((unsigned char *)v50 + 72))
    {
LABEL_126:
      __break(1u);
LABEL_127:
      WebKit::processPools(void)::processPools = 0;
      *(void *)&dword_1EB35A788 = 0;
      *((unsigned char *)v15 + 1936) = 1;
      continue;
    }
    break;
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v16 + 2, (uint64_t)v16);
  uint64_t v53 = (atomic_uint *)v16[1];
  if (v53) {
    atomic_fetch_add(v53, 1u);
  }
  uint64_t v54 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v54 = 2632;
  *((void *)v54 + 1) = 0;
  *((void *)v54 + 66) = (char *)v54 + 16;
  *((void *)v54 + 67) = 512;
  *((void *)v54 + 68) = 0;
  *((void *)v54 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v54 + 69) = 0;
  IPC::Encoder::encodeHeader(v54);
  uint64_t v74 = v54;
  IPC::ArgumentCoder<JSC::MessageSource,void>::encode<IPC::Encoder>(v54, v71);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v54, &v73);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v54, v50);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v54, v50 + 1);
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(v54, v69);
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(v54, v69 + 3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v54, (uint64_t *)a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&>(v54, (uint64_t)v75);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v54, v50 + 2);
  IPC::VectorArgumentCoder<false,std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v54, (uint64_t)(v50 + 3));
  uint64_t v55 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v55 = &unk_1EE9DD6E8;
  *(void *)(v55 + 8) = v16;
  *(void *)(v55 + 16) = v53;
  *(unsigned char *)(v55 + 24) = v71;
  *(void *)(v55 + 32) = a5;
  uint64_t v56 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)buf = v55;
  *(void *)&buf[8] = v56;
  buf[16] = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)v16, &v74, 0, (uint64_t)buf, 1);
  if (buf[16])
  {
    uint64_t v58 = *(void *)buf;
    *(void *)buf = 0;
    if (v58) {
      (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
    }
  }
  uint64_t v59 = v74;
  uint64_t v74 = 0;
  if (v59)
  {
    IPC::Encoder::~Encoder(v59, v57);
    WTF::fastFree(v60, v61);
  }
  if (*((void *)v72 + 21)) {
    WebKit::WebProcessProxy::setRemoteWorkerUserAgent((uint64_t)v16, (WebKit::WebProcessPool *)((char *)v72 + 168));
  }
  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)a7);
  if (v66) {
    CFRelease(*(CFTypeRef *)(v66 + 8));
  }
  if (v65) {
    CFRelease((CFTypeRef)v65[1]);
  }
  if (v67) {
    CFRelease(*(CFTypeRef *)(v67 + 8));
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v16 + 4);
  CFRelease(*((CFTypeRef *)v72 + 1));
  if (v68) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v68 + 16));
  }
  if (v70) {
    CFRelease(*(CFTypeRef *)(v70 + 8));
  }
}

BOOL WebKit::WebProcessProxy::isDummyProcessProxy(WebKit::WebProcessProxy *this)
{
  uint64_t v1 = *((void *)this + 94);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = *(void *)(*((void *)this + 64) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  return WebKit::WebProcessPool::dummyProcessProxy(v4, *(void *)(v1 + 24)) == (void)this;
}

uint64_t WebKit::WebProcessProxy::setRemoteWorkerUserAgent(uint64_t this, const WTF::String *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 872))
  {
    uint64_t v4 = (uint64_t *)a2;
    this = WebKit::AuxiliaryProcessProxy::send<Messages::WebSWContextManagerConnection::SetUserAgent>(this, &v4, 0, 0);
  }
  if (*(unsigned char *)(v3 + 952))
  {
    uint64_t v4 = (uint64_t *)a2;
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebSharedWorkerContextManagerConnection::SetUserAgent>(v3, &v4, 0, 0);
  }
  return this;
}

WTF::StringImpl *WebKit::WebProcessPool::didReceiveInvalidMessage(WTF::StringImpl *result)
{
  uint64_t v1 = (void (*)(uint64_t))WebKit::s_invalidMessageCallback;
  if (WebKit::s_invalidMessageCallback)
  {
    if (result >= 0xEF4) {
      unsigned int v2 = 3828;
    }
    else {
      unsigned int v2 = result;
    }
    WTF::String::String((WTF::String *)&v6, (&IPC::Detail::messageDescriptions)[3 * v2]);
    API::String::create(&v6, &v7);
    if (v7) {
      uint64_t v3 = *((void *)v7 + 1);
    }
    else {
      uint64_t v3 = 0;
    }
    v1(v3);
    uint64_t v5 = v7;
    uint64_t v7 = 0;
    if (v5) {
      CFRelease(*((CFTypeRef *)v5 + 1));
    }
    uint64_t result = v6;
    uint64_t v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::EnsureAutomationSessionProxy>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2631;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unsigned int v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::WebProcessPool::enableProcessTermination(WebKit::WebProcessPool *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v9 = 134217984;
    *(void *)&_DWORD v9[4] = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::enableProcessTermination:", v9, 0xCu);
  }
  *((unsigned char *)this + 504) = 1;
  WTF::Vector<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v9, (uint64_t)this + 72);
  if (v10)
  {
    uint64_t v4 = *(void **)v9;
    for (uint64_t i = 8 * v10; i; i -= 8)
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (atomic_uint *)(*v4 + 16);
      atomic_fetch_add(v7, 1u);
      if (*((unsigned char *)this + 504) && !*(unsigned char *)(*((void *)this + 6) + 87))
      {
        (*(void (**)(uint64_t))(*(void *)v6 + 80))(v6);
      }
      else if (!v6)
      {
        goto LABEL_11;
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v7);
LABEL_11:
      ++v4;
    }
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v3);
}

void WebKit::WebProcessPool::disableProcessTermination(WebKit::WebProcessPool *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 504))
  {
    unsigned int v2 = qword_1EB358960;
    if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 134217984;
      uint64_t v4 = this;
      _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::disableProcessTermination:", (uint8_t *)&v3, 0xCu);
    }
    *((unsigned char *)this + 504) = 0;
  }
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::StartMemorySampler>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2696;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  unsigned int v12 = v4;
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(v4, *(const char ****)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v4, *(double *)(a2 + 16));
  LOBYTE(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  char v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  uint64_t result = v12;
  unsigned int v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

unsigned int *WebKit::WebProcessPool::disconnectProcess(WebKit::WebProcessPool *this, WebKit::WebProcessProxy *a2)
{
  uint64_t v4 = *((void *)this + 11);
  if (v4 && *(WebKit::WebProcessProxy **)(v4 + 8) == a2)
  {
    *((void *)this + 11) = 0;
LABEL_27:
    if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v4);
      WTF::fastFree((WTF *)v4, a2);
    }
    goto LABEL_29;
  }
  if (WebKit::WebProcessProxy::isDummyProcessProxy(a2))
  {
    uint64_t v5 = (uint64_t *)((char *)this + 96);
    uint64_t v6 = *((void *)this + 12);
    if (v6)
    {
      uint64_t v7 = *(void *)(*((void *)a2 + 94) + 24);
      unsigned int v8 = *(_DWORD *)(v6 - 8);
      unint64_t v9 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
      unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      uint64_t v12 = v8 & ((v11 >> 31) ^ v11);
      uint64_t v13 = *(void *)(v6 + 16 * v12);
      if (v13 != v7)
      {
        int v14 = 1;
        while (v13)
        {
          uint64_t v12 = (v12 + v14) & v8;
          uint64_t v13 = *(void *)(v6 + 16 * v12);
          ++v14;
          if (v13 == v7) {
            goto LABEL_12;
          }
        }
        uint64_t v12 = *(unsigned int *)(v6 - 4);
      }
LABEL_12:
      if (v12 != *(_DWORD *)(v6 - 4))
      {
        uint64_t v15 = (void *)(v6 + 16 * v12);
        uint64_t v4 = v15[1];
        v15[1] = 0;
        uint64_t v16 = *v5;
        if (!*v5 || (v16 += 16 * *(unsigned int *)(v16 - 4), (void *)v16 != v15))
        {
          if ((void *)v16 != v15)
          {
            *uint64_t v15 = -1;
            v15[1] = 0;
            ++*(_DWORD *)(*v5 - 16);
            uint64_t v17 = *v5;
            int v18 = *v5 ? *(_DWORD *)(v17 - 12) - 1 : -1;
            *(_DWORD *)(v17 - 12) = v18;
            uint64_t v19 = *v5;
            if (*v5)
            {
              unsigned int v20 = 6 * *(_DWORD *)(v19 - 12);
              unsigned int v21 = *(_DWORD *)(v19 - 4);
              if (v20 < v21 && v21 >= 9) {
                WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v5, v21 >> 1, 0);
              }
            }
          }
        }
        if (v4) {
          goto LABEL_27;
        }
      }
    }
  }
LABEL_29:
  atomic_fetch_add((atomic_uint *volatile)a2 + 4, 1u);
  uint64_t v23 = (WebKit::WebBackForwardCache *)*((void *)this + 95);
  ++*(_DWORD *)v23;
  WebKit::WebBackForwardCache::removeEntriesForProcess(v23, a2);
  if (!*(_DWORD *)v23)
  {
    __break(0xC471u);
    JUMPOUT(0x198EE0420);
  }
  --*(_DWORD *)v23;
  if (*((unsigned __int8 *)a2 + 952) | *((unsigned __int8 *)a2 + 872)) {
    WebKit::WebProcessProxy::disableRemoteWorkers((uint64_t)a2, 3);
  }
  float v65 = "WebGeolocationManagerProxy";
  uint64_t v66 = 27;
  uint64_t v24 = WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)this + 57, (WTF::ASCIILiteralHash *)&v65);
  if (v24) {
    char v26 = (WebKit::WebGeolocationManagerProxy *)(v24 - 16);
  }
  else {
    char v26 = 0;
  }
  WebKit::WebGeolocationManagerProxy::webProcessIsGoingAway(v26, a2, v25);
  uint64_t v27 = *((unsigned int *)this + 21);
  if (v27)
  {
    uint64_t v28 = (WebKit::WebProcessProxy **)*((void *)this + 9);
    uint64_t v29 = v28 + 1;
    while (*v28 != a2)
    {
      ++v28;
      ++v29;
      if (!--v27) {
        goto LABEL_41;
      }
    }
    *uint64_t v28 = 0;
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)a2 + 4);
    memmove(v28, v28 + 1, *((void *)this + 9) + 8 * *((unsigned int *)this + 21) - (void)v29);
    --*((_DWORD *)this + 21);
  }
LABEL_41:
  if (WTF::WeakHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessProxy>((uint64_t)this + 664, (uint64_t)a2))WebKit::WebProcessPool::processStoppedUsingGamepads(this, a2); {
  uint64_t v31 = *((void *)this + 97);
  }
  if (v31)
  {
    int v32 = *(_DWORD *)(v31 - 4);
    if (v32)
    {
      int v33 = 0;
      uint64_t v34 = (uint64_t *)((char *)this + 776);
      unsigned int v35 = v32 - 1;
      do
      {
        uint64_t v36 = v35;
        uint64_t v37 = (WTF **)(v31 + 16 * v35);
        if ((WTF::equal(*v37, 0, v30) & 1) == 0 && *v37 != (WTF *)-1)
        {
          uint64_t v39 = v31 + 16 * v35;
          uint64_t v41 = *(WebKit::WebProcessProxy **)(v39 + 8);
          uint64_t v40 = (uint64_t *)(v39 + 8);
          if (v41 == a2)
          {
            WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>((WTF::StringImpl **)(v31 + 16 * v35), v38);
            uint64_t v42 = *v40;
            *uint64_t v40 = 0;
            if (v42) {
              WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v42 + 16));
            }
            ++v33;
          }
        }
        --v35;
      }
      while (v36);
      uint64_t v43 = *v34;
      if (v33)
      {
        *(_DWORD *)(v43 - 16) += v33;
        uint64_t v44 = *v34;
        if (*v34) {
          int v45 = *(_DWORD *)(v44 - 12);
        }
        else {
          int v45 = 0;
        }
        *(_DWORD *)(v44 - 12) = v45 - v33;
        uint64_t v43 = *v34;
      }
      if (v43)
      {
        unsigned int v46 = *(_DWORD *)(v43 - 4);
        uint64_t v47 = *(unsigned int *)(v43 - 12);
        if (v46 >= 9 && 6 * (int)v47 < v46)
        {
          unsigned int v49 = (v47 - 1) | ((v47 - 1) >> 1) | (((v47 - 1) | ((v47 - 1) >> 1)) >> 2);
          unsigned int v50 = v49 | (v49 >> 4) | ((v49 | (v49 >> 4)) >> 8);
          unint64_t v51 = (v50 | HIWORD(v50)) + 1;
          if (v51 > 0x400)
          {
            if (v51 > 2 * v47) {
              goto LABEL_68;
            }
          }
          else if (3 * v51 > 4 * v47)
          {
LABEL_66:
            double v52 = (double)v47;
            double v53 = (double)v51;
            double v54 = 0.604166667;
LABEL_69:
            if (v53 * v54 <= v52) {
              LODWORD(v51) = 2 * v51;
            }
            if (v51 <= 8) {
              unsigned int v55 = 8;
            }
            else {
              unsigned int v55 = v51;
            }
            WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash((uint64_t *)this + 97, v55);
            goto LABEL_75;
          }
          LODWORD(v51) = 2 * v51;
          if (v51 <= 0x400) {
            goto LABEL_66;
          }
LABEL_68:
          double v52 = (double)v47;
          double v53 = (double)v51;
          double v54 = 0.416666667;
          goto LABEL_69;
        }
      }
    }
  }
LABEL_75:
  uint64_t v56 = (WebKit *)WebKit::WebProcessPool::extensionCapabilityGranter(this);
  int v64 = (void *)*((void *)a2 + 49);
  *((void *)a2 + 49) = 0;
  uint64_t v57 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(&v64);
  if (v64)
  {
    unsigned int v59 = *((_DWORD *)v64 - 1);
    uint64_t v60 = &v64[3 * v59];
  }
  else
  {
    uint64_t v60 = 0;
    unsigned int v59 = 0;
  }
  float v65 = (const char *)&v64;
  uint64_t v66 = (uint64_t)v57;
  uint64_t v67 = v58;
  uint64_t v68 = v60;
  uint64_t v69 = &v64[3 * v59];
  v70[0] = 0;
  v70[1] = 0;
  WTF::Mapper<WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::moveToVectorOf<WebKit::ExtensionCapabilityGrant,WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WebKit::ExtensionCapabilityGrant>> &>(WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WebKit::ExtensionCapabilityGrant>> &)::{lambda(WebKit::ExtensionCapabilityGrant&&)#1},WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WebKit::ExtensionCapabilityGrant>> &,void>::map((uint64_t)v70, (uint64_t **)&v65);
  WebKit::ExtensionCapabilityGranter::invalidateGrants(v56, (uint64_t)v70);
  WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v70, v61);
  if (v64) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v64, v62);
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)a2 + 4);
}

void WebKit::WebProcessProxy::disableRemoteWorkers(uint64_t a1, char a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if ((a2 & 2) != 0)
  {
    int v4 = *(unsigned __int8 *)(a1 + 952);
    if (*(unsigned char *)(a1 + 952))
    {
      uint64_t v5 = qword_1EB358960;
      if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 136);
        if (v6) {
          LODWORD(v6) = *(_DWORD *)(v6 + 108);
        }
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = a1;
        __int16 v28 = 1024;
        int v29 = v6;
        _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::disableWorkers: Disabling shared workers", buf, 0x12u);
      }
      buf[0] = 0;
      char v30 = 0;
      std::__optional_storage_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>>(a1 + 880, buf);
      std::__optional_destruct_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v7);
      int v4 = 1;
    }
  }
  else
  {
    int v4 = 0;
  }
  if ((a2 & 1) != 0 && *(unsigned char *)(a1 + 872))
  {
    unsigned int v8 = qword_1EB358960;
    if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 136);
      if (v9) {
        LODWORD(v9) = *(_DWORD *)(v9 + 108);
      }
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = a1;
      __int16 v28 = 1024;
      int v29 = v9;
      _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::disableWorkers: Disabling service workers", buf, 0x12u);
      if (!*(unsigned char *)(a1 + 872)) {
        __break(1u);
      }
    }
    IPC::MessageReceiverMap::removeMessageReceiver(a1 + 152, 0x2Du, *(void *)(a1 + 808));
    buf[0] = 0;
    char v30 = 0;
    std::__optional_storage_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>>(a1 + 800, buf);
    std::__optional_destruct_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v10);
  }
  else if (!v4)
  {
    return;
  }
  WebKit::BackgroundProcessResponsivenessTimer::updateState((WebKit::BackgroundProcessResponsivenessTimer *)(a1 + 416));
  if (!*(unsigned char *)(a1 + 952) && !*(unsigned char *)(a1 + 872))
  {
    uint64_t v11 = *(void *)(a1 + 512);
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 8);
      if (v12) {
        uint64_t v13 = v12 - 16;
      }
      else {
        uint64_t v13 = 0;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    CFRetain(*(CFTypeRef *)(v13 + 8));
    {
      WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
      unk_1EB35A750 = 0;
    }
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>((uint64_t)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, (void *)a1);
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  if ((a2 & 2) == 0) {
    goto LABEL_32;
  }
  int v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v14 = 2823;
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 66) = (char *)v14 + 16;
  *((void *)v14 + 67) = 512;
  *((void *)v14 + 68) = 0;
  *((void *)v14 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v14 + 69) = 0;
  IPC::Encoder::encodeHeader(v14);
  char v26 = v14;
  buf[0] = 0;
  BYTE2(v29) = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, 0, (uint64_t)buf, 1);
  if (BYTE2(v29))
  {
    uint64_t v16 = *(void *)buf;
    *(void *)buf = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  uint64_t v17 = v26;
  char v26 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v15);
    WTF::fastFree(v22, v23);
    if (a2)
    {
LABEL_33:
      int v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)int v18 = 2738;
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 66) = (char *)v18 + 16;
      *((void *)v18 + 67) = 512;
      *((void *)v18 + 68) = 0;
      *((void *)v18 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
      *((void *)v18 + 69) = 0;
      IPC::Encoder::encodeHeader(v18);
      char v26 = v18;
      buf[0] = 0;
      BYTE2(v29) = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, 0, (uint64_t)buf, 1);
      if (BYTE2(v29))
      {
        uint64_t v20 = *(void *)buf;
        *(void *)buf = 0;
        if (v20) {
          (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
        }
      }
      unsigned int v21 = v26;
      char v26 = 0;
      if (v21)
      {
        IPC::Encoder::~Encoder(v21, v19);
        WTF::fastFree(v24, v25);
      }
    }
  }
  else
  {
LABEL_32:
    if (a2) {
      goto LABEL_33;
    }
  }
  WebKit::WebProcessProxy::maybeShutDown((WebKit::WebProcessProxy *)a1);
}

uint64_t WebKit::WebProcessPool::processStoppedUsingGamepads(WebKit::WebProcessPool *this, WebKit::WebProcessProxy *a2)
{
  int v4 = (void **)((char *)this + 664);
  BOOL isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)this + 83);
  uint64_t result = WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>((uint64_t)v4, a2);
  if (!isEmptyIgnoringNullReferences)
  {
    uint64_t result = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v4);
    if (result)
    {
      {
        WebKit::UIGamepadProvider::UIGamepadProvider((WebKit::UIGamepadProvider *)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider);
      }
      return WebKit::UIGamepadProvider::processPoolStoppedUsingGamepads((WebKit::UIGamepadProvider *)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider, this);
    }
  }
  return result;
}

uint64_t WebKit::WebProcessPool::tryPrewarmWithDomainInformation(uint64_t this, WebKit::WebProcessProxy *a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  if (this)
  {
    uint64_t v5 = this;
    unsigned int v6 = *(_DWORD *)(this - 8);
    uint64_t v7 = WTF::ASCIICaseInsensitiveHash::hash(*a3, a2) & v6;
    unsigned int v8 = (WTF **)(v5 + 16 * v7);
    this = WTF::equal(*v8, 0, v9);
    if ((this & 1) == 0)
    {
      for (int i = 1; ; ++i)
      {
        if (*v8 != (WTF *)-1)
        {
          this = WTF::equalIgnoringASCIICase(*v8, *a3, v10);
          if (this) {
            break;
          }
        }
        uint64_t v7 = (v7 + i) & v6;
        unsigned int v8 = (WTF **)(v5 + 16 * v7);
        this = WTF::equal(*v8, 0, v10);
        if (this) {
          return this;
        }
      }
      uint64_t v12 = *(void *)(v5 + 16 * v7 + 8);
      if (v12)
      {
        uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v13 = 2649;
        *((void *)v13 + 1) = 0;
        *((void *)v13 + 66) = (char *)v13 + 16;
        *((void *)v13 + 67) = 512;
        *((void *)v13 + 68) = 0;
        *((void *)v13 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
        *((void *)v13 + 69) = 0;
        IPC::Encoder::encodeHeader(v13);
        uint64_t v20 = v13;
        IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v13, v12);
        IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v13, v12 + 16);
        LOBYTE(v18) = 0;
        char v19 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)a2, &v20, 0, (uint64_t)&v18, 1);
        if (v19)
        {
          uint64_t v15 = v18;
          uint64_t v18 = 0;
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          }
        }
        this = (uint64_t)v20;
        uint64_t v20 = 0;
        if (this)
        {
          IPC::Encoder::~Encoder((IPC::Encoder *)this, v14);
          return WTF::fastFree(v16, v17);
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebProcessPool::userContentControllerIdentifierForRemoteWorkers(WebKit::WebProcessPool *this)
{
  unsigned int v2 = (WebKit::WebUserContentControllerProxy *)*((void *)this + 20);
  if (!v2)
  {
    int v3 = (WebKit::WebUserContentControllerProxy *)API::Object::newObject(0x70uLL, 104);
    unsigned int v2 = WebKit::WebUserContentControllerProxy::WebUserContentControllerProxy(v3);
    uint64_t v4 = *((void *)this + 20);
    *((void *)this + 2WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v2;
    if (v4)
    {
      CFRelease(*(CFTypeRef *)(v4 + 8));
      unsigned int v2 = (WebKit::WebUserContentControllerProxy *)*((void *)this + 20);
    }
  }
  return *((void *)v2 + 4);
}

uint64_t WebKit::WebProcessPool::dummyProcessProxy(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((atomic_uint **)(a1 + 96), &v7, (atomic_uint **)&v6);
  int v3 = (unsigned int *)v6;
  if (!v6) {
    return 0;
  }
  uint64_t v4 = *((void *)v6 + 1);
  unsigned int v6 = 0;
  if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
  }
  return v4;
}

uint64_t WebKit::WebProcessPool::pageEndUsingWebsiteDataStore(WebKit::WebProcessPool *this, WebKit::WebPageProxy *a2, WebKit::WebsiteDataStore *a3)
{
  unsigned int v6 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v6) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_40;
  }
  uint64_t v7 = (WTF::StringImpl **)*((void *)a3 + 3);
  if ((unint64_t)v7 - 1 >= 0xFFFFFFFFFFFFFFFELL)
  {
    __break(0xC471u);
    JUMPOUT(0x198EE0D04);
  }
  uint64_t v8 = *((void *)this + 90);
  if (!v8) {
    goto LABEL_38;
  }
  unsigned int v9 = *(_DWORD *)(v8 - 8);
  unint64_t v10 = ((unint64_t)v7 + ~((void)v7 << 32)) ^ (((unint64_t)v7 + ~((void)v7 << 32)) >> 22);
  unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  uint64_t v13 = v9 & ((v12 >> 31) ^ v12);
  int v14 = *(WTF::StringImpl ***)(v8 + 16 * v13);
  if (v14 != v7)
  {
    int v15 = 1;
    while (v14)
    {
      uint64_t v13 = (v13 + v15) & v9;
      int v14 = *(WTF::StringImpl ***)(v8 + 16 * v13);
      ++v15;
      if (v14 == v7) {
        goto LABEL_10;
      }
    }
    uint64_t v13 = *(unsigned int *)(v8 - 4);
  }
LABEL_10:
  if (v13 == *(_DWORD *)(v8 - 4))
  {
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x198EE0D5CLL);
  }
  uint64_t v16 = (void *)(v8 + 16 * v13);
  uint64_t v32 = *(void *)(*((void *)a2 + 4) + 760);
  uint64_t v17 = v16 + 1;
  uint64_t v18 = (void *)WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(v16 + 1, &v32);
  uint64_t v20 = v18;
  uint64_t v21 = v16[1];
  if (v21)
  {
    if ((void *)(v21 + 8 * *(unsigned int *)(v21 - 4)) == v18)
    {
LABEL_16:
      if (*(_DWORD *)(v21 - 12)) {
        goto LABEL_32;
      }
      goto LABEL_19;
    }
  }
  else if (!v18)
  {
    uint64_t v21 = 0;
    goto LABEL_19;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v16 + 1, v18);
  uint64_t v21 = *v17;
  if (*v17) {
    goto LABEL_16;
  }
LABEL_19:
  unsigned int v22 = (uint64_t *)((char *)this + 720);
  uint64_t v23 = (void *)*((void *)this + 90);
  if (!v23 || (v23 += 2 * *((unsigned int *)v23 - 1), v23 != v16))
  {
    if (v23 != v16)
    {
      *uint64_t v16 = -1;
      if (v21) {
        WTF::fastFree((WTF *)(v21 - 16), v20);
      }
      ++*(_DWORD *)(*v22 - 16);
      uint64_t v24 = *v22;
      if (*v22) {
        int v25 = *(_DWORD *)(v24 - 12) - 1;
      }
      else {
        int v25 = -1;
      }
      *(_DWORD *)(v24 - 12) = v25;
      uint64_t v26 = *v22;
      if (*v22)
      {
        unsigned int v27 = 6 * *(_DWORD *)(v26 - 12);
        unsigned int v28 = *(_DWORD *)(v26 - 4);
        if (v27 < v28 && v28 >= 9) {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash((uint64_t *)this + 90, v28 >> 1, 0);
        }
      }
    }
  }
  if (((unint64_t)v7 & 0x8000000000000000) != 0 && v7 != (WTF::StringImpl **)-1)
  {
    uint64_t v31 = (_DWORD *)*((void *)this + 96);
    ++*v31;
    WebKit::WebProcessCache::clearAllProcessesForSession((uint64_t)v31, v7, v19);
    if (*v31)
    {
      --*v31;
      goto LABEL_32;
    }
    __break(0xC471u);
LABEL_40:
    JUMPOUT(0x198EE0CE4);
  }
LABEL_32:
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)a3 + 320, a2);
  return WebKit::WebsiteDataStore::updateServiceWorkerInspectability(a3, v29);
}

BOOL WebKit::WebProcessPool::hasPagesUsingWebsiteDataStore(WebKit::WebProcessPool *this, WebKit::WebsiteDataStore *a2)
{
  uint64_t v4 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v4) & 1) == 0 || (unint64_t)(*((void *)a2 + 3) - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    __break(0xC471u);
    JUMPOUT(0x198EE0DF4);
  }
  uint64_t v6 = *((void *)a2 + 3);
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)this + 90, &v6);
}

void WebKit::WebProcessPool::download(WebKit::WebProcessPool *this@<X0>, WebKit::WebsiteDataStore *a2@<X1>, WebKit::WebPageProxy *a3@<X2>, const String *a4@<X3>, const WTF::String *a5@<X4>, const String **a6@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  __int16 v16 = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)v17);
  char v22 = 0;
  int v23 = 0;
  __int16 v24 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  memset(v21, 0, 25);
  WebKit::WebProcessPool::createDownloadProxy(this, a2, a4, a3, (const WebKit::FrameInfoData *)&v16, (uint64_t)a6);
  uint64_t v13 = (WTF::StringImpl *)v21[0];
  v21[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  if (DWORD2(v20) != -1) {
    ((void (*)(char *, long long *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_4[DWORD2(v20)])(&v15, &v19);
  }
  DWORD2(v2WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = -1;
  int v14 = v18;
  uint64_t v18 = 0;
  if (v14) {
    CFRelease(v14);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v17);
  WebKit::WebsiteDataStore::download(a2, *a6, a5);
}

_DWORD *WebKit::WebProcessPool::createDownloadProxy@<X0>(WebKit::WebProcessPool *this@<X0>, WebKit::WebsiteDataStore *a2@<X1>, const String *a3@<X2>, WebKit::WebPageProxy *a4@<X3>, const WebKit::FrameInfoData *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = *((void *)this + 38);
  if (v11)
  {
    ++*(_DWORD *)(v11 + 8);
  }
  else
  {
    uint64_t v11 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)(v11 + 8) = 1;
    *(void *)uint64_t v11 = &unk_1EE9DCA30;
  }
  uint64_t v13 = (_DWORD *)v11;
  WebKit::WebsiteDataStore::createDownloadProxy(a2, (uint64_t *)&v13, a3, (uint64_t)a4, (uint64_t)a5, a6);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
    else {
      --result[2];
    }
  }
  return result;
}

void WebKit::WebProcessPool::resumeDownload(WebKit::WebProcessPool *a1@<X0>, WebKit::WebsiteDataStore *a2@<X1>, WebKit::WebPageProxy *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)v18);
  __int16 v21 = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)v22);
  char v27 = 0;
  int v28 = 0;
  __int16 v29 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  memset(v26, 0, 25);
  WebKit::WebProcessPool::createDownloadProxy(a1, a2, v18, a3, (const WebKit::FrameInfoData *)&v21, (uint64_t)a7);
  char v15 = (WTF::StringImpl *)v26[0];
  v26[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  if (DWORD2(v25) != -1) {
    ((void (*)(char *, long long *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_4[DWORD2(v25)])(&v20, &v24);
  }
  DWORD2(v25) = -1;
  CFTypeRef v16 = cf;
  CFTypeRef cf = 0;
  if (v16) {
    CFRelease(v16);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v22);
  CFTypeRef v17 = v19;
  CFTypeRef v19 = 0;
  if (v17) {
    CFRelease(v17);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v18);
  WebKit::WebsiteDataStore::resumeDownload((const char **)a2, *a7, a4, a5, a6);
}

void WebKit::WebProcessPool::postMessageToInjectedBundle(WebKit::WebProcessPool *this, const WTF::String *a2, API::Object *a3)
{
  uint64_t v3 = *((unsigned int *)this + 21);
  if (v3)
  {
    uint64_t v6 = (uint64_t *)*((void *)this + 9);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6;
      unsigned int v9 = (atomic_uint *)(*v6 + 16);
      atomic_fetch_add(v9, 1u);
      v15[0] = (uint64_t *)&unk_1EE9DCAF8;
      WebKit::UserData::transform(a3, (uint64_t)v15, &v13);
      uint64_t v10 = v13;
      if (v13) {
        CFRetain(*(CFTypeRef *)(v13 + 8));
      }
      uint64_t v14 = v10;
      v15[0] = (uint64_t *)a2;
      v15[1] = &v14;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::HandleInjectedBundleMessage>(v8, v15, 0, 0);
      uint64_t v11 = v14;
      uint64_t v14 = 0;
      if (v11) {
        CFRelease(*(CFTypeRef *)(v11 + 8));
      }
      uint64_t v12 = v13;
      uint64_t v13 = 0;
      if (v12) {
        CFRelease(*(CFTypeRef *)(v12 + 8));
      }
      if (v8) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v9);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::HandleInjectedBundleMessage>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2641;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(v8, a2[1]);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void WebKit::WebProcessPool::didReachGoodTimeToPrewarm(WebKit::WebProcessPool *this)
{
  uint64_t v1 = this;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  {
    this = WebKit::RestrictedOpenerDomainsController::RestrictedOpenerDomainsController((WebKit::RestrictedOpenerDomainsController *)&WebKit::RestrictedOpenerDomainsController::shared(void)::sharedInstance);
  }
  unsigned int v2 = (unsigned char *)*((void *)v1 + 6);
  uint64_t v3 = 89;
  if (!v2[90]) {
    uint64_t v3 = 93;
  }
  if (v2[v3])
  {
    uint64_t v4 = 84;
    if (!v2[85]) {
      uint64_t v4 = 86;
    }
    if (v2[v4] && !v2[96])
    {
      uint64_t v5 = WTF::MemoryPressureHandler::singleton(this);
      int v6 = atomic_load((unsigned __int8 *)(v5 + 4));
      if (v6 != 2 && *(unsigned char *)(v5 + 7) == 0)
      {
        WebKit::WebProcessPool::prewarmProcess((uint64_t)v1);
      }
      else
      {
        uint64_t v8 = *((void *)v1 + 11);
        if (!v8 || !*(void *)(v8 + 8))
        {
          unsigned int v9 = qword_1EB358280;
          if (os_log_type_enabled((os_log_t)qword_1EB358280, OS_LOG_TYPE_DEFAULT))
          {
            int v10 = 134217984;
            uint64_t v11 = v1;
            _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::didReachGoodTimeToPrewarm: Not automatically prewarming a WebProcess due to memory pressure", (uint8_t *)&v10, 0xCu);
          }
        }
      }
    }
  }
}

unsigned int *WebKit::WebProcessPool::handleMemoryPressureWarning(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = qword_1EB358280;
  if (os_log_type_enabled((os_log_t)qword_1EB358280, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 134217984;
    unsigned int v9 = a1;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::handleMemoryPressureWarning:", (uint8_t *)&v8, 0xCu);
  }
  uint64_t v3 = (WebKit::WebBackForwardCache *)a1[95];
  ++*(_DWORD *)v3;
  WebKit::WebBackForwardCache::clear(v3);
  if (!*(_DWORD *)v3)
  {
    __break(0xC471u);
    JUMPOUT(0x198EE16A4);
  }
  --*(_DWORD *)v3;
  uint64_t v4 = (_DWORD *)a1[96];
  ++*v4;
  uint64_t result = (unsigned int *)WebKit::WebProcessCache::clear((uint64_t)v4);
  if (!*v4)
  {
    __break(0xC471u);
    JUMPOUT(0x198EE16C4);
  }
  --*v4;
  uint64_t v6 = a1[11];
  if (v6)
  {
    uint64_t result = *(unsigned int **)(v6 + 8);
    if (result)
    {
      uint64_t v7 = result + 4;
      atomic_fetch_add((atomic_uint *volatile)result + 4, 1u);
      WebKit::WebProcessProxy::shutDown((atomic_uchar *)result);
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
    }
  }
  return result;
}

unsigned int *WebKit::WebProcessPool::activePagesOriginsInWebProcessForTesting(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 84);
  if (v4)
  {
    uint64_t v6 = *(uint64_t **)(a1 + 72);
    uint64_t v7 = 8 * v4;
    while (1)
    {
      uint64_t v8 = *v6;
      unsigned int v9 = (atomic_uint *)(*v6 + 16);
      atomic_fetch_add(v9, 1u);
      uint64_t v10 = *(void *)(v8 + 136);
      if (v10) {
        LODWORD(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = *(_DWORD *)(v10 + 108);
      }
      if (v10 == a2) {
        break;
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v9);
      ++v6;
      v7 -= 8;
      if (!v7) {
        goto LABEL_7;
      }
    }
    LOBYTE(v14[0]) = 0;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebProcess::GetActivePagesOriginsForTesting,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v8, (uint64_t)v14, a3, 0, 0, 1);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v9);
  }
  else
  {
LABEL_7:
    v14[0] = 0;
    v14[1] = 0;
    uint64_t v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v11 + 16))(v11, v14);
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    return (unsigned int *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v12);
  }
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetAlwaysUsesComplexTextCodePath>(uint64_t result, char *a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        char v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetAlwaysUsesComplexTextCodePath>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetDisableFontSubpixelAntialiasingForTesting>(uint64_t result, char *a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        char v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetDisableFontSubpixelAntialiasingForTesting>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsEmptyDocument>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        char v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsEmptyDocument>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

WebKit *WebKit::WebProcessPool::unregisterGlobalURLSchemeAsHavingCustomProtocolHandlers(WebKit *this, const WTF::String *a2)
{
  if (!*(void *)this) {
    return this;
  }
  unsigned int v2 = (WTF::ASCIICaseInsensitiveHash **)this;
  WebKit::InitializeWebKit2(this);
  {
    WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set = 0;
  }
  uint64_t v3 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set, v2);
  uint64_t v4 = v3;
  if (WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set)
  {
    uint64_t v5 = WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set
       + 8 * *(unsigned int *)(WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set - 4);
    if ((WTF::StringImpl **)v5 == v3) {
      goto LABEL_11;
    }
LABEL_9:
    if ((WTF::StringImpl **)v5 != v3) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(&WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set, v3);
    }
    goto LABEL_11;
  }
  if (v3)
  {
    uint64_t v5 = 0;
    goto LABEL_9;
  }
LABEL_11:
  WebKit::NetworkProcessProxy::allNetworkProcesses(v4, (uint64_t)&v11);
  if (v12)
  {
    uint64_t v7 = v11;
    uint64_t v8 = 8 * v12;
    do
    {
      uint64_t v9 = *v7;
      uint64_t v10 = (atomic_uint *)(*v7 + 16);
      atomic_fetch_add(v10, 1u);
      uint64_t v13 = v2;
      WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::UnregisterScheme>(v9, (uint64_t **)&v13, 0, 0);
      if (v9) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v10);
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  return (WebKit *)WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v6);
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsCachePartitioned>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        uint64_t v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsCachePartitioned>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsCanDisplayOnlyIfCanRequest>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        uint64_t v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsCanDisplayOnlyIfCanRequest>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::setCacheModel(uint64_t a1, char a2)
{
  WebKit::WebProcessPool::updateBackForwardCacheCapacity(a1);
  LOBYTE(v12) = a2;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetCacheModel>(a1, (char *)&v12, 0);
  WebKit::NetworkProcessProxy::allNetworkProcesses(v4, (uint64_t)&v12);
  if (v13)
  {
    uint64_t v6 = v12;
    uint64_t v7 = 8 * v13;
    do
    {
      uint64_t v8 = *v6;
      uint64_t v9 = (atomic_uint *)(*v6 + 16);
      atomic_fetch_add(v9, 1u);
      char v11 = a2;
      WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetCacheModel>(v8, &v11, 0, 0);
      if (v8) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v9);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v5);
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetCacheModel>(uint64_t result, char *a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        char v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetCacheModel>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetCacheModel>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 459;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unsigned int v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::WebProcessPool::setCacheModelSynchronouslyForTesting(uint64_t a1, char a2)
{
  WebKit::WebProcessPool::updateBackForwardCacheCapacity(a1);
  uint64_t v4 = (WTF::ApproximateTime *)WebKit::NetworkProcessProxy::allNetworkProcesses(v3, (uint64_t)&v15);
  if (v16)
  {
    uint64_t v6 = v15;
    uint64_t v7 = 8 * v16;
    do
    {
      uint64_t v8 = *v6;
      char v9 = (atomic_uint *)(*v6 + 16);
      atomic_fetch_add(v9, 1u);
      char v12 = a2;
      WTF::ApproximateTime::now(v4);
      uint64_t v4 = (WTF::ApproximateTime *)WebKit::AuxiliaryProcessProxy::sendSync<Messages::NetworkProcess::SetCacheModelSynchronouslyForTesting>(v8, &v12, 0, 0, (uint64_t)v13, v10 + 1.0);
      if (v14 != -1) {
        uint64_t v4 = (WTF::ApproximateTime *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14NetworkProcess36SetCacheModelSynchronouslyForTestingEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v14])(&v17, v13);
      }
      int v14 = -1;
      if (v8) {
        uint64_t v4 = (WTF::ApproximateTime *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v9);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v5);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendSync<Messages::NetworkProcess::SetCacheModelSynchronouslyForTesting>@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  if (*(void *)(result + 144))
  {
    uint64_t v11 = result;
    kdebug_trace();
    uint64_t v12 = *(void *)(v11 + 144);
    if (v12)
    {
      IPC::Connection::sendSync<Messages::NetworkProcess::SetCacheModelSynchronouslyForTesting>(v12, a2, a3, a4, a5, a6);
      return kdebug_trace();
    }
    else
    {
      uint64_t result = 130;
      __break(0xC471u);
    }
  }
  else
  {
    *(unsigned char *)a5 = 1;
    *(_DWORD *)(a5 + 16) = 1;
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetDefaultRequestTimeoutInterval>(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        uint64_t v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetDefaultRequestTimeoutInterval>(result, (double *)&v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void WebKit::WebProcessPool::startMemorySampler(WebKit::WebProcessPool *this, double a2)
{
  *((unsigned char *)this + 44WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 1;
  *((double *)this + 56) = a2;
  uint64_t v4 = (WebKit::WebMemorySampler *)WebKit::WebMemorySampler::singleton(this);
  uint64_t v5 = WebKit::WebMemorySampler::start(v4, a2);
  uint64_t v6 = *((unsigned int *)this + 21);
  if (v6)
  {
    uint64_t v7 = (uint64_t *)*((void *)this + 9);
    for (uint64_t i = 8 * v6; i; i -= 8)
    {
      uint64_t v9 = *(void *)(*v7 + 136);
      if (v9 && *(unsigned char *)(v9 + 104) || *(void *)(*v7 + 144))
      {
        uint64_t v26 = 0;
        WTF::WallTime::now(v5);
        unint64_t v11 = (unint64_t)v10;
        if (v10 <= 0.0) {
          unint64_t v11 = 0;
        }
        if (v10 >= 1.84467441e19) {
          unint64_t v11 = -1;
        }
        char v22 = (WebKit::SandboxExtensionImpl **)"WebProcess";
        uint64_t v23 = 11;
        unint64_t v27 = v11;
        WTF::tryMakeString<WTF::ASCIILiteral,unsigned long long>((uint64_t *)&v22, &v27, &v25);
        if (!v25)
        {
          __break(0xC471u);
          return;
        }
        WebKit::SandboxExtension::createHandleForTemporaryFile(*((const char ***)v25 + 1), (const char **)(*((unsigned int *)v25 + 1) | ((unint64_t)((*((_DWORD *)v25 + 4) >> 2) & 1) << 32)), 1, (uint64_t)&v22);
        if (LOBYTE(v24))
        {
          unsigned int v13 = (WebKit::SandboxExtensionImpl *)v22;
          char v22 = 0;
          int v14 = (const char **)v26;
          uint64_t v26 = v13;
          if (v14)
          {
            WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v14);
            WTF::fastFree(v20, v21);
            if (!LOBYTE(v24))
            {
              __break(1u);
              return;
            }
          }
          char v15 = (WTF::StringImpl *)v23;
          uint64_t v23 = 0;
          unsigned int v16 = v25;
          long long v25 = v15;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, v12);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
        }
        std::__optional_destruct_base<std::pair<WebKit::SandboxExtensionHandle,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((WebKit::SandboxExtensionHandle *)&v22, v12);
        uint64_t v17 = *v7;
        char v22 = &v26;
        uint64_t v23 = (uint64_t)&v25;
        double v24 = a2;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::StartMemorySampler>(v17, (uint64_t)&v22);
        CFTypeRef v19 = v25;
        long long v25 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v18);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v26);
      }
      ++v7;
    }
  }
}

uint64_t WebKit::WebProcessPool::stopMemorySampler(WebKit::WebProcessPool *this)
{
  *((unsigned char *)this + 44WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  unsigned int v2 = (const char ***)WebKit::WebMemorySampler::singleton(this);
  WebKit::WebMemorySampler::stop(v2, v3);
  char v5 = 0;
  return WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::StopMemorySampler>((uint64_t)this, &v5, 0);
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::StopMemorySampler>(uint64_t result, char *a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        char v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::StopMemorySampler>(result, (uint64_t)&v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

unsigned int *WebKit::WebProcessProxy::requestTermination(unsigned int *result, uint64_t a2)
{
  uint64_t v3 = (uint64_t)result;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)result + 17);
  if (v4 && *(unsigned char *)(v4 + 104) || *((void *)result + 18))
  {
    atomic_fetch_add((atomic_uint *volatile)result + 4, 1u);
    char v5 = qword_1EB358960;
    if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(v3 + 136);
      if (v6) {
        LODWORD(v6) = *(_DWORD *)(v6 + 108);
      }
      int v7 = 134218496;
      uint64_t v8 = v3;
      __int16 v9 = 1024;
      int v10 = v6;
      __int16 v11 = 1024;
      int v12 = a2;
      _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::requestTermination: reason=%d", (uint8_t *)&v7, 0x18u);
    }
    WebKit::AuxiliaryProcessProxy::terminate((WebKit::AuxiliaryProcessProxy *)v3);
    WebKit::WebProcessProxy::processDidTerminateOrFailedToLaunch(v3, a2);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  return result;
}

void WebKit::WebProcessPool::setAutomationSession(WebKit::WebProcessPool *a1, uint64_t *a2)
{
  uint64_t v4 = (CFTypeRef *)*((void *)a1 + 40);
  if (v4)
  {
    CFRetain(v4[1]);
    WebKit::WebAutomationSession::setProcessPool((WebKit::WebAutomationSession *)v4, 0);
    CFRelease(v4[1]);
  }
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = *((void *)a1 + 40);
  *((void *)a1 + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v5;
  if (v6)
  {
    CFRelease(*(CFTypeRef *)(v6 + 8));
    uint64_t v5 = *((void *)a1 + 40);
  }
  if (v5)
  {
    CFRetain(*(CFTypeRef *)(v5 + 8));
    Inspector::RemoteControllableTarget::init(*(Inspector::RemoteControllableTarget **)(v5 + 312));
    WebKit::WebAutomationSession::setProcessPool((WebKit::WebAutomationSession *)v5, a1);
    int v7 = *(WTF::StringImpl **)(v5 + 64);
    if (v7) {
      *(_DWORD *)v7 += 2;
    }
    int v10 = v7;
    __int16 v11 = &v10;
    WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::EnsureAutomationSessionProxy>((uint64_t)a1, (uint64_t **)&v11, 0);
    __int16 v9 = v10;
    int v10 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  else
  {
    LOBYTE(v11) = 0;
    WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::DestroyAutomationSessionProxy>((uint64_t)a1, (char *)&v11, 0);
  }
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::EnsureAutomationSessionProxy>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        __int16 v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::EnsureAutomationSessionProxy>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::DestroyAutomationSessionProxy>(uint64_t result, char *a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        char v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::DestroyAutomationSessionProxy>(result, (uint64_t)&v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::webProcessProxyFromConnection(WebKit::WebProcessPool *this, const IPC::Connection *a2)
{
  uint64_t v2 = *((unsigned int *)this + 21);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = (void *)*((void *)this + 9);
  uint64_t v5 = 8 * v2;
  while (1)
  {
    uint64_t v6 = *v4;
    uint64_t v7 = (atomic_uint *)(*v4 + 16);
    atomic_fetch_add(v7, 1u);
    uint64_t v8 = *(const IPC::Connection **)(v6 + 144);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v7);
    if (v8 == a2) {
      break;
    }
    ++v4;
    v5 -= 8;
    if (!v5) {
      return 0;
    }
  }
  return v6;
}

unsigned int *WebKit::WebProcessPool::handleMessage(WebKit::WebProcessPool *a1, const IPC::Connection *a2, uint64_t a3, CFTypeRef **a4)
{
  uint64_t result = (unsigned int *)WebKit::WebProcessPool::webProcessProxyFromConnection(a1, a2);
  if (result)
  {
    uint64_t v8 = (WebKit::WebProcessProxy *)result;
    char v9 = result + 4;
    atomic_fetch_add((atomic_uint *volatile)result + 4, 1u);
    uint64_t v10 = *((void *)a1 + 25);
    __int16 v11 = *a4;
    if (v11) {
      CFRetain(v11[1]);
    }
    WebKit::WebProcessProxy::transformHandlesToObjects(v8, (API::Object *)v11, &v13);
    (*(void (**)(uint64_t, WebKit::WebProcessPool *, uint64_t, uint64_t))(*(void *)v10 + 16))(v10, a1, a3, v13);
    uint64_t v12 = v13;
    uint64_t v13 = 0;
    if (v12) {
      CFRelease(*(CFTypeRef *)(v12 + 8));
    }
    if (v11) {
      CFRelease(v11[1]);
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  }
  return result;
}

unsigned int *WebKit::WebProcessProxy::transformHandlesToObjects@<X0>(WebKit::WebProcessProxy *this@<X0>, API::Object *a2@<X1>, uint64_t *a3@<X8>)
{
  char v9 = &unk_1EE9DCAC8;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v6 = (atomic_uint *)*((void *)this + 1);
  atomic_fetch_add(v6, 1u);
  uint64_t v10 = (WTF *)v6;
  WebKit::UserData::transform(a2, (uint64_t)&v9, a3);
  uint64_t result = (unsigned int *)v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

void WebKit::WebProcessPool::handleSynchronousMessage(WebKit::WebProcessPool *a1, const IPC::Connection *a2, uint64_t a3, CFTypeRef **a4, uint64_t *a5)
{
  uint64_t v9 = WebKit::WebProcessPool::webProcessProxyFromConnection(a1, a2);
  if (v9)
  {
    uint64_t v10 = (WebKit::WebProcessProxy *)v9;
    __int16 v11 = (atomic_uint *)(v9 + 16);
    atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 1u);
    uint64_t v12 = *((void *)a1 + 25);
    uint64_t v13 = *a4;
    if (v13) {
      CFRetain(v13[1]);
    }
    WebKit::WebProcessProxy::transformHandlesToObjects(v10, (API::Object *)v13, &v22);
    uint64_t v14 = v22;
    atomic_fetch_add(v11, 1u);
    uint64_t v15 = *a5;
    *a5 = 0;
    unsigned int v16 = (void *)WTF::fastMalloc((WTF *)0x18);
    *unsigned int v16 = &unk_1EE9DD188;
    v16[1] = v10;
    v16[2] = v15;
    __int16 v21 = v16;
    (*(void (**)(uint64_t, WebKit::WebProcessPool *, uint64_t, uint64_t, void **))(*(void *)v12 + 24))(v12, a1, a3, v14, &v21);
    uint64_t v17 = v21;
    __int16 v21 = 0;
    if (v17) {
      (*(void (**)(void *))(*v17 + 8))(v17);
    }
    uint64_t v18 = v22;
    uint64_t v22 = 0;
    if (v18) {
      CFRelease(*(CFTypeRef *)(v18 + 8));
    }
    if (v13) {
      CFRelease(v13[1]);
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v11);
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v19 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v19 + 16))(v19, &v22);
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    uint64_t v20 = v22;
    uint64_t v22 = 0;
    if (v20) {
      CFRelease(*(CFTypeRef *)(v20 + 8));
    }
  }
}

unsigned int *WebKit::WebProcessPool::startedUsingGamepads(WebKit::WebProcessPool *this, IPC::Connection *a2)
{
  uint64_t result = (unsigned int *)WebKit::WebProcessPool::webProcessProxyFromConnection(this, a2);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = result + 4;
    atomic_fetch_add((atomic_uint *volatile)result + 4, 1u);
    BOOL isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)this + 83);
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>((uint64_t)this + 664, v4, (uint64_t)v9);
    if (isEmptyIgnoringNullReferences)
    {
      {
        WebKit::UIGamepadProvider::UIGamepadProvider((WebKit::UIGamepadProvider *)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider);
      }
      WebKit::UIGamepadProvider::processPoolStartedUsingGamepads((WebKit::UIGamepadProvider *)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider, this);
    }
    {
      WebKit::UIGamepadProvider::UIGamepadProvider((WebKit::UIGamepadProvider *)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider);
    }
    WebKit::UIGamepadProvider::snapshotGamepads((uint64_t)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider, (uint64_t)v9);
    uint64_t v8 = v9;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetInitialGamepads>((uint64_t)v4, (uint64_t *)&v8, 0, 0);
    WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v7);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetInitialGamepads>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2682;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::VectorArgumentCoder<false,std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void WebKit::WebProcessPool::stoppedUsingGamepads(WebKit::WebProcessPool *a1, const IPC::Connection *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v7 = v4;
  uint64_t v5 = (atomic_uint *)WebKit::WebProcessPool::webProcessProxyFromConnection(a1, a2);
  if (v5)
  {
    uint64_t v6 = (unsigned int *)(v5 + 4);
    atomic_fetch_add(v5 + 4, 1u);
    WebKit::WebProcessPool::processStoppedUsingGamepads(a1, (WebKit::WebProcessProxy *)v5);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
  }
  WTF::CompletionHandlerCallingScope::~CompletionHandlerCallingScope((WTF::CompletionHandlerCallingScope *)&v7);
}

uint64_t WebKit::WebProcessPool::playGamepadEffect(WebCore::GamepadProvider *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)WebCore::GamepadProvider::singleton(a1) + 48);

  return v1();
}

uint64_t WebKit::WebProcessPool::stopGamepadEffects(WebCore::GamepadProvider *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)WebCore::GamepadProvider::singleton(a1) + 56);

  return v1();
}

void *WebKit::WebProcessPool::gamepadConnected(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = a1 + 664;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(a1 + 664), &v36);
  uint64_t v7 = *(void *)(a1 + 664);
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    uint64_t v9 = v7 + 8 * v8;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v31 = v6;
  uint64_t v32 = v9;
  uint64_t v33 = v9;
  uint64_t v34 = v9;
  uint64_t v35 = v7 + 8 * v8;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v31);
  for (uint64_t i = v37; v37 != v32; uint64_t i = v37)
  {
    uint64_t v12 = *(void *)(*(void *)i + 8);
    atomic_fetch_add((atomic_uint *volatile)(v12 + 16), 1u);
    WebKit::GamepadData::GamepadData((uint64_t)&v23, *(_DWORD *)a2, (_DWORD **)(a2 + 8), (_DWORD **)(a2 + 16), (uint64_t *)(a2 + 24), (uint64_t *)(a2 + 40), (unsigned __int8 **)(a2 + 64), *(double *)(a2 + 56));
    uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v13 = 2635;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 68) = 0;
    *((void *)v13 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    uint64_t v40 = v13;
    IPC::ArgumentCoder<WebKit::GamepadData,void>::encode(v13, &v23);
    IPC::ArgumentCoder<WebCore::WritingDirection,void>::encode<IPC::Encoder>(v13, a3);
    LOBYTE(v38) = 0;
    char v39 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v40, 0, (uint64_t)&v38, 1);
    if (v39)
    {
      uint64_t v15 = v38;
      uint64_t v38 = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
    }
    uint64_t v16 = v40;
    uint64_t v40 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v14);
      WTF::fastFree(v21, v22);
    }
    if (v30) {
      WTF::fastFree((WTF *)(v30 - 16), v14);
    }
    char v17 = v28;
    if (v28)
    {
      int v28 = 0;
      int v29 = 0;
      WTF::fastFree(v17, v14);
    }
    uint64_t v18 = v26;
    if (v26)
    {
      uint64_t v26 = 0;
      int v27 = 0;
      WTF::fastFree(v18, v14);
    }
    uint64_t v19 = v25;
    long long v25 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v14);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    uint64_t v20 = v24;
    double v24 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v14);
        if (!v12) {
          goto LABEL_25;
        }
LABEL_24:
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
        goto LABEL_25;
      }
      *(_DWORD *)v20 -= 2;
    }
    if (v12) {
      goto LABEL_24;
    }
LABEL_25:
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v36);
  }
  return result;
}

void *WebKit::WebProcessPool::gamepadDisconnected(WebKit::WebProcessPool *this, const WebKit::UIGamepad *a2)
{
  uint64_t v4 = (char *)this + 664;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 83, &v18);
  uint64_t v5 = *((void *)this + 83);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v13 = v4;
  uint64_t v14 = v7;
  uint64_t v15 = v7;
  uint64_t v16 = v7;
  uint64_t v17 = v5 + 8 * v6;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v13);
  for (uint64_t i = v19; v19 != v14; uint64_t i = v19)
  {
    uint64_t v10 = *(void *)(*(void *)i + 8);
    atomic_fetch_add((atomic_uint *volatile)(v10 + 16), 1u);
    int v11 = *(_DWORD *)a2;
    uint64_t v12 = &v11;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::GamepadDisconnected>(v10, &v12, 0, 0);
    if (v10) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v10 + 16));
    }
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v18);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::GamepadDisconnected>(uint64_t a1, int **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2636;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(v8, **a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::GarbageCollectJavaScriptObjects>(uint64_t result, char *a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        char v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::GarbageCollectJavaScriptObjects>(result, (uint64_t)&v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetJavaScriptGarbageCollectorTimerEnabled>(uint64_t result, char *a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        char v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetJavaScriptGarbageCollectorTimerEnabled>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetMemoryCacheDisabled>(uint64_t result, char *a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        char v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetMemoryCacheDisabled>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

WTF::StringImpl *WebKit::WebProcessPool::setFontAllowList(WebKit::WebProcessPool *this, API::Array *a2)
{
  uint64_t v4 = (char *)this + 408;
  uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 102, 0);
  if (a2 && *((_DWORD *)a2 + 7))
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t result = (WTF::StringImpl *)API::Array::at<API::String>((uint64_t)a2, v6);
      if (result)
      {
        WTF::String::isolatedCopy();
        uint64_t v8 = *((unsigned int *)this + 105);
        if (v8 == *((_DWORD *)this + 104))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)v4, (unint64_t)&v11);
        }
        else
        {
          uint64_t v9 = *((void *)this + 51);
          uint64_t v10 = v11;
          uint64_t v11 = 0;
          *(void *)(v9 + 8 * v8) = v10;
          *((_DWORD *)this + 105) = v8 + 1;
        }
        uint64_t result = v11;
        uint64_t v11 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      ++v6;
    }
    while (v6 < *((unsigned int *)a2 + 7));
  }
  return result;
}

WTF::StringImpl *WebKit::WebProcessPool::processForNavigation(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7, uint64_t a8, WebKit::WebsiteDataStore **a9, uint64_t *a10)
{
  LODWORD(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = a6;
  uint64_t v11 = a4;
  uint64_t v15 = a9;
  uint64_t v185 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = (WebCore::ResourceRequestBase *)(a4 + 232);
  char v17 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a4 + 232));
  WebKit::Site::Site((WebKit::Site *)&v176, v17);
  uint64_t v19 = *(void *)(a2 + 272);
  uint64_t v20 = &WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key;
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v19 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v18)|| !v177|| !*((_DWORD *)v177 + 1)|| (MEMORY[0x19972E990]() & 1) != 0)
  {
    goto LABEL_47;
  }
  if (*(unsigned char *)a8)
  {
    int v23 = v176;
    if (v176) {
      *(_DWORD *)v176 += 2;
    }
    *(void *)v181 = v23;
    double v24 = v177;
    if (v177) {
      *(_DWORD *)v177 += 2;
    }
    *(void *)&v181[8] = v24;
  }
  else
  {
    WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(void *)(a2 + 32) + 1000), &v179);
    MEMORY[0x19972E890](buf, &v179, 0);
    WebKit::Site::Site((WebKit::Site *)v181, (const WTF::URL *)buf);
    long long v25 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v21);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    uint64_t v26 = v179;
    v179 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v21);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
  if (!*(unsigned char *)(a3 + 441)
    && WTF::equal(v176, *(const WTF::StringImpl **)v181, v22)
    && WTF::equal(v177, *(const WTF::StringImpl **)&v181[8], v27))
  {
    uint64_t v161 = v11;
    uint64_t v28 = *(void *)(*(void *)(*(void *)(a2 + 328) + 32) + 16);
    int v29 = (atomic_uint *)(v28 + 16);
    atomic_fetch_add((atomic_uint *volatile)(v28 + 16), 1u);
    if (!*(unsigned char *)(v28 + 712))
    {
      int v30 = v10;
      atomic_fetch_add(v29, 1u);
      *(void *)buf = v28;
      uint64_t v95 = *a10;
      *a10 = 0;
      (*(void (**)(uint64_t, unsigned char *, void, const char *, uint64_t))(*(void *)v95 + 16))(v95, buf, 0, "Found process for the same site as main frame", 46);
      (*(void (**)(uint64_t))(*(void *)v95 + 8))(v95);
      uint64_t v96 = *(void *)buf;
      *(void *)buf = 0;
      if (v96) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v96 + 16));
      }
      int v33 = 1;
      goto LABEL_36;
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v28 + 16));
    uint64_t v11 = v161;
  }
  int v30 = v10;
  if (*(WebKit::WebsiteDataStore **)(a2 + 312) == *a9
    && (uint64_t v31 = WebKit::BrowsingContextGroup::processForSite(*(WebKit::BrowsingContextGroup **)(a2 + 1416), &v176)) != 0)
  {
    uint64_t v161 = v11;
    uint64_t v32 = *(void *)(v31 + 16);
    if (v32)
    {
      int v29 = (atomic_uint *)(v32 + 16);
      int v33 = 1;
      atomic_fetch_add((atomic_uint *volatile)(v32 + 16), 1u);
      if (*(unsigned char *)(v32 + 712))
      {
        int v33 = 0;
      }
      else
      {
        uint64_t v159 = a2;
        uint64_t v174 = WebKit::WebsiteDataStore::networkProcess(*a9);
        uint64_t v34 = *a10;
        *a10 = 0;
        atomic_fetch_add(v29, 1u);
        uint64_t v35 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v35 = &unk_1EE9DD200;
        v35[1] = v34;
        v35[2] = v32;
        *(void *)buf = v35;
        WebKit::NetworkProcessProxy::addAllowedFirstPartyForCookies(v174, v32, (WTF::StringImpl **)&v181[8], 0, (uint64_t *)buf);
        uint64_t v36 = *(void *)buf;
        *(void *)buf = 0;
        if (v36) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
        a2 = v159;
      }
LABEL_36:
      LODWORD(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v30;
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v29);
      uint64_t v11 = v161;
      goto LABEL_37;
    }
    int v33 = 0;
  }
  else
  {
    int v33 = 0;
  }
  LODWORD(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v30;
LABEL_37:
  uint64_t v37 = *(WTF::StringImpl **)&v181[8];
  *(void *)&v181[8] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2) {
      WTF::StringImpl::destroy(v37, v21);
    }
    else {
      *(_DWORD *)v37 -= 2;
    }
  }
  uint64_t v38 = *(WTF::StringImpl **)v181;
  *(void *)v181 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::destroy(v38, v21);
      if (v33) {
        goto LABEL_131;
      }
      goto LABEL_47;
    }
    *(_DWORD *)v38 -= 2;
  }
  if (v33) {
    goto LABEL_131;
  }
LABEL_47:
  uint64_t v39 = *(void *)(*(void *)(a3 + 32) + 16);
  atomic_fetch_add((atomic_uint *volatile)(v39 + 16), 1u);
  v172 = (unsigned int *)(v39 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v39 + 16), 1u);
  uint64_t v40 = *a9;
  CFRetain(*((CFTypeRef *)*a9 + 1));
  uint64_t v41 = (const WTF::URL *)WebCore::ResourceRequestBase::url(v16);
  WebKit::Site::Site((WebKit::Site *)&v179, v41);
  uint64_t v44 = a1[6];
  uint64_t v175 = v39;
  if (*(unsigned char *)(v44 + 96))
  {
    uint64_t v45 = 0;
    *(void *)v181 = v39;
    *(void *)&v181[8] = 0;
    unsigned int v46 = "Single WebProcess mode is enabled";
    uint64_t v47 = 34;
LABEL_49:
    *(void *)&v181[16] = v46;
    uint64_t v182 = v47;
    goto LABEL_68;
  }
  int v166 = v10;
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v48 = *(void *)(v10 + 136);
  if (v48)
  {
    BOOL v49 = !*(void *)(v48 + 8) || *(unsigned char *)(a2 + 1123) == 0;
    if (!v49)
    {
      uint64_t v45 = 0;
      *(void *)v181 = v39;
      *(void *)&v181[8] = 0;
      *(void *)&v181[16] = "Always using related page process";
      uint64_t v182 = 34;
LABEL_60:
      LOBYTE(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v166;
      goto LABEL_68;
    }
  }
  uint64_t v160 = a2;
  if ((*(unsigned char *)(v39 + 779) != 0) != a7)
  {
    CFRetain(*(CFTypeRef *)(v10 + 8));
    WebKit::WebProcessPool::processForRegistrableDomain((uint64_t)a1, (uint64_t)v40, &v180, a7, (WebKit::WebPreferences **)v10, (IPC::Encoder **)buf);
    CFRelease(*(CFTypeRef *)(v10 + 8));
    *(void *)v181 = *(void *)buf;
    *(void *)&v181[8] = 0;
    *(void *)&v181[16] = "Process swap due to Lockdown mode change";
    uint64_t v182 = 41;
    uint64_t v45 = v39;
    LOBYTE(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v166;
LABEL_67:
    uint64_t v15 = a9;
    uint64_t v20 = &WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key;
    goto LABEL_68;
  }
  if (v166)
  {
    CFRetain(*(CFTypeRef *)(v10 + 8));
    WebKit::WebProcessPool::processForRegistrableDomain((uint64_t)a1, (uint64_t)v40, &v180, a7, (WebKit::WebPreferences **)v10, (IPC::Encoder **)buf);
    CFRelease(*(CFTypeRef *)(v10 + 8));
    *(void *)v181 = *(void *)buf;
    *(void *)&v181[8] = 0;
    *(void *)&v181[16] = "Process swap was requested by the client";
    uint64_t v182 = 41;
    uint64_t v45 = v39;
    LOBYTE(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v166;
    goto LABEL_67;
  }
  uint64_t v50 = 84;
  if (!*(unsigned char *)(v44 + 85)) {
    uint64_t v50 = 86;
  }
  if (!*(unsigned char *)(v44 + v50))
  {
    uint64_t v45 = 0;
    *(void *)v181 = v39;
    *(void *)&v181[8] = 0;
    *(void *)&v181[16] = "Feature is disabled";
    uint64_t v182 = 20;
    LOBYTE(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
    goto LABEL_67;
  }
  LOBYTE(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  if (a1[40])
  {
    uint64_t v45 = 0;
    *(void *)v181 = v39;
    *(void *)&v181[8] = 0;
    *(void *)&v181[16] = "An automation session is active";
    uint64_t v182 = 32;
    goto LABEL_67;
  }
  uint64_t v15 = a9;
  uint64_t v20 = &WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key;
  if ((*(unsigned char *)(v11 + 738) & 1) == 0)
  {
    uint64_t v86 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v11 + 32));
    uint64_t v87 = (unsigned __int8 *)WTF::URL::protocol(v86);
    uint64_t v163 = v88;
    uint64_t v89 = (unsigned __int8 *)WTF::URL::protocol(v41);
    if (!WTF::operator==(v87, v163, v89, v90))
    {
      WTF::URL::protocol(v41);
      if ((v91 & 0xFF00000000) != 0) {
        WTF::String::String();
      }
      else {
        WTF::String::String();
      }
      if (*(void *)buf)
      {
        float v93 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a2 + 1128), (WTF::StringImpl **)buf, v43);
        float v94 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v94)
        {
          if (*(_DWORD *)v94 == 2) {
            WTF::StringImpl::destroy(v94, v92);
          }
          else {
            *(_DWORD *)v94 -= 2;
          }
        }
        if (v93)
        {
          uint64_t v97 = *(void *)(a2 + 48);
          CFRetain(*(CFTypeRef *)(v97 + 8));
          WebKit::WebProcessPool::processForRegistrableDomain((uint64_t)a1, (uint64_t)v40, &v180, a7, (WebKit::WebPreferences **)v97, (IPC::Encoder **)buf);
          int v98 = *(const void **)(v97 + 8);
          uint64_t v20 = &WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key;
          CFRelease(v98);
          *(void *)v181 = *(void *)buf;
          *(void *)&v181[8] = 0;
          *(void *)&v181[16] = "Redirect to a different scheme for which the app registered a custom handler";
          uint64_t v182 = 77;
          uint64_t v45 = v39;
          goto LABEL_60;
        }
      }
    }
  }
  uint64_t v99 = *(void *)(a2 + 272);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  int BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v99 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v43);
  LOBYTE(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  if (!*(unsigned char *)(v39 + 776) && (BoolValueForKey & 1) == 0)
  {
    WebKit::WebProcessPool::tryPrewarmWithDomainInformation(a1[98], (WebKit::WebProcessProxy *)v39, &v180);
    uint64_t v45 = 0;
    *(void *)v181 = v39;
    *(void *)&v181[8] = 0;
    unsigned int v46 = "Process has not yet committed any provisional loads";
    uint64_t v47 = 52;
    goto LABEL_49;
  }
  if (*(unsigned char *)(v11 + 856)) {
    BOOL v101 = *(void *)(v11 + 496) == 0;
  }
  else {
    BOOL v101 = 0;
  }
  int v102 = v101;
  int v158 = BoolValueForKey;
  if (*(unsigned char *)(v11 + 859))
  {
    int v103 = *(void *)(a2 + 336) ? v102 : 1;
    if (((v103 | BoolValueForKey) & 1) == 0)
    {
      int v164 = v102;
      int v104 = WebKit::WebsiteDataStore::openerTypeForDomain(*(WebKit::WebsiteDataStore **)(a2 + 312), &v180);
      int v102 = v164;
      if (v104 != 1)
      {
        uint64_t v45 = 0;
        *(void *)v181 = v39;
        *(void *)&v181[8] = 0;
        unsigned int v46 = "Browsing context been opened by DOM without 'noopener'";
        uint64_t v47 = 55;
        goto LABEL_49;
      }
    }
  }
  if (*(unsigned char *)(v11 + 858)
    && ((WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(*(void *)(a2 + 32) + 1984)) | v158 | v102) & 1) == 0)
  {
    uint64_t v45 = 0;
    *(void *)v181 = v39;
    *(void *)&v181[8] = 0;
    unsigned int v46 = "Browsing context has opened other windows";
    uint64_t v47 = 42;
    goto LABEL_49;
  }
  uint64_t v105 = *(void *)(v11 + 464);
  if (v105)
  {
    uint64_t v165 = *(void *)(v11 + 464);
    CFRetain(*(CFTypeRef *)(v105 + 8));
    uint64_t v106 = v165;
    uint64_t v107 = *(void *)(v165 + 416);
    if (v107)
    {
      uint64_t v108 = *(void *)(v107 + 32);
      if (v108)
      {
        int v109 = *(_DWORD *)(v108 + 16);
        *(_DWORD *)(v108 + 16) = v109 + 1;
        uint64_t v110 = *(void *)(v108 + 40);
        uint64_t v111 = *(void *)(v110 + 136);
        if (v111 && *(unsigned char *)(v111 + 104) || *(void *)(v110 + 144))
        {
          atomic_fetch_add((atomic_uint *volatile)(v110 + 16), 1u);
          *(void *)v181 = v110;
          *(void *)&v181[8] = v108;
          *(void *)&v181[16] = "Using target back/forward item's process and suspended page";
          uint64_t v182 = 60;
          int v112 = *(_DWORD *)(v108 + 16);
          if (!v112)
          {
            __break(0xC471u);
            JUMPOUT(0x198EE493CLL);
          }
          *(_DWORD *)(v108 + 16) = v112 - 1;
LABEL_199:
          CFRelease(*(CFTypeRef *)(v106 + 8));
LABEL_200:
          uint64_t v45 = v39;
          goto LABEL_68;
        }
        if (v109 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x198EE49D4);
        }
        *(_DWORD *)(v108 + 16) = v109;
      }
    }
    *(void *)buf = *(void *)(v165 + 392);
    {
      WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
    }
    uint64_t v113 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, buf);
    if (v113)
    {
      uint64_t v10 = v113;
      BOOL v114 = (unsigned int *)(v113 + 16);
      atomic_fetch_add((atomic_uint *volatile)(v113 + 16), 1u);
      uint64_t v115 = *(void *)(v113 + 136);
      if (v115 && *(unsigned char *)(v115 + 104) || *(void *)(v113 + 144))
      {
        v157 = (unsigned int *)(v113 + 16);
        BOOL hasSameGPUAndNetworkProcessPreferencesAs = WebKit::WebProcessProxy::hasSameGPUAndNetworkProcessPreferencesAs((WebKit::WebProcessProxy *)v113, *(WebKit::WebPreferences ***)(a2 + 48));
        BOOL v114 = v157;
        if (hasSameGPUAndNetworkProcessPreferencesAs)
        {
          if (*(unsigned char *)(v10 + 712))
          {
            uint64_t v117 = (_DWORD *)a1[96];
            ++*v117;
            WebKit::WebProcessCache::removeProcess((uint64_t)v117, v10, 0);
            if (!*v117)
            {
              __break(0xC471u);
              JUMPOUT(0x198EE49F4);
            }
            --*v117;
          }
          *(void *)v181 = v10;
          *(void *)&v181[8] = 0;
          *(void *)&v181[16] = "Using target back/forward item's process";
          uint64_t v182 = 41;
          LOBYTE(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
          uint64_t v106 = v165;
          goto LABEL_199;
        }
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v114);
    }
    CFRelease(*(CFTypeRef *)(v165 + 8));
    LOBYTE(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  }
  if (*(unsigned char *)(a2 + 1120))
  {
    if (!*(unsigned char *)(v11 + 859) && !*(unsigned char *)(a2 + 1121))
    {
      uint64_t v118 = *(void *)(a8 + 240);
      if ((!v118 || !*(_DWORD *)(v118 + 4)) && (WTF::URL::protocolIs() & 1) == 0)
      {
        uint64_t v120 = *(void *)(a2 + 48);
        CFRetain(*(CFTypeRef *)(v120 + 8));
        WebKit::WebProcessPool::processForRegistrableDomain((uint64_t)a1, (uint64_t)v40, &v180, a7, (WebKit::WebPreferences **)v120, (IPC::Encoder **)buf);
        uint64_t v121 = *(const void **)(v120 + 8);
        uint64_t v20 = &WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key;
        CFRelease(v121);
        *(void *)v181 = *(void *)buf;
        *(void *)&v181[8] = 0;
        *(void *)&v181[16] = "Process swap because this is a first navigation in a DOM popup without opener";
        uint64_t v182 = 78;
        goto LABEL_200;
      }
    }
  }
  if (*(unsigned char *)(v11 + 857))
  {
    uint64_t v45 = 0;
    *(void *)v181 = v39;
    *(void *)&v181[8] = 0;
    unsigned int v46 = "The treatAsSameOriginNavigation flag is set";
    uint64_t v47 = 44;
    goto LABEL_49;
  }
  *(void *)buf = 0;
  WTF::URL::invalidate((WTF::URL *)buf);
  if (!*(unsigned char *)(a2 + 1120)
    || *(unsigned char *)(a2 + 1121)
    || (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v11 + 864)), (v119 & 1) != 0))
  {
    WTF::String::operator=((uint64_t *)buf, (WTF::StringImpl **)a5);
    *(_OWORD *)&buf[8] = *(_OWORD *)(a5 + 8);
    long long v184 = *(_OWORD *)(a5 + 24);
  }
  else
  {
    WebCore::SecurityOriginData::toString((uint64_t *)&v178, (WebCore::SecurityOriginData *)(v11 + 864));
    MEMORY[0x19972E890](v181, &v178, 0);
    WTF::URL::operator=((uint64_t)buf, (uint64_t)v181);
    __int16 v122 = *(WTF::StringImpl **)v181;
    *(void *)v181 = 0;
    if (v122)
    {
      if (*(_DWORD *)v122 == 2) {
        WTF::StringImpl::destroy(v122, v42);
      }
      else {
        *(_DWORD *)v122 -= 2;
      }
    }
    uint64_t v123 = v178;
    v178 = 0;
    if (v123)
    {
      if (*(_DWORD *)v123 == 2) {
        WTF::StringImpl::destroy(v123, v42);
      }
      else {
        *(_DWORD *)v123 -= 2;
      }
    }
  }
  if (!*(void *)buf || !*(_DWORD *)(*(void *)buf + 4))
  {
    uint64_t v124 = *(void *)(*(void *)(a2 + 48) + 136);
    if (v124)
    {
      uint64_t v125 = *(void *)(v124 + 8);
      if (v125)
      {
        WTF::URL::URL((uint64_t)v181, (WTF::StringImpl **)(*(void *)(v125 + 16) + 1032));
        WTF::URL::operator=((uint64_t)buf, (uint64_t)v181);
        uint64_t v127 = *(WTF::StringImpl **)v181;
        *(void *)v181 = 0;
        if (v127)
        {
          if (*(_DWORD *)v127 == 2) {
            WTF::StringImpl::destroy(v127, v126);
          }
          else {
            *(_DWORD *)v127 -= 2;
          }
        }
        char v128 = qword_1EB358370;
        if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v129 = *(void *)(*(void *)(a2 + 48) + 136);
          if (v129)
          {
            uint64_t v130 = *(void *)(v129 + 8);
            if (v130) {
              uint64_t v129 = v130 - 16;
            }
            else {
              uint64_t v129 = 0;
            }
          }
          *(_DWORD *)v181 = 134218240;
          *(void *)&v181[4] = a1;
          *(_WORD *)&v181[12] = 2048;
          *(void *)&v181[14] = v129;
          _os_log_impl(&dword_1985F2000, v128, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::processForNavigationInternal: Using related page's URL as source URL for process swap decision (page=%p)", v181, 0x16u);
        }
      }
    }
  }
  uint64_t v20 = &WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key;
  if (!*(unsigned char *)(a1[6] + 88) && (buf[8] & 2) == 0)
  {
    uint64_t v131 = WTF::URL::protocol((WTF::URL *)buf);
    uint64_t v133 = v132;
    int v134 = (unsigned __int8 *)WTF::URL::protocol(v41);
    __int16 v135 = (unsigned __int8 *)v131;
    uint64_t v20 = &WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key;
    if (((!WTF::operator==(v135, v133, v134, v136) | v158) & 1) == 0)
    {
      uint64_t v45 = 0;
      *(void *)v181 = v39;
      *(void *)&v181[8] = 0;
      int v138 = "Navigation within the same non-HTTP(s) protocol";
      uint64_t v139 = 48;
LABEL_254:
      *(void *)&v181[16] = v138;
      uint64_t v182 = v139;
      goto LABEL_255;
    }
  }
  if ((buf[8] & 1) == 0 || (*((unsigned char *)v41 + 8) & 1) == 0 || !*(void *)buf || !*(_DWORD *)(*(void *)buf + 4)) {
    goto LABEL_253;
  }
  uint64_t v170 = a3;
  if (!v158)
  {
    uint64_t v140 = WTF::URL::host((WTF::URL *)buf);
    uint64_t v20 = &WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key;
    if (!WebCore::RegistrableDomain::matches(&v180, v140, v141)) {
      goto LABEL_247;
    }
    goto LABEL_253;
  }
  if (WebKit::Site::matches((WebKit::Site *)&v179, (const WTF::URL *)buf))
  {
LABEL_253:
    uint64_t v45 = 0;
    *(void *)v181 = v39;
    *(void *)&v181[8] = 0;
    int v138 = "Navigation is same-site";
    uint64_t v139 = 24;
    goto LABEL_254;
  }
LABEL_247:
  if (WTF::URL::protocolIs())
  {
    if (*(unsigned char *)(v39 + 704))
    {
      v137 = *(_DWORD **)(v39 + 696);
      if (v137) {
        *v137 += 2;
      }
    }
    else
    {
      v137 = 0;
    }
    *(void *)v181 = v137;
    uint64_t v143 = WTF::URL::host(v41);
    int v145 = WebCore::RegistrableDomain::matches(v181, v143, v144);
    char v146 = *(WTF::StringImpl **)v181;
    *(void *)v181 = 0;
    if (v146)
    {
      if (*(_DWORD *)v146 == 2) {
        WTF::StringImpl::destroy(v146, v42);
      }
      else {
        *(_DWORD *)v146 -= 2;
      }
    }
    if (v145 || (v158 & 1) == 0 && !*(unsigned char *)(v39 + 777))
    {
      uint64_t v45 = 0;
      *(void *)v181 = v39;
      *(void *)&v181[8] = 0;
      *(void *)&v181[16] = "Navigation is treated as same-site";
      uint64_t v182 = 35;
      goto LABEL_255;
    }
  }
  if (!*(unsigned char *)(a1[6] + 87)) {
    goto LABEL_279;
  }
  uint64_t v147 = a1[97];
  if (!v147) {
    goto LABEL_279;
  }
  unsigned int v148 = *(_DWORD *)(v147 - 8);
  uint64_t v149 = WTF::ASCIICaseInsensitiveHash::hash(v180, v42) & v148;
  __int16 v150 = (WTF **)(v147 + 16 * v149);
  if (WTF::equal(*v150, 0, v151)) {
    goto LABEL_279;
  }
  int v153 = 1;
  while (*v150 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v150, v180, v152) & 1) == 0)
  {
    uint64_t v149 = (v149 + v153) & v148;
    __int16 v150 = (WTF **)(v147 + 16 * v149);
    ++v153;
    if (WTF::equal(*v150, 0, v152)) {
      goto LABEL_279;
    }
  }
  uint64_t v154 = *(void *)(v147 + 16 * v149 + 8);
  if (!v154) {
    goto LABEL_279;
  }
  atomic_fetch_add((atomic_uint *volatile)(v154 + 16), 1u);
  if (*(WebKit::WebsiteDataStore **)(v154 + 752) != v40
    || ((uint64_t v156 = *(void *)(v154 + 136)) == 0 || !*(unsigned char *)(v156 + 104)) && !*(void *)(v154 + 144))
  {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v154 + 16));
LABEL_279:
    a2 = v160;
    uint64_t v155 = *(void *)(v160 + 48);
    CFRetain(*(CFTypeRef *)(v155 + 8));
    WebKit::WebProcessPool::processForRegistrableDomain((uint64_t)a1, (uint64_t)v40, &v180, a7, (WebKit::WebPreferences **)v155, &v178);
    CFRelease(*(CFTypeRef *)(v155 + 8));
    *(void *)v181 = v178;
    *(void *)&v181[8] = 0;
    *(void *)&v181[16] = "Navigation is cross-site";
    uint64_t v182 = 25;
    uint64_t v45 = v39;
    uint64_t v15 = a9;
    a3 = v170;
    uint64_t v20 = &WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key;
    goto LABEL_255;
  }
  *(void *)v181 = v154;
  *(void *)&v181[8] = 0;
  *(void *)&v181[16] = "Navigation is cross-site";
  uint64_t v182 = 25;
  uint64_t v45 = v39;
  a2 = v160;
  uint64_t v15 = a9;
  a3 = v170;
  uint64_t v20 = &WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key;
LABEL_255:
  uint64_t v142 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  LOBYTE(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  if (v142)
  {
    if (*(_DWORD *)v142 == 2) {
      WTF::StringImpl::destroy(v142, v42);
    }
    else {
      *(_DWORD *)v142 -= 2;
    }
  }
LABEL_68:
  unint64_t v51 = v180;
  v180 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2) {
      WTF::StringImpl::destroy(v51, v42);
    }
    else {
      *(_DWORD *)v51 -= 2;
    }
  }
  double v52 = v179;
  v179 = 0;
  if (!v52)
  {
LABEL_75:
    if (!v40) {
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  if (*(_DWORD *)v52 != 2)
  {
    *(_DWORD *)v52 -= 2;
    goto LABEL_75;
  }
  WTF::StringImpl::destroy(v52, v42);
  if (v40) {
LABEL_76:
  }
    CFRelease(*((CFTypeRef *)v40 + 1));
LABEL_77:
  if (v45) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v45 + 16));
  }
  if (v10)
  {
    uint64_t v53 = a1[6];
    CFRetain(*(CFTypeRef *)(v53 + 8));
  }
  else
  {
    uint64_t v55 = *(void *)v181;
    uint64_t v53 = a1[6];
    CFRetain(*(CFTypeRef *)(v53 + 8));
    BOOL v49 = v55 == v175;
    uint64_t v39 = v175;
    if (!v49 && !*(unsigned char *)(v53 + 90) && !*(unsigned char *)(v53 + 93))
    {
      uint64_t v56 = qword_1EB358280;
      if (os_log_type_enabled((os_log_t)qword_1EB358280, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = a1;
        _os_log_impl(&dword_1985F2000, v56, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::processForNavigation: Automatically turning on process prewarming because the client would benefit from it", buf, 0xCu);
      }
      *(unsigned char *)(v53 + 93) = 1;
    }
  }
  if (!*(unsigned char *)(v53 + 87) || *(void *)v181 == v39) {
    goto LABEL_122;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&WebKit::WebProcessPool::processForNavigation(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::Navigation const&,WTF::URL const&,WebKit::ProcessSwapRequestedByClient,WebKit::WebProcessProxy::LockdownMode,WebKit::FrameInfoData const&,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebsiteDataStore>,WTF::DefaultRefDerefTraits<WebKit::WebsiteDataStore>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral)> &&)::onceFlag, memory_order_acquire) != -1)
  {
    *(void *)buf = &v178;
    v179 = (WTF::StringImpl *)buf;
    std::__call_once(&WebKit::WebProcessPool::processForNavigation(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::Navigation const&,WTF::URL const&,WebKit::ProcessSwapRequestedByClient,WebKit::WebProcessProxy::LockdownMode,WebKit::FrameInfoData const&,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebsiteDataStore>,WTF::DefaultRefDerefTraits<WebKit::WebsiteDataStore>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral)> &&)::onceFlag, &v179, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::WebProcessPool::processForNavigation(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::Navigation const&,WTF::URL const&,WebKit::ProcessSwapRequestedByClient,WebKit::WebProcessProxy::LockdownMode,WebKit::FrameInfoData const&,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebsiteDataStore>,WTF::DefaultRefDerefTraits<WebKit::WebsiteDataStore>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral)> &&)::$_1 &&>>);
  }
  uint64_t v169 = a3;
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)buf, (const WTF::URL *)a5);
  uint64_t v58 = a1 + 97;
  uint64_t v59 = a1[97];
  v167 = a1;
  if (v59
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1 + 97),
        (uint64_t v59 = *v58) != 0))
  {
    uint64_t v60 = v15;
    int v61 = *(_DWORD *)(v59 - 8);
  }
  else
  {
    uint64_t v60 = v15;
    int v61 = 0;
  }
  uint64_t v62 = a2;
  unsigned int v63 = WTF::ASCIICaseInsensitiveHash::hash(*(WTF::ASCIICaseInsensitiveHash **)buf, v57) & v61;
  int v64 = (void *)(v59 + 16 * v63);
  if ((WTF::equal((WTF *)*v64, 0, v65) & 1) == 0)
  {
    uint64_t v162 = v11;
    uint64_t v66 = 0;
    int v67 = 1;
    do
    {
      if (*v64 == -1)
      {
        uint64_t v66 = v64;
      }
      else if (WTF::equalIgnoringASCIICase((WTF *)*v64, *(const WTF::StringImpl **)buf, v54))
      {
        atomic_fetch_add((atomic_uint *volatile)(v175 + 16), 1u);
        uint64_t v76 = v64[1];
        v64[1] = v175;
        uint64_t v11 = v162;
        a2 = v62;
        uint64_t v15 = v60;
        a1 = v167;
        a3 = v169;
        if (v76) {
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v76 + 16));
        }
        goto LABEL_118;
      }
      unsigned int v63 = (v63 + v67) & v61;
      int v64 = (void *)(v59 + 16 * v63);
      ++v67;
    }
    while (!WTF::equal((WTF *)*v64, 0, v54));
    uint64_t v11 = v162;
    if (v66)
    {
      *uint64_t v66 = 0;
      v66[1] = 0;
      --*(_DWORD *)(*v58 - 16);
      int v64 = v66;
    }
  }
  WTF::String::operator=(v64, (WTF::StringImpl **)buf);
  atomic_fetch_add((atomic_uint *volatile)(v175 + 16), 1u);
  uint64_t v69 = v64[1];
  v64[1] = v175;
  uint64_t v15 = v60;
  if (v69) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v69 + 16));
  }
  uint64_t v70 = *v58;
  a3 = v169;
  if (*v58) {
    int v71 = *(_DWORD *)(v70 - 12) + 1;
  }
  else {
    int v71 = 1;
  }
  a2 = v62;
  *(_DWORD *)(v70 - 12) = v71;
  uint64_t v72 = *v58;
  a1 = v167;
  if (*v58) {
    int v73 = *(_DWORD *)(v72 - 12);
  }
  else {
    int v73 = 0;
  }
  uint64_t v74 = (*(_DWORD *)(v72 - 16) + v73);
  unint64_t v75 = *(unsigned int *)(v72 - 4);
  if (v75 <= 0x400)
  {
    if (3 * v75 > 4 * v74) {
      goto LABEL_118;
    }
    goto LABEL_115;
  }
  if (v75 <= 2 * v74) {
LABEL_115:
  }
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v58);
LABEL_118:
  uint64_t v77 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  uint64_t v20 = &WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2) {
      WTF::StringImpl::destroy(v77, v68);
    }
    else {
      *(_DWORD *)v77 -= 2;
    }
  }
LABEL_122:
  if (*(unsigned char *)(a3 + 441)) {
    goto LABEL_127;
  }
  uint64_t v78 = *(void *)(a2 + 272);
  if ((v20[283] & 1) == 0)
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    *((unsigned char *)v20 + 2264) = 1;
  }
  if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v78 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v54))
  {
LABEL_127:
    WebKit::WebProcessPool::prepareProcessForNavigation((uint64_t)a1, (uint64_t *)v181, a2, *(uint64_t *)&v181[8], *(uint64_t *)&v181[16], v182, &v177, v11, a7, v15, a10, 0);
  }
  else
  {
    uint64_t v79 = *(void *)&v181[8];
    uint64_t v80 = *(void *)&v181[16];
    uint64_t v81 = v182;
    uint64_t v82 = *a10;
    *a10 = 0;
    (*(void (**)(uint64_t, unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)v82 + 16))(v82, v181, v79, v80, v81);
    (*(void (**)(uint64_t))(*(void *)v82 + 8))(v82);
  }
  CFRelease(*(CFTypeRef *)(v53 + 8));
  uint64_t v83 = *(void *)v181;
  *(void *)v181 = 0;
  if (v83) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v83 + 16));
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v172);
LABEL_131:
  __int16 v84 = v177;
  v177 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2) {
      WTF::StringImpl::destroy(v84, v21);
    }
    else {
      *(_DWORD *)v84 -= 2;
    }
  }
  uint64_t result = v176;
  v176 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WebKit::WebProcessPool::prepareProcessForNavigation(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, WTF::StringImpl **a7, uint64_t a8, char a9, WebKit::WebsiteDataStore **a10, uint64_t *a11, int a12)
{
  WTF::RefCounter<WebKit::WebProcessProxy::ShutdownPreventingScopeType>::count((void *)(*a2 + 1008), &v74);
  uint64_t v66 = a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v18 = *a11;
  *a11 = 0;
  *(void *)&long long v67 = a1;
  *((void *)&v67 + 1) = v18;
  CFRetain(*(CFTypeRef *)(a3 + 8));
  *(void *)&long long v68 = a3;
  CFRetain(*(CFTypeRef *)(a8 + 8));
  *((void *)&v68 + 1) = a8;
  uint64_t v19 = *a2;
  atomic_fetch_add((atomic_uint *volatile)(*a2 + 16), 1u);
  uint64_t v20 = v74;
  uint64_t v74 = 0;
  *(void *)&long long v70 = a5;
  *((void *)&v70 + 1) = a6;
  __int16 v21 = *a10;
  CFRetain(*((CFTypeRef *)*a10 + 1));
  LOBYTE(v72) = a9;
  HIDWORD(v72) = a12;
  double v54 = a7;
  uint64_t v22 = *a7;
  if (*a7) {
    *(_DWORD *)v22 += 2;
  }
  int v73 = v22;
  uint64_t v23 = *(void *)(a8 + 496);
  uint64_t v55 = v20;
  if (v23)
  {
    uint64_t v24 = *(void *)(v23 + 16);
    uint64_t v25 = a4;
    if (v24) {
      BOOL v52 = WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl>(v24, "application/x-webarchive");
    }
    else {
      BOOL v52 = 0;
    }
  }
  else
  {
    BOOL v52 = 0;
    uint64_t v25 = a4;
  }
  uint64_t v26 = WebKit::WebsiteDataStore::networkProcess(*a10);
  uint64_t v27 = *a2;
  uint64_t v28 = *((void *)&v67 + 1);
  unint64_t v30 = *((void *)&v68 + 1);
  unint64_t v29 = v68;
  uint64_t v31 = v72;
  long long v68 = 0u;
  long long v69 = 0u;
  uint64_t v32 = v66;
  uint64_t v33 = v67;
  uint64_t v56 = v66;
  *(void *)&long long v57 = v67;
  long long v67 = 0u;
  *((void *)&v57 + 1) = v28;
  unsigned long long v58 = __PAIR128__(v30, v29);
  *(void *)&long long v59 = v19;
  *((void *)&v59 + 1) = v55;
  long long v60 = v70;
  uint64_t v71 = 0;
  int v61 = v21;
  uint64_t v62 = v72;
  if (v22) {
    *(_DWORD *)v22 += 2;
  }
  uint64_t v34 = v19;
  uint64_t v49 = v27;
  unsigned int v63 = v22;
  uint64_t v51 = v26;
  if (v25)
  {
    uint64_t v47 = v28;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v25 + 8), v25);
    uint64_t v35 = *(atomic_uint **)(v25 + 8);
    if (v35)
    {
      atomic_fetch_add(v35, 1u);
      uint64_t v32 = v56;
      uint64_t v36 = *((void *)&v57 + 1);
      uint64_t v33 = v57;
      unint64_t v30 = *((void *)&v58 + 1);
      unint64_t v29 = v58;
      uint64_t v37 = *((void *)&v59 + 1);
      uint64_t v34 = v59;
      uint64_t v31 = v62;
      uint64_t v48 = v61;
      uint64_t v22 = v63;
    }
    else
    {
      uint64_t v48 = v21;
      uint64_t v37 = v55;
      uint64_t v36 = v47;
    }
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v48 = v21;
    uint64_t v37 = v55;
    uint64_t v36 = v28;
  }
  int v64 = v35;
  uint64_t v38 = WTF::fastMalloc((WTF *)0x70);
  *(void *)uint64_t v38 = &unk_1EE9DD228;
  *(void *)(v38 + 8) = v32;
  *(void *)(v38 + 16) = v33;
  *(void *)(v38 + 24) = v36;
  long long v57 = 0u;
  *(void *)(v38 + 32) = v29;
  *(void *)(v38 + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v30;
  unsigned long long v58 = 0u;
  *(void *)(v38 + 48) = v34;
  *(void *)(v38 + 56) = v37;
  long long v59 = 0u;
  *(_OWORD *)(v38 + 64) = v60;
  int v61 = 0;
  *(void *)(v38 + 8WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v48;
  *(void *)(v38 + 88) = v31;
  if (v22) {
    *(_DWORD *)v22 += 2;
  }
  *(void *)(v38 + 96) = v22;
  *(void *)(v38 + 104) = v35;
  uint64_t v65 = v38;
  WebKit::NetworkProcessProxy::addAllowedFirstPartyForCookies(v51, v49, v54, v52, &v65);
  uint64_t v40 = v65;
  uint64_t v65 = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  int v64 = 0;
  WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::~$_0(&v56, v39);
  uint64_t result = WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::~$_0(&v66, v41);
  uint64_t v43 = v74;
  uint64_t v74 = 0;
  if (v43)
  {
    uint64_t v44 = *(void ***)v43;
    uint64_t v45 = *(void *)(v43 + 8) - 1;
    *(void *)(v43 + 8) = v45;
    if (!v44) {
      goto LABEL_22;
    }
    uint64_t result = *v44;
    if (*v44)
    {
      char v46 = *(unsigned char *)(v43 + 16);
      *(unsigned char *)(v43 + 16) = 1;
      uint64_t result = (void *)(*(uint64_t (**)(void *, void))(*result + 16))(result, 0);
      *(unsigned char *)(v43 + 16) = v46;
      if (!*(void *)v43)
      {
        uint64_t v45 = *(void *)(v43 + 8);
LABEL_22:
        if (!v45) {
          return (void *)MEMORY[0x199740C10](v43, 0x1020C40545B2139);
        }
      }
    }
  }
  return result;
}

void *WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::~$_0(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[11];
  a1[11] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[9];
  a1[9] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = a1[6];
  a1[6] = 0;
  if (v5)
  {
    unint64_t v6 = *(uint64_t **)v5;
    uint64_t v7 = *(void *)(v5 + 8) - 1;
    *(void *)(v5 + 8) = v7;
    if (v6)
    {
      uint64_t v8 = *v6;
      if (!*v6) {
        goto LABEL_14;
      }
      char v9 = *(unsigned char *)(v5 + 16);
      *(unsigned char *)(v5 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v8 + 16))(v8, 0);
      *(unsigned char *)(v5 + 16) = v9;
      if (*(void *)v5) {
        goto LABEL_14;
      }
      uint64_t v7 = *(void *)(v5 + 8);
    }
    if (!v7) {
      MEMORY[0x199740C10](v5, 0x1020C40545B2139);
    }
  }
LABEL_14:
  uint64_t v10 = a1[5];
  a1[5] = 0;
  if (v10) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v10 + 16));
  }
  uint64_t v11 = a1[4];
  a1[4] = 0;
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  uint64_t v12 = a1[3];
  a1[3] = 0;
  if (v12) {
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  uint64_t v13 = a1[2];
  a1[2] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = a1[1];
  a1[1] = 0;
  if (v14) {
    CFRelease(*(CFTypeRef *)(v14 + 8));
  }
  return a1;
}

unsigned int *WebKit::WebProcessPool::addMockMediaDevice(WebKit::WebProcessPool *a1, uint64_t a2)
{
  WebCore::MockRealtimeMediaSourceCenter::addDevice();
  uint64_t v7 = a2;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::AddMockMediaDevice>((uint64_t)a1, &v7, 0);
  uint64_t v4 = WebKit::WebProcessPool::ensureGPUProcess(a1);
  uint64_t v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  uint64_t v7 = a2;
  WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::AddMockMediaDevice>(v4, &v7, 0, 0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::AddMockMediaDevice>(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    unint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        uint64_t v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::AddMockMediaDevice>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

unsigned int *WebKit::WebProcessPool::clearMockMediaDevices(WebKit::WebProcessPool *this)
{
  v6[0] = 0;
  v6[1] = 0;
  WebCore::MockRealtimeMediaSourceCenter::setDevices();
  WTF::Vector<WebCore::MockMediaDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v2);
  LOBYTE(v6[0]) = 0;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::ClearMockMediaDevices>((uint64_t)this, (char *)v6, 0);
  uint64_t v3 = WebKit::WebProcessPool::ensureGPUProcess(this);
  uint64_t v4 = (unsigned int *)(v3 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
  LOBYTE(v6[0]) = 0;
  WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::ClearMockMediaDevices>(v3, (uint64_t)v6, 0, 0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::ClearMockMediaDevices>(uint64_t result, char *a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    unint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        char v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::ClearMockMediaDevices>(result, (uint64_t)&v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

unsigned int *WebKit::WebProcessPool::removeMockMediaDevice(WebKit::WebProcessPool *this, const WTF::String *a2)
{
  WebCore::MockRealtimeMediaSourceCenter::removeDevice(a2, a2);
  uint64_t v7 = (uint64_t *)a2;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RemoveMockMediaDevice>((uint64_t)this, &v7, 0);
  uint64_t v4 = WebKit::WebProcessPool::ensureGPUProcess(this);
  uint64_t v5 = (unsigned int *)(v4 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  uint64_t v7 = (uint64_t *)a2;
  WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::RemoveMockMediaDevice>(v4, &v7, 0, 0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RemoveMockMediaDevice>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    unint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        char v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RemoveMockMediaDevice>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

unsigned int *WebKit::WebProcessPool::setMockMediaDeviceIsEphemeral(WebKit::WebProcessPool *this, const WTF::String *a2, WTF::String *a3)
{
  char v3 = (char)a3;
  WebCore::MockRealtimeMediaSourceCenter::setDeviceIsEphemeral(a2, a3);
  *(void *)&long long v9 = a2;
  BYTE8(v9) = v3;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetMockMediaDeviceIsEphemeral>((uint64_t)this, &v9, 0);
  uint64_t v6 = WebKit::WebProcessPool::ensureGPUProcess(this);
  uint64_t v7 = (unsigned int *)(v6 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  *(void *)&long long v9 = a2;
  BYTE8(v9) = v3;
  WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::SetMockMediaDeviceIsEphemeral>(v6, (uint64_t)&v9, 0, 0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetMockMediaDeviceIsEphemeral>(uint64_t result, long long *a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        long long v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetMockMediaDeviceIsEphemeral>(result, (uint64_t)&v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

unsigned int *WebKit::WebProcessPool::resetMockMediaDevices(WebKit::WebProcessPool *this)
{
  WebCore::MockRealtimeMediaSourceCenter::resetDevices(this);
  char v5 = 0;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::ResetMockMediaDevices>((uint64_t)this, &v5, 0);
  uint64_t v2 = WebKit::WebProcessPool::ensureGPUProcess(this);
  uint64_t v3 = (unsigned int *)(v2 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 1u);
  char v6 = 0;
  WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::ResetMockMediaDevices>(v2, (uint64_t)&v6, 0, 0);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::ResetMockMediaDevices>(uint64_t result, char *a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    char v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        char v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::ResetMockMediaDevices>(result, (uint64_t)&v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::ClearCurrentModifierStateForTesting>(uint64_t result, char *a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    char v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        char v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::ClearCurrentModifierStateForTesting>(result, (uint64_t)&v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

WTF::StringImpl **WebKit::WebProcessPool::setDomainsWithUserInteraction(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = a2;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetDomainsWithUserInteraction>(a1, &v7, 0);
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t result = *(WTF::StringImpl ***)(a1 + 888);
  *(void *)(a1 + 888) = v5;
  if (result) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v4);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetDomainsWithUserInteraction>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 84);
  if (v3)
  {
    char v6 = *(uint64_t **)(result + 72);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t result = *v6;
      uint64_t v8 = *(void *)(*v6 + 136);
      if ((v8 && *(unsigned char *)(v8 + 104) || *(void *)(result + 144))
        && (!a3 || !*(unsigned char *)(result + 389) || *(void *)(result + 224)))
      {
        char v9 = *a2;
        uint64_t result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetDomainsWithUserInteraction>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

unsigned int *WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v6 = 1;
  uint64_t v9 = *a3;
  *a3 = 0;
  long long v57 = (atomic_uint *)v6;
  *(void *)(v6 + 8) = v9;
  uint64_t v10 = *(unsigned int *)(a1 + 84);
  if (v10)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 72);
    uint64_t v12 = 8 * v10;
    while (1)
    {
      uint64_t v13 = *v11;
      uint64_t v14 = (atomic_uint *)(*v11 + 16);
      atomic_fetch_add(v14, 1u);
      atomic_fetch_add(v57, 1u);
      uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v15 = 2675;
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 66) = (char *)v15 + 16;
      *((void *)v15 + 67) = 512;
      *((void *)v15 + 68) = 0;
      *((void *)v15 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
      *((void *)v15 + 69) = 0;
      IPC::Encoder::encodeHeader(v15);
      v60[0] = v15;
      IPC::ArgumentCoder<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&>(v15, a2);
      uint64_t v16 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v16 = (uint64_t)&unk_1EE9DD278;
      v16[1] = (uint64_t)v57;
      uint64_t v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      int v61 = v16;
      uint64_t v62 = v17;
      char v63 = 1;
      WebKit::AuxiliaryProcessProxy::sendMessage(v13, v60, 0, (uint64_t)&v61, 1);
      if (v63)
      {
        uint64_t v18 = v61;
        int v61 = 0;
        if (v18) {
          (*(void (**)(uint64_t *))(*v18 + 8))(v18);
        }
      }
      uint64_t v19 = v60[0];
      v60[0] = 0;
      if (v19) {
        break;
      }
      if (v13) {
        goto LABEL_8;
      }
LABEL_9:
      ++v11;
      v12 -= 8;
      if (!v12) {
        goto LABEL_13;
      }
    }
    IPC::Encoder::~Encoder(v19, v7);
    WTF::fastFree(v20, v21);
    if (!v13) {
      goto LABEL_9;
    }
LABEL_8:
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v14);
    goto LABEL_9;
  }
LABEL_13:
  uint64_t v22 = (IPC::Encoder *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, (uint64_t)v7, v8);
  uint64_t v24 = (const WTF::StringImpl **)v22;
  uint64_t v25 = *a2;
  if (*a2) {
    v25 += 24 * *(unsigned int *)(v25 - 4);
  }
  v60[0] = v22;
  v60[1] = v23;
  if ((IPC::Encoder *)v25 != v22)
  {
    uint64_t v56 = (IPC::Encoder *)v25;
    unsigned long long v58 = (uint64_t *)(a1 + 896);
    while (1)
    {
      uint64_t v26 = *a2;
      if (!*a2
        || (unsigned int v27 = *(_DWORD *)(v26 - 8),
            uint64_t v28 = WTF::ASCIICaseInsensitiveHash::hash(*v24, v23) & v27,
            unint64_t v29 = (WTF **)(v26 + 24 * v28),
            (WTF::equal(*v29, 0, v30) & 1) != 0))
      {
LABEL_23:
        int v61 = 0;
        v59[0] = 0;
        uint64_t v62 = 0;
        v59[1] = 0;
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v23);
      }
      else
      {
        int v32 = 1;
        while (*v29 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v29, *v24, v31) & 1) == 0)
        {
          uint64_t v28 = (v28 + v32) & v27;
          unint64_t v29 = (WTF **)(v26 + 24 * v28);
          ++v32;
          if (WTF::equal(*v29, 0, v31)) {
            goto LABEL_23;
          }
        }
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v59, v26 + 24 * v28 + 8);
      }
      int v61 = v59;
      uint64_t v34 = v58;
      uint64_t v35 = *v58;
      if (*v58
        || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v58, 0), (uint64_t v35 = *v58) != 0))
      {
        unsigned int v36 = *(_DWORD *)(v35 - 8);
      }
      else
      {
        unsigned int v36 = 0;
      }
      uint64_t v37 = a2;
      uint64_t v38 = WTF::ASCIICaseInsensitiveHash::hash(*v24, v33) & v36;
      uint64_t v39 = (WTF **)(v35 + 24 * v38);
      if ((WTF::equal(*v39, 0, v40) & 1) == 0)
      {
        uint64_t v42 = 0;
        int v43 = 1;
        do
        {
          uint64_t v44 = v39;
          if (*v39 != (WTF *)-1)
          {
            uint64_t v44 = v42;
            if (WTF::equalIgnoringASCIICase(*v39, *v24, v41))
            {
              WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v35 + 24 * v38 + 8, v59);
              a2 = v37;
              uint64_t v48 = v56;
              goto LABEL_44;
            }
          }
          uint64_t v38 = (v38 + v43) & v36;
          uint64_t v39 = (WTF **)(v35 + 24 * v38);
          ++v43;
          uint64_t v42 = v44;
        }
        while (!WTF::equal(*v39, 0, v41));
        uint64_t v34 = v58;
        if (v44)
        {
          uint64_t *v44 = 0;
          v44[1] = 0;
          _DWORD v44[2] = 0;
          --*(_DWORD *)(*v58 - 16);
          uint64_t v39 = v44;
        }
      }
      WTF::HashMapTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>::translate<WebCore::RegistrableDomain const&,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>> WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineAdd<WebCore::RegistrableDomain const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WebCore::RegistrableDomain const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1}>((uint64_t *)v39, v24, &v61);
      uint64_t v46 = *v34;
      int v47 = *v34 ? *(_DWORD *)(v46 - 12) + 1 : 1;
      a2 = v37;
      uint64_t v48 = v56;
      *(_DWORD *)(v46 - 12) = v47;
      uint64_t v49 = *v34;
      int v50 = *v34 ? *(_DWORD *)(v49 - 12) : 0;
      uint64_t v51 = (*(_DWORD *)(v49 - 16) + v50);
      unint64_t v52 = *(unsigned int *)(v49 - 4);
      if (v52 > 0x400) {
        break;
      }
      if (3 * v52 <= 4 * v51) {
        goto LABEL_42;
      }
LABEL_44:
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v59, v45);
      v60[0] = (IPC::Encoder *)((char *)v60[0] + 24);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v60, v53, v54);
      uint64_t v24 = (const WTF::StringImpl **)v60[0];
      if (v60[0] == v48) {
        return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v57);
      }
    }
    if (v52 > 2 * v51) {
      goto LABEL_44;
    }
LABEL_42:
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v34, v39);
    goto LABEL_44;
  }
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v57);
}

unsigned int *WebKit::WebProcessPool::seedResourceLoadStatisticsForTesting(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v10 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v10 = 1;
  uint64_t v11 = *a5;
  *a5 = 0;
  *(void *)(v10 + 8) = v11;
  uint64_t v12 = *(unsigned int *)(a1 + 84);
  if (v12)
  {
    uint64_t v13 = *(uint64_t **)(a1 + 72);
    uint64_t v14 = 8 * v12;
    while (1)
    {
      uint64_t v15 = *v13;
      uint64_t v16 = (atomic_uint *)(*v13 + 16);
      atomic_fetch_add(v16, 1u);
      v26[0] = a2;
      v26[1] = a3;
      char v27 = a4;
      atomic_fetch_add((atomic_uint *volatile)v10, 1u);
      uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v17 = 2667;
      *((void *)v17 + 1) = 0;
      *((void *)v17 + 66) = (char *)v17 + 16;
      *((void *)v17 + 67) = 512;
      *((void *)v17 + 68) = 0;
      *((void *)v17 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
      *((void *)v17 + 69) = 0;
      IPC::Encoder::encodeHeader(v17);
      unint64_t v30 = v17;
      IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL>,0ul,1ul,2ul>(v17, (uint64_t)v26);
      uint64_t v18 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v18 = &unk_1EE9DD2A0;
      v18[1] = v10;
      uint64_t v19 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v28[0] = v18;
      v28[1] = v19;
      char v29 = 1;
      WebKit::AuxiliaryProcessProxy::sendMessage(v15, &v30, 0, (uint64_t)v28, 1);
      if (v29)
      {
        uint64_t v21 = v28[0];
        v28[0] = 0;
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
        }
      }
      uint64_t v22 = v30;
      unint64_t v30 = 0;
      if (v22) {
        break;
      }
      if (v15) {
        goto LABEL_8;
      }
LABEL_9:
      ++v13;
      v14 -= 8;
      if (!v14) {
        return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v10);
      }
    }
    IPC::Encoder::~Encoder(v22, v20);
    WTF::fastFree(v23, v24);
    if (!v15) {
      goto LABEL_9;
    }
LABEL_8:
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v16);
    goto LABEL_9;
  }
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v10);
}

uint64_t WebKit::WebProcessPool::setUseSeparateServiceWorkerProcess(uint64_t this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (WebKit::WebProcessPool::s_useSeparateServiceWorkerProcess != this)
  {
    int v1 = this;
    uint64_t v2 = qword_1EB358550;
    if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v7) = 67109120;
      HIDWORD(v7) = v1;
      _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "WebProcessPool::setUseSeparateServiceWorkerProcess: (useSeparateServiceWorkerProcess=%d)", (uint8_t *)&v7, 8u);
    }
    WebKit::WebProcessPool::s_useSeparateServiceWorkerProcess = v1;
    WebKit::WebProcessPool::allProcessPools((uint64_t)&v7);
    if (v8)
    {
      uint64_t v4 = v7;
      uint64_t v5 = 8 * v8;
      do
      {
        uint64_t v6 = *v4++;
        CFRetain(v6[1]);
        WebKit::WebProcessPool::terminateServiceWorkers(v6);
        CFRelease(v6[1]);
        v5 -= 8;
      }
      while (v5);
    }
    return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v3);
  }
  return this;
}

unsigned int *WebKit::WebProcessPool::forEachProcessForSession(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[21];
  if (v3)
  {
    uint64_t v6 = (void *)*((void *)result + 9);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6;
      uint64_t v9 = (atomic_uint *)(*v6 + 16);
      atomic_fetch_add(v9, 1u);
      if (!*(unsigned char *)(v8 + 778) && *(void *)(*(void *)(v8 + 752) + 24) == a2) {
        (*(void (**)(void))(**(void **)a3 + 16))();
      }
      uint64_t result = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v9);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::serviceWorkerProxiesCount(WebKit::WebProcessPool *this)
{
  unsigned int v5 = 0;
  {
    WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
    unk_1EB35A750 = 0;
  }
  int v1 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v1 = &unk_1EE9DD2F0;
  v1[1] = &v5;
  uint64_t v4 = v1;
  WTF::WeakHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, &v4);
  uint64_t v2 = v4;
  uint64_t v4 = 0;
  if (v2) {
    (*(void (**)(void *))(*v2 + 8))(v2);
  }
  return v5;
}

uint64_t *WebKit::WebProcessPool::isJITDisabledInAllRemoteWorkerProcesses(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)uint64_t v3 = 1;
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(v3 + 8) = v4;
  *(unsigned char *)(v3 + 16) = 1;
  uint64_t v10 = v3;
  {
    WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
    unk_1EB35A750 = 0;
  }
  unsigned int v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unsigned int v5 = &unk_1EE9DD318;
  v5[1] = &v10;
  uint64_t v9 = v5;
  WTF::WeakHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, &v9);
  uint64_t v7 = v9;
  uint64_t v9 = 0;
  if (v7) {
    (*(void (**)(void *))(*v7 + 8))(v7);
  }
  return WTF::Ref<WebKit::WebProcessPool::isJITDisabledInAllRemoteWorkerProcesses(WTF::CompletionHandler<void ()(BOOL)> &&)::JITDisabledCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref(&v10, v6);
}

uint64_t *WTF::Ref<WebKit::WebProcessPool::isJITDisabledInAllRemoteWorkerProcesses(WTF::CompletionHandler<void ()(BOOL)> &&)::JITDisabledCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4)
      {
        uint64_t v5 = *(unsigned __int8 *)(v3 + 16);
        *(void *)(v3 + 8) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5);
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        uint64_t v6 = *(void *)(v3 + 8);
        *(void *)(v3 + 8) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      else
      {
        *(void *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WebKit::WebProcessPool::hasServiceWorkerForegroundActivityForTesting(WebKit::WebProcessPool *this)
{
  {
    WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
    unk_1EB35A750 = 0;
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, &v12);
  if (WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes)
  {
    uint64_t v1 = *(unsigned int *)(WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes - 4);
    uint64_t v2 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v1;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v1 = 0;
  }
  uint64_t v7 = &WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes;
  uint64_t v8 = v2;
  uint64_t v9 = v2;
  uint64_t v10 = v2;
  uint64_t v11 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v1;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v7);
  while (1)
  {
    if (v13 == v8) {
      return 0;
    }
    uint64_t v3 = *(void *)(*(void *)v13 + 8);
    if (*(unsigned char *)(v3 + 872))
    {
      if (*(_DWORD *)(v3 + 848) == 1)
      {
        uint64_t v4 = *(void *)(v3 + 840);
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          if (*(void *)(v5 + 8) && *(unsigned char *)(v4 + 32)) {
            break;
          }
        }
      }
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
  }
  return 1;
}

uint64_t WebKit::WebProcessPool::hasServiceWorkerBackgroundActivityForTesting(WebKit::WebProcessPool *this)
{
  {
    WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
    unk_1EB35A750 = 0;
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, &v12);
  if (WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes)
  {
    uint64_t v1 = *(unsigned int *)(WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes - 4);
    uint64_t v2 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v1;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v1 = 0;
  }
  uint64_t v7 = &WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes;
  uint64_t v8 = v2;
  uint64_t v9 = v2;
  uint64_t v10 = v2;
  uint64_t v11 = WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes + 8 * v1;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v7);
  while (1)
  {
    if (v13 == v8) {
      return 0;
    }
    uint64_t v3 = *(void *)(*(void *)v13 + 8);
    if (*(unsigned char *)(v3 + 872))
    {
      if (*(_DWORD *)(v3 + 848) == 1)
      {
        uint64_t v4 = *(void *)(v3 + 840);
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          if (*(void *)(v5 + 8) && !*(unsigned char *)(v4 + 32)) {
            break;
          }
        }
      }
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
  }
  return 1;
}

void WebKit::WebProcessProxy::allProcesses(uint64_t a1@<X8>)
{
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    return;
  }
  uint64_t v3 = WebKit::WebProcessProxy::allProcessMap(void)::map;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 12);
    if (!v4) {
      goto LABEL_22;
    }
    if (v4 >> 29)
    {
      __break(0xC471u);
      return;
    }
    uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v4));
    *(_DWORD *)(a1 + 8) = v4;
    *(void *)a1 = v5;
    uint64_t v3 = WebKit::WebProcessProxy::allProcessMap(void)::map;
    if (WebKit::WebProcessProxy::allProcessMap(void)::map)
    {
LABEL_22:
      if (*(_DWORD *)(v3 - 12))
      {
        uint64_t v6 = *(unsigned int *)(v3 - 4);
        uint64_t i = (void *)v3;
        if (v6)
        {
          uint64_t v8 = 16 * v6;
          for (uint64_t i = (void *)v3; (unint64_t)(*i + 1) <= 1; i += 2)
          {
            v8 -= 16;
            if (!v8) {
              return;
            }
          }
        }
        uint64_t v9 = (void *)(v3 + 16 * v6);
        if (v9 != i)
        {
LABEL_13:
          uint64_t v10 = i[1];
          atomic_fetch_add((atomic_uint *volatile)(v10 + 16), 1u);
          uint64_t v11 = *(unsigned int *)(a1 + 12);
          *(void *)(*(void *)a1 + 8 * v11) = v10;
          *(_DWORD *)(a1 + 12) = v11 + 1;
          while (1)
          {
            i += 2;
            if (i == v9) {
              break;
            }
            if ((unint64_t)(*i + 1) > 1)
            {
              if (i != v9) {
                goto LABEL_13;
              }
              return;
            }
          }
        }
      }
    }
  }
}

uint64_t WebKit::WebProcessProxy::forWebPagesWithOrigin(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  WebKit::WebProcessProxy::globalPages((uint64_t)&v17);
  if (v18)
  {
    uint64_t v6 = v17;
    for (uint64_t i = 8 * v18; i; i -= 8)
    {
      uint64_t v8 = *v6;
      CFRetain(*(CFTypeRef *)(*v6 + 8));
      if (*(void *)(*(void *)(v8 + 312) + 24) == a1)
      {
        WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)v8, (uint64_t *)&v15);
        MEMORY[0x19972E890](v16, &v15, 0);
        WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(v20, (WebCore::SecurityOriginData *)v16, v9);
        int v11 = WebCore::operator==();
        if (v21 != -1) {
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_4[v21])(&v19, v20);
        }
        int v21 = -1;
        uint64_t v12 = v16[0];
        v16[0] = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v10);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
        uint64_t v13 = v15;
        uint64_t v15 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
          {
            WTF::StringImpl::destroy(v13, v10);
            if (!v11) {
              goto LABEL_15;
            }
LABEL_14:
            (*(void (**)(void, uint64_t))(*(void *)*a3 + 16))(*a3, v8);
            goto LABEL_15;
          }
          *(_DWORD *)v13 -= 2;
        }
        if (v11) {
          goto LABEL_14;
        }
      }
LABEL_15:
      CFRelease(*(CFTypeRef *)(v8 + 8));
      ++v6;
    }
  }
  return WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v5);
}

void WebKit::WebProcessProxy::enableRemoteWorkers(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 136);
    if (v7) {
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    }
    *(_DWORD *)buf = 134218496;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v7;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = a2;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::enableWorkers: workerType=%u", buf, 0x18u);
  }
  if (a2 == 2) {
    uint64_t v8 = a1 + 880;
  }
  else {
    uint64_t v8 = a1 + 800;
  }
  *(void *)buf = WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v9 = WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::generate();
  uint64_t v10 = *a3;
  *(void *)&buf[8] = v9;
  *(void *)&buf[16] = v10;
  int v11 = buf;
  v23[0] = v10;
  uint64_t v12 = &qword_1EB35A000;
    goto LABEL_31;
  while (1)
  {
    uint64_t v13 = v11 + 24;
    uint64_t v14 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::webUserContentControllerProxies(void)::proxies, v23);
    if (v14)
    {
      uint64_t v15 = v14;
      CFRetain(*(CFTypeRef *)(v14 + 8));
      WebKit::WebUserContentControllerProxy::contentRuleListData((void *)v15, (uint64_t)v13);
      CFRelease(*(CFTypeRef *)(v15 + 8));
    }
    else
    {
      *uint64_t v13 = 0;
      v13[1] = 0;
    }
    uint64_t v25 = 0;
    int v26 = 0;
    char v27 = 0;
    uint64_t v28 = 0;
    if (*(unsigned char *)(v8 + 72))
    {
      WebKit::WebProcessProxy::RemoteWorkerInformation::operator=(v8, (uint64_t)buf);
    }
    else
    {
      std::construct_at[abi:sn180100]<WebKit::WebProcessProxy::RemoteWorkerInformation,WebKit::WebProcessProxy::RemoteWorkerInformation,WebKit::WebProcessProxy::RemoteWorkerInformation*>(v8, (uint64_t)buf);
      *(unsigned char *)(v8 + 72) = 1;
    }
    if (v27) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v27, v16);
    }
    if (v26 != -1) {
      ((void (*)(void *, uint64_t *))off_1EE9DCB90[v26])(v23, &v25);
    }
    int v26 = -1;
    WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, (WTF::StringImpl *)v16);
    uint64_t v17 = *(void *)(a1 + 512);
    if (v17)
    {
      uint64_t v18 = *(void *)(v17 + 8);
      uint64_t v19 = v18 ? v18 - 16 : 0;
    }
    else
    {
      uint64_t v19 = 0;
    }
    CFRetain(*(CFTypeRef *)(v19 + 8));
    {
      WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes = 0;
      unk_1EB35A750 = 0;
    }
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>((uint64_t)&WebKit::WebProcessPool::remoteWorkerProcesses(void)::processes, (unsigned int *)a1, (uint64_t)buf);
    CFRelease(*(CFTypeRef *)(v19 + 8));
    if (a2 != 1) {
      break;
    }
    int v11 = (unsigned char *)*(unsigned __int8 *)(a1 + 872);
    if (*(unsigned char *)(a1 + 872))
    {
      uint64_t v21 = WebKit::ServiceWorkerNotificationHandler::singleton(v20);
      uint64_t v22 = *(void *)(a1 + 808);
      v23[0] = 45;
      v23[1] = v22;
      WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(a1 + 160), (unsigned __int8 *)v23, v21, (unsigned __int8 **)buf);
      break;
    }
    __break(1u);
LABEL_31:
    WebKit::webUserContentControllerProxies(void)::proxies = 0;
    *((unsigned char *)v12 + 2192) = 1;
  }
  WebKit::BackgroundProcessResponsivenessTimer::updateState((WebKit::BackgroundProcessResponsivenessTimer *)(a1 + 416));
  WebKit::WebProcessProxy::updateRemoteWorkerProcessAssertion(a1, a2);
}

void WebKit::WebProcessProxy::~WebProcessProxy(WebKit::WebProcessProxy *this)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EE9DC788;
  *((void *)this + 3) = &unk_1EE9DC8B0;
  *((void *)this + 4) = &unk_1EE9DC908;
  if ((WebKit::isMainThreadOrCheckDisabled(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198EE7274);
  }
  uint64_t v2 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 17);
    if (v3) {
      LODWORD(v3) = *(_DWORD *)(v3 + 108);
    }
    *(_DWORD *)int v102 = 134218240;
    *(void *)&v102[4] = this;
    LOWORD(v103[0]) = 1024;
    *(_DWORD *)((char *)v103 + 2) = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::destructor:", v102, 0x12u);
  }
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    *(_OWORD *)algn_1EB35A7B8 = 0u;
  }
  uint64_t v4 = (WebKit::WebPasteboardProxy *)WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebProcessProxy>((WTF **)this);
  uint64_t v5 = *((void *)this + 129);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = (uint64_t *)(v5 + 16 * v6);
    if (*(_DWORD *)(v5 - 12))
    {
      uint64_t v8 = (uint64_t *)*((void *)this + 129);
      if (v6)
      {
        uint64_t v9 = 16 * v6;
        uint64_t v8 = (uint64_t *)*((void *)this + 129);
        while ((unint64_t)(*v8 + 1) <= 1)
        {
          v8 += 2;
          v9 -= 16;
          if (!v9)
          {
            uint64_t v8 = v7;
            goto LABEL_15;
          }
        }
      }
      goto LABEL_15;
    }
    uint64_t v8 = (uint64_t *)(v5 + 16 * v6);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v7 = (uint64_t *)(v5 + 16 * v6);
  if (v5)
  {
LABEL_15:
    uint64_t v10 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    goto LABEL_20;
  }
  uint64_t v10 = 0;
LABEL_20:
  while (v8 != v10)
  {
    int v11 = v8 + 2;
    uint64_t v4 = (WebKit::WebPasteboardProxy *)IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)this + 152, 0x92u, *v8);
    uint64_t v8 = v7;
    if (v11 != v7)
    {
      uint64_t v8 = v11;
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        v8 += 2;
        if (v8 == v7)
        {
          uint64_t v8 = v7;
          break;
        }
      }
    }
  }
  if (*((void *)this + 130)) {
    uint64_t v4 = (WebKit::WebPasteboardProxy *)IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)this + 19, 0x91u);
  }
  uint64_t v12 = *((void *)this + 143);
  *((void *)this + 143) = 0;
  if (v12)
  {
    (*(void (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
    uint64_t v4 = (WebKit::WebPasteboardProxy *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  {
    if (WebKit::WebProcessProxy::allProcessMap(void)::map)
    {
      uint64_t v13 = *((void *)this + 22);
      unsigned int v14 = *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 8);
      unint64_t v15 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
      unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
      unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
      uint64_t v18 = v14 & ((v17 >> 31) ^ v17);
      uint64_t v19 = *(void *)(WebKit::WebProcessProxy::allProcessMap(void)::map + 16 * v18);
      if (v19 != v13)
      {
        int v20 = 1;
        while (v19)
        {
          uint64_t v18 = (v18 + v20) & v14;
          uint64_t v19 = *(void *)(WebKit::WebProcessProxy::allProcessMap(void)::map + 16 * v18);
          ++v20;
          if (v19 == v13) {
            goto LABEL_39;
          }
        }
        uint64_t v18 = *(unsigned int *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 4);
      }
LABEL_39:
      if (v18 != *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 4))
      {
        uint64_t v21 = (void *)(WebKit::WebProcessProxy::allProcessMap(void)::map + 16 * v18);
        uint64_t v22 = v21[1];
        *uint64_t v21 = -1;
        v21[1] = 0;
        if (v22)
        {
          uint64_t v23 = (unsigned int *)(v22 + 48);
          if (!atomic_load(v23))
          {
            __break(0xC471u);
            JUMPOUT(0x198EE72CCLL);
          }
          atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF);
        }
        ++*(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 16);
        if (WebKit::WebProcessProxy::allProcessMap(void)::map) {
          int v25 = *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 12) - 1;
        }
        else {
          int v25 = -1;
        }
        *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 12) = v25;
        if (WebKit::WebProcessProxy::allProcessMap(void)::map)
        {
          unsigned int v26 = *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 4);
          if (6 * *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 12) < v26 && v26 >= 9) {
            uint64_t v4 = (WebKit::WebPasteboardProxy *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v26 >> 1);
          }
        }
      }
    }
  }
  else
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  WebKit::WebPasteboardProxy::singleton(v4);
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>((uint64_t)&unk_1EB359D08, this);
  uint64_t v28 = (uint64_t *)*((void *)this + 90);
  *((void *)this + 9WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *(void *)int v102 = v28;
  int v29 = *((_DWORD *)this + 182);
  uint64_t v30 = *((unsigned int *)this + 183);
  *((void *)this + 91) = 0;
  *(_DWORD *)&v102[8] = v29;
  v103[0] = v30;
  if (v30)
  {
    uint64_t v31 = 8 * v30;
    do
    {
      uint64_t v32 = *v28;
      *v28++ = 0;
      (*(void (**)(uint64_t, void))(*(void *)v32 + 16))(v32, 0);
      (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
      v31 -= 8;
    }
    while (v31);
  }
  *((_DWORD *)this + 164) = (*((_DWORD *)this + 164) & (*((int *)this + 164) >> 31)) - 1;
  WebKit::WebProcessProxy::platformDestroy(this);
  WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v102, v33);
  WTF::MachSendRight::~MachSendRight((WebKit::WebProcessProxy *)((char *)this + 1200));
  uint64_t v35 = *((void *)this + 143);
  *((void *)this + 143) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  unsigned int v36 = (WTF::StringImpl *)*((void *)this + 134);
  *((void *)this + 134) = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, v34);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
  uint64_t v37 = *((void *)this + 132);
  *((void *)this + 132) = 0;
  if (v37)
  {
    IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(*(void *)(v37 + 16) + 152), 0xBEu);
    *(void *)uint64_t v37 = &unk_1EE9B71B0;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v37 + 8), v38);
    WTF::fastFree((WTF *)v37, v39);
  }
  std::unique_ptr<WebKit::WebLockRegistryProxy>::reset[abi:sn180100]((uint64_t *)this + 131, 0);
  uint64_t v40 = (unsigned int **)*((void *)this + 130);
  *((void *)this + 13WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  if (v40) {
    std::default_delete<WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager>::operator()[abi:sn180100]((uint64_t)this + 1040, v40);
  }
  uint64_t v41 = *((void *)this + 129);
  if (v41)
  {
    uint64_t v42 = *(unsigned int *)(v41 - 4);
    if (v42)
    {
      int v43 = (uint64_t *)(v41 + 8);
      do
      {
        if (*(v43 - 1) != -1)
        {
          uint64_t v44 = *v43;
          *int v43 = 0;
          if (v44) {
            (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
          }
        }
        v43 += 2;
        --v42;
      }
      while (v42);
    }
    WTF::fastFree((WTF *)(v41 - 16), v40);
  }
  uint64_t v45 = *((void *)this + 127);
  *(void *)uint64_t v45 = 0;
  if (!*(unsigned char *)(v45 + 16) && !*(void *)(v45 + 8)) {
    MEMORY[0x199740C10](v45, 0x1020C40545B2139);
  }
  uint64_t v46 = *((void *)this + 126);
  *((void *)this + 126) = 0;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  if (*((unsigned char *)this + 1000))
  {
    uint64_t v47 = *((void *)this + 124);
    *((void *)this + 124) = 0;
    if (v47)
    {
      uint64_t v48 = *(uint64_t **)v47;
      uint64_t v49 = *(void *)(v47 + 8) - 1;
      *(void *)(v47 + 8) = v49;
      if (v48)
      {
        uint64_t v50 = *v48;
        if (!*v48) {
          goto LABEL_87;
        }
        char v51 = *(unsigned char *)(v47 + 16);
        *(unsigned char *)(v47 + 16) = 1;
        (*(void (**)(uint64_t, void))(*(void *)v50 + 16))(v50, 0);
        *(unsigned char *)(v47 + 16) = v51;
        if (*(void *)v47) {
          goto LABEL_87;
        }
        uint64_t v49 = *(void *)(v47 + 8);
      }
      if (!v49) {
        MEMORY[0x199740C10](v47, 0x1020C40545B2139);
      }
    }
  }
LABEL_87:
  if (!*((unsigned char *)this + 984)) {
    goto LABEL_97;
  }
  uint64_t v52 = *((void *)this + 122);
  *((void *)this + 122) = 0;
  if (v52)
  {
    uint64_t v53 = *(uint64_t **)v52;
    uint64_t v54 = *(void *)(v52 + 8) - 1;
    *(void *)(v52 + 8) = v54;
    if (!v53) {
      goto LABEL_93;
    }
    uint64_t v55 = *v53;
    if (*v53)
    {
      char v56 = *(unsigned char *)(v52 + 16);
      *(unsigned char *)(v52 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v55 + 16))(v55, 0);
      *(unsigned char *)(v52 + 16) = v56;
      if (!*(void *)v52)
      {
        uint64_t v54 = *(void *)(v52 + 8);
LABEL_93:
        if (!v54) {
          MEMORY[0x199740C10](v52, 0x1020C40545B2139);
        }
      }
    }
  }
  uint64_t v57 = *((void *)this + 121);
  *((void *)this + 121) = 0;
  if (v57) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v57 + 8), v40);
  }
LABEL_97:
  std::__optional_destruct_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 880, v40);
  std::__optional_destruct_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 800, v58);
  long long v60 = (unsigned int *)*((void *)this + 99);
  *((void *)this + 99) = 0;
  if (v60 && atomic_fetch_add((atomic_uint *volatile)v60 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v60 + 2);
    (*(void (**)(unsigned int *))(*(void *)v60 + 8))(v60);
  }
  uint64_t v61 = *((void *)this + 96);
  *((void *)this + 96) = 0;
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  uint64_t v62 = *((void *)this + 94);
  *((void *)this + 94) = 0;
  if (v62) {
    CFRelease(*(CFTypeRef *)(v62 + 8));
  }
  uint64_t v63 = *((void *)this + 93);
  *(void *)uint64_t v63 = 0;
  if (!*(unsigned char *)(v63 + 16) && !*(void *)(v63 + 8)) {
    MEMORY[0x199740C10](v63, 0x1020C40545B2139);
  }
  uint64_t v64 = *((void *)this + 92);
  *((void *)this + 92) = 0;
  if (v64) {
    (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
  }
  WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 720, v59);
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 696, v65);
  uint64_t v67 = *((void *)this + 86);
  if (v67)
  {
    uint64_t v68 = *(unsigned int *)(v67 - 4);
    if (v68)
    {
      long long v69 = (WTF::StringImpl **)*((void *)this + 86);
      do
      {
        long long v70 = *v69;
        if (*v69 != (WTF::StringImpl *)-1)
        {
          void *v69 = 0;
          if (v70)
          {
            if (*(_DWORD *)v70 == 2) {
              WTF::StringImpl::destroy(v70, v66);
            }
            else {
              *(_DWORD *)v70 -= 2;
            }
          }
        }
        v69 += 2;
        --v68;
      }
      while (v68);
    }
    WTF::fastFree((WTF *)(v67 - 16), v66);
  }
  uint64_t v71 = *((void *)this + 84);
  *((void *)this + 84) = 0;
  if (v71)
  {
    uint64_t v72 = *(uint64_t **)v71;
    uint64_t v73 = *(void *)(v71 + 8) - 1;
    *(void *)(v71 + 8) = v73;
    if (v72)
    {
      uint64_t v74 = *v72;
      if (!*v72) {
        goto LABEL_126;
      }
      char v75 = *(unsigned char *)(v71 + 16);
      *(unsigned char *)(v71 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v74 + 16))(v74, 0);
      *(unsigned char *)(v71 + 16) = v75;
      if (*(void *)v71) {
        goto LABEL_126;
      }
      uint64_t v73 = *(void *)(v71 + 8);
    }
    if (!v73) {
      MEMORY[0x199740C10](v71, 0x1020C40545B2139);
    }
  }
LABEL_126:
  uint64_t v76 = *((void *)this + 83);
  *((void *)this + 83) = 0;
  if (!v76) {
    goto LABEL_133;
  }
  uint64_t v77 = *(uint64_t **)v76;
  uint64_t v78 = *(void *)(v76 + 8) - 1;
  *(void *)(v76 + 8) = v78;
  if (v77)
  {
    uint64_t v79 = *v77;
    if (!*v77) {
      goto LABEL_133;
    }
    char v80 = *(unsigned char *)(v76 + 16);
    *(unsigned char *)(v76 + 16) = 1;
    (*(void (**)(uint64_t, void))(*(void *)v79 + 16))(v79, 0);
    *(unsigned char *)(v76 + 16) = v80;
    if (*(void *)v76) {
      goto LABEL_133;
    }
    uint64_t v78 = *(void *)(v76 + 8);
  }
  if (!v78) {
    MEMORY[0x199740C10](v76, 0x1020C40545B2139);
  }
LABEL_133:
  uint64_t v81 = (unsigned int **)*((void *)this + 80);
  if (v81) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v81, v66);
  }
  uint64_t v82 = *((void *)this + 78);
  if (v82)
  {
    uint64_t v83 = *(unsigned int *)(v82 - 4);
    if (v83)
    {
      uint64_t v84 = *((void *)this + 78);
      do
      {
        uint64_t v85 = *(unsigned int **)v84;
        if (*(void *)v84 != -1)
        {
          uint64_t v86 = *(void *)(v84 + 8);
          if (v86)
          {
            WTF::fastFree((WTF *)(v86 - 16), v66);
            uint64_t v85 = *(unsigned int **)v84;
          }
          *(void *)uint64_t v84 = 0;
          if (v85 && atomic_fetch_add((atomic_uint *volatile)v85, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v85);
            WTF::fastFree((WTF *)v85, v66);
          }
        }
        v84 += 16;
        --v83;
      }
      while (v83);
    }
    WTF::fastFree((WTF *)(v82 - 16), v66);
  }
  uint64_t v87 = *((void *)this + 77);
  if (v87)
  {
    uint64_t v88 = *(unsigned int *)(v87 - 4);
    if (v88)
    {
      uint64_t v89 = (uint64_t *)(v87 + 8);
      do
      {
        if (*(v89 - 1) != -1 && *v89) {
          WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(*v89, v66);
        }
        v89 += 2;
        --v88;
      }
      while (v88);
    }
    WTF::fastFree((WTF *)(v87 - 16), v66);
  }
  uint64_t v90 = *((void *)this + 76);
  if (v90) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v90, v66);
  }
  uint64_t v91 = (unsigned int **)*((void *)this + 74);
  if (v91) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v91, v66);
  }
  uint64_t v92 = (unsigned int **)*((void *)this + 72);
  if (v92) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v92, v66);
  }
  float v93 = (unsigned int **)*((void *)this + 70);
  if (v93) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v93, v66);
  }
  uint64_t v94 = *((void *)this + 69);
  if (v94)
  {
    uint64_t v95 = *(unsigned int *)(v94 - 4);
    if (v95)
    {
      uint64_t v96 = (unsigned int **)(v94 + 8);
      do
      {
        if (*(v96 - 1) != (unsigned int *)-1)
        {
          uint64_t v97 = *v96;
          *uint64_t v96 = 0;
          if (v97)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v97, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v97);
              WTF::fastFree((WTF *)v97, v66);
            }
          }
        }
        v96 += 2;
        --v95;
      }
      while (v95);
    }
    WTF::fastFree((WTF *)(v94 - 16), v66);
  }
  int v98 = (WTF::StringImpl **)*((void *)this + 68);
  if (v98) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v98, v66);
  }
  uint64_t v99 = (WTF::StringImpl **)*((void *)this + 67);
  if (v99) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v99, v66);
  }
  uint64_t v100 = *((void *)this + 65);
  *((void *)this + 65) = 0;
  if (v100) {
    CFRelease(*(CFTypeRef *)(v100 + 8));
  }
  BOOL v101 = (unsigned int *)*((void *)this + 64);
  *((void *)this + 64) = 0;
  if (v101 && atomic_fetch_add((atomic_uint *volatile)v101, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v101);
    WTF::fastFree((WTF *)v101, v66);
  }
  WebKit::BackgroundProcessResponsivenessTimer::~BackgroundProcessResponsivenessTimer((WebKit::WebProcessProxy *)((char *)this + 416));
  WebKit::AuxiliaryProcessProxy::~AuxiliaryProcessProxy(this);
}

WTF **WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebProcessProxy>(WTF **result)
{
  uint64_t v1 = result;
  if (++dword_1EB35A7C0 > *(_DWORD *)algn_1EB35A7C4) {
    uint64_t result = (WTF **)WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)&WebKit::liveProcessesLRU(void)::processes);
  }
  uint64_t v2 = v1[1];
  if (v2 && *((void *)v2 + 1))
  {
    uint64_t v5 = v1[1];
    uint64_t result = (WTF **)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)&WebKit::liveProcessesLRU(void)::processes, (uint64_t *)&v5);
    uint64_t v3 = (WTF **)WebKit::liveProcessesLRU(void)::processes;
    if ((void)WebKit::liveProcessesLRU(void)::processes) {
      uint64_t v3 = (WTF **)(WebKit::liveProcessesLRU(void)::processes
    }
                  + 8 * *(unsigned int *)(WebKit::liveProcessesLRU(void)::processes - 4));
    if (v3 != result)
    {
      uint64_t v4 = *result;
      if (*result)
      {
        uint64_t v5 = *result;
        WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove((uint64_t *)&WebKit::liveProcessesLRU(void)::processes, (void **)&v5);
        return (WTF **)WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::unlinkAndDelete((uint64_t)&WebKit::liveProcessesLRU(void)::processes, v4);
      }
    }
  }
  return result;
}

void non-virtual thunk to'WebKit::WebProcessProxy::~WebProcessProxy(WebKit::WebProcessProxy *this)
{
}

{
  WebKit::WebProcessProxy::~WebProcessProxy((WebKit::WebProcessProxy *)((char *)this - 32));
}

{
  WebKit::WebProcessProxy::operator delete((WebKit::WebProcessProxy *)((char *)this - 24));
}

{
  WebKit::WebProcessProxy::operator delete((WebKit::WebProcessProxy *)((char *)this - 32));
}

void WebKit::WebProcessProxy::operator delete(WebKit::WebProcessProxy *a1)
{
  WebKit::WebProcessProxy::~WebProcessProxy(a1);
  if (atomic_load(v1 + 12))
  {
    bzero(v1, 0x4B8uLL);
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
}

uint64_t WebKit::WebProcessProxy::isAlwaysOnLoggingAllowed(WebKit::WebProcessProxy *this)
{
  WebKit::WebProcessProxy::pages(this, (uint64_t)&v9);
  if (v10)
  {
    uint64_t v2 = v9;
    uint64_t v3 = 8 * v10 - 8;
    do
    {
      uint64_t v4 = *v2++;
      uint64_t isAlwaysOnLoggingAllowed = WebKit::WebPageProxy::isAlwaysOnLoggingAllowed(v4);
      if (isAlwaysOnLoggingAllowed) {
        BOOL v6 = v3 == 0;
      }
      else {
        BOOL v6 = 1;
      }
      v3 -= 8;
    }
    while (!v6);
    uint64_t v7 = isAlwaysOnLoggingAllowed;
  }
  else
  {
    uint64_t v7 = 1;
  }
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v1);
  return v7;
}

void WebKit::WebProcessProxy::addProvisionalPageProxy(WebKit::WebProcessProxy *this, WebKit::ProvisionalPageProxy *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)this + 17);
    if (v5) {
      LODWORD(v5) = *(_DWORD *)(v5 + 108);
    }
    uint64_t v6 = *((void *)a2 + 4);
    uint64_t v7 = *(void *)(*((void *)a2 + 3) + 8);
    if (v7) {
      uint64_t v8 = v7 - 16;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void *)(*(void *)(v8 + 32) + 760);
    *(_DWORD *)buf = 134219008;
    uint64_t v33 = this;
    __int16 v34 = 1024;
    int v35 = v5;
    __int16 v36 = 2048;
    uint64_t v37 = a2;
    __int16 v38 = 2048;
    uint64_t v39 = v9;
    __int16 v40 = 2048;
    uint64_t v41 = v6;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::addProvisionalPageProxy: provisionalPage=%p, pageProxyID=%llu, webPageID=%llu", buf, 0x30u);
  }
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    *(_OWORD *)algn_1EB35A7B8 = 0u;
  }
  WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, (uint64_t)this);
  int v11 = (uint64_t *)((char *)this + 576);
  unsigned int v12 = *((_DWORD *)this + 146) + 1;
  *((_DWORD *)this + 146) = v12;
  if (v12 > *((_DWORD *)this + 147))
  {
    uint64_t v13 = *v11;
    if (*v11)
    {
      int v14 = *(_DWORD *)(v13 - 4);
      if (!v14) {
        goto LABEL_31;
      }
      int v15 = 0;
      unsigned int v16 = v14 - 1;
      do
      {
        uint64_t v17 = v16;
        uint64_t v18 = *(void *)(v13 + 8 * v16);
        if ((unint64_t)(v18 + 1) >= 2 && !*(void *)(v18 + 8))
        {
          *(void *)(v13 + 8 * v16) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v18);
            WTF::fastFree((WTF *)v18, v10);
          }
          *(void *)(v13 + 8 * v16) = -1;
          ++v15;
        }
        --v16;
      }
      while (v17);
      uint64_t v13 = *v11;
      if (v15)
      {
        *(_DWORD *)(v13 - 16) += v15;
        uint64_t v19 = *v11;
        if (*v11) {
          int v20 = *(_DWORD *)(v19 - 12);
        }
        else {
          int v20 = 0;
        }
        *(_DWORD *)(v19 - 12) = v20 - v15;
        uint64_t v13 = *v11;
      }
      if (v13)
      {
        unsigned int v21 = *(_DWORD *)(v13 - 4);
        if (v21 >= 9 && 6 * *(_DWORD *)(v13 - 12) < v21)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)this + 72);
          uint64_t v13 = *((void *)this + 72);
          *((_DWORD *)this + 146) = 0;
          if (!v13)
          {
            unsigned int v23 = 0;
            goto LABEL_35;
          }
          goto LABEL_34;
        }
LABEL_31:
        *((_DWORD *)this + 146) = 0;
LABEL_34:
        unsigned int v23 = *(_DWORD *)(v13 - 12);
        int v24 = 0x7FFFFFFF;
        if (v23 >= 0x7FFFFFFF)
        {
LABEL_36:
          *((_DWORD *)this + 147) = 2 * v24;
          goto LABEL_37;
        }
LABEL_35:
        int v24 = v23;
        goto LABEL_36;
      }
    }
    unsigned int v23 = 0;
    *((_DWORD *)this + 146) = 0;
    goto LABEL_35;
  }
LABEL_37:
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  int v25 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v25, 1u);
  atomic_fetch_add(v25, 1u);
  uint64_t v31 = (WTF *)v25;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)this + 72, &v31, (uint64_t)buf);
  char v27 = (unsigned int *)v31;
  uint64_t v31 = 0;
  if (v27 && atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v27);
    WTF::fastFree((WTF *)v27, v26);
  }
  if (v25 && atomic_fetch_add(v25, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v25);
    WTF::fastFree((WTF *)v25, v26);
  }
  uint64_t v28 = *(void *)(*((void *)a2 + 3) + 8);
  if (v28) {
    uint64_t v29 = v28 - 16;
  }
  else {
    uint64_t v29 = 0;
  }
  CFRetain(*(CFTypeRef *)(v29 + 8));
  if (!*((void *)this + 135)
    && WebKit::updateSharedPreferencesForWebProcess((unsigned char *)this + 1080, (WebKit::WebPreferencesStore *)(*(void *)(v29 + 272) + 40), v30))
  {
    ++*((void *)this + 135);
  }
  if (v28) {
    CFRelease(*(CFTypeRef *)(v29 + 8));
  }
  WebKit::WebProcessProxy::updateRegistrationWithDataStore(this);
}

void WebKit::WebProcessProxy::removeProvisionalPageProxy(WebKit::WebProcessProxy *this, WebKit::ProvisionalPageProxy *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *((void *)this + 17);
    if (v6) {
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    }
    uint64_t v7 = *((void *)a2 + 4);
    uint64_t v8 = *(void *)(*((void *)a2 + 3) + 8);
    if (v8) {
      uint64_t v9 = v8 - 16;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void *)(*(void *)(v9 + 32) + 760);
    *(_DWORD *)uint64_t v30 = 134219008;
    *(void *)&v30[4] = this;
    __int16 v31 = 1024;
    int v32 = v6;
    __int16 v33 = 2048;
    __int16 v34 = a2;
    __int16 v35 = 2048;
    uint64_t v36 = v10;
    __int16 v37 = 2048;
    uint64_t v38 = v7;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::removeProvisionalPageProxy: provisionalPage=%p, pageProxyID=%llu, webPageID=%llu", v30, 0x30u);
  }
  int v11 = (uint64_t *)((char *)this + 576);
  unsigned int v12 = *((_DWORD *)this + 146) + 1;
  *((_DWORD *)this + 146) = v12;
  if (v12 > *((_DWORD *)this + 147))
  {
    uint64_t v13 = *v11;
    if (*v11)
    {
      int v14 = *(_DWORD *)(v13 - 4);
      if (!v14) {
        goto LABEL_29;
      }
      int v15 = 0;
      unsigned int v16 = v14 - 1;
      do
      {
        uint64_t v17 = v16;
        uint64_t v18 = *(void *)(v13 + 8 * v16);
        if ((unint64_t)(v18 + 1) >= 2 && !*(void *)(v18 + 8))
        {
          *(void *)(v13 + 8 * v16) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v18);
            WTF::fastFree((WTF *)v18, v5);
          }
          *(void *)(v13 + 8 * v16) = -1;
          ++v15;
        }
        --v16;
      }
      while (v17);
      uint64_t v13 = *v11;
      if (v15)
      {
        *(_DWORD *)(v13 - 16) += v15;
        uint64_t v19 = *v11;
        if (*v11) {
          int v20 = *(_DWORD *)(v19 - 12);
        }
        else {
          int v20 = 0;
        }
        *(_DWORD *)(v19 - 12) = v20 - v15;
        uint64_t v13 = *v11;
      }
      if (v13)
      {
        unsigned int v21 = *(_DWORD *)(v13 - 4);
        if (v21 >= 9 && 6 * *(_DWORD *)(v13 - 12) < v21)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)this + 72);
          uint64_t v13 = *((void *)this + 72);
          *((_DWORD *)this + 146) = 0;
          if (!v13)
          {
            unsigned int v23 = 0;
            goto LABEL_33;
          }
          goto LABEL_32;
        }
LABEL_29:
        *((_DWORD *)this + 146) = 0;
LABEL_32:
        unsigned int v23 = *(_DWORD *)(v13 - 12);
        int v24 = 0x7FFFFFFF;
        if (v23 >= 0x7FFFFFFF)
        {
LABEL_34:
          *((_DWORD *)this + 147) = 2 * v24;
          goto LABEL_35;
        }
LABEL_33:
        int v24 = v23;
        goto LABEL_34;
      }
    }
    unsigned int v23 = 0;
    *((_DWORD *)this + 146) = 0;
    goto LABEL_33;
  }
LABEL_35:
  uint64_t v25 = *((void *)a2 + 1);
  if (v25 && *(void *)(v25 + 8))
  {
    *(void *)uint64_t v30 = *((void *)a2 + 1);
    unsigned int v26 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)this + 72, v30);
    if (*v11)
    {
      uint64_t v27 = *v11 + 8 * *(unsigned int *)(*v11 - 4);
      if ((unsigned int **)v27 == v26) {
        goto LABEL_44;
      }
    }
    else
    {
      if (!v26) {
        goto LABEL_44;
      }
      uint64_t v27 = 0;
    }
    if ((unsigned int **)v27 != v26) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)this + 72, v26);
    }
  }
LABEL_44:
  WebKit::WebProcessProxy::updateRegistrationWithDataStore(this);
  if (WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)this + 72))
  {
    uint64_t v28 = *(void *)(*((void *)a2 + 3) + 8);
    if (v28) {
      uint64_t v29 = v28 - 16;
    }
    else {
      uint64_t v29 = 0;
    }
    WebKit::WebProcessProxy::reportProcessDisassociatedWithPageIfNecessary((uint64_t)this, *(void *)(*(void *)(v29 + 32) + 760));
    WebKit::WebProcessProxy::maybeShutDown(this);
  }
}

void WebKit::WebProcessProxy::reportProcessDisassociatedWithPageIfNecessary(uint64_t a1, uint64_t a2)
{
  if ((WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(*(void *)(a1 + 552), a2) & 1) == 0)
  {
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v22, (void **)(a1 + 576));
    uint64_t v4 = *(void *)(a1 + 576);
    if (v4)
    {
      uint64_t v5 = *(unsigned int *)(v4 - 4);
      uint64_t v6 = v4 + 8 * v5;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v5 = 0;
    }
    uint64_t v17 = a1 + 576;
    uint64_t v18 = v6;
    uint64_t v19 = v6;
    uint64_t v20 = v6;
    uint64_t v21 = v4 + 8 * v5;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v17);
    uint64_t v7 = v23;
    uint64_t v8 = v18;
    while (v7 != v8)
    {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(*(void *)v7 + 8) + 24) + 8);
      if (v9) {
        uint64_t v10 = v9 - 16;
      }
      else {
        uint64_t v10 = 0;
      }
      if (*(void *)(*(void *)(v10 + 32) + 760) == a2) {
        return;
      }
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v22);
      uint64_t v7 = v23;
    }
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(a1 + 592), &v22);
    uint64_t v11 = *(void *)(a1 + 592);
    if (v11)
    {
      uint64_t v12 = *(unsigned int *)(v11 - 4);
      uint64_t v13 = v11 + 8 * v12;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v12 = 0;
    }
    uint64_t v17 = a1 + 592;
    uint64_t v18 = v13;
    uint64_t v19 = v13;
    uint64_t v20 = v13;
    uint64_t v21 = v11 + 8 * v12;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v17);
    while (v23 != v18)
    {
      uint64_t v14 = *(void *)(*(void *)(*(void *)(*(void *)v23 + 8) + 24) + 8);
      if (v14) {
        uint64_t v15 = v14 - 16;
      }
      else {
        uint64_t v15 = 0;
      }
      if (*(void *)(*(void *)(v15 + 32) + 760) == a2) {
        return;
      }
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v22);
    }
    WebKit::WebProcessProxy::webPage(a2, &v22);
    uint64_t v16 = v22;
    if (v22)
    {
      WebKit::WebNavigationState::clearNavigationsFromProcess(*(void *)(v22 + 160), *(void **)(a1 + 176));
      CFRelease(*(CFTypeRef *)(v16 + 8));
    }
  }
}

void WebKit::WebProcessProxy::maybeShutDown(WebKit::WebProcessProxy *this)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (!WebKit::WebProcessProxy::isDummyProcessProxy(this) || (uint64_t v2 = *((void *)this + 69)) != 0 && *(_DWORD *)(v2 - 12))
  {
    uint64_t v3 = *((void *)this + 17);
    if ((!v3 || !*(unsigned char *)(v3 + 104)) && !*((void *)this + 18)
      || !WebKit::WebProcessProxy::canTerminateAuxiliaryProcess(this))
    {
      return;
    }
    if (!WebKit::WebProcessProxy::canBeAddedToWebProcessCache(this)) {
      goto LABEL_71;
    }
    uint64_t v4 = *((void *)this + 64);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5) {
        uint64_t v6 = v5 - 16;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    CFRetain(*(CFTypeRef *)(v6 + 8));
    uint64_t v10 = *(uint64_t **)(v6 + 768);
    ++*(_DWORD *)v10;
    atomic_fetch_add((atomic_uint *volatile)this + 4, 1u);
    int canCacheProcess = WebKit::WebProcessCache::canCacheProcess((WebKit::WebProcessCache *)v10, this);
    char v12 = canCacheProcess;
    if (!canCacheProcess)
    {
LABEL_68:
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)this + 4);
      if (!*(_DWORD *)v10)
      {
        __break(0xC471u);
        JUMPOUT(0x198EE82F0);
      }
      --*(_DWORD *)v10;
      CFRelease(*(CFTypeRef *)(v6 + 8));
      if (v12) {
        return;
      }
LABEL_71:
      WebKit::WebProcessProxy::shutDown(this);
      return;
    }
    char v54 = canCacheProcess;
    uint64_t v13 = *(void *)(*((void *)this + 64) + 8);
    if (v13) {
      uint64_t v14 = v13 - 16;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v53 = v14;
    CFRetain(*(CFTypeRef *)(v14 + 8));
    uint64_t v15 = WebKit::generateAddRequestIdentifier(void)::identifier;
    uint64_t v16 = ++WebKit::generateAddRequestIdentifier(void)::identifier;
    atomic_fetch_add((atomic_uint *volatile)this + 4, 1u);
    uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x28);
    *uint64_t v17 = this;
    uint64_t v18 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v17);
    uint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v19 = &unk_1EE9DCED0;
    v19[1] = WebKit::WebProcessCache::CachedProcess::evictionTimerFired;
    void v19[2] = 0;
    v19[3] = v17;
    WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(v17 + 1), v18);
    v17[1] = &unk_1EE9B3390;
    v17[4] = v19;
    uint64_t v20 = *v17;
    uint64_t v21 = *(void *)(*v17 + 552);
    if (v21 && *(_DWORD *)(v21 - 12))
    {
      __break(0xC471u);
      JUMPOUT(0x198EE8310);
    }
    uint64_t v22 = *(void *)(v20 + 752);
    if (!v22
      || WTF::WeakHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessProxy>(v22 + 304, v20))
    {
      __break(0xC471u);
      JUMPOUT(0x198EE82D0);
    }
    uint64_t v23 = v10 + 1;
    WebKit::WebProcessProxy::setIsInProcessCache(*v17, 1, 0);
    WTF::RunLoop::TimerBase::start();
    uint64_t v24 = v10[1];
    if (v24
      || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v10 + 1),
          (uint64_t v24 = *v23) != 0))
    {
      int v25 = *(_DWORD *)(v24 - 8);
    }
    else
    {
      int v25 = 0;
    }
    unint64_t v26 = (v15 - (v16 << 32)) ^ ((unint64_t)(v15 - (v16 << 32)) >> 22);
    unint64_t v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
    unint64_t v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
    unsigned int v29 = v25 & ((v28 >> 31) ^ v28);
    uint64_t v30 = (uint64_t *)(v24 + 16 * v29);
    uint64_t v31 = *v30;
    if (*v30)
    {
      int v32 = 0;
      int v33 = 1;
      do
      {
        if (v31 == v16)
        {
          WebKit::WebProcessCache::CachedProcess::~CachedProcess((WebKit::WebProcessCache::CachedProcess *)v17);
          WTF::fastFree(v36, v37);
          goto LABEL_51;
        }
        if (v31 == -1) {
          int v32 = v30;
        }
        unsigned int v29 = (v29 + v33) & v25;
        uint64_t v30 = (uint64_t *)(v24 + 16 * v29);
        uint64_t v31 = *v30;
        ++v33;
      }
      while (*v30);
      if (v32)
      {
        *int v32 = 0;
        v32[1] = 0;
        --*(_DWORD *)(*v23 - 16);
        uint64_t v30 = v32;
      }
    }
    *uint64_t v30 = v16;
    std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](v30 + 1, v17);
    uint64_t v34 = *v23;
    if (*v23) {
      int v35 = *(_DWORD *)(v34 - 12) + 1;
    }
    else {
      int v35 = 1;
    }
    *(_DWORD *)(v34 - 12) = v35;
    uint64_t v38 = *v23;
    if (*v23) {
      int v39 = *(_DWORD *)(v38 - 12);
    }
    else {
      int v39 = 0;
    }
    uint64_t v40 = (*(_DWORD *)(v38 - 16) + v39);
    unint64_t v41 = *(unsigned int *)(v38 - 4);
    if (v41 > 0x400)
    {
      if (v41 > 2 * v40) {
        goto LABEL_51;
      }
    }
    else if (3 * v41 > 4 * v40)
    {
LABEL_51:
      uint64_t v42 = qword_1EB358370;
      if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v43 = *((void *)this + 17);
        if (v43) {
          LODWORD(v43) = *(_DWORD *)(v43 + 108);
        }
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v10;
        __int16 v57 = 1024;
        int v58 = v43;
        _os_log_impl(&dword_1985F2000, v42, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::addProcessIfPossible: Checking if process is responsive before caching it", buf, 0x12u);
      }
      atomic_fetch_add((atomic_uint *volatile)this + 4, 1u);
      uint64_t v44 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x28);
      uint64_t v45 = v44;
      *(void *)uint64_t v44 = &unk_1EE9DCEA8;
      *((void *)v44 + 1) = v10;
      *((void *)v44 + 2) = v53;
      *((void *)v44 + 3) = this;
      *((void *)v44 + 4) = v16;
      uint64_t v55 = v44;
      if (*((_DWORD *)this + 179))
      {
        uint64_t v46 = *((unsigned int *)this + 183);
        if (v46 == *((_DWORD *)this + 182))
        {
          WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::CompletionHandler<void ()(BOOL)>>((uint64_t)this + 720, (unint64_t)&v55);
        }
        else
        {
          uint64_t v49 = *((void *)this + 90);
          uint64_t v55 = 0;
          *(void *)(v49 + 8 * v46) = v44;
          *((_DWORD *)this + 183) = v46 + 1;
        }
        char v12 = v54;
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
        uint64_t v50 = (atomic_uint *)*((void *)this + 1);
        if (v50) {
          atomic_fetch_add(v50, 1u);
        }
        char v51 = (void *)WTF::fastMalloc((WTF *)0x10);
        *char v51 = &unk_1EE9DD670;
        v51[1] = v50;
        *(void *)buf = v51;
        WebKit::AuxiliaryProcessProxy::checkForResponsiveness((uint64_t)this, (uint64_t *)buf, 0);
        if (*(void *)buf) {
          (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
        }
        uint64_t v52 = v55;
        uint64_t v55 = 0;
        if (v52) {
          (*(void (**)(WTF::RunLoop *))(*(void *)v52 + 8))(v52);
        }
      }
      else
      {
        WTF::RunLoop::main(v44);
        uint64_t v47 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint64_t v47 = &unk_1EE9DD648;
        v47[1] = v45;
        *(void *)buf = v47;
        WTF::RunLoop::dispatch();
        uint64_t v48 = *(void *)buf;
        *(void *)buf = 0;
        if (v48) {
          (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
        }
        char v12 = v54;
      }
      goto LABEL_68;
    }
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v10 + 1);
    goto LABEL_51;
  }
  uint64_t v7 = *((void *)this + 64);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      uint64_t v9 = (WebKit::WebProcessPool *)(v8 - 16);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }

  WebKit::WebProcessPool::disconnectProcess(v9, this);
}

void WebKit::WebProcessProxy::addRemotePageProxy(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 136);
    if (v6) {
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    }
    *(_DWORD *)buf = 134218496;
    uint64_t v31 = a1;
    __int16 v32 = 1024;
    int v33 = v6;
    __int16 v34 = 2048;
    uint64_t v35 = a2;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::addRemotePageProxy: remotePage=%p", buf, 0x1Cu);
  }
  uint64_t v7 = (uint64_t *)(a1 + 560);
  unsigned int v8 = *(_DWORD *)(a1 + 568) + 1;
  *(_DWORD *)(a1 + 568) = v8;
  if (v8 > *(_DWORD *)(a1 + 572))
  {
    uint64_t v9 = *v7;
    if (*v7)
    {
      int v10 = *(_DWORD *)(v9 - 4);
      if (!v10) {
        goto LABEL_26;
      }
      int v11 = 0;
      unsigned int v12 = v10 - 1;
      do
      {
        uint64_t v13 = v12;
        uint64_t v14 = *(void *)(v9 + 8 * v12);
        if ((unint64_t)(v14 + 1) >= 2 && !*(void *)(v14 + 8))
        {
          *(void *)(v9 + 8 * v12) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v14);
            WTF::fastFree((WTF *)v14, v5);
          }
          *(void *)(v9 + 8 * v12) = -1;
          ++v11;
        }
        --v12;
      }
      while (v13);
      uint64_t v9 = *v7;
      if (v11)
      {
        *(_DWORD *)(v9 - 16) += v11;
        uint64_t v15 = *v7;
        if (*v7) {
          int v16 = *(_DWORD *)(v15 - 12);
        }
        else {
          int v16 = 0;
        }
        *(_DWORD *)(v15 - 12) = v16 - v11;
        uint64_t v9 = *v7;
      }
      if (v9)
      {
        unsigned int v17 = *(_DWORD *)(v9 - 4);
        if (v17 >= 9 && 6 * *(_DWORD *)(v9 - 12) < v17)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(a1 + 560));
          uint64_t v9 = *(void *)(a1 + 560);
          *(_DWORD *)(a1 + 568) = 0;
          if (!v9)
          {
            unsigned int v19 = 0;
            goto LABEL_30;
          }
          goto LABEL_29;
        }
LABEL_26:
        *(_DWORD *)(a1 + 568) = 0;
LABEL_29:
        unsigned int v19 = *(_DWORD *)(v9 - 12);
        int v20 = 0x7FFFFFFF;
        if (v19 >= 0x7FFFFFFF)
        {
LABEL_31:
          *(_DWORD *)(a1 + 572) = 2 * v20;
          goto LABEL_32;
        }
LABEL_30:
        int v20 = v19;
        goto LABEL_31;
      }
    }
    unsigned int v19 = 0;
    *(_DWORD *)(a1 + 568) = 0;
    goto LABEL_30;
  }
LABEL_32:
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  uint64_t v21 = *(atomic_uint **)(a2 + 8);
  atomic_fetch_add(v21, 1u);
  atomic_fetch_add(v21, 1u);
  unsigned int v29 = (WTF *)v21;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)(a1 + 560), &v29, (uint64_t)buf);
  uint64_t v23 = (unsigned int *)v29;
  unsigned int v29 = 0;
  if (v23 && atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v23);
    WTF::fastFree((WTF *)v23, v22);
  }
  if (v21 && atomic_fetch_add(v21, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v21);
    WTF::fastFree((WTF *)v21, v22);
  }
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    *(_OWORD *)algn_1EB35A7B8 = 0u;
  }
  WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, a1);
  uint64_t v25 = *(void *)(a2 + 32);
  if (v25 && (uint64_t v26 = *(void *)(v25 + 8)) != 0)
  {
    uint64_t v27 = v26 - 16;
    CFRetain(*(CFTypeRef *)(v26 - 8));
  }
  else
  {
    uint64_t v27 = 0;
  }
  if (!*(void *)(a1 + 1080))
  {
    unint64_t v28 = (unsigned char *)(a1 + 1080);
    if (WebKit::updateSharedPreferencesForWebProcess(v28, (WebKit::WebPreferencesStore *)(*(void *)(v27 + 272) + 40), v24))++*(void *)v28; {
    goto LABEL_47;
    }
  }
  if (v27) {
LABEL_47:
  }
    CFRelease(*(CFTypeRef *)(v27 + 8));
}

void WebKit::WebProcessProxy::removeRemotePageProxy(WebKit::WebProcessProxy *this, WebKit::RemotePageProxy *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *((void *)this + 17);
    if (v6) {
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    }
    *(_DWORD *)uint64_t v24 = 134218496;
    *(void *)&_DWORD v24[4] = this;
    __int16 v25 = 1024;
    int v26 = v6;
    __int16 v27 = 2048;
    unint64_t v28 = a2;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::removeRemotePageProxy: remotePage=%p", v24, 0x1Cu);
  }
  uint64_t v7 = (uint64_t *)((char *)this + 560);
  unsigned int v8 = *((_DWORD *)this + 142) + 1;
  *((_DWORD *)this + 142) = v8;
  if (v8 > *((_DWORD *)this + 143))
  {
    uint64_t v9 = *v7;
    if (*v7)
    {
      int v10 = *(_DWORD *)(v9 - 4);
      if (!v10) {
        goto LABEL_26;
      }
      int v11 = 0;
      unsigned int v12 = v10 - 1;
      do
      {
        uint64_t v13 = v12;
        uint64_t v14 = *(void *)(v9 + 8 * v12);
        if ((unint64_t)(v14 + 1) >= 2 && !*(void *)(v14 + 8))
        {
          *(void *)(v9 + 8 * v12) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v14);
            WTF::fastFree((WTF *)v14, v5);
          }
          *(void *)(v9 + 8 * v12) = -1;
          ++v11;
        }
        --v12;
      }
      while (v13);
      uint64_t v9 = *v7;
      if (v11)
      {
        *(_DWORD *)(v9 - 16) += v11;
        uint64_t v15 = *v7;
        if (*v7) {
          int v16 = *(_DWORD *)(v15 - 12);
        }
        else {
          int v16 = 0;
        }
        *(_DWORD *)(v15 - 12) = v16 - v11;
        uint64_t v9 = *v7;
      }
      if (v9)
      {
        unsigned int v17 = *(_DWORD *)(v9 - 4);
        if (v17 >= 9 && 6 * *(_DWORD *)(v9 - 12) < v17)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)this + 70);
          uint64_t v9 = *((void *)this + 70);
          *((_DWORD *)this + 142) = 0;
          if (!v9)
          {
            unsigned int v19 = 0;
            goto LABEL_30;
          }
          goto LABEL_29;
        }
LABEL_26:
        *((_DWORD *)this + 142) = 0;
LABEL_29:
        unsigned int v19 = *(_DWORD *)(v9 - 12);
        int v20 = 0x7FFFFFFF;
        if (v19 >= 0x7FFFFFFF)
        {
LABEL_31:
          *((_DWORD *)this + 143) = 2 * v20;
          goto LABEL_32;
        }
LABEL_30:
        int v20 = v19;
        goto LABEL_31;
      }
    }
    unsigned int v19 = 0;
    *((_DWORD *)this + 142) = 0;
    goto LABEL_30;
  }
LABEL_32:
  uint64_t v21 = *((void *)a2 + 1);
  if (!v21 || !*(void *)(v21 + 8)) {
    goto LABEL_41;
  }
  *(void *)uint64_t v24 = *((void *)a2 + 1);
  uint64_t v22 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)this + 70, v24);
  if (*v7)
  {
    uint64_t v23 = *v7 + 8 * *(unsigned int *)(*v7 - 4);
    if ((unsigned int **)v23 == v22) {
      goto LABEL_41;
    }
  }
  else
  {
    if (!v22) {
      goto LABEL_41;
    }
    uint64_t v23 = 0;
  }
  if ((unsigned int **)v23 != v22) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)this + 70, v22);
  }
LABEL_41:
  if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)this + 70)) {
    WebKit::WebProcessProxy::maybeShutDown(this);
  }
}

uint64_t WebKit::WebProcessProxy::shouldEnableLockdownMode(WebKit::WebProcessProxy *this)
{
  return *((unsigned __int8 *)this + 779);
}

uint64_t IPC::Decoder::decode<WebKit::LoadParameters>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::LoadParameters,void>::decode(a1, a2);
  if (!a2[584])
  {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void IPC::Decoder::decode<WebKit::GoToBackForwardItemParameters>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebKit::GoToBackForwardItemParameters,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 200))
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void WebKit::WebProcessProxy::processWillShutDown(WebKit::WebProcessProxy *this, IPC::Connection *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *((void *)this + 17);
    if (v4) {
      LODWORD(v4) = *(_DWORD *)(v4 + 108);
    }
    int v5 = 134218240;
    uint64_t v6 = this;
    __int16 v7 = 1024;
    int v8 = v4;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::processWillShutDown:", (uint8_t *)&v5, 0x12u);
  }
}

uint64_t WebKit::WebProcessProxy::webPage@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  WebKit::WebProcessProxy::globalPages((uint64_t)&v10);
  if (v11)
  {
    int v5 = v10;
    uint64_t v6 = 8 * v11;
    while (1)
    {
      uint64_t v7 = *v5;
      CFRetain(*(CFTypeRef *)(*v5 + 8));
      if (*(void *)(*(void *)(v7 + 32) + 1928) == a1) {
        break;
      }
      CFRelease(*(CFTypeRef *)(v7 + 8));
      ++v5;
      v6 -= 8;
      if (!v6) {
        goto LABEL_5;
      }
    }
    *a2 = v7;
    return WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v8);
  }
  else
  {
LABEL_5:
    uint64_t result = WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v4);
    *a2 = 0;
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::audioCapturingWebPage@<X0>(void *a1@<X8>)
{
  WebKit::WebProcessProxy::globalPages((uint64_t)&v10);
  if (v11)
  {
    uint64_t v4 = v10;
    uint64_t v5 = 8 * v11;
    while (1)
    {
      uint64_t v6 = *v4;
      CFRetain(*(CFTypeRef *)(*v4 + 8));
      uint64_t v7 = *(const void **)(v6 + 8);
      if ((*(unsigned char *)(*(void *)(v6 + 32) + 825) & 8) != 0) {
        break;
      }
      CFRelease(v7);
      ++v4;
      v5 -= 8;
      if (!v5) {
        goto LABEL_5;
      }
    }
    CFRetain(v7);
    *a1 = v6;
    CFRelease(*(CFTypeRef *)(v6 + 8));
    return WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v9);
  }
  else
  {
LABEL_5:
    uint64_t result = WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v3);
    *a1 = 0;
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebProcess::SetThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  unsigned int v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v12 = 2693;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  __int16 v25 = v12;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9DD4E0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unsigned int v19 = v25;
  __int16 v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void WebKit::WebProcessProxy::removeWebPage(uint64_t a1, WebKit::WebPageProxy *a2, int a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 136);
    if (v7) {
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    }
    uint64_t v8 = *((void *)a2 + 4);
    uint64_t v9 = *(void *)(v8 + 760);
    uint64_t v10 = *(void *)(v8 + 1928);
    *(_DWORD *)uint64_t v31 = 134219008;
    *(void *)&v31[4] = a1;
    __int16 v32 = 1024;
    int v33 = v7;
    __int16 v34 = 2048;
    uint64_t v35 = a2;
    __int16 v36 = 2048;
    uint64_t v37 = v9;
    __int16 v38 = 2048;
    uint64_t v39 = v10;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::removeWebPage: webPage=%p, pageProxyID=%llu, webPageID=%llu", v31, 0x30u);
  }
  unsigned int v11 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 552), *(void *)(*((void *)a2 + 4) + 760));
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::take((uint64_t *)v31, (uint64_t *)(a1 + 552), v11);
  uint64_t v13 = *(unsigned int **)v31;
  if (*(void *)v31)
  {
    uint64_t v14 = *(void *)(*(void *)v31 + 8);
    BOOL v15 = v14 == 0;
    if (v14)
    {
      uint64_t v16 = v14 - 16;
      CFRetain(*(CFTypeRef *)(v14 - 8));
    }
    else
    {
      uint64_t v16 = 0;
    }
    *(void *)uint64_t v31 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v12);
    }
  }
  else
  {
    uint64_t v16 = 0;
    BOOL v15 = 1;
  }
  {
    uint64_t v17 = WebKit::WebProcessProxy::globalPageMap(void)::pageMap;
  }
  else
  {
    uint64_t v17 = 0;
    WebKit::WebProcessProxy::globalPageMap(void)::pageMap = 0;
  }
  uint64_t v18 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v17, *(void *)(*((void *)a2 + 4) + 760));
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::take((uint64_t *)v31, &WebKit::WebProcessProxy::globalPageMap(void)::pageMap, v18);
  int v20 = *(unsigned int **)v31;
  if (*(void *)v31 && (uint64_t v21 = *(void *)(*(void *)v31 + 8)) != 0)
  {
    uint64_t v22 = v21 - 16;
    CFRetain(*(CFTypeRef *)(v21 - 8));
    char v23 = 0;
  }
  else
  {
    uint64_t v22 = 0;
    char v23 = 1;
  }
  if (!v15) {
    CFRelease(*(CFTypeRef *)(v16 + 8));
  }
  *(void *)uint64_t v31 = 0;
  if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v20);
    WTF::fastFree((WTF *)v20, v19);
  }
  uint64_t v24 = WebKit::WebProcessProxy::logger((WebKit::WebProcessProxy *)a1);
  char isAlwaysOnLoggingAllowed = WebKit::WebProcessProxy::isAlwaysOnLoggingAllowed((WebKit::WebProcessProxy *)a1);
  if (*(void *)(v24 + 16) == a1) {
    *(unsigned char *)(v24 + 12) = isAlwaysOnLoggingAllowed;
  }
  WebKit::WebProcessProxy::reportProcessDisassociatedWithPageIfNecessary(a1, *(void *)(*((void *)a2 + 4) + 760));
  if (a3)
  {
    uint64_t v26 = *(void *)(a1 + 512);
    if (v26)
    {
      uint64_t v27 = *(void *)(v26 + 8);
      if (v27) {
        unint64_t v28 = (CFTypeRef *)(v27 - 16);
      }
      else {
        unint64_t v28 = 0;
      }
    }
    else
    {
      unint64_t v28 = 0;
    }
    CFRetain(v28[1]);
    uint64_t v29 = (CFTypeRef *)*((void *)a2 + 39);
    CFRetain(v29[1]);
    WebKit::WebProcessPool::pageEndUsingWebsiteDataStore((WebKit::WebProcessPool *)v28, a2, (WebKit::WebsiteDataStore *)v29);
    CFRelease(v29[1]);
    CFRelease(v28[1]);
  }
  uint64_t v30 = (CFTypeRef *)*((void *)a2 + 38);
  CFRetain(v30[1]);
  WebKit::WebProcessProxy::removeVisitedLinkStoreUser((uint64_t *)a1, (WebKit::VisitedLinkStore *)v30, *(void *)(*((void *)a2 + 4) + 760));
  CFRelease(v30[1]);
  WebKit::WebProcessProxy::updateRegistrationWithDataStore((WebKit::WebProcessProxy *)a1);
  WebKit::WebProcessProxy::updateAudibleMediaAssertions((atomic_uchar *)a1);
  WebKit::WebProcessProxy::updateMediaStreamingActivity((WebKit::WebProcessProxy *)a1);
  WebKit::BackgroundProcessResponsivenessTimer::updateState((WebKit::BackgroundProcessResponsivenessTimer *)(a1 + 416));
  WebKit::WebsiteDataStore::updateBlobRegistryPartitioningState(*(WebKit::WebsiteDataStore **)(a1 + 752));
  WebKit::WebProcessProxy::maybeShutDown((WebKit::WebProcessProxy *)a1);
  if ((v23 & 1) == 0) {
    CFRelease(*(CFTypeRef *)(v22 + 8));
  }
}

unsigned __int8 *WebKit::WebProcessProxy::removeVisitedLinkStoreUser(uint64_t *a1, WebKit::VisitedLinkStore *a2, uint64_t a3)
{
  uint64_t v22 = a3;
  uint64_t v5 = (uint64_t)(a1 + 78);
  WTF::WeakHashMap<WebKit::VisitedLinkStore,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find(a1 + 78, (uint64_t)a2, (uint64_t)v21);
  uint64_t v6 = a1[78];
  if (v6)
  {
    uint64_t v7 = *(unsigned int *)(v6 - 4);
    uint64_t v8 = v6 + 16 * v7;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  uint64_t v15 = v5;
  uint64_t v16 = v8;
  uint64_t v17 = v8;
  uint64_t v18 = v8;
  uint64_t v19 = v6 + 16 * v7;
  int v20 = 0;
  uint64_t result = (unsigned __int8 *)WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v15);
  uint64_t v10 = *((void *)&v21[0] + 1);
  if (*((void *)&v21[0] + 1) != v16)
  {
    unsigned int v11 = (uint64_t *)(*((void *)&v21[0] + 1) + 8);
    uint64_t result = (unsigned __int8 *)WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(*((void *)&v21[0] + 1) + 8), &v22);
    uint64_t v12 = *(void *)(v10 + 8);
    if (v12)
    {
      uint64_t v13 = (unsigned __int8 *)(v12 + 8 * *(unsigned int *)(v12 - 4));
      if (v13 == result) {
        goto LABEL_13;
      }
    }
    else
    {
      if (!result) {
        goto LABEL_14;
      }
      uint64_t v13 = 0;
    }
    if (v13 != result)
    {
      uint64_t result = (unsigned __int8 *)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove((uint64_t *)(v10 + 8), result);
      uint64_t v12 = *v11;
    }
    if (v12)
    {
LABEL_13:
      if (*(_DWORD *)(v12 - 12)) {
        return result;
      }
    }
LABEL_14:
    v14[0] = v21[0];
    v14[1] = v21[1];
    void v14[2] = v21[2];
    WTF::WeakHashMap<WebKit::VisitedLinkStore,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::remove(v5, (uint64_t)v14);
    return WebKit::VisitedLinkStore::removeProcess(a2, (WebKit::WebProcessProxy *)a1);
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::updateAudibleMediaAssertions(atomic_uchar *this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t result = WebCore::PlatformMediaSessionManager::mediaCapabilityGrantsEnabled((WebCore::PlatformMediaSessionManager *)this);
  if (result) {
    return result;
  }
  WebKit::WebProcessProxy::pages((WebKit::WebProcessProxy *)this, (uint64_t)buf);
  if (v31[0])
  {
    uint64_t v4 = *(uint64_t **)buf;
    uint64_t v5 = 8 * v31[0] - 8;
    do
    {
      uint64_t v6 = *v4++;
      int v7 = *(_DWORD *)(*(void *)(v6 + 32) + 824) & 1;
      if (v7) {
        break;
      }
      uint64_t v8 = v5;
      v5 -= 8;
    }
    while (v8);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t result = WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v3);
  if (v7 == (this[984] != 0)) {
    return result;
  }
  uint64_t v9 = (uint64_t *)(this + 968);
  uint64_t v10 = qword_1EB358348;
  BOOL v11 = os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (v11)
    {
      uint64_t v13 = *((void *)this + 17);
      if (v13) {
        LODWORD(v13) = *(_DWORD *)(v13 + 108);
      }
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = this;
      LOWORD(v31[0]) = 1024;
      *(_DWORD *)((char *)v31 + 2) = v13;
      _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::updateAudibleMediaAssertions: Taking MediaPlayback assertion for WebProcess", buf, 0x12u);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v29 = 0;
    uint64_t v14 = WTF::fastMalloc((WTF *)0xB0);
    uint64_t v15 = WebKit::ProcessAssertion::ProcessAssertion(v14, this, (_DWORD **)buf, 4);
    WebKit::ProcessAssertion::acquireAsync(v15, &v29);
    uint64_t v17 = *(void *)(*((void *)this + 64) + 8);
    if (v17) {
      uint64_t v18 = v17 - 16;
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = *(void *)(v18 + 800);
    if (v19)
    {
      int v20 = *(void **)v19;
      ++*(void *)(v19 + 8);
      if (v20)
      {
        if (*v20) {
          (*(void (**)(void, uint64_t))(*(void *)*v20 + 16))(*v20, 1);
        }
      }
    }
    if (this[984])
    {
      uint64_t v21 = *v9;
      *uint64_t v9 = v14;
      if (v21) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v21 + 8), v16);
      }
      uint64_t v22 = *((void *)this + 122);
      *((void *)this + 122) = v19;
      if (!v22) {
        goto LABEL_37;
      }
      char v23 = *(uint64_t **)v22;
      uint64_t v24 = *(void *)(v22 + 8) - 1;
      *(void *)(v22 + 8) = v24;
      if (!v23) {
        goto LABEL_29;
      }
      uint64_t v25 = *v23;
      if (*v23)
      {
        char v26 = *(unsigned char *)(v22 + 16);
        *(unsigned char *)(v22 + 16) = 1;
        (*(void (**)(uint64_t, void))(*(void *)v25 + 16))(v25, 0);
        *(unsigned char *)(v22 + 16) = v26;
        if (!*(void *)v22)
        {
          uint64_t v24 = *(void *)(v22 + 8);
LABEL_29:
          if (!v24) {
            MEMORY[0x199740C10](v22, 0x1020C40545B2139);
          }
        }
      }
    }
    else
    {
      *((void *)this + 121) = v14;
      *((void *)this + 122) = v19;
      this[984] = 1;
    }
LABEL_37:
    uint64_t v28 = v29;
    uint64_t v29 = 0;
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    }
    uint64_t result = *(void *)buf;
    *(void *)buf = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v16);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  if (v11)
  {
    uint64_t v27 = *((void *)this + 17);
    if (v27) {
      LODWORD(v27) = *(_DWORD *)(v27 + 108);
    }
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = this;
    LOWORD(v31[0]) = 1024;
    *(_DWORD *)((char *)v31 + 2) = v27;
    _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::updateAudibleMediaAssertions: Releasing MediaPlayback assertion for WebProcess", buf, 0x12u);
  }
  return (uint64_t)std::__optional_destruct_base<WebKit::WebProcessProxy::AudibleMediaActivity,false>::reset[abi:sn180100](this + 968, v12);
}

void WebKit::WebProcessProxy::updateMediaStreamingActivity(WebKit::WebProcessProxy *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  WebKit::WebProcessProxy::pages(this, (uint64_t)v23);
  if (v24[0])
  {
    uint64_t v3 = *(uint64_t **)v23;
    uint64_t v4 = 8 * v24[0] - 8;
    do
    {
      uint64_t v5 = *v3++;
      unsigned int v6 = *(_DWORD *)(*(void *)(v5 + 32) + 824);
      int v7 = (v6 >> 27) & 1;
      if ((v6 & 0x8000000) != 0) {
        break;
      }
      uint64_t v8 = v4;
      v4 -= 8;
    }
    while (v8);
  }
  else
  {
    int v7 = 0;
  }
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v2);
  if (v7 != (*((unsigned char *)this + 1000) != 0))
  {
    uint64_t v9 = (uint64_t *)((char *)this + 992);
    uint64_t v10 = qword_1EB358348;
    BOOL v11 = os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v11)
      {
        uint64_t v12 = *((void *)this + 17);
        if (v12) {
          LODWORD(v12) = *(_DWORD *)(v12 + 108);
        }
        *(_DWORD *)char v23 = 134218240;
        *(void *)&float v23[4] = this;
        LOWORD(v24[0]) = 1024;
        *(_DWORD *)((char *)v24 + 2) = v12;
        _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::updateMediaStreamingActivity: Start Media Networking Activity for WebProcess", v23, 0x12u);
      }
      uint64_t v13 = *(void *)(*((void *)this + 64) + 8);
      if (v13) {
        uint64_t v14 = v13 - 16;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = *(void *)(v14 + 872);
      if (v15)
      {
        uint64_t v16 = *(void **)v15;
        ++*(void *)(v15 + 8);
        if (v16)
        {
          if (*v16) {
            (*(void (**)(void, uint64_t))(*(void *)*v16 + 16))(*v16, 1);
          }
        }
      }
      if (!*((unsigned char *)this + 1000))
      {
        *((void *)this + 124) = v15;
        *((unsigned char *)this + 100WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 1;
        return;
      }
      uint64_t v17 = *v9;
      *uint64_t v9 = v15;
      if (!v17) {
        return;
      }
      uint64_t v18 = *(uint64_t **)v17;
      uint64_t v19 = *(void *)(v17 + 8) - 1;
      *(void *)(v17 + 8) = v19;
      if (!v18) {
        goto LABEL_26;
      }
      uint64_t v20 = *v18;
      if (*v18)
      {
        char v21 = *(unsigned char *)(v17 + 16);
        *(unsigned char *)(v17 + 16) = 1;
        (*(void (**)(uint64_t, void))(*(void *)v20 + 16))(v20, 0);
        *(unsigned char *)(v17 + 16) = v21;
        if (!*(void *)v17)
        {
          uint64_t v19 = *(void *)(v17 + 8);
LABEL_26:
          if (!v19) {
            MEMORY[0x199740C10](v17, 0x1020C40545B2139);
          }
        }
      }
    }
    else
    {
      if (v11)
      {
        uint64_t v22 = *((void *)this + 17);
        if (v22) {
          LODWORD(v22) = *(_DWORD *)(v22 + 108);
        }
        *(_DWORD *)char v23 = 134218240;
        *(void *)&float v23[4] = this;
        LOWORD(v24[0]) = 1024;
        *(_DWORD *)((char *)v24 + 2) = v22;
        _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::updateMediaStreamingActivity: Stop Media Networking Activity for WebProcess", v23, 0x12u);
      }
      std::__optional_destruct_base<WTF::RefPtr<WTF::RefCounter<WebKit::WebProcessWithMediaStreamingCounterType>::Count,WTF::RawPtrTraits<WTF::RefCounter<WebKit::WebProcessWithMediaStreamingCounterType>::Count>,WTF::DefaultRefDerefTraits<WTF::RefCounter<WebKit::WebProcessWithMediaStreamingCounterType>::Count>>,false>::reset[abi:sn180100]((unsigned char *)this + 992);
    }
  }
}

void *WTF::WeakHashMap<WebKit::VisitedLinkStore,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  ++*((_DWORD *)a1 + 2);
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5 && *(void *)(v5 + 8))
  {
    uint64_t v6 = *a1;
    if (*a1)
    {
      unsigned int v7 = *(_DWORD *)(v6 - 8);
      int v8 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a2 + 24));
      for (i = 0; ; int v8 = i + v10)
      {
        uint64_t v10 = v8 & v7;
        uint64_t v11 = *(void *)(v6 + 16 * v10);
        if (v11 != -1)
        {
          if (!v11)
          {
            uint64_t v16 = *a1;
            if (*a1)
            {
              uint64_t v18 = *(unsigned int *)(v16 - 4);
              uint64_t v19 = v16 + 16 * v18;
              goto LABEL_20;
            }
            uint64_t v19 = 0;
            goto LABEL_19;
          }
          if (v11 == v5) {
            break;
          }
        }
        ++i;
      }
      uint64_t v19 = v6 + 16 * v10;
      uint64_t v16 = *a1;
      if (*a1)
      {
        uint64_t v18 = *(unsigned int *)(v16 - 4);
        goto LABEL_20;
      }
LABEL_19:
      uint64_t v18 = 0;
LABEL_20:
      *(void *)a3 = a1;
      *(void *)(a3 + 8) = v19;
      *(void *)(a3 + 16) = v16 + 16 * v18;
      if (v16)
      {
        uint64_t v17 = *(unsigned int *)(v16 - 4);
        uint64_t v14 = v16 + 16 * v17;
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v17 = 0;
      }
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v14 = 0;
      uint64_t v17 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = a1;
    }
    uint64_t v15 = v16 + 16 * v17;
  }
  else
  {
    uint64_t v12 = *a1;
    if (*a1)
    {
      uint64_t v13 = *(unsigned int *)(v12 - 4);
      uint64_t v14 = v12 + 16 * v13;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v13 = 0;
    }
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = v14;
    uint64_t v15 = v12 + 16 * v13;
    *(void *)(a3 + 16) = v14;
  }
  *(void *)(a3 + 24) = v14;
  *(void *)(a3 + 32) = v15;
  *(_DWORD *)(a3 + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;

  return WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets((void *)a3);
}

uint64_t WTF::WeakHashMap<WebKit::VisitedLinkStore,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::remove(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  if (*(void *)a1)
  {
    uint64_t v4 = *(void *)a1 + 16 * *(unsigned int *)(*(void *)a1 - 4);
    if ((void *)v4 == v3) {
      goto LABEL_9;
    }
  }
  else
  {
    if (!v3)
    {
LABEL_9:
      uint64_t v5 = 0;
      goto LABEL_10;
    }
    uint64_t v4 = 0;
  }
  if ((void *)v4 != v3) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)a1, v3);
  }
  uint64_t v5 = 1;
LABEL_10:
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (v6 > v7) {
    WTF::WeakHashMap<WebKit::VisitedLinkStore,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences(a1, v3);
  }
  return v5;
}

WTF::StringImpl *WebKit::WebProcessProxy::assumeReadAccessToBaseURL(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, WTF::StringImpl **a4, int a5)
{
  WTF::URL::URL((uint64_t)v46, a3);
  if (WTF::URL::protocolIs())
  {
    WTF::URL::truncatedForUseAsBase((uint64_t *)v43, (WTF::URL *)v46);
    WTF::URL::fileSystemPath((uint64_t *)&v45, (WTF::URL *)v43);
    uint64_t v10 = v43[0];
    v43[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    if (v45 && (uint64_t v13 = *(CFTypeRef **)(a1 + 752)) != 0)
    {
      CFRetain(v13[1]);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
      uint64_t v14 = *(atomic_uint **)(a1 + 8);
      if (v14) {
        atomic_fetch_add(v14, 1u);
      }
      v43[0] = (WTF::StringImpl *)v14;
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
      uint64_t v15 = *(atomic_uint **)(a2 + 24);
      if (v15) {
        atomic_fetch_add(v15, 1u);
      }
      v43[1] = (WTF::StringImpl *)v15;
      uint64_t v16 = v45;
      if (v45) {
        *(_DWORD *)v45 += 2;
      }
      uint64_t v17 = *a4;
      *a4 = 0;
      v44[0] = v16;
      v44[1] = v17;
      if ((WTF::linkedOnOrAfterSDKWithBehavior() & 1) != 0 && !a5)
      {
        uint64_t v26 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v13);
        uint64_t v42 = *(void *)(a1 + 176);
        uint64_t v27 = WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v27 = 366;
        *(void *)(v27 + 8) = 0;
        *(void *)(v27 + 528) = v27 + 16;
        *(void *)(v27 + 536) = 512;
        *(void *)(v27 + 544) = 0;
        *(_OWORD *)(v27 + 552) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v27);
        uint64_t v47 = (IPC::Encoder *)v27;
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode((IPC::Encoder *)v27, &v42);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((IPC::Encoder *)v27, (uint64_t *)&v45);
        long long v40 = *(_OWORD *)v44;
        long long v41 = *(_OWORD *)v43;
        *(_OWORD *)uint64_t v43 = 0u;
        *(_OWORD *)uint64_t v44 = 0u;
        uint64_t v28 = WTF::fastMalloc((WTF *)0x28);
        *(void *)uint64_t v28 = &unk_1EE9DD508;
        *(_OWORD *)(v28 + 8) = v41;
        *(_OWORD *)(v28 + 24) = v40;
        uint64_t v29 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        v48[0] = v28;
        v48[1] = v29;
        char v49 = 1;
        WebKit::AuxiliaryProcessProxy::sendMessage(v26, &v47, 0, (uint64_t)v48, 1);
        if (v49)
        {
          uint64_t v30 = v48[0];
          v48[0] = 0;
          if (v30) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
        }
        uint64_t v31 = v47;
        uint64_t v47 = 0;
        if (v31)
        {
          IPC::Encoder::~Encoder(v31, v24);
          WTF::fastFree(v38, v39);
        }
      }
      else
      {
        if (v43[0])
        {
          uint64_t v19 = *((void *)v43[0] + 1);
          if (v19)
          {
            if (v43[1] && *((void *)v43[1] + 1))
            {
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v19 + 536), v44, v18, (uint64_t)v48);
              char v21 = v43[1];
              if (v43[1])
              {
                uint64_t v22 = *((void *)v43[1] + 1);
                if (v22) {
                  char v21 = (WTF::StringImpl *)(v22 - 16);
                }
                else {
                  char v21 = 0;
                }
              }
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)v21 + 147, v44, v20, (uint64_t)v48);
            }
          }
        }
        char v23 = v44[1];
        v44[1] = 0;
        (*(void (**)(WTF::StringImpl *))(*(void *)v23 + 16))(v23);
        (*(void (**)(WTF::StringImpl *))(*(void *)v23 + 8))(v23);
      }
      uint64_t v32 = v44[1];
      v44[1] = 0;
      if (v32) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v32 + 8))(v32);
      }
      int v33 = v44[0];
      v44[0] = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2) {
          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v24);
        }
        else {
          *(_DWORD *)v33 -= 2;
        }
      }
      __int16 v34 = (unsigned int *)v43[1];
      v43[1] = 0;
      if (v34 && atomic_fetch_add((atomic_uint *volatile)v34, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v34);
        WTF::fastFree((WTF *)v34, v24);
      }
      uint64_t v35 = (unsigned int *)v43[0];
      v43[0] = 0;
      if (v35 && atomic_fetch_add((atomic_uint *volatile)v35, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v35);
        WTF::fastFree((WTF *)v35, v24);
      }
      CFRelease(v13[1]);
    }
    else
    {
      uint64_t v25 = *a4;
      *a4 = 0;
      (*(void (**)(WTF::StringImpl *))(*(void *)v25 + 16))(v25);
      (*(void (**)(WTF::StringImpl *))(*(void *)v25 + 8))(v25);
    }
    __int16 v36 = v45;
    uint64_t v45 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v12);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
  else
  {
    uint64_t v11 = *a4;
    *a4 = 0;
    (*(void (**)(WTF::StringImpl *))(*(void *)v11 + 16))(v11);
    (*(void (**)(WTF::StringImpl *))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v46[0];
  v46[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::WebProcessProxy::assumeReadAccessToBaseURLs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(CFTypeRef **)(a1 + 752);
  if (v5)
  {
    CFRetain(v5[1]);
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v9 = *(unsigned int *)(a3 + 12);
    if (v9)
    {
      uint64_t v10 = *(WTF::StringImpl ***)a3;
      uint64_t v11 = 8 * v9;
      while (1)
      {
        WTF::URL::URL((uint64_t)&v55, v10);
        if (WTF::URL::protocolIs())
        {
          WTF::URL::truncatedForUseAsBase((uint64_t *)v48, (WTF::URL *)&v55);
          WTF::URL::fileSystemPath((uint64_t *)&v54, (WTF::URL *)v48);
          uint64_t v13 = v48[0];
          v48[0] = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, v12);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
          uint64_t v15 = v54;
          if (v54)
          {
            uint64_t v16 = HIDWORD(v53);
            if (HIDWORD(v53) == v53)
            {
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v52, (unint64_t)&v54);
              int v14 = 0;
            }
            else
            {
              int v14 = 0;
              uint64_t v17 = v52;
              *(_DWORD *)v54 += 2;
              *(void *)(v17 + 8 * v16) = v15;
              HIDWORD(v53) = v16 + 1;
            }
          }
          else
          {
            uint64_t v18 = *a4;
            *a4 = 0;
            (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
            (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
            int v14 = 1;
          }
          uint64_t v19 = v54;
          char v54 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, v12);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
        }
        else
        {
          int v14 = 3;
        }
        uint64_t v20 = v55;
        uint64_t v55 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2) {
            WTF::StringImpl::destroy(v20, v12);
          }
          else {
            *(_DWORD *)v20 -= 2;
          }
        }
        if (v14 != 3 && v14) {
          break;
        }
        ++v10;
        v11 -= 8;
        if (!v11)
        {
          if (!HIDWORD(v53) || (WTF::linkedOnOrAfterSDKWithBehavior() & 1) == 0) {
            goto LABEL_52;
          }
          uint64_t v21 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v5);
          uint64_t v47 = *(void *)(a1 + 176);
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
          uint64_t v22 = *(atomic_uint **)(a1 + 8);
          if (v22) {
            atomic_fetch_add(v22, 1u);
          }
          v48[0] = (WTF::StringImpl *)v22;
          WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
          char v23 = *(atomic_uint **)(a2 + 24);
          if (v23) {
            atomic_fetch_add(v23, 1u);
          }
          v48[1] = (WTF::StringImpl *)v23;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v49, (uint64_t)&v52);
          uint64_t v24 = *a4;
          *a4 = 0;
          uint64_t v51 = v24;
          uint64_t v25 = WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v25 = 367;
          *(void *)(v25 + 8) = 0;
          *(void *)(v25 + 528) = v25 + 16;
          *(void *)(v25 + 536) = 512;
          *(void *)(v25 + 544) = 0;
          *(_OWORD *)(v25 + 552) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v25);
          char v54 = (WTF::StringImpl *)v25;
          IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode((IPC::Encoder *)v25, &v47);
          IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v25, (uint64_t)&v52);
          uint64_t v26 = v49;
          uint64_t v49 = 0;
          uint64_t v27 = v51;
          uint64_t v51 = 0;
          uint64_t v28 = v50;
          uint64_t v50 = 0;
          long long v46 = *(_OWORD *)v48;
          *(_OWORD *)uint64_t v48 = 0u;
          uint64_t v29 = WTF::fastMalloc((WTF *)0x30);
          *(void *)uint64_t v29 = &unk_1EE9DD530;
          uint64_t v55 = 0;
          *(_OWORD *)(v29 + 8) = v46;
          *(_OWORD *)char v56 = 0u;
          *(void *)(v29 + 24) = v26;
          uint64_t v57 = 0;
          *(void *)(v29 + 32) = v28;
          *(void *)(v29 + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v27;
          uint64_t v58 = 0;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56[1], v30);
          uint64_t v32 = (unsigned int *)v56[0];
          v56[0] = 0;
          if (v32 && atomic_fetch_add((atomic_uint *volatile)v32, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v32);
            WTF::fastFree((WTF *)v32, v31);
          }
          int v33 = (unsigned int *)v55;
          uint64_t v55 = 0;
          if (v33 && atomic_fetch_add((atomic_uint *volatile)v33, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v33);
            WTF::fastFree((WTF *)v33, v31);
          }
          __int16 v34 = (WTF *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
          uint64_t v55 = (WTF::StringImpl *)v29;
          v56[0] = v34;
          LOBYTE(v56[1]) = 1;
          WebKit::AuxiliaryProcessProxy::sendMessage(v21, &v54, 0, (uint64_t)&v55, 1);
          if (LOBYTE(v56[1]))
          {
            __int16 v36 = v55;
            uint64_t v55 = 0;
            if (v36) {
              (*(void (**)(WTF::StringImpl *))(*(void *)v36 + 8))(v36);
            }
          }
          uint64_t v37 = v54;
          char v54 = 0;
          if (v37)
          {
            IPC::Encoder::~Encoder(v37, v35);
            WTF::fastFree(v42, v43);
          }
          uint64_t v38 = v51;
          uint64_t v51 = 0;
          if (v38) {
            (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
          }
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v35);
          uint64_t v39 = (unsigned int *)v48[1];
          v48[1] = 0;
          if (v39 && atomic_fetch_add((atomic_uint *volatile)v39, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v39);
            WTF::fastFree((WTF *)v39, v12);
          }
          long long v40 = (unsigned int *)v48[0];
          v48[0] = 0;
          if (v40)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v40, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v40);
              WTF::fastFree((WTF *)v40, v12);
            }
          }
          break;
        }
      }
    }
    else
    {
LABEL_52:
      uint64_t v41 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t))(*(void *)v41 + 16))(v41);
      (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v12);
    CFRelease(v5[1]);
  }
  else
  {
    uint64_t v44 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
    uint64_t v45 = *(void (**)(uint64_t))(*(void *)v44 + 8);
    v45(v44);
  }
}

BOOL WebKit::WebProcessProxy::hasAssumedReadAccessToURL(WebKit::WebProcessProxy *this, const WTF::URL *a2)
{
  if (!WTF::URL::protocolIs()) {
    return 0;
  }
  uint64_t v4 = (WebKit::WebProcessProxy *)WTF::URL::fileSystemPath((uint64_t *)&v23, a2);
  Access = WebKit::WebProcessProxy::platformPathsWithAssumedReadAccess(v4);
  if (!*((_DWORD *)Access + 3)) {
    goto LABEL_24;
  }
  uint64_t v6 = *((unsigned int *)Access + 2);
  if (v6)
  {
    uint64_t v7 = 8 * v6;
    int v8 = (uint64_t *)*Access;
    while (!*v8)
    {
      ++v8;
      v7 -= 8;
      if (!v7) {
        goto LABEL_24;
      }
    }
  }
  else
  {
    int v8 = (uint64_t *)*Access;
  }
  uint64_t v10 = *Access + 8 * v6;
  if (v8 == (uint64_t *)v10) {
    goto LABEL_24;
  }
  uint64_t v11 = *v8;
LABEL_12:
  if (v11)
  {
    uint64_t v12 = *(WTF::StringImpl **)(v11 + 8);
    int v13 = *(_DWORD *)(v11 + 4);
  }
  else
  {
    uint64_t v12 = 0;
    int v13 = 0;
  }
  if (v23)
  {
    if ((WTF::StringImpl::startsWith() & 1) == 0) {
      goto LABEL_16;
    }
  }
  else if (v13)
  {
LABEL_16:
    while (1)
    {
      if (++v8 == (uint64_t *)v10) {
        goto LABEL_24;
      }
      uint64_t v11 = *v8;
      if (*v8)
      {
        if (v8 != (uint64_t *)v10) {
          goto LABEL_12;
        }
        goto LABEL_24;
      }
    }
  }
  if (v8 == (uint64_t *)v10)
  {
LABEL_24:
    uint64_t v14 = *((void *)this + 67);
    if (v14) {
      uint64_t v15 = (WTF::StringImpl *)(v14 + 8 * *(unsigned int *)(v14 - 4));
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)this + 67);
    uint64_t v17 = v15;
    if (v15 != v16)
    {
      uint64_t v18 = v12;
      uint64_t v17 = v16;
      while (1)
      {
        uint64_t v19 = *(void *)v17;
        if (*(void *)v17)
        {
          uint64_t v12 = *(WTF::StringImpl **)(v19 + 8);
          int v20 = *(_DWORD *)(v19 + 4);
        }
        else
        {
          uint64_t v12 = 0;
          int v20 = 0;
        }
        if (v23) {
          break;
        }
        if (!v20) {
          goto LABEL_40;
        }
LABEL_32:
        while (1)
        {
          uint64_t v17 = (WTF::StringImpl *)((char *)v17 + 8);
          if (v17 == v18) {
            break;
          }
          if ((unint64_t)(*(void *)v17 + 1) > 1) {
            goto LABEL_36;
          }
        }
        uint64_t v17 = v18;
LABEL_36:
        if (v17 == v15)
        {
          uint64_t v17 = v15;
          goto LABEL_40;
        }
      }
      if ((WTF::StringImpl::startsWith() & 1) == 0) {
        goto LABEL_32;
      }
    }
LABEL_40:
    BOOL v9 = v17 != v15;
    goto LABEL_41;
  }
  BOOL v9 = 1;
LABEL_41:
  uint64_t v21 = v23;
  char v23 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v12);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  return v9;
}

BOOL WebKit::WebProcessProxy::checkURLReceivedFromWebProcess(uint64_t a1, uint64_t a2, int a3)
{
  v11[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v11);
  MEMORY[0x19972E8B0](v12, v11, a2, 0);
  BOOL v7 = WebKit::WebProcessProxy::checkURLReceivedFromWebProcess(a1, (const WTF::URL *)v12, a3);
  int v8 = v12[0];
  v12[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  BOOL v9 = v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v6);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  return v7;
}

BOOL WebKit::WebProcessProxy::checkURLReceivedFromWebProcess(uint64_t a1, const WTF::URL *a2, int a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (!WTF::URL::protocolIs()
    || *(unsigned char *)(a1 + 528)
    || WebKit::WebProcessProxy::hasAssumedReadAccessToURL((WebKit::WebProcessProxy *)a1, a2))
  {
    return 1;
  }
  if (!a3) {
    goto LABEL_61;
  }
  uint64_t v6 = (WebKit::WebBackForwardListItem *)WTF::URL::fileSystemPath((uint64_t *)&v33, a2);
  BOOL v7 = WebKit::WebBackForwardListItem::allItems(v6);
  uint64_t v9 = *v7;
  if (!*v7)
  {
    uint64_t v12 = 0;
    LODWORD(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
LABEL_18:
    uint64_t v11 = v9 + 24 * v10;
    goto LABEL_19;
  }
  uint64_t v10 = *(unsigned int *)(v9 - 4);
  uint64_t v11 = v9 + 24 * v10;
  if (!*(_DWORD *)(v9 - 12))
  {
    uint64_t v12 = v9 + 24 * v10;
    goto LABEL_18;
  }
  uint64_t v12 = *v7;
  if (v10)
  {
    uint64_t v13 = 24 * v10;
    uint64_t v12 = *v7;
    while (*(_OWORD *)v12 == 0 || *(void *)(v12 + 8) == -1)
    {
      v12 += 24;
      v13 -= 24;
      if (!v13)
      {
        uint64_t v12 = v11;
        break;
      }
    }
  }
LABEL_19:
  if (v9) {
    uint64_t v15 = v9 + 24 * *(unsigned int *)(v9 - 4);
  }
  else {
    uint64_t v15 = 0;
  }
  if (v15 != v12)
  {
    while (1)
    {
      WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(*(void *)(*(void *)(v12 + 16) + 8) + 56));
      if (!WTF::URL::protocolIs()) {
        goto LABEL_30;
      }
      WTF::URL::fileSystemPath((uint64_t *)v32, (WTF::URL *)buf);
      char v17 = WTF::equal(v32[0], v33, v16);
      uint64_t v18 = v32[0];
      v32[0] = 0;
      if (!v18) {
        goto LABEL_27;
      }
      if (*(_DWORD *)v18 != 2) {
        break;
      }
      WTF::StringImpl::destroy(v18, v8);
      if (v17)
      {
LABEL_28:
        int v19 = 1;
        goto LABEL_40;
      }
LABEL_30:
      WTF::URL::URL((uint64_t)v32, (WTF::StringImpl **)(*(void *)(*(void *)(v12 + 16) + 8) + 64));
      if (WTF::URL::protocolIs())
      {
        WTF::URL::fileSystemPath((uint64_t *)&v31, (WTF::URL *)v32);
        int v19 = WTF::equal(v31, v33, v20);
        uint64_t v21 = v31;
        uint64_t v31 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v8);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
      }
      else
      {
        int v19 = 0;
      }
      uint64_t v22 = v32[0];
      v32[0] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v8);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
LABEL_40:
      char v23 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v8);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      BOOL v24 = v19 == 0;
      if (!v19)
      {
        uint64_t v25 = v12 + 24;
        uint64_t v12 = v11;
        if (v25 != v11)
        {
          uint64_t v12 = v25;
          while (*(_OWORD *)v12 == 0 || *(void *)(v12 + 8) == -1)
          {
            v12 += 24;
            if (v12 == v11)
            {
              uint64_t v12 = v11;
              break;
            }
          }
        }
        if (v12 != v15) {
          continue;
        }
      }
      goto LABEL_57;
    }
    *(_DWORD *)v18 -= 2;
LABEL_27:
    if (v17) {
      goto LABEL_28;
    }
    goto LABEL_30;
  }
  BOOL v24 = 1;
LABEL_57:
  uint64_t v27 = v33;
  int v33 = 0;
  if (!v27)
  {
LABEL_60:
    if (v24) {
      goto LABEL_61;
    }
    return 1;
  }
  if (*(_DWORD *)v27 != 2)
  {
    *(_DWORD *)v27 -= 2;
    goto LABEL_60;
  }
  WTF::StringImpl::destroy(v27, v8);
  if (!v24) {
    return 1;
  }
LABEL_61:
  uint64_t v28 = qword_1EB358050;
  BOOL result = os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_ERROR);
  if (result)
  {
    uint64_t v30 = *(void *)(a1 + 136);
    if (v30) {
      LODWORD(v3WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = *(_DWORD *)(v30 + 108);
    }
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v35 = 1024;
    int v36 = v30;
    _os_log_error_impl(&dword_1985F2000, v28, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::checkURLReceivedFromWebProcess: Received an unexpected URL from the web process", buf, 0x12u);
    return 0;
  }
  return result;
}

void WebKit::WebProcessProxy::updateBackForwardItem(WebKit::WebProcessProxy *this, BackForwardListItemState *a2)
{
  uint64_t v4 = WebKit::WebBackForwardListItem::allItems(this);
  uint64_t v5 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v4, a2);
  if (v5)
  {
    uint64_t v6 = v5;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    uint64_t v7 = *(void *)(v6 + 384);
    if ((WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(*((void *)this + 69), v7) & 1) == 0)
    {
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v35, (void **)this + 72);
      uint64_t v13 = *((void *)this + 72);
      if (v13)
      {
        uint64_t v14 = *(unsigned int *)(v13 - 4);
        uint64_t v15 = (WTF::StringImpl *)(v13 + 8 * v14);
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v14 = 0;
      }
      long long v40 = (char *)this + 576;
      uint64_t v41 = v15;
      uint64_t v42 = v15;
      uint64_t v43 = v15;
      uint64_t v44 = v13 + 8 * v14;
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v40);
      uint64_t v26 = v36[0];
      uint64_t v27 = v41;
      while (v26 != v27)
      {
        uint64_t v28 = *(void *)(*(void *)(*(void *)(*(void *)v26 + 8) + 24) + 8);
        if (v28) {
          uint64_t v29 = v28 - 16;
        }
        else {
          uint64_t v29 = 0;
        }
        if (*(void *)(*(void *)(v29 + 32) + 760) == v7) {
          goto LABEL_3;
        }
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v35);
        uint64_t v26 = v36[0];
      }
      uint64_t v30 = *(void *)(v6 + 416);
      if (!v30) {
        goto LABEL_50;
      }
      uint64_t v31 = *(void *)(v30 + 32);
      if (!v31) {
        goto LABEL_50;
      }
      uint64_t v32 = *(void *)(*(void *)(v31 + 24) + 8);
      uint64_t v33 = v32 ? v32 - 16 : 0;
      if (*(void *)(*(void *)(v33 + 32) + 760) != *(void *)(v6 + 384)
        || *(WebKit::WebProcessProxy **)(v31 + 40) != this)
      {
        goto LABEL_50;
      }
    }
LABEL_3:
    int v8 = (WTF::StringImpl *)*((void *)a2 + 2);
    if (v8) {
      *(_DWORD *)v8 += 2;
    }
    __int16 v35 = v8;
    WebKit::FrameState::FrameState((WebKit::FrameState *)v36, (const WebKit::FrameState *)((char *)a2 + 24));
    char v37 = *((unsigned char *)a2 + 272);
    uint64_t v10 = (atomic_uint *)*((void *)a2 + 35);
    if (v10) {
      atomic_fetch_add(v10, 1u);
    }
    char v39 = *((unsigned char *)a2 + 288);
    uint64_t v11 = v35;
    uint64_t v38 = (unsigned int *)v10;
    __int16 v35 = 0;
    uint64_t v12 = *(WTF::StringImpl **)(v6 + 48);
    *(void *)(v6 + 48) = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v9);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    WebKit::FrameState::operator=(v6 + 56, (uint64_t)v36);
    *(unsigned char *)(v6 + 304) = v37;
    uint64_t v16 = v38;
    uint64_t v38 = 0;
    char v17 = *(unsigned int **)(v6 + 312);
    *(void *)(v6 + 312) = v16;
    if (v17)
    {
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v17);
      uint64_t v18 = v38;
      *(unsigned char *)(v6 + 32WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v39;
      uint64_t v38 = 0;
      if (v18) {
        WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v18);
      }
    }
    else
    {
      *(unsigned char *)(v6 + 32WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v39;
      uint64_t v38 = 0;
    }
    WebKit::FrameState::~FrameState(v36);
    int v20 = v35;
    __int16 v35 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v19);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    uint64_t v21 = *(void *)(v6 + 416);
    if (*((unsigned char *)a2 + 296) != (v21 != 0))
    {
      if (*((unsigned char *)a2 + 296))
      {
        uint64_t v22 = *(void *)(*((void *)this + 64) + 8);
        if (v22) {
          uint64_t v23 = v22 - 16;
        }
        else {
          uint64_t v23 = 0;
        }
        CFRetain(*(CFTypeRef *)(v23 + 8));
        BOOL v24 = *(WebKit::WebBackForwardCache **)(v23 + 760);
        ++*(_DWORD *)v24;
        WebKit::WebBackForwardCache::addEntry((uint64_t)v24, v6, *((void *)this + 22));
        int v25 = *(_DWORD *)v24;
        if (!*(_DWORD *)v24) {
          goto LABEL_53;
        }
      }
      else
      {
        if (v21 && *(void *)(v21 + 32)) {
          goto LABEL_50;
        }
        uint64_t v22 = *(void *)(*((void *)this + 64) + 8);
        if (v22) {
          uint64_t v34 = v22 - 16;
        }
        else {
          uint64_t v34 = 0;
        }
        CFRetain(*(CFTypeRef *)(v34 + 8));
        BOOL v24 = *(WebKit::WebBackForwardCache **)(v34 + 760);
        ++*(_DWORD *)v24;
        WebKit::WebBackForwardCache::removeEntry(v24, (WebKit::WebBackForwardListItem *)v6);
        int v25 = *(_DWORD *)v24;
        if (!*(_DWORD *)v24)
        {
LABEL_53:
          __break(0xC471u);
          JUMPOUT(0x198EEAB28);
        }
      }
      *(_DWORD *)BOOL v24 = v25 - 1;
      CFRelease(*(CFTypeRef *)(v22 - 8));
    }
LABEL_50:
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
}

void WebKit::WebProcessProxy::gpuProcessConnectionDidBecomeUnresponsive(void *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1[144] == a2)
  {
    uint64_t v3 = qword_1EB358960;
    if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = a1[17];
      if (v8) {
        LODWORD(v8) = *(_DWORD *)(v8 + 108);
      }
      int v9 = 134218240;
      uint64_t v10 = a1;
      __int16 v11 = 1024;
      int v12 = v8;
      _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::gpuProcessConnectionDidBecomeUnresponsive", (uint8_t *)&v9, 0x12u);
    }
    uint64_t v4 = a1[64];
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5) {
        uint64_t v6 = v5 - 16;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    CFRetain(*(CFTypeRef *)(v6 + 8));
    uint64_t v7 = *(atomic_uint **)(v6 + 176);
    if (v7)
    {
      atomic_fetch_add(v7 + 4, 1u);
      CFRelease(*(CFTypeRef *)(v6 + 8));
      WebKit::GPUProcessProxy::childConnectionDidBecomeUnresponsive((WebKit::GPUProcessProxy *)v7);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v7 + 4);
    }
    else
    {
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
  }
}

unsigned int *WebKit::WebProcessProxy::didClose(WebKit::WebProcessProxy *this, IPC::Connection *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *((void *)this + 17);
    if (v6) {
      int v7 = *(_DWORD *)(v6 + 108);
    }
    else {
      int v7 = 0;
    }
    uint64_t v8 = (_xpc_connection_s *)*((void *)a2 + 44);
    if (v8) {
      LODWORD(v8) = xpc_connection_get_pid(v8);
    }
    int v9 = 134218496;
    uint64_t v10 = this;
    __int16 v11 = 1024;
    int v12 = v7;
    __int16 v13 = 1024;
    int v14 = (int)v8;
    _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::didClose: (web process %d crash)", (uint8_t *)&v9, 0x18u);
  }
  return WebKit::WebProcessProxy::processDidTerminateOrFailedToLaunch((uint64_t)this, 5);
}

unsigned int *WebKit::WebProcessProxy::processDidTerminateOrFailedToLaunch(uint64_t a1, uint64_t a2)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    uint64_t v73 = *(void *)(a1 + 136);
    if (v73) {
      int v74 = *(_DWORD *)(v73 + 108);
    }
    else {
      int v74 = 0;
    }
    *(_DWORD *)buf = 134218498;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v74;
    __int16 v90 = 2082;
    uint64_t v91 = WebKit::processTerminationReasonToString();
    _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::processDidTerminateOrFailedToLaunch: reason=%{public}s", buf, 0x1Cu);
  }
  atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 1u);
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    *(_OWORD *)algn_1EB35A7B8 = 0u;
  }
  WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebProcessProxy>((WTF **)a1);
  uint64_t v6 = *(void *)(a1 + 768);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    *(void *)(v6 + 16) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::UserMediaCaptureManagerProxySourceProxy,WTF::RawPtrTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v7, v5);
  }
  WebKit::WebProcessProxy::mainPages((void *)a1, (uint64_t)&v87);
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v8 = &unk_1EE9DD558;
  v8[1] = &v85;
  *(void *)buf = 0;
  *(void *)&buf[8] = 0;
  uint64_t v9 = *(void *)(a1 + 576);
  char v75 = (unsigned int *)(a1 + 16);
  if (v9 && (uint64_t v10 = *(unsigned int *)(v9 - 12), v10))
  {
    if (v10 >> 29)
    {
      __break(0xC471u);
      goto LABEL_114;
    }
    uint64_t v11 = WTF::fastMalloc((WTF *)(8 * v10));
    *(_DWORD *)&buf[8] = v10;
    *(void *)buf = v11;
  }
  else
  {
    uint64_t v11 = 0;
  }
  int v12 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 576));
  int v14 = v12;
  uint64_t v15 = v13;
  uint64_t v16 = *(void *)(a1 + 576);
  if (v16) {
    char v17 = (void *)(v16 + 8 * *(unsigned int *)(v16 - 4));
  }
  else {
    char v17 = 0;
  }
  if (v17 != v12)
  {
    LODWORD(v18) = 0;
    do
    {
      uint64_t v19 = *(void *)(*v14 + 8);
      if (v19)
      {
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v19 + 8), *(void *)(*v14 + 8));
        int v20 = *(atomic_uint **)(v19 + 8);
        if (v20)
        {
          atomic_fetch_add(v20, 1u);
          LODWORD(v18) = *(_DWORD *)&buf[12];
          uint64_t v11 = *(void *)buf;
        }
      }
      else
      {
        int v20 = 0;
      }
      *(void *)(v11 + 8 * v18) = v20;
      uint64_t v18 = (v18 + 1);
      *(_DWORD *)&unsigned char buf[12] = v18;
      while (++v14 != v15)
      {
        if ((unint64_t)(*v14 + 1) > 1) {
          goto LABEL_25;
        }
      }
      int v14 = v15;
LABEL_25:
      ;
    }
    while (v14 != v17);
    if (v18)
    {
      uint64_t v21 = 8 * v18;
      do
      {
        if (*(void *)v11)
        {
          if (*(void *)(*(void *)v11 + 8))
          {
            v77[0] = *(WTF::StringImpl **)v11;
            if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)(a1 + 576), v77))
            {
              if (*(void *)v11) {
                uint64_t v22 = *(void *)(*(void *)v11 + 8);
              }
              else {
                uint64_t v22 = 0;
              }
              (*(void (**)(void *, uint64_t))(*v8 + 16))(v8, v22);
            }
          }
        }
        v11 += 8;
        v21 -= 8;
      }
      while (v21);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v13);
  (*(void (**)(void *))(*v8 + 8))(v8);
  uint64_t v23 = *(void **)(a1 + 720);
  uint64_t v82 = v23;
  uint64_t v24 = *(unsigned int *)(a1 + 732);
  int v83 = *(_DWORD *)(a1 + 728);
  int v84 = v24;
  *(void *)buf = 0;
  *(void *)(a1 + 72WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *(void *)&buf[8] = 0;
  *(void *)(a1 + 728) = 0;
  WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v25);
  if (v24)
  {
    uint64_t v26 = 8 * v24;
    do
    {
      uint64_t v27 = *v23;
      *v23++ = 0;
      (*(void (**)(uint64_t, void))(*(void *)v27 + 16))(v27, 0);
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      v26 -= 8;
    }
    while (v26);
  }
  if (*(unsigned char *)(a1 + 872))
  {
    uint64_t v28 = *(void *)(a1 + 552);
    if (!v28 || !*(_DWORD *)(v28 - 12))
    {
      uint64_t v29 = *(void *)(a1 + 512);
      if (v29)
      {
        uint64_t v30 = *(void *)(v29 + 8);
        if (v30) {
          uint64_t v31 = v30 - 16;
        }
        else {
          uint64_t v31 = 0;
        }
      }
      else
      {
        uint64_t v31 = 0;
      }
      CFRetain(*(CFTypeRef *)(v31 + 8));
      uint64_t v32 = *(void *)(a1 + 136);
      if (v32) {
        uint64_t v33 = *(unsigned int *)(v32 + 108);
      }
      else {
        uint64_t v33 = 0;
      }
      WebKit::WebContextClient::serviceWorkerProcessDidCrash((void *)(v31 + 208), v31, v33, a2);
      CFRelease(*(CFTypeRef *)(v31 + 8));
    }
  }
  WebKit::WebProcessProxy::shutDown((atomic_uchar *)a1);
  uint64_t v35 = v88;
  if (a2 != 5 || v88 != 1)
  {
    if (!v88)
    {
      char v39 = 0;
      LODWORD(v4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
      uint64_t v35 = 0;
      LOBYTE(v41) = 1;
      goto LABEL_60;
    }
    if (!(v88 >> 28))
    {
      int v36 = v87;
      goto LABEL_102;
    }
    __break(0xC471u);
LABEL_114:
    JUMPOUT(0x198EEB604);
  }
  int v36 = v87;
  WebCore::PublicSuffixStore::singleton(v34);
  v77[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v77);
  WebKit::WebPageProxy::currentURL(*v36, (uint64_t *)&v76);
  MEMORY[0x19972E8B0](buf, v77, &v76, 0);
  WTF::URL::host((WTF::URL *)buf);
  WebCore::PublicSuffixStore::topPrivatelyControlledDomain();
  uint64_t v38 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, v37);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  uint64_t v59 = v76;
  uint64_t v76 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2) {
      WTF::StringImpl::destroy(v59, v37);
    }
    else {
      *(_DWORD *)v59 -= 2;
    }
  }
  long long v60 = v77[0];
  v77[0] = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2) {
      WTF::StringImpl::destroy(v60, v37);
    }
    else {
      *(_DWORD *)v60 -= 2;
    }
  }
  uint64_t v61 = v81;
  if (!v81) {
    goto LABEL_101;
  }
  if (*((_DWORD *)v81 + 1))
  {
    uint64_t v62 = *v36;
    WebCore::DiagnosticLoggingKeys::domainCausingCrashKey((uint64_t *)buf, v81);
    WebKit::WebPageProxy::logDiagnosticMessageWithEnhancedPrivacy(v62, (uint64_t)buf, (uint64_t)&v81, 0);
    uint64_t v63 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2) {
        WTF::StringImpl::destroy(v63, v37);
      }
      else {
        *(_DWORD *)v63 -= 2;
      }
    }
    uint64_t v61 = v81;
    uint64_t v81 = 0;
    if (!v61) {
      goto LABEL_101;
    }
  }
  else
  {
    uint64_t v81 = 0;
  }
  if (*(_DWORD *)v61 == 2) {
    WTF::StringImpl::destroy(v61, v37);
  }
  else {
    *(_DWORD *)v61 -= 2;
  }
LABEL_101:
  uint64_t v35 = 1;
LABEL_102:
  char v39 = (WTF *)WTF::fastMalloc((WTF *)(16 * v35));
  uint64_t v40 = 0;
  uint64_t v41 = 8 * v35;
  do
  {
    uint64_t v64 = v36[v40];
    uint64_t v65 = *((void *)v64 + 4);
    uint64_t v66 = *(void *)(*(void *)(v65 + 992) + 8);
    if (v66)
    {
      uint64_t v67 = v66 - 16;
      CFRetain(*(CFTypeRef *)(v66 - 8));
      uint64_t v64 = v36[v40];
    }
    else
    {
      uint64_t v67 = 0;
    }
    *(void *)buf = v67;
    *(void *)&buf[8] = v65 + 976;
    ++*(_DWORD *)(v65 + 1348);
    WebKit::WebPageProxy::resetStateAfterProcessTermination((BOOL)v64, a2);
    *(_OWORD *)uint64_t v77 = *(_OWORD *)buf;
    *(void *)buf = 0;
    *(void *)&buf[8] = 0;
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)buf, v68, v69);
    long long v70 = *(_OWORD *)v77;
    v77[0] = 0;
    *((_OWORD *)v39 + v4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v70;
    v77[1] = 0;
    ++v40;
    WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v77, v71, v72);
    v41 -= 8;
  }
  while (v41);
LABEL_60:
  if (HIDWORD(v86))
  {
    uint64_t v42 = v85;
    uint64_t v43 = 8 * HIDWORD(v86);
    do
    {
      if (*(void *)v42)
      {
        uint64_t v44 = *(WebKit::ProvisionalPageProxy **)(*(void *)v42 + 8);
        if (v44) {
          WebKit::ProvisionalPageProxy::processDidTerminate(v44);
        }
      }
      v42 += 8;
      v43 -= 8;
    }
    while (v43);
  }
  if ((v41 & 1) == 0)
  {
    uint64_t v45 = (uint64_t *)v87;
    uint64_t v46 = 8 * v35;
    do
    {
      uint64_t v47 = *v45++;
      WebKit::WebPageProxy::dispatchProcessDidTerminate(v47, a2);
      v46 -= 8;
    }
    while (v46);
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(a1 + 560), buf);
  uint64_t v48 = *(void *)(a1 + 560);
  if (v48)
  {
    uint64_t v49 = *(unsigned int *)(v48 - 4);
    uint64_t v50 = (WTF::StringImpl *)(v48 + 8 * v49);
  }
  else
  {
    uint64_t v50 = 0;
    uint64_t v49 = 0;
  }
  v77[0] = (WTF::StringImpl *)(a1 + 560);
  v77[1] = v50;
  uint64_t v78 = v50;
  uint64_t v79 = v50;
  uint64_t v80 = v48 + 8 * v49;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(v77);
  while (*(WTF::StringImpl **)&buf[8] != v77[1])
  {
    WebKit::RemotePageProxy::processDidTerminate(*(void *)(**(void **)&buf[8] + 8));
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
  if (v40)
  {
    uint64_t v53 = 16 * v40;
    char v54 = v39;
    do
    {
      WebKit::PageLoadState::Transaction::~Transaction(v54, (uint64_t)v51, v52);
      char v54 = (WebKit::PageLoadState::Transaction *)(v55 + 16);
      v53 -= 16;
    }
    while (v53);
  }
  if (v39) {
    WTF::fastFree(v39, v51);
  }
  WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v82, v51);
  WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v85, v56);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v57);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v75);
}

unsigned int *non-virtual thunk to'WebKit::WebProcessProxy::didClose(WebKit::WebProcessProxy *this, IPC::Connection *a2)
{
  return WebKit::WebProcessProxy::didClose((WebKit::WebProcessProxy *)((char *)this - 32), a2);
}

unsigned int *WebKit::WebProcessProxy::didReceiveInvalidMessage(WebKit::WebProcessProxy *a1, IPC::Connection *a2, WTF::StringImpl *a3)
{
  WebKit::AuxiliaryProcessProxy::logInvalidMessage(a1, (uint64_t)a2, a3);
  WebKit::WebProcessPool::didReceiveInvalidMessage(a3);
  (*(void (**)(WebKit::WebProcessProxy *))(*(void *)a1 + 80))(a1);

  return WebKit::WebProcessProxy::didClose(a1, a2);
}

unsigned int *non-virtual thunk to'WebKit::WebProcessProxy::didReceiveInvalidMessage(uint64_t a1, IPC::Connection *a2, WTF::StringImpl *a3)
{
  return WebKit::WebProcessProxy::didReceiveInvalidMessage((WebKit::WebProcessProxy *)(a1 - 32), a2, a3);
}

unsigned int *WebKit::WebProcessProxy::didBecomeUnresponsive(WebKit::WebProcessProxy *this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    uint64_t v16 = *((void *)this + 17);
    if (v16) {
      LODWORD(v16) = *(_DWORD *)(v16 + 108);
    }
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = this;
    LOWORD(v22[0]) = 1024;
    *(_DWORD *)((char *)v22 + 2) = v16;
    _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::didBecomeUnresponsive:", buf, 0x12u);
  }
  atomic_fetch_add((atomic_uint *volatile)this + 4, 1u);
  *((_DWORD *)this + 179) = 0;
  uint64_t v3 = (void *)*((void *)this + 90);
  *((void *)this + 9WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  uint64_t v18 = v3;
  int v4 = *((_DWORD *)this + 182);
  uint64_t v5 = *((unsigned int *)this + 183);
  *((void *)this + 91) = 0;
  int v19 = v4;
  int v20 = v5;
  WebKit::WebProcessProxy::pages(this, (uint64_t)buf);
  if (v22[0])
  {
    uint64_t v7 = *(CFTypeRef ***)buf;
    uint64_t v8 = 8 * v22[0];
    do
    {
      uint64_t v9 = *v7++;
      CFRetain(v9[1]);
      WebKit::WebPageProxy::processDidBecomeUnresponsive((WebKit::WebPageProxy *)v9);
      CFRelease(v9[1]);
      v8 -= 8;
    }
    while (v8);
  }
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v6);
  if (v5)
  {
    uint64_t v11 = 8 * v5;
    do
    {
      uint64_t v12 = *v3;
      *v3++ = 0;
      (*(void (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      v11 -= 8;
    }
    while (v11);
  }
  if (*((unsigned char *)this + 952) || *((unsigned char *)this + 872))
  {
    uint64_t v13 = *((void *)this + 69);
    if (!v13 || !*(_DWORD *)(v13 - 12))
    {
      int v14 = qword_1EB358280;
      if (os_log_type_enabled((os_log_t)qword_1EB358280, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = *((void *)this + 17);
        if (v17) {
          LODWORD(v17) = *(_DWORD *)(v17 + 108);
        }
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = this;
        LOWORD(v22[0]) = 1024;
        *(_DWORD *)((char *)v22 + 2) = v17;
        _os_log_error_impl(&dword_1985F2000, v14, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::didBecomeUnresponsive: Terminating worker-only web process because it is unresponsive", buf, 0x12u);
      }
      WebKit::WebProcessProxy::disableRemoteWorkers((uint64_t)this, 3);
      (*(void (**)(WebKit::WebProcessProxy *))(*(void *)this + 80))(this);
    }
  }
  WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v10);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)this + 4);
}

uint64_t WebKit::WebProcessProxy::didBecomeResponsive(WebKit::WebProcessProxy *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 17);
    if (v3) {
      LODWORD(v3) = *(_DWORD *)(v3 + 108);
    }
    *(_DWORD *)uint64_t v9 = 134218240;
    *(void *)&_DWORD v9[4] = this;
    LOWORD(v10[0]) = 1024;
    *(_DWORD *)((char *)v10 + 2) = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::didBecomeResponsive:", v9, 0x12u);
  }
  *((_DWORD *)this + 179) = 1;
  WebKit::WebProcessProxy::pages(this, (uint64_t)v9);
  if (v10[0])
  {
    uint64_t v5 = *(CFTypeRef ***)v9;
    uint64_t v6 = 8 * v10[0];
    do
    {
      uint64_t v7 = *v5++;
      CFRetain(v7[1]);
      WebKit::WebPageProxy::processDidBecomeResponsive((WebKit::WebPageProxy *)v7);
      CFRelease(v7[1]);
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v4);
}

uint64_t WebKit::WebProcessProxy::willChangeIsResponsive(WebKit::WebProcessProxy *this)
{
  WebKit::WebProcessProxy::pages(this, (uint64_t)&v6);
  if (v7)
  {
    uint64_t v2 = v6;
    uint64_t v3 = 8 * v7;
    do
    {
      uint64_t v4 = *v2++;
      CFRetain(*(CFTypeRef *)(v4 + 8));
      WebKit::PageLoadState::willChangeProcessIsResponsive((WebKit::PageLoadState *)(*(void *)(v4 + 32) + 976));
      CFRelease(*(CFTypeRef *)(v4 + 8));
      v3 -= 8;
    }
    while (v3);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, v1);
}

uint64_t WebKit::WebProcessProxy::didChangeIsResponsive(WebKit::WebProcessProxy *this)
{
  WebKit::WebProcessProxy::pages(this, (uint64_t)&v6);
  if (v7)
  {
    uint64_t v2 = v6;
    uint64_t v3 = 8 * v7;
    do
    {
      uint64_t v4 = *v2++;
      CFRetain(*(CFTypeRef *)(v4 + 8));
      WebKit::PageLoadState::didChangeProcessIsResponsive((WebKit::PageLoadState *)(*(void *)(v4 + 32) + 976));
      CFRelease(*(CFTypeRef *)(v4 + 8));
      v3 -= 8;
    }
    while (v3);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, v1);
}

void WebKit::WebProcessProxy::didDestroyFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a5;
  uint64_t v8 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 552), &v10);
  if (v8)
  {
    uint64_t v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    WebKit::WebPageProxy::didDestroyFrame((uint64_t *)v9, a2, a3, a4);
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
}

WTF::StringImpl *WebKit::WebProcessProxy::addPreviouslyApprovedFileURL(WebKit::WebProcessProxy *this, const WTF::URL *a2)
{
  WTF::URL::fileSystemPath((uint64_t *)&v7, a2);
  BOOL result = v7;
  if (v7)
  {
    if (*((_DWORD *)v7 + 1))
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 68, &v7, v4, (uint64_t)&v6);
      BOOL result = v7;
      unsigned int v7 = 0;
      if (!result) {
        return result;
      }
    }
    else
    {
      unsigned int v7 = 0;
    }
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::wasPreviouslyApprovedFileURL(WebKit::WebProcessProxy *this, const WTF::URL *a2)
{
  WTF::URL::fileSystemPath((uint64_t *)&v15, a2);
  uint64_t v5 = v15;
  if (!v15) {
    return 0;
  }
  if (!*((_DWORD *)v15 + 1) || (uint64_t v6 = *((void *)this + 68)) == 0)
  {
    uint64_t v7 = 0;
    uint64_t v15 = 0;
LABEL_5:
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
    return v7;
  }
  int v9 = *(_DWORD *)(v6 - 8);
  unsigned int v10 = *((_DWORD *)v15 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(v15);
  }
  for (i = 0; ; unsigned int v11 = i + v13)
  {
    int v13 = v11 & v9;
    int v14 = *(WTF **)(v6 + 8 * (v11 & v9));
    if (v14 != (WTF *)-1)
    {
      if (!v14)
      {
        uint64_t v7 = 0;
        goto LABEL_20;
      }
      if (WTF::equal(v14, v15, v4)) {
        break;
      }
    }
    ++i;
  }
  uint64_t v7 = 1;
LABEL_20:
  uint64_t v5 = v15;
  uint64_t v15 = 0;
  if (v5) {
    goto LABEL_5;
  }
  return v7;
}

void WebKit::WebProcessProxy::recordUserGestureAuthorizationToken(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  *(void *)&long long v43 = a3;
  *((void *)&v43 + 1) = a4;
  if (__PAIR128__(a4, a3) < 2) {
    return;
  }
  uint64_t v5 = (uint64_t *)(a1 + 616);
  uint64_t v6 = *(void *)(a1 + 616);
  if (v6
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)(a1 + 616), 0), (uint64_t v6 = *v5) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unint64_t v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  unsigned int v11 = v7 & ((v10 >> 31) ^ v10);
  uint64_t v12 = (uint64_t *)(v6 + 16 * v11);
  uint64_t v13 = *v12;
  if (!*v12)
  {
LABEL_13:
    uint64_t v16 = v12[1];
    *uint64_t v12 = a2;
    v12[1] = 0;
    if (v16) {
      WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(v16, (void *)a2);
    }
    uint64_t v17 = *v5;
    if (*v5) {
      int v18 = *(_DWORD *)(v17 - 12) + 1;
    }
    else {
      int v18 = 1;
    }
    *(_DWORD *)(v17 - 12) = v18;
    uint64_t v19 = *v5;
    if (*v5) {
      int v20 = *(_DWORD *)(v19 - 12);
    }
    else {
      int v20 = 0;
    }
    uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
    unint64_t v22 = *(unsigned int *)(v19 - 4);
    if (v22 > 0x400)
    {
      if (v22 > 2 * v21) {
        goto LABEL_24;
      }
    }
    else if (3 * v22 > 4 * v21)
    {
      goto LABEL_24;
    }
    uint64_t v12 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(v5, v12);
    goto LABEL_24;
  }
  int v14 = 0;
  int v15 = 1;
  while (v13 != a2)
  {
    if (v13 == -1) {
      int v14 = v12;
    }
    unsigned int v11 = (v11 + v15) & v7;
    uint64_t v12 = (uint64_t *)(v6 + 16 * v11);
    uint64_t v13 = *v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        *int v14 = 0;
        v14[1] = 0;
        --*(_DWORD *)(*v5 - 16);
        uint64_t v12 = v14;
      }
      goto LABEL_13;
    }
  }
LABEL_24:
  uint64_t v25 = v12[1];
  uint64_t v23 = v12 + 1;
  uint64_t v24 = v25;
  long long v26 = v43;
  if (v25
    || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(v23),
        (uint64_t v24 = *v23) != 0))
  {
    unsigned int v27 = *(_DWORD *)(v24 - 8);
  }
  else
  {
    unsigned int v27 = 0;
  }
  int v44 = -1640531527;
  __int16 v45 = 0;
  char v46 = 0;
  WTF::addArgs<WTF::UUID>(&v44, &v43);
  uint64_t v28 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v44) & v27;
  uint64_t v29 = (void *)(v24 + 32 * v28);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  if (*(_OWORD *)v29 == 0)
  {
LABEL_38:
    *(_OWORD *)uint64_t v29 = v43;
    uint64_t v35 = API::Object::newObject(0x40uLL, 105);
    *(void *)uint64_t v35 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v35);
    *(void *)uint64_t v35 = &unk_1EE9CBCB8;
    *(unsigned char *)(v35 + 16) = 0;
    *(_OWORD *)(v35 + 32) = v26;
    *(unsigned char *)(v35 + 48) = 1;
    uint64_t v36 = v29[2];
    v29[2] = v35;
    if (v36) {
      CFRelease(*(CFTypeRef *)(v36 + 8));
    }
    uint64_t v37 = *v23;
    if (*v23) {
      int v38 = *(_DWORD *)(v37 - 12) + 1;
    }
    else {
      int v38 = 1;
    }
    *(_DWORD *)(v37 - 12) = v38;
    uint64_t v39 = *v23;
    if (*v23) {
      int v40 = *(_DWORD *)(v39 - 12);
    }
    else {
      int v40 = 0;
    }
    uint64_t v41 = (*(_DWORD *)(v39 - 16) + v40);
    unint64_t v42 = *(unsigned int *)(v39 - 4);
    if (v42 > 0x400)
    {
      if (v42 > 2 * v41) {
        return;
      }
    }
    else if (3 * v42 > 4 * v41)
    {
      return;
    }
    WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(v23);
  }
  else
  {
    uint64_t v32 = 0;
    int v33 = 1;
    while (v30 != *((void *)&v43 + 1) || v31 != (void)v43)
    {
      if (!(v31 ^ 1 | v30)) {
        uint64_t v32 = v29;
      }
      uint64_t v28 = (v28 + v33) & v27;
      uint64_t v29 = (void *)(v24 + 32 * v28);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      ++v33;
      if (*(_OWORD *)v29 == 0)
      {
        if (v32)
        {
          *uint64_t v32 = 0;
          v32[1] = 0;
          void v32[2] = 0;
          --*(_DWORD *)(*v23 - 16);
          uint64_t v29 = v32;
        }
        goto LABEL_38;
      }
    }
  }
}

void WebKit::WebProcessProxy::userInitiatedActivity(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v18 = 0;
    goto LABEL_28;
  }
  uint64_t v5 = (uint64_t *)(a1 + 608);
  uint64_t v6 = *(void *)(a1 + 608);
  if (v6
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand((uint64_t *)(a1 + 608), 0), (uint64_t v6 = *v5) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v23 = -1640531527;
  __int16 v24 = 0;
  char v25 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v23, (void *)a2);
  unsigned int v8 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v23) & v7;
  unint64_t v9 = (void *)(v6 + 24 * v8);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  if (*(_OWORD *)v9 != 0)
  {
    uint64_t v12 = 0;
    int v13 = 1;
    while (v11 != *(void *)a2 || v10 != *(void *)(a2 + 8))
    {
      if (v10 == -1) {
        uint64_t v12 = v9;
      }
      unsigned int v8 = (v8 + v13) & v7;
      unint64_t v9 = (void *)(v6 + 24 * v8);
      uint64_t v11 = *v9;
      uint64_t v10 = v9[1];
      ++v13;
      if (*(_OWORD *)v9 == 0)
      {
        if (v12)
        {
          *uint64_t v12 = 0;
          v12[1] = 0;
          void v12[2] = 0;
          --*(_DWORD *)(*v5 - 16);
          unint64_t v9 = v12;
        }
        goto LABEL_14;
      }
    }
    goto LABEL_26;
  }
LABEL_14:
  *(_OWORD *)unint64_t v9 = *(_OWORD *)a2;
  int v14 = (WebKit *)API::Object::newObject(0x40uLL, 105);
  *(void *)int v14 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v14);
  *(void *)int v14 = &unk_1EE9CBCB8;
  *((unsigned char *)v14 + 16) = 0;
  *((unsigned char *)v14 + 32) = 0;
  *((unsigned char *)v14 + 48) = 0;
  uint64_t v15 = v9[2];
  float v9[2] = v14;
  if (v15) {
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  uint64_t v16 = *v5;
  if (*v5) {
    int v17 = *(_DWORD *)(v16 - 12) + 1;
  }
  else {
    int v17 = 1;
  }
  *(_DWORD *)(v16 - 12) = v17;
  uint64_t v19 = *v5;
  if (*v5) {
    int v20 = *(_DWORD *)(v19 - 12);
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
  unint64_t v22 = *(unsigned int *)(v19 - 4);
  if (v22 <= 0x400)
  {
    if (3 * v22 > 4 * v21) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v22 <= 2 * v21) {
LABEL_25:
  }
    unint64_t v9 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(v5, (uint64_t)v9);
LABEL_26:
  uint64_t v18 = v9[2];
  if (v18) {
    CFRetain(*(CFTypeRef *)(v18 + 8));
  }
LABEL_28:
  *a3 = v18;
}

uint64_t WebKit::WebProcessProxy::consumeIfNotVerifiablyFromUIProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a2;
  int v7 = (uint64_t *)(a1 + 616);
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 616), &v12);
  unint64_t v9 = (void *)result;
  uint64_t v10 = *(void *)(a1 + 616);
  if (v10) {
    v10 += 16 * *(unsigned int *)(v10 - 4);
  }
  if (v10 == result
    || !*(unsigned char *)(a4 + 16)
    || (uint64_t result = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t *)(result + 8), (uint64_t *)a4), !result))
  {
    *(unsigned char *)(a3 + 16) = 1;
    return result;
  }
  if (*v7)
  {
    uint64_t v11 = *v7 + 16 * *(unsigned int *)(*v7 - 4);
    if ((void *)v11 == v9) {
      return result;
    }
  }
  else
  {
    if (!v9) {
      return result;
    }
    uint64_t v11 = 0;
  }
  if ((void *)v11 != v9) {
    return (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(v7, v9);
  }
  return result;
}

void WebKit::WebProcessProxy::didDestroyUserGestureToken(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  v51[1] = a4;
  uint64_t v52 = a2;
  v51[0] = a3;
  int v7 = (uint64_t *)(a1 + 616);
  uint64_t v8 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 616), &v52);
  unint64_t v9 = (void *)v8;
  uint64_t v10 = *(void *)(a1 + 616);
  if (v10) {
    v10 += 16 * *(unsigned int *)(v10 - 4);
  }
  if (v10 == v8) {
    return;
  }
  uint64_t v11 = *(void *)(a1 + 608);
  if (!v11) {
    return;
  }
  uint64_t v12 = (uint64_t *)(a1 + 608);
  int v13 = *(_DWORD *)(v11 - 8);
  LODWORD(v56[0]) = -1640531527;
  WORD2(v56[0]) = 0;
  BYTE6(v56[0]) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)v56, v51);
  unsigned int v14 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v56) & v13;
  uint64_t v15 = (uint64_t *)(v11 + 24 * v14);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  if (*v15 == a3 && v17 == a4)
  {
LABEL_16:
    uint64_t v21 = *v12;
    if (!*v12) {
      goto LABEL_21;
    }
  }
  else
  {
    int v19 = 1;
    while (v16 | v17)
    {
      unsigned int v14 = (v14 + v19) & v13;
      uint64_t v15 = (uint64_t *)(v11 + 24 * v14);
      uint64_t v16 = *v15;
      uint64_t v17 = v15[1];
      ++v19;
      if (*v15 == a3 && v17 == a4) {
        goto LABEL_16;
      }
    }
    uint64_t v21 = *v12;
    if (!*v12) {
      return;
    }
    uint64_t v15 = (uint64_t *)(v21 + 24 * *(unsigned int *)(v21 - 4));
  }
  v21 += 24 * *(unsigned int *)(v21 - 4);
LABEL_21:
  if ((uint64_t *)v21 != v15)
  {
    uint64_t v22 = v15[2];
    void v15[2] = 0;
    unsigned int v23 = (uint64_t *)*v12;
    if (!*v12 || (v23 += 3 * *((unsigned int *)v23 - 1), v23 != v15))
    {
      if (v23 != v15)
      {
        *uint64_t v15 = -1;
        v15[1] = -1;
        void v15[2] = 0;
        ++*(_DWORD *)(*v12 - 16);
        uint64_t v24 = *v12;
        int v25 = *v12 ? *(_DWORD *)(v24 - 12) - 1 : -1;
        *(_DWORD *)(v24 - 12) = v25;
        uint64_t v26 = *v12;
        if (*v12)
        {
          unsigned int v27 = 6 * *(_DWORD *)(v26 - 12);
          unsigned int v28 = *(_DWORD *)(v26 - 4);
          if (v27 < v28 && v28 >= 9) {
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(v12, v28 >> 1, 0);
          }
        }
      }
    }
    if (v22)
    {
      if (!*(unsigned char *)(v22 + 48)) {
        goto LABEL_77;
      }
      long long v30 = *(_OWORD *)(v22 + 48);
      v56[0] = *(_OWORD *)(v22 + 32);
      v56[1] = v30;
      if (!(_BYTE)v30) {
        __break(1u);
      }
      uint64_t v31 = v9 + 1;
      uint64_t v32 = v9[1];
      if (!v32) {
        goto LABEL_70;
      }
      unsigned int v33 = *(_DWORD *)(v32 - 8);
      int v53 = -1640531527;
      __int16 v54 = 0;
      char v55 = 0;
      WTF::addArgs<WTF::UUID>(&v53, v56);
      uint64_t v34 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v53) & v33;
      uint64_t v35 = (uint64_t *)(v32 + 32 * v34);
      uint64_t v36 = *v35;
      uint64_t v37 = v35[1];
      if (v37 == *((void *)&v56[0] + 1) && v36 == *(void *)&v56[0])
      {
LABEL_50:
        unint64_t v42 = (void *)(v32 + 32 * v34);
        uint64_t v43 = *v31;
        if (!*v31)
        {
          int v44 = 0;
LABEL_55:
          if (v44 != v42)
          {
            uint64_t v45 = v42[2];
            v42[1] = 0;
            v42[2] = 0;
            *unint64_t v42 = 1;
            if (v45) {
              CFRelease(*(CFTypeRef *)(v45 + 8));
            }
            ++*(_DWORD *)(*v31 - 16);
            uint64_t v46 = *v31;
            if (*v31) {
              int v47 = *(_DWORD *)(v46 - 12) - 1;
            }
            else {
              int v47 = -1;
            }
            *(_DWORD *)(v46 - 12) = v47;
            uint64_t v43 = *v31;
            if (!*v31) {
              goto LABEL_70;
            }
            unsigned int v48 = *(_DWORD *)(v43 - 4);
            if (6 * *(_DWORD *)(v43 - 12) >= v48 || v48 <= 8)
            {
LABEL_69:
              if (*(_DWORD *)(v43 - 12)) {
                goto LABEL_77;
              }
              goto LABEL_70;
            }
            WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(v9 + 1, v48 >> 1);
            uint64_t v43 = *v31;
          }
          if (v43) {
            goto LABEL_69;
          }
LABEL_70:
          if (*v7)
          {
            uint64_t v50 = *v7 + 16 * *(unsigned int *)(*v7 - 4);
            if ((void *)v50 == v9) {
              goto LABEL_77;
            }
LABEL_75:
            if ((void *)v50 != v9) {
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(v7, v9);
            }
            goto LABEL_77;
          }
          if (v9)
          {
            uint64_t v50 = 0;
            goto LABEL_75;
          }
LABEL_77:
          CFRelease(*(CFTypeRef *)(v22 + 8));
          return;
        }
      }
      else
      {
        int v39 = 1;
        while (v36 | v37)
        {
          uint64_t v34 = (v34 + v39) & v33;
          int v40 = (uint64_t *)(v32 + 32 * v34);
          uint64_t v36 = *v40;
          uint64_t v37 = v40[1];
          BOOL v41 = v37 == *((void *)&v56[0] + 1) && v36 == *(void *)&v56[0];
          ++v39;
          if (v41) {
            goto LABEL_50;
          }
        }
        uint64_t v43 = *v31;
        if (!*v31) {
          goto LABEL_70;
        }
        unint64_t v42 = (void *)(v43 + 32 * *(unsigned int *)(v43 - 4));
      }
      int v44 = (void *)(v43 + 32 * *(unsigned int *)(v43 - 4));
      if (v44 == v42) {
        goto LABEL_69;
      }
      goto LABEL_55;
    }
  }
}

uint64_t WebKit::WebProcessProxy::canBeAddedToWebProcessCache(WebKit::WebProcessProxy *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (PAL::deviceClassIsSmallScreen(this)
    && (!WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)this + 42)
     || !WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)this + 44)))
  {
    uint64_t v2 = qword_1EB358960;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v7) {
      return result;
    }
    uint64_t v8 = *((void *)this + 17);
    if (v8) {
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    }
    int v13 = 134218240;
    unsigned int v14 = this;
    __int16 v15 = 1024;
    int v16 = v8;
    uint64_t v6 = "%p - [PID=%i] WebProcessProxy::canBeAddedToWebProcessCache: Not adding to process cache because the process is runnable";
    goto LABEL_18;
  }
  if (*((unsigned char *)this + 872))
  {
    uint64_t v2 = qword_1EB358960;
    BOOL v3 = os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v3) {
      return result;
    }
    uint64_t v5 = *((void *)this + 17);
    if (v5) {
      LODWORD(v5) = *(_DWORD *)(v5 + 108);
    }
    int v13 = 134218240;
    unsigned int v14 = this;
    __int16 v15 = 1024;
    int v16 = v5;
    uint64_t v6 = "%p - [PID=%i] WebProcessProxy::canBeAddedToWebProcessCache: Not adding to process cache because the process is running workers";
LABEL_18:
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v13, 0x12u);
    return 0;
  }
  if (*((unsigned char *)this + 780))
  {
    uint64_t v2 = qword_1EB358960;
    BOOL v9 = os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v9) {
      return result;
    }
    uint64_t v10 = *((void *)this + 17);
    if (v10) {
      LODWORD(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = *(_DWORD *)(v10 + 108);
    }
    int v13 = 134218240;
    unsigned int v14 = this;
    __int16 v15 = 1024;
    int v16 = v10;
    uint64_t v6 = "%p - [PID=%i] WebProcessProxy::canBeAddedToWebProcessCache: Not adding to process cache because the process is "
         "cross-origin isolated";
    goto LABEL_18;
  }
  uint64_t v11 = *(void *)(*((void *)this + 64) + 8);
  if (v11) {
    uint64_t v12 = v11 - 16;
  }
  else {
    uint64_t v12 = 0;
  }
  {
    WebKit::allInspectorProcessPools(void)::allInspectorProcessPools = 0;
    unk_1EB35A850 = 0;
  }
  return WTF::WeakHashSet<WebKit::WebProcessPool,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessPool>((uint64_t)&WebKit::allInspectorProcessPools(void)::allInspectorProcessPools, v12) ^ 1;
}

uint64_t WebKit::WebProcessProxy::canTerminateAuxiliaryProcess(WebKit::WebProcessProxy *this)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 69);
  if (v2 && *(_DWORD *)(v2 - 12)
    || !WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)this + 70)
    || !WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)this + 74)
    || !WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)this + 72)
    || *((unsigned char *)this + 712)
    || *(void *)(*((void *)this + 127) + 8))
  {
    uint64_t v3 = qword_1EB358960;
    BOOL v5 = os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
    uint64_t v7 = *((void *)this + 17);
    if (v7) {
      int v8 = *(_DWORD *)(v7 + 108);
    }
    else {
      int v8 = 0;
    }
    uint64_t v9 = *((void *)this + 69);
    if (v9) {
      int v10 = *(_DWORD *)(v9 - 12);
    }
    else {
      int v10 = 0;
    }
    int v11 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)this + 576, v4);
    int v13 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)this + 592, v12);
    int v14 = *((unsigned __int8 *)this + 712);
    uint64_t v15 = *(void *)(*((void *)this + 127) + 8);
    int v30 = 134219520;
    uint64_t v31 = this;
    __int16 v32 = 1024;
    int v33 = v8;
    __int16 v34 = 1024;
    int v35 = v10;
    __int16 v36 = 1024;
    int v37 = v11;
    __int16 v38 = 1024;
    int v39 = v13;
    __int16 v40 = 1024;
    int v41 = v14;
    __int16 v42 = 2048;
    uint64_t v43 = v15;
    int v16 = "%p - [PID=%i] WebProcessProxy::canTerminateAuxiliaryProcess: returns false (pageCount=%u, provisionalPageCount"
          "=%u, suspendedPageCount=%u, m_isInProcessCache=%d, m_shutdownPreventingScopeCounter=%lu)";
    uint64_t v17 = v3;
    uint32_t v18 = 52;
    goto LABEL_16;
  }
  if (*((unsigned char *)this + 872))
  {
    uint64_t v19 = qword_1EB358960;
    BOOL v20 = os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v20)
    {
      uint64_t v21 = *((void *)this + 17);
      if (v21) {
        LODWORD(v21) = *(_DWORD *)(v21 + 108);
      }
      int v30 = 134218240;
      uint64_t v31 = this;
      __int16 v32 = 1024;
      int v33 = v21;
      int v16 = "%p - [PID=%i] WebProcessProxy::canTerminateAuxiliaryProcess: returns false because process is running service workers";
LABEL_40:
      uint64_t v17 = v19;
      uint32_t v18 = 18;
LABEL_16:
      _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v30, v18);
      return 0;
    }
  }
  else
  {
    uint64_t v22 = *((void *)this + 64);
    if (v22)
    {
      uint64_t v23 = *(void *)(v22 + 8);
      if (v23) {
        uint64_t v24 = v23 - 16;
      }
      else {
        uint64_t v24 = 0;
      }
    }
    else
    {
      uint64_t v24 = 0;
    }
    CFRetain(*(CFTypeRef *)(v24 + 8));
    if (*(unsigned char *)(v24 + 504))
    {
      int v25 = *(unsigned __int8 *)(*(void *)(v24 + 48) + 87);
      CFRelease(*(CFTypeRef *)(v24 + 8));
      if (!v25)
      {
        uint64_t v26 = qword_1EB358960;
        if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v27 = *((void *)this + 17);
          if (v27) {
            LODWORD(v27) = *(_DWORD *)(v27 + 108);
          }
          int v30 = 134218240;
          uint64_t v31 = this;
          __int16 v32 = 1024;
          int v33 = v27;
          _os_log_impl(&dword_1985F2000, v26, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::canTerminateAuxiliaryProcess: returns true", (uint8_t *)&v30, 0x12u);
        }
        return 1;
      }
    }
    else
    {
      CFRelease(*(CFTypeRef *)(v24 + 8));
    }
    uint64_t v19 = qword_1EB358960;
    BOOL v28 = os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v28)
    {
      uint64_t v29 = *((void *)this + 17);
      if (v29) {
        LODWORD(v29) = *(_DWORD *)(v29 + 108);
      }
      int v30 = 134218240;
      uint64_t v31 = this;
      __int16 v32 = 1024;
      int v33 = v29;
      int v16 = "%p - [PID=%i] WebProcessProxy::canTerminateAuxiliaryProcess: returns false because process termination is disabled";
      goto LABEL_40;
    }
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::shouldTerminate(WebKit::WebProcessProxy *a1, uint64_t *a2)
{
  uint64_t canTerminateAuxiliaryProcess = WebKit::WebProcessProxy::canTerminateAuxiliaryProcess(a1);
  if (canTerminateAuxiliaryProcess) {
    WebKit::WebProcessProxy::shutDown((atomic_uchar *)a1);
  }
  uint64_t v5 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, canTerminateAuxiliaryProcess);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

uint64_t WebKit::WebProcessProxy::notifyHasMouseDeviceChanged(WebKit::WebProcessProxy *this)
{
  char v1 = (char)this;
  WebKit::WebProcessProxy::allProcesses((uint64_t)&v9);
  if (v10)
  {
    uint64_t v3 = v9;
    uint64_t v4 = 8 * v10;
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = (atomic_uint *)(*v3 + 16);
      atomic_fetch_add(v6, 1u);
      char v8 = v1;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHasMouseDevice>(v5, &v8, 0, 0);
      if (v5) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v6);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHasMouseDevice>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2678;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint32_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint32_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::WebProcessProxy::notifyHasStylusDeviceChanged(WebKit::WebProcessProxy *this)
{
  char v1 = (char)this;
  WebKit::WebProcessProxy::allProcesses((uint64_t)&v9);
  if (v10)
  {
    uint64_t v3 = v9;
    uint64_t v4 = 8 * v10;
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = (atomic_uint *)(*v3 + 16);
      atomic_fetch_add(v6, 1u);
      char v8 = v1;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHasStylusDevice>(v5, &v8, 0, 0);
      if (v5) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v6);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHasStylusDevice>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2679;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint32_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint32_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

IPC::Encoder *WebKit::WebProcessProxy::fetchWebsiteData(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v17 = a3;
  uint64_t v6 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 136);
    if (v7) {
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    }
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v7;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::fetchWebsiteData: Taking a background assertion because the Web process is fetching Website data", buf, 0x12u);
  }
  atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 1u);
  uint64_t v8 = *a4;
  *a4 = 0;
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 2633;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint32_t v18 = v9;
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(v9, &v17);
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v10 = &unk_1EE9DD580;
  v10[1] = a1;
  void v10[2] = a1;
  _DWORD v10[3] = v8;
  uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)buf = v10;
  *(void *)&buf[8] = v11;
  buf[16] = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, 0, (uint64_t)buf, 1);
  if (buf[16])
  {
    uint64_t v13 = *(void *)buf;
    *(void *)buf = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  uint64_t result = v18;
  uint32_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebProcessProxy::deleteWebsiteData(uint64_t a1, double a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v19 = a4;
  uint64_t v8 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 136);
    if (v9) {
      LODWORD(v9) = *(_DWORD *)(v9 + 108);
    }
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v9;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::deleteWebsiteData: Taking a background assertion because the Web process is deleting Website data", buf, 0x12u);
  }
  atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 1u);
  uint64_t v10 = *a5;
  *a5 = 0;
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2624;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v20 = v11;
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(v11, &v19);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v11, a2);
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v12 = &unk_1EE9DD5A8;
  v12[1] = a1;
  void v12[2] = a1;
  v12[3] = v10;
  uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)buf = v12;
  *(void *)&buf[8] = v13;
  buf[16] = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v20, 0, (uint64_t)buf, 1);
  if (buf[16])
  {
    uint64_t v15 = *(void *)buf;
    *(void *)buf = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  uint64_t result = v20;
  uint64_t v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

IPC::Encoder *WebKit::WebProcessProxy::deleteWebsiteDataForOrigins(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v19 = a3;
  uint64_t v8 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 136);
    if (v9) {
      LODWORD(v9) = *(_DWORD *)(v9 + 108);
    }
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v9;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::deleteWebsiteDataForOrigins: Taking a background assertion because the Web process is deleting Website data for several origins", buf, 0x12u);
  }
  atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 1u);
  uint64_t v10 = *a5;
  *a5 = 0;
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2626;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v20 = v11;
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(v11, &v19);
  IPC::VectorArgumentCoder<false,WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v11, a4);
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v12 = &unk_1EE9DD5D0;
  v12[1] = a1;
  void v12[2] = a1;
  v12[3] = v10;
  uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)buf = v12;
  *(void *)&buf[8] = v13;
  buf[16] = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v20, 0, (uint64_t)buf, 1);
  if (buf[16])
  {
    uint64_t v15 = *(void *)buf;
    *(void *)buf = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  uint64_t result = v20;
  uint64_t v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::transformHandlesToObjects(API::Object *)::Transformer::~Transformer(uint64_t result, void *a2)
{
  uint64_t v2 = *(unsigned int **)(result + 8);
  *(void *)(result + 8) = 0;
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      uint64_t v3 = result;
      WTF::fastFree((WTF *)v2, a2);
      return v3;
    }
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::didDropLastAssertion(WebKit::WebProcessProxy *this)
{
  WebKit::BackgroundProcessResponsivenessTimer::updateState((WebKit::WebProcessProxy *)((char *)this + 416));

  return WebKit::WebProcessProxy::updateRuntimeStatistics((uint64_t)this);
}

IPC::Encoder *WebKit::WebProcessProxy::prepareToDropLastAssertion(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 712)
    || !WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(a1 + 592))
    || WebKit::WebProcessProxy::canTerminateAuxiliaryProcess((WebKit::WebProcessProxy *)a1)
    && WebKit::WebProcessProxy::canBeAddedToWebProcessCache((WebKit::WebProcessProxy *)a1))
  {
    uint64_t v4 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return (IPC::Encoder *)v5(v4);
  }
  else
  {
    uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v7 = 2661;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 66) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    uint64_t v16 = v7;
    uint64_t v8 = *a2;
    *a2 = 0;
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v9 = &unk_1EE9DD620;
    v9[1] = v8;
    v14[0] = v9;
    v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    char v15 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v16, 0, (uint64_t)v14, 0);
    if (v15)
    {
      uint64_t v11 = v14[0];
      v14[0] = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
    }
    uint64_t result = v16;
    uint64_t v16 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v10);
      return (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
  }
  return result;
}

unsigned int *WebKit::WebProcessProxy::isResponsiveWithLazyStop(unsigned int *this)
{
  if (this[179])
  {
    uint64_t v1 = (uint64_t)this;
    if (!*((unsigned char *)this + 105))
    {
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(this + 2, (uint64_t)this);
      uint64_t v2 = *(atomic_uint **)(v1 + 8);
      if (v2) {
        atomic_fetch_add(v2, 1u);
      }
      uint64_t v3 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      *(void *)uint64_t v3 = &unk_1EE9DD698;
      *((void *)v3 + 1) = v2;
      uint64_t v4 = v3;
      WebKit::AuxiliaryProcessProxy::checkForResponsiveness(v1, (uint64_t *)&v4, 1);
      this = v4;
      if (v4) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v4 + 8))(v4);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebProcessProxy::shouldConfigureJSCForTesting(WebKit::WebProcessProxy *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 64) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(unsigned __int8 *)(*(void *)(v2 + 48) + 94);
}

uint64_t WebKit::WebProcessProxy::isJITEnabled(WebKit::WebProcessProxy *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 64) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(unsigned __int8 *)(*(void *)(v2 + 48) + 95);
}

unsigned __int8 *WebKit::WebProcessProxy::processTerminated(WebKit::WebProcessProxy *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 17);
    if (v3) {
      LODWORD(v3) = *(_DWORD *)(v3 + 108);
    }
    int v5 = 134218240;
    uint64_t v6 = this;
    __int16 v7 = 1024;
    int v8 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::processTerminated:", (uint8_t *)&v5, 0x12u);
  }
  return WebKit::BackgroundProcessResponsivenessTimer::processTerminated((WebKit::WebProcessProxy *)((char *)this + 416));
}

void WebKit::WebProcessProxy::logDiagnosticMessageForResourceLimitTermination(WebKit::WebProcessProxy *this, const WTF::String *a2)
{
  uint64_t v2 = *((void *)this + 69);
  if (v2 && *(_DWORD *)(v2 - 12))
  {
    WebKit::WebProcessProxy::pages(this, (uint64_t)&v9);
    if (v10)
    {
      uint64_t v4 = *(CFTypeRef **)v9;
      CFRetain(*(CFTypeRef *)(*(void *)v9 + 8));
      uint64_t v6 = (WebCore::DiagnosticLoggingKeys *)WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v5);
      WebCore::DiagnosticLoggingKeys::simulatedPageCrashKey((uint64_t *)&v9, v6);
      WebKit::WebPageProxy::logDiagnosticMessage((WebKit::WebPageProxy *)v4, (uint64_t)&v9, (uint64_t)a2, 0);
      int v8 = v9;
      uint64_t v9 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v7);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      CFRelease(v4[1]);
    }
    else
    {
      __break(0xC471u);
    }
  }
}

unsigned int *WebKit::WebProcessProxy::didExceedActiveMemoryLimit(WebKit::WebProcessProxy *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358280;
  BOOL v3 = os_log_type_enabled((os_log_t)qword_1EB358280, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    uint64_t v7 = *((void *)this + 17);
    if (v7) {
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    }
    *(_DWORD *)int v8 = 134218240;
    *(void *)&v8[4] = this;
    __int16 v9 = 1024;
    int v10 = v7;
    _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::didExceedActiveMemoryLimit: Terminating WebProcess because it has exceeded the active memory limit", v8, 0x12u);
  }
  WebCore::DiagnosticLoggingKeys::exceededActiveMemoryLimitKey((uint64_t *)v8, (WebCore::DiagnosticLoggingKeys *)v3);
  WebKit::WebProcessProxy::logDiagnosticMessageForResourceLimitTermination(this, (const WTF::String *)v8);
  int v5 = *(WTF::StringImpl **)v8;
  *(void *)int v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return WebKit::WebProcessProxy::requestTermination((unsigned int *)this, 0);
}

unsigned int *WebKit::WebProcessProxy::didExceedInactiveMemoryLimit(WebKit::WebProcessProxy *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358280;
  BOOL v3 = os_log_type_enabled((os_log_t)qword_1EB358280, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    uint64_t v7 = *((void *)this + 17);
    if (v7) {
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    }
    *(_DWORD *)int v8 = 134218240;
    *(void *)&v8[4] = this;
    __int16 v9 = 1024;
    int v10 = v7;
    _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::didExceedInactiveMemoryLimit: Terminating WebProcess because it has exceeded the inactive memory limit", v8, 0x12u);
  }
  WebCore::DiagnosticLoggingKeys::exceededInactiveMemoryLimitKey((uint64_t *)v8, (WebCore::DiagnosticLoggingKeys *)v3);
  WebKit::WebProcessProxy::logDiagnosticMessageForResourceLimitTermination(this, (const WTF::String *)v8);
  int v5 = *(WTF::StringImpl **)v8;
  *(void *)int v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return WebKit::WebProcessProxy::requestTermination((unsigned int *)this, 0);
}

void WebKit::WebProcessProxy::didExceedMemoryFootprintThreshold(WebKit::WebProcessProxy *this, unint64_t a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358280;
  if (os_log_type_enabled((os_log_t)qword_1EB358280, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)this + 17);
    if (v5) {
      LODWORD(v5) = *(_DWORD *)(v5 + 108);
    }
    *(_DWORD *)buf = 134218496;
    *(void *)&uint8_t buf[4] = this;
    __int16 v38 = 1024;
    int v39 = v5;
    __int16 v40 = 2048;
    unint64_t v41 = a2 >> 20;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::didExceedMemoryFootprintThreshold: WebProcess exceeded notification threshold (current footprint: %zu MB)", buf, 0x1Cu);
  }
  uint64_t v6 = *((void *)this + 94);
  if (!v6) {
    return;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  __int16 v36 = 0;
  uint64_t v7 = (WebCore::PublicSuffixStore *)WebKit::WebProcessProxy::pages(this, (uint64_t)&v34);
  if (!v35)
  {
    WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v8);
    BOOL v11 = 0;
    BOOL v12 = 0;
LABEL_61:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    __int16 v36 = *(WTF::StringImpl **)buf;
    goto LABEL_51;
  }
  unint64_t v30 = a2;
  __int16 v9 = 0;
  int v10 = 0;
  LOBYTE(v11) = 0;
  LOBYTE(v12) = 0;
  uint64_t v13 = v34;
  uint64_t v14 = 8 * v35;
  do
  {
    WebCore::PublicSuffixStore::singleton(v7);
    v32[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v32);
    WebKit::WebPageProxy::currentURL(*v13, (uint64_t *)&v31);
    MEMORY[0x19972E8B0](buf, v32, &v31, 0);
    WTF::URL::host((WTF::URL *)buf);
    WebCore::PublicSuffixStore::topPrivatelyControlledDomain();
    int v17 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v15);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint32_t v18 = v31;
    uint64_t v31 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v15);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    int v19 = v32[0];
    v32[0] = 0;
    if (!v19) {
      goto LABEL_19;
    }
    if (*(_DWORD *)v19 != 2)
    {
      *(_DWORD *)v19 -= 2;
LABEL_19:
      if (!v10) {
        goto LABEL_27;
      }
      goto LABEL_20;
    }
    WTF::StringImpl::destroy(v19, v15);
    if (!v10)
    {
LABEL_27:
      __int16 v9 = v33;
      int v33 = 0;
      __int16 v36 = v9;
      goto LABEL_34;
    }
LABEL_20:
    uint64_t v20 = v33;
    if (!*((_DWORD *)v10 + 1))
    {
      int v33 = 0;
      __int16 v36 = v20;
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v15);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
      __int16 v9 = v20;
      int v10 = v20;
LABEL_30:
      if (v11) {
        goto LABEL_31;
      }
      goto LABEL_35;
    }
    if (WTF::equal(v10, v33, v16)) {
      goto LABEL_30;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    __int16 v9 = *(WTF::StringImpl **)buf;
    __int16 v36 = *(WTF::StringImpl **)buf;
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v15);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
LABEL_34:
    int v10 = v9;
    if (v11)
    {
LABEL_31:
      BOOL v11 = 1;
      if (v12) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
LABEL_35:
    BOOL v11 = *(unsigned char *)(*((void *)*v13 + 4) + 1003) != 0;
    if (v12) {
      goto LABEL_37;
    }
LABEL_36:
    uint64_t v21 = *((void *)*v13 + 4);
    if (*(void *)(v21 + 1944))
    {
LABEL_37:
      BOOL v12 = 1;
      goto LABEL_38;
    }
    BOOL v12 = *(void *)(v21 + 1952) != 0;
LABEL_38:
    uint64_t v7 = v33;
    int v33 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        uint64_t v7 = (WebCore::PublicSuffixStore *)WTF::StringImpl::destroy(v7, v15);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    ++v13;
    v14 -= 8;
  }
  while (v14);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v15);
  if (!v9)
  {
    a2 = v30;
    goto LABEL_61;
  }
  if (!*((_DWORD *)v9 + 1))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    __int16 v36 = *(WTF::StringImpl **)buf;
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v22);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  a2 = v30;
LABEL_51:
  double v23 = WebKit::WebProcessProxy::totalForegroundTime(this);
  double v24 = v23 + WebKit::WebProcessProxy::totalBackgroundTime(this);
  v25.n128_f64[0] = WebKit::WebProcessProxy::totalSuspendedTime(this) + v24;
  uint64_t v26 = *((void *)this + 69);
  if (v26) {
    uint64_t v27 = *(unsigned int *)(v26 - 12);
  }
  else {
    uint64_t v27 = 0;
  }
  (*(void (**)(void, unint64_t, WTF::StringImpl **, uint64_t, BOOL, BOOL, BOOL, __n128))(**(void **)(v6 + 384) + 128))(*(void *)(v6 + 384), a2, &v36, v27, *((unsigned char *)this + 384) == 2, v11, !v12, v25);
  uint64_t v29 = v36;
  __int16 v36 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v28);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  CFRelease(*(CFTypeRef *)(v6 + 8));
}

double WebKit::WebProcessProxy::totalForegroundTime(WebKit::WebProcessProxy *this)
{
  if (*((unsigned char *)this + 1160) != 2 || *((double *)this + 146) == 0.0) {
    return *((double *)this + 147);
  }
  WTF::MonotonicTime::now(this);
  return *((double *)this + 147) + v2 - *((double *)this + 146);
}

double WebKit::WebProcessProxy::totalBackgroundTime(WebKit::WebProcessProxy *this)
{
  if (*((unsigned char *)this + 1160) != 1 || *((double *)this + 146) == 0.0) {
    return *((double *)this + 148);
  }
  WTF::MonotonicTime::now(this);
  return *((double *)this + 148) + v2 - *((double *)this + 146);
}

double WebKit::WebProcessProxy::totalSuspendedTime(WebKit::WebProcessProxy *this)
{
  if (*((unsigned char *)this + 1160) || *((double *)this + 146) == 0.0) {
    return *((double *)this + 149);
  }
  WTF::MonotonicTime::now(this);
  return *((double *)this + 149) + v3 - *((double *)this + 146);
}

unsigned int *WebKit::WebProcessProxy::didExceedCPULimit(atomic_uint *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  double v2 = (unsigned int *)(this + 4);
  atomic_fetch_add(this + 4, 1u);
  WebKit::WebProcessProxy::pages((WebKit::WebProcessProxy *)this, (uint64_t)&v21);
  if (!v22)
  {
LABEL_7:
    WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v3);
    __int16 v9 = qword_1EB358280;
    BOOL v10 = os_log_type_enabled((os_log_t)qword_1EB358280, OS_LOG_TYPE_ERROR);
    if (v10)
    {
      uint64_t v20 = *((void *)this + 17);
      if (v20) {
        LODWORD(v2WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = *(_DWORD *)(v20 + 108);
      }
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = this;
      __int16 v24 = 1024;
      int v25 = v20;
      _os_log_error_impl(&dword_1985F2000, v9, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::didExceedCPULimit: Terminating background WebProcess that has exceeded the background CPU limit", buf, 0x12u);
    }
    WebCore::DiagnosticLoggingKeys::exceededBackgroundCPULimitKey((uint64_t *)buf, (WebCore::DiagnosticLoggingKeys *)v10);
    WebKit::WebProcessProxy::logDiagnosticMessageForResourceLimitTermination((WebKit::WebProcessProxy *)this, (const WTF::String *)buf);
    BOOL v12 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v11);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t result = WebKit::WebProcessProxy::requestTermination((unsigned int *)this, 1);
    if (!this) {
      return result;
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v2);
  }
  uint64_t v4 = v21;
  uint64_t v5 = 8 * v22;
  while (1)
  {
    uint64_t v6 = *v4;
    CFRetain(*(CFTypeRef *)(*v4 + 8));
    uint64_t v7 = *(void *)(v6 + 32);
    int v8 = *(_DWORD *)(v7 + 824);
    if (v8)
    {
      uint64_t v13 = qword_1EB358280;
      if (!os_log_type_enabled((os_log_t)qword_1EB358280, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_24;
      }
      uint64_t v14 = *((void *)this + 17);
      if (v14) {
        LODWORD(v14) = *(_DWORD *)(v14 + 108);
      }
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = this;
      __int16 v24 = 1024;
      int v25 = v14;
      char v15 = "%p - [PID=%i] WebProcessProxy::didExceedCPULimit: WebProcess has exceeded the background CPU limit but we ar"
            "e not terminating it because there is audio playing";
      goto LABEL_23;
    }
    if ((v8 & 0x1800) != 0)
    {
      uint64_t v13 = qword_1EB358280;
      if (!os_log_type_enabled((os_log_t)qword_1EB358280, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_24;
      }
      uint64_t v16 = *((void *)this + 17);
      if (v16) {
        LODWORD(v16) = *(_DWORD *)(v16 + 108);
      }
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = this;
      __int16 v24 = 1024;
      int v25 = v16;
      char v15 = "%p - [PID=%i] WebProcessProxy::didExceedCPULimit: WebProcess has exceeded the background CPU limit but we ar"
            "e not terminating it because it is capturing audio / video";
      goto LABEL_23;
    }
    if ((*(_WORD *)(v7 + 64) & 4) != 0) {
      break;
    }
    CFRelease(*(CFTypeRef *)(v6 + 8));
    ++v4;
    v5 -= 8;
    if (!v5) {
      goto LABEL_7;
    }
  }
  uint64_t v13 = qword_1EB358280;
  if (!os_log_type_enabled((os_log_t)qword_1EB358280, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_24;
  }
  uint64_t v17 = *((void *)this + 17);
  if (v17) {
    LODWORD(v17) = *(_DWORD *)(v17 + 108);
  }
  *(_DWORD *)buf = 134218240;
  *(void *)&uint8_t buf[4] = this;
  __int16 v24 = 1024;
  int v25 = v17;
  char v15 = "%p - [PID=%i] WebProcessProxy::didExceedCPULimit: WebProcess has exceeded the background CPU limit but we are no"
        "t terminating it because it has a visible page";
LABEL_23:
  _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, v15, buf, 0x12u);
LABEL_24:
  CFRelease(*(CFTypeRef *)(v6 + 8));
  uint64_t result = (unsigned int *)WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v18);
  if (this) {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v2);
  }
  return result;
}

void WebKit::WebProcessProxy::didCollectPrewarmInformation(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (*a2 && *((_DWORD *)*a2 + 1) && !MEMORY[0x19972E990]())
  {
    uint64_t v6 = *(void *)(a1 + 512);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 8);
      if (v7) {
        uint64_t v8 = v7 - 16;
      }
      else {
        uint64_t v8 = 0;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    CFRetain(*(CFTypeRef *)(v8 + 8));
    BOOL v10 = (uint64_t *)(v8 + 784);
    uint64_t v11 = *(void *)(v8 + 784);
    if (v11)
    {
      if (*(_DWORD *)(v11 - 12) != 100) {
        goto LABEL_36;
      }
      do
      {
        uint64_t v12 = *v10;
        int v13 = WTF::weakRandomNumber<unsigned int>();
        uint64_t v15 = *v10;
        if (*v10) {
          LODWORD(v15) = *(_DWORD *)(v15 - 8);
        }
        uint64_t v16 = v15 & v13;
      }
      while ((WTF::equal(*(WTF **)(v12 + 16 * v16), 0, v14) & 1) != 0 || *(void *)(v12 + 16 * v16) == -1);
      uint64_t v17 = (WTF::StringImpl **)(v12 + 16 * v16);
      uint64_t v11 = *v10;
      if (*v10)
      {
        uint32_t v18 = (WTF::StringImpl **)(v11 + 16 * *(unsigned int *)(v11 - 4));
        if (v18 == v17) {
          goto LABEL_36;
        }
      }
      else
      {
        uint32_t v18 = 0;
      }
      if (v18 == v17) {
        goto LABEL_34;
      }
      WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>(v17, v9);
      std::unique_ptr<WebCore::PrewarmInformation>::reset[abi:sn180100]((uint64_t *)(v12 + 16 * v16 + 8), 0);
      ++*(_DWORD *)(*v10 - 16);
      uint64_t v21 = *v10;
      if (*v10) {
        int v22 = *(_DWORD *)(v21 - 12) - 1;
      }
      else {
        int v22 = -1;
      }
      *(_DWORD *)(v21 - 12) = v22;
      uint64_t v11 = *v10;
      if (*v10)
      {
        unsigned int v23 = *(_DWORD *)(v11 - 4);
        if (6 * *(_DWORD *)(v11 - 12) >= v23 || v23 < 9) {
          goto LABEL_36;
        }
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::PrewarmInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash((uint64_t *)(v8 + 784), v23 >> 1, 0);
        uint64_t v11 = *v10;
LABEL_34:
        if (v11) {
          goto LABEL_36;
        }
      }
    }
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::PrewarmInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)(v8 + 784), 0);
    uint64_t v11 = *v10;
    if (!*v10)
    {
      int v25 = 0;
LABEL_37:
      unsigned int v26 = WTF::ASCIICaseInsensitiveHash::hash(*a2, v9) & v25;
      uint64_t v27 = v11 + 16 * v26;
      if ((WTF::equal(*(WTF **)v27, 0, v28) & 1) == 0)
      {
        unint64_t v30 = 0;
        int v31 = 1;
        do
        {
          if (*(void *)v27 == -1)
          {
            unint64_t v30 = (void *)v27;
          }
          else if (WTF::equalIgnoringASCIICase(*(WTF **)v27, *a2, v29))
          {
            goto LABEL_55;
          }
          unsigned int v26 = (v26 + v31) & v25;
          uint64_t v27 = v11 + 16 * v26;
          ++v31;
        }
        while (!WTF::equal(*(WTF **)v27, 0, v29));
        if (v30)
        {
          *unint64_t v30 = 0;
          v30[1] = 0;
          --*(_DWORD *)(*v10 - 16);
          uint64_t v27 = (uint64_t)v30;
        }
      }
      WTF::String::operator=((uint64_t *)v27, a2);
      __int16 v32 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
      *__int16 v32 = 0u;
      v32[1] = 0u;
      *(void *)unint64_t v41 = 0;
      std::unique_ptr<WebCore::PrewarmInformation>::reset[abi:sn180100]((uint64_t *)(v27 + 8), v32);
      std::unique_ptr<WebCore::PrewarmInformation>::reset[abi:sn180100]((uint64_t *)v41, 0);
      uint64_t v33 = *v10;
      if (*v10) {
        int v34 = *(_DWORD *)(v33 - 12) + 1;
      }
      else {
        int v34 = 1;
      }
      *(_DWORD *)(v33 - 12) = v34;
      uint64_t v35 = *v10;
      if (*v10) {
        int v36 = *(_DWORD *)(v35 - 12);
      }
      else {
        int v36 = 0;
      }
      uint64_t v37 = (*(_DWORD *)(v35 - 16) + v36);
      unint64_t v38 = *(unsigned int *)(v35 - 4);
      if (v38 > 0x400)
      {
        if (v38 > 2 * v37)
        {
LABEL_55:
          int v39 = *(unsigned int **)(v27 + 8);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v39, a3);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v39 + 4, a3 + 16);
          if (v8)
          {
            __int16 v40 = *(const void **)(v8 + 8);
            CFRelease(v40);
          }
          return;
        }
      }
      else if (3 * v38 > 4 * v37)
      {
        goto LABEL_55;
      }
      uint64_t v27 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::PrewarmInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)(v8 + 784), (WTF::ASCIICaseInsensitiveHash **)v27);
      goto LABEL_55;
    }
LABEL_36:
    int v25 = *(_DWORD *)(v11 - 8);
    goto LABEL_37;
  }
  int v19 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)unint64_t v41 = 136446210;
    *(void *)&float32x2_t v41[4] = "void WebKit::WebProcessProxy::didCollectPrewarmInformation(const WebCore::RegistrableDomain &, "
                         "const WebCore::PrewarmInformation &)";
    _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebProcessProxy.cpp 2148: Invalid message dispatched %{public}s", v41, 0xCu);
  }
  uint64_t v20 = *(void *)(a1 + 144);
  if (!v20)
  {
    __break(0xC471u);
    JUMPOUT(0x198EEE7A0);
  }
  *(unsigned char *)(v20 + 98) = 1;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebProcess::GetActivePagesOriginsForTesting,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2638;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  __int16 v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  int v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v13 = &unk_1EE9DD6C0;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint32_t v18 = v24;
  __int16 v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::WebProcessProxy::didStartProvisionalLoadForMainFrame(WebKit::WebProcessProxy *this, const WTF::URL *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 712))
  {
    __break(0xC471u);
    goto LABEL_51;
  }
  uint64_t v4 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)this + 17);
    if (v5) {
      LODWORD(v5) = *(_DWORD *)(v5 + 108);
    }
    *(_DWORD *)buf = 134218240;
    *(void *)uint64_t v27 = this;
    *(_WORD *)&v27[8] = 1024;
    *(_DWORD *)&v27[10] = v5;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::didStartProvisionalLoadForMainFrame:", buf, 0x12u);
  }
  uint64_t v6 = (WTF **)((char *)this + 696);
  if (!*((unsigned char *)this + 704)
    || (uint64_t result = (uint64_t)*v6) != 0 && *(_DWORD *)(result + 4) && (uint64_t result = MEMORY[0x19972E990](), (result & 1) == 0))
  {
    uint64_t result = WTF::URL::protocolIs();
    if ((result & 1) == 0)
    {
      if ((*((unsigned char *)a2 + 8) & 2) == 0)
      {
        uint64_t v9 = *(void *)(*((void *)this + 64) + 8);
        uint64_t v10 = v9 ? v9 - 16 : 0;
        if (!*(unsigned char *)(*(void *)(v10 + 48) + 88))
        {
          if (!*((unsigned char *)this + 704))
          {
            *((void *)this + 87) = 0;
            *((unsigned char *)this + 704) = 1;
            return result;
          }
          uint64_t result = (uint64_t)*v6;
          *uint64_t v6 = 0;
          if (!result) {
            return result;
          }
          goto LABEL_28;
        }
      }
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v23, a2);
      uint64_t v11 = *((void *)this + 94);
      if (!v11) {
        goto LABEL_54;
      }
      CFRetain(*(CFTypeRef *)(v11 + 8));
      if (!*((unsigned char *)this + 704)) {
        goto LABEL_24;
      }
      if (WTF::equal(*v6, v23, v12))
      {
LABEL_54:
        if (*((unsigned char *)this + 704))
        {
          int v13 = v23;
          char v23 = 0;
          uint64_t v14 = *v6;
          *uint64_t v6 = v13;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
            {
              WTF::StringImpl::destroy(v14, v8);
              if (!v11)
              {
LABEL_27:
                uint64_t result = (uint64_t)v23;
                char v23 = 0;
                if (!result) {
                  return result;
                }
LABEL_28:
                if (*(_DWORD *)result == 2) {
                  return WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
                }
                *(_DWORD *)result -= 2;
                return result;
              }
            }
            else
            {
              *(_DWORD *)v14 -= 2;
              if (!v11) {
                goto LABEL_27;
              }
            }
LABEL_26:
            CFRelease(*(CFTypeRef *)(v11 + 8));
            goto LABEL_27;
          }
LABEL_25:
          if (!v11) {
            goto LABEL_27;
          }
          goto LABEL_26;
        }
LABEL_24:
        uint64_t v15 = v23;
        char v23 = 0;
        *((void *)this + 87) = v15;
        *((unsigned char *)this + 704) = 1;
        goto LABEL_25;
      }
      if (*((unsigned char *)this + 872))
      {
        uint64_t v16 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v11);
        uint64_t v17 = (unsigned int *)(v16 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v16 + 16), 1u);
        if (!*((unsigned char *)this + 704)) {
          goto LABEL_51;
        }
        uint64_t v18 = *(void *)(v11 + 24);
        uint64_t v24 = *((void *)this + 22);
        uint64_t v25 = v18;
        buf[0] = 1;
        *(void *)&v27[4] = &v25;
        *(void *)&v27[12] = (char *)this + 696;
        BOOL v28 = &v24;
        WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::TerminateRemoteWorkerContextConnectionWhenPossible>(v16, (uint64_t)buf, 0, 0);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v17);
      }
      if (!*((unsigned char *)this + 952)) {
        goto LABEL_36;
      }
      uint64_t v19 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v11);
      uint64_t v20 = (unsigned int *)(v19 + 16);
      atomic_fetch_add((atomic_uint *volatile)(v19 + 16), 1u);
      if (*((unsigned char *)this + 704))
      {
        uint64_t v21 = *(void *)(v11 + 24);
        uint64_t v24 = *((void *)this + 22);
        uint64_t v25 = v21;
        buf[0] = 2;
        *(void *)&v27[4] = &v25;
        *(void *)&v27[12] = (char *)this + 696;
        BOOL v28 = &v24;
        WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::TerminateRemoteWorkerContextConnectionWhenPossible>(v19, (uint64_t)buf, 0, 0);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v20);
LABEL_36:
        if (*((unsigned char *)this + 704))
        {
          int v22 = *v6;
          *uint64_t v6 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v8);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
        }
        else
        {
          *((void *)this + 87) = 0;
          *((unsigned char *)this + 704) = 1;
        }
        goto LABEL_26;
      }
LABEL_51:
      __break(1u);
    }
  }
  return result;
}

void WebKit::WebProcessProxy::addSuspendedPageProxy(WebKit::WebProcessProxy *this, WebKit::SuspendedPageProxy *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  double v3 = (char *)this + 592;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteAudioSessionProxy>((uint64_t)this + 592, (unsigned int *)a2, (uint64_t)&v8);
  int v5 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)v3, v4);
  uint64_t v6 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *((void *)this + 17);
    if (v7) {
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    }
    int v8 = 134218496;
    uint64_t v9 = this;
    __int16 v10 = 1024;
    int v11 = v7;
    __int16 v12 = 1024;
    int v13 = v5;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::addSuspendedPageProxy: suspendedPageCount=%u", (uint8_t *)&v8, 0x18u);
  }
  if (v5 == 1)
  {
    LOBYTE(v8) = 1;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHasSuspendedPageProxy>((uint64_t)this, (char *)&v8);
  }
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHasSuspendedPageProxy>(uint64_t a1, char *a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2680;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  __int16 v12 = v4;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v4, a2);
  LOBYTE(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  char v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  uint64_t result = v12;
  __int16 v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::WebProcessProxy::removeSuspendedPageProxy(WebKit::WebProcessProxy *this, WebKit::SuspendedPageProxy *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)this + 592;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>((uint64_t)this + 592, a2);
  int v6 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)v4, v5);
  uint64_t v7 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *((void *)this + 17);
    if (v8) {
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    }
    int v11 = 134218496;
    __int16 v12 = this;
    __int16 v13 = 1024;
    int v14 = v8;
    __int16 v15 = 1024;
    int v16 = v6;
    _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::removeSuspendedPageProxy: suspendedPageCount=%u", (uint8_t *)&v11, 0x18u);
  }
  if (!v6)
  {
    uint64_t v9 = *(void *)(*((void *)a2 + 3) + 8);
    if (v9) {
      uint64_t v10 = v9 - 16;
    }
    else {
      uint64_t v10 = 0;
    }
    WebKit::WebProcessProxy::reportProcessDisassociatedWithPageIfNecessary((uint64_t)this, *(void *)(*(void *)(v10 + 32) + 760));
    LOBYTE(v11) = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetHasSuspendedPageProxy>((uint64_t)this, (char *)&v11);
    WebKit::WebProcessProxy::maybeShutDown(this);
  }
}

void *WebKit::WebProcessProxy::didSyncSharedPreferencesForWebProcessWithNetworkProcess(void *this, unint64_t a2)
{
  this[140] = a2;
  unint64_t v2 = this[142];
  if (v2 <= a2)
  {
    double v3 = this;
    if (this[141] >= v2)
    {
      uint64_t v4 = this[143];
      this[143] = 0;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 1);
        this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
        v3[142] = 0;
      }
    }
  }
  return this;
}

void *WebKit::WebProcessProxy::didSyncSharedPreferencesForWebProcessWithGPUProcess(void *this, unint64_t a2)
{
  this[141] = a2;
  unint64_t v2 = this[142];
  if (this[140] >= v2 && v2 <= a2)
  {
    uint64_t v4 = this;
    uint64_t v5 = this[143];
    this[143] = 0;
    if (v5)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, 1);
      this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
      v4[142] = 0;
    }
  }
  return this;
}

void *WebKit::WebProcessProxy::waitForSharedPreferencesForWebProcessToSync(void *result, unint64_t a2, uint64_t *a3)
{
  if (result[140] >= a2 || result[141] >= result[142])
  {
    uint64_t v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 1);
  }
  else
  {
    result[142] = a2;
    uint64_t v3 = *a3;
    *a3 = 0;
    uint64_t v4 = result[143];
    result[143] = v3;
    if (!v4) {
      return result;
    }
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return (void *)v5(v4);
}

void WebKit::WebProcessProxy::createSpeechRecognitionServer(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  WebKit::WebProcessProxy::pages((WebKit::WebProcessProxy *)a1, (uint64_t)buf);
  if (!v47)
  {
LABEL_5:
    WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v4);
    return;
  }
  uint64_t v5 = *(uint64_t **)buf;
  uint64_t v6 = 8 * v47;
  while (1)
  {
    uint64_t v7 = *v5;
    CFRetain(*(CFTypeRef *)(*v5 + 8));
    if (*(void *)(*(void *)(v7 + 32) + 1928) == a2) {
      break;
    }
    CFRelease(*(CFTypeRef *)(v7 + 8));
    ++v5;
    v6 -= 8;
    if (!v6) {
      goto LABEL_5;
    }
  }
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v8);
  uint64_t v9 = (uint64_t *)(a1 + 1032);
  uint64_t v10 = *(void *)(a1 + 1032);
  if (!v10)
  {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 1032), 0);
    uint64_t v10 = *v9;
    if (*v9) {
      int v11 = *(_DWORD *)(v10 - 8);
    }
    else {
      int v11 = 0;
    }
    goto LABEL_18;
  }
  int v11 = *(_DWORD *)(v10 - 8);
  unint64_t v12 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v11 & ((v14 >> 31) ^ v14);
  uint64_t v16 = *(void *)(v10 + 16 * v15);
  if (v16 != a2)
  {
    int v17 = 1;
    while (v16)
    {
      unsigned int v15 = (v15 + v17) & v11;
      uint64_t v16 = *(void *)(v10 + 16 * v15);
      ++v17;
      if (v16 == a2) {
        goto LABEL_11;
      }
    }
LABEL_18:
    unint64_t v20 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    unsigned int v23 = v11 & ((v22 >> 31) ^ v22);
    uint64_t v24 = (uint64_t *)(v10 + 16 * v23);
    uint64_t v25 = *v24;
    if (*v24)
    {
      unsigned int v26 = 0;
      int v27 = 1;
      while (v25 != a2)
      {
        if (v25 == -1) {
          unsigned int v26 = v24;
        }
        unsigned int v23 = (v23 + v27) & v11;
        uint64_t v24 = (uint64_t *)(v10 + 16 * v23);
        uint64_t v25 = *v24;
        ++v27;
        if (!*v24)
        {
          if (v26)
          {
            *unsigned int v26 = 0;
            v26[1] = 0;
            --*(_DWORD *)(*v9 - 16);
            uint64_t v24 = v26;
          }
          goto LABEL_26;
        }
      }
      goto LABEL_37;
    }
LABEL_26:
    uint64_t v28 = v24[1];
    uint64_t *v24 = a2;
    v24[1] = 0;
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    }
    uint64_t v29 = *v9;
    if (*v9) {
      int v30 = *(_DWORD *)(v29 - 12) + 1;
    }
    else {
      int v30 = 1;
    }
    *(_DWORD *)(v29 - 12) = v30;
    uint64_t v31 = *v9;
    if (*v9) {
      int v32 = *(_DWORD *)(v31 - 12);
    }
    else {
      int v32 = 0;
    }
    uint64_t v33 = (*(_DWORD *)(v31 - 16) + v32);
    unint64_t v34 = *(unsigned int *)(v31 - 4);
    if (v34 > 0x400)
    {
      if (v34 > 2 * v33) {
        goto LABEL_37;
      }
    }
    else if (3 * v34 > 4 * v33)
    {
LABEL_37:
      uint64_t v35 = (atomic_uint **)(v7 + 24);
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 24), v7 + 16);
      int v36 = *(atomic_uint **)(v7 + 24);
      if (v36) {
        atomic_fetch_add(v36, 1u);
      }
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 24), v7 + 16);
      uint64_t v37 = *v35;
      if (*v35) {
        atomic_fetch_add(v37, 1u);
      }
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 24), v7 + 16);
      unint64_t v38 = *v35;
      if (*v35) {
        atomic_fetch_add(v38, 1u);
      }
      uint64_t v39 = WTF::fastMalloc((WTF *)0x58);
      __int16 v40 = (void *)WTF::fastMalloc((WTF *)0x10);
      *__int16 v40 = &unk_1EE9DCB28;
      v40[1] = v36;
      unint64_t v41 = (void *)WTF::fastMalloc((WTF *)0x10);
      *unint64_t v41 = &unk_1EE9DCB50;
      v41[1] = v37;
      uint64_t v42 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v42 = &unk_1EE9DCB78;
      v42[1] = v38;
      *(void *)uint64_t v39 = &unk_1EE9BAF48;
      *(void *)(v39 + 8) = 0;
      *(void *)(v39 + 16) = &unk_1EE9BAF90;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
      uint64_t v43 = *(atomic_uint **)(a1 + 8);
      atomic_fetch_add(v43, 1u);
      *(void *)(v39 + 24) = v43;
      *(void *)(v39 + 32) = a2;
      *(void *)(v39 + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
      *(void *)(v39 + 48) = v40;
      *(void *)(v39 + 56) = 0;
      *(void *)(v39 + 64) = v41;
      *(unsigned char *)(v39 + 72) = 0;
      *(void *)(v39 + 8WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v42;
      uint64_t v44 = v24[1];
      v24[1] = v39;
      if (v44)
      {
        (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
        uint64_t v39 = v24[1];
      }
      v45[0] = 146;
      v45[1] = a2;
      WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(a1 + 160), (unsigned __int8 *)v45, v39, (unsigned __int8 **)buf);
      goto LABEL_46;
    }
    uint64_t v24 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 1032), v24);
    goto LABEL_37;
  }
LABEL_11:
  uint64_t v18 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::WebProcessProxy::createSpeechRecognitionServer(SpeechRecognitionServerIdentifier)";
    _os_log_fault_impl(&dword_1985F2000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebProcessProxy.cpp 2333: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  uint64_t v19 = *(void *)(a1 + 144);
  if (!v19)
  {
    __break(0xC471u);
    JUMPOUT(0x198EEF604);
  }
  *(unsigned char *)(v19 + 98) = 1;
LABEL_46:
  CFRelease(*(CFTypeRef *)(v7 + 8));
}

uint64_t *WebKit::WebProcessProxy::destroySpeechRecognitionServer(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 1032);
  uint64_t v4 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 1032), &v7);
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::SpeechRecognitionServer>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::SpeechRecognitionServer>>,WTF::HashTableTraits>::take(v3, v4, &v6);
  if (v6)
  {
    IPC::MessageReceiverMap::removeMessageReceiver(a1 + 152, 0x92u, v7);
    uint64_t result = v6;
    uint64_t v6 = 0;
    if (result) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::ensureSpeechRecognitionRemoteRealtimeMediaSourceManager(WebKit::WebProcessProxy *this)
{
  uint64_t result = *((void *)this + 130);
  if (!result)
  {
    uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x28);
    *uint64_t v3 = &unk_1EE9BAEA0;
    v3[1] = 0;
    void v3[2] = &unk_1EE9BAEE8;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    uint64_t v4 = (atomic_uint *)*((void *)this + 1);
    atomic_fetch_add(v4, 1u);
    v3[3] = v4;
    void v3[4] = 0;
    uint64_t v5 = (unsigned int **)*((void *)this + 130);
    *((void *)this + 13WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v3;
    if (v5)
    {
      std::default_delete<WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager>::operator()[abi:sn180100]((uint64_t)this + 1040, v5);
      uint64_t v3 = (void *)*((void *)this + 130);
    }
    char v7 = -111;
    WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)this + 19, &v7, (uint64_t)v3, &v6);
    return *((void *)this + 130);
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::muteCaptureInPagesExcept(uint64_t a1)
{
  WebKit::WebProcessProxy::globalPages((uint64_t)&v8);
  if (v9)
  {
    uint64_t v3 = v8;
    uint64_t v4 = 8 * v9;
    do
    {
      uint64_t v5 = *v3;
      CFRetain(*(CFTypeRef *)(*v3 + 8));
      uint64_t v6 = *(void *)(v5 + 32);
      if (*(void *)(v6 + 1928) != a1) {
        WebKit::WebPageProxy::setMuted(v5, *(unsigned __int8 *)(v6 + 904) | 0x1ELL);
      }
      CFRelease(*(CFTypeRef *)(v5 + 8));
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v2);
}

uint64_t *WebKit::WebProcessProxy::pageMutedStateChanged(uint64_t *result, uint64_t a2, char a3)
{
  uint64_t v4 = a2;
  if ((a3 & 6) != 0)
  {
    uint64_t result = (uint64_t *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(result + 129, &v4);
    if (result)
    {
      uint64_t v3 = result[7];
      if (v3)
      {
        uint64_t result = *(uint64_t **)(v3 + 24);
        if (result) {
          return (uint64_t *)WebCore::SpeechRecognitionCaptureSource::mute((WebCore::SpeechRecognitionCaptureSource *)result);
        }
      }
    }
  }
  return result;
}

WebCore::SpeechRecognitionCaptureSource *WebKit::WebProcessProxy::pageIsBecomingInvisible(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t result = (WebCore::SpeechRecognitionCaptureSource *)WebCore::RealtimeMediaSourceCenter::shouldInterruptAudioOnPageVisibilityChange((WebCore::RealtimeMediaSourceCenter *)a1);
  if (result)
  {
    uint64_t result = (WebCore::SpeechRecognitionCaptureSource *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 129, &v5);
    if (result)
    {
      uint64_t v4 = *((void *)result + 7);
      if (v4)
      {
        uint64_t result = *(WebCore::SpeechRecognitionCaptureSource **)(v4 + 24);
        if (result) {
          return (WebCore::SpeechRecognitionCaptureSource *)WebCore::SpeechRecognitionCaptureSource::mute(result);
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebSWContextManagerConnection::SetUserAgent>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2758;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebSharedWorkerContextManagerConnection::SetUserAgent>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2827;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void WebKit::WebProcessProxy::updateRemoteWorkerProcessAssertion(uint64_t a1, int a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (a2 == 2) {
    uint64_t v2 = a1 + 880;
  }
  else {
    uint64_t v2 = a1 + 800;
  }
  if (*(unsigned char *)(v2 + 72))
  {
    uint64_t v5 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 136);
      if (v6) {
        LODWORD(v6) = *(_DWORD *)(v6 + 108);
      }
      char v7 = "service";
      *(_DWORD *)buf = 134218498;
      *(void *)&uint8_t buf[4] = a1;
      if (a2 == 2) {
        char v7 = "shared";
      }
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v6;
      __int16 v42 = 2082;
      uint64_t v43 = v7;
      _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::updateRemoteWorkerProcessAssertion: workerType=%{public}s", buf, 0x1Cu);
      if (!*(unsigned char *)(v2 + 72)) {
        goto LABEL_69;
      }
    }
    uint64_t v8 = (uint64_t *)(v2 + 56);
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v2 + 56), buf);
    uint64_t v9 = *(void *)(v2 + 56);
    if (v9)
    {
      uint64_t v10 = *(unsigned int *)(v9 - 4);
      uint64_t v11 = v9 + 8 * v10;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v10 = 0;
    }
    uint64_t v36 = v2 + 56;
    uint64_t v37 = v11;
    uint64_t v38 = v11;
    uint64_t v39 = v11;
    uint64_t v40 = v9 + 8 * v10;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v36);
    while (*(void *)&buf[8] != v37)
    {
      uint64_t v12 = *(void *)(**(void **)&buf[8] + 8);
      if (v12 != a1 && *(void *)(v12 + 664) != 0)
      {
        if (!*(unsigned char *)(v2 + 72)) {
          goto LABEL_69;
        }
        char v17 = (WebKit::ProcessThrottlerActivity *)(v2 + 40);
        if (*(_DWORD *)(v2 + 48) != 1
          || (uint64_t v18 = *(void *)(*(void *)v17 + 8)) == 0
          || !*(void *)(v18 + 8)
          || !*(unsigned char *)(*(void *)v17 + 32))
        {
          uint64_t v19 = WTF::fastMalloc((WTF *)0x28);
          unint64_t v20 = "Worker for foreground view(s)";
          uint64_t v21 = a1 + 200;
          uint64_t v22 = 30;
          int v23 = 1;
          goto LABEL_63;
        }
        return;
      }
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
    }
    if (!*(unsigned char *)(v2 + 72)) {
      goto LABEL_69;
    }
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v2 + 56), buf);
    uint64_t v14 = *v8;
    if (*v8)
    {
      uint64_t v15 = *(unsigned int *)(v14 - 4);
      uint64_t v16 = v14 + 8 * v15;
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v15 = 0;
    }
    uint64_t v36 = v2 + 56;
    uint64_t v37 = v16;
    uint64_t v38 = v16;
    uint64_t v39 = v16;
    uint64_t v40 = v14 + 8 * v15;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v36);
    while (1)
    {
      if (*(void *)&buf[8] == v37)
      {
        if (a2 == 1 && *(unsigned char *)(a1 + 960))
        {
          unsigned int v26 = qword_1EB358348;
          if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v27 = *(void *)(a1 + 136);
            if (v27) {
              LODWORD(v27) = *(_DWORD *)(v27 + 108);
            }
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = a1;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v27;
            _os_log_impl(&dword_1985F2000, v26, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::Service Worker for background processing", buf, 0x12u);
          }
          if (!*(unsigned char *)(v2 + 72)) {
            goto LABEL_69;
          }
          char v17 = (WebKit::ProcessThrottlerActivity *)(v2 + 40);
          if (*(_DWORD *)(v2 + 48) != 1
            || (uint64_t v28 = *(void *)(*(void *)v17 + 8)) == 0
            || !*(void *)(v28 + 8)
            || *(unsigned char *)(*(void *)v17 + 32))
          {
            uint64_t v19 = WTF::fastMalloc((WTF *)0x28);
            unint64_t v20 = "Service Worker for background processing";
            uint64_t v21 = a1 + 200;
            uint64_t v22 = 41;
            goto LABEL_62;
          }
        }
        else
        {
          if (!*(unsigned char *)(v2 + 72)) {
            goto LABEL_69;
          }
          uint64_t v29 = *(unsigned int *)(v2 + 48);
          if (v29 != -1)
          {
            int v30 = (void *)(v2 + 40);
            if (!v29)
            {
              *int v30 = 0;
              return;
            }
            ((void (*)(unsigned char *, void *))off_1EE9DCB90[v29])(buf, v30);
          }
          *(void *)(v2 + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
          *(_DWORD *)(v2 + 48) = 0;
        }
        return;
      }
      uint64_t v24 = *(void *)(**(void **)&buf[8] + 8);
      if (v24 != a1 && *(void *)(v24 + 672) != 0) {
        break;
      }
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
    }
    if (!*(unsigned char *)(v2 + 72)) {
      goto LABEL_69;
    }
    char v17 = (WebKit::ProcessThrottlerActivity *)(v2 + 40);
    if (*(_DWORD *)(v2 + 48) != 1
      || (uint64_t v31 = *(void *)(*(void *)v17 + 8)) == 0
      || !*(void *)(v31 + 8)
      || *(unsigned char *)(*(void *)v17 + 32))
    {
      uint64_t v19 = WTF::fastMalloc((WTF *)0x28);
      unint64_t v20 = "Worker for background view(s)";
      uint64_t v21 = a1 + 200;
      uint64_t v22 = 30;
LABEL_62:
      int v23 = 0;
LABEL_63:
      *(void *)buf = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v19, v21, v20, v22, v23, 0);
      if (*(unsigned char *)(v2 + 72))
      {
        std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__assign_alt[abi:sn180100]<1ul,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>(v17, (WebKit::ProcessThrottlerActivity **)v17, (WebKit::ProcessThrottlerActivity **)buf);
        uint64_t v33 = *(WebKit::ProcessThrottlerActivity **)buf;
        *(void *)buf = 0;
        if (v33)
        {
          WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(v33, v32);
          WTF::fastFree(v34, v35);
        }
        return;
      }
LABEL_69:
      __break(1u);
    }
  }
}

void WebKit::WebProcessProxy::registerRemoteWorkerClientProcess(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a2 == 2) {
    uint64_t v3 = a1 + 880;
  }
  else {
    uint64_t v3 = a1 + 800;
  }
  if (*(unsigned char *)(v3 + 72))
  {
    char v7 = qword_1EB358870;
    if (os_log_type_enabled((os_log_t)qword_1EB358870, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 136);
      if (v8) {
        LODWORD(v8) = *(_DWORD *)(v8 + 108);
      }
      uint64_t v9 = "service";
      if (a2 == 2) {
        uint64_t v9 = "shared";
      }
      uint64_t v10 = *(void *)(a3 + 136);
      if (v10) {
        LODWORD(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = *(_DWORD *)(v10 + 108);
      }
      int v11 = 134219010;
      uint64_t v12 = a1;
      __int16 v13 = 1024;
      int v14 = v8;
      __int16 v15 = 2082;
      uint64_t v16 = v9;
      __int16 v17 = 2048;
      uint64_t v18 = a3;
      __int16 v19 = 1024;
      int v20 = v10;
      _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::registerWorkerClientProcess: workerType=%{public}s, clientProcess=%p, clientPID=%d", (uint8_t *)&v11, 0x2Cu);
      if (!*(unsigned char *)(v3 + 72)) {
        __break(1u);
      }
    }
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(v3 + 56, (unsigned int *)a3, (uint64_t)&v11);
    WebKit::WebProcessProxy::updateRemoteWorkerProcessAssertion(a1, a2);
  }
}

void WebKit::WebProcessProxy::unregisterRemoteWorkerClientProcess(uint64_t a1, int a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a2 == 2) {
    uint64_t v3 = a1 + 880;
  }
  else {
    uint64_t v3 = a1 + 800;
  }
  if (*(unsigned char *)(v3 + 72))
  {
    char v7 = qword_1EB358870;
    if (os_log_type_enabled((os_log_t)qword_1EB358870, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 136);
      if (v8) {
        LODWORD(v8) = *(_DWORD *)(v8 + 108);
      }
      uint64_t v9 = "service";
      if (a2 == 2) {
        uint64_t v9 = "shared";
      }
      uint64_t v10 = a3[17];
      if (v10) {
        LODWORD(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = *(_DWORD *)(v10 + 108);
      }
      int v11 = 134219010;
      uint64_t v12 = a1;
      __int16 v13 = 1024;
      int v14 = v8;
      __int16 v15 = 2082;
      uint64_t v16 = v9;
      __int16 v17 = 2048;
      uint64_t v18 = a3;
      __int16 v19 = 1024;
      int v20 = v10;
      _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::unregisterWorkerClientProcess: workerType=%{public}s, clientProcess=%p, clientPID=%d", (uint8_t *)&v11, 0x2Cu);
      if (!*(unsigned char *)(v3 + 72)) {
        __break(1u);
      }
    }
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(v3 + 56, a3);
    WebKit::WebProcessProxy::updateRemoteWorkerProcessAssertion(a1, a2);
  }
}

void WebKit::WebProcessProxy::startServiceWorkerBackgroundProcessing(WebKit::WebProcessProxy *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 872))
  {
    uint64_t v2 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *((void *)this + 17);
      if (v3) {
        LODWORD(v3) = *(_DWORD *)(v3 + 108);
      }
      int v4 = 134218240;
      uint64_t v5 = this;
      __int16 v6 = 1024;
      int v7 = v3;
      _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::startServiceWorkerBackgroundProcessing", (uint8_t *)&v4, 0x12u);
    }
    *((unsigned char *)this + 96WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 1;
    WebKit::WebProcessProxy::updateRemoteWorkerProcessAssertion((uint64_t)this, 1);
  }
}

void WebKit::WebProcessProxy::endServiceWorkerBackgroundProcessing(WebKit::WebProcessProxy *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 872))
  {
    uint64_t v2 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *((void *)this + 17);
      if (v3) {
        LODWORD(v3) = *(_DWORD *)(v3 + 108);
      }
      int v4 = 134218240;
      uint64_t v5 = this;
      __int16 v6 = 1024;
      int v7 = v3;
      _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::endServiceWorkerBackgroundProcessing", (uint8_t *)&v4, 0x12u);
    }
    *((unsigned char *)this + 96WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
    WebKit::WebProcessProxy::updateRemoteWorkerProcessAssertion((uint64_t)this, 1);
  }
}

void WebKit::WebProcessProxy::getNotifications(uint64_t a1, WebCore::SecurityOriginData *a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  uint64_t v8 = (WebKit::WebNotificationManagerProxy *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 752)
                                                                                              + 384)
                                                                                + 64))(*(void *)(*(void *)(a1 + 752) + 384));
  if (v8)
  {
    uint64_t v9 = *(WTF::StringImpl **)a3;
    if (v9) {
      *(_DWORD *)v9 += 2;
    }
    uint64_t v10 = *a4;
    *a4 = 0;
    uint64_t v11 = *(void *)(a1 + 752);
    if (v11) {
      CFRetain(*(CFTypeRef *)(v11 + 8));
    }
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v12 = &unk_1EE9DD710;
    if (v9) {
      *(_DWORD *)v9 += 2;
    }
    v12[1] = v9;
    void v12[2] = v10;
    __int16 v17 = v12;
    WebKit::WebsiteDataStore::getNotifications(v11, a2, (uint64_t)&v17);
    int v14 = v17;
    __int16 v17 = 0;
    if (v14) {
      (*(void (**)(void *))(*v14 + 8))(v14);
    }
    if (v11) {
      CFRelease(*(CFTypeRef *)(v11 + 8));
    }
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v13);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  else
  {
    __int16 v15 = WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(v8);
    uint64_t v16 = *(void *)(*(void *)(a1 + 752) + 24);
    WebKit::WebNotificationManagerProxy::getNotifications((uint64_t)v15, (const WTF::StringImpl **)a2, a3, v16, a4);
  }
}

uint64_t WebKit::WebProcessProxy::getWebCryptoMasterKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  int v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v4 = &unk_1EE9DD738;
  v4[1] = v3;
  __int16 v6 = v4;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 136))(a1, &v6);
  uint64_t result = (uint64_t)v6;
  __int16 v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::wrapCryptoKey(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = a2[1];
  a2[1] = 0;
  int v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  *int v7 = &unk_1EE9DD760;
  v7[1] = v4;
  v7[2] = v6;
  v7[3] = v5;
  uint64_t v10 = v7;
  WebKit::WebProcessProxy::getWebCryptoMasterKey(*(void *)(*(void *)(a1 + 752) + 384), (uint64_t *)&v10);
  uint64_t result = (uint64_t)v10;
  if (v10)
  {
    uint64_t v9 = *(uint64_t (**)(void))(*v10 + 8);
    return v9();
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::unwrapCryptoKey(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v4 = *a2;
  uint64_t v5 = *((void *)a2 + 3);
  uint64_t v14 = *((void *)a2 + 2);
  *((void *)a2 + 3) = 0;
  long long v12 = *(long long *)((char *)a2 + 40);
  long long v13 = v4;
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t v7 = *((void *)a2 + 4);
  *((void *)a2 + 4) = 0;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x48);
  *(void *)uint64_t v8 = &unk_1EE9DD788;
  *(_OWORD *)(v8 + 8) = v13;
  *(void *)(v8 + 24) = v14;
  *(void *)(v8 + 32) = v5;
  *(void *)(v8 + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v7;
  *(_OWORD *)(v8 + 48) = v12;
  *(void *)(v8 + 64) = v6;
  uint64_t v11 = v8;
  WebKit::WebProcessProxy::getWebCryptoMasterKey(*(void *)(*(void *)(a1 + 752) + 384), &v11);
  uint64_t result = v11;
  if (v11)
  {
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)v11 + 8);
    return v10();
  }
  return result;
}

void WebKit::WebProcessProxy::setAppBadge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v14[0] = a2;
  v14[1] = a3;
  if ((_BYTE)a3)
  {
    uint64_t v9 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 552), v14);
    if (v9)
    {
      uint64_t v10 = v9;
      CFRetain(*(CFTypeRef *)(v9 + 8));
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v10 + 104) + 624))(*(void *)(v10 + 104), v10, a4, a5, a6);
      CFRelease(*(CFTypeRef *)(v10 + 8));
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 752);
    if (v11)
    {
      CFRetain(*(CFTypeRef *)(v11 + 8));
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v11 + 384) + 80))(*(void *)(v11 + 384), a4, a5, a6);
      long long v12 = *(const void **)(v11 + 8);
      CFRelease(v12);
    }
    else
    {
      long long v13 = *(void (**)(void))(*MEMORY[0x180] + 80);
      v13();
    }
  }
}

void WebKit::WebProcessProxy::setClientBadge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a2;
  uint64_t v8 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 552), &v10);
  if (v8)
  {
    uint64_t v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v9 + 104) + 632))(*(void *)(v9 + 104), v9, a3, a4, a5);
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
}

uint64_t WebKit::WebProcessProxy::permissionChanged(int a1, uint64_t a2)
{
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v13);
  if (v14)
  {
    uint64_t v5 = v13;
    uint64_t v6 = v13 + 8 * v14;
    do
    {
      uint64_t v7 = *(unsigned int *)(*(void *)v5 + 84);
      if (v7)
      {
        uint64_t v8 = *(uint64_t **)(*(void *)v5 + 72);
        uint64_t v9 = 8 * v7;
        do
        {
          uint64_t v10 = *v8;
          uint64_t v11 = (atomic_uint *)(*v8 + 16);
          atomic_fetch_add(v11, 1u);
          WebKit::WebProcessProxy::processPermissionChanged(v10, a1, a2);
          if (v10) {
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v11);
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      v5 += 8;
    }
    while (v5 != v6);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v4);
}

IPC::Encoder *WebKit::WebProcessProxy::processPermissionChanged(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a2 == 8 || a2 == 3)
  {
    uint64_t v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 552));
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(a1 + 552);
    uint64_t v11 = v10 ? v10 + 16 * *(unsigned int *)(v10 - 4) : 0;
    if ((void *)v11 != v6)
    {
      while (1)
      {
        uint64_t v12 = *(void *)(v7[1] + 8);
        if (v12) {
          uint64_t v13 = (WebKit::WebPageProxy *)(v12 - 16);
        }
        else {
          uint64_t v13 = 0;
        }
        WebKit::WebPageProxy::currentURL(v13, (uint64_t *)&v30);
        MEMORY[0x19972E890](v31, &v30, 0);
        WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness((uint64_t *)v34, (WebCore::SecurityOriginData *)v31, v14);
        int v16 = WebCore::operator==();
        if (v35 != -1) {
          ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_4[v35])(&v33, v34);
        }
        int v35 = -1;
        __int16 v17 = v31[0];
        v31[0] = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            WTF::StringImpl::destroy(v17, v15);
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
        uint64_t v18 = v30;
        int v30 = 0;
        if (!v18) {
          goto LABEL_19;
        }
        if (*(_DWORD *)v18 != 2) {
          break;
        }
        WTF::StringImpl::destroy(v18, v15);
        if (!v16) {
          goto LABEL_27;
        }
LABEL_22:
        uint64_t v19 = *(void *)(v7[1] + 8);
        if (v19) {
          uint64_t v20 = v19 - 16;
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v21 = *(void *)(v20 + 560);
        if (v21) {
          WebKit::UserMediaPermissionRequestManagerProxy::clearUserMediaPermissionRequestHistory(v21, a2);
        }
LABEL_27:
        while (1)
        {
          v7 += 2;
          if (v7 == v9) {
            break;
          }
          if ((unint64_t)(*v7 + 1) > 1) {
            goto LABEL_31;
          }
        }
        uint64_t v7 = v9;
LABEL_31:
        if (v7 == (void *)v11) {
          goto LABEL_32;
        }
      }
      *(_DWORD *)v18 -= 2;
LABEL_19:
      if (!v16) {
        goto LABEL_27;
      }
      goto LABEL_22;
    }
  }
LABEL_32:
  uint64_t v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v22 = 2582;
  *((void *)v22 + 1) = 0;
  *((void *)v22 + 66) = (char *)v22 + 16;
  *((void *)v22 + 67) = 512;
  *((void *)v22 + 68) = 0;
  *((void *)v22 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v22 + 69) = 0;
  IPC::Encoder::encodeHeader(v22);
  v34[0] = v22;
  int v23 = (unsigned char *)IPC::Encoder::grow(v22, 1uLL, 1);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x198EF0CF0);
  }
  *int v23 = a2;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v22, a3);
  LOBYTE(v31[0]) = 0;
  char v32 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, v34, 0, (uint64_t)v31, 1);
  if (v32)
  {
    unsigned int v26 = v31[0];
    v31[0] = 0;
    if (v26) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v26 + 8))(v26);
    }
  }
  uint64_t result = v34[0];
  v34[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v25);
    return (IPC::Encoder *)WTF::fastFree(v28, v29);
  }
  return result;
}

void WebKit::WebPageProxyTesting::~WebPageProxyTesting(WebKit::WebPageProxyTesting *this, void *a2)
{
  uint64_t v2 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DC628;
  *((void *)this + 1) = 0;
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

{
  unsigned int *v2;
  WebKit::WebPageProxyTesting *v3;
  uint64_t vars8;

  uint64_t v2 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DC628;
  *((void *)this + 1) = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2);
    uint64_t v3 = this;
    WTF::fastFree((WTF *)v2, a2);
    this = v3;
  }

  WTF::fastFree(this, a2);
}

uint64_t API::ObjectImpl<(API::Object::Type)92>::type()
{
  return 92;
}

uint64_t API::ObjectImpl<(API::Object::Type)89>::type()
{
  return 89;
}

uint64_t WebKit::WebProcessProxy::type(WebKit::WebProcessProxy *this)
{
  return 2;
}

const char *WebKit::WebProcessProxy::processName(WebKit::WebProcessProxy *this)
{
  return "WebContent";
}

uint64_t WebKit::WebProcessProxy::shouldEnableSharedArrayBuffer(WebKit::WebProcessProxy *this)
{
  return *((unsigned __int8 *)this + 780);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14WebPageTesting23IsEditingCommandEnabledEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

uint64_t WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>> const&>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *v3;
  if (*v3) {
    CFRetain(*(CFTypeRef *)(v6 + 8));
  }
  int v7 = *(_DWORD *)(a1 + 12);
  *(void *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v7 + 1;
  return 1;
}

atomic_uchar **std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](atomic_uchar ***a1, atomic_uchar **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::WebProcessCache::CachedProcess::~CachedProcess(result);
    return (atomic_uchar **)WTF::fastFree(v4, v5);
  }
  return result;
}

void API::InjectedBundleClient::didReceiveSynchronousMessageFromInjectedBundle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = 0;
  WTF::CompletionHandler<void ()(WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>)>::operator()(a5, &v6);
  uint64_t v5 = v6;
  uint64_t v6 = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

uint64_t API::AutomationClient::allowsRemoteAutomation(API::AutomationClient *this, WebProcessPool *a2)
{
  return 0;
}

uint64_t API::LegacyContextHistoryClient::addsVisitedLinks(API::LegacyContextHistoryClient *this)
{
  return 0;
}

uint64_t *std::unique_ptr<WebCore::PrewarmInformation>::reset[abi:sn180100](uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  *uint64_t result = (uint64_t)a2;
  if (v2)
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 16, a2);
    uint64_t v4 = (WTF *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, v3);
    return (uint64_t *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (atomic_uchar ***)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (atomic_uchar **)-1)
      {
        std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](v4, 0);
        uint64_t v5 = (WTF::StringImpl *)*(v4 - 1);
        *(v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (atomic_uchar ***)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (atomic_uchar **)-1) {
        std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](v4, 0);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14NetworkProcess36SetCacheModelSynchronouslyForTestingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

WTF::StringImpl *API::DownloadClient::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 464);
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v8);
  CFTypeRef cf = 0;
  WebKit::AuthenticationDecisionListener::completeChallenge(v3);
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = v9;
  uint64_t v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *API::DownloadClient::decideDestinationWithSuggestedFilename(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  int v7 = 0;
  WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(a5, 0, &v7);
  uint64_t result = v7;
  int v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t API::DownloadClient::willSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, a3);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

void WebKit::UIProxyForCapture::~UIProxyForCapture(WebKit::UIProxyForCapture *this, void *a2)
{
  uint64_t v2 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

{
  unsigned int *v2;
  WebKit::UIProxyForCapture *v3;
  uint64_t vars8;

  uint64_t v2 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2);
    uint64_t v3 = this;
    WTF::fastFree((WTF *)v2, a2);
    this = v3;
  }

  WTF::fastFree(this, a2);
}

void std::default_delete<WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager>::operator()[abi:sn180100](uint64_t a1, unsigned int **a2)
{
  if (a2)
  {
    uint64_t v3 = (uint64_t)a2[4];
    if (v3) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
    }
    uint64_t v4 = a2[3];
    a2[3] = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
    *a2 = (unsigned int *)&unk_1EE9B71B0;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(a2 + 1, a2);
    WTF::fastFree((WTF *)a2, v5);
  }
}

uint64_t std::__optional_destruct_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = *(unsigned int ***)(a1 + 56);
    if (v3) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
    }
    uint64_t v4 = *(unsigned int *)(a1 + 48);
    if (v4 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9DCB90[v4])(&v6, a1 + 40);
    }
    *(_DWORD *)(a1 + 48) = -1;
    WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, (WTF::StringImpl *)a2);
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 16);
    do
    {
      if (*(v4 - 2) ^ 1 | *(v4 - 1))
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5) {
          CFRelease(*(CFTypeRef *)(v5 + 8));
        }
      }
      v4 += 4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 16);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5) {
          CFRelease(*(CFTypeRef *)(v5 + 8));
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::construct_at[abi:sn180100]<WebKit::GoToBackForwardItemParameters,WebKit::GoToBackForwardItemParameters,WebKit::GoToBackForwardItemParameters*>(uint64_t result, long long *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    long long v4 = *a2;
    *(_OWORD *)(result + 1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = *(long long *)((char *)a2 + 10);
    *(_OWORD *)uint64_t result = v4;
    *(unsigned char *)(result + 32) = 0;
    uint64_t v5 = result + 32;
    *(unsigned char *)(v3 + 152) = 0;
    if (*((unsigned char *)a2 + 152))
    {
      std::construct_at[abi:sn180100]<WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData*>(v5, (uint64_t *)a2 + 4);
      *(unsigned char *)(v3 + 152) = 1;
    }
    long long v6 = a2[10];
    *(unsigned char *)(v3 + 176) = *((unsigned char *)a2 + 176);
    *(_OWORD *)(v3 + 16WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v6;
    uint64_t v7 = *((void *)a2 + 23);
    *((void *)a2 + 23) = 0;
    *(void *)(v3 + 184) = v7;
    uint64_t v8 = *((void *)a2 + 24);
    *((void *)a2 + 24) = 0;
    *(void *)(v3 + 192) = v8;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::GoToBackForwardItemParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 200))
  {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 192));
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 184);
    *(void *)(a1 + 184) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, v2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    if (*(unsigned char *)(a1 + 152)) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(a1 + 32), v2);
    }
  }
  return a1;
}

atomic_uchar *std::__optional_destruct_base<WebKit::WebProcessProxy::AudibleMediaActivity,false>::reset[abi:sn180100](atomic_uchar *result, void *a2)
{
  if (!result[16]) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = *((void *)result + 1);
  *((void *)result + 1) = 0;
  if (v3)
  {
    long long v4 = *(atomic_uchar ***)v3;
    uint64_t v5 = *(void *)(v3 + 8) - 1;
    *(void *)(v3 + 8) = v5;
    if (!v4) {
      goto LABEL_7;
    }
    uint64_t result = *v4;
    if (*v4)
    {
      char v6 = *(unsigned char *)(v3 + 16);
      *(unsigned char *)(v3 + 16) = 1;
      uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *, void))(*(void *)result + 16))(result, 0);
      *(unsigned char *)(v3 + 16) = v6;
      if (!*(void *)v3)
      {
        uint64_t v5 = *(void *)(v3 + 8);
LABEL_7:
        if (!v5) {
          uint64_t result = (atomic_uchar *)MEMORY[0x199740C10](v3, 0x1020C40545B2139);
        }
      }
    }
  }
  uint64_t v7 = *(void *)v2;
  *(void *)uint64_t v2 = 0;
  if (v7) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 8), a2);
  }
  v2[16] = 0;
  return result;
}

unsigned char *std::__optional_destruct_base<WTF::RefPtr<WTF::RefCounter<WebKit::WebProcessWithMediaStreamingCounterType>::Count,WTF::RawPtrTraits<WTF::RefCounter<WebKit::WebProcessWithMediaStreamingCounterType>::Count>,WTF::DefaultRefDerefTraits<WTF::RefCounter<WebKit::WebProcessWithMediaStreamingCounterType>::Count>>,false>::reset[abi:sn180100](unsigned char *result)
{
  if (result[8])
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)result;
    *(void *)uint64_t result = 0;
    if (v2)
    {
      uint64_t v3 = *(unsigned char ***)v2;
      uint64_t v4 = *(void *)(v2 + 8) - 1;
      *(void *)(v2 + 8) = v4;
      if (v3)
      {
        uint64_t result = *v3;
        if (!*v3) {
          goto LABEL_9;
        }
        char v5 = *(unsigned char *)(v2 + 16);
        *(unsigned char *)(v2 + 16) = 1;
        uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)result + 16))(result, 0);
        *(unsigned char *)(v2 + 16) = v5;
        if (*(void *)v2) {
          goto LABEL_9;
        }
        uint64_t v4 = *(void *)(v2 + 8);
      }
      if (!v4) {
        uint64_t result = (unsigned char *)MEMORY[0x199740C10](v2, 0x1020C40545B2139);
      }
    }
LABEL_9:
    v1[8] = 0;
  }
  return result;
}

uint64_t WebKit::FrameState::operator=(uint64_t a1, uint64_t a2)
{
  WTF::String::operator=((uint64_t *)a1, (uint64_t *)a2);
  WTF::String::operator=((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  WTF::String::operator=((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  WTF::String::operator=((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  char v4 = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = v4;
  std::__optional_storage_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(a1 + 56, (uint64_t *)(a2 + 56));
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 8WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  std::__optional_storage_base<WebKit::HTTPBody,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::HTTPBody,false>>((WTF::StringImpl *)(a1 + 112), (void *)(a2 + 112));
  long long v6 = *(_OWORD *)(a2 + 144);
  long long v7 = *(_OWORD *)(a2 + 160);
  long long v8 = *(_OWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_OWORD *)(a1 + 16WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v7;
  *(_OWORD *)(a1 + 176) = v8;
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 196) = *(_OWORD *)(a2 + 196);
  uint64_t v9 = (WTF::StringImpl ***)(a1 + 216);
  uint64_t v10 = (_DWORD *)(a2 + 216);
  uint64_t v11 = *(unsigned int *)(a1 + 228);
  if (v11)
  {
    uint64_t v15 = *v9;
    uint64_t v16 = 248 * v11;
    do
    {
      __int16 v17 = v15;
      WebKit::FrameState::~FrameState(v15);
      uint64_t v9 = (WTF::StringImpl ***)(a1 + 216);
      uint64_t v10 = (_DWORD *)(a2 + 216);
      uint64_t v15 = v17 + 31;
      v16 -= 248;
    }
    while (v16);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt((uint64_t)v9, v10);
  uint64_t v12 = (WTF::StringImpl **)(a1 + 232);
  uint64_t v13 = *(unsigned int *)(a1 + 244);
  if (v13)
  {
    WTF::VectorDestructor<true,WTF::String>::destruct(*v12, (WTF::StringImpl *)((char *)*v12 + 8 * v13));
    uint64_t v12 = (WTF::StringImpl **)(a1 + 232);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt((uint64_t)v12, (_DWORD *)(a2 + 232));
  return a1;
}

{
  void *v4;
  long long v5;
  unsigned int *v6;
  WTF *v7;
  WTF *v8;
  void *v9;
  long long v10;
  uint64_t *v11;
  WTF::StringImpl **v12;
  uint64_t *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  long long v26;
  long long v27;
  long long v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  WebKit::FrameState *v42;
  const WebKit::FrameState *v43;
  uint64_t v44;
  uint64_t v46;
  char v47;

  WTF::String::operator=((uint64_t *)a1, (WTF::StringImpl **)a2);
  WTF::String::operator=((uint64_t *)(a1 + 8), (WTF::StringImpl **)(a2 + 8));
  WTF::String::operator=((uint64_t *)(a1 + 16), (WTF::StringImpl **)(a2 + 16));
  WTF::String::operator=((uint64_t *)(a1 + 24), (WTF::StringImpl **)(a2 + 24));
  long long v5 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  long long v6 = (unsigned int *)(a1 + 56);
  if (*(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (*(unsigned char *)(a1 + 72)) {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v6, a2 + 56);
    }
  }
  else if (*(unsigned char *)(a1 + 72))
  {
    long long v7 = *(WTF **)v6;
    if (v7)
    {
      *(void *)(a1 + 56) = 0;
      *(_DWORD *)(a1 + 64) = 0;
      WTF::fastFree(v7, v4);
    }
    *(unsigned char *)(a1 + 72) = 0;
  }
  else
  {
    long long v8 = (WTF *)*(unsigned int *)(a2 + 68);
    *(void *)long long v6 = 0;
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 68) = v8;
    if (v8)
    {
      uint64_t v9 = (void *)WTF::fastMalloc(v8);
      *(_DWORD *)(a1 + 64) = v8;
      *(void *)(a1 + 56) = v9;
      memcpy(v9, *(const void **)(a2 + 56), *(unsigned int *)(a2 + 68));
    }
    *(unsigned char *)(a1 + 72) = 1;
  }
  uint64_t v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 8WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v10;
  uint64_t v11 = (uint64_t *)(a1 + 112);
  uint64_t v12 = (WTF::StringImpl **)(a2 + 112);
  if (*(unsigned __int8 *)(a1 + 136) == *(unsigned __int8 *)(a2 + 136))
  {
    if (*(unsigned char *)(a1 + 136))
    {
      WTF::String::operator=(v11, v12);
      if (a2 != a1)
      {
        uint64_t v13 = (uint64_t *)(a1 + 120);
        unsigned int v14 = *(unsigned int *)(a2 + 132);
        if (*(_DWORD *)(a1 + 132) <= v14)
        {
          if (v14 > *(_DWORD *)(a1 + 128))
          {
            WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 120, 0);
            WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 120, *(unsigned int *)(a2 + 132));
          }
        }
        else
        {
          WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1 + 120, v14);
        }
        uint64_t v16 = *(void *)(a2 + 120);
        __int16 v17 = *(unsigned int *)(a1 + 132);
        if (v17)
        {
          uint64_t v18 = *v13;
          uint64_t v19 = 56 * v17;
          while (1)
          {
            uint64_t v20 = *(unsigned int *)(v18 + 48);
            uint64_t v21 = *(unsigned int *)(v16 + 48);
            if (v20 == -1)
            {
              if (v21 != -1)
              {
LABEL_29:
                uint64_t v46 = v18;
                ((void (*)(uint64_t *, uint64_t, uint64_t))off_1EE9E0F80[v21])(&v46, v18, v16);
              }
            }
            else
            {
              if (v21 != -1) {
                goto LABEL_29;
              }
              ((void (*)(char *, uint64_t))off_1EE9E0F68[v20])(&v47, v18);
              *(_DWORD *)(v18 + 48) = -1;
            }
            v16 += 56;
            v18 += 56;
            v19 -= 56;
            if (!v19)
            {
              uint64_t v16 = *(void *)(a2 + 120);
              LODWORD(v17) = *(_DWORD *)(a1 + 132);
              break;
            }
          }
        }
        uint64_t v22 = *(_DWORD *)(a2 + 132);
        if (v17 != v22)
        {
          int v23 = *v13 + 56 * v17;
          uint64_t v24 = v16 + 56 * v17;
          uint64_t v25 = 56 * v22 - 56 * v17;
          do
          {
            *(unsigned char *)int v23 = 0;
            *(_DWORD *)(v23 + 48) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>,(std::__variant_detail::_Trait)1> const&>(v23, v24);
            v24 += 56;
            v23 += 56;
            v25 -= 56;
          }
          while (v25);
          LODWORD(v17) = *(_DWORD *)(a2 + 132);
        }
        *(_DWORD *)(a1 + 132) = v17;
      }
    }
  }
  else if (*(unsigned char *)(a1 + 136))
  {
    std::__optional_destruct_base<WebKit::HTTPBody,false>::reset[abi:sn180100]((WTF::StringImpl *)v11, v12);
  }
  else
  {
    uint64_t v15 = *v12;
    if (*v12) {
      *(_DWORD *)v15 += 2;
    }
    *(void *)(a1 + 112) = v15;
    WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 120, a2 + 120);
    *(unsigned char *)(a1 + 136) = 1;
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  unsigned int v26 = *(_OWORD *)(a2 + 160);
  uint64_t v27 = *(_OWORD *)(a2 + 176);
  uint64_t v28 = *(_OWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v27;
  *(_OWORD *)(a1 + 192) = v28;
  *(_OWORD *)(a1 + 16WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v26;
  if (a2 != a1)
  {
    uint64_t v29 = (uint64_t *)(a1 + 216);
    int v30 = *(_DWORD *)(a1 + 228);
    uint64_t v31 = *(unsigned int *)(a2 + 228);
    if (v30 <= v31)
    {
      int v35 = v31 > *(_DWORD *)(a1 + 224);
      LODWORD(v31) = *(_DWORD *)(a1 + 228);
      if (v35)
      {
        WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 216, 0);
        WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 216, *(unsigned int *)(a2 + 228));
        LODWORD(v31) = *(_DWORD *)(a1 + 228);
      }
    }
    else
    {
      char v32 = (WTF::StringImpl **)(*v29 + 248 * v31);
      char v33 = 248 * v30 - 248 * v31;
      do
      {
        WebKit::FrameState::~FrameState(v32);
        char v32 = (WTF::StringImpl **)(v34 + 248);
        v33 -= 248;
      }
      while (v33);
      *(_DWORD *)(a1 + 228) = v31;
    }
    uint64_t v36 = *(void *)(a2 + 216);
    if (v31)
    {
      uint64_t v37 = *v29;
      uint64_t v38 = 248 * v31;
      do
      {
        uint64_t v39 = WebKit::FrameState::operator=(v37, v36);
        v36 += 248;
        uint64_t v37 = v39 + 248;
        v38 -= 248;
      }
      while (v38);
      uint64_t v36 = *(void *)(a2 + 216);
      uint64_t v40 = *(_DWORD *)(a1 + 228);
    }
    else
    {
      uint64_t v40 = 0;
    }
    unint64_t v41 = *(_DWORD *)(a2 + 228);
    if (v40 != v41)
    {
      __int16 v42 = (WebKit::FrameState *)(*v29 + 248 * v40);
      uint64_t v43 = (const WebKit::FrameState *)(v36 + 248 * v40);
      uint64_t v44 = 248 * v41 - 248 * v40;
      do
      {
        __int16 v42 = (WebKit::FrameState *)((char *)WebKit::FrameState::FrameState(v42, v43) + 248);
        uint64_t v43 = (const WebKit::FrameState *)((char *)v43 + 248);
        v44 -= 248;
      }
      while (v44);
      uint64_t v40 = *(_DWORD *)(a2 + 228);
    }
    *(_DWORD *)(a1 + 228) = v40;
  }
  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 232), a2 + 232);
  return a1;
}

void WebKit::WebProcessProxy::transformHandlesToObjects(API::Object *)::Transformer::~Transformer(uint64_t a1, void *a2)
{
  uint64_t v2 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2);
    WTF::fastFree((WTF *)v2, a2);
  }

  JUMPOUT(0x199740C10);
}

BOOL WebKit::WebProcessProxy::transformHandlesToObjects(API::Object *)::Transformer::shouldTransformObject(uint64_t a1, unsigned char *a2)
{
  int v3 = (*(uint64_t (**)(unsigned char *))(*(void *)a2 + 16))(a2);
  return (v3 == 13 || v3 == 11) && a2[32] != 0;
}

unsigned int *WebKit::WebProcessProxy::transformHandlesToObjects(API::Object *)::Transformer::transformObject@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  int v3 = a2;
  int v6 = (*(uint64_t (**)(unsigned int *))(*(void *)a2 + 16))(a2);
  if (v6 == 13)
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 8);
    atomic_fetch_add((atomic_uint *volatile)(v8 + 16), 1u);
    uint64_t result = (unsigned int *)WebKit::WebProcessProxy::webPage(*((void *)v3 + 2), a3);
    if (v8)
    {
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
    }
  }
  else
  {
    if (v6 != 11
      || (uint64_t result = (unsigned int *)WebKit::WebFrameProxy::webFrame(*((void *)v3 + 2), *((void *)v3 + 3)),
          (int v3 = result) != 0))
    {
      uint64_t result = (unsigned int *)CFRetain(*((CFTypeRef *)v3 + 1));
    }
    *a3 = (uint64_t)v3;
  }
  return result;
}

void WebKit::WebProcessProxy::transformObjectsToHandles(API::Object *)::Transformer::~Transformer()
{
}

uint64_t WebKit::WebProcessProxy::transformObjectsToHandles(API::Object *)::Transformer::shouldTransformObject(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) - 59;
  return (v2 < 0x1E) & (0x28000001u >> v2);
}

void WebKit::WebProcessProxy::transformObjectsToHandles(API::Object *)::Transformer::transformObject(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2 = a1;
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (v4 == 86)
  {
    uint64_t v8 = *(void *)(v2 + 32);
    uint64_t v5 = *(void *)(v8 + 760);
    uint64_t v6 = *(void *)(v8 + 1928);
    uint64_t v2 = API::Object::newObject(0x28uLL, 13);
    *(void *)uint64_t v2 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v2);
    long long v7 = &unk_1EE9B3F48;
  }
  else
  {
    if (v4 != 59)
    {
      CFRetain(*(CFTypeRef *)(v2 + 8));
      goto LABEL_7;
    }
    uint64_t v5 = *(void *)(v2 + 272);
    uint64_t v6 = *(void *)(v2 + 280);
    uint64_t v2 = API::Object::newObject(0x28uLL, 11);
    *(void *)uint64_t v2 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v2);
    long long v7 = &unk_1EE9B3E30;
  }
  *(void *)uint64_t v2 = v7;
  *(void *)(v2 + 16) = v5;
  *(void *)(v2 + 24) = v6;
  *(unsigned char *)(v2 + 32) = 1;
LABEL_7:
  *a2 = v2;
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::createSpeechRecognitionServer(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0,void,WebCore::SpeechRecognitionRequest &,WTF::CompletionHandler<void ()(std::optional<WebCore::SpeechRecognitionError> &&)> &&>::~CallableWrapper(void *a1, void *a2)
{
  int v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DCB28;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::createSpeechRecognitionServer(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0,void,WebCore::SpeechRecognitionRequest &,WTF::CompletionHandler<void ()(std::optional<WebCore::SpeechRecognitionError> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  int v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DCB28;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::createSpeechRecognitionServer(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0,void,WebCore::SpeechRecognitionRequest &,WTF::CompletionHandler<void ()(std::optional<WebCore::SpeechRecognitionError> &&)> &&>::call(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    WebKit::WebPageProxy::requestSpeechRecognitionPermission(v5 - 16, a2, a3);
    long long v7 = *(const void **)(v5 - 8);
    CFRelease(v7);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11[0] = 4;
    char v13 = 1;
    uint64_t v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v8 + 16))(v8, v11);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    if (v13)
    {
      uint64_t v10 = v12;
      uint64_t v12 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::createSpeechRecognitionServer(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_1,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  int v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DCB50;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::createSpeechRecognitionServer(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_1,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  int v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DCB50;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::createSpeechRecognitionServer(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_1,BOOL>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 256);
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v5 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, a3);
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::createSpeechRecognitionServer(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_2,WebCore::CaptureSourceOrError>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DCB78;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::createSpeechRecognitionServer(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_2,WebCore::CaptureSourceOrError>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DCB78;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::createSpeechRecognitionServer(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_2,WebCore::CaptureSourceOrError>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    return WebKit::WebPageProxy::createRealtimeMediaSourceForSpeechRecognition((WebKit::WebProcessProxy **)(v4 - 16), a2);
  }
  else
  {
    uint64_t result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(void *)a2 = 0;
    *(_WORD *)(a2 + 16) = 7;
  }
  return result;
}

uint64_t std::__optional_storage_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>>(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = result;
  if (*(unsigned __int8 *)(result + 72) == a2[72])
  {
    if (*(unsigned char *)(result + 72))
    {
      return WebKit::WebProcessProxy::RemoteWorkerInformation::operator=(result, (uint64_t)a2);
    }
  }
  else if (*(unsigned char *)(result + 72))
  {
    uint64_t v3 = *(unsigned int ***)(result + 56);
    if (v3) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
    }
    uint64_t v4 = *(unsigned int *)(v2 + 48);
    if (v4 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9DCB90[v4])(&v5, v2 + 40);
    }
    *(_DWORD *)(v2 + 48) = -1;
    uint64_t result = WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 24, (WTF::StringImpl *)a2);
    *(unsigned char *)(v2 + 72) = 0;
  }
  else
  {
    uint64_t result = std::construct_at[abi:sn180100]<WebKit::WebProcessProxy::RemoteWorkerInformation,WebKit::WebProcessProxy::RemoteWorkerInformation,WebKit::WebProcessProxy::RemoteWorkerInformation*>(result, (uint64_t)a2);
    *(unsigned char *)(v2 + 72) = 1;
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::RemoteWorkerInformation::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = (uint64_t *)(a1 + 24);
  uint64_t v5 = *(unsigned int *)(a1 + 36);
  if (v5)
  {
    uint64_t v6 = *v4;
    uint64_t v7 = 120 * v5;
    do
    {
      uint64_t v8 = *(WTF::StringImpl **)(v6 + 80);
      *(void *)(v6 + 8WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      uint64_t v9 = *(unsigned int **)(v6 + 8);
      *(void *)(v6 + 8) = 0;
      if (v9) {
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v9);
      }
      uint64_t v10 = *(WTF::StringImpl **)v6;
      *(void *)uint64_t v6 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      v6 += 120;
      v7 -= 120;
    }
    while (v7);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt((uint64_t)v4, (_DWORD *)(a2 + 24));
  std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(a1 + 40, a2 + 40);
  uint64_t v12 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  char v13 = *(unsigned int ***)(a1 + 56);
  *(void *)(a1 + 56) = v12;
  if (v13) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v13, v11);
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t std::construct_at[abi:sn180100]<WebKit::WebProcessProxy::RemoteWorkerInformation,WebKit::WebProcessProxy::RemoteWorkerInformation,WebKit::WebProcessProxy::RemoteWorkerInformation*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *(void *)(result + 16) = *(void *)(a2 + 16);
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    *(void *)(result + 24) = v4;
    LODWORD(v4) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    *(_DWORD *)(result + 32) = v4;
    LODWORD(v4) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    *(_DWORD *)(result + 36) = v4;
    *(unsigned char *)(result + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
    *(_DWORD *)(result + 48) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(result + 40, a2 + 40);
    *(void *)(v3 + 56) = 0;
    uint64_t v5 = *(void *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    *(void *)(v3 + 56) = v5;
    *(void *)(v3 + 64) = *(void *)(a2 + 64);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxyTesting::dispatchActivityStateUpdate(void)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DCBB0;
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxyTesting::dispatchActivityStateUpdate(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DCBB0;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebPageProxyTesting::dispatchActivityStateUpdate(void)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebPageProxy::updateActivityState(*(void **)(a1 + 8), 1023);
  uint64_t v2 = *(WebCore::RunLoopObserver ***)(a1 + 8);

  return WebKit::WebPageProxy::dispatchActivityStateChange(v2);
}

uint64_t IPC::MessageSender::sendWithAsyncReply<Messages::WebPageTesting::IsLayerTreeFrozen,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 2129;
  *((void *)v9 + 1) = a4;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v21 = v9;
  uint64_t v10 = *a3;
  *a3 = 0;
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v11 = &unk_1EE9DCBD8;
  v11[1] = v10;
  uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v20[0] = v11;
  v20[1] = v12;
  int v14 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)a1 + 40))(a1, &v21, v20, a5);
  uint64_t v15 = v20[0];
  v20[0] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v21;
  uint64_t v21 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v13);
    WTF::fastFree(v18, v19);
  }
  if (v14) {
    return v12;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageTesting::IsLayerTreeFrozen,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DCBD8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageTesting::IsLayerTreeFrozen,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DCBD8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageTesting::IsLayerTreeFrozen,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxyTesting::setPermissionLevel(WTF::String const&,BOOL)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = **(unsigned char **)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 8);
  char v13 = v5;
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2132;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v16 = v6;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,BOOL>,0ul,1ul>(v6, (uint64_t)&v12);
  LOBYTE(v14) = 0;
  char v15 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v16, 0, (uint64_t)&v14, 1);
  if (v15)
  {
    uint64_t v8 = v14;
    uint64_t v14 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DumpPrivateClickMeasurement,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DCC28;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DumpPrivateClickMeasurement,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DCC28;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DumpPrivateClickMeasurement,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v3 + 16))(v3, &v7);
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        uint64_t result = v7;
        uint64_t v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearPrivateClickMeasurement,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DCC50;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearPrivateClickMeasurement,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DCC50;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearPrivateClickMeasurement,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementOverrideTimerForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DCC78;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementOverrideTimerForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DCC78;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementOverrideTimerForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::MarkAttributedPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DCCA0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::MarkAttributedPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DCCA0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::MarkAttributedPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementEphemeralMeasurementForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DCCC8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementEphemeralMeasurementForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DCCC8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementEphemeralMeasurementForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SimulatePrivateClickMeasurementSessionRestart,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DCCF0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SimulatePrivateClickMeasurementSessionRestart,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DCCF0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SimulatePrivateClickMeasurementSessionRestart,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementTokenPublicKeyURLForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DCD18;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementTokenPublicKeyURLForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DCD18;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementTokenPublicKeyURLForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementTokenSignatureURLForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DCD40;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementTokenSignatureURLForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DCD40;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementTokenSignatureURLForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

_DWORD *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::URL const&,WTF::URL const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2[1]);
  unsigned __int16 v4 = a2[2];

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementAttributionReportURLsForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DCD68;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementAttributionReportURLsForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DCD68;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementAttributionReportURLsForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::MarkPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DCD90;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::MarkPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DCD90;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::MarkPrivateClickMeasurementsAsExpiredForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

_DWORD *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2[2]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2[3]);
  unsigned __int16 v4 = a2[4];

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPCMFraudPreventionValuesForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DCDB8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPCMFraudPreventionValuesForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DCDB8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPCMFraudPreventionValuesForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementAppBundleIDForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DCDE0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementAppBundleIDForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DCDE0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrivateClickMeasurementAppBundleIDForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t IPC::MessageSender::sendWithAsyncReply<Messages::WebPageTesting::SetTopContentInset,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, float *a2, uint64_t *a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 2133;
  *((void *)v10 + 1) = a4;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v22 = v10;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v10, *a2);
  uint64_t v11 = *a3;
  *a3 = 0;
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v12 = &unk_1EE9DCE08;
  v12[1] = v11;
  uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v21[0] = v12;
  v21[1] = v13;
  int v15 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)a1 + 40))(a1, &v22, v21, a5);
  uint64_t v16 = v21[0];
  v21[0] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  __int16 v17 = v22;
  uint64_t v22 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v19, v20);
  }
  if (v15) {
    return v13;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageTesting::SetTopContentInset,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DCE08;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageTesting::SetTopContentInset,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DCE08;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageTesting::SetTopContentInset,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxyTesting::setPageScaleFactor(float,WebCore::IntPoint,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::WebProcessProxy &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = **(float **)(a1 + 16);
  uint64_t v6 = *(int **)(a1 + 24);
  uint64_t v7 = **(atomic_uint ***)(a1 + 8);
  atomic_fetch_add(v7, 1u);
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2131;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  __int16 v17 = v8;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v8, v5);
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v8, v6);
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v9 = &unk_1EE9DCE58;
  v9[1] = v7;
  v15[0] = v9;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v16 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v17, 0, (uint64_t)v15, 1);
  if (v16)
  {
    uint64_t v11 = v15[0];
    v15[0] = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t result = v17;
  __int16 v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages14WebPageTesting18SetPageScaleFactorEZZN6WebKit19WebPageProxyTesting18setPageScaleFactorEfN7WebCore8IntPointEONS_17CompletionHandlerIFvvEEEENK3__0clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericINSA_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlvE_EENSC_IFvPNS2_7DecoderEEEEOSS_NS_19ThreadLikeAssertionEEUlSV_E_vJSV_EED1Ev(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DCE58;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages14WebPageTesting18SetPageScaleFactorEZZN6WebKit19WebPageProxyTesting18setPageScaleFactorEfN7WebCore8IntPointEONS_17CompletionHandlerIFvvEEEENK3__0clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericINSA_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlvE_EENSC_IFvPNS2_7DecoderEEEEOSS_NS_19ThreadLikeAssertionEEUlSV_E_vJSV_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DCE58;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::destruct(*(unsigned int **)a1, (void *)(*(void *)a1 + 16 * v3));
  }
  unsigned __int16 v4 = *(unsigned int **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebProcessCache::*&)(void),WebKit::WebProcessCache*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = (uint64_t *)(v4 + 16 * i);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v12 = *a1;
          if (*a1) {
            int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            int v13 = 0;
          }
          unint64_t v14 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
          int v18 = 1;
          do
          {
            unsigned int v19 = v17;
            uint64_t v20 = *(void *)(v12 + 16 * v17);
            unsigned int v17 = (v17 + v18++) & v13;
          }
          while (v20);
          uint64_t v21 = (void *)(v12 + 16 * v19);
          std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](v21 + 1, 0);
          uint64_t v22 = *v10;
          int v23 = (void *)(v4 + 16 * i);
          uint64_t v24 = v23[1];
          *++int v23 = 0;
          *uint64_t v21 = v22;
          v21[1] = v24;
          std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](v23, 0);
        }
        else
        {
          std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](v4 + 16 * i + 8, 0);
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessCache::addProcessIfPossible(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DCEA8;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessCache::addProcessIfPossible(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DCEA8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessCache::addProcessIfPossible(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&)::$_0,void,BOOL>::call(void *a1, char a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[1];
  int v6 = (uint64_t *)(v4 + 8);
  uint64_t v5 = *(void *)(v4 + 8);
  uint64_t result = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v5, a1[4]);
  if (v5) {
    char v8 = (void *)(v5 + 16 * *(unsigned int *)(v5 - 4));
  }
  else {
    char v8 = 0;
  }
  if (v8 == result) {
    return result;
  }
  uint64_t v9 = (atomic_uchar **)result[1];
  result[1] = 0;
  if (*v6)
  {
    uint64_t v10 = *v6 + 16 * *(unsigned int *)(*v6 - 4);
    if ((void *)v10 == result) {
      goto LABEL_12;
    }
  }
  else
  {
    if (!result) {
      goto LABEL_12;
    }
    uint64_t v10 = 0;
  }
  if ((void *)v10 != result) {
    uint64_t result = (void *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(v6, result);
  }
LABEL_12:
  if (!v9) {
    return result;
  }
  if ((a2 & 1) == 0)
  {
    uint64_t v20 = qword_1EB358370;
    if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *((void *)*v9 + 17);
      if (v21) {
        LODWORD(v21) = *(_DWORD *)(v21 + 108);
      }
      *(_DWORD *)buf = 134218240;
      uint64_t v64 = v4;
      __int16 v65 = 1024;
      int v66 = v21;
      _os_log_error_impl(&dword_1985F2000, v20, OS_LOG_TYPE_ERROR, "%p - [PID=%d] WebProcessCache::addProcessIfPossible(): Not caching process because it is not responsive", buf, 0x12u);
    }
    goto LABEL_96;
  }
  uint64_t v11 = *(void *)(a1[2] + 768);
  uint64_t v12 = *v9;
  int v13 = (atomic_uint *)(*v9 + 16);
  atomic_fetch_add(v13, 1u);
  if ((WebKit::WebProcessCache::canCacheProcess((WebKit::WebProcessCache *)v11, (WebKit::WebProcessProxy *)v12) & 1) == 0)
  {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v13);
    goto LABEL_96;
  }
  if (!v12[704]
    || (unint64_t v14 = (WTF::StringImpl *)*((void *)v12 + 87)) == 0
    || (*(_DWORD *)v14 += 2, uint64_t v62 = v14, !*((_DWORD *)v14 + 1))
    || MEMORY[0x19972E990](v14, "nullOrigin", 10))
  {
    __break(0xC471u);
    JUMPOUT(0x198EF4B20);
  }
  unint64_t v15 = (uint64_t *)(v11 + 16);
  uint64_t v16 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(v11 + 16), &v62);
  uint64_t v17 = *(void *)(v11 + 16);
  if (v17) {
    v17 += 16 * *(unsigned int *)(v17 - 4);
  }
  if (v17 == v16) {
    goto LABEL_40;
  }
  int v18 = *(atomic_uchar ***)(v16 + 8);
  *(void *)(v16 + 8) = 0;
  if (!*v15)
  {
    if (!v16) {
      goto LABEL_34;
    }
    uint64_t v19 = 0;
LABEL_32:
    if (v19 != v16) {
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::remove((uint64_t *)(v11 + 16), (WTF::StringImpl **)v16);
    }
    goto LABEL_34;
  }
  uint64_t v19 = *v15 + 16 * *(unsigned int *)(*v15 - 4);
  if (v19 != v16) {
    goto LABEL_32;
  }
LABEL_34:
  if (v18)
  {
    uint64_t v22 = qword_1EB358370;
    if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *((void *)*v18 + 17);
      if (v23) {
        LODWORD(v23) = *(_DWORD *)(v23 + 108);
      }
      *(_DWORD *)buf = 134218240;
      uint64_t v64 = v11;
      __int16 v65 = 1024;
      int v66 = v23;
      _os_log_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::addProcess: Evicting process from WebProcess cache because a new process was added for the same domain", buf, 0x12u);
    }
    WebKit::WebProcessCache::CachedProcess::~CachedProcess(v18);
    WTF::fastFree(v24, v25);
  }
LABEL_40:
  uint64_t v61 = (unsigned int *)v13;
  while (1)
  {
    uint64_t v26 = *v15;
    if (*v15)
    {
      unsigned int v27 = *(_DWORD *)(v26 - 12);
      unsigned int v28 = *(_DWORD *)(v11 + 4);
      if (v27 < v28) {
        break;
      }
      if (v27)
      {
        do
        {
          uint64_t v29 = *v15;
          int v30 = WTF::weakRandomNumber<unsigned int>();
          uint64_t v32 = *v15;
          if (*v15) {
            LODWORD(v32) = *(_DWORD *)(v32 - 8);
          }
          uint64_t v33 = v32 & v30;
        }
        while ((WTF::equal(*(WTF **)(v29 + 16 * v33), 0, v31) & 1) != 0 || *(void *)(v29 + 16 * v33) == -1);
        uint64_t v34 = v29 + 16 * v33;
      }
      else
      {
        uint64_t v34 = v26 + 16 * *(unsigned int *)(v26 - 4);
      }
      goto LABEL_52;
    }
    unsigned int v28 = *(_DWORD *)(v11 + 4);
    if (v28) {
      break;
    }
    uint64_t v34 = 0;
LABEL_52:
    int v35 = qword_1EB358370;
    if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v36 = *(void *)(**(void **)(v34 + 8) + 136);
      if (v36) {
        LODWORD(v36) = *(_DWORD *)(v36 + 108);
      }
      *(_DWORD *)buf = 134218240;
      uint64_t v64 = v11;
      __int16 v65 = 1024;
      int v66 = v36;
      _os_log_impl(&dword_1985F2000, v35, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::addProcess: Evicting process from WebProcess cache because capacity was reached", buf, 0x12u);
    }
    if (*v15)
    {
      uint64_t v37 = *v15 + 16 * *(unsigned int *)(*v15 - 4);
      if (v37 != v34)
      {
LABEL_61:
        if (v37 != v34) {
          WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::remove((uint64_t *)(v11 + 16), (WTF::StringImpl **)v34);
        }
      }
    }
    else if (v34)
    {
      uint64_t v37 = 0;
      goto LABEL_61;
    }
  }
  uint64_t v38 = qword_1EB358370;
  if (!os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
  {
    if (!v26) {
      goto LABEL_72;
    }
    goto LABEL_73;
  }
  uint64_t v40 = *((void *)*v9 + 17);
  if (v40) {
    LODWORD(v4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = *(_DWORD *)(v40 + 108);
  }
  if (v26) {
    int v41 = *(_DWORD *)(v26 - 12) + 1;
  }
  else {
    int v41 = 1;
  }
  *(_DWORD *)buf = 134218752;
  uint64_t v64 = v11;
  __int16 v65 = 1024;
  int v66 = v40;
  __int16 v67 = 1024;
  int v68 = v41;
  __int16 v69 = 1024;
  unsigned int v70 = v28;
  _os_log_impl(&dword_1985F2000, v38, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::addProcess: Added process to WebProcess cache (size=%u, capacity=%u)", buf, 0x1Eu);
  uint64_t v26 = *(void *)(v11 + 16);
  if (v26)
  {
LABEL_73:
    int v42 = *(_DWORD *)(v26 - 8);
    goto LABEL_74;
  }
LABEL_72:
  WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)(v11 + 16));
  uint64_t v26 = *v15;
  if (*v15) {
    goto LABEL_73;
  }
  int v42 = 0;
LABEL_74:
  unsigned int v43 = WTF::ASCIICaseInsensitiveHash::hash(v14, v39) & v42;
  uint64_t v44 = (void *)(v26 + 16 * v43);
  if ((WTF::equal((WTF *)*v44, 0, v45) & 1) == 0)
  {
    unsigned int v47 = 0;
    int v48 = 1;
    do
    {
      uint64_t v49 = v44;
      if (*v44 != -1)
      {
        uint64_t v49 = v47;
        if (WTF::equalIgnoringASCIICase((WTF *)*v44, v14, v46))
        {
          uint64_t v52 = v61;
          goto LABEL_91;
        }
      }
      unsigned int v43 = (v43 + v48) & v42;
      uint64_t v44 = (void *)(v26 + 16 * v43);
      ++v48;
      unsigned int v47 = v49;
    }
    while (!WTF::equal((WTF *)*v44, 0, v46));
    if (v49)
    {
      *uint64_t v49 = 0;
      v49[1] = 0;
      --*(_DWORD *)(*v15 - 16);
      uint64_t v44 = v49;
    }
  }
  WTF::String::operator=(v44, &v62);
  std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100]((atomic_uchar ***)v44 + 1, v9);
  uint64_t v51 = *v15;
  uint64_t v52 = v61;
  if (*v15) {
    int v53 = *(_DWORD *)(v51 - 12) + 1;
  }
  else {
    int v53 = 1;
  }
  *(_DWORD *)(v51 - 12) = v53;
  uint64_t v54 = *v15;
  if (*v15) {
    int v55 = *(_DWORD *)(v54 - 12);
  }
  else {
    int v55 = 0;
  }
  uint64_t v56 = (*(_DWORD *)(v54 - 16) + v55);
  unint64_t v57 = *(unsigned int *)(v54 - 4);
  if (v57 > 0x400)
  {
    if (v57 <= 2 * v56) {
LABEL_89:
    }
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v15);
  }
  else if (3 * v57 <= 4 * v56)
  {
    goto LABEL_89;
  }
  uint64_t v9 = 0;
LABEL_91:
  uint64_t v58 = v62;
  uint64_t v62 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2) {
      WTF::StringImpl::destroy(v58, v50);
    }
    else {
      *(_DWORD *)v58 -= 2;
    }
  }
  uint64_t result = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v52);
  if (v9)
  {
LABEL_96:
    WebKit::WebProcessCache::CachedProcess::~CachedProcess(v9);
    return (void *)WTF::fastFree(v59, v60);
  }
  return result;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  uint64_t result = std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](a2 + 1, 0);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v8 >> 1);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>(a2, (WTF::StringImpl *)a2);
  uint64_t result = std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](a2 + 1, 0);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v5 = *a1;
  if (*a1) {
    int v6 = *(_DWORD *)(v5 - 12) - 1;
  }
  else {
    int v6 = -1;
  }
  *(_DWORD *)(v5 - 12) = v6;
  uint64_t v7 = *a1;
  if (*a1)
  {
    unsigned int v8 = 6 * *(_DWORD *)(v7 - 12);
    unsigned int v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
    {
      return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v9 >> 1);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = (WTF::ASCIICaseInsensitiveHash **)(v4 + 16 * v10);
      if (*v11 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v11, 0, v9))
        {
          std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](v4 + 16 * v10 + 8, 0);
          int v13 = *v11;
          *uint64_t v11 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              goto LABEL_24;
            }
            *(_DWORD *)v13 -= 2;
          }
        }
        else
        {
          uint64_t v14 = *a1;
          if (*a1) {
            unsigned int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            unsigned int v15 = 0;
          }
          int v16 = WTF::ASCIICaseInsensitiveHash::hash(*v11, v12);
          int v18 = 0;
          do
          {
            uint64_t v19 = v16 & v15;
            int v20 = WTF::equal(*(WTF **)(v14 + 16 * v19), 0, v17);
            int v16 = ++v18 + v19;
          }
          while (!v20);
          uint64_t v21 = v14 + 16 * v19;
          std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](v21 + 8, 0);
          uint64_t v23 = *(WTF::StringImpl **)v21;
          *(void *)uint64_t v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v22);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
          uint64_t v24 = *v11;
          *uint64_t v11 = 0;
          *(void *)uint64_t v21 = v24;
          uint64_t v25 = (void *)(v4 + 16 * v10);
          uint64_t v26 = v25[1];
          *++uint64_t v25 = 0;
          *(void *)(v21 + 8) = v26;
          std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](v25, 0);
          int v13 = *v11;
          *uint64_t v11 = 0;
          if (!v13) {
            goto LABEL_25;
          }
          if (*(_DWORD *)v13 == 2)
          {
LABEL_24:
            WTF::StringImpl::destroy(v13, v8);
            goto LABEL_25;
          }
          *(_DWORD *)v13 -= 2;
        }
      }
LABEL_25:
      if (++v10 == v5) {
        goto LABEL_28;
      }
    }
  }
  if (v4)
  {
LABEL_28:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v5 = *(_DWORD *)(v2 - 8);
  unsigned int v6 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v5;
  uint64_t v7 = (WTF **)(v2 + 16 * v6);
  if (WTF::equal(*v7, 0, v8))
  {
LABEL_7:
    if (*a1) {
      return *a1 + 16 * *(unsigned int *)(*a1 - 4);
    }
    return 0;
  }
  int v10 = 1;
  while (*v7 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v7, *a2, v9) & 1) == 0)
  {
    unsigned int v6 = (v6 + v10) & v5;
    uint64_t v7 = (WTF **)(v2 + 16 * v6);
    ++v10;
    if (WTF::equal(*v7, 0, v9)) {
      goto LABEL_7;
    }
  }
  return (uint64_t)v7;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebProcessCache::CachedProcess::*&)(void),WebKit::WebProcessCache::CachedProcess*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  unsigned int v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_1,void,WTF::RefCounterEvent>::call(uint64_t a1, void *a2)
{
  return WebKit::WebProcessPool::updateProcessSuppressionState(*(WebKit::WebProcessPool **)(a1 + 8), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_2,void,WTF::RefCounterEvent>::call()
{
  return WTF::RunLoop::TimerBase::start();
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebProcessPool::*&)(void),WebKit::WebProcessPool*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  unsigned int v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_3,void>::call(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 8) + 64WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_6,void,WTF::RefCounterEvent>::call(WebCore::PlatformMediaSessionManager *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)a1 + 1);
  uint64_t result = WebCore::PlatformMediaSessionManager::mediaCapabilityGrantsEnabled(a1);
  if (result) {
    return result;
  }
  if (*(void *)(*(void *)(v1 + 800) + 8))
  {
    uint64_t result = WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v1 + 832));
    if (*(unsigned char *)(v1 + 824)) {
      return result;
    }
    unsigned int v3 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = v1;
      _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::updateAudibleMediaAssertions: The number of processes playing audible media is now greater than zero. Taking UI process assertion.", buf, 0xCu);
    }
    uint64_t result = WTF::processHasEntitlement();
    int v5 = result;
    if (result)
    {
      pid_t v6 = getpid();
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v19 = 0;
      uint64_t v7 = WTF::fastMalloc((WTF *)0xB0);
      uint64_t v8 = WebKit::ProcessAssertion::ProcessAssertion(v7, v6, (_DWORD **)buf, 4, MEMORY[0x1E4F30980]);
      uint64_t result = WebKit::ProcessAssertion::acquireAsync(v8, &v19);
    }
    else
    {
      uint64_t v7 = 0;
    }
    int v10 = *(void **)(v1 + 176);
    if (v10)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v17 = 0;
      uint64_t v11 = WTF::fastMalloc((WTF *)0xB0);
      uint64_t v12 = WebKit::ProcessAssertion::ProcessAssertion(v11, v10, (_DWORD **)&v18, 4);
      uint64_t result = WebKit::ProcessAssertion::acquireAsync(v12, &v17);
    }
    else
    {
      uint64_t v11 = 0;
    }
    if (*(unsigned char *)(v1 + 824))
    {
      uint64_t v13 = *(void *)(v1 + 808);
      *(void *)(v1 + 808) = v7;
      if (v13) {
        uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v13 + 8), v4);
      }
      uint64_t v14 = *(void *)(v1 + 816);
      *(void *)(v1 + 816) = v11;
      if (v14) {
        uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v14 + 8), v4);
      }
      if (!v10) {
        goto LABEL_28;
      }
    }
    else
    {
      *(void *)(v1 + 808) = v7;
      *(void *)(v1 + 816) = v11;
      *(unsigned char *)(v1 + 824) = 1;
      if (!v10) {
        goto LABEL_28;
      }
    }
    uint64_t v15 = v17;
    uint64_t v17 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t result = (uint64_t)v18;
    int v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v4);
        if (!v5) {
          return result;
        }
        goto LABEL_29;
      }
      *(_DWORD *)result -= 2;
    }
LABEL_28:
    if (!v5) {
      return result;
    }
LABEL_29:
    uint64_t v16 = v19;
    uint64_t v19 = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t result = *(void *)buf;
    *(void *)buf = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v4);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  unsigned int v9 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = v1;
    __int16 v21 = 2048;
    uint64_t v22 = 0x4014000000000000;
    _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::updateAudibleMediaAssertions: Starting timer to clear audible activity in %g seconds because we are no longer playing audio", buf, 0x16u);
  }
  return WTF::RunLoop::TimerBase::start();
}

void WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_7,void,WTF::RefCounterEvent>::call(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(*(void *)(v1 + 872) + 8);
  if (v2)
  {
    if (*(unsigned char *)(v1 + 880)) {
      return;
    }
    unsigned int v3 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 134217984;
      uint64_t v8 = v1;
      _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::updateMediaStreamingActivity: The number of processes with media networking is now greater than zero. Notify network.", (uint8_t *)&v7, 0xCu);
    }
    *(unsigned char *)(v1 + 88WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 1;
  }
  else
  {
    uint64_t v4 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 134217984;
      uint64_t v8 = v1;
      _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::updateMediaStreamingActivity: The number of processes with media networking now zero. Notify network.", (uint8_t *)&v7, 0xCu);
    }
    *(unsigned char *)(v1 + 88WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  }
  {
    if (WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess)
    {
      uint64_t v5 = *(void *)(WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess + 8);
      if (v5)
      {
        pid_t v6 = (unsigned int *)(v5 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v5 + 16), 1u);
        WebKit::NetworkProcessProxy::notifyMediaStreamingActivity(v5, v2 != 0);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
      }
    }
  }
  else
  {
    WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess = 0;
  }
}

void WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_8,void>::call(WebKit::WebsiteDataStore *a1)
{
  {
    if (WebKit::globalDefaultDataStore(void)::globalDefaultDataStore
      && *(void *)(WebKit::globalDefaultDataStore(void)::globalDefaultDataStore + 8))
    {
      WebKit::WebsiteDataStore::defaultDataStore(a1, &v2);
      uint64_t v1 = v2;
      WebKit::WebsiteDataStore::terminateNetworkProcess((unsigned int *)v2);
      if (v1) {
        CFRelease(*((CFTypeRef *)v1 + 1));
      }
    }
  }
  else
  {
    WebKit::globalDefaultDataStore(void)::globalDefaultDataStore = 0;
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_9,void>::~CallableWrapper(void *a1, void *a2)
{
  unsigned int v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DD088;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_9,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DD088;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_10,void>::~CallableWrapper(void *a1, void *a2)
{
  unsigned int v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DD0B0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::WebProcessPool(API::ProcessPoolConfiguration &)::$_10,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DD0B0;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::FullKeyboardAccessModeChanged>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2634;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess(WebKit::RemoteWorkerType,WebCore::RegistrableDomain &&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::__1<WebCore::ProcessQualified<WTF::UUID>>,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::SupportsObjectIdentifierNullState)> &&)::$_2,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DD0D8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess(WebKit::RemoteWorkerType,WebCore::RegistrableDomain &&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::__1<WebCore::ProcessQualified<WTF::UUID>>,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::SupportsObjectIdentifierNullState)> &&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DD0D8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess(WebKit::RemoteWorkerType,WebCore::RegistrableDomain &&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::__1<WebCore::ProcessQualified<WTF::UUID>>,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::SupportsObjectIdentifierNullState)> &&)::$_2,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess(WebKit::RemoteWorkerType,WebCore::RegistrableDomain &&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::__1<WebCore::ProcessQualified<WTF::UUID>>,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::SupportsObjectIdentifierNullState)> &&)::$_3,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DD100;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess(WebKit::RemoteWorkerType,WebCore::RegistrableDomain &&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::__1<WebCore::ProcessQualified<WTF::UUID>>,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::SupportsObjectIdentifierNullState)> &&)::$_3,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DD100;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess(WebKit::RemoteWorkerType,WebCore::RegistrableDomain &&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::__1<WebCore::ProcessQualified<WTF::UUID>>,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::SupportsObjectIdentifierNullState)> &&)::$_4,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DD128;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess(WebKit::RemoteWorkerType,WebCore::RegistrableDomain &&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::__1<WebCore::ProcessQualified<WTF::UUID>>,PAL::SessionID,WTF::CompletionHandler<void ()(WTF::SupportsObjectIdentifierNullState)> &&)::$_4,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DD128;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    uint64_t v2 = result;
    if (result[3] > a2) {
      result[3] = a2;
    }
    uint64_t result = *(unsigned int **)result;
    if (a2)
    {
      v2[2] = a2;
      uint64_t result = (unsigned int *)WTF::fastRealloc((WTF *)result, (void *)(8 * a2));
      *(void *)uint64_t v2 = result;
    }
    else if (result)
    {
      *(void *)uint64_t v2 = 0;
      v2[2] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, 0);
    }
  }
  return result;
}

void WTF::Mapper<WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::moveToVectorOf<WebKit::ExtensionCapabilityGrant,WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WebKit::ExtensionCapabilityGrant>> &>(WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WebKit::ExtensionCapabilityGrant>> &)::{lambda(WebKit::ExtensionCapabilityGrant&&)#1},WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WebKit::ExtensionCapabilityGrant>> &,void>::map(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = **a2;
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 12);
    if (v5)
    {
      if (v5 >> 28)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v6 = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(void *)a1 = v6;
    }
  }
  int v7 = a2[1];
  uint64_t v8 = a2[3];
  if (v7 != v8)
  {
    uint64_t v9 = a2[2];
    do
    {
      uint64_t v10 = v7[1];
      uint64_t v11 = v7[2];
      v7[1] = 0;
      v7[2] = 0;
      uint64_t v12 = *(unsigned int *)(a1 + 12);
      uint64_t v13 = (void *)(*(void *)a1 + 16 * v12);
      uint64_t v15 = 0;
      uint64_t v16 = v11;
      *uint64_t v13 = v10;
      uint64_t v14 = v16;
      uint64_t v16 = 0;
      v13[1] = v14;
      *(_DWORD *)(a1 + 12) = v12 + 1;
      WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)&v15);
      while (1)
      {
        v7 += 3;
        if (v7 == v9) {
          break;
        }
        if ((unint64_t)(*v7 + 1) > 1) {
          goto LABEL_12;
        }
      }
      int v7 = v9;
LABEL_12:
      ;
    }
    while (v7 != v8);
  }
}

void **WTF::Vector<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebProcessProxy&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 <= v4 + 1) {
    unint64_t v7 = v4 + 1;
  }
  else {
    unint64_t v7 = v6;
  }
  uint64_t result = WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, v7);
  uint64_t v9 = *(unsigned int *)(a1 + 12);
  uint64_t v10 = *(void **)a1;
  atomic_fetch_add((atomic_uint *volatile)(a2 + 16), 1u);
  v10[v9] = a2;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetAlwaysUsesComplexTextCodePath>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2669;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetDisableFontSubpixelAntialiasingForTesting>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2673;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsEmptyDocument>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2656;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsCachePartitioned>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2653;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RegisterURLSchemeAsCanDisplayOnlyIfCanRequest>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2654;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetCacheModel>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2671;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::NetworkProcess::SetCacheModelSynchronouslyForTesting>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v25 = 0;
  IPC::Connection::createSyncMessageEncoder(3621, a3, &v25, &v24);
  uint64_t v11 = v24;
  if (a4)
  {
    **((unsigned char **)v24 + 66) |= 4u;
    *(unsigned char *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v11, *a2);
  IPC::Connection::sendSyncMessage(a1, v25, (uint64_t *)&v24, a4, (uint64_t)&v22, a6);
  uint64_t v12 = v23;
  if (v23)
  {
    if (v23 != 1)
    {
      uint64_t v18 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetDefaultRequestTimeoutInterval>(v18, v19, v20, v21);
    }
    *(unsigned char *)a5 = v22;
  }
  else
  {
    uint64_t v13 = v22;
    uint64_t v22 = 0;
    *(void *)a5 = v13;
  }
  *(_DWORD *)(a5 + 16) = v12;
  ((void (*)(char *, uint64_t *))off_1EE9DD140[v12])(&v26, &v22);
  uint64_t result = v24;
  uint64_t v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetDefaultRequestTimeoutInterval>(uint64_t a1, double *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2672;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::StopMemorySampler>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 2697;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void **WTF::Detail::CallableWrapper<WebKit::WebProcessPool::terminateServiceWorkers(void)::$_0,void,WebKit::WebProcessProxy &>::call(void **result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 872))
  {
    uint64_t result = (void **)result[1];
    uint64_t v2 = *((unsigned int *)result + 3);
    if (v2 == *((_DWORD *)result + 2))
    {
      return WTF::Vector<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebProcessProxy&>((uint64_t)result, a2);
    }
    else
    {
      uint64_t v3 = *result;
      atomic_fetch_add((atomic_uint *volatile)(a2 + 16), 1u);
      v3[v2] = a2;
      ++*((_DWORD *)result + 3);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::DestroyAutomationSessionProxy>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 2627;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::handleSynchronousMessage(IPC::Connection &,WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)::$_0,void,WTF::RefPtr<API::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DD188;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::handleSynchronousMessage(IPC::Connection &,WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)::$_0,void,WTF::RefPtr<API::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DD188;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebProcessPool::handleSynchronousMessage(IPC::Connection &,WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)::$_0,void,WTF::RefPtr<API::Object,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::call(uint64_t a1, const void **a2)
{
  uint64_t v3 = *a2;
  uint64_t v9 = (CFTypeRef *)&unk_1EE9DCAF8;
  WebKit::UserData::transform(v3, (uint64_t)&v9, &v8);
  uint64_t v4 = v8;
  uint64_t v8 = 0;
  uint64_t v9 = (CFTypeRef *)v4;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, CFTypeRef **))(*(void *)v5 + 16))(v5, &v9);
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  unint64_t v6 = v9;
  uint64_t v9 = 0;
  if (v6) {
    CFRelease(v6[1]);
  }
  uint64_t v7 = v8;
  uint64_t v8 = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

uint64_t WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = 80 * v3;
    do
    {
      uint64_t v4 = std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100](v4, a2)
         + 80;
      v5 -= 80;
    }
    while (v5);
  }
  unint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = *(void *)(a1 + 64);
    if (v3) {
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
    uint64_t v4 = *(WTF **)(a1 + 40);
    if (v4)
    {
      *(void *)(a1 + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      WTF::fastFree(v4, a2);
    }
    uint64_t v5 = *(WTF **)(a1 + 24);
    if (v5)
    {
      *(void *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      WTF::fastFree(v5, a2);
    }
    unint64_t v6 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t v7 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return a1;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::GarbageCollectJavaScriptObjects>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2637;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetJavaScriptGarbageCollectorTimerEnabled>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2686;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetMemoryCacheDisabled>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2689;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit14WebProcessPool23updateProcessAssertionsEvENK3__0clEvEUlRT_E_vJRNS2_15WebProcessProxyEEE4callES9_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (unsigned int *)(a2 + 16);
  atomic_fetch_add((atomic_uint *volatile)(a2 + 16), 1u);
  if (*(unsigned char *)(a2 + 872)) {
    WebKit::WebProcessProxy::updateRemoteWorkerProcessAssertion(a2, 1);
  }
  if (*(unsigned char *)(a2 + 952)) {
    WebKit::WebProcessProxy::updateRemoteWorkerProcessAssertion(a2, 2);
  }

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = (WTF::ASCIICaseInsensitiveHash **)(v4 + 16 * v10);
      if (*v11 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v11, 0, v9))
        {
          uint64_t v12 = v4 + 16 * v10;
          uint64_t v13 = *(void *)(v12 + 8);
          *(void *)(v12 + 8) = 0;
          if (v13) {
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v13 + 16));
          }
          uint64_t v14 = *v11;
          *uint64_t v11 = 0;
          if (!v14) {
            goto LABEL_31;
          }
          if (*(_DWORD *)v14 == 2)
          {
LABEL_30:
            WTF::StringImpl::destroy(v14, v8);
            goto LABEL_31;
          }
          *(_DWORD *)v14 -= 2;
        }
        else
        {
          uint64_t v15 = *a1;
          if (*a1) {
            unsigned int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            unsigned int v16 = 0;
          }
          int v17 = WTF::ASCIICaseInsensitiveHash::hash(*v11, v8);
          int v18 = 0;
          do
          {
            uint64_t v19 = v17 & v16;
            int v20 = WTF::equal(*(WTF **)(v15 + 16 * v19), 0, v9);
            int v17 = ++v18 + v19;
          }
          while (!v20);
          uint64_t v21 = v15 + 16 * v19;
          uint64_t v22 = *(void *)(v21 + 8);
          *(void *)(v21 + 8) = 0;
          if (v22) {
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v22 + 16));
          }
          unsigned int v23 = *(WTF::StringImpl **)v21;
          *(void *)uint64_t v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v8);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
          uint64_t v24 = *v11;
          *uint64_t v11 = 0;
          *(void *)uint64_t v21 = v24;
          uint64_t v25 = v4 + 16 * v10;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          *(void *)(v21 + 8) = v26;
          uint64_t v27 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (v27) {
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v27 + 16));
          }
          uint64_t v14 = *v11;
          *uint64_t v11 = 0;
          if (!v14) {
            goto LABEL_31;
          }
          if (*(_DWORD *)v14 == 2) {
            goto LABEL_30;
          }
          *(_DWORD *)v14 -= 2;
        }
      }
LABEL_31:
      if (++v10 == v5) {
        goto LABEL_34;
      }
    }
  }
  if (v4)
  {
LABEL_34:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::processForNavigation(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::Navigation const&,WTF::URL const&,WebKit::ProcessSwapRequestedByClient,WebKit::WebProcessProxy::LockdownMode,WebKit::FrameInfoData const&,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebsiteDataStore>,WTF::DefaultRefDerefTraits<WebKit::WebsiteDataStore>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DD200;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::processForNavigation(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::Navigation const&,WTF::URL const&,WebKit::ProcessSwapRequestedByClient,WebKit::WebProcessProxy::LockdownMode,WebKit::FrameInfoData const&,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebsiteDataStore>,WTF::DefaultRefDerefTraits<WebKit::WebsiteDataStore>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DD200;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::processForNavigation(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::Navigation const&,WTF::URL const&,WebKit::ProcessSwapRequestedByClient,WebKit::WebProcessProxy::LockdownMode,WebKit::FrameInfoData const&,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebsiteDataStore>,WTF::DefaultRefDerefTraits<WebKit::WebsiteDataStore>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t *, void, const char *, uint64_t))(*(void *)v1 + 16))(v1, &v4, 0, "Found process for the same site", 32);
  uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t v3 = v4;
  uint64_t v4 = 0;
  if (v3) {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::WebProcessPool::processForNavigation(WebKit::WebPageProxy &,WebKit::WebFrameProxy &,API::Navigation const&,WTF::URL const&,WebKit::ProcessSwapRequestedByClient,WebKit::WebProcessProxy::LockdownMode,WebKit::FrameInfoData const&,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebsiteDataStore>,WTF::DefaultRefDerefTraits<WebKit::WebsiteDataStore>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral)> &&)::$_1 &&>>()
{
  return WTFLogAlways();
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DD228;
  uint64_t v3 = (unsigned int *)a1[13];
  a1[13] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::~$_0(a1 + 1, (WTF::StringImpl *)a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_1,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9DD228;
  uint64_t v3 = (unsigned int *)*((void *)a1 + 13);
  *((void *)a1 + 13) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::~$_0((void *)a1 + 1, (WTF::StringImpl *)a2);

  return WTF::fastFree(a1, v4);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  if (v2 && (uint64_t v3 = *(void *)(v2 + 8)) != 0)
  {
    uint64_t v4 = WTF::fastMalloc((WTF *)0x68);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)uint64_t v4 = &unk_1EE9DD250;
    *(void *)(v4 + 8) = v5;
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    *(void *)(v4 + 16) = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    *(void *)(v4 + 24) = v7;
    uint64_t v8 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    *(void *)(v4 + 32) = v8;
    uint64_t v9 = *(void *)(a1 + 40);
    *(void *)(a1 + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
    *(void *)(v4 + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v9;
    uint64_t v10 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    *(void *)(v4 + 48) = v10;
    uint64_t v11 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    *(void *)(v4 + 56) = v11;
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 64);
    uint64_t v12 = *(void *)(a1 + 80);
    *(void *)(a1 + 8WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
    *(void *)(v4 + 8WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v12;
    *(void *)(v4 + 88) = *(void *)(a1 + 88);
    uint64_t v13 = *(_DWORD **)(a1 + 96);
    if (v13) {
      *v13 += 2;
    }
    *(void *)(v4 + 96) = v13;
    int v17 = (unsigned int *)v4;
    WebKit::SuspendedPageProxy::waitUntilReadyToUnsuspend(v3, (uint64_t *)&v17);
    uint64_t result = v17;
    if (v17)
    {
      uint64_t v15 = *(uint64_t (**)(void))(*(void *)v17 + 8);
      return (unsigned int *)v15();
    }
  }
  else
  {
    uint64_t v16 = a1 + 8;
    return WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::operator()(v16, 0);
  }
  return result;
}

unsigned int *WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(v4 + 136);
  if (v5 && *(unsigned char *)(v5 + 104) || *(void *)(v4 + 144) || *(_DWORD *)(a1 + 84) > 2u)
  {
    if (a2)
    {
      uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 464);
      if (!v12) {
        goto LABEL_14;
      }
      uint64_t v13 = *(void *)(v12 + 416);
      if (v13) {
        uint64_t v13 = *(void *)(v13 + 32);
      }
      if (v13 != a2) {
LABEL_14:
      }
        uint64_t v2 = 0;
    }
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 64);
    uint64_t v16 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 16))(v16, a1 + 40, v2, v14, v15);
    int v17 = *(uint64_t (**)(uint64_t))(*(void *)v16 + 8);
    return (unsigned int *)v17(v16);
  }
  else
  {
    uint64_t v6 = a1 + 72;
    uint64_t v7 = *(void *)(a1 + 72);
    uint64_t v8 = *(unsigned __int8 *)(a1 + 80);
    uint64_t v9 = *(void *)(*(void *)(a1 + 24) + 48);
    CFRetain(*(CFTypeRef *)(v9 + 8));
    WebKit::WebProcessPool::processForRegistrableDomain(v3, v7, (WTF::ASCIICaseInsensitiveHash **)(v6 + 16), v8, (WebKit::WebPreferences **)v9, &v18);
    CFRelease(*(CFTypeRef *)(v9 + 8));
    uint64_t result = (unsigned int *)WebKit::WebProcessPool::prepareProcessForNavigation(v3, (uint64_t *)&v18, *(void *)(v6 - 48), 0, *(void *)(v6 - 16), *(void *)(v6 - 8), (WTF::StringImpl **)(v6 + 16), *(void *)(v6 - 40), *(unsigned char *)(v6 + 8), (WebKit::WebsiteDataStore **)v6, (uint64_t *)(v6 - 56), *(_DWORD *)(v6 + 12) + 1);
    if (v18)
    {
      uint64_t v11 = (unsigned int *)((char *)v18 + 16);
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0,void,WebKit::SuspendedPageProxy>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DD250;
  WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0,void,WebKit::SuspendedPageProxy>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9DD250;
  WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::~$_0((void *)a1 + 1, a2);

  return WTF::fastFree(a1, v3);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0,void,WebKit::SuspendedPageProxy>::call(uint64_t a1, uint64_t a2)
{
  return WebKit::WebProcessPool::prepareProcessForNavigation(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &&,WebKit::WebPageProxy &,WebKit::SuspendedPageProxy *,WTF::ASCIILiteral,WebCore::RegistrableDomain const&,API::Navigation const&,WebKit::WebProcessProxy::LockdownMode,WTF::Ref<WebKit::WebsiteDataStore,WTF::RawPtrTraits<WebKit::WebProcessProxy::LockdownMode>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy::LockdownMode>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>> &,WebKit::SuspendedPageProxy,WebKit::SuspendedPageProxy *)> &&,unsigned int)::$_0::operator()(a1 + 8, a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::AddMockMediaDevice>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2614;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WebCore::MockMediaDevice,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::ClearMockMediaDevices>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2620;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::RemoveMockMediaDevice>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2663;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetMockMediaDeviceIsEphemeral>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2690;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,BOOL>,0ul,1ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::ResetMockMediaDevices>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2664;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::PrewarmInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (WTF::ASCIICaseInsensitiveHash **)(v5 + 16 * v11);
      if (*v13 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v13, 0, v10))
        {
          std::unique_ptr<WebCore::PrewarmInformation>::reset[abi:sn180100]((uint64_t *)(v5 + 16 * v11 + 8), 0);
          uint64_t v15 = *v13;
          *uint64_t v13 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v9);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
        }
        else
        {
          uint64_t v16 = *a1;
          if (*a1) {
            unsigned int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            unsigned int v17 = 0;
          }
          int v18 = WTF::ASCIICaseInsensitiveHash::hash(*v13, v14);
          int v20 = 0;
          do
          {
            uint64_t v21 = v18 & v17;
            int v22 = WTF::equal(*(WTF **)(v16 + 16 * v21), 0, v19);
            int v18 = ++v20 + v21;
          }
          while (!v22);
          uint64_t v23 = v16 + 16 * v21;
          std::unique_ptr<WebCore::PrewarmInformation>::reset[abi:sn180100]((uint64_t *)(v23 + 8), 0);
          uint64_t v25 = *(WTF::StringImpl **)v23;
          *(void *)uint64_t v23 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2) {
              WTF::StringImpl::destroy(v25, v24);
            }
            else {
              *(_DWORD *)v25 -= 2;
            }
          }
          uint64_t v26 = *v13;
          *uint64_t v13 = 0;
          *(void *)uint64_t v23 = v26;
          uint64_t v27 = (uint64_t *)(v5 + 16 * v11);
          uint64_t v28 = v27[1];
          *++uint64_t v27 = 0;
          *(void *)(v23 + 8) = v28;
          std::unique_ptr<WebCore::PrewarmInformation>::reset[abi:sn180100](v27, 0);
          uint64_t v29 = *v13;
          *uint64_t v13 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, v9);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v12 = v16 + 16 * v21;
          }
        }
      }
      ++v11;
    }
    while (v11 != v6);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v12;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::PrewarmInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::PrewarmInformation>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::PrewarmInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v5, a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::ClearCurrentModifierStateForTesting>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v7 = 2619;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unsigned int v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  unsigned int v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetDomainsWithUserInteraction>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2676;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *WTF::Detail::CallableWrapper<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::SetDomainsWithCrossPageStorageAccess,WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)#1},void,WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DD278;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::SetDomainsWithCrossPageStorageAccess,WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)#1},void,WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DD278;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  char v4 = *(unsigned char *)(a2 + 16);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::SeedResourceLoadStatisticsForTesting,WebKit::WebProcessPool::seedResourceLoadStatisticsForTesting(WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessPool::seedResourceLoadStatisticsForTesting(WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DD2A0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::SeedResourceLoadStatisticsForTesting,WebKit::WebProcessPool::seedResourceLoadStatisticsForTesting(WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessPool::seedResourceLoadStatisticsForTesting(WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DD2A0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::SendResourceLoadStatisticsDataImmediately,WebKit::WebProcessPool::sendResourceLoadStatisticsDataImmediately(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessPool::sendResourceLoadStatisticsDataImmediately(WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DD2C8;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::SendResourceLoadStatisticsDataImmediately,WebKit::WebProcessPool::sendResourceLoadStatisticsDataImmediately(WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessPool::sendResourceLoadStatisticsDataImmediately(WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DD2C8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::serviceWorkerProxiesCount(void)::$_0,void,WebKit::WebProcessProxy &>::call(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 872)) {
    ++**(_DWORD **)(result + 8);
  }
  return result;
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::isJITDisabledInAllRemoteWorkerProcesses(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebKit::WebProcessProxy &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(_DWORD ***)(a1 + 8);
  ++*v3;
  char v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v4 = 2643;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  char v17 = v4;
  uint64_t v14 = 0;
  unsigned int v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unsigned int v5 = &unk_1EE9DD340;
  v5[1] = v3;
  v15[0] = 0;
  WTF::Ref<WebKit::WebProcessPool::isJITDisabledInAllRemoteWorkerProcesses(WTF::CompletionHandler<void ()(BOOL)> &&)::JITDisabledCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref(v15, v6);
  uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v15[0] = (uint64_t)v5;
  v15[1] = v7;
  char v16 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v17, 0, (uint64_t)v15, 1);
  if (v16)
  {
    uint64_t v9 = v15[0];
    v15[0] = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  uint64_t v10 = v17;
  char v17 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v12, v13);
  }
  return WTF::Ref<WebKit::WebProcessPool::isJITDisabledInAllRemoteWorkerProcesses(WTF::CompletionHandler<void ()(BOOL)> &&)::JITDisabledCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref(&v14, v8);
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages10WebProcess12IsJITEnabledEZZNK6WebKit14WebProcessPool39isJITDisabledInAllRemoteWorkerProcessesEONS_17CompletionHandlerIFvbEEEENK3__0clINS8_15WebProcessProxyEEEDaRT_EUlbE_EENSA_IFvPNS2_7DecoderEEEEOT0_NS_19ThreadLikeAssertionEEUlSM_E_vJSM_EED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9DD340;
  WTF::Ref<WebKit::WebProcessPool::isJITDisabledInAllRemoteWorkerProcesses(WTF::CompletionHandler<void ()(BOOL)> &&)::JITDisabledCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref(a1 + 1, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages10WebProcess12IsJITEnabledEZZNK6WebKit14WebProcessPool39isJITDisabledInAllRemoteWorkerProcessesEONS_17CompletionHandlerIFvbEEEENK3__0clINS8_15WebProcessProxyEEEDaRT_EUlbE_EENSA_IFvPNS2_7DecoderEEEEOT0_NS_19ThreadLikeAssertionEEUlSM_E_vJSM_EED0Ev(uint64_t *a1, void *a2)
{
  *a1 = (uint64_t)&unk_1EE9DD340;
  WTF::Ref<WebKit::WebProcessPool::isJITDisabledInAllRemoteWorkerProcesses(WTF::CompletionHandler<void ()(BOOL)> &&)::JITDisabledCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(BOOL)> &&>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(BOOL)> &&>>::~Ref(a1 + 1, a2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages10WebProcess12IsJITEnabledEZZNK6WebKit14WebProcessPool39isJITDisabledInAllRemoteWorkerProcessesEONS_17CompletionHandlerIFvbEEEENK3__0clINS8_15WebProcessProxyEEEDaRT_EUlbE_EENSA_IFvPNS2_7DecoderEEEEOT0_NS_19ThreadLikeAssertionEEUlSM_E_vJSM_EE4callESM_(uint64_t result, void *a2)
{
  if (a2 && *a2)
  {
    uint64_t v3 = result;
    unint64_t result = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if ((unsigned __int16)result <= 0xFFu)
    {
      uint64_t v7 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t result = a2[3];
      if (result && v7)
      {
        uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 16);
        return v8();
      }
    }
    else
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if ((_BYTE)result) {
        BOOL v5 = 1;
      }
      else {
        BOOL v5 = *(unsigned char *)(v4 + 16) == 0;
      }
      char v6 = !v5;
      *(unsigned char *)(v4 + 16) = v6;
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPageProxy&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 <= v4 + 1) {
    unint64_t v7 = v4 + 1;
  }
  else {
    unint64_t v7 = v6;
  }
  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  uint64_t v9 = *(void *)a1;
  CFRetain(*(CFTypeRef *)(a2 + 8));
  *(void *)(v9 + 8 * v8) = a2;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unsigned int *WebKit::UIProxyForCapture::removeMessageReceiver(uint64_t a1, unsigned __int8 a2)
{
  return IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(*(void *)(*(void *)(a1 + 8) + 8) + 152), a2);
}

uint64_t WebKit::UIProxyForCapture::connection(WebKit::UIProxyForCapture *this)
{
  uint64_t result = *(void *)(*(void *)(*((void *)this + 1) + 8) + 144);
  if (!result)
  {
    uint64_t result = 130;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::UIProxyForCapture::willStartCapture()
{
  return 1;
}

uint64_t WebKit::UIProxyForCapture::logger(WebKit::UIProxyForCapture *this)
{
  return WebKit::WebProcessProxy::logger(*(WebKit::WebProcessProxy **)(*((void *)this + 1) + 8));
}

uint64_t WebKit::UserMediaCaptureManagerProxy::ConnectionProxy::setCaptureAttributionString(WebKit::UserMediaCaptureManagerProxy::ConnectionProxy *this)
{
  return 1;
}

int *WebKit::UIProxyForCapture::resourceOwner(WebKit::UIProxyForCapture *this)
{
  if ((byte_1EB359CF0 & 1) == 0)
  {
    _MergedGlobals_96 = 0;
    byte_1EB359CF0 = 1;
  }
  return &_MergedGlobals_96;
}

uint64_t WebKit::UserMediaCaptureManagerProxy::ConnectionProxy::setCurrentMediaEnvironment()
{
  return 0;
}

uint64_t WebKit::UserMediaCaptureManagerProxy::ConnectionProxy::remoteVideoFrameObjectHeap(WebKit::UserMediaCaptureManagerProxy::ConnectionProxy *this)
{
  return 0;
}

void WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::WebProcessProxy(WebKit::WebProcessPool &,WebKit::WebsiteDataStore *,WebKit::WebProcessProxy::IsPrewarmed,WebCore::CrossOriginMode,WebKit::WebProcessProxy::LockdownMode)::$_1,void,WTF::RefCounterEvent>::call(uint64_t a1, int a2)
{
  if (!a2) {
    WebKit::WebProcessProxy::maybeShutDown(*(WebKit::WebProcessProxy **)(a1 + 8));
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::InitializeWebProcess,WebKit::WebProcessProxy::initializeWebProcess(WebKit::WebProcessCreationParameters &&)::$_0>(WebKit::WebProcessProxy::initializeWebProcess(WebKit::WebProcessCreationParameters &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DD468;
  uint64_t v2 = (WebKit::ProcessThrottlerActivity **)(a1 + 2);
  uint64_t v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v3);
  }
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v2, 0);
  unint64_t v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }
  return a1;
}

void IPC::Connection::cancelReply<Messages::WebProcess::InitializeWebProcess,WebKit::WebProcessProxy::initializeWebProcess(WebKit::WebProcessCreationParameters &&)::$_0>(uint64_t a1)
{
  int v3 = 0;
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 8);
    if (v1)
    {
      uint64_t v2 = (unsigned int *)(v1 + 16);
      atomic_fetch_add((atomic_uint *volatile)(v1 + 16), 1u);
      WebCore::ProcessIdentity::operator=();
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v2);
    }
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::shouldSendPendingMessage(WebKit::AuxiliaryProcessProxy::PendingMessage const&)::$_0,void,std::optional<WebKit::SandboxExtensionHandle>>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9DD490;
  if (*(unsigned char *)(a1 + 608)) {
    WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)(a1 + 24), a2);
  }
  int v3 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::shouldSendPendingMessage(WebKit::AuxiliaryProcessProxy::PendingMessage const&)::$_0,void,std::optional<WebKit::SandboxExtensionHandle>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DD490;
  if (*((unsigned char *)this + 608)) {
    WebKit::LoadParameters::~LoadParameters((WTF *)((char *)this + 24), a2);
  }
  int v3 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::shouldSendPendingMessage(WebKit::AuxiliaryProcessProxy::PendingMessage const&)::$_0,void,std::optional<WebKit::SandboxExtensionHandle>>::call(uint64_t a1, uint64_t a2)
{
  LOBYTE(v9) = 0;
  char v10 = 0;
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v8 = *(const char ***)a2;
    *(void *)a2 = 0;
    uint64_t v9 = v8;
    char v10 = 1;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5) {
    goto LABEL_12;
  }
  if (v3)
  {
    if (!*(unsigned char *)(a1 + 608))
    {
LABEL_15:
      __break(1u);
      return;
    }
    unint64_t v6 = v9;
    uint64_t v9 = 0;
    std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a1 + 272), v6);
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7) {
      uint64_t v5 = *(void *)(v7 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
  }
  if (!*(unsigned char *)(a1 + 608)) {
    goto LABEL_15;
  }
  uint64_t v11 = a1 + 24;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequest>(v5, &v11, *(void *)(a1 + 16), 0);
LABEL_12:
  if (v3) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v9);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::shouldSendPendingMessage(WebKit::AuxiliaryProcessProxy::PendingMessage const&)::$_1,void,std::optional<WebKit::SandboxExtensionHandle>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DD4B8;
  std::__optional_destruct_base<WebKit::GoToBackForwardItemParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 2));
  int v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::shouldSendPendingMessage(WebKit::AuxiliaryProcessProxy::PendingMessage const&)::$_1,void,std::optional<WebKit::SandboxExtensionHandle>>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9DD4B8;
  std::__optional_destruct_base<WebKit::GoToBackForwardItemParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 16);
  int v3 = (unsigned int *)*((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
  }

  return WTF::fastFree(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::shouldSendPendingMessage(WebKit::AuxiliaryProcessProxy::PendingMessage const&)::$_1,void,std::optional<WebKit::SandboxExtensionHandle>>::call(uint64_t a1, uint64_t a2)
{
  LOBYTE(v9) = 0;
  char v10 = 0;
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v8 = *(const char ***)a2;
    *(void *)a2 = 0;
    uint64_t v9 = v8;
    char v10 = 1;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5) {
    goto LABEL_12;
  }
  if (v3)
  {
    if (!*(unsigned char *)(a1 + 216))
    {
LABEL_15:
      __break(1u);
      return;
    }
    unint64_t v6 = v9;
    uint64_t v9 = 0;
    std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a1 + 208), v6);
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7) {
      uint64_t v5 = *(void *)(v7 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
  }
  if (!*(unsigned char *)(a1 + 216)) {
    goto LABEL_15;
  }
  uint64_t v11 = a1 + 16;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GoToBackForwardItem>(v5, &v11, *(void *)(a1 + 224), 0);
LABEL_12:
  if (v3) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v9);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::SetThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DD4E0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::SetThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DD4E0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::SetThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::take(uint64_t *result, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v4 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4 == a3)
  {
    *uint64_t result = 0;
    return result;
  }
  uint64_t v5 = a3[1];
  if (v5)
  {
    a3[1] = 0;
    uint64_t v3 = *a2;
  }
  *uint64_t result = v5;
  if (v3)
  {
    unint64_t v6 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v6 == a3) {
      return result;
    }
  }
  else
  {
    if (!a3) {
      return result;
    }
    unint64_t v6 = 0;
  }
  if (v6 != a3)
  {
    *a3 = -1;
    a3[1] = 0;
    ++*(_DWORD *)(*a2 - 16);
    uint64_t v7 = *a2;
    int v8 = *a2 ? *(_DWORD *)(v7 - 12) - 1 : -1;
    *(_DWORD *)(v7 - 12) = v8;
    uint64_t v9 = *a2;
    if (*a2)
    {
      unsigned int v10 = 6 * *(_DWORD *)(v9 - 12);
      unsigned int v11 = *(_DWORD *)(v9 - 4);
      if (v10 < v11 && v11 >= 9) {
        return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a2, v11 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  unsigned int v2 = *(_DWORD *)(a1 - 8);
  unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  uint64_t v6 = v2 & ((v5 >> 31) ^ v5);
  uint64_t v7 = *(void *)(a1 + 16 * v6);
  if (v7 == a2) {
    return a1 + 16 * v6;
  }
  int v8 = 1;
  while (v7)
  {
    uint64_t v6 = (v6 + v8) & v2;
    uint64_t v7 = *(void *)(a1 + 16 * v6);
    ++v8;
    if (v7 == a2) {
      return a1 + 16 * v6;
    }
  }
  return a1 + 16 * *(unsigned int *)(a1 - 4);
}

BOOL WTF::WeakHashMap<WebKit::VisitedLinkStore,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)a1;
  if (*(void *)a1)
  {
    int v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
    {
      BOOL v9 = 0;
      goto LABEL_21;
    }
    int v5 = 0;
    unsigned int v6 = v4 - 1;
    do
    {
      uint64_t v7 = v3 + 16 * v6;
      if ((unint64_t)(*(void *)v7 + 1) >= 2 && !*(void *)(*(void *)v7 + 8))
      {
        WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>::customDeleteBucket(v7, a2);
        ++v5;
      }
    }
    while ((unint64_t)v6--);
    uint64_t v3 = *(void *)a1;
    BOOL v9 = v5 != 0;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      uint64_t v10 = *(void *)a1;
      if (*(void *)a1) {
        int v11 = *(_DWORD *)(v10 - 12);
      }
      else {
        int v11 = 0;
      }
      *(_DWORD *)(v10 - 12) = v11 - v5;
      uint64_t v3 = *(void *)a1;
    }
    if (v3)
    {
      unsigned int v12 = *(_DWORD *)(v3 - 4);
      uint64_t v13 = *(unsigned int *)(v3 - 12);
      if (v12 >= 9 && 6 * (int)v13 < v12)
      {
        unsigned int v18 = (v13 - 1) | ((v13 - 1) >> 1) | (((v13 - 1) | ((v13 - 1) >> 1)) >> 2);
        unsigned int v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
        unint64_t v20 = (v19 | HIWORD(v19)) + 1;
        if (v20 > 0x400)
        {
          if (v20 > 2 * v13) {
            goto LABEL_32;
          }
        }
        else if (3 * v20 > 4 * v13)
        {
LABEL_30:
          double v21 = (double)v13;
          double v22 = (double)v20;
          double v23 = 0.604166667;
          goto LABEL_33;
        }
        LODWORD(v2WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 2 * v20;
        if (v20 <= 0x400) {
          goto LABEL_30;
        }
LABEL_32:
        double v21 = (double)v13;
        double v22 = (double)v20;
        double v23 = 0.416666667;
LABEL_33:
        if (v22 * v23 <= v21) {
          LODWORD(v2WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 2 * v20;
        }
        if (v20 <= 8) {
          unsigned int v24 = 8;
        }
        else {
          unsigned int v24 = v20;
        }
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, v24, 0);
        uint64_t v3 = *(void *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          unsigned int v15 = 0;
          goto LABEL_25;
        }
LABEL_22:
        unsigned int v15 = *(_DWORD *)(v3 - 12);
        int v16 = 0x7FFFFFFF;
        if (v15 >= 0x7FFFFFFF) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
LABEL_21:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_22;
    }
  }
  else
  {
    BOOL v9 = 0;
  }
  unsigned int v15 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
  int v16 = v15;
LABEL_26:
  *(_DWORD *)(a1 + 12) = 2 * v16;
  return v9;
}

unsigned int **WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>::customDeleteBucket(uint64_t a1, void *a2)
{
  uint64_t result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket((unsigned int **)a1, a2);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    return (unsigned int **)WTF::fastFree((WTF *)(v5 - 16), v4);
  }
  return result;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AllowFileAccessFromWebProcess,WebKit::WebProcessProxy::assumeReadAccessToBaseURL(WebKit::WebPageProxy &,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&,BOOL)::$_0>(WebKit::WebProcessProxy::assumeReadAccessToBaseURL(WebKit::WebPageProxy &,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DD508;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AllowFileAccessFromWebProcess,WebKit::WebProcessProxy::assumeReadAccessToBaseURL(WebKit::WebPageProxy &,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&,BOOL)::$_0>(WebKit::WebProcessProxy::assumeReadAccessToBaseURL(WebKit::WebPageProxy &,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DD508;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AllowFileAccessFromWebProcess,WebKit::WebProcessProxy::assumeReadAccessToBaseURL(WebKit::WebPageProxy &,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&,BOOL)::$_0>(WebKit::WebProcessProxy::assumeReadAccessToBaseURL(WebKit::WebPageProxy &,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0 && (v6 = *(void *)(a1 + 16)) != 0 && *(void *)(v6 + 8))
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v5 + 536), (WTF::StringImpl **)(a1 + 24), a3, (uint64_t)v14);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9) {
        uint64_t v8 = v9 - 16;
      }
      else {
        uint64_t v8 = 0;
      }
    }
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v8 + 1176), (WTF::StringImpl **)(a1 + 24), v7, (uint64_t)v14);
    uint64_t v10 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return v13(v12);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AllowFilesAccessFromWebProcess,WebKit::WebProcessProxy::assumeReadAccessToBaseURLs(WebKit::WebPageProxy &,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::assumeReadAccessToBaseURLs(WebKit::WebPageProxy &,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DD530;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  uint64_t v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }
  uint64_t v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AllowFilesAccessFromWebProcess,WebKit::WebProcessProxy::assumeReadAccessToBaseURLs(WebKit::WebPageProxy &,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::assumeReadAccessToBaseURLs(WebKit::WebPageProxy &,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9DD530;
  uint64_t v3 = *((void *)a1 + 5);
  *((void *)a1 + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  uint64_t v5 = (unsigned int *)*((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }
  uint64_t v6 = (unsigned int *)*((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v4);
  }

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AllowFilesAccessFromWebProcess,WebKit::WebProcessProxy::assumeReadAccessToBaseURLs(WebKit::WebPageProxy &,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::assumeReadAccessToBaseURLs(WebKit::WebPageProxy &,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 && *(void *)(v4 + 8) && (uint64_t v5 = *(void *)(a1 + 16)) != 0 && *(void *)(v5 + 8))
  {
    uint64_t v6 = *(unsigned int *)(a1 + 36);
    if (v6)
    {
      unsigned int v7 = *(WTF::StringImpl ***)(a1 + 24);
      uint64_t v8 = 8 * v6;
      do
      {
        uint64_t v9 = *(void *)(a1 + 8);
        if (v9) {
          uint64_t v9 = *(void *)(v9 + 8);
        }
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v9 + 536), v7, a3, (uint64_t)v17);
        uint64_t v11 = *(void *)(a1 + 16);
        if (v11)
        {
          uint64_t v12 = *(void *)(v11 + 8);
          if (v12) {
            uint64_t v11 = v12 - 16;
          }
          else {
            uint64_t v11 = 0;
          }
        }
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v11 + 1176), v7++, v10, (uint64_t)v17);
        v8 -= 8;
      }
      while (v8);
    }
    uint64_t v13 = *(void *)(a1 + 40);
    *(void *)(a1 + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
    (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
    return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 40);
    *(void *)(a1 + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
    (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
    int v16 = *(uint64_t (**)(uint64_t))(*(void *)v15 + 8);
    return v16(v15);
  }
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::processDidTerminateOrFailedToLaunch(WebKit::ProcessTerminationReason)::$_1,void,WebKit::ProvisionalPageProxy &>::call(unsigned int *result, uint64_t a2)
{
  uint64_t v3 = *((void *)result + 1);
  unint64_t v4 = *(unsigned int *)(v3 + 12);
  if (v4 != *(_DWORD *)(v3 + 8))
  {
    uint64_t v15 = *(WTF **)v3;
    uint64_t result = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
    int v16 = *(atomic_uint **)(a2 + 8);
    if (v16) {
      atomic_fetch_add(v16, 1u);
    }
    *((void *)v15 + v4) = v16;
    goto LABEL_26;
  }
  unint64_t v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 <= v4 + 1) {
    unint64_t v7 = v4 + 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (!(v7 >> 29))
  {
    uint64_t v8 = *(WTF **)v3;
    uint64_t v10 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
    *(_DWORD *)(v3 + 8) = v7;
    *(void *)uint64_t v3 = v10;
    if (v4)
    {
      uint64_t v11 = 8 * v4;
      uint64_t v12 = (unsigned int **)v8;
      do
      {
        uint64_t v13 = *v12;
        *uint64_t v12 = 0;
        *(void *)uint64_t v10 = v13;
        uint64_t v14 = *v12;
        *uint64_t v12 = 0;
        if (v14 && atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v14);
          WTF::fastFree((WTF *)v14, v9);
        }
        uint64_t v10 = (WTF *)((char *)v10 + 8);
        ++v12;
        v11 -= 8;
      }
      while (v11);
      uint64_t v10 = *(WTF **)v3;
    }
    if (v8)
    {
      if (v10 == v8)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v8, v9);
      uint64_t v10 = *(WTF **)v3;
    }
    uint64_t v17 = *(unsigned int *)(v3 + 12);
    uint64_t result = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
    unsigned int v18 = *(atomic_uint **)(a2 + 8);
    if (v18) {
      atomic_fetch_add(v18, 1u);
    }
    *((void *)v10 + v17) = v18;
LABEL_26:
    ++*(_DWORD *)(v3 + 12);
    return result;
  }
  __break(0xC471u);
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v7;
    do
    {
      int v16 = (uint64_t *)(v6 + 16 * v13);
      uint64_t v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          uint64_t v19 = *a1;
          if (*a1) {
            int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            int v20 = 0;
          }
          unint64_t v21 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          unint64_t v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          unint64_t v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          unsigned int v24 = v20 & ((v23 >> 31) ^ v23);
          int v25 = 1;
          do
          {
            unsigned int v26 = v24;
            uint64_t v27 = *(void *)(v19 + 16 * v24);
            unsigned int v24 = (v24 + v25++) & v20;
          }
          while (v27);
          uint64_t v28 = (void *)(v19 + 16 * v26);
          int v30 = v28 + 1;
          uint64_t v29 = v28[1];
          if (v29)
          {
            WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(v29, v10);
            uint64_t v17 = *v16;
          }
          *uint64_t v28 = v17;
          uint64_t v31 = v6 + 16 * v13;
          *int v30 = 0;
          uint64_t v32 = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = 0;
          *int v30 = v32;
          uint64_t v33 = *(void *)(v31 + 8);
          if (v33) {
            WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(v33, v10);
          }
          if (v16 == a3) {
            uint64_t v14 = v28;
          }
        }
        else
        {
          uint64_t v18 = *(void *)(v6 + 16 * v13 + 8);
          if (v18) {
            WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(v18, v10);
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = a2;
  uint64_t result = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    uint64_t v10 = (void *)(result + 16);
    do
    {
      *uint64_t v10 = 0;
      v10[1] = 0;
      void v10[2] = 0;
      v10 += 4;
      --v7;
    }
    while (v7);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = v4 + 32 * v11;
      if (*(void *)v12 ^ 1 | *(void *)(v12 + 8))
      {
        if (*(_OWORD *)v12 != 0)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            unsigned int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            unsigned int v16 = 0;
          }
          int v24 = -1640531527;
          __int16 v25 = 0;
          char v26 = 0;
          WTF::addArgs<WTF::UUID>(&v24, (void *)(v4 + 32 * v11));
          int v17 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v24);
          int v18 = 0;
          do
          {
            uint64_t v19 = v17 & v16;
            uint64_t v20 = v15 + 32 * v19;
            int v17 = ++v18 + v19;
          }
          while (*(_OWORD *)v20 != 0);
          uint64_t v21 = *(void *)(v20 + 16);
          *(void *)(v20 + 16) = 0;
          if (v21) {
            CFRelease(*(CFTypeRef *)(v21 + 8));
          }
          *(_OWORD *)uint64_t v20 = *(_OWORD *)v12;
          uint64_t v22 = v4 + 32 * v11;
          uint64_t v23 = *(void *)(v22 + 16);
          *(void *)(v22 + 16) = 0;
          *(void *)(v20 + 16) = v23;
          uint64_t v14 = *(void *)(v22 + 16);
          *(void *)(v22 + 16) = 0;
          if (!v14) {
            goto LABEL_22;
          }
LABEL_21:
          CFRelease(*(CFTypeRef *)(v14 + 8));
          goto LABEL_22;
        }
        uint64_t v13 = v4 + 32 * v11;
        uint64_t v14 = *(void *)(v13 + 16);
        *(void *)(v13 + 16) = 0;
        if (v14) {
          goto LABEL_21;
        }
      }
LABEL_22:
      if (++v11 == v5) {
        goto LABEL_25;
      }
    }
  }
  if (v4)
  {
LABEL_25:
    return WTF::fastFree((WTF *)(v4 - 16), v9);
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    unsigned int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v6;
    do
    {
      uint64_t v13 = v5 + 24 * v10;
      if (*(void *)(v13 + 8) != -1)
      {
        if (*(_OWORD *)v13 == 0)
        {
          uint64_t v16 = v5 + 24 * v10;
          uint64_t v17 = *(void *)(v16 + 16);
          *(void *)(v16 + 16) = 0;
          if (v17) {
            CFRelease(*(CFTypeRef *)(v17 + 8));
          }
        }
        else
        {
          uint64_t v14 = *a1;
          if (*a1) {
            unsigned int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            unsigned int v15 = 0;
          }
          unsigned int v31 = -1640531527;
          __int16 v32 = 0;
          char v33 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v31, (void *)(v5 + 24 * v10));
          int v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v31);
          int v19 = 0;
          do
          {
            unsigned int v20 = v18 & v15;
            uint64_t v21 = (_OWORD *)(v14 + 24 * (v18 & v15));
            int v18 = ++v19 + (v18 & v15);
          }
          while (*v21 != 0);
          uint64_t v22 = v14 + 24 * v20;
          uint64_t v25 = *(void *)(v22 + 16);
          int v24 = (void *)(v22 + 16);
          uint64_t v23 = v25;
          void *v24 = 0;
          if (v25) {
            CFRelease(*(CFTypeRef *)(v23 + 8));
          }
          *uint64_t v21 = *(_OWORD *)v13;
          uint64_t v26 = v5 + 24 * v10;
          uint64_t v27 = *(void *)(v26 + 16);
          *(void *)(v26 + 16) = 0;
          void *v24 = v27;
          uint64_t v28 = *(void *)(v26 + 16);
          *(void *)(v26 + 16) = 0;
          if (v28) {
            CFRelease(*(CFTypeRef *)(v28 + 8));
          }
          if (v13 == a3) {
            uint64_t v11 = v21;
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

BOOL WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(v2 - 8);
  int v18 = -1640531527;
  __int16 v19 = 0;
  char v20 = 0;
  WTF::addArgs<WTF::UUID>(&v18, a2);
  int v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v18);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = v5 & v4;
  uint64_t v9 = (uint64_t *)(v2 + 32 * v8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v11 == v7 && v10 == v6) {
    return 1;
  }
  int v14 = 1;
  do
  {
    uint64_t v15 = v10 | v11;
    BOOL result = v15 != 0;
    if (!v15) {
      break;
    }
    uint64_t v8 = (v8 + v14) & v4;
    uint64_t v16 = (uint64_t *)(v2 + 32 * v8);
    uint64_t v10 = *v16;
    uint64_t v11 = v16[1];
    BOOL v17 = v11 == v7 && v10 == v6;
    ++v14;
  }
  while (!v17);
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  BOOL result = (void *)a2[1];
  if (result) {
    BOOL result = (void *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable((uint64_t)result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WTF::OptionSet<WebKit::TextCheckerState>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char *a2)
{
  char v2 = *a2;
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = v2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::FetchWebsiteData,WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0>(WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DD580;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::FetchWebsiteData,WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0>(WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DD580;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::FetchWebsiteData,WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0>(WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WebKit::WebsiteData>>(a2, (uint64_t)&v11);
    if (v15)
    {
      v16[0] = v11;
      uint64_t v4 = v12;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      v16[1] = v4;
      long long v5 = v13;
      long long v13 = 0uLL;
      long long v17 = v5;
      uint64_t v6 = v14;
      int v14 = 0;
      int v18 = v6;
      WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0::operator()<WebKit::WebsiteData>(v2, (uint64_t)v16);
      if (v18) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v18, v7);
      }
      if (*((void *)&v17 + 1)) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v17 + 1), v7);
      }
      if ((void)v17) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v17, v7);
      }
      WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v7);
      return std::__optional_destruct_base<WebKit::WebsiteData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v11, v8);
    }
    else
    {
      std::__optional_destruct_base<WebKit::WebsiteData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v11, v3);
      return IPC::Connection::cancelReply<Messages::WebProcess::FetchWebsiteData,WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0>(v2);
    }
  }
  else
  {
    uint64_t v10 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebProcess::FetchWebsiteData,WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0>(v10);
  }
}

uint64_t IPC::Connection::cancelReply<Messages::WebProcess::FetchWebsiteData,WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0>(uint64_t *a1)
{
  long long v5 = 0;
  long long v3 = 0u;
  long long v4 = 0u;
  WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0::operator()<WebKit::WebsiteData>(a1, (uint64_t)&v3);
  if (v5) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, v1);
  }
  if (*((void *)&v4 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v4 + 1), v1);
  }
  if ((void)v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v4, v1);
  }
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v3, v1);
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::WebsiteData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebKit::WebsiteData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 40))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      unsigned int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::WebsiteData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebKit::WebsiteData>(a1, (uint64_t)&v8);
  char v4 = v12;
  if (v12)
  {
    *(void *)a2 = v8;
    uint64_t v5 = v9;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    *(void *)(a2 + 8) = v5;
    long long v6 = v10;
    long long v10 = 0uLL;
    *(_OWORD *)(a2 + 16) = v6;
    *(void *)(a2 + 32) = v11;
    char v4 = 1;
    uint64_t v11 = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v4;
  return std::__optional_destruct_base<WebKit::WebsiteData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v8, v3);
}

WTF::StringImpl **IPC::Decoder::decode<WebKit::WebsiteData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebsiteData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 40))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl **)a1[3];
    if (result && v5 != 0)
    {
      unsigned int v7 = (uint64_t (*)(void))*((void *)*result + 2);
      return (WTF::StringImpl **)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebsiteData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    long long v3 = *(WTF::StringImpl ***)(a1 + 32);
    if (v3) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
    }
    char v4 = *(WTF::StringImpl ***)(a1 + 24);
    if (v4) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
    }
    uint64_t v5 = *(WTF::StringImpl ***)(a1 + 16);
    if (v5) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
    }
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, a2);
  }
  return a1;
}

void WebKit::WebProcessProxy::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&)::$_0::operator()<WebKit::WebsiteData>(uint64_t *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  v9[0] = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  v9[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  long long v10 = v4;
  uint64_t v5 = *(WTF::StringImpl ***)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v11 = v5;
  WTF::CompletionHandler<void ()(WebKit::WebsiteData)>::operator()(a1 + 2, (uint64_t)v9);
  if (v11) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v6);
  }
  if (*((void *)&v10 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v10 + 1), v6);
  }
  if ((void)v10) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v10, v6);
  }
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v6);
  unsigned int v7 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(v2 + 136);
    if (v8) {
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    }
    *(_DWORD *)buf = 134218240;
    uint64_t v13 = v2;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::fetchWebsiteData: Releasing a background assertion because the Web process is done fetching Website data", buf, 0x12u);
  }
}

uint64_t WTF::CompletionHandler<void ()(WebKit::WebsiteData)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v10 = *a1;
  *a1 = 0;
  v7[0] = *(void *)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  v7[1] = v2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  long long v8 = v3;
  long long v4 = *(WTF::StringImpl ***)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v9 = v4;
  WTF::Function<void ()(WebKit::WebsiteData)>::operator()(&v10, (uint64_t)v7);
  if (v9) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v5);
  }
  if (*((void *)&v8 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v8 + 1), v5);
  }
  if ((void)v8) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v8, v5);
  }
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::Function<void ()(WebKit::WebsiteData)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  v8[0] = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  v8[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  long long v9 = v4;
  uint64_t v5 = *(WTF::StringImpl ***)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v10 = v5;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 16))(v2, v8);
  if (v10) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v6);
  }
  if (*((void *)&v9 + 1)) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v9 + 1), v6);
  }
  if ((void)v9) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v9, v6);
  }
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v6);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::DeleteWebsiteData,WebKit::WebProcessProxy::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DD5A8;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::DeleteWebsiteData,WebKit::WebProcessProxy::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DD5A8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::DeleteWebsiteData,WebKit::WebProcessProxy::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::deleteWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  uint64_t v3 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(v1 + 136);
    if (v4) {
      LODWORD(v4) = *(_DWORD *)(v4 + 108);
    }
    int v5 = 134218240;
    uint64_t v6 = v1;
    __int16 v7 = 1024;
    int v8 = v4;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::deleteWebsiteData: Releasing a background assertion because the Web process is done deleting Website data", (uint8_t *)&v5, 0x12u);
  }
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 32 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(a1, v6);
      v6 += 32;
      v7 -= 32;
    }
    while (v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::DeleteWebsiteDataForOrigins,WebKit::WebProcessProxy::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DD5D0;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::DeleteWebsiteDataForOrigins,WebKit::WebProcessProxy::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DD5D0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::DeleteWebsiteDataForOrigins,WebKit::WebProcessProxy::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::deleteWebsiteDataForOrigins(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  uint64_t v3 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(v1 + 136);
    if (v4) {
      LODWORD(v4) = *(_DWORD *)(v4 + 108);
    }
    int v5 = 134218240;
    uint64_t v6 = v1;
    __int16 v7 = 1024;
    int v8 = v4;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::deleteWebsiteDataForOrigins: Releasing a background assertion because the Web process is done deleting Website data for several origins", (uint8_t *)&v5, 0x12u);
  }
}

unint64_t IPC::ArgumentCoder<std::tuple<BOOL,WTF::MonotonicTime const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,WTF::MonotonicTime const&>,0ul,1ul>(IPC::Encoder *a1, double **a2)
{
  char v4 = *(unsigned char *)a2;
  int v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *int v5 = v4;
    double v7 = *a2[1];
    return IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v7);
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DD5F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::ReleaseMemory,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DD620;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::ReleaseMemory,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DD620;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::ReleaseMemory,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::isResponsive(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DD648;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::isResponsive(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DD648;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::isResponsive(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::isResponsive(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DD670;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::isResponsive(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DD670;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::isResponsive(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::call(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      char v4 = *(void **)(v3 + 720);
      uint64_t v10 = v4;
      uint64_t v5 = *(unsigned int *)(v3 + 732);
      int v11 = *(_DWORD *)(v3 + 728);
      int v12 = v5;
      v9[0] = 0;
      *(void *)(v3 + 72WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
      v9[1] = 0;
      *(void *)(v3 + 728) = 0;
      WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, a2);
      if (v5)
      {
        uint64_t v7 = 8 * v5;
        do
        {
          uint64_t v8 = *v4;
          *v4++ = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, 1);
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
          v7 -= 8;
        }
        while (v7);
      }
      return WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v6);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::isResponsiveWithLazyStop(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DD698;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::isResponsiveWithLazyStop(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DD698;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::isResponsiveWithLazyStop(void)::$_0,void>::call(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      char v4 = *(void **)(v3 + 720);
      uint64_t v10 = v4;
      uint64_t v5 = *(unsigned int *)(v3 + 732);
      int v11 = *(_DWORD *)(v3 + 728);
      int v12 = v5;
      v9[0] = 0;
      *(void *)(v3 + 72WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
      v9[1] = 0;
      *(void *)(v3 + 728) = 0;
      WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, a2);
      if (v5)
      {
        uint64_t v7 = 8 * v5;
        do
        {
          uint64_t v8 = *v4;
          *v4++ = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, 1);
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
          v7 -= 8;
        }
        while (v7);
      }
      return WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v6);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::GetActivePagesOriginsForTesting,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DD6C0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::GetActivePagesOriginsForTesting,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DD6C0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::GetActivePagesOriginsForTesting,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v7);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8) {
        return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebProcess::GetActivePagesOriginsForTesting,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebProcess::GetActivePagesOriginsForTesting,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v6);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebProcess::GetActivePagesOriginsForTesting,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t *a1)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebKit::SpeechRecognitionServer>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebKit::SpeechRecognitionServer>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = (void *)*a1;
  if (*a1) {
    v3 += 2 * *((unsigned int *)v3 - 1);
  }
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  uint64_t v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    uint64_t v5 = (void *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    uint64_t v5 = 0;
  }
  if (v5 != a2) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::EstablishRemoteWorkerContextConnectionToNetworkProcess,WebKit::WebProcessProxy::establishRemoteWorkerContext(WebKit::RemoteWorkerType,WebKit::WebPreferencesStore const&,WebCore::RegistrableDomain const&,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::establishRemoteWorkerContext(WebKit::RemoteWorkerType,WebKit::WebPreferencesStore const&,WebCore::RegistrableDomain const&,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DD6E8;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::EstablishRemoteWorkerContextConnectionToNetworkProcess,WebKit::WebProcessProxy::establishRemoteWorkerContext(WebKit::RemoteWorkerType,WebKit::WebPreferencesStore const&,WebCore::RegistrableDomain const&,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::establishRemoteWorkerContext(WebKit::RemoteWorkerType,WebKit::WebPreferencesStore const&,WebCore::RegistrableDomain const&,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DD6E8;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::EstablishRemoteWorkerContextConnectionToNetworkProcess,WebKit::WebProcessProxy::establishRemoteWorkerContext(WebKit::RemoteWorkerType,WebKit::WebPreferencesStore const&,WebCore::RegistrableDomain const&,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebProcessProxy::establishRemoteWorkerContext(WebKit::RemoteWorkerType,WebKit::WebPreferencesStore const&,WebCore::RegistrableDomain const&,std::optional<WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    if (*(void *)(v2 + 8))
    {
      uint64_t v3 = *(void *)(a1 + 8);
      uint64_t v4 = qword_1EB358050;
      if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(v3 + 136);
        if (v5) {
          LODWORD(v5) = *(_DWORD *)(v5 + 108);
        }
        int v6 = *(unsigned __int8 *)(a1 + 24);
        int v10 = 134218498;
        if (v6 == 1) {
          uint64_t v7 = "service";
        }
        else {
          uint64_t v7 = "shared";
        }
        uint64_t v11 = v3;
        __int16 v12 = 1024;
        int v13 = v5;
        __int16 v14 = 2082;
        int v15 = v7;
        _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::establishRemoteWorkerContext: Finished (workerType=%{public}s)", (uint8_t *)&v10, 0x1Cu);
      }
    }
  }
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DD710;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DD710;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 && *(_DWORD *)(v4 + 4))
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v5 = *(unsigned int *)(a2 + 12);
    if (v5)
    {
      int v6 = *(const WTF::StringImpl ***)a2;
      uint64_t v7 = v5 << 8;
      do
      {
        if (WTF::equal(*(WTF **)(a1 + 8), v6[8], a3))
        {
          if (HIDWORD(v14) == v14)
          {
            WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NotificationData&>((uint64_t)&v13, (unint64_t)v6);
          }
          else
          {
            WebCore::NotificationData::NotificationData((WebCore::NotificationData *)(v13 + ((unint64_t)HIDWORD(v14) << 8)), (const WebCore::NotificationData *)v6);
            ++HIDWORD(v14);
          }
        }
        v6 += 32;
        v7 -= 256;
      }
      while (v7);
    }
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 16))(v8, &v13);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    return WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v9);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
    __int16 v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);
    return v12(v11);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::getWebCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DD738;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::getWebCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DD738;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::getWebCryptoMasterKey(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>::call(WebCore *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = 0;
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return (WTF *)v4(v3);
  }
  else
  {
    WebCore::defaultWebCryptoMasterKey((uint64_t *)&v8, a1);
    uint64_t v6 = *((void *)a1 + 1);
    *((void *)a1 + 1) = 0;
    (*(void (**)(uint64_t, WTF **))(*(void *)v6 + 16))(v6, &v8);
    uint64_t result = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
    if (v10)
    {
      uint64_t result = v8;
      if (v8)
      {
        uint64_t v8 = 0;
        int v9 = 0;
        return (WTF *)WTF::fastFree(result, v7);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::wrapCryptoKey(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9DD760;
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::wrapCryptoKey(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DD760;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::wrapCryptoKey(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::call(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 16)) {
    goto LABEL_7;
  }
  int v15 = 0;
  uint64_t v16 = 0;
  int v3 = WebCore::wrapSerializedCryptoKey();
  char v5 = v3;
  if (v3)
  {
    __int16 v12 = v15;
    uint64_t v6 = v16;
    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v13 = v6;
    char v14 = 1;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, WTF **))(*(void *)v7 + 16))(v7, &v12);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    if (v14)
    {
      uint64_t v11 = v12;
      if (v12)
      {
        __int16 v12 = 0;
        LODWORD(v13) = 0;
        WTF::fastFree(v11, v4);
      }
    }
  }
  uint64_t result = v15;
  if (v15)
  {
    int v15 = 0;
    LODWORD(v16) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, v4);
  }
  if ((v5 & 1) == 0)
  {
LABEL_7:
    LOBYTE(v12) = 0;
    char v14 = 0;
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, WTF **))(*(void *)v9 + 16))(v9, &v12);
    uint64_t result = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
    if (v14)
    {
      uint64_t result = v12;
      if (v12)
      {
        __int16 v12 = 0;
        LODWORD(v13) = 0;
        return (WTF *)WTF::fastFree(result, v10);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::unwrapCryptoKey(WebCore::WrappedCryptoKey &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9DD788;
  uint64_t v3 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WTF **)(a1 + 32);
  if (v4)
  {
    *(void *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::unwrapCryptoKey(WebCore::WrappedCryptoKey &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DD788;
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 4) = 0;
    *((_DWORD *)this + 1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
    WTF::fastFree(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::unwrapCryptoKey(WebCore::WrappedCryptoKey &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::call(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 16) || (WebCore::unwrapCryptoKey(), !v8))
  {
    LOBYTE(v6) = 0;
    char v8 = 0;
  }
  uint64_t v3 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v3 + 16))(v3, &v6);
  uint64_t result = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (v8)
  {
    uint64_t result = v6;
    if (v6)
    {
      uint64_t v6 = 0;
      int v7 = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

uint64_t WebKit::TextAnimationController::document(uint64_t this, uint64_t a2)
{
  uint64_t v2 = (void *)this;
  if (!a2 || (uint64_t v3 = *(void *)(a2 + 8)) == 0 || (v4 = *(WebCore::Page **)(v3 + 32)) == 0)
  {
    *(void *)this = 0;
    return this;
  }
  ++*(_DWORD *)v4;
  WebCore::Page::checkedFocusController((uint64_t *)&v8, v4);
  uint64_t v5 = WebCore::FocusController::focusedOrMainFrame(v8);
  if (v5) {
    atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
  }
  uint64_t v6 = v8;
  char v8 = 0;
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      this = 286;
      __break(0xC471u);
      return this;
    }
    --*(_DWORD *)v6;
  }
  if (v5)
  {
    uint64_t v7 = *(void *)(v5 + 296);
    if (v7) {
      *(_DWORD *)(v7 + 28) += 2;
    }
    *uint64_t v2 = v7;
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v4);
}

void sub_198EFC3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (!*a10)
    {
      __break(0xC471u);
      JUMPOUT(0x198EFC3F0);
    }
    --*a10;
  }
  WTF::RefCounted<WebCore::Page>::deref(v10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::TextAnimationController::unreplacedRangeForActiveWritingToolsSession(WebKit::TextAnimationController *this, uint64_t a2)
{
  WebKit::TextAnimationController::contextRangeForActiveWritingToolsSession(&v20, *(void *)a2);
  if (!v24)
  {
    *(unsigned char *)this = 0;
    *((unsigned char *)this + 32) = 0;
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20);
  }
  if (!*(unsigned char *)(a2 + 136))
  {
    *(void *)this = v20;
    *((_DWORD *)this + 2) = v21;
    uint64_t v12 = v22;
    uint64_t v20 = 0;
    uint64_t v22 = 0;
    *((void *)this + 2) = v12;
    *((_DWORD *)this + 6) = v23;
    *((unsigned char *)this + 32) = 1;
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20);
  }
  uint64_t v4 = *(WTF::StringImpl **)(a2 + 128);
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
  uint64_t result = WebCore::resolveCharacterRange();
  if (v24)
  {
    uint64_t v6 = v20;
    uint64_t v7 = v22;
    *(_DWORD *)(v20 + 28) += 2;
    *(_DWORD *)(v7 + 28) += 2;
    int v8 = v23;
    int v16 = v23;
    uint64_t v9 = v18;
    *(_DWORD *)(v18 + 28) += 2;
    uint64_t v25 = v6;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v25);
    int v10 = v19;
    int v14 = v19;
    uint64_t v13 = 0;
    *(void *)this = v9;
    *((_DWORD *)this + 2) = v10;
    uint64_t v15 = 0;
    *((void *)this + 2) = v7;
    *((_DWORD *)this + 6) = v8;
    *((unsigned char *)this + 32) = 1;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v15);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v13);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v18);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v17);
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v11);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20);
  }
  __break(1u);
  return result;
}

void sub_198EFC5A0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, a2);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

unsigned char *WebKit::TextAnimationController::contextRangeForActiveWritingToolsSession(unsigned char *this, uint64_t a2)
{
  if (a2 && (uint64_t v2 = *(void *)(a2 + 8)) != 0 && (v3 = *(WebCore::Page **)(v2 + 32)) != 0)
  {
    ++*(_DWORD *)v3;
    WebCore::Page::contextRangeForActiveWritingToolsSession(v3);
    return WTF::RefCounted<WebCore::Page>::deref(v3);
  }
  else
  {
    *this = 0;
    this[32] = 0;
  }
  return this;
}

void sub_198EFC644(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

WebKit::TextAnimationController *WebKit::TextAnimationController::contextRangeForTextAnimationID(WebKit::TextAnimationController *this, const WTF::UUID *a2, void *a3)
{
  uint64_t v3 = this;
  uint64_t v4 = (WebCore *)*((void *)a2 + 18);
  if (v4)
  {
    ++*((_DWORD *)v4 + 2);
    WebCore::makeSimpleRange(&v21, v4, (const Range *)a2);
    *(void *)uint64_t v3 = v21;
    *((_DWORD *)v3 + 2) = v22;
    uint64_t v5 = v23;
    uint64_t v21 = 0;
    uint64_t v23 = 0;
    *((void *)v3 + 2) = v5;
    *((_DWORD *)v3 + 6) = v24;
    *((unsigned char *)v3 + 32) = 1;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v23);
    this = (WebKit::TextAnimationController *)WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v21);
    if (*((_DWORD *)v4 + 2) == 1) {
      return (WebKit::TextAnimationController *)(*(uint64_t (**)(WebCore *))(*(void *)v4 + 8))(v4);
    }
    else {
      --*((_DWORD *)v4 + 2);
    }
  }
  else if (*((unsigned char *)a2 + 32) && (*((void *)a2 + 3) == a3[1] ? (BOOL v8 = *((void *)a2 + 2) == *a3) : (BOOL v8 = 0), v8))
  {
    return (WebKit::TextAnimationController *)WebKit::TextAnimationController::unreplacedRangeForActiveWritingToolsSession(this, (uint64_t)a2);
  }
  else
  {
    uint64_t v9 = *((unsigned int *)a2 + 41);
    if (v9)
    {
      uint64_t v10 = 32 * v9;
      uint64_t v11 = *((void *)a2 + 19) + 16;
      do
      {
        if (*(void *)(v11 - 8) == a3[1] && *(void *)(v11 - 16) == *a3)
        {
          WebKit::TextAnimationController::contextRangeForActiveWritingToolsSession(&v21, *(void *)a2);
          if (v25)
          {
            WebCore::resolveCharacterRange();
            *(void *)uint64_t v3 = v17;
            *((_DWORD *)v3 + 2) = v18;
            uint64_t v16 = v19;
            uint64_t v17 = 0;
            uint64_t v19 = 0;
            *((void *)v3 + 2) = v16;
            *((_DWORD *)v3 + 6) = v20;
            *((unsigned char *)v3 + 32) = 1;
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v19);
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v17);
            return (WebKit::TextAnimationController *)std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21);
          }
          this = (WebKit::TextAnimationController *)std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21);
        }
        v11 += 32;
        v10 -= 32;
      }
      while (v10);
    }
    if (*((unsigned char *)a2 + 96) && (*((void *)a2 + 7) == a3[1] ? (BOOL v13 = *((void *)a2 + 6) == *a3) : (BOOL v13 = 0), v13))
    {
      uint64_t v14 = *((void *)a2 + 8);
      *(_DWORD *)(v14 + 28) += 2;
      *(void *)uint64_t v3 = v14;
      *((_DWORD *)v3 + 2) = *((_DWORD *)a2 + 18);
      uint64_t v15 = *((void *)a2 + 10);
      *(_DWORD *)(v15 + 28) += 2;
      *((void *)v3 + 2) = v15;
      *((_DWORD *)v3 + 6) = *((_DWORD *)a2 + 22);
      *((unsigned char *)v3 + 32) = 1;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *((unsigned char *)v3 + 32) = 0;
    }
  }
  return this;
}

void sub_198EFC8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::TextAnimationController::removeTransparentMarkersForTextAnimationID(WebKit::TextAnimationController *this, const WTF::UUID *a2)
{
  uint64_t result = WebKit::TextAnimationController::document((uint64_t)&v7, (uint64_t)this);
  uint64_t v4 = v7;
  if (v7)
  {
    if (!*((void *)v7 + 192)) {
      WebCore::Document::ensureMarkers(v7);
    }
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v5 = &unk_1EE9DD7E8;
    v5[1] = a2;
    uint64_t v6 = (uint64_t)v5;
    WebCore::DocumentMarkerController::removeMarkers();
    uint64_t result = v6;
    if (v6) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    if (*((_DWORD *)v4 + 7) == 2)
    {
      if ((*((_WORD *)v4 + 17) & 0x400) == 0) {
        return WebCore::Node::removedLastRef(v4);
      }
    }
    else
    {
      *((_DWORD *)v4 + 7) -= 2;
    }
  }
  return result;
}

void sub_198EFC9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (*(_DWORD *)(v9 + 28) == 2)
  {
    if ((*(_WORD *)(v9 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
  }
  else
  {
    *(_DWORD *)(v9 + 28) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::TextAnimationController::removeInitialTextAnimationForActiveWritingToolsSession(uint64_t *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  long long v1 = *((_OWORD *)this + 2);
  long long v5 = *((_OWORD *)this + 1);
  long long v6 = v1;
  if (*((unsigned char *)this + 32)) {
    *((unsigned char *)this + 32) = 0;
  }
  if ((_BYTE)v6)
  {
    uint64_t v2 = *this;
    if (*this)
    {
      uint64_t v3 = *(void *)(v2 + 8);
      if (v3) {
        uint64_t v2 = v3 - 16;
      }
      else {
        uint64_t v2 = 0;
      }
    }
    uint64_t v4 = &v5;
    return (uint64_t *)IPC::MessageSender::send<Messages::WebPageProxy::RemoveTextAnimationForAnimationID>(v2 + 32, (uint64_t **)&v4);
  }
  return this;
}

uint64_t WebKit::TextAnimationController::addInitialTextAnimationForActiveWritingToolsSession(WebKit::TextAnimationController *this)
{
  WTF::UUID::UUID((WTF::UUID *)&v31);
  WebKit::TextAnimationController::unreplacedRangeForActiveWritingToolsSession((WebKit::TextAnimationController *)&v26, (uint64_t)this);
  if (v30)
  {
    if (v26 != v28 || v27 != v29)
    {
      WebKit::TextAnimationController::createTextIndicatorForRange((WebCore::TextIndicatorData *)v18, this, (uint64_t)&v26);
      if (v25)
      {
        WebKit::TextAnimationController::removeInitialTextAnimationForActiveWritingToolsSession((uint64_t *)this);
        if (!*(void *)this) {
          goto LABEL_36;
        }
        uint64_t v3 = *(void *)(*(void *)this + 8);
        if (v3) {
          uint64_t v4 = v3 - 16;
        }
        else {
          uint64_t v4 = 0;
        }
        while (1)
        {
          v14[0] = 512;
          long long v15 = 0u;
          long long v16 = 0u;
          long long v17 = 0u;
          if (v25) {
            break;
          }
          __break(1u);
LABEL_36:
          uint64_t v4 = 0;
        }
        uint64_t v13 = 0;
        WebKit::WebPage::addTextAnimationForAnimationID(v4, (uint64_t)&v31, (uint64_t)v14, (uint64_t)v18, &v13);
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
        int v6 = *((unsigned __int8 *)this + 32);
        *((_OWORD *)this + 1) = v31;
        if (!v6) {
          *((unsigned char *)this + 32) = 1;
        }
        if (v25)
        {
          if ((v24 & 0x8000000000000) != 0)
          {
            uint64_t v12 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
            if (atomic_fetch_add((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v12);
              WTF::fastFree((WTF *)v12, v5);
            }
          }
          uint64_t v7 = v23;
          uint64_t v23 = 0;
          if (v7)
          {
            if (v7[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
            }
            else {
              --v7[2];
            }
          }
          BOOL v8 = v22;
          int v22 = 0;
          if (v8)
          {
            if (v8[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
            }
            else {
              --v8[2];
            }
          }
          uint64_t v9 = v21;
          uint64_t v21 = 0;
          if (v9)
          {
            if (v9[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
            }
            else {
              --v9[2];
            }
          }
          uint64_t v10 = v19;
          if (v19)
          {
            uint64_t v19 = 0;
            int v20 = 0;
            WTF::fastFree(v10, v5);
          }
        }
      }
    }
  }
  return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v26);
}

void sub_198EFCD24(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF *a25,int a26,uint64_t a27,_DWORD *a28,_DWORD *a29,_DWORD *a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a33)
  {
    if ((a31 & 0x8000000000000) != 0)
    {
      int v35 = (unsigned int *)(a31 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a31 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v35);
        WTF::fastFree((WTF *)v35, a2);
      }
    }
    if (a30)
    {
      if (a30[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a30 + 8))(a30);
      }
      else {
        --a30[2];
      }
    }
    if (a29)
    {
      if (a29[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a29 + 8))(a29);
      }
      else {
        --a29[2];
      }
    }
    if (a28)
    {
      if (a28[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a28 + 8))(a28);
      }
      else {
        --a28[2];
      }
    }
    if (a25) {
      WTF::fastFree(a25, a2);
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v33 - 72);
  _Unwind_Resume(a1);
}

WebCore::TextIndicatorData *WebKit::TextAnimationController::createTextIndicatorForRange(WebCore::TextIndicatorData *this, unsigned char *a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t)this;
  if (*(void *)a2 && (uint64_t v4 = *(void *)(*(void *)a2 + 8)) != 0 && (v5 = *(_DWORD **)(v4 + 32)) != 0)
  {
    ++*v5;
    BOOL v6 = *(void *)a3 == *(void *)(a3 + 16) && *(_DWORD *)(a3 + 8) == *(_DWORD *)(a3 + 24);
    if (v6 && a2[336])
    {
      WebCore::TextIndicatorData::TextIndicatorData(this, (const WebCore::TextIndicatorData *)(a2 + 224));
      *(unsigned char *)(v3 + 112) = 1;
    }
    else
    {
      *(unsigned char *)this = 0;
      *((unsigned char *)this + 112) = 0;
      WebCore::TextIndicator::createWithRange();
      if (v21)
      {
        WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v14, (const WebCore::TextIndicatorData *)(v21 + 8));
        std::optional<WebCore::TextIndicatorData>::operator=[abi:sn180100]<WebCore::TextIndicatorData,void>(v3, v14);
        if ((v20 & 0x8000000000000) != 0)
        {
          uint64_t v13 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v13);
            WTF::fastFree((WTF *)v13, v7);
          }
        }
        BOOL v8 = v19;
        uint64_t v19 = 0;
        if (v8)
        {
          if (v8[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
          }
          else {
            --v8[2];
          }
        }
        uint64_t v9 = v18;
        int v18 = 0;
        if (v9)
        {
          if (v9[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
          }
          else {
            --v9[2];
          }
        }
        uint64_t v10 = v17;
        long long v17 = 0;
        if (v10)
        {
          if (v10[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
          }
          else {
            --v10[2];
          }
        }
        uint64_t v11 = v15;
        if (v15)
        {
          long long v15 = 0;
          int v16 = 0;
          WTF::fastFree(v11, v7);
        }
        uint64_t v12 = (WebCore::TextIndicator *)v21;
        uint64_t v21 = 0;
        if (v12) {
          WTF::RefCounted<WebCore::TextIndicator>::deref(v12);
        }
      }
    }
    return (WebCore::TextIndicatorData *)WTF::RefCounted<WebCore::Page>::deref(v5);
  }
  else
  {
    *(unsigned char *)this = 0;
    *((unsigned char *)this + 112) = 0;
  }
  return this;
}

void sub_198EFD084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  WTF::RefCounted<WebCore::Page>::deref(v22);
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebPage::addTextAnimationForAnimationID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a1 + 32;
  if (!*a5)
  {
    uint64_t v19 = a2;
    uint64_t v20 = a3;
    uint64_t v21 = a4;
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(a1 + 32);
    int v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v16 = 1866;
    *((void *)v16 + 1) = v15;
    *((void *)v16 + 66) = (char *)v16 + 16;
    *((void *)v16 + 67) = 512;
    *((void *)v16 + 68) = 0;
    *((void *)v16 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
    *((void *)v16 + 69) = 0;
    IPC::Encoder::encodeHeader(v16);
    v22[0] = v16;
    IPC::ArgumentCoder<std::tuple<WTF::UUID const&,WebCore::TextAnimationData const&,WebCore::TextIndicatorData const&>,void>::encode<IPC::Encoder,std::tuple<WTF::UUID const&,WebCore::TextAnimationData const&,WebCore::TextIndicatorData const&>,0ul,1ul,2ul>(v16, (uint64_t)&v19);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, v22, 0);
    uint64_t result = v22[0];
    v22[0] = 0;
    if (!result) {
      return result;
    }
LABEL_7:
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(a1 + 32);
  BOOL v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v8 = 1867;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v23 = v8;
  IPC::ArgumentCoder<std::tuple<WTF::UUID const&,WebCore::TextAnimationData const&,WebCore::TextIndicatorData const&>,void>::encode<IPC::Encoder,std::tuple<WTF::UUID const&,WebCore::TextAnimationData const&,WebCore::TextIndicatorData const&>,0ul,1ul,2ul>(v8, (uint64_t)&v19);
  uint64_t v9 = *a5;
  *a5 = 0;
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v10 = &unk_1EE9DD900;
  *((void *)v10 + 1) = v9;
  uint64_t v11 = (IPC::Encoder *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v10;
  v22[1] = v11;
  (*(void (**)(uint64_t, IPC::Encoder **, IPC::Encoder **, void))(*(void *)v5 + 40))(v5, &v23, v22, 0);
  uint64_t v13 = v22[0];
  v22[0] = 0;
  if (v13) {
    (*(void (**)(IPC::Encoder *))(*(void *)v13 + 8))(v13);
  }
  uint64_t result = v23;
  uint64_t v23 = 0;
  if (result) {
    goto LABEL_7;
  }
  return result;
}

void sub_198EFD400(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a12) {
    (*(void (**)(IPC::Encoder *))(*(void *)a12 + 8))(a12);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::TextAnimationController::addSourceTextAnimationForActiveWritingToolsSession(uint64_t a1, long long *a2, long long *a3, int a4, uint64_t *a5, uint64_t a6, uint64_t *a7)
{
  int v13 = *(unsigned __int8 *)(a1 + 136);
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v15 = *(void *)(a1 + 112);
    unint64_t v14 = *(void *)(a1 + 120);
    uint64_t v7 = *(WTF::StringImpl **)(a1 + 128);
    if (v7) {
      *(_DWORD *)v7 += 2;
    }
    unint64_t v16 = a5[1];
    uint64_t v17 = v14 + v15;
    if (v16 < v14)
    {
      unint64_t v14 = 0;
      uint64_t v17 = *a5;
    }
    unint64_t v18 = v16 - v14;
    if (a4) {
      uint64_t v19 = *a5;
    }
    else {
      uint64_t v19 = v17;
    }
    if (a4) {
      unint64_t v20 = a5[1];
    }
    else {
      unint64_t v20 = v18;
    }
  }
  else
  {
    uint64_t v19 = *a5;
    unint64_t v20 = a5[1];
  }
  WebKit::TextAnimationController::contextRangeForActiveWritingToolsSession(v57, *(void *)a1);
  if (!v57[32])
  {
    WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>::operator()(a7);
    goto LABEL_54;
  }
  WebCore::resolveCharacterRange();
  WebKit::TextAnimationController::createTextIndicatorForRange((WebCore::TextIndicatorData *)v47, (unsigned char *)a1, (uint64_t)v55);
  if (!v54) {
    goto LABEL_36;
  }
  if (!a4)
  {
    if (*(void *)a1)
    {
      uint64_t v26 = *(void *)(*(void *)a1 + 8);
      if (v26) {
        uint64_t v27 = v26 - 16;
      }
      else {
        uint64_t v27 = 0;
      }
    }
    else
    {
      uint64_t v27 = 0;
    }
    LOWORD(v43) = 513;
    long long v44 = 0uLL;
    long long v28 = *a3;
    long long v45 = *a2;
    long long v46 = v28;
    WebKit::WebPage::addTextAnimationForAnimationID(v27, (uint64_t)a2, (uint64_t)&v43, (uint64_t)v47, a7);
    int v29 = *(unsigned __int8 *)(a1 + 192);
    *(_OWORD *)(a1 + 176) = *a2;
    if (!v29) {
      *(unsigned char *)(a1 + 192) = 1;
    }
    char v30 = (void *)(a1 + 152);
    long long v43 = *a2;
    *(void *)&long long v44 = v19;
    *((void *)&v44 + 1) = v20;
    uint64_t v31 = *(unsigned int *)(a1 + 164);
    if (v31 == *(_DWORD *)(a1 + 160))
    {
      __int16 v32 = (long long *)WTF::Vector<WebKit::RemoteLayerTreeScrollingPerformanceData::ScrollingLogEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, v31 + 1, (unint64_t)&v43);
      uint64_t v33 = (_OWORD *)(*(void *)(a1 + 152) + 32 * *(unsigned int *)(a1 + 164));
      long long v34 = *v32;
      long long v35 = v32[1];
    }
    else
    {
      uint64_t v33 = (_OWORD *)(*v30 + 32 * v31);
      long long v34 = v43;
      long long v35 = v44;
    }
    _OWORD *v33 = v34;
    v33[1] = v35;
    ++*(_DWORD *)(a1 + 164);
    goto LABEL_37;
  }
  if (*(unsigned char *)(a1 + 192))
  {
    if (*(unsigned char *)(a1 + 216))
    {
      *(void *)&long long v43 = *(void *)(a1 + 208);
      BYTE8(v43) = 1;
      *(void *)(a1 + 208) = 0;
      *(unsigned char *)(a1 + 216) = 0;
      WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>::operator()((uint64_t *)&v43);
      if (BYTE8(v43))
      {
        uint64_t v22 = v43;
        *(void *)&long long v43 = 0;
        if (v22) {
          (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
        }
      }
      int v23 = *(unsigned __int8 *)(a1 + 216);
      uint64_t v24 = *a7;
      *a7 = 0;
      if (v23)
      {
        uint64_t v25 = *(void *)(a1 + 208);
        *(void *)(a1 + 208) = v24;
        if (v25) {
          (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
        }
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v24 = *a7;
      *a7 = 0;
    }
    *(void *)(a1 + 208) = v24;
    *(unsigned char *)(a1 + 216) = 1;
  }
  else
  {
LABEL_36:
    WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>::operator()(a7);
  }
LABEL_37:
  if (v54)
  {
    if ((v53 & 0x8000000000000) != 0)
    {
      int v42 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v42);
        WTF::fastFree((WTF *)v42, v21);
      }
    }
    uint64_t v36 = v52;
    uint64_t v52 = 0;
    if (v36)
    {
      if (v36[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v36 + 8))(v36);
      }
      else {
        --v36[2];
      }
    }
    uint64_t v37 = v51;
    uint64_t v51 = 0;
    if (v37)
    {
      if (v37[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v37 + 8))(v37);
      }
      else {
        --v37[2];
      }
    }
    uint64_t v38 = v50;
    uint64_t v50 = 0;
    if (v38)
    {
      if (v38[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v38 + 8))(v38);
      }
      else {
        --v38[2];
      }
    }
    uint64_t v39 = v48;
    if (v48)
    {
      int v48 = 0;
      int v49 = 0;
      WTF::fastFree(v39, v21);
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v56);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v55);
LABEL_54:
  uint64_t result = std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v57);
  if (v13 && v7)
  {
    if (*(_DWORD *)v7 == 2) {
      return WTF::StringImpl::destroy(v7, v41);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  return result;
}

void sub_198EFD8AC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,int a24,uint64_t a25,_DWORD *a26,_DWORD *a27,_DWORD *a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a10 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a31)
  {
    if ((a29 & 0x8000000000000) != 0)
    {
      long long v35 = (unsigned int *)(a29 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a29 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v35);
        WTF::fastFree((WTF *)v35, a2);
      }
    }
    if (a28)
    {
      if (a28[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a28 + 8))(a28);
      }
      else {
        --a28[2];
      }
    }
    if (a27)
    {
      if (a27[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a27 + 8))(a27);
      }
      else {
        --a27[2];
      }
    }
    if (a26)
    {
      if (a26[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a26 + 8))(a26);
      }
      else {
        --a26[2];
      }
    }
    if (a23) {
      WTF::fastFree(a23, a2);
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v33 - 136));
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v33 - 152));
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v33 - 120);
  if (v32 && v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, v36);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::TextAnimationController::addDestinationTextAnimationForActiveWritingToolsSession(uint64_t a1, const WTF::UUID *a2, const WTF::UUID *a3, uint64_t *a4, _DWORD **a5)
{
  if (*((unsigned char *)a4 + 16))
  {
    WebKit::TextAnimationController::contextRangeForActiveWritingToolsSession(v109, *(void *)a1);
    if (!v110)
    {
      if (*(void *)a1)
      {
        uint64_t v22 = *(void *)(*(void *)a1 + 8);
        if (v22) {
          int v23 = (WebKit::WebPage *)(v22 - 16);
        }
        else {
          int v23 = 0;
        }
      }
      else
      {
        int v23 = 0;
      }
      WebKit::WebPage::didEndPartialIntelligenceTextAnimation(v23);
      return (IPC::Encoder *)std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v109);
    }
    uint64_t v10 = WebKit::TextAnimationController::document((uint64_t)&v108, *(void *)a1);
    if (!v108)
    {
      if (*(void *)a1)
      {
        uint64_t v24 = *(void *)(*(void *)a1 + 8);
        if (v24) {
          uint64_t v25 = (WebKit::WebPage *)(v24 - 16);
        }
        else {
          uint64_t v25 = 0;
        }
      }
      else
      {
        uint64_t v25 = 0;
      }
      WebKit::WebPage::didEndPartialIntelligenceTextAnimation(v25);
LABEL_118:
      uint64_t v10 = v108;
      if (!v108) {
        return (IPC::Encoder *)std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v109);
      }
      if (*(_DWORD *)(v108 + 28) != 2)
      {
        *(_DWORD *)(v108 + 28) -= 2;
        return (IPC::Encoder *)std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v109);
      }
LABEL_123:
      if ((*(_WORD *)(v10 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
      }
      return (IPC::Encoder *)std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v109);
    }
    int v11 = *(unsigned __int8 *)(a1 + 136);
    if (*(unsigned char *)(a1 + 136))
    {
      uint64_t v13 = *(void *)(a1 + 112);
      unint64_t v12 = *(void *)(a1 + 120);
      unint64_t v14 = *(WTF::StringImpl **)(a1 + 128);
      if (v14) {
        *(_DWORD *)v14 += 2;
      }
      uint64_t v76 = v14;
      if (!*((unsigned char *)a4 + 16)) {
        goto LABEL_122;
      }
      unint64_t v15 = a4[1];
      uint64_t v16 = v12 + v13;
      if (v15 >= v12)
      {
        uint64_t v17 = v16;
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v17 = *a4;
      }
      unint64_t v18 = v15 - v12;
    }
    else
    {
      if (!*((unsigned char *)a4 + 16)) {
        goto LABEL_122;
      }
      uint64_t v17 = *a4;
      unint64_t v18 = a4[1];
    }
    if (v110)
    {
      int v77 = v11;
      uint64_t v10 = WebCore::resolveCharacterRange();
      if (v110)
      {
        WebCore::makeContainerOffsetPosition();
        WebCore::VisiblePosition::VisiblePosition();
        WebCore::endOfEditableContent();
        WebCore::makeBoundaryPoint();
        uint64_t v26 = v83[0];
        v83[0] = 0;
        if (v26)
        {
          if (*((_DWORD *)v26 + 7) == 2)
          {
            if ((*((_WORD *)v26 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v26);
            }
          }
          else
          {
            *((_DWORD *)v26 + 7) -= 2;
          }
        }
        uint64_t v27 = v78[0];
        v78[0] = 0;
        if (v27)
        {
          if (*((_DWORD *)v27 + 7) == 2)
          {
            if ((*((_WORD *)v27 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v27);
            }
          }
          else
          {
            *((_DWORD *)v27 + 7) -= 2;
          }
        }
        unint64_t v75 = v18;
        uint64_t v28 = v17;
        if (v103)
        {
          uint64_t v29 = v106;
          *(_DWORD *)(v106 + 28) += 2;
          int v98 = (void *)v29;
          int v99 = v107;
          char v100 = 1;
          uint64_t v30 = v101;
          *(_DWORD *)(v101 + 28) += 2;
          uint64_t v95 = v30;
          int v96 = v102;
          char v97 = 1;
          WebCore::SimpleRange::SimpleRange();
          v78[0] = v83[0];
          LODWORD(v78[1]) = v83[1];
          uint64_t v31 = v84;
          v83[0] = 0;
          uint64_t v84 = 0;
          *(void *)&long long v79 = v31;
          DWORD2(v79) = v85;
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v84);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v83);
          LOBYTE(v8WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 1;
          if (v97) {
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v95);
          }
          if (v100) {
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v98);
          }
          WTF::UUID::UUID((WTF::UUID *)v83);
          int v32 = v83[0];
          uint64_t v33 = v83[1];
          long long v34 = v78[0];
          *((_DWORD *)v78[0] + 7) += 2;
          int v35 = (int)v78[1];
          int v85 = (int)v78[1];
          uint64_t v36 = v79;
          *(_DWORD *)(v79 + 28) += 2;
          uint64_t v86 = v36;
          int v37 = DWORD2(v79);
          int v87 = DWORD2(v79);
          int v38 = *(unsigned __int8 *)(a1 + 96);
          *(_OWORD *)(a1 + 48) = *(_OWORD *)v83;
          if (v38)
          {
            uint64_t v84 = 0;
            uint64_t v39 = *(void *)(a1 + 64);
            *(void *)(a1 + 64) = v34;
            int v98 = (void *)v39;
            uint64_t v40 = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v98);
            *(_DWORD *)(a1 + 72) = v85;
            uint64_t v41 = v86;
            uint64_t v86 = 0;
            uint64_t v42 = *(void *)(a1 + 80);
            *(void *)(a1 + 8WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v41;
            int v98 = (void *)v42;
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v40);
            int v37 = v87;
          }
          else
          {
            *(void *)(a1 + 64) = v34;
            *(_DWORD *)(a1 + 72) = v35;
            uint64_t v84 = 0;
            uint64_t v86 = 0;
            *(void *)(a1 + 8WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v36;
            *(unsigned char *)(a1 + 96) = 1;
          }
          *(_DWORD *)(a1 + 88) = v37;
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v86);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v84);
          std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v78);
        }
        else
        {
          int v32 = 0;
          uint64_t v33 = 0;
        }
        WebKit::TextAnimationController::createTextIndicatorForRange((WebCore::TextIndicatorData *)v83, (unsigned char *)a1, (uint64_t)v105);
        uint64_t v43 = *(void *)a1;
        if (!v94)
        {
          if (v43)
          {
            uint64_t v58 = *(void *)(v43 + 8);
            if (v58) {
              uint64_t v59 = (WebKit::WebPage *)(v58 - 16);
            }
            else {
              uint64_t v59 = 0;
            }
          }
          else
          {
            uint64_t v59 = 0;
          }
          int v49 = v77;
          WebKit::WebPage::didEndPartialIntelligenceTextAnimation(v59);
LABEL_92:
          if (v94)
          {
            if ((v93 & 0x8000000000000) != 0)
            {
              int v74 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFLL);
              if (atomic_fetch_add((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
              {
                atomic_store(1u, v74);
                WTF::fastFree((WTF *)v74, v60);
              }
            }
            int v68 = v92;
            uint64_t v92 = 0;
            if (v68)
            {
              if (v68[2] == 1) {
                (*(void (**)(_DWORD *))(*(void *)v68 + 8))(v68);
              }
              else {
                --v68[2];
              }
            }
            __int16 v69 = v91;
            uint64_t v91 = 0;
            if (v69)
            {
              if (v69[2] == 1) {
                (*(void (**)(_DWORD *))(*(void *)v69 + 8))(v69);
              }
              else {
                --v69[2];
              }
            }
            unsigned int v70 = v90;
            __int16 v90 = 0;
            if (v70)
            {
              if (v70[2] == 1) {
                (*(void (**)(_DWORD *))(*(void *)v70 + 8))(v70);
              }
              else {
                --v70[2];
              }
            }
            uint64_t v71 = v88;
            if (v88)
            {
              unsigned int v88 = 0;
              int v89 = 0;
              WTF::fastFree(v71, v60);
            }
          }
          if (v103) {
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v101);
          }
          uint64_t v72 = v104;
          uint64_t v104 = 0;
          if (v72)
          {
            if (*(_DWORD *)(v72 + 28) == 2)
            {
              if ((*(_WORD *)(v72 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v72);
              }
            }
            else
            {
              *(_DWORD *)(v72 + 28) -= 2;
            }
          }
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v106);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v105);
          if (v49 && v76)
          {
            if (*(_DWORD *)v76 == 2) {
              WTF::StringImpl::destroy(v76, v73);
            }
            else {
              *(_DWORD *)v76 -= 2;
            }
          }
          goto LABEL_118;
        }
        if (v43)
        {
          uint64_t v44 = *(void *)(v43 + 8);
          if (v44) {
            uint64_t v45 = v44 - 16;
          }
          else {
            uint64_t v45 = 0;
          }
          long long v80 = *(_OWORD *)a2;
          uint64_t v46 = *(void *)(v43 + 8);
          if (v46) {
            uint64_t v43 = v46 - 16;
          }
          else {
            uint64_t v43 = 0;
          }
        }
        else
        {
          uint64_t v45 = 0;
          long long v80 = *(_OWORD *)a2;
        }
        LOWORD(v78[0]) = 514;
        *(void *)&long long v79 = v32;
        *((void *)&v79 + 1) = v33;
        unsigned int v47 = (atomic_uint **)(v43 + 24);
        uint64_t v81 = 0;
        uint64_t v82 = 0;
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v43 + 24), v43 + 16);
        int v48 = *v47;
        int v49 = v77;
        if (v48) {
          atomic_fetch_add(v48, 1u);
        }
        uint64_t v50 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint64_t v50 = &unk_1EE9DD810;
        v50[1] = v48;
        int v98 = v50;
        WebKit::WebPage::addTextAnimationForAnimationID(v45, (uint64_t)a3, (uint64_t)v78, (uint64_t)v83, (uint64_t *)&v98);
        if (v98) {
          (*(void (**)(void *))(*v98 + 8))(v98);
        }
        if (*(unsigned char *)(a1 + 192))
        {
          if (*(void *)(a1 + 184) == *((void *)a2 + 1) && *(void *)(a1 + 176) == *(void *)a2)
          {
            *(unsigned char *)(a1 + 192) = 0;
            if (*(unsigned char *)(a1 + 216))
            {
              v78[0] = *(WebCore::Node **)(a1 + 208);
              LOBYTE(v78[1]) = 1;
              *(void *)(a1 + 208) = 0;
              *(unsigned char *)(a1 + 216) = 0;
              WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>::operator()((uint64_t *)v78);
              if (LOBYTE(v78[1]))
              {
                uint64_t v53 = v78[0];
                v78[0] = 0;
                if (v53) {
                  (*(void (**)(WebCore::Node *))(*(void *)v53 + 8))(v53);
                }
              }
            }
          }
        }
        uint64_t v10 = a1 + 152;
        *(_OWORD *)uint64_t v78 = *(_OWORD *)a3;
        *(void *)&long long v79 = v28;
        *((void *)&v79 + 1) = v75;
        uint64_t v54 = *(unsigned int *)(a1 + 164);
        if (v54 == *(_DWORD *)(a1 + 160))
        {
          uint64_t v10 = WTF::Vector<WebKit::RemoteLayerTreeScrollingPerformanceData::ScrollingLogEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v54 + 1, (unint64_t)v78);
          int v55 = (_OWORD *)(*(void *)(a1 + 152) + 32 * *(unsigned int *)(a1 + 164));
          long long v56 = *(_OWORD *)v10;
          long long v57 = *(_OWORD *)(v10 + 16);
        }
        else
        {
          int v55 = (_OWORD *)(*(void *)v10 + 32 * v54);
          long long v56 = *(_OWORD *)v78;
          long long v57 = v79;
        }
        _OWORD *v55 = v56;
        v55[1] = v57;
        ++*(_DWORD *)(a1 + 164);
        if (*((unsigned char *)a4 + 16))
        {
          *(_OWORD *)uint64_t v78 = *(_OWORD *)a4;
          uint64_t v61 = *a5;
          if (*a5) {
            *v61 += 2;
          }
          int v62 = *(unsigned __int8 *)(a1 + 136);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)v78;
          if (v62)
          {
            uint64_t v63 = *(WTF::StringImpl **)(a1 + 128);
            *(void *)(a1 + 128) = v61;
            if (v63)
            {
              if (*(_DWORD *)v63 == 2) {
                WTF::StringImpl::destroy(v63, v51);
              }
              else {
                *(_DWORD *)v63 -= 2;
              }
            }
          }
          else
          {
            *(void *)(a1 + 128) = v61;
            *(unsigned char *)(a1 + 136) = 1;
          }
          uint64_t v64 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
          *(void *)uint64_t v64 = &unk_1EE9DD838;
          v78[0] = v64;
          WebKit::TextAnimationController::updateUnderlyingTextVisibilityForTextAnimationID((uint64_t *)a1, a2, 1, (uint64_t *)v78);
          __int16 v65 = v78[0];
          v78[0] = 0;
          if (v65) {
            (*(void (**)(WebCore::Node *))(*(void *)v65 + 8))(v65);
          }
          int v66 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
          *(void *)int v66 = &unk_1EE9DD838;
          v78[0] = v66;
          WebKit::TextAnimationController::updateUnderlyingTextVisibilityForTextAnimationID((uint64_t *)a1, a3, 0, (uint64_t *)v78);
          __int16 v67 = v78[0];
          v78[0] = 0;
          if (v67) {
            (*(void (**)(WebCore::Node *))(*(void *)v67 + 8))(v67);
          }
          goto LABEL_92;
        }
      }
    }
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
  if (*(void *)a1)
  {
    uint64_t v19 = *(void *)(*(void *)a1 + 8);
    if (v19) {
      unint64_t v20 = (WebKit::WebPage *)(v19 - 16);
    }
    else {
      unint64_t v20 = 0;
    }
  }
  else
  {
    unint64_t v20 = 0;
  }

  return WebKit::WebPage::didEndPartialIntelligenceTextAnimation(v20);
}

void sub_198EFE36C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, int a12, int a13, WebCore::Node *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WebCore::Node *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,WTF *a28,int a29,uint64_t a30,_DWORD *a31,_DWORD *a32,_DWORD *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,char a40)
{
  if (a15 && a14) {
    (*(void (**)(WebCore::Node *))(*(void *)a14 + 8))(a14);
  }
  if (a36)
  {
    if ((a34 & 0x8000000000000) != 0)
    {
      uint64_t v42 = (unsigned int *)(a34 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a34 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v42);
        WTF::fastFree((WTF *)v42, a2);
      }
    }
    if (a33)
    {
      if (a33[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a33 + 8))(a33);
      }
      else {
        --a33[2];
      }
    }
    if (a32)
    {
      if (a32[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a32 + 8))(a32);
      }
      else {
        --a32[2];
      }
    }
    if (a31)
    {
      if (a31[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a31 + 8))(a31);
      }
      else {
        --a31[2];
      }
    }
    if (a28) {
      WTF::fastFree(a28, a2);
    }
  }
  if (*(unsigned char *)(v40 - 192)) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v40 - 208));
  }
  uint64_t v43 = *(void *)(v40 - 184);
  *(void *)(v40 - 184) = 0;
  if (v43)
  {
    if (*(_DWORD *)(v43 + 28) == 2)
    {
      if ((*(_WORD *)(v43 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v43);
      }
    }
    else
    {
      *(_DWORD *)(v43 + 28) -= 2;
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v40 - 152));
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v40 - 168));
  if (a13 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v44);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  uint64_t v45 = *(void *)(v40 - 136);
  if (v45)
  {
    if (*(_DWORD *)(v45 + 28) == 2)
    {
      if ((*(_WORD *)(v45 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v45);
      }
    }
    else
    {
      *(_DWORD *)(v45 + 28) -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v40 - 128);
  _Unwind_Resume(a1);
}

void sub_198EFE6BC()
{
}

void sub_198EFE6C4()
{
}

IPC::Encoder *WebKit::WebPage::didEndPartialIntelligenceTextAnimation(WebKit::WebPage *this)
{
  long long v1 = (char *)this + 32;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1913;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v1 + 32))(v1, &v8, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void sub_198EFE7B4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::TextAnimationController::updateUnderlyingTextVisibilityForTextAnimationID(uint64_t *a1, const WTF::UUID *a2, int a3, uint64_t *a4)
{
  WebKit::TextAnimationController::document((uint64_t)&v12, *a1);
  uint64_t v8 = v12;
  if (v12)
  {
    if (a3)
    {
      uint64_t result = WebKit::TextAnimationController::removeTransparentMarkersForTextAnimationID((WebKit::TextAnimationController *)*a1, a2);
    }
    else
    {
      WebKit::TextAnimationController::contextRangeForTextAnimationID((WebKit::TextAnimationController *)v10, (const WTF::UUID *)a1, a2);
      if (!v11)
      {
        if (*a4) {
          WTF::CompletionHandler<void ()(void)>::operator()(a4);
        }
        uint64_t result = std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10);
        goto LABEL_16;
      }
      if (!*(void *)(v8 + 1536))
      {
        uint64_t result = WebCore::Document::ensureMarkers((WebCore::Document *)v8);
        if (!v11)
        {
          __break(1u);
          return result;
        }
      }
      WebCore::DocumentMarkerController::addTransparentContentMarker();
      uint64_t result = std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10);
    }
    if (*a4) {
      uint64_t result = WTF::CompletionHandler<void ()(void)>::operator()(a4);
    }
LABEL_16:
    if (*(_DWORD *)(v8 + 28) == 2)
    {
      if ((*(_WORD *)(v8 + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)v8);
      }
    }
    else
    {
      *(_DWORD *)(v8 + 28) -= 2;
    }
    return result;
  }

  return WTF::CompletionHandler<void ()(void)>::operator()(a4);
}

void sub_198EFE908(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 28) == 2)
  {
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
  }
  else
  {
    *(_DWORD *)(v1 + 28) -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebCore::TextIndicator *WebKit::TextAnimationController::saveSnapshotOfTextPlaceholderForAnimation(uint64_t a1)
{
  uint64_t result = (WebCore::TextIndicator *)WebCore::TextIndicator::createWithRange();
  if (v16)
  {
    WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v9, (const WebCore::TextIndicatorData *)(v16 + 8));
    std::optional<WebCore::TextIndicatorData>::operator=[abi:sn180100]<WebCore::TextIndicatorData,void>(a1 + 224, v9);
    if ((v15 & 0x8000000000000) != 0)
    {
      uint64_t v8 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v3);
      }
    }
    uint64_t v4 = v14;
    unint64_t v14 = 0;
    if (v4)
    {
      if (v4[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
      }
      else {
        --v4[2];
      }
    }
    uint64_t v5 = v13;
    uint64_t v13 = 0;
    if (v5)
    {
      if (v5[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
      }
      else {
        --v5[2];
      }
    }
    BOOL v6 = v12;
    uint64_t v12 = 0;
    if (v6)
    {
      if (v6[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
      else {
        --v6[2];
      }
    }
    uint64_t v7 = v10;
    if (v10)
    {
      uint64_t v10 = 0;
      int v11 = 0;
      WTF::fastFree(v7, v3);
    }
    uint64_t result = (WebCore::TextIndicator *)v16;
    uint64_t v16 = 0;
    if (result) {
      return WTF::RefCounted<WebCore::TextIndicator>::deref(result);
    }
  }
  return result;
}

void sub_198EFEAC8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22)
{
  if ((a22 & 0x8000000000000) != 0)
  {
    uint64_t v24 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, a2);
    }
  }
  if (a21)
  {
    if (a21[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a21 + 8))(a21);
    }
    else {
      --a21[2];
    }
  }
  if (a20)
  {
    if (a20[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
    }
    else {
      --a20[2];
    }
  }
  if (a19)
  {
    if (a19[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
    }
    else {
      --a19[2];
    }
  }
  if (a16) {
    WTF::fastFree(a16, a2);
  }
  uint64_t v25 = *(WebCore::TextIndicator **)(v22 - 24);
  *(void *)(v22 - 24) = 0;
  if (v25) {
    WTF::RefCounted<WebCore::TextIndicator>::deref(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<WebCore::TextIndicatorData>::operator=[abi:sn180100]<WebCore::TextIndicatorData,void>(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 112))
  {
    WebCore::TextIndicatorData::operator=(a1, a2);
  }
  else
  {
    WebCore::TextIndicatorData::TextIndicatorData(a1, a2);
    *(unsigned char *)(a1 + 112) = 1;
  }
  return a1;
}

WTF::StringImpl *WebKit::TextAnimationController::clearAnimationsForActiveWritingToolsSession(WebKit::TextAnimationController *this, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  long long v3 = *((_OWORD *)this + 2);
  long long v21 = *((_OWORD *)this + 1);
  long long v22 = v3;
  if ((_BYTE)v3) {
    WebKit::TextAnimationController::removeTransparentMarkersForTextAnimationID(*(WebKit::TextAnimationController **)this, (const WTF::UUID *)&v21);
  }
  uint64_t v4 = (WTF *)*((void *)this + 19);
  uint64_t v5 = *((unsigned int *)this + 41);
  *((void *)this + 19) = 0;
  *((void *)this + 2WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 32 * v5;
    do
    {
      long long v8 = *(_OWORD *)((char *)v4 + v6 + 16);
      long long v21 = *(_OWORD *)((char *)v4 + v6);
      long long v22 = v8;
      WebKit::TextAnimationController::removeTransparentMarkersForTextAnimationID(*(WebKit::TextAnimationController **)this, (const WTF::UUID *)&v21);
      v6 += 32;
    }
    while (v7 != v6);
    LOBYTE(v21) = 0;
    char v25 = 0;
    if (*((unsigned char *)this + 96))
    {
      long long v21 = *((_OWORD *)this + 3);
      uint64_t v9 = *((void *)this + 8);
      *(_DWORD *)(v9 + 28) += 2;
      *(void *)&long long v22 = v9;
      DWORD2(v22) = *((_DWORD *)this + 18);
      uint64_t v10 = *((void *)this + 10);
      *(_DWORD *)(v10 + 28) += 2;
      uint64_t v23 = v10;
      int v24 = *((_DWORD *)this + 22);
      char v25 = 1;
      WebKit::TextAnimationController::removeTransparentMarkersForTextAnimationID(*(WebKit::TextAnimationController **)this, (const WTF::UUID *)&v21);
    }
    std::__optional_destruct_base<WebKit::TextAnimationUnanimatedRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21);
  }
  if (v4) {
    WTF::fastFree(v4, a2);
  }
  uint64_t result = (WTF::StringImpl *)WebKit::TextAnimationController::removeInitialTextAnimationForActiveWritingToolsSession((uint64_t *)this);
  uint64_t v13 = (WTF *)*((void *)this + 19);
  uint64_t v14 = *((unsigned int *)this + 41);
  *((void *)this + 19) = 0;
  *((void *)this + 2WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  if (v14)
  {
    uint64_t v15 = 32 * v14;
    uint64_t v16 = v13;
    do
    {
      long long v17 = *((_OWORD *)v16 + 1);
      long long v21 = *(_OWORD *)v16;
      long long v22 = v17;
      uint64_t v18 = *(void *)this;
      if (*(void *)this)
      {
        uint64_t v19 = *(void *)(v18 + 8);
        if (v19) {
          uint64_t v18 = v19 - 16;
        }
        else {
          uint64_t v18 = 0;
        }
      }
      unint64_t v20 = &v21;
      uint64_t result = (WTF::StringImpl *)IPC::MessageSender::send<Messages::WebPageProxy::RemoveTextAnimationForAnimationID>(v18 + 32, (uint64_t **)&v20);
      uint64_t v16 = (WTF *)((char *)v16 + 32);
      v15 -= 32;
    }
    while (v15);
  }
  if (*((unsigned char *)this + 216))
  {
    *(void *)&long long v21 = *((void *)this + 26);
    BYTE8(v21) = 1;
    *((void *)this + 26) = 0;
    *((unsigned char *)this + 216) = 0;
    uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>::operator()((uint64_t *)&v21);
    if (BYTE8(v21))
    {
      uint64_t result = (WTF::StringImpl *)v21;
      *(void *)&long long v21 = 0;
      if (result) {
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
      }
    }
  }
  if (*((unsigned char *)this + 136))
  {
    uint64_t result = (WTF::StringImpl *)*((void *)this + 16);
    *((void *)this + 16) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    *((unsigned char *)this + 136) = 0;
  }
  if (*((unsigned char *)this + 96))
  {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)this + 10);
    uint64_t result = (WTF::StringImpl *)WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)this + 8);
    *((unsigned char *)this + 96) = 0;
  }
  if (*((unsigned char *)this + 192)) {
    *((unsigned char *)this + 192) = 0;
  }
  if (v13) {
    return (WTF::StringImpl *)WTF::fastFree(v13, v12);
  }
  return result;
}

void sub_198EFEEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WebKit::TextAnimationUnanimatedRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  if (v3) {
    WTF::fastFree(v3, v5);
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebCookieCache::inMemoryStorageSession(WebKit::WebCookieCache *this)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    return result;
  }
  v15[0] = "WebKitInProcessStorage-";
  v15[1] = (CFTypeRef)24;
  LODWORD(cf) = getpid();
  uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,int>((uint64_t *)v15, (unsigned int *)&cf, &v14);
  if (!v14)
  {
    __break(0xC471u);
LABEL_23:
    __break(1u);
    return result;
  }
  {
    int v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WTF::String::createCFString((uint64_t *)&cf, (WTF::String *)&v14);
  WebCore::createPrivateStorageSession();
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
  CFTypeRef cf = (CFTypeRef)_CFURLStorageSessionCopyCookieStorage();
  {
    uint64_t v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v12);
  }
  uint64_t result = WebKit::WebProcess::singleton(void)::process;
  if (!*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 672)) {
    goto LABEL_23;
  }
  uint64_t v4 = *(void *)(WebKit::WebProcess::singleton(void)::process + 664);
  uint64_t v5 = WTF::fastMalloc((WTF *)0x128);
  MEMORY[0x199735F30](v5, v4, v15, &cf, 1);
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = v5;
  if (v7) {
    WebCore::NetworkStorageSession::operator delete(v7, 0x128uLL);
  }
  CFTypeRef v8 = cf;
  CFTypeRef cf = 0;
  if (v8) {
    CFRelease(v8);
  }
  CFTypeRef v9 = v15[0];
  v15[0] = 0;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = v14;
  uint64_t v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v6);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  return *((void *)this + 3);
}

void sub_198EFF0D4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF::StringImpl *a10, CFTypeRef a11)
{
  WTF::fastFree(v11, a2);
  if (cf) {
    CFRelease(cf);
  }
  if (a11) {
    CFRelease(a11);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v13);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebCookieJar::cookiesInPartitionedCookieStorage@<X0>(WebCore::Document *this@<X1>, WTF::URL *a2@<X2>, uint64_t a3@<X0>, unsigned char *a4@<X3>, WTF::StringImpl **a5@<X8>)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (WebCore::Quirks *)*((void *)this + 90);
  if (!v10) {
    uint64_t v10 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(this);
  }
  uint64_t result = WebCore::Quirks::shouldUseEphemeralPartitionedStorageForDOMCookies(v10, a2);
  if ((result & 1) == 0 || !*(void *)(a3 + 88))
  {
    *a5 = 0;
    return result;
  }
  uint64_t v12 = (WTF::StringImpl *)*((void *)this + 130);
  if (v12) {
    *(_DWORD *)v12 += 2;
  }
  int v85 = v12;
  long long v86 = *(_OWORD *)((char *)this + 1048);
  long long v87 = *(_OWORD *)((char *)this + 1064);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v78, (const WTF::URL *)&v85);
  uint64_t v14 = v78;
  if (!v78) {
    goto LABEL_74;
  }
  int v15 = *(_DWORD *)v78;
  *(_DWORD *)v78 += 2;
  uint64_t v78 = 0;
  if (v15) {
    *(_DWORD *)uint64_t v14 = v15;
  }
  else {
    WTF::StringImpl::destroy(v14, v13);
  }
  if (!*((_DWORD *)v14 + 1))
  {
LABEL_74:
    *a5 = 0;
    goto LABEL_83;
  }
  __int16 v67 = v14;
  uint64_t v78 = 0;
  long long v79 = &v78;
  uint64_t v80 = 0x3812000000;
  uint64_t v81 = __Block_byref_object_copy__11;
  uint64_t v82 = __Block_byref_object_dispose__11;
  int v83 = &unk_19964AFC1;
  CFTypeRef cf = 0;
  uint64_t v16 = *(void **)(a3 + 88);
  uint64_t v17 = WTF::URL::operator NSURL *();
  uint64_t v18 = WTF::URL::operator NSURL *();
  uint64_t v19 = WTF::StringImpl::operator NSString *();
  WebKit::policyProperties(&v73, a4, (uint64_t)a2);
  unint64_t v20 = v73;
  v77[0] = MEMORY[0x1E4F143A8];
  v77[1] = 3221225472;
  v77[2] = ___ZNK6WebKit12WebCookieJar33cookiesInPartitionedCookieStorageERKN7WebCore8DocumentERKN3WTF3URLERKNS1_12SameSiteInfoE_block_invoke;
  v77[3] = &unk_1E58139C8;
  v77[4] = &v78;
  [v16 _getCookiesForURL:v17 mainDocumentURL:v18 partition:v19 policyProperties:v73 completionHandler:v77];
  if (v20) {
    CFRelease(v20);
  }
  long long v21 = v79[6];
  if (!v21 || ![(WTF::StringImpl *)v21 count])
  {
    *a5 = 0;
    goto LABEL_80;
  }
  int v66 = a5;
  uint64_t v73 = 0;
  int v74 = 0;
  int v75 = 0;
  char v76 = 1;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  id obj = v79[6];
  uint64_t v23 = [(WTF::StringImpl *)obj countByEnumeratingWithState:&v69 objects:v88 count:16];
  if (!v23) {
    goto LABEL_67;
  }
  uint64_t v24 = *(void *)v70;
  do
  {
    uint64_t v25 = 0;
    do
    {
      if (*(void *)v70 != v24) {
        objc_enumerationMutation(obj);
      }
      uint64_t v26 = *(void **)(*((void *)&v69 + 1) + 8 * v25);
      if (objc_msgSend((id)objc_msgSend(v26, "name"), "length") && (objc_msgSend(v26, "isHTTPOnly") & 1) == 0)
      {
        int v27 = v75;
        CFStringRef v28 = (const __CFString *)[v26 name];
        uint64_t v29 = [v26 value];
        CFStringRef v30 = (const __CFString *)v29;
        BOOL v31 = v27 != 0;
        if (v27) {
          int v32 = "; ";
        }
        else {
          int v32 = "";
        }
        int v33 = v75;
        if (v28)
        {
          int Length = CFStringGetLength(v28);
          if (v30)
          {
LABEL_29:
            int v35 = CFStringGetLength(v30);
            int v36 = v35 + 1;
            if (v35 == -1) {
              int v36 = -1;
            }
            goto LABEL_31;
          }
        }
        else
        {
          int Length = 0;
          if (v29) {
            goto LABEL_29;
          }
        }
        int v36 = 1;
LABEL_31:
        BOOL v37 = __CFADD__(v36, Length);
        int v38 = v36 + Length;
        if (v37) {
          int v38 = -1;
        }
        uint64_t v39 = 2 * (v27 != 0);
        BOOL v37 = __CFADD__(v38, 2 * v31);
        int v40 = v38 + 2 * v31;
        if (v37) {
          int v40 = -1;
        }
        BOOL v37 = __CFADD__(v40, v33);
        uint64_t v41 = (v40 + v33);
        if (v37) {
          uint64_t v41 = 0xFFFFFFFFLL;
        }
        uint64_t v42 = v74;
        if ((v74 || (uint64_t v42 = v73) != 0) && (*((unsigned char *)v42 + 16) & 4) == 0
          || v28 && !CFStringGetCStringPtr(v28, 0x201u)
          || v30 && !CFStringGetCStringPtr(v30, 0x201u))
        {
          uint64_t v52 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v73);
          if (v52)
          {
            if (v27)
            {
              uint64_t v53 = 4 * (v27 != 0);
              uint64_t v54 = (_WORD *)v52;
              int v55 = "; ";
              do
              {
                __int16 v56 = *(unsigned __int8 *)v55++;
                *v54++ = v56;
                v53 -= 2;
              }
              while (v53);
            }
            long long v57 = (UniChar *)(v52 + 4 * (v27 != 0));
            if (v28)
            {
              v90.length = CFStringGetLength(v28);
              v90.location = 0;
              CFStringGetCharacters(v28, v90, v57);
              uint64_t v58 = CFStringGetLength(v28);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v59 = &v57[v58];
            UniChar *v59 = 61;
            if (v30)
            {
              v91.length = CFStringGetLength(v30);
              v91.location = 0;
              CFStringGetCharacters(v30, v91, v59 + 1);
            }
          }
        }
        else
        {
          uint64_t v43 = (char *)MEMORY[0x19972DE60](&v73, v41);
          uint64_t v44 = v43;
          if (v43)
          {
            if (v39) {
              memcpy(v43, v32, 2 * (v27 != 0));
            }
            uint64_t v45 = &v44[v39];
            if (v28)
            {
              CStringPtr = CFStringGetCStringPtr(v28, 0x201u);
              size_t v47 = CFStringGetLength(v28);
              memcpy(v45, CStringPtr, v47);
              uint64_t v48 = CFStringGetLength(v28);
            }
            else
            {
              uint64_t v48 = 0;
            }
            int v49 = &v45[v48];
            v45[v48] = 61;
            if (v30)
            {
              uint64_t v50 = CFStringGetCStringPtr(v30, 0x201u);
              size_t v51 = CFStringGetLength(v30);
              memcpy(v49 + 1, v50, v51);
            }
          }
        }
      }
      ++v25;
    }
    while (v25 != v23);
    uint64_t v60 = [(WTF::StringImpl *)obj countByEnumeratingWithState:&v69 objects:v88 count:16];
    uint64_t v23 = v60;
  }
  while (v60);
LABEL_67:
  uint64_t v61 = v73;
  if (v73)
  {
    int v62 = v66;
LABEL_69:
    *(_DWORD *)v61 += 2;
  }
  else
  {
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v73);
    int v62 = v66;
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v73);
    uint64_t v61 = v73;
    if (v73) {
      goto LABEL_69;
    }
  }
  WTF::StringImpl *v62 = v61;
  uint64_t v63 = v74;
  int v74 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2) {
      WTF::StringImpl::destroy(v63, v22);
    }
    else {
      *(_DWORD *)v63 -= 2;
    }
  }
  uint64_t v64 = v73;
  uint64_t v73 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2) {
      WTF::StringImpl::destroy(v64, v22);
    }
    else {
      *(_DWORD *)v64 -= 2;
    }
  }
LABEL_80:
  _Block_object_dispose(&v78, 8);
  CFTypeRef v65 = cf;
  CFTypeRef cf = 0;
  if (v65) {
    CFRelease(v65);
  }
  uint64_t v14 = v67;
LABEL_83:
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t result = (uint64_t)v85;
  int v85 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198EFF774(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,WTF::StringImpl *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,CFTypeRef cf,WTF::StringImpl *a37)
{
  if (a23)
  {
    if (*(_DWORD *)a23 == 2) {
      WTF::StringImpl::destroy(a23, a2);
    }
    else {
      *(_DWORD *)a23 -= 2;
    }
  }
  if (a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, a2);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }
  _Block_object_dispose(&a30, 8);
  CFTypeRef v39 = cf;
  CFTypeRef cf = 0;
  if (v39) {
    CFRelease(v39);
  }
  if (*(_DWORD *)a11 == 2) {
    WTF::StringImpl::destroy(a11, v38);
  }
  else {
    *(_DWORD *)a11 -= 2;
  }
  int v40 = a37;
  a37 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2) {
      WTF::StringImpl::destroy(v40, v38);
    }
    else {
      *(_DWORD *)v40 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

CFTypeRef WebKit::policyProperties(void *a1, unsigned char *a2, uint64_t a3)
{
  void v10[2] = *MEMORY[0x1E4F143B8];
  if ((_MergedGlobals_97 & 1) == 0)
  {
    uint64_t v8 = a3;
    qword_1EB359D28 = [objc_alloc(MEMORY[0x1E4F1CB10]) initWithString:&stru_1EEA10550];
    _MergedGlobals_97 = 1;
  }
  uint64_t v5 = WTF::URL::operator NSURL *();
  if (*a2) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = qword_1EB359D28;
  }
  v10[1] = objc_msgSend(NSNumber, "numberWithBool:", a2[1], v8, @"_kCFHTTPCookiePolicyPropertySiteForCookies", @"_kCFHTTPCookiePolicyPropertyIsTopLevelNavigation", v6);
  CFTypeRef result = (CFTypeRef)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:2];
  *a1 = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void ___ZNK6WebKit12WebCookieJar33cookiesInPartitionedCookieStorageERKN7WebCore8DocumentERKN3WTF3URLERKNS1_12SameSiteInfoE_block_invoke(uint64_t a1, CFTypeRef cf)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v4 = *(const void **)(v3 + 48);
  *(void *)(v3 + 48) = cf;
  if (v4)
  {
    CFRelease(v4);
  }
}

WTF::StringImpl *WebKit::WebCookieJar::setCookiesInPartitionedCookieStorage(uint64_t a1, WebCore::Document *this, WTF::URL *a3, unsigned char *a4, uint64_t a5)
{
  v33[1] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (WebCore::Quirks *)*((void *)this + 90);
  if (!v10) {
    uint64_t v10 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(this);
  }
  CFTypeRef result = (WTF::StringImpl *)WebCore::Quirks::shouldUseEphemeralPartitionedStorageForDOMCookies(v10, a3);
  if (result && *(void *)a5 && *(_DWORD *)(*(void *)a5 + 4))
  {
    uint64_t v12 = (WTF::StringImpl *)*((void *)this + 130);
    if (v12) {
      *(_DWORD *)v12 += 2;
    }
    CFStringRef v30 = v12;
    long long v13 = *(_OWORD *)((char *)this + 1064);
    long long v31 = *(_OWORD *)((char *)this + 1048);
    long long v32 = v13;
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v29, (const WTF::URL *)&v30);
    int v15 = v29;
    if (v29)
    {
      int v16 = *(_DWORD *)v29;
      *(_DWORD *)v29 += 2;
      uint64_t v29 = 0;
      if (v16) {
        *(_DWORD *)int v15 = v16;
      }
      else {
        WTF::StringImpl::destroy(v15, v14);
      }
      if (*((_DWORD *)v15 + 1))
      {
        uint64_t v17 = (void *)MEMORY[0x1E4F18D28];
        uint64_t v18 = *(void *)a5 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
        uint64_t v19 = WTF::URL::operator NSURL *();
        unint64_t v20 = (void *)[v17 _cookieForSetCookieString:v18 forURL:v19 partition:WTF::StringImpl::operator NSString *()];
        long long v21 = v20;
        if (v20)
        {
          if (objc_msgSend((id)objc_msgSend(v20, "name"), "length") && (objc_msgSend(v21, "isHTTPOnly") & 1) == 0)
          {
            long long v22 = *(void **)(a1 + 88);
            if (!v22)
            {
              uint64_t v23 = (void *)[objc_alloc(MEMORY[0x1E4F18D30]) _initWithIdentifier:@"WebCookieJar" private:1];
              uint64_t v24 = *(const void **)(a1 + 88);
              *(void *)(a1 + 88) = v23;
              if (v24)
              {
                CFRelease(v24);
                uint64_t v23 = *(void **)(a1 + 88);
              }
              objc_msgSend(v23, "setCookieAcceptPolicy:", 0, v29);
              long long v22 = *(void **)(a1 + 88);
            }
            v33[0] = v21;
            uint64_t v25 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v33, 1, v29);
            uint64_t v26 = WTF::URL::operator NSURL *();
            uint64_t v27 = WTF::URL::operator NSURL *();
            WebKit::policyProperties(&v29, a4, (uint64_t)a3);
            CFStringRef v28 = v29;
            [v22 _setCookies:v25 forURL:v26 mainDocumentURL:v27 policyProperties:v29];
            if (v28) {
              CFRelease(v28);
            }
          }
        }
      }
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    CFTypeRef result = v30;
    CFStringRef v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198EFFC68(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v11) {
    CFRelease(v11);
  }
  if (*(_DWORD *)v10 == 2) {
    WTF::StringImpl::destroy(v10, a2);
  }
  else {
    *(_DWORD *)v10 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebPage::requestActiveNowPlayingSessionInfo(WebCore::PlatformMediaSessionManager *a1, uint64_t *a2)
{
  uint64_t v3 = WebCore::PlatformMediaSessionManager::sharedManagerIfExists(a1);
  if (v3)
  {
    uint64_t v4 = v3;
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(void *)v3 + 56))(v13);
    if (v21)
    {
      CFTypeRef result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 104))(v4);
      if (v21)
      {
        WTF::CompletionHandler<void ()(BOOL,WebCore::NowPlayingInfo &&)>::operator()(a2);
        return (WTF::StringImpl *)std::__optional_destruct_base<WebCore::NowPlayingInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v7);
      }
      else
      {
        __break(1u);
      }
      return result;
    }
    std::__optional_destruct_base<WebCore::NowPlayingInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v5);
  }
  v15[24] = 0;
  *(_OWORD *)long long v13 = 0u;
  *(_OWORD *)uint64_t v14 = 0u;
  v15[0] = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0x3FF0000000000000;
  char v19 = 0;
  v20[0] = 0;
  *(_DWORD *)((char *)v20 + 7) = 0;
  WTF::CompletionHandler<void ()(BOOL,WebCore::NowPlayingInfo &&)>::operator()(a2);
  std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v8);
  uint64_t v10 = v14[1];
  v14[1] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  int v11 = v14[0];
  v14[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = v13[1];
  v13[1] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v9);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  CFTypeRef result = v13[0];
  v13[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198EFFE68(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100](v12, a2);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v14);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v14);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v14);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v14);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::shouldUsePDFPlugin(uint64_t a1, WebCore::MIMETypeRegistry *a2)
{
  if ((*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 112) + 721) & 8) == 0) {
    return 0;
  }
  if (WebCore::MIMETypeRegistry::isPDFMIMEType(a2, a2)) {
    return 1;
  }
  if (*(void *)a2 && *(_DWORD *)(*(void *)a2 + 4)) {
    return 0;
  }
  return WTF::StringView::endsWithIgnoringASCIICase();
}

uint64_t WebKit::WebPage::performDictionaryLookupAtLocation(WebCore::Page **this, const WebCore::FloatPoint *a2)
{
  uint64_t result = WebKit::WebPage::mainFramePlugIn((WebKit::WebPage *)this, a2);
  if (!result
    || (uint64_t result = WebKit::PluginView::performDictionaryLookupAtLocation((WebKit::PluginView *)result, a2),
        (result & 1) == 0))
  {
    uint64_t v5 = *((void *)this[6] + 20);
    if (v5 && *(unsigned char *)(v5 + 144) == 0)
    {
      uint64_t v7 = *(WebCore::ScrollView **)(v5 + 288);
      float v8 = roundf(*(float *)a2);
      uint64_t v9 = 0x7FFFFFFFLL;
      uint64_t v10 = (int)v8;
      if (v8 <= -2147500000.0) {
        uint64_t v10 = 0x80000000;
      }
      if (v8 < 2147500000.0) {
        uint64_t v9 = v10;
      }
      float v11 = roundf(*((float *)a2 + 1));
      uint64_t v12 = 0x7FFFFFFF00000000;
      unint64_t v13 = 0x8000000000000000;
      if (v11 > -2147500000.0) {
        unint64_t v13 = (unint64_t)(int)v11 << 32;
      }
      if (v11 < 2147500000.0) {
        uint64_t v12 = v13;
      }
      uint64_t v23 = v12 | v9;
      int32x2_t v14 = (int32x2_t)WebCore::ScrollView::windowToContents(v7, (const WebCore::IntPoint *)&v23);
      int8x8_t v15 = (int8x8_t)vcgt_s32(v14, (int32x2_t)0xFE000000FE000000);
      v21[0] = (WebCore::FocusController *)vorr_s8((int8x8_t)(*(void *)&v15 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v14), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v14, 6uLL)), v15));
      WebCore::EventHandler::hitTestResultAtPoint();
      if (v25)
      {
        uint64_t v17 = *(void *)(*(void *)(*(void *)(v25 + 48) + 8) + 544);
        if (!v17) {
          return MEMORY[0x199731400](v24);
        }
        uint64_t v18 = *(void *)(v17 + 8);
        if (!v18) {
          return MEMORY[0x199731400](v24);
        }
        atomic_fetch_add((atomic_uint *volatile)(v18 + 8), 1u);
      }
      else
      {
        WebCore::Page::checkedFocusController((uint64_t *)v21, this[6]);
        uint64_t v19 = WebCore::FocusController::focusedOrMainFrame(v21[0]);
        uint64_t v18 = v19;
        if (v19) {
          atomic_fetch_add((atomic_uint *volatile)(v19 + 8), 1u);
        }
        unint64_t v20 = v21[0];
        v21[0] = 0;
        if (v20)
        {
          if (!*(_DWORD *)v20)
          {
            uint64_t result = 286;
            __break(0xC471u);
            return result;
          }
          --*(_DWORD *)v20;
        }
        if (!v19) {
          return MEMORY[0x199731400](v24);
        }
      }
      WebCore::DictionaryLookup::rangeAtHitTestResult((uint64_t *)v21, (WebCore::DictionaryLookup *)v24, v16);
      if (v22) {
        WebKit::WebPage::performDictionaryLookupForRange((WebKit::WebPage *)this, v18, (uint64_t)v21);
      }
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v21);
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v18 + 8));
      return MEMORY[0x199731400](v24);
    }
  }
  return result;
}

void sub_198F00188(_Unwind_Exception *a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (a3)
  {
    if (!*a3)
    {
      __break(0xC471u);
      JUMPOUT(0x198F001C8);
    }
    --*a3;
  }
  MEMORY[0x199731400](va);
  _Unwind_Resume(a1);
}

WTF *WebKit::WebPage::performDictionaryLookupForRange(WebKit::WebPage *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = WebCore::Document::editor(*(WebCore::Document **)(a2 + 296));
  *(unsigned char *)(v6 + 488) = 1;
  WebCore::plainText();
  float v8 = v56[0];
  if (!v56[0]) {
    goto LABEL_26;
  }
  uint64_t v9 = (unsigned __int16 *)*((void *)v56[0] + 1);
  uint64_t v10 = *((unsigned int *)v56[0] + 1);
  if ((*((unsigned char *)v56[0] + 16) & 4) != 0)
  {
    if (v10)
    {
      do
      {
        int v16 = *(unsigned __int8 *)v9;
        uint64_t v9 = (unsigned __int16 *)((char *)v9 + 1);
        int v15 = v16;
        if ((v16 - 9) >= 5 && v15 != 32)
        {
          v56[0] = 0;
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v7);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
LABEL_44:
          WebCore::RenderObject::absoluteTextQuads();
          if (v66)
          {
            uint64_t v48 = 0;
            long long v46 = 0u;
            *(_OWORD *)size_t v47 = 0u;
            long long v44 = 0u;
            long long v45 = 0u;
            int v49 = 1065353216;
            __int16 v53 = 0;
            long long v50 = 0u;
            long long v51 = 0u;
            char v52 = 0;
            uint64_t result = (WTF *)WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v54);
            if (!v66)
            {
              __break(0xC471u);
              return result;
            }
            char v22 = *(WebCore::ScrollView **)(a2 + 288);
            WebCore::FloatQuad::boundingBox(v64);
            v56[0] = (WTF::StringImpl *)__PAIR64__(v24, v23);
            v56[1] = (WTF::StringImpl *)__PAIR64__(v26, v25);
            v63[0] = WebCore::enclosingIntRect((WebCore *)v56, v27);
            v63[1] = v28;
            uint64_t v29 = WebCore::ScrollView::contentsToWindow(v22, (const WebCore::IntRect *)v63);
            uint64_t v30 = *(void *)(*(void *)a3 + 72) & 0xFFFFFFFFFFFFLL;
            if (v30)
            {
              if ((*(unsigned char *)((*(void *)(*(void *)a3 + 72) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              {
                uint64_t v30 = *(void *)((*(void *)(*(void *)a3 + 72) & 0xFFFFFFFFFFFFLL) + 0x20);
                if (v30) {
                  uint64_t v30 = *(void *)(v30 + 8);
                }
              }
              int v31 = *(_DWORD *)(WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)(v30 + 80)) + 44);
              double v33 = WebKit::WebPage::totalScaleFactor(a1, v32) / *(float *)(*((void *)a1 + 6) + 368) * (double)v31;
            }
            else
            {
              double v33 = 0.0;
            }
            float v35 = v33;
            *(float *)&long long v44 = (float)(int)v29;
            *((float *)&v44 + 1) = (float)SHIDWORD(v29) + v35;
            WebCore::ImageOverlay::isInsideOverlay();
            WebCore::TextIndicator::createWithRange();
            if (v63[0])
            {
              WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v56, (const WebCore::TextIndicatorData *)(v63[0] + 8));
              WebCore::TextIndicatorData::operator=((uint64_t)&v44 + 8, (long long *)v56);
              if ((v62 & 0x8000000000000) != 0)
              {
                uint64_t v43 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFLL);
                if (atomic_fetch_add((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, v43);
                  WTF::fastFree((WTF *)v43, v34);
                }
              }
              int v36 = v61;
              uint64_t v61 = 0;
              if (v36)
              {
                if (v36[2] == 1) {
                  (*(void (**)(_DWORD *))(*(void *)v36 + 8))(v36);
                }
                else {
                  --v36[2];
                }
              }
              BOOL v37 = v60;
              uint64_t v60 = 0;
              if (v37)
              {
                if (v37[2] == 1) {
                  (*(void (**)(_DWORD *))(*(void *)v37 + 8))(v37);
                }
                else {
                  --v37[2];
                }
              }
              int v38 = v59;
              uint64_t v59 = 0;
              if (v38)
              {
                if (v38[2] == 1) {
                  (*(void (**)(_DWORD *))(*(void *)v38 + 8))(v38);
                }
                else {
                  --v38[2];
                }
              }
              CFTypeRef v39 = v57;
              if (v57)
              {
                long long v57 = 0;
                int v58 = 0;
                WTF::fastFree(v39, v34);
              }
              *(unsigned char *)(v6 + 488) = 0;
              int v40 = (WebCore::TextIndicator *)v63[0];
              v63[0] = 0;
              if (v40) {
                WTF::RefCounted<WebCore::TextIndicator>::deref(v40);
              }
            }
            else
            {
              *(unsigned char *)(v6 + 488) = 0;
            }
          }
          else
          {
            *(unsigned char *)(v6 + 488) = 0;
            long long v44 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            *(_OWORD *)size_t v47 = 0u;
            uint64_t v48 = 0;
            int v49 = 1065353216;
            __int16 v53 = 0;
            long long v50 = 0u;
            long long v51 = 0u;
            char v52 = 0;
            WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v54);
          }
          uint64_t v41 = v64;
          if (v64)
          {
            uint64_t v64 = 0;
            int v65 = 0;
            WTF::fastFree(v41, v34);
          }
          goto LABEL_27;
        }
        --v10;
      }
      while (v10);
    }
LABEL_18:
    v56[0] = 0;
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
    goto LABEL_26;
  }
  if (!v10) {
    goto LABEL_18;
  }
  while (1)
  {
    unsigned int v12 = *v9++;
    unsigned int v11 = v12;
    if (v12 <= 0xFF) {
      break;
    }
    if (MEMORY[0x1997423A0]() != 9) {
      goto LABEL_21;
    }
LABEL_9:
    if (!--v10)
    {
      unint64_t v13 = v56[0];
      v56[0] = 0;
      char v14 = 1;
      goto LABEL_22;
    }
  }
  if (v11 - 9 < 5 || v11 == 32) {
    goto LABEL_9;
  }
LABEL_21:
  unint64_t v13 = v56[0];
  v56[0] = 0;
  char v14 = 0;
LABEL_22:
  if (*(_DWORD *)v13 == 2)
  {
    WTF::StringImpl::destroy(v13, v7);
    if ((v14 & 1) == 0) {
      goto LABEL_44;
    }
  }
  else
  {
    *(_DWORD *)v13 -= 2;
    if ((v14 & 1) == 0) {
      goto LABEL_44;
    }
  }
LABEL_26:
  *(unsigned char *)(v6 + 488) = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  *(_OWORD *)size_t v47 = 0u;
  uint64_t v48 = 0;
  int v49 = 1065353216;
  __int16 v53 = 0;
  long long v50 = 0u;
  long long v51 = 0u;
  char v52 = 0;
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v54);
LABEL_27:
  int v55 = &v44;
  IPC::MessageSender::send<Messages::WebPageProxy::DidPerformDictionaryLookup>((uint64_t)a1 + 32, (uint64_t *)&v55);
  MEMORY[0x199732DE0](v54);
  if ((*((void *)&v51 + 1) & 0x8000000000000) != 0)
  {
    uint64_t v42 = (unsigned int *)(*((void *)&v51 + 1) & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(*((void *)&v51 + 1) & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v42);
      WTF::fastFree((WTF *)v42, v17);
    }
  }
  uint64_t v18 = (_DWORD *)v51;
  *(void *)&long long v51 = 0;
  if (v18)
  {
    if (v18[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
    }
    else {
      --v18[2];
    }
  }
  uint64_t v19 = (_DWORD *)*((void *)&v50 + 1);
  *((void *)&v50 + 1) = 0;
  if (v19)
  {
    if (v19[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v19 + 8))(v19);
    }
    else {
      --v19[2];
    }
  }
  unint64_t v20 = (_DWORD *)v50;
  *(void *)&long long v50 = 0;
  if (v20)
  {
    if (v20[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v20 + 8))(v20);
    }
    else {
      --v20[2];
    }
  }
  uint64_t result = v47[1];
  if (v47[1])
  {
    v47[1] = 0;
    LODWORD(v48) = 0;
    return (WTF *)WTF::fastFree(result, v17);
  }
  return result;
}

void sub_198F00794(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF::StringImpl *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF *a37,int a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  if ((a22 & 0x8000000000000) != 0)
  {
    long long v46 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v46);
      WTF::fastFree((WTF *)v46, a2);
    }
  }
  if (a21)
  {
    if (a21[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a21 + 8))(a21);
    }
    else {
      --a21[2];
    }
  }
  if (a20)
  {
    if (a20[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
    }
    else {
      --a20[2];
    }
  }
  if (a19)
  {
    if (a19[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
    }
    else {
      --a19[2];
    }
  }
  if (a16) {
    WTF::fastFree(a16, a2);
  }
  long long v45 = *(WTF **)(v43 - 80);
  if (v45)
  {
    *(void *)(v43 - 8WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
    *(_DWORD *)(v43 - 72) = 0;
    WTF::fastFree(v45, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::performDictionaryLookupOfCurrentSelection(WebCore::Page **this)
{
  WebCore::Page::checkedFocusController((uint64_t *)v5, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v5[0]);
  uint64_t v3 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v4 = v5[0];
  v5[0] = 0;
  if (v4)
  {
    if (!*(_DWORD *)v4)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v4;
  }
  if (result)
  {
    WebCore::DictionaryLookup::rangeForSelection();
    if (v6) {
      WebKit::WebPage::performDictionaryLookupForRange((WebKit::WebPage *)this, v3, (uint64_t)v5);
    }
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

void sub_198F00C1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::insertDictatedTextAsync(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned char *a5)
{
  WebCore::Page::checkedFocusController((uint64_t *)v37, *(WebCore::Page **)(a1 + 48));
  uint64_t result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v37[0]);
  uint64_t v9 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
  }
  uint64_t v10 = v37[0];
  v37[0] = 0;
  if (v10)
  {
    if (!*(_DWORD *)v10)
    {
      __break(0xC471u);
      JUMPOUT(0x198F01128);
    }
    --*(_DWORD *)v10;
  }
  if (result)
  {
    if (*a3 != -1)
    {
      WebKit::EditingRange::toRange((uint64_t)result, 0, (uint64_t)v38);
      if (v38[32])
      {
        WebCore::VisibleSelection::VisibleSelection();
        WebCore::FrameSelection::setSelection();
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v37);
      }
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v38);
    }
    if (*a5)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v11 = a1 + 32;
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
      char v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)char v14 = 2036;
      *((void *)v14 + 1) = v13;
      *((void *)v14 + 66) = (char *)v14 + 16;
      *((void *)v14 + 67) = 512;
      *((void *)v14 + 68) = 0;
      *((void *)v14 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
      *((void *)v14 + 69) = 0;
      IPC::Encoder::encodeHeader(v14);
      v37[0] = v14;
      (*(void (**)(uint64_t, WebCore::FocusController **, void))(*(void *)v11 + 32))(v11, v37, 0);
      int v16 = v37[0];
      v37[0] = 0;
      if (v16)
      {
        IPC::Encoder::~Encoder(v16, v15);
        WTF::fastFree(v32, v33);
      }
    }
    uint64_t v17 = (WebCore *)*((void *)v9 + 37);
    if (v17 && (uint64_t v18 = (WebCore::Node *)*((void *)v17 + 160)) != 0)
    {
      *((_DWORD *)v18 + 7) += 2;
      int v20 = a5[3];
      uint64_t v19 = a5 + 3;
      if (v20)
      {
        uint64_t v21 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v21 || (char v22 = *(WebCore::ThreadGlobalData **)(v21 + 96)) == 0) {
          char v22 = (WebCore::ThreadGlobalData *)WebCore::threadGlobalDataSlow(v17);
        }
        if (!*((void *)v22 + 5)) {
          WebCore::ThreadGlobalData::initializeEventNames(v22);
        }
        WebCore::Event::create();
        (*(void (**)(WebCore::Node *, WebCore::FocusController *))(*(void *)v18 + 48))(v18, v37[0]);
        unsigned int v23 = v37[0];
        v37[0] = 0;
        if (v23)
        {
          if (*((_DWORD *)v23 + 4) == 1) {
            (*(void (**)(WebCore::FocusController *))(*(void *)v23 + 8))(v23);
          }
          else {
            --*((_DWORD *)v23 + 4);
          }
        }
        char v24 = 0;
        uint64_t v17 = (WebCore *)*((void *)v9 + 37);
      }
      else
      {
        char v24 = 0;
      }
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v19 = a5 + 3;
      char v24 = 1;
    }
    if (*(void *)(WebCore::Document::editor(v17) + 32)) {
      unsigned int v25 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
    }
    else {
      unsigned int v25 = 0;
    }
    if (!v25)
    {
      WebCore::Document::editor(*((WebCore::Document **)v9 + 37));
      inserted = (WebCore *)WebCore::Editor::insertDictatedText();
      char v27 = *v19 ? v24 : 1;
      if ((v27 & 1) == 0)
      {
        unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        uint64_t v29 = *(void *)(StatusReg + 736);
        if (!v29 || (uint64_t v30 = *(WebCore::ThreadGlobalData **)(v29 + 96)) == 0) {
          uint64_t v30 = (WebCore::ThreadGlobalData *)WebCore::threadGlobalDataSlow(inserted);
        }
        if (!*((void *)v30 + 5)) {
          WebCore::ThreadGlobalData::initializeEventNames(v30);
        }
        WebCore::Event::create();
        (*(void (**)(WebCore::Node *, WebCore::FocusController *))(*(void *)v18 + 48))(v18, v37[0]);
        int v31 = v37[0];
        v37[0] = 0;
        if (v31)
        {
          if (*((_DWORD *)v31 + 4) == 1) {
            int v31 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(void *)v31 + 8))(v31);
          }
          else {
            --*((_DWORD *)v31 + 4);
          }
        }
        uint64_t v34 = *(void *)(StatusReg + 736);
        if (!v34 || (float v35 = *(WebCore::ThreadGlobalData **)(v34 + 96)) == 0) {
          float v35 = (WebCore::ThreadGlobalData *)WebCore::threadGlobalDataSlow(v31);
        }
        if (!*((void *)v35 + 5)) {
          WebCore::ThreadGlobalData::initializeEventNames(v35);
        }
        WebCore::Event::create();
        (*(void (**)(WebCore::Node *, WebCore::FocusController *))(*(void *)v18 + 48))(v18, v37[0]);
        int v36 = v37[0];
        v37[0] = 0;
        if (v36)
        {
          if (*((_DWORD *)v36 + 4) == 1)
          {
            (*(void (**)(WebCore::FocusController *))(*(void *)v36 + 8))(v36);
            if ((v24 & 1) == 0)
            {
LABEL_55:
              if (*((_DWORD *)v18 + 7) == 2)
              {
                if ((*((_WORD *)v18 + 17) & 0x400) == 0) {
                  WebCore::Node::removedLastRef(v18);
                }
              }
              else
              {
                *((_DWORD *)v18 + 7) -= 2;
              }
            }
            return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v9 + 2);
          }
          --*((_DWORD *)v36 + 4);
        }
      }
    }
    if ((v24 & 1) == 0) {
      goto LABEL_55;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v9 + 2);
  }
  return result;
}

void sub_198F0115C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, IPC::Encoder *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a9)
  {
    if (*((_DWORD *)a9 + 4) == 1) {
      (*(void (**)(IPC::Encoder *))(*(void *)a9 + 8))(a9);
    }
    else {
      --*((_DWORD *)a9 + 4);
    }
  }
  if (*(_DWORD *)(v23 + 28) == 2)
  {
    if ((*(_WORD *)(v23 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v23);
    }
  }
  else
  {
    *(_DWORD *)(v23 + 28) -= 2;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v22 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::addDictationAlternative(uint64_t a1, _DWORD **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  WebCore::Page::checkedFocusController((uint64_t *)&v44, *(WebCore::Page **)(a1 + 48));
  uint64_t result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v44);
  float v8 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
  }
  uint64_t v9 = v44;
  long long v44 = 0;
  if (v9)
  {
    if (!*(_DWORD *)v9)
    {
      __break(0xC471u);
      goto LABEL_69;
    }
    --*(_DWORD *)v9;
  }
  if (!result) {
    return result;
  }
  uint64_t v10 = *((void *)result + 37);
  if (v10)
  {
    *(_DWORD *)(v10 + 28) += 2;
    uint64_t v11 = *(void *)(v10 + 3096);
    uint64_t v12 = *(WebCore::FocusController **)(v11 + 56);
    if (v12) {
      *((_DWORD *)v12 + 7) += 2;
    }
    long long v44 = v12;
    int v45 = *(_DWORD *)(v11 + 64);
    char v46 = *(unsigned char *)(v11 + 68);
    uint64_t v13 = *(void *)(v11 + 72);
    if (v13) {
      *(_DWORD *)(v13 + 28) += 2;
    }
    uint64_t v47 = v13;
    int v48 = *(_DWORD *)(v11 + 80);
    char v49 = *(unsigned char *)(v11 + 84);
    uint64_t v14 = *(void *)(v11 + 88);
    if (v14) {
      *(_DWORD *)(v14 + 28) += 2;
    }
    uint64_t v50 = v14;
    int v51 = *(_DWORD *)(v11 + 96);
    char v52 = *(unsigned char *)(v11 + 100);
    uint64_t v15 = *(void *)(v11 + 104);
    if (v15) {
      *(_DWORD *)(v15 + 28) += 2;
    }
    uint64_t v53 = v15;
    int v54 = *(_DWORD *)(v11 + 112);
    char v55 = *(unsigned char *)(v11 + 116);
    uint64_t v16 = *(void *)(v11 + 120);
    if (v16) {
      *(_DWORD *)(v16 + 28) += 2;
    }
    uint64_t v56 = v16;
    int v57 = *(_DWORD *)(v11 + 128);
    char v58 = *(unsigned char *)(v11 + 132);
    uint64_t v17 = *(WebCore::Node **)(v11 + 136);
    if (v17) {
      *((_DWORD *)v17 + 7) += 2;
    }
    uint64_t v59 = v17;
    int v60 = *(_DWORD *)(v11 + 144);
    char v61 = *(unsigned char *)(v11 + 148);
    __int16 v62 = *(_WORD *)(v11 + 152);
    char v63 = *(unsigned char *)(v11 + 154);
    uint64_t v18 = (WebCore *)WebCore::VisibleSelection::rootEditableElement((WebCore::VisibleSelection *)&v44);
    int v20 = v18;
    if (!v18)
    {
      WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
LABEL_53:
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v44);
      if (*(_DWORD *)(v10 + 28) == 2)
      {
        if ((*(_WORD *)(v10 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v10);
        }
      }
      else
      {
        *(_DWORD *)(v10 + 28) -= 2;
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8 + 2);
    }
    *((_DWORD *)v18 + 7) += 2;
    WebCore::firstPositionInNode(v18, v19);
    uint64_t v22 = v59;
    if (v59) {
      *((_DWORD *)v59 + 7) += 2;
    }
    int v40 = v22;
    int v41 = v60;
    char v42 = v61;
    WebCore::makeBoundaryPoint(&v31, (WebCore *)&v43, v21);
    WebCore::makeBoundaryPoint(v64, (WebCore *)&v40, v23);
    int v24 = v65;
    if ((_BYTE)v33 && v65)
    {
      WebCore::SimpleRange::SimpleRange();
      uint64_t v35 = v66;
      int v36 = (int)v67;
      uint64_t v25 = v68;
      uint64_t v66 = 0;
      uint64_t v68 = 0;
      uint64_t v37 = v25;
      int v38 = v69;
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v68);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v66);
      int v24 = v65;
      char v26 = 1;
    }
    else
    {
      char v26 = 0;
      LOBYTE(v35) = 0;
    }
    char v39 = v26;
    if (v24) {
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v64);
    }
    if ((_BYTE)v33) {
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v31);
    }
    if (!v39)
    {
      WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
LABEL_45:
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v35);
      uint64_t v29 = v40;
      int v40 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 7) == 2)
        {
          if ((*((_WORD *)v29 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v29);
          }
        }
        else
        {
          *((_DWORD *)v29 + 7) -= 2;
        }
      }
      uint64_t v30 = v43;
      uint64_t v43 = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 7) == 2)
        {
          if ((*((_WORD *)v30 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v30);
          }
        }
        else
        {
          *((_DWORD *)v30 + 7) -= 2;
        }
      }
      if (*((_DWORD *)v20 + 7) == 2)
      {
        if ((*((_WORD *)v20 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v20);
        }
      }
      else
      {
        *((_DWORD *)v20 + 7) -= 2;
      }
      goto LABEL_53;
    }
    WebCore::characterCount();
    if (v39)
    {
      WebCore::findClosestPlainText();
      if (v31 != v33 || v32 != v34)
      {
        if (!*(void *)(v10 + 1536)) {
          WebCore::Document::ensureMarkers((WebCore::Document *)v10);
        }
        uint64_t v28 = *a2;
        if (*a2) {
          *v28 += 2;
        }
        uint64_t v66 = a3;
        __int16 v67 = v28;
        int v70 = 1;
        WebCore::DocumentMarkerController::addMarker();
        if (v70 != -1) {
          ((void (*)(uint64_t *, uint64_t *))off_1EE9DD7A0[v70])(v64, &v66);
        }
      }
      WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v33);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v31);
      goto LABEL_45;
    }
    __break(1u);
LABEL_69:
    JUMPOUT(0x198F01730);
  }
  WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8 + 2);
}

void sub_198F01900()
{
}

unsigned int *WebKit::WebPage::dictationAlternativesAtSelection(uint64_t a1, uint64_t *a2)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v37, *(WebCore::Page **)(a1 + 48));
  uint64_t result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v37);
  uint64_t v4 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
  }
  uint64_t v5 = v37;
  uint64_t v37 = 0;
  if (v5)
  {
    if (!*(_DWORD *)v5)
    {
      __break(0xC471u);
      goto LABEL_72;
    }
    --*(_DWORD *)v5;
  }
  if (!result) {
    return result;
  }
  uint64_t v6 = *((void *)result + 37);
  if (!v6)
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a2);
    char v27 = v37;
    if (v37)
    {
      uint64_t v37 = 0;
      LODWORD(v38) = 0;
      WTF::fastFree(v27, v26);
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4 + 2);
  }
  *(_DWORD *)(v6 + 28) += 2;
  uint64_t v7 = *(void *)(v6 + 3096);
  float v8 = *(WebCore::FocusController **)(v7 + 56);
  if (v8) {
    *((_DWORD *)v8 + 7) += 2;
  }
  uint64_t v37 = v8;
  LODWORD(v38) = *(_DWORD *)(v7 + 64);
  BYTE4(v38) = *(unsigned char *)(v7 + 68);
  uint64_t v9 = *(void *)(v7 + 72);
  if (v9) {
    *(_DWORD *)(v9 + 28) += 2;
  }
  uint64_t v39 = v9;
  int v40 = *(_DWORD *)(v7 + 80);
  char v41 = *(unsigned char *)(v7 + 84);
  uint64_t v10 = *(void *)(v7 + 88);
  if (v10) {
    *(_DWORD *)(v10 + 28) += 2;
  }
  uint64_t v42 = v10;
  int v43 = *(_DWORD *)(v7 + 96);
  char v44 = *(unsigned char *)(v7 + 100);
  uint64_t v11 = *(void *)(v7 + 104);
  if (v11) {
    *(_DWORD *)(v11 + 28) += 2;
  }
  uint64_t v45 = v11;
  int v46 = *(_DWORD *)(v7 + 112);
  char v47 = *(unsigned char *)(v7 + 116);
  uint64_t v12 = *(void *)(v7 + 120);
  if (v12) {
    *(_DWORD *)(v12 + 28) += 2;
  }
  uint64_t v48 = v12;
  int v49 = *(_DWORD *)(v7 + 128);
  char v50 = *(unsigned char *)(v7 + 132);
  uint64_t v13 = *(void *)(v7 + 136);
  if (v13) {
    *(_DWORD *)(v13 + 28) += 2;
  }
  uint64_t v51 = v13;
  int v52 = *(_DWORD *)(v7 + 144);
  char v53 = *(unsigned char *)(v7 + 148);
  __int16 v54 = *(_WORD *)(v7 + 152);
  char v55 = *(unsigned char *)(v7 + 154);
  WebCore::VisiblePosition::VisiblePosition();
  WebCore::VisiblePosition::previous();
  WebCore::VisiblePosition::VisiblePosition();
  WebCore::VisiblePosition::next();
  WebCore::VisibleSelection::VisibleSelection();
  WebCore::VisibleSelection::range(v35, (WebCore::VisibleSelection *)&v33);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v33);
  if (v29)
  {
    if (*((_DWORD *)v29 + 7) == 2)
    {
      if ((*((_WORD *)v29 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v29);
      }
    }
    else
    {
      *((_DWORD *)v29 + 7) -= 2;
    }
  }
  if (v28)
  {
    if (*((_DWORD *)v28 + 7) == 2)
    {
      if ((*((_WORD *)v28 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v28);
      }
    }
    else
    {
      *((_DWORD *)v28 + 7) -= 2;
    }
  }
  uint64_t v14 = v31;
  uint64_t v31 = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 7) == 2)
    {
      if ((*((_WORD *)v14 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v14);
      }
    }
    else
    {
      *((_DWORD *)v14 + 7) -= 2;
    }
  }
  uint64_t v15 = v30;
  uint64_t v30 = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 7) == 2)
    {
      if ((*((_WORD *)v15 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v15);
      }
    }
    else
    {
      *((_DWORD *)v15 + 7) -= 2;
    }
  }
  if (!v36)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a2);
    uint64_t v25 = v33;
    if (v33)
    {
      uint64_t v33 = 0;
      LODWORD(v34) = 0;
      WTF::fastFree(v25, v24);
    }
    goto LABEL_53;
  }
  if (!*(void *)(v6 + 1536))
  {
    WebCore::Document::ensureMarkers((WebCore::Document *)v6);
    if (!v36)
    {
      __break(1u);
LABEL_72:
      JUMPOUT(0x198F01D80);
    }
  }
  WebCore::DocumentMarkerController::markersInRange();
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  if (!HIDWORD(v34)) {
    goto LABEL_47;
  }
  if (HIDWORD(v34) >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x198F01DB0);
  }
  LODWORD(v32) = HIDWORD(v34);
  uint64_t v31 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v34)));
  if (HIDWORD(v34))
  {
    unsigned int v16 = 0;
    uint64_t v17 = v33;
    uint64_t v18 = 8 * HIDWORD(v34);
    do
    {
      if (*(void *)v17)
      {
        uint64_t v19 = *(void *)(*(void *)v17 + 8);
        if (*(_DWORD *)(v19 + 80) == 1)
        {
          int v20 = *(WebCore::Node **)(v19 + 32);
          uint64_t v30 = v20;
          if (v16 == v32)
          {
            uint64_t v21 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v31, v16 + 1, (unint64_t)&v30);
            *((void *)v31 + HIDWORD(v32)) = *v21;
          }
          else
          {
            *((void *)v31 + v16) = v20;
          }
          unsigned int v16 = ++HIDWORD(v32);
        }
      }
      uint64_t v17 = (WTF *)((char *)v17 + 8);
      v18 -= 8;
    }
    while (v18);
  }
  else
  {
LABEL_47:
    unsigned int v16 = 0;
  }
  WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v31, v16);
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a2);
  uint64_t v23 = v31;
  if (v31)
  {
    uint64_t v31 = 0;
    LODWORD(v32) = 0;
    WTF::fastFree(v23, v22);
  }
  WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v22);
LABEL_53:
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v35);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v37);
  if (*(_DWORD *)(v6 + 28) == 2)
  {
    if ((*(_WORD *)(v6 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
  }
  else
  {
    *(_DWORD *)(v6 + 28) -= 2;
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4 + 2);
}

uint64_t WebKit::WebPage::clearDictationAlternatives(uint64_t a1, uint64_t a2)
{
  WebCore::Page::checkedFocusController((uint64_t *)v37, *(WebCore::Page **)(a1 + 48));
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v37[0]);
  uint64_t v4 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v5 = v37[0];
  v37[0] = 0;
  if (v5)
  {
    if (!*(_DWORD *)v5)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v5;
  }
  if (result)
  {
    uint64_t v6 = *(void *)(result + 296);
    if (!v6) {
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
    }
    *(_DWORD *)(v6 + 28) += 2;
    uint64_t v39 = 0;
    uint64_t v7 = *(unsigned int *)(a2 + 12);
    unsigned int v8 = (v7 - 1) | ((v7 - 1) >> 1) | (((v7 - 1) | ((v7 - 1) >> 1)) >> 2);
    unsigned int v9 = v8 | (v8 >> 4) | ((v8 | (v8 >> 4)) >> 8);
    unint64_t v10 = (v9 | HIWORD(v9)) + 1;
    if (v10 > 0x400)
    {
      if (v10 > 2 * v7) {
        goto LABEL_13;
      }
    }
    else if (3 * v10 > 4 * v7)
    {
LABEL_11:
      double v11 = (double)v7;
      double v12 = (double)v10;
      double v13 = 0.604166667;
LABEL_14:
      if (v12 * v13 <= v11) {
        LODWORD(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 2 * v10;
      }
      if (v10 <= 8) {
        unsigned int v14 = 8;
      }
      else {
        unsigned int v14 = v10;
      }
      uint64_t v15 = WTF::fastZeroedMalloc((WTF *)(8 * v14 + 16));
      uint64_t v39 = v15 + 16;
      *(_DWORD *)(v15 + 8) = v14 - 1;
      *(_DWORD *)(v15 + 12) = v14;
      *(void *)uint64_t v15 = 0;
      uint64_t v17 = *(unsigned int *)(a2 + 12);
      if (v17)
      {
        uint64_t v18 = *(uint64_t **)a2;
        uint64_t v19 = &v18[v17];
        while (1)
        {
          uint64_t v20 = *v18;
          uint64_t v21 = v39;
          if (v39
            || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(&v39),
                (uint64_t v21 = v39) != 0))
          {
            int v22 = *(_DWORD *)(v21 - 8);
          }
          else
          {
            int v22 = 0;
          }
          unint64_t v23 = (v20 + ~(v20 << 32)) ^ ((unint64_t)(v20 + ~(v20 << 32)) >> 22);
          unint64_t v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
          unint64_t v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
          unsigned int v26 = v22 & ((v25 >> 31) ^ v25);
          unsigned int v16 = (Node *)(v21 + 8 * v26);
          uint64_t v27 = *(void *)v16;
          if (*(void *)v16)
          {
            uint64_t v28 = 0;
            int v29 = 1;
            while (v27 != v20)
            {
              if (v27 == -1) {
                uint64_t v28 = v16;
              }
              unsigned int v26 = (v26 + v29) & v22;
              unsigned int v16 = (Node *)(v21 + 8 * v26);
              uint64_t v27 = *(void *)v16;
              ++v29;
              if (!*(void *)v16)
              {
                if (v28)
                {
                  *(void *)uint64_t v28 = 0;
                  --*(_DWORD *)(v39 - 16);
                  unsigned int v16 = v28;
                }
                goto LABEL_32;
              }
            }
            goto LABEL_38;
          }
LABEL_32:
          *(void *)unsigned int v16 = v20;
          uint64_t v30 = v39;
          int v31 = v39 ? *(_DWORD *)(v39 - 12) + 1 : 1;
          *(_DWORD *)(v39 - 12) = v31;
          uint64_t v32 = (*(_DWORD *)(v30 - 16) + v31);
          unint64_t v33 = *(unsigned int *)(v30 - 4);
          if (v33 > 0x400) {
            break;
          }
          if (3 * v33 <= 4 * v32) {
            goto LABEL_37;
          }
LABEL_38:
          if (++v18 == v19) {
            goto LABEL_43;
          }
        }
        if (v33 > 2 * v32) {
          goto LABEL_38;
        }
LABEL_37:
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(&v39);
        goto LABEL_38;
      }
LABEL_43:
      WebCore::makeRangeSelectingNodeContents((uint64_t *)v37, (WebCore *)v6, v16);
      if (!*(void *)(v6 + 1536)) {
        WebCore::Document::ensureMarkers((WebCore::Document *)v6);
      }
      uint64_t v34 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v34 = &unk_1EE9DD860;
      v34[1] = &v39;
      char v36 = v34;
      WebCore::DocumentMarkerController::filterMarkers();
      if (v36) {
        (*(void (**)(void *))(*v36 + 8))(v36);
      }
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v38);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v37);
      if (v39) {
        WTF::fastFree((WTF *)(v39 - 16), v35);
      }
      if (*(_DWORD *)(v6 + 28) == 2)
      {
        if ((*(_WORD *)(v6 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v6);
        }
      }
      else
      {
        *(_DWORD *)(v6 + 28) -= 2;
      }
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
    }
    LODWORD(v1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 2 * v10;
    if (v10 <= 0x400) {
      goto LABEL_11;
    }
LABEL_13:
    double v11 = (double)v7;
    double v12 = (double)v10;
    double v13 = 0.416666667;
    goto LABEL_14;
  }
  return result;
}

void sub_198F02300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a12);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a10);
  if (a14) {
    WTF::fastFree((WTF *)(a14 - 16), v17);
  }
  if (*(_DWORD *)(v15 + 28) == 2)
  {
    if ((*(_WORD *)(v15 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v15);
    }
  }
  else
  {
    *(_DWORD *)(v15 + 28) -= 2;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v14 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebPage::bindRemoteAccessibilityFrames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  {
    uint64_t v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v27);
  }
  uint64_t v7 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a3, a4);
  if (v7)
  {
    uint64_t v8 = v7;
    CFRetain(*(CFTypeRef *)(v7 + 8));
    uint64_t v9 = *(void *)(v8 + 24);
    if (v9 && (uint64_t v10 = *(void *)(v9 + 8)) != 0 && !*(unsigned char *)(v10 + 144))
    {
      double v13 = (unsigned int *)(v10 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
      if (WebCore::LocalFrame::contentRenderer((WebCore::LocalFrame *)v10))
      {
        WebKit::WebPage::accessibilityRemoteTokenData(&cf);
        uint64_t v14 = (void *)cf;
        if (cf)
        {
          uint64_t v15 = (char *)[(id)cf bytes];
          unint64_t v16 = [v14 length];
          unint64_t v17 = v16;
          int v29 = 0;
          LODWORD(v3WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
          HIDWORD(v3WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v16;
          if (v16)
          {
            if (HIDWORD(v16))
            {
              __break(0xC471u);
              return;
            }
            uint64_t v18 = (WTF *)WTF::fastMalloc((WTF *)v16);
            LODWORD(v3WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v17;
            int v29 = v18;
            do
            {
              char v19 = *v15++;
              *(unsigned char *)uint64_t v18 = v19;
              uint64_t v18 = (WTF *)((char *)v18 + 1);
              --v17;
            }
            while (v17);
          }
        }
        else
        {
          int v29 = 0;
          uint64_t v30 = 0;
        }
        getpid();
        WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(a6, (uint64_t)&v29);
        uint64_t v21 = v29;
        if (v29)
        {
          int v29 = 0;
          LODWORD(v3WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
          WTF::fastFree(v21, v20);
        }
        CFTypeRef v22 = cf;
        CFTypeRef cf = 0;
        if (v22) {
          CFRelease(v22);
        }
      }
      else
      {
        int v31 = 0;
        uint64_t v32 = 0;
        WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(a6, (uint64_t)&v31);
        unint64_t v24 = v31;
        if (v31)
        {
          int v31 = 0;
          LODWORD(v32) = 0;
          WTF::fastFree(v24, v23);
        }
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v13);
    }
    else
    {
      unint64_t v33 = 0;
      uint64_t v34 = 0;
      WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(a6, (uint64_t)&v33);
      double v12 = v33;
      if (v33)
      {
        unint64_t v33 = 0;
        LODWORD(v34) = 0;
        WTF::fastFree(v12, v11);
      }
    }
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(a6, (uint64_t)&v35);
    unsigned int v26 = v35;
    if (v35)
    {
      uint64_t v35 = 0;
      LODWORD(v36) = 0;
      WTF::fastFree(v26, v25);
    }
  }
}

void sub_198F025EC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, WTF *a11, int a12, WTF *a13, int a14, uint64_t a15, uint64_t a16, WTF *a17, int a18)
{
  if (a17) {
    WTF::fastFree(a17, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198F02678(int a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16)
{
  if (a15) {
    WTF::fastFree(a15, a2);
  }
  JUMPOUT(0x198F02668);
}

unsigned int *WebKit::WebPage::getContentsAsAttributedString(uint64_t a1, Node *a2)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 160) + 144)) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 160);
  }
  if (v3)
  {
    atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
    uint64_t v4 = *(WebCore **)(v3 + 296);
    *((_DWORD *)v4 + 7) += 2;
    uint64_t v7 = v4;
    WebCore::makeRangeSelectingNodeContents(v8, v4, a2);
    WebCore::attributedString();
  }
  else
  {
    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v10);
  }
  uint64_t v5 = *(void *)a2;
  *(void *)a2 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v5 + 16))(v5, v10);
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  uint64_t result = (unsigned int *)MEMORY[0x199732DE0](v10);
  if (v3)
  {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v9);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v8);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v7);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

void sub_198F027AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  MEMORY[0x199732DE0](&a14);
  if (v15)
  {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a12);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a10);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a9);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v15 + 8));
  }
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::updateMockAccessibilityElementAfterCommittingLoad(id *this)
{
  uint64_t v2 = WebKit::WebPage::mainFrame((WebKit::WebPage *)this);
  uint64_t v3 = v2;
  if (!v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    char v4 = 1;
    goto LABEL_5;
  }
  char v4 = 1;
  if (*(unsigned char *)(v2 + 144))
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
LABEL_4:
    uint64_t v6 = 0;
LABEL_5:
    char v7 = 1;
    goto LABEL_6;
  }
  atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
  uint64_t v5 = *(void *)(v2 + 296);
  if (!v5)
  {
    char v4 = 0;
    goto LABEL_4;
  }
  char v4 = 0;
  char v7 = 0;
  *(_DWORD *)(v5 + 28) += 2;
  uint64_t v6 = (*(unsigned __int16 *)(v5 + 3406) >> 3) & 1;
LABEL_6:
  uint64_t result = (unsigned int *)[this[33] setHasMainFramePlugin:v6];
  if ((v7 & 1) == 0)
  {
    if (*(_DWORD *)(v5 + 28) == 2)
    {
      if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
        uint64_t result = (unsigned int *)WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
    }
    else
    {
      *(_DWORD *)(v5 + 28) -= 2;
    }
  }
  if ((v4 & 1) == 0)
  {
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

void sub_198F0291C(_Unwind_Exception *exception_object)
{
  if ((v4 & 1) == 0)
  {
    if (*(_DWORD *)(v2 + 28) == 2)
    {
      if ((*(_WORD *)(v2 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
    }
    else
    {
      *(_DWORD *)(v2 + 28) -= 2;
    }
  }
  if ((v3 & 1) == 0) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPage::pdfSnapshotAtSize@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int32x2_t a4@<X3>, __int16 a5@<W4>, __CFData **a6@<X8>)
{
  v35[1] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v32 = a2;
  *((void *)&v32 + 1) = a3;
  int32x2_t v31 = a4;
  uint64_t v7 = *(void *)(*((void *)result + 11) + 24);
  if (v7 && (uint64_t v8 = *(void *)(v7 + 8)) != 0 && !*(unsigned char *)(v8 + 144))
  {
    uint64_t v9 = (unsigned int *)(v8 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
    uint64_t v10 = *(WebCore::LocalFrameView **)(v8 + 288);
    if (v10)
    {
      uint64_t v12 = (uint64_t)result;
      ++*((_DWORD *)v10 + 2);
      unint64_t v24 = v10;
      Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      uint64_t v21 = a6;
      mediaBox.origin.CGFloat x = 0.0;
      mediaBox.origin.y = 0.0;
      v13.i64[0] = v31.i32[0];
      v13.i64[1] = v31.i32[1];
      mediaBox.size = (CGSize)vcvtq_f64_s64(v13);
      CFTypeRef cf = CGDataConsumerCreateWithCFData(Mutable);
      uint64_t v14 = CGPDFContextCreate(cf, &mediaBox, 0);
      unint64_t v15 = v31.u32[1];
      if (v31.i32[1] >= 1)
      {
        int v16 = DWORD1(v32);
        uint64_t v17 = *MEMORY[0x1E4F1DDE0];
        do
        {
          if (v15 >= 0x3840) {
            int v18 = 14400;
          }
          else {
            int v18 = v15;
          }
          v31.i32[1] = v18;
          HIDWORD(v32) = v18;
          DWORD1(v32) = v16;
          *(void *)bytes = 0;
          uint64_t v27 = 0;
          double v28 = (double)v31.i32[0];
          double v29 = (double)v18;
          CFDataRef v19 = CFDataCreate(0, bytes, 32);
          uint64_t v34 = v17;
          v35[0] = v19;
          CGPDFContextBeginPage(v14, (CFDictionaryRef)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v35 forKeys:&v34 count:1]);
          WebCore::GraphicsContextCG::GraphicsContextCG();
          unint64_t v25 = 0xBF8000003F800000;
          WebCore::GraphicsContextCG::scale((WebCore::GraphicsContextCG *)v33, (const WebCore::FloatSize *)&v25);
          WebCore::GraphicsContextCG::translate((WebCore::GraphicsContextCG *)v33, 0.0, (float)-v31.i32[1]);
          WebKit::WebPage::paintSnapshotAtSize(v12, &v32, &v31, a5, (WebCore::PrintContext *)v8, v10, (uint64_t)v33);
          CGPDFContextEndPage(v14);
          __int32 v20 = v31.i32[1];
          WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)v33);
          if (v19) {
            CFRelease(v19);
          }
          v16 += v20;
          v15 -= 14400;
          uint64_t v10 = v24;
        }
        while (v15 + 14400 > 0x3840);
      }
      CGPDFContextClose(v14);
      uint64_t v9 = (unsigned int *)(v8 + 8);
      *uint64_t v21 = Mutable;
      if (v14) {
        CFRelease(v14);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (*((_DWORD *)v10 + 2) == 1) {
        (*(void (**)(WebCore::LocalFrameView *))(*(void *)v10 + 8))(v10);
      }
      else {
        --*((_DWORD *)v10 + 2);
      }
    }
    else
    {
      *a6 = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v9);
  }
  else
  {
    *a6 = 0;
  }
  return result;
}

void sub_198F02C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, CFTypeRef cf, CFTypeRef a13, _DWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (v27) {
    CFRelease(v27);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a13) {
    CFRelease(a13);
  }
  if (a14[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)a14 + 8))(a14);
  }
  else {
    --a14[2];
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(a11);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::getProcessDisplayName(uint64_t a1, uint64_t *a2)
{
  return 0;
}

void sub_198F02D4C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::isTransparentOrFullyClipped(WebKit::WebPage *this, const WebCore::Element *a2)
{
  uint64_t v2 = *((void *)a2 + 9) & 0xFFFFFFFFFFFFLL;
  if (!v2) {
    return 0;
  }
  if ((*(unsigned char *)((*((void *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    char v4 = "/AppleInternal/Library/BuildRoots/7a5643da-a7fb-11ef-987a-36218cb420d5/Applications/Xcode.app/Contents/Develope"
         "r/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/wtf/TypeCasts.h";
    uint64_t v5 = "match_constness_t<Source, Target> *WTF::downcast(Source *) [Target = WebCore::RenderElement, Source = WebCore::RenderObject]";
    uint64_t v8 = 105;
    uint64_t v6 = 2;
    __break(0xC471u);
  }
  else
  {
    char v3 = (WebCore::RenderLayer *)WebCore::RenderObject::enclosingLayer((WebCore::RenderObject *)(*((void *)a2 + 9) & 0xFFFFFFFFFFFFLL));
    if (v3 && (WebCore::RenderLayer::isTransparentRespectingParentFrames(v3) & 1) != 0) {
      return 1;
    }
    uint64_t v8 = v2;
  }
  return MEMORY[0x1F41746F0](v8, v4, v5, v6);
}

WebCore::Node *WebKit::WebPage::getPlatformEditorStateCommon(WebCore::Node *result, const WebCore::Position *a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 336)) {
    return result;
  }
  if (!*(unsigned char *)(a3 + 464)) {
    return result;
  }
  uint64_t v5 = a2;
  uint64_t v6 = *(unsigned char **)(*((void *)a2 + 37) + 3096);
  if (!v6[153]) {
    return result;
  }
  if (!*(unsigned char *)(a3 + 13)) {
    goto LABEL_58;
  }
  char v3 = result;
  WebCore::EditingStyle::styleAtSelectionStart();
  if (v34)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int hasStyle = WebCore::EditingStyle::hasStyle();
    unint64_t v33 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v7);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    if (hasStyle) {
      *(unsigned char *)(a3 + 32) |= 1u;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    unint64_t v33 = v29;
    if (WebCore::EditingStyle::hasStyle())
    {
      int v10 = 1;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      int v10 = WebCore::EditingStyle::hasStyle();
      long long v32 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, v9);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
    }
    double v11 = v33;
    unint64_t v33 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    if (v10) {
      *(unsigned char *)(a3 + 32) |= 2u;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v13 = WebCore::EditingStyle::hasStyle();
    unint64_t v33 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v12);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    if (v13) {
      *(unsigned char *)(a3 + 32) |= 4u;
    }
    uint64_t v14 = v34;
    if (*((void *)v34 + 1))
    {
      WebCore::StyleProperties::propertyAsValueID();
      int v15 = WebCore::StyleProperties::propertyAsValueID();
      if ((v15 & 0xFF0000) != 0) {
        unsigned __int16 v16 = v15;
      }
      else {
        unsigned __int16 v16 = 0;
      }
      int v17 = v16 - 258;
      char v18 = 2;
      switch(v17)
      {
        case 0:
        case 4:
          char v18 = 1;
          goto LABEL_39;
        case 1:
        case 5:
          goto LABEL_39;
        case 2:
        case 6:
          char v18 = 3;
          goto LABEL_39;
        case 3:
          char v18 = 4;
LABEL_39:
          *(unsigned char *)(a3 + 48) = v18;
          break;
        default:
          break;
      }
      WebCore::StyleProperties::propertyAsColor();
      if ((_BYTE)v30) {
        WebCore::Color::operator=();
      }
      std::optional<WebCore::Color>::~optional((uint64_t)&v29, v19);
      uint64_t v14 = v34;
      uint64_t v34 = 0;
      if (!v14) {
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v34 = 0;
    }
    WTF::RefCounted<WebCore::EditingStyle>::deref(v14);
  }
LABEL_44:
  __int32 v20 = (WebCore *)WebCore::Position::containerNode((WebCore::Position *)(v6 + 120));
  CFTypeRef v22 = v20;
  if (v20) {
    *((_DWORD *)v20 + 7) += 2;
  }
  WebCore::enclosingList((uint64_t *)&v29, v20, v21);
  if (v22)
  {
    if (*((_DWORD *)v22 + 7) == 2)
    {
      if ((*((_WORD *)v22 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v22);
      }
    }
    else
    {
      *((_DWORD *)v22 + 7) -= 2;
    }
  }
  uint64_t result = v29;
  if (v29)
  {
    uint64_t v23 = *(void *)(*((void *)v29 + 13) + 24);
    if (v23 == *(void *)(*MEMORY[0x1E4FB6868] + 24))
    {
      char v24 = 2;
    }
    else
    {
      if (v23 != *(void *)(*MEMORY[0x1E4FB6848] + 24))
      {
LABEL_55:
        double v29 = 0;
        if (*((_DWORD *)result + 7) == 2) {
          goto LABEL_72;
        }
        *((_DWORD *)result + 7) -= 2;
        goto LABEL_57;
      }
      char v24 = 1;
    }
    *(unsigned char *)(a3 + 64) = v24;
    goto LABEL_55;
  }
LABEL_57:
  while (1)
  {
    unint64_t v25 = (WebCore::Editor *)WebCore::Document::editor(*((WebCore::Document **)v5 + 37));
    *(unsigned char *)(a3 + 65) = WebCore::Editor::baseWritingDirectionForSelectionStart(v25);
    double v29 = (WebCore::Node *)(v6 + 56);
    uint64_t v30 = v3;
    int32x2_t v31 = v5;
    *(unsigned char *)(a3 + 67) = WebKit::WebPage::getPlatformEditorStateCommon(WebCore::LocalFrame const&,WebKit::EditorState &)const::$_0::operator()((uint64_t)&v29);
LABEL_58:
    uint64_t result = (WebCore::Node *)WebCore::enclosingTextFormControl((WebCore *)(v6 + 120), a2);
    uint64_t v5 = result;
    if (!result)
    {
      uint64_t result = (WebCore::Node *)WebCore::VisibleSelection::rootEditableElement((WebCore::VisibleSelection *)(v6 + 56));
      uint64_t v5 = result;
      if (!result) {
        break;
      }
    }
    *((_DWORD *)v5 + 7) += 2;
    if (*(unsigned char *)(a3 + 464))
    {
      uint64_t v27 = (WebKit::WebPage *)WebKit::WebPage::rootViewInteractionBounds(v5, v26);
      *(void *)(a3 + 368) = v27;
      *(void *)(a3 + 376) = v28;
      if (*(unsigned char *)(a3 + 13)) {
        uint64_t result = (WebCore::Node *)WebKit::WebPage::isTransparentOrFullyClipped(v27, v5);
      }
      else {
        uint64_t result = 0;
      }
      *(unsigned char *)(a3 + 66) = (_BYTE)result;
      if (*((_DWORD *)v5 + 7) == 2)
      {
        if ((*((_WORD *)v5 + 17) & 0x400) == 0) {
          return (WebCore::Node *)WebCore::Node::removedLastRef(v5);
        }
      }
      else
      {
        *((_DWORD *)v5 + 7) -= 2;
      }
      return result;
    }
    __break(1u);
LABEL_72:
    if ((*((_WORD *)result + 17) & 0x400) == 0) {
      WebCore::Node::removedLastRef(result);
    }
  }
  return result;
}

void sub_198F032A0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13, WebCore::EditingStyle *a14)
{
  std::optional<WebCore::Color>::~optional((uint64_t)&a9, a2);
  int v15 = a14;
  a14 = 0;
  if (v15) {
    WTF::RefCounted<WebCore::EditingStyle>::deref(v15);
  }
  _Unwind_Resume(a1);
}

void sub_198F03344()
{
  if (*(_DWORD *)(v0 + 28) == 2)
  {
    if ((*(_WORD *)(v0 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v0);
    }
  }
  else
  {
    *(_DWORD *)(v0 + 28) -= 2;
  }
  JUMPOUT(0x198F0333CLL);
}

uint64_t WebKit::WebPage::getPlatformEditorStateCommon(WebCore::LocalFrame const&,WebKit::EditorState &)const::$_0::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!WebCore::VisibleSelection::canEnableWritingSuggestions(*(WebCore::VisibleSelection **)a1)) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 2336);
  if (!v3) {
    return 1;
  }
  if (!*(void *)(v3 + 8)) {
    return 1;
  }
  char v4 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(*(void *)(a1 + 16) + 296));
  uint64_t v5 = WebCore::Editor::nodeBeforeWritingSuggestions(v4);
  if (!v5) {
    return 1;
  }
  int v6 = *(_DWORD *)(v5 + 28);
  *(_DWORD *)(v5 + 28) = v6 + 2;
  uint64_t v7 = *(void *)(v2 + 2336);
  if (v7) {
    uint64_t v7 = *(void *)(v7 + 8);
  }
  BOOL v8 = v7 == v5;
  if (v6)
  {
    *(_DWORD *)(v5 + 28) = v6;
  }
  else if ((*(_WORD *)(v5 + 34) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v5);
  }
  return v8;
}

void WebKit::WebPage::getPDFFirstPageSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  {
    int v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v5 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (v5)
  {
    uint64_t v6 = v5;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    uint64_t v8 = *(void *)(v6 + 24);
    if (v8 && (uint64_t v9 = *(void *)(v8 + 8)) != 0)
    {
      if (*(unsigned char *)(v9 + 144)) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = v9;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    double v11 = (WebKit::PluginView *)WebKit::WebPage::pluginViewForFrame(v10, v7);
    if (v11) {
      WebKit::PluginView::pdfDocumentSizeForPrinting(v11);
    }
    WTF::CompletionHandler<void ()(WebCore::FloatSize)>::operator()(a4);
    uint64_t v12 = *(const void **)(v6 + 8);
    CFRelease(v12);
  }
  else
  {
    WTF::CompletionHandler<void ()(WebCore::FloatSize)>::operator()(a4);
  }
}

void sub_198F03578(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WebCore::FloatSize)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198F03610(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::replaceImageForRemoveBackground(uint64_t a1, const WebCore::ElementContext *a2, uint64_t a3, char *a4, WTF *a5)
{
  WebCore::Page::checkedFocusController((uint64_t *)v77, *(WebCore::Page **)(a1 + 48));
  uint64_t result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v77[0]);
  uint64_t v12 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
  }
  int v13 = v77[0];
  v77[0] = 0;
  if (v13)
  {
    if (!*(_DWORD *)v13)
    {
      __break(0xC471u);
      JUMPOUT(0x198F03E84);
    }
    --*(_DWORD *)v13;
  }
  if (result)
  {
    WebKit::WebPage::elementForContext(a1, a2, &v114);
    uint64_t v14 = v114;
    if (v114)
    {
      if ((WebCore::Node::isContentEditable(v114) & 1) == 0) {
        goto LABEL_107;
      }
      uint64_t v15 = *(void *)(*((void *)v14 + 6) + 8);
      *(_DWORD *)(v15 + 28) += 2;
      uint64_t v113 = (WebCore::Document *)v15;
      if (*((void *)v12 + 37) != v15)
      {
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v113);
        goto LABEL_107;
      }
      uint64_t v16 = *(void *)(v15 + 3096);
      uint64_t v17 = *(void *)(v16 + 56);
      if (v17) {
        *(_DWORD *)(v17 + 28) += 2;
      }
      uint64_t v93 = v17;
      int v94 = *(_DWORD *)(v16 + 64);
      char v95 = *(unsigned char *)(v16 + 68);
      uint64_t v18 = *(void *)(v16 + 72);
      if (v18) {
        *(_DWORD *)(v18 + 28) += 2;
      }
      uint64_t v96 = v18;
      int v97 = *(_DWORD *)(v16 + 80);
      char v98 = *(unsigned char *)(v16 + 84);
      uint64_t v19 = *(void *)(v16 + 88);
      if (v19) {
        *(_DWORD *)(v19 + 28) += 2;
      }
      uint64_t v99 = v19;
      int v100 = *(_DWORD *)(v16 + 96);
      char v101 = *(unsigned char *)(v16 + 100);
      uint64_t v20 = *(void *)(v16 + 104);
      if (v20) {
        *(_DWORD *)(v20 + 28) += 2;
      }
      uint64_t v102 = v20;
      int v103 = *(_DWORD *)(v16 + 112);
      char v104 = *(unsigned char *)(v16 + 116);
      uint64_t v21 = *(void *)(v16 + 120);
      if (v21) {
        *(_DWORD *)(v21 + 28) += 2;
      }
      uint64_t v105 = v21;
      int v106 = *(_DWORD *)(v16 + 128);
      char v107 = *(unsigned char *)(v16 + 132);
      uint64_t v22 = *(void *)(v16 + 136);
      if (v22) {
        *(_DWORD *)(v22 + 28) += 2;
      }
      uint64_t v108 = v22;
      int v109 = *(_DWORD *)(v16 + 144);
      char v110 = *(unsigned char *)(v16 + 148);
      __int16 v111 = *(_WORD *)(v16 + 152);
      char v112 = *(unsigned char *)(v16 + 154);
      uint64_t v23 = WebCore::VisibleSelection::rootEditableElement((WebCore::VisibleSelection *)&v93);
      if (v23 || (uint64_t v23 = WebCore::Document::body(v113)) != 0)
      {
        *(_DWORD *)(v23 + 28) += 2;
        WebCore::VisibleSelection::range((uint64_t *)v77, (WebCore::VisibleSelection *)&v93);
        int v25 = v79;
        if ((_BYTE)v79)
        {
          WebCore::makeRangeSelectingNodeContents(v83, (WebCore *)v23, v24);
          if (!(_BYTE)v79)
          {
            __break(1u);
            goto LABEL_141;
          }
          WebCore::SimpleRange::SimpleRange();
          WebCore::characterCount();
          WebCore::characterCount();
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v91);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v90);
          uint64_t v5 = WebCore::characterCount();
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v84);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v83);
        }
        else
        {
          uint64_t v5 = 0;
        }
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v77);
        WebKit::OverridePasteboardForSelectionReplacement::OverridePasteboardForSelectionReplacement((uint64_t)v92, a3, a4, a5);
        WebCore::IgnoreSelectionChangeForScope::IgnoreSelectionChangeForScope((WebCore::IgnoreSelectionChangeForScope *)v90, (WebCore::LocalFrame *)v12);
        WebCore::Document::editor(*((WebCore::Document **)v12 + 37));
        if ((byte_1EB359D21 & 1) == 0)
        {
          v77[0] = (WebCore::Node *)"ReplaceSelectionPasteboard";
          v77[1] = (WebCore::Node *)27;
          WTF::NeverDestroyed<WTF::String,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1EB359D30, (uint64_t)v77);
          byte_1EB359D21 = 1;
        }
        WebCore::Editor::replaceNodeFromPasteboard();
        WebCore::VisiblePosition::VisiblePosition();
        WebCore::VisiblePosition::previous();
        unsigned int v26 = v86;
        if (v86) {
          *((_DWORD *)v86 + 7) += 2;
        }
        uint64_t v78 = v26;
        int v79 = v87;
        char v80 = v88;
        char v81 = v89;
        WebCore::makeSimpleRange();
        uint64_t v27 = v78;
        uint64_t v78 = 0;
        if (v27)
        {
          if (*((_DWORD *)v27 + 7) == 2)
          {
            if ((*((_WORD *)v27 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v27);
            }
          }
          else
          {
            *((_DWORD *)v27 + 7) -= 2;
          }
        }
        uint64_t v28 = v77[0];
        v77[0] = 0;
        if (v28)
        {
          if (*((_DWORD *)v28 + 7) == 2)
          {
            if ((*((_WORD *)v28 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v28);
            }
          }
          else
          {
            *((_DWORD *)v28 + 7) -= 2;
          }
        }
        if (v85)
        {
          WebCore::TextIterator::TextIterator();
          uint64_t v29 = MEMORY[0x1E4FB68A0];
          while (1)
          {
            if (!v82) {
              goto LABEL_89;
            }
            uint64_t v30 = WebCore::TextIterator::node((WebCore::TextIterator *)v77);
            uint64_t v14 = (WebCore::Node *)v30;
            if (v30)
            {
              if ((*(_WORD *)(v30 + 32) & 0x10) != 0
                && *(void *)(*(void *)(v30 + 104) + 24) == *(void *)(*(void *)v29 + 24))
              {
                break;
              }
            }
            WebCore::TextIterator::advance((WebCore::TextIterator *)v77);
          }
          *(_DWORD *)(v30 + 28) += 2;
          long long v32 = (uint64_t *)(a1 + 2456);
          unsigned int v33 = *(_DWORD *)(a1 + 2464) + 1;
          *(_DWORD *)(a1 + 2464) = v33;
          if (v33 <= *(_DWORD *)(a1 + 2468)) {
            goto LABEL_63;
          }
          uint64_t v34 = *v32;
          if (!*v32) {
            goto LABEL_60;
          }
          int v35 = *(_DWORD *)(v34 - 4);
          if (!v35) {
            goto LABEL_119;
          }
          uint64_t v76 = v5;
          int v36 = 0;
          unsigned int v37 = v35 - 1;
          do
          {
            uint64_t v38 = v37;
            uint64_t v39 = *(void *)(v34 + 8 * v37);
            if ((unint64_t)(v39 + 1) >= 2 && !*(void *)(v39 + 8))
            {
              *(void *)(v34 + 8 * v37) = 0;
              WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref((unsigned int *)v39, v31);
              *(void *)(v34 + 8 * v37) = -1;
              ++v36;
            }
            --v37;
          }
          while (v38);
          uint64_t v34 = *v32;
          if (v36)
          {
            *(_DWORD *)(v34 - 16) += v36;
            uint64_t v40 = *v32;
            uint64_t v5 = v76;
            if (*v32) {
              int v41 = *(_DWORD *)(v40 - 12);
            }
            else {
              int v41 = 0;
            }
            *(_DWORD *)(v40 - 12) = v41 - v36;
            uint64_t v34 = *v32;
          }
          else
          {
            uint64_t v5 = v76;
          }
          if (!v34)
          {
LABEL_60:
            unsigned int v42 = 0;
            *(_DWORD *)(a1 + 2464) = 0;
LABEL_61:
            int v43 = v42;
LABEL_62:
            *(_DWORD *)(a1 + 2468) = 2 * v43;
LABEL_63:
            WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unsigned int *)v14 + 4, (uint64_t)v14);
            uint64_t v44 = *((void *)v14 + 2);
            uint64_t v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFLL);
            atomic_fetch_add((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFLL), 1u);
            atomic_fetch_add((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFLL), 1u);
            uint64_t v46 = *v32;
            if (*v32
              || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::expand(v32),
                  (uint64_t v46 = *v32) != 0))
            {
              int v47 = *(_DWORD *)(v46 - 8);
            }
            else
            {
              int v47 = 0;
            }
            uint64_t v48 = 0;
            unint64_t v49 = ((unint64_t)v45 + ~(v44 << 32)) ^ (((unint64_t)v45 + ~(v44 << 32)) >> 22);
            unint64_t v50 = 9 * ((v49 + ~(v49 << 13)) ^ ((v49 + ~(v49 << 13)) >> 8));
            unint64_t v51 = (v50 ^ (v50 >> 15)) + ~((v50 ^ (v50 >> 15)) << 27);
            unsigned int v52 = (v51 >> 31) ^ v51;
            for (int i = 1; ; ++i)
            {
              unsigned int v54 = v52 & v47;
              char v55 = (unsigned int **)(v46 + 8 * v54);
              uint64_t v56 = *v55;
              if (*v55 == (unsigned int *)-1)
              {
                uint64_t v48 = (unsigned int **)(v46 + 8 * v54);
              }
              else
              {
                if (!v56)
                {
                  if (v48)
                  {
                    atomic_uint *v48 = 0;
                    --*(_DWORD *)(*v32 - 16);
                    atomic_uint *v48 = v45;
                  }
                  else
                  {
                    long long *v55 = v45;
                    uint64_t v48 = (unsigned int **)(v46 + 8 * v54);
                  }
                  uint64_t v57 = *v32;
                  if (*v32) {
                    int v58 = *(_DWORD *)(v57 - 12) + 1;
                  }
                  else {
                    int v58 = 1;
                  }
                  *(_DWORD *)(v57 - 12) = v58;
                  uint64_t v59 = *v32;
                  if (*v32) {
                    int v60 = *(_DWORD *)(v59 - 12);
                  }
                  else {
                    int v60 = 0;
                  }
                  uint64_t v61 = (*(_DWORD *)(v59 - 16) + v60);
                  unint64_t v62 = *(unsigned int *)(v59 - 4);
                  if (v62 > 0x400)
                  {
                    if (v62 <= 2 * v61) {
LABEL_84:
                    }
                      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::expand(v32);
                  }
                  else if (3 * v62 <= 4 * v61)
                  {
                    goto LABEL_84;
                  }
                  if (!v45) {
                    goto LABEL_87;
                  }
LABEL_86:
                  WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v45, v48);
LABEL_87:
                  if (*((_DWORD *)v14 + 7) != 2)
                  {
                    *((_DWORD *)v14 + 7) -= 2;
                    goto LABEL_89;
                  }
LABEL_141:
                  if ((*((_WORD *)v14 + 17) & 0x400) == 0) {
                    WebCore::Node::removedLastRef(v14);
                  }
LABEL_89:
                  MEMORY[0x199731050](v77);
                  goto LABEL_90;
                }
                if (v56 == v45)
                {
                  if (!v45) {
                    goto LABEL_87;
                  }
                  WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v45, v48);
                  goto LABEL_86;
                }
              }
              unsigned int v52 = i + v54;
            }
          }
          unsigned int v66 = *(_DWORD *)(v34 - 4);
          uint64_t v67 = *(unsigned int *)(v34 - 12);
          if (v66 < 9 || 6 * (int)v67 >= v66)
          {
LABEL_119:
            *(_DWORD *)(a1 + 2464) = 0;
            goto LABEL_120;
          }
          unsigned int v69 = (v67 - 1) | ((v67 - 1) >> 1) | (((v67 - 1) | ((v67 - 1) >> 1)) >> 2);
          unsigned int v70 = v69 | (v69 >> 4) | ((v69 | (v69 >> 4)) >> 8);
          unint64_t v71 = (v70 | HIWORD(v70)) + 1;
          if (v71 > 0x400)
          {
            if (v71 > 2 * v67) {
              goto LABEL_144;
            }
          }
          else if (3 * v71 > 4 * v67)
          {
LABEL_128:
            double v72 = (double)v67;
            double v73 = (double)v71;
            double v74 = 0.604166667;
            goto LABEL_145;
          }
          LODWORD(v71) = 2 * v71;
          if (v71 <= 0x400) {
            goto LABEL_128;
          }
LABEL_144:
          double v72 = (double)v67;
          double v73 = (double)v71;
          double v74 = 0.416666667;
LABEL_145:
          if (v73 * v74 <= v72) {
            LODWORD(v71) = 2 * v71;
          }
          if (v71 <= 8) {
            unsigned int v75 = 8;
          }
          else {
            unsigned int v75 = v71;
          }
          WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)(a1 + 2456), v75);
          unsigned int v42 = 0;
          uint64_t v34 = *(void *)(a1 + 2456);
          *(_DWORD *)(a1 + 2464) = 0;
          if (!v34) {
            goto LABEL_61;
          }
LABEL_120:
          unsigned int v42 = *(_DWORD *)(v34 - 12);
          int v43 = 0x7FFFFFFF;
          if (v42 >= 0x7FFFFFFF) {
            goto LABEL_62;
          }
          goto LABEL_61;
        }
LABEL_90:
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v83);
        char v63 = v86;
        long long v86 = 0;
        if (v63)
        {
          if (*((_DWORD *)v63 + 7) == 2)
          {
            if ((*((_WORD *)v63 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v63);
            }
          }
          else
          {
            *((_DWORD *)v63 + 7) -= 2;
          }
        }
        MEMORY[0x199737F60](v90);
        WebKit::OverridePasteboardForSelectionReplacement::~OverridePasteboardForSelectionReplacement(v92, v64);
        if (HIBYTE(v111) && (!v105 || (*(unsigned char *)(v105 + 22) & 8) != 0) && (!v108 || (*(unsigned char *)(v108 + 22) & 8) != 0))
        {
          WebCore::FrameSelection::setSelection();
        }
        else if (v25 && (*(unsigned char *)(v23 + 22) & 8) != 0)
        {
          WebCore::makeRangeSelectingNodeContents(v90, (WebCore *)v23, v65);
          if (v5 == WebCore::characterCount())
          {
            WebCore::resolveCharacterRange();
            WebCore::VisibleSelection::VisibleSelection();
            WebCore::FrameSelection::setSelection();
            WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v77);
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v84);
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v83);
          }
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v91);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v90);
        }
        if (*(_DWORD *)(v23 + 28) == 2)
        {
          if ((*(_WORD *)(v23 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v23);
          }
        }
        else
        {
          *(_DWORD *)(v23 + 28) -= 2;
        }
      }
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v93);
      uint64_t v14 = v114;
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v113);
      if (v14)
      {
LABEL_107:
        if (*((_DWORD *)v14 + 7) == 2)
        {
          if ((*((_WORD *)v14 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v14);
          }
        }
        else
        {
          *((_DWORD *)v14 + 7) -= 2;
        }
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12 + 2);
  }
  return result;
}

void sub_198F03FDC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WebCore::Node *a13, uint64_t a14, uint64_t a15, WebCore::Node *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,WebCore::Node *a50,uint64_t a51,uint64_t a52,char a53)
{
  if (v55) {
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v55, a2);
  }
  if (*(_DWORD *)(v56 + 28) == 2)
  {
    if ((*(_WORD *)(v56 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v56);
    }
  }
  else
  {
    *(_DWORD *)(v56 + 28) -= 2;
  }
  MEMORY[0x199731050](&a13);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a45);
  uint64_t v59 = a50;
  a50 = 0;
  if (v59)
  {
    if (*((_DWORD *)v59 + 7) == 2)
    {
      if ((*((_WORD *)v59 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v59);
      }
    }
    else
    {
      *((_DWORD *)v59 + 7) -= 2;
    }
  }
  MEMORY[0x199737F60](&a53);
  WebKit::OverridePasteboardForSelectionReplacement::~OverridePasteboardForSelectionReplacement((const WTF::String **)(v57 - 224), v60);
  if (*(_DWORD *)(v54 + 28) == 2)
  {
    if ((*(_WORD *)(v54 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v54);
    }
  }
  else
  {
    *(_DWORD *)(v54 + 28) -= 2;
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)(v57 - 208));
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v57 - 104));
  uint64_t v61 = *(void *)(v57 - 96);
  if (v61)
  {
    if (*(_DWORD *)(v61 + 28) == 2)
    {
      if ((*(_WORD *)(v61 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef(*(WebCore::Node **)(v57 - 96));
      }
    }
    else
    {
      *(_DWORD *)(v61 + 28) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v53 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebPage::replaceSelectionWithPasteboardData(uint64_t a1, uint64_t a2, char *a3, WTF *a4)
{
  WebKit::OverridePasteboardForSelectionReplacement::OverridePasteboardForSelectionReplacement((uint64_t)v7, a2, a3, a4);
  if ((byte_1EB359D21 & 1) == 0)
  {
    v8[0] = (uint64_t)"ReplaceSelectionPasteboard";
    v8[1] = 27;
    WTF::NeverDestroyed<WTF::String,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1EB359D30, (uint64_t)v8);
    byte_1EB359D21 = 1;
  }
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v5 = &unk_1EE9DD888;
  v8[0] = (uint64_t)v5;
  WebKit::WebPage::readSelectionFromPasteboard(a1, (const WTF::String *)&qword_1EB359D30, v8);
  if (v8[0]) {
    (*(void (**)(uint64_t))(*(void *)v8[0] + 8))(v8[0]);
  }
  WebKit::OverridePasteboardForSelectionReplacement::~OverridePasteboardForSelectionReplacement(v7, v6);
}

void sub_198F04350(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const WTF::String *a9)
{
}

unsigned int *WebKit::WebPage::readSelectionFromPasteboard(uint64_t a1, const WTF::String *a2, uint64_t *a3)
{
  uint64_t v5 = WebCore::FocusController::focusedOrMainFrame(*(WebCore::FocusController **)(*(void *)(a1 + 48) + 72));
  if (!v5) {
    return (unsigned int *)WTF::CompletionHandler<void ()(BOOL &&)>::operator()(a3);
  }
  uint64_t v6 = (unsigned int *)(v5 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
  uint64_t v7 = *(WebCore::Document **)(v5 + 296);
  if (*(unsigned char *)(*((void *)v7 + 387) + 153))
  {
    uint64_t v8 = (WebCore::Editor *)WebCore::Document::editor(v7);
    WebCore::Editor::readSelectionFromPasteboard(v8, a2);
  }
  WTF::CompletionHandler<void ()(BOOL &&)>::operator()(a3);
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
}

void sub_198F0444C(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(BOOL &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198F044E8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::insertMultiRepresentationHEIC(uint64_t a1)
{
  uint64_t result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(*(WebCore::FocusController **)(*(void *)(a1 + 48) + 72));
  if (result)
  {
    uint64_t v2 = result + 2;
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
    uint64_t v3 = (WebCore::Document *)*((void *)result + 37);
    if (*(unsigned char *)(*((void *)v3 + 387) + 153))
    {
      WebCore::Document::editor(v3);
      WebCore::Editor::insertMultiRepresentationHEIC();
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v2);
  }
  return result;
}

void sub_198F0458C(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPage::applyLinkDecorationFilteringWithResult(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[305];
  if (!v6 || !*(_DWORD *)(v6 - 12))
  {
    uint64_t v22 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1985F2000, v22, OS_LOG_TYPE_ERROR, "Unable to filter tracking query parameters (missing data)", buf, 2u);
    }
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(a1[11] + 24);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9)
    {
      if (!*(unsigned char *)(v9 + 144))
      {
        uint64_t v12 = (unsigned int *)(v9 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
        uint64_t active = WebCore::FrameLoader::activeDocumentLoader(*(WebCore::FrameLoader **)(v9 + 280));
        if (active)
        {
          int v14 = *(_DWORD *)(active + 24);
          *(_DWORD *)(active + 24) = v14 + 1;
          uint64_t v15 = (_WORD *)(active + 3514);
          if (a3 == 1 && *(unsigned char *)(active + 3518)) {
            uint64_t v15 = (_WORD *)(active + 3516);
          }
          if ((*v15 & 0x100) != 0)
          {
            if (v14)
            {
LABEL_40:
              *(_DWORD *)(active + 24) = v14;
              goto LABEL_41;
            }
            LOBYTE(v19) = 1;
          }
          else
          {
            unint64_t v16 = *(void *)(*(void *)(a1[6] + 112) + 680);
            if (v14)
            {
              *(_DWORD *)(active + 24) = v14;
              if ((v16 & 0x10000) != 0) {
                goto LABEL_41;
              }
              goto LABEL_14;
            }
            uint64_t v19 = (v16 >> 16) & 1;
          }
          (*(void (**)(uint64_t))(*(void *)active + 24))(active);
          if (v19)
          {
LABEL_41:
            if (*(_DWORD *)(a2 + 36) > *(_DWORD *)(a2 + 32))
            {
              uint64_t v23 = *(_DWORD **)a2;
              if (*(void *)a2) {
                *v23 += 2;
              }
              *(void *)buf = v23;
              long long v39 = *(_OWORD *)(a2 + 8);
              long long v40 = *(_OWORD *)(a2 + 24);
              char v24 = (void *)WTF::fastMalloc((WTF *)0x18);
              void *v24 = &unk_1EE9DD8B0;
              v24[1] = a1;
              v24[2] = a2;
              *(void *)int v41 = v24;
              WTF::removeQueryParameters();
              uint64_t v26 = *(void *)v41;
              *(void *)int v41 = 0;
              if (v26) {
                (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
              }
              if (a3 && v37)
              {
                if (a3 == 1)
                {
                  *(void *)int v41 = a2;
                  *(void *)&v41[8] = buf;
                  IPC::MessageSender::send<Messages::WebPageProxy::DidApplyLinkDecorationFiltering>((uint64_t)(a1 + 4), (uint64_t **)v41);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                uint64_t v34 = *(WTF::StringImpl **)v41;
                WTF::makeStringByJoining();
                if (v34)
                {
                  if (*(_DWORD *)v34 == 2) {
                    WTF::StringImpl::destroy(v34, v27);
                  }
                  else {
                    *(_DWORD *)v34 -= 2;
                  }
                }
                uint64_t v28 = qword_1EB358460;
                if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v29 = a1[5];
                  WTF::String::utf8();
                  *(_DWORD *)int v41 = 134218498;
                  *(void *)&float32x2_t v41[4] = a1;
                  *(_WORD *)&v41[12] = 2048;
                  *(void *)&v41[14] = v29;
                  __int16 v42 = 2080;
                  uint64_t v43 = 0;
                  _os_log_impl(&dword_1985F2000, v28, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::Blocked known tracking query parameters: %s", v41, 0x20u);
                }
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2) {
                    WTF::StringImpl::destroy(v35, v25);
                  }
                  else {
                    *(_DWORD *)v35 -= 2;
                  }
                }
              }
              uint64_t v30 = *(WTF::StringImpl **)buf;
              if (*(void *)buf) {
                **(_DWORD **)buf += 2;
              }
              *(void *)a4 = v30;
              long long v31 = v40;
              *(_OWORD *)(a4 + 8) = v39;
              *(_OWORD *)(a4 + 24) = v31;
              *(unsigned char *)(a4 + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 1;
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v25);
              unsigned int v33 = *(WTF::StringImpl **)buf;
              *(void *)buf = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2) {
                  WTF::StringImpl::destroy(v33, v32);
                }
                else {
                  *(_DWORD *)v33 -= 2;
                }
              }
LABEL_28:
              WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
              return;
            }
LABEL_25:
            uint64_t v21 = *(_DWORD **)a2;
            if (*(void *)a2) {
              *v21 += 2;
            }
            *(void *)a4 = v21;
            *(_OWORD *)(a4 + 8) = *(_OWORD *)(a2 + 8);
            *(_OWORD *)(a4 + 24) = *(_OWORD *)(a2 + 24);
            *(unsigned char *)(a4 + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
            goto LABEL_28;
          }
        }
LABEL_14:
        uint64_t active = *(void *)(*(void *)(v9 + 280) + 104);
        if (!active) {
          goto LABEL_25;
        }
        int v14 = *(_DWORD *)(active + 24);
        *(_DWORD *)(active + 24) = v14 + 1;
        uint64_t v17 = (_WORD *)(active + 3514);
        if (a3 == 1 && *(unsigned char *)(active + 3518)) {
          uint64_t v17 = (_WORD *)(active + 3516);
        }
        if ((*v17 & 0x100) == 0)
        {
          unint64_t v18 = *(void *)(*(void *)(a1[6] + 112) + 680);
          if (v14)
          {
            *(_DWORD *)(active + 24) = v14;
            if ((v18 & 0x10000) == 0) {
              goto LABEL_25;
            }
            goto LABEL_41;
          }
          uint64_t v20 = (v18 >> 16) & 1;
          goto LABEL_24;
        }
        if (!v14)
        {
          LOBYTE(v2WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 1;
LABEL_24:
          (*(void (**)(uint64_t))(*(void *)active + 24))(active);
          if ((v20 & 1) == 0) {
            goto LABEL_25;
          }
          goto LABEL_41;
        }
        goto LABEL_40;
      }
    }
  }
LABEL_6:
  uint64_t v10 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v10 += 2;
  }
  *(void *)a4 = v10;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a4 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a4 + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
}

void sub_198F04A7C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  uint64_t v22 = a13;
  a13 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v21);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v19);
  _Unwind_Resume(a1);
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::DidApplyLinkDecorationFiltering>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1893;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2[1]);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void sub_198F04C40(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

__n128 WebKit::WebPage::allowedQueryParametersForAdvancedPrivacyProtections@<Q0>(WebKit::WebPage *this@<X0>, const WTF::URL *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *((void *)this + 306);
  if (!v5 || !*(_DWORD *)(v5 - 12))
  {
    uint64_t v28 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1985F2000, v28, OS_LOG_TYPE_ERROR, "Unable to hide query parameters from script (missing data)", buf, 2u);
    }
    uint64_t v29 = *(_DWORD **)a2;
    if (*(void *)a2) {
      *v29 += 2;
    }
    *(void *)a3 = v29;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)((char *)a2 + 8);
    __n128 result = *(__n128 *)((char *)a2 + 24);
    *(__n128 *)(a3 + 24) = result;
    return result;
  }
  unsigned int v7 = *((_DWORD *)a2 + 9);
  uint64_t v8 = *(_DWORD **)a2;
  if (v7 > *((_DWORD *)a2 + 8))
  {
    if (!v8) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v9 = (__n128 *)((char *)a2 + 8);
    if ((*((unsigned char *)a2 + 8) & 1) == 0)
    {
      if (!v8) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    if (!v8)
    {
LABEL_8:
      *(void *)a3 = v8;
      __n128 result = *v9;
      long long v11 = *(_OWORD *)((char *)a2 + 24);
      *(__n128 *)(a3 + 8) = *v9;
      *(_OWORD *)(a3 + 24) = v11;
      return result;
    }
    if (v8[1] <= v7)
    {
LABEL_7:
      *v8 += 2;
      goto LABEL_8;
    }
  }
  *v8 += 2;
LABEL_12:
  *(void *)a3 = v8;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)((char *)a2 + 24);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)buf, (const WTF::URL *)a3);
  uint64_t v13 = *((void *)this + 306);
  if (v13
    && (unsigned int v14 = *(_DWORD *)(v13 - 8),
        uint64_t v15 = WTF::ASCIICaseInsensitiveHash::hash(*(WTF::ASCIICaseInsensitiveHash **)buf, v12) & v14,
        unint64_t v16 = (WTF **)(v13 + 16 * v15),
        (WTF::equal(*v16, 0, v17) & 1) == 0))
  {
    int v30 = 1;
    while (*v16 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v16, *(const WTF::StringImpl **)buf, v18) & 1) == 0)
    {
      uint64_t v15 = (v15 + v30) & v14;
      unint64_t v16 = (WTF **)(v13 + 16 * v15);
      ++v30;
      if (WTF::equal(*v16, 0, v18)) {
        goto LABEL_14;
      }
    }
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v33, (void **)(v13 + 16 * v15 + 8));
  }
  else
  {
LABEL_14:
    unsigned int v33 = 0;
  }
  uint64_t v19 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v12);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v22 = *(WTF::StringImpl **)buf;
  long long v32 = *(WTF::StringImpl **)buf;
  if (v33)
  {
    BOOL v23 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)&v33, &v32, v21) != 0;
    uint64_t v22 = v32;
  }
  else
  {
    BOOL v23 = 0;
  }
  long long v32 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v20);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  if (!v23) {
    WTF::URL::removeFragmentIdentifier((WTF::URL *)a3);
  }
  char v24 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v24 = &unk_1EE9DD8D8;
  v24[1] = &v33;
  *(void *)buf = v24;
  WTF::removeQueryParameters();
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v25);
  uint64_t v27 = *(const WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v27) {
    (*(void (**)(const WTF::StringImpl *))(*(void *)v27 + 8))(v27);
  }
  if (v33) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v33, v26);
  }
  return result;
}

void sub_198F04F38(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl **a12, WTF::StringImpl *a13)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a12, a2);
  }
  WTF::URL::~URL(v13);
  _Unwind_Resume(a1);
}

void sub_198F04FCC()
{
}

uint64_t WebKit::WebPage::setMediaEnvironment(WebKit::WebPage *this, WTF::StringImpl **a2)
{
  WTF::String::operator=((uint64_t *)this + 309, a2);
  {
    uint64_t v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  uint64_t result = WebKit::WebProcess::singleton(void)::process;
  uint64_t v5 = *(void *)(WebKit::WebProcess::singleton(void)::process + 336);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 5);
    v9[1] = (uint64_t *)a2;
    uint64_t v10 = v6;
    uint64_t v7 = *(void *)(v5 + 32);
    v9[0] = &v10;
    return IPC::Connection::send<Messages::GPUConnectionToWebProcess::SetMediaEnvironment>(v7, v9, 0, 0, 0);
  }
  return result;
}

uint64_t WebKit::WebPage::willBeginWritingToolsSession(uint64_t a1)
{
  return MEMORY[0x1F4172820](*(void *)(a1 + 48));
}

uint64_t WebKit::WebPage::didBeginWritingToolsSession(uint64_t a1)
{
  return MEMORY[0x1F41727C8](*(void *)(a1 + 48));
}

uint64_t WebKit::WebPage::proofreadingSessionDidReceiveSuggestions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  WebCore::Page::proofreadingSessionDidReceiveSuggestions();

  return WTF::CompletionHandler<void ()(void)>::operator()(a7);
}

uint64_t WebKit::WebPage::proofreadingSessionDidUpdateStateForSuggestion(uint64_t a1)
{
  return MEMORY[0x1F4172918](*(void *)(a1 + 48));
}

uint64_t WebKit::WebPage::willEndWritingToolsSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebCore::Page::willEndWritingToolsSession();

  return WTF::CompletionHandler<void ()(void)>::operator()(a4);
}

uint64_t WebKit::WebPage::compositionSessionDidReceiveTextWithReplacementRange(uint64_t a1)
{
  return MEMORY[0x1F4172928](*(void *)(a1 + 48));
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::RemoveTextAnimationForAnimationID>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2040;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  IPC::ArgumentCoder<WTF::UUID,void>::encode(v5, *a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v12, 0);
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v10, v11);
  }
  return v7;
}

void sub_198F05234(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::createTextIndicatorForTextAnimationID(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = *(const WTF::UUID **)(a1 + 2480);
  WebKit::TextAnimationController::contextRangeForTextAnimationID((WebKit::TextAnimationController *)v20, v4, a2);
  if (v20[32])
  {
    WebKit::TextAnimationController::createTextIndicatorForRange((WebCore::TextIndicatorData *)v12, v4, (uint64_t)v20);
    WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>::operator()(a3);
  }
  else
  {
    v12[0] = 0;
    char v19 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>::operator()(a3);
  }
  if (v19)
  {
    if ((v18 & 0x8000000000000) != 0)
    {
      long long v11 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v5);
      }
    }
    uint64_t v6 = v17;
    uint64_t v17 = 0;
    if (v6)
    {
      if (v6[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
      else {
        --v6[2];
      }
    }
    uint64_t v7 = v16;
    unint64_t v16 = 0;
    if (v7)
    {
      if (v7[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
      }
      else {
        --v7[2];
      }
    }
    uint64_t v8 = v15;
    uint64_t v15 = 0;
    if (v8)
    {
      if (v8[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
      }
      else {
        --v8[2];
      }
    }
    uint64_t v9 = v13;
    if (v13)
    {
      uint64_t v13 = 0;
      int v14 = 0;
      WTF::fastFree(v9, v5);
    }
  }
  return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20);
}

void sub_198F053E8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, uint64_t a17, _DWORD *a18, _DWORD *a19, _DWORD *a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a23)
  {
    if ((a21 & 0x8000000000000) != 0)
    {
      int v25 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, a2);
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a18)
    {
      if (a18[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a18 + 8))(a18);
      }
      else {
        --a18[2];
      }
    }
    if (a15) {
      WTF::fastFree(a15, a2);
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v23 - 56);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::updateUnderlyingTextVisibilityForTextAnimationID(uint64_t a1, const WTF::UUID *a2, int a3, uint64_t *a4)
{
  return WebKit::TextAnimationController::updateUnderlyingTextVisibilityForTextAnimationID(*(uint64_t **)(a1 + 2480), a2, a3, a4);
}

void WebKit::WebPage::enableSourceTextAnimationAfterElementWithID(WebKit::WebPage *this, const WTF::String *a2)
{
  uint64_t v3 = (uint64_t *)*((void *)this + 310);
  WebKit::TextAnimationController::document((uint64_t)&v23, *v3);
  uint64_t v5 = v23;
  if (v23)
  {
    uint64_t v6 = *(void *)(v23 + 1304);
    if (!v6)
    {
LABEL_18:
      if (*(_DWORD *)(v5 + 28) == 2)
      {
        if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v5);
        }
      }
      else
      {
        *(_DWORD *)(v5 + 28) -= 2;
      }
      return;
    }
    *(_DWORD *)(v6 + 28) += 2;
    WebCore::VisibleSelection::selectionFromContentsOfNode(v22, (WebCore::VisibleSelection *)v6, v4);
    WebCore::VisibleSelection::range(&v19, (WebCore::VisibleSelection *)v22);
    if (!v21) {
      goto LABEL_16;
    }
    WebCore::TreeScope::getElementById((uint64_t *)&v18, (WebCore::TreeScope *)(v5 + 104), a2);
    if (v18)
    {
      WebCore::makeRangeSelectingNodeContents((uint64_t *)&v14, v18, v7);
      uint64_t v8 = (uint64_t)v16;
      if (v14 != v16 || v15 != v17)
      {
        if (!v21) {
          goto LABEL_30;
        }
        v16[7] += 2;
        uint64_t v9 = v19;
        uint64_t v19 = v8;
        uint64_t v24 = v9;
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v24);
        int v20 = v17;
      }
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v16);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v14);
      uint64_t v10 = v18;
      uint64_t v18 = 0;
      if (v10)
      {
        if (*((_DWORD *)v10 + 7) == 2)
        {
          if ((*((_WORD *)v10 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v10);
          }
        }
        else
        {
          *((_DWORD *)v10 + 7) -= 2;
        }
      }
    }
    if (v21)
    {
      WebCore::createLiveRange();
      uint64_t v11 = (uint64_t)v14;
      int v14 = 0;
      uint64_t v12 = (_DWORD *)v3[18];
      v3[18] = v11;
      if (!v12) {
        goto LABEL_16;
      }
      int v13 = v12[2] - 1;
      if (v12[2] != 1) {
        goto LABEL_15;
      }
      (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
      uint64_t v12 = v14;
      int v14 = 0;
      if (v12)
      {
        int v13 = v12[2] - 1;
        if (v12[2] != 1)
        {
LABEL_15:
          void v12[2] = v13;
          goto LABEL_16;
        }
        (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
      }
LABEL_16:
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19);
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v22);
      if (*(_DWORD *)(v6 + 28) == 2)
      {
        if ((*(_WORD *)(v6 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v6);
        }
      }
      else
      {
        *(_DWORD *)(v6 + 28) -= 2;
      }
      goto LABEL_18;
    }
LABEL_30:
    __break(1u);
  }
}

void sub_198F0574C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebCore::Node *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14)
  {
    if (*((_DWORD *)a14 + 7) == 2)
    {
      if ((*((_WORD *)a14 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a14);
      }
    }
    else
    {
      *((_DWORD *)a14 + 7) -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a15);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a20);
  if (*(_DWORD *)(v21 + 28) == 2)
  {
    if ((*(_WORD *)(v21 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v21);
    }
  }
  else
  {
    *(_DWORD *)(v21 + 28) -= 2;
  }
  if (*(_DWORD *)(v20 + 28) == 2)
  {
    if ((*(_WORD *)(v20 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v20);
    }
  }
  else
  {
    *(_DWORD *)(v20 + 28) -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::enableTextAnimationTypeForElementWithID(WebKit::WebPage *this, const WTF::String *a2)
{
  uint64_t v3 = (uint64_t *)*((void *)this + 310);
  uint64_t result = WebKit::TextAnimationController::document((uint64_t)&v14, *v3);
  uint64_t v5 = v14;
  if (v14)
  {
    WebCore::TreeScope::getElementById((uint64_t *)&v13, (WebCore::TreeScope *)(v14 + 104), a2);
    uint64_t result = (uint64_t)v13;
    if (v13)
    {
      WebCore::makeRangeSelectingNodeContents(&v9, v13, v6);
      if (v9 != v11 || v10 != v12)
      {
        WebCore::createLiveRange();
        uint64_t v7 = (_DWORD *)v3[18];
        v3[18] = v8;
        if (v7)
        {
          if (v7[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
          }
          else {
            --v7[2];
          }
        }
      }
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v9);
      uint64_t result = (uint64_t)v13;
      int v13 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 28) == 2)
        {
          if ((*(_WORD *)(result + 34) & 0x400) == 0) {
            uint64_t result = WebCore::Node::removedLastRef((WebCore::Node *)result);
          }
        }
        else
        {
          *(_DWORD *)(result + 28) -= 2;
        }
      }
    }
    if (*(_DWORD *)(v5 + 28) == 2)
    {
      if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
    }
    else
    {
      *(_DWORD *)(v5 + 28) -= 2;
    }
  }
  return result;
}

void sub_198F0597C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WebCore::Node *a15)
{
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v16);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a11);
  uint64_t v18 = a15;
  a15 = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 7) == 2)
    {
      if ((*((_WORD *)v18 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v18);
      }
    }
    else
    {
      *((_DWORD *)v18 + 7) -= 2;
    }
  }
  if (*(_DWORD *)(v15 + 28) == 2)
  {
    if ((*(_WORD *)(v15 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v15);
    }
  }
  else
  {
    *(_DWORD *)(v15 + 28) -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::proofreadingSessionSuggestionTextRectsInRootViewCoordinates(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::Page::proofreadingSessionSuggestionTextRectsInRootViewCoordinates();
  WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a3);
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return WTF::fastFree(v6, v4);
  }
  return result;
}

void sub_198F05A4C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::updateTextVisibilityForActiveWritingToolsSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WebCore::Page::updateTextVisibilityForActiveWritingToolsSession();

  return WTF::CompletionHandler<void ()(void)>::operator()(a5);
}

uint64_t WebKit::WebPage::textPreviewDataForActiveWritingToolsSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::Page::textPreviewDataForActiveWritingToolsSession();
  uint64_t result = WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>::operator()(a3);
  if (v12)
  {
    if ((*(void *)v11 & 0x8000000000000) != 0)
    {
      uint64_t v6 = (unsigned int *)(*(void *)v11 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v5);
      }
    }
    if (v10)
    {
      if (v10[2] == 1) {
        (*(void (**)())(*(void *)v10 + 8))();
      }
      else {
        --v10[2];
      }
    }
    if (v9)
    {
      if (v9[2] == 1) {
        (*(void (**)())(*(void *)v9 + 8))();
      }
      else {
        --v9[2];
      }
    }
    if (v8)
    {
      if (v8[2] == 1) {
        (*(void (**)())(*(void *)v8 + 8))();
      }
      else {
        --v8[2];
      }
    }
    uint64_t result = (uint64_t)v7;
    if (v7) {
      return WTF::fastFree(v7, v5);
    }
  }
  return result;
}

void sub_198F05BF8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a24)
  {
    if ((a22 & 0x8000000000000) != 0)
    {
      int v25 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, a2);
      }
    }
    if (a21)
    {
      if (a21[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a21 + 8))(a21);
      }
      else {
        --a21[2];
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a16) {
      WTF::fastFree(a16, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::decorateTextReplacementsForActiveWritingToolsSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::Page::decorateTextReplacementsForActiveWritingToolsSession();

  return WTF::CompletionHandler<void ()(void)>::operator()(a3);
}

uint64_t WebKit::WebPage::setSelectionForActiveWritingToolsSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::Page::setSelectionForActiveWritingToolsSession();

  return WTF::CompletionHandler<void ()(void)>::operator()(a3);
}

unsigned int *WebKit::WebPage::createTextIndicatorForElementWithID(uint64_t a1, const WTF::String *a2, uint64_t *a3)
{
  WebCore::Page::checkedFocusController((uint64_t *)v60, *(WebCore::Page **)(a1 + 48));
  uint64_t v5 = WebCore::FocusController::focusedOrMainFrame(v60[0]);
  uint64_t v6 = v5;
  if (v5) {
    atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
  }
  uint64_t v7 = v60[0];
  v60[0] = 0;
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198F06520);
    }
    --*(_DWORD *)v7;
  }
  if (v5)
  {
    uint64_t v8 = *(void *)(v5 + 296);
    if (!v8)
    {
      LOBYTE(v60[0]) = 0;
      char v67 = 0;
      WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>::operator()(a3);
      if (v67)
      {
        if ((v66 & 0x8000000000000) != 0)
        {
          uint64_t v48 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v48);
            WTF::fastFree((WTF *)v48, v38);
          }
        }
        long long v39 = v65;
        unsigned __int8 v65 = 0;
        if (v39)
        {
          if (v39[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v39 + 8))(v39);
          }
          else {
            --v39[2];
          }
        }
        uint64_t v45 = v64;
        uint64_t v64 = 0;
        if (v45)
        {
          if (v45[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v45 + 8))(v45);
          }
          else {
            --v45[2];
          }
        }
        uint64_t v46 = v63;
        char v63 = 0;
        if (v46)
        {
          if (v46[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v46 + 8))(v46);
          }
          else {
            --v46[2];
          }
        }
        int v47 = v61;
        if (v61)
        {
          uint64_t v61 = 0;
          int v62 = 0;
          WTF::fastFree(v47, v38);
        }
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
    }
    *(_DWORD *)(v8 + 28) += 2;
    WebCore::TreeScope::getElementById((uint64_t *)&v59, (WebCore::TreeScope *)(v8 + 104), a2);
    uint64_t v9 = v59;
    if (!v59 || (*((_WORD *)v59 + 16) & 0x70) == 0)
    {
      LOBYTE(v60[0]) = 0;
      char v67 = 0;
      WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>::operator()(a3);
      if (v67)
      {
        if ((v66 & 0x8000000000000) != 0)
        {
          uint64_t v43 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v43);
            WTF::fastFree((WTF *)v43, v16);
          }
        }
        int v17 = v65;
        unsigned __int8 v65 = 0;
        if (v17)
        {
          if (v17[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v17 + 8))(v17);
          }
          else {
            --v17[2];
          }
        }
        uint64_t v20 = v64;
        uint64_t v64 = 0;
        if (v20)
        {
          if (v20[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v20 + 8))(v20);
          }
          else {
            --v20[2];
          }
        }
        uint64_t v21 = v63;
        char v63 = 0;
        if (v21)
        {
          if (v21[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v21 + 8))(v21);
          }
          else {
            --v21[2];
          }
        }
        uint64_t v22 = v61;
        if (v61)
        {
          uint64_t v61 = 0;
          int v62 = 0;
          WTF::fastFree(v22, v16);
        }
      }
      goto LABEL_108;
    }
    *((_DWORD *)v59 + 7) += 2;
    uint64_t v10 = *((void *)v9 + 14);
    if (v10 && *(void *)(v10 + 8))
    {
      WebCore::StyleProperties::getPropertyCSSValue();
      uint64_t v11 = v60[0];
      if (v60[0])
      {
        v60[0] = 0;
        if (*(_DWORD *)v11 == 2) {
          MEMORY[0x19973AFD0]();
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      char v15 = 0;
    }
    else
    {
      char v15 = 1;
    }
    WebCore::StyledElement::setInlineStyleProperty();
    WebCore::makeRangeSelectingNodeContents(v57, v9, v23);
    WebCore::TextIndicator::createWithRange();
    if (v56)
    {
      if (v15) {
        WebCore::StyledElement::removeInlineStyleProperty();
      }
      else {
        WebCore::StyledElement::setInlineStyleProperty();
      }
      WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v49, (const WebCore::TextIndicatorData *)(v56 + 8));
      WebCore::TextIndicatorData::TextIndicatorData((uint64_t)v60, v49);
      char v67 = 1;
      WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>::operator()(a3);
      if (v67)
      {
        if ((v66 & 0x8000000000000) != 0)
        {
          __int16 v42 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v42);
            WTF::fastFree((WTF *)v42, v24);
          }
        }
        uint64_t v26 = v65;
        unsigned __int8 v65 = 0;
        if (v26)
        {
          if (v26[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v26 + 8))(v26);
          }
          else {
            --v26[2];
          }
        }
        uint64_t v27 = v64;
        uint64_t v64 = 0;
        if (v27)
        {
          if (v27[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v27 + 8))(v27);
          }
          else {
            --v27[2];
          }
        }
        uint64_t v28 = v63;
        char v63 = 0;
        if (v28)
        {
          if (v28[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v28 + 8))(v28);
          }
          else {
            --v28[2];
          }
        }
        uint64_t v29 = v61;
        if (v61)
        {
          uint64_t v61 = 0;
          int v62 = 0;
          WTF::fastFree(v29, v24);
        }
      }
      if ((v55 & 0x8000000000000) != 0)
      {
        long long v40 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v40);
          WTF::fastFree((WTF *)v40, v24);
        }
      }
      int v30 = v54;
      uint64_t v54 = 0;
      if (v30)
      {
        if (v30[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v30 + 8))(v30);
        }
        else {
          --v30[2];
        }
      }
      uint64_t v31 = v53;
      uint64_t v53 = 0;
      if (v31)
      {
        if (v31[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v31 + 8))(v31);
        }
        else {
          --v31[2];
        }
      }
      long long v32 = v52;
      unsigned int v52 = 0;
      if (v32)
      {
        if (v32[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v32 + 8))(v32);
        }
        else {
          --v32[2];
        }
      }
      unsigned int v33 = v50;
      if (!v50) {
        goto LABEL_104;
      }
      unint64_t v50 = 0;
      int v51 = 0;
    }
    else
    {
      LOBYTE(v60[0]) = 0;
      char v67 = 0;
      WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>::operator()(a3);
      if (!v67) {
        goto LABEL_104;
      }
      if ((v66 & 0x8000000000000) != 0)
      {
        uint64_t v44 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v44);
          WTF::fastFree((WTF *)v44, v24);
        }
      }
      int v25 = v65;
      unsigned __int8 v65 = 0;
      if (v25)
      {
        if (v25[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v25 + 8))(v25);
        }
        else {
          --v25[2];
        }
      }
      uint64_t v34 = v64;
      uint64_t v64 = 0;
      if (v34)
      {
        if (v34[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v34 + 8))(v34);
        }
        else {
          --v34[2];
        }
      }
      int v35 = v63;
      char v63 = 0;
      if (v35)
      {
        if (v35[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v35 + 8))(v35);
        }
        else {
          --v35[2];
        }
      }
      unsigned int v33 = v61;
      if (!v61) {
        goto LABEL_104;
      }
      uint64_t v61 = 0;
      int v62 = 0;
    }
    WTF::fastFree(v33, v24);
LABEL_104:
    uint64_t v36 = (WebCore::TextIndicator *)v56;
    uint64_t v56 = 0;
    if (v36) {
      WTF::RefCounted<WebCore::TextIndicator>::deref(v36);
    }
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v58);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v57);
    if (*((_DWORD *)v9 + 7) == 2)
    {
      if ((*((_WORD *)v9 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v9);
      }
    }
    else
    {
      *((_DWORD *)v9 + 7) -= 2;
    }
LABEL_108:
    int v37 = v59;
    uint64_t v59 = 0;
    if (v37)
    {
      if (*((_DWORD *)v37 + 7) == 2)
      {
        if ((*((_WORD *)v37 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v37);
        }
      }
      else
      {
        *((_DWORD *)v37 + 7) -= 2;
      }
    }
    if (*(_DWORD *)(v8 + 28) == 2)
    {
      if ((*(_WORD *)(v8 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
      }
    }
    else
    {
      *(_DWORD *)(v8 + 28) -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
  }
  LOBYTE(v60[0]) = 0;
  char v67 = 0;
  uint64_t result = (unsigned int *)WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>::operator()(a3);
  if (v67)
  {
    if ((v66 & 0x8000000000000) != 0)
    {
      int v41 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v41);
        WTF::fastFree((WTF *)v41, v13);
      }
    }
    uint64_t v14 = v65;
    unsigned __int8 v65 = 0;
    if (v14)
    {
      if (v14[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v14 + 8))(v14);
      }
      else {
        --v14[2];
      }
    }
    uint64_t v18 = v64;
    uint64_t v64 = 0;
    if (v18)
    {
      if (v18[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
      }
      else {
        --v18[2];
      }
    }
    uint64_t v19 = v63;
    char v63 = 0;
    if (v19)
    {
      if (v19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v19 + 8))(v19);
      }
      else {
        --v19[2];
      }
    }
    uint64_t result = (unsigned int *)v61;
    if (v61)
    {
      uint64_t v61 = 0;
      int v62 = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, v13);
    }
  }
  return result;
}

void sub_198F06718(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,WebCore::Node *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,WTF *a36,int a37,uint64_t a38,_DWORD *a39,_DWORD *a40,_DWORD *a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a44)
  {
    if ((a42 & 0x8000000000000) != 0)
    {
      int v47 = (unsigned int *)(a42 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a42 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, a2);
      }
    }
    if (a41)
    {
      if (a41[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a41 + 8))(a41);
      }
      else {
        --a41[2];
      }
    }
    if (a40)
    {
      if (a40[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a40 + 8))(a40);
      }
      else {
        --a40[2];
      }
    }
    if (a39)
    {
      if (a39[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a39 + 8))(a39);
      }
      else {
        --a39[2];
      }
    }
    if (a36) {
      WTF::fastFree(a36, a2);
    }
  }
  if (a29)
  {
    if (*((_DWORD *)a29 + 7) == 2)
    {
      if ((*((_WORD *)a29 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a29);
      }
    }
    else
    {
      *((_DWORD *)a29 + 7) -= 2;
    }
  }
  if (*(_DWORD *)(v45 + 28) == 2)
  {
    if ((*(_WORD *)(v45 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v45);
    }
  }
  else
  {
    *(_DWORD *)(v45 + 28) -= 2;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v44 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebKit::TextAnimationUnanimatedRangeData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(a1 + 32));
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(a1 + 16));
  }
  return a1;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, const void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore14DocumentMarker13DictationDataENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIP11objc_objectEENS8_6RefPtrINSA_4NodeENS8_12RawPtrTraitsISM_EENS8_21DefaultRefDerefTraitsISM_EEEENSB_30WritingToolsTextSuggestionDataENSB_22TransparentContentDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS9_SC_SG_SK_SR_SS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

WTF *WebKit::OverridePasteboardForSelectionReplacement::OverridePasteboardForSelectionReplacement(uint64_t a1, uint64_t a2, char *a3, WTF *a4)
{
  uint64_t result = (WTF *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2);
  uint64_t v9 = *(unsigned int *)(a2 + 12);
  if (!v9) {
    return (WTF *)a1;
  }
  uint64_t v10 = *(WTF::StringImpl ***)a2;
  uint64_t v11 = &v10[v9];
  while (1)
  {
    {
      WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides = 0;
    }
    if ((byte_1EB359D21 & 1) == 0)
    {
      int v17 = (WTF *)"ReplaceSelectionPasteboard";
      uint64_t v18 = 27;
      uint64_t result = (WTF *)WTF::NeverDestroyed<WTF::String,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1EB359D30, (uint64_t)&v17);
      byte_1EB359D21 = 1;
    }
    int v17 = 0;
    LODWORD(v18) = 0;
    HIDWORD(v18) = a4;
    if (!a4) {
      goto LABEL_11;
    }
    if ((unint64_t)a4 >> 32) {
      break;
    }
    char v12 = (WTF *)WTF::fastMalloc(a4);
    LODWORD(v18) = a4;
    int v17 = v12;
    int v13 = a4;
    uint64_t v14 = a3;
    do
    {
      char v15 = *v14++;
      *(unsigned char *)char v12 = v15;
      char v12 = (WTF *)((char *)v12 + 1);
      int v13 = (WTF *)((char *)v13 - 1);
    }
    while (v13);
LABEL_11:
    WebKit::WebPasteboardOverrides::addOverride(&WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides, &qword_1EB359D30, v10, (const WTF::StringImpl *)&v17);
    uint64_t result = v17;
    if (v17)
    {
      int v17 = 0;
      LODWORD(v18) = 0;
      uint64_t result = (WTF *)WTF::fastFree(result, v16);
    }
    if (++v10 == v11) {
      return (WTF *)a1;
    }
  }
  __break(0xC471u);
  return result;
}

void sub_198F07120(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::IgnoreSelectionChangeForScope *WebCore::IgnoreSelectionChangeForScope::IgnoreSelectionChangeForScope(WebCore::IgnoreSelectionChangeForScope *this, WebCore::LocalFrame *a2)
{
  return this;
}

void sub_198F0718C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a22) {
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a9);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::OverridePasteboardForSelectionReplacement::~OverridePasteboardForSelectionReplacement(const WTF::String **this, void *a2)
{
  uint64_t v3 = *((unsigned int *)this + 3);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    uint64_t v5 = *this;
    do
    {
      {
        WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides = 0;
      }
      if ((byte_1EB359D21 & 1) == 0)
      {
        v6[0] = "ReplaceSelectionPasteboard";
        v6[1] = 27;
        WTF::NeverDestroyed<WTF::String,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1EB359D30, (uint64_t)v6);
        byte_1EB359D21 = 1;
      }
      WebKit::WebPasteboardOverrides::removeOverride((WebKit::WebPasteboardOverrides *)&WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides, &qword_1EB359D30, v5);
      uint64_t v5 = (const WTF::String *)((char *)v5 + 8);
      v4 -= 8;
    }
    while (v4);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this, a2);
}

void sub_198F07288(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextAnimationController::removeTransparentMarkersForTextAnimationID(WTF::UUID const&)::$_0,WebCore::FilterMarkerResult,WebCore::RenderedDocumentMarker const&>::call(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 80) == 6) {
    return *(void *)(a2 + 48) == **(void **)(a1 + 8)
  }
        && *(void *)(a2 + 56) == *(void *)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::Detail::CallableWrapper<WebKit::TextAnimationController::addDestinationTextAnimationForActiveWritingToolsSession(WTF::UUID const&,WTF::UUID const&,std::optional<WebCore::CharacterRange> const&,WTF::String const&)::$_0,void,WebCore::TextAnimationRunMode>::~CallableWrapper(v4);
}

void *WTF::Detail::CallableWrapper<WebKit::TextAnimationController::addDestinationTextAnimationForActiveWritingToolsSession(WTF::UUID const&,WTF::UUID const&,std::optional<WebCore::CharacterRange> const&,WTF::String const&)::$_0,void,WebCore::TextAnimationRunMode>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DD810;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextAnimationController::addDestinationTextAnimationForActiveWritingToolsSession(WTF::UUID const&,WTF::UUID const&,std::optional<WebCore::CharacterRange> const&,WTF::String const&)::$_0,void,WebCore::TextAnimationRunMode>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DD810;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextAnimationController::addDestinationTextAnimationForActiveWritingToolsSession(WTF::UUID const&,WTF::UUID const&,std::optional<WebCore::CharacterRange> const&,WTF::String const&)::$_0,void,WebCore::TextAnimationRunMode>::call(uint64_t result, int a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(result + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 8);
      if (v3) {
        return WebKit::TextAnimationController::addInitialTextAnimationForActiveWritingToolsSession(*(WebKit::TextAnimationController **)(v3 + 2464));
      }
    }
  }
  return result;
}

const char *WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(uint64_t *a1, WTF::ASCIILiteralHash *this)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(v2 - 8);
  uint64_t v5 = WTF::ASCIILiteralHash::hash(this, this) & v4;
  uint64_t result = *(const char **)(v2 + 24 * v5);
  if (result)
  {
    uint64_t v7 = *(const char **)this;
    int v8 = 1;
    while (result == (const char *)-1 || !v7 || strcmp(result, v7))
    {
      uint64_t v5 = (v5 + v8) & v4;
      uint64_t result = *(const char **)(v2 + 24 * v5);
      ++v8;
      if (!result) {
        return result;
      }
    }
    return *(const char **)(v2 + 24 * v5 + 16);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v9 = *(void *)(v2 + 8 * i);
      if ((unint64_t)(v9 + 1) >= 2)
      {
        uint64_t v10 = *a1;
        if (*a1) {
          int v11 = *(_DWORD *)(v10 - 8);
        }
        else {
          int v11 = 0;
        }
        unint64_t v12 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
        unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
        unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
        unsigned int v15 = v11 & ((v14 >> 31) ^ v14);
        int v16 = 1;
        do
        {
          unsigned int v17 = v15;
          uint64_t v7 = *(void **)(v10 + 8 * v15);
          unsigned int v15 = (v15 + v16++) & v11;
        }
        while (v7);
        *(void *)(v10 + 8 * v17) = v9;
      }
    }
  }
  else if (!v2)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

BOOL WTF::Detail::CallableWrapper<WebKit::WebPage::clearDictationAlternatives(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,WebCore::FilterMarkerResult,WebCore::DocumentMarker const&>::call(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 80) != 1) {
    return 0;
  }
  uint64_t v2 = **(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(a2 + 32);
  int v4 = *(_DWORD *)(v2 - 8);
  unint64_t v5 = (v3 + ~(v3 << 32)) ^ ((unint64_t)(v3 + ~(v3 << 32)) >> 22);
  unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  unsigned int v8 = v4 & ((v7 >> 31) ^ v7);
  uint64_t v9 = *(void *)(v2 + 8 * v8);
  if (v9 == v3) {
    return 1;
  }
  int v11 = 1;
  do
  {
    BOOL result = v9 != 0;
    if (!v9) {
      break;
    }
    unsigned int v8 = (v8 + v11) & v4;
    uint64_t v9 = *(void *)(v2 + 8 * v8);
    ++v11;
  }
  while (v9 != v3);
  return result;
}

WebCore::EditingStyle *WTF::RefCounted<WebCore::EditingStyle>::deref(WebCore::EditingStyle *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebCore::EditingStyle::~EditingStyle(result);
    return (WebCore::EditingStyle *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::HandleClickForDataDetectionResult>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  unsigned int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v8 = 1981;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v16 = v8;
  uint64_t v9 = *(objc_object ***)a2;
  IPC::encodeObjectDirectly<DDScannerResult>(v8, **(objc_object ***)a2);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v8, v9 + 1);
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v8, *(int **)(a2 + 8));
  uint64_t v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v16, a4);
  unint64_t v12 = v16;
  int v16 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

void sub_198F077F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = (unsigned int **)(v4 + 8 * i);
      uint64_t v11 = *v10;
      if (*v10 != (unsigned int *)-1)
      {
        if (v11)
        {
          uint64_t v12 = *a1;
          if (*a1) {
            int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            int v13 = 0;
          }
          unint64_t v14 = ((unint64_t)v11 + ~((void)v11 << 32)) ^ (((unint64_t)v11 + ~((void)v11 << 32)) >> 22);
          unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
          int v18 = 1;
          do
          {
            unsigned int v19 = v17;
            uint64_t v20 = *(void *)(v12 + 8 * v17);
            unsigned int v17 = (v17 + v18++) & v13;
          }
          while (v20);
          uint64_t v21 = (unsigned int **)(v12 + 8 * v19);
          *uint64_t v21 = 0;
          uint64_t v22 = *v10;
          *uint64_t v10 = 0;
          *uint64_t v21 = v22;
          uint64_t v23 = *v10;
          *uint64_t v10 = 0;
          if (v23) {
            WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v23, v8);
          }
        }
        else
        {
          *uint64_t v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::applyLinkDecorationFilteringWithResult(WTF::URL const&,WebCore::LinkDecorationFilteringTrigger)::$_2,BOOL,WTF::String const&>::call(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 2440);
  if (!v4) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(v4 - 8);
  unsigned int v8 = *((_DWORD *)*a2 + 4);
  int v9 = v8 >= 0x100 ? v8 >> 8 : WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; int v9 = ++i + v11)
  {
    uint64_t v11 = v9 & v7;
    uint64_t v12 = *(WTF **)(v4 + 32 * v11);
    if (v12 != (WTF *)-1)
    {
      if (!v12)
      {
        uint64_t v13 = *(void *)(v3 + 2440);
        if (!v13) {
          return 0;
        }
        uint64_t v14 = v13 + 32 * *(unsigned int *)(v13 - 4);
        goto LABEL_13;
      }
      if (WTF::equal(v12, *a2, a3)) {
        break;
      }
    }
  }
  uint64_t v14 = v4 + 32 * v11;
  uint64_t v13 = *(void *)(v3 + 2440);
  if (!v13) {
    goto LABEL_14;
  }
LABEL_13:
  v13 += 32 * *(unsigned int *)(v13 - 4);
LABEL_14:
  if (v13 == v14) {
    return 0;
  }
  uint64_t v15 = *(void *)(v14 + 8);
  if (v15 && *(_DWORD *)(v15 - 12))
  {
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)v28, *(const WTF::URL **)(a1 + 16));
    int v17 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(v14 + 8), v28);
    int v18 = v28[0];
    v28[0] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v16);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  else
  {
    int v17 = 1;
  }
  uint64_t v20 = *(unsigned int *)(v14 + 28);
  if (v20)
  {
    uint64_t v21 = *(void *)(v14 + 16);
    uint64_t v22 = *(WTF::URL **)(a1 + 16);
    uint64_t v23 = 8 * v20 - 8;
    do
    {
      v28[0] = (WTF::StringImpl *)WTF::URL::path(v22);
      v28[1] = v24;
      uint64_t v25 = WTF::StringView::find();
      BOOL v26 = v25 != -1;
      if (v25 != -1) {
        break;
      }
      uint64_t v27 = v23;
      v23 -= 8;
      v21 += 8;
    }
    while (v27);
  }
  else
  {
    BOOL v26 = 1;
  }
  return v17 & v26;
}

void sub_198F07BB8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL WTF::Detail::CallableWrapper<WebKit::WebPage::allowedQueryParametersForAdvancedPrivacyProtections(WTF::URL const&)::$_0,BOOL,WTF::String const&>::call(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  return !*v3
      || WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(v3, a2, a3) == 0;
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::ProofreadingSessionShowDetailsForSuggestionWithIDRelativeToRect>(uint64_t a1, uint64_t **a2, uint64_t a3, unsigned __int8 a4)
{
  unsigned int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v8 = 2028;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v15 = v8;
  IPC::ArgumentCoder<WTF::UUID,void>::encode(v8, *a2);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v8, a2[1]);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v15, a4);
  uint64_t v11 = v15;
  uint64_t v15 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_198F07D0C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::ProofreadingSessionUpdateStateForSuggestionWithID>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  unsigned int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v8 = 2029;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v15 = v8;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v8, *(unsigned char *)a2);
  IPC::ArgumentCoder<WTF::UUID,void>::encode(v8, *(uint64_t **)(a2 + 8));
  uint64_t v10 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v15, a4);
  uint64_t v11 = v15;
  uint64_t v15 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_198F07E18(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::UUID const&,WebCore::TextAnimationData const&,WebCore::TextIndicatorData const&>,void>::encode<IPC::Encoder,std::tuple<WTF::UUID const&,WebCore::TextAnimationData const&,WebCore::TextIndicatorData const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::TextAnimationData,void>::encode(a1, *(void *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 16);

  return IPC::ArgumentCoder<WebCore::TextIndicatorData,void>::encode(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::AddTextAnimationForAnimationIDWithCompletionHandler,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>(WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DD900;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::AddTextAnimationForAnimationIDWithCompletionHandler,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>(WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DD900;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::AddTextAnimationForAnimationIDWithCompletionHandler,WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>>(WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    if (*a2)
    {
      if ((unsigned __int16)IPC::Decoder::decode<WebCore::WritingDirection>(a2) <= 0xFFu)
      {
        uint64_t v5 = *a2;
        uint64_t v6 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v7 = a2[3];
        if (v7)
        {
          if (v6) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
          }
        }
      }
    }
  }

  return WTF::CompletionHandler<void ()(WebCore::TextAnimationRunMode)>::operator()((uint64_t *)(a1 + 8));
}

void WebKit::WebScreenOrientationManagerProxy::~WebScreenOrientationManagerProxy(WebKit::WebScreenOrientationManagerProxy *this)
{
  WebKit::WebScreenOrientationManagerProxy::unlockIfNecessary(this);
  IPC::MessageReceiverMap::removeMessageReceiver(*(void *)(*((void *)this + 2) + 256) + 152, 0xCAu, *(void *)(*(void *)(*((void *)this + 2) + 32) + 1928));
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebScreenOrientationManagerProxy::~WebScreenOrientationManagerProxy(this);

  WTF::fastFree(v1, v2);
}

unsigned char *WebKit::WebScreenOrientationManagerProxy::unlockIfNecessary(unsigned char *this)
{
  uint64_t v1 = this;
  if (this[26]) {
    this = (unsigned char *)WebKit::WebScreenOrientationManagerProxy::unlock((uint64_t)this);
  }
  if (*((void *)v1 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4[0] = 16;
    char v6 = 1;
    uint64_t v2 = *((void *)v1 + 4);
    *((void *)v1 + 4) = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v2 + 16))(v2, v4);
    this = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
    if (v6)
    {
      this = v5;
      uint64_t v5 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2) {
          return (unsigned char *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v3);
        }
        else {
          *(_DWORD *)this -= 2;
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebScreenOrientationManagerProxy::currentOrientation(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

uint64_t WebKit::WebScreenOrientationManagerProxy::lock(WebKit::WebScreenOrientationManagerProxy *this, int a2, uint64_t *a3)
{
  if (*((void *)this + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    char v6 = v26;
    LOBYTE(v26) = 16;
    uint64_t v27 = v6;
    char v28 = 1;
    uint64_t v7 = *((void *)this + 4);
    *((void *)this + 4) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v7 + 16))(v7, &v26);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    if (v28)
    {
      int v9 = v27;
      uint64_t v27 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v8);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
    }
  }
  WebKit::WebScreenOrientationManagerProxy::platformShouldRejectLockRequest((uint64_t)&v26);
  if (v28)
  {
    v23[0] = (_BYTE)v26;
    uint64_t v10 = v27;
    if (v27) {
      *(_DWORD *)v27 += 2;
    }
    uint64_t v24 = v10;
    char v25 = 1;
    uint64_t v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v11 + 16))(v11, v23);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
    if (v25)
    {
      uint64_t result = (uint64_t)v24;
      uint64_t v24 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    goto LABEL_45;
  }
  uint64_t v14 = *a3;
  *a3 = 0;
  uint64_t result = *((void *)this + 4);
  *((void *)this + 4) = v14;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  unsigned int v15 = *((unsigned __int8 *)this + 24);
  int v16 = a2;
  uint64_t v17 = *((unsigned __int8 *)this + 24);
  switch(v16)
  {
    case 0:
      break;
    case 1:
      uint64_t result = PAL::deviceHasIPadCapability((PAL *)result);
      if (result) {
        unsigned int v18 = 2;
      }
      else {
        unsigned int v18 = 0;
      }
      if (v15 > 1 != result) {
        uint64_t v17 = v18;
      }
      else {
        uint64_t v17 = v15;
      }
      unsigned int v15 = *((unsigned __int8 *)this + 24);
      break;
    case 2:
      if ((v15 & 0xFE) == 2) {
        uint64_t v17 = *((unsigned __int8 *)this + 24);
      }
      else {
        uint64_t v17 = 2;
      }
      break;
    case 4:
      uint64_t v17 = 0;
      break;
    case 5:
      uint64_t v17 = 1;
      break;
    case 6:
      uint64_t v17 = 2;
      break;
    case 7:
      uint64_t v17 = 3;
      break;
    default:
      if (v15 >= 2) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *((unsigned __int8 *)this + 24);
      }
      break;
  }
  if (*((unsigned char *)this + 26) && v17 == *((unsigned __int8 *)this + 25)) {
    goto LABEL_42;
  }
  uint64_t v19 = *((void *)this + 2);
  uint64_t v20 = *(void *)(v19 + 408);
  if (!v20
    || (int v21 = (*(uint64_t (**)(void))(**(void **)(v20 + 32) + 24))(*(void *)(v20 + 32)),
        uint64_t v19 = *((void *)this + 2),
        !v21))
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v19 + 104) + 264))(*(void *)(v19 + 104), v19, v17);
    if ((result & 1) == 0) {
      goto LABEL_40;
    }
LABEL_42:
    *(_WORD *)((char *)this + 25) = v17 | 0x100;
    if (v15 != v17) {
      return result;
    }
    LOBYTE(v26) = 0;
    char v28 = 0;
    goto LABEL_44;
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(v19 + 408) + 32) + 64))(*(void *)(*(void *)(v19 + 408) + 32), v17);
  if (result) {
    goto LABEL_42;
  }
LABEL_40:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v26) = 6;
  char v28 = 1;
LABEL_44:
  uint64_t v22 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v22 + 16))(v22, &v26);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 8))(v22);
LABEL_45:
  if (v28)
  {
    uint64_t result = (uint64_t)v27;
    uint64_t v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebScreenOrientationManagerProxy::unlock(uint64_t this)
{
  if (*(unsigned char *)(this + 26))
  {
    uint64_t v1 = this;
    if (*(void *)(this + 32))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v8[0] = 16;
      char v10 = 1;
      uint64_t v2 = *(void *)(v1 + 32);
      *(void *)(v1 + 32) = 0;
      (*(void (**)(uint64_t, char *))(*(void *)v2 + 16))(v2, v8);
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
      if (v10)
      {
        uint64_t v4 = v9;
        int v9 = 0;
        if (v4)
        {
          if (*(_DWORD *)v4 == 2) {
            WTF::StringImpl::destroy(v4, v3);
          }
          else {
            *(_DWORD *)v4 -= 2;
          }
        }
      }
    }
    uint64_t v5 = *(void *)(v1 + 16);
    uint64_t v6 = *(void *)(v5 + 408);
    if (v6
      && (int v7 = (*(uint64_t (**)(void))(**(void **)(v6 + 32) + 24))(*(void *)(v6 + 32)),
          uint64_t v5 = *(void *)(v1 + 16),
          v7))
    {
      this = (*(uint64_t (**)(void))(**(void **)(*(void *)(v5 + 408) + 32) + 72))(*(void *)(*(void *)(v5 + 408) + 32));
    }
    else
    {
      this = (*(uint64_t (**)(void))(**(void **)(v5 + 104) + 272))(*(void *)(v5 + 104));
    }
    if (*(unsigned char *)(v1 + 26)) {
      *(unsigned char *)(v1 + 26) = 0;
    }
  }
  return this;
}

uint64_t WebKit::WebScreenOrientationManagerProxy::setShouldSendChangeNotification(uint64_t this, char a2)
{
  *(unsigned char *)(this + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = a2;
  return this;
}

void WebKit::WebURLSchemeHandler::~WebURLSchemeHandler(WebKit::WebURLSchemeHandler *this, void *a2)
{
  *(void *)this = &unk_1EE9DD960;
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v5, a2);
  }
}

uint64_t WebKit::WebURLSchemeHandler::startTask(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v22 = *(void *)(a5 + 8);
  uint64_t v12 = a1 + 3;
  uint64_t v13 = *(void *)(*(void *)(a2 + 32) + 760);
  v20[0] = v22;
  v20[1] = v13;
  uint64_t v14 = API::Object::newObject(0x228uLL, 103);
  v18[0] = WebKit::WebURLSchemeTask::WebURLSchemeTask(v14, (uint64_t)a1, a2, a3, a4, a5, a6);
  WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>(v12, v20, v18, (uint64_t)v21);
  uint64_t v15 = v18[0];
  v18[0] = 0;
  if (v15) {
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  v18[0] = *(void *)(*(void *)(a2 + 32) + 760);
  uint64_t v19 = 0;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>(a1 + 4, v18, &v19, (uint64_t)v20);
  if (v19) {
    WTF::fastFree((WTF *)(v19 - 16), v16);
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::add((uint64_t *)(v20[0] + 8), &v22, (uint64_t)v18);
  return (*(uint64_t (**)(uint64_t *, uint64_t, void))(*a1 + 24))(a1, a2, *(void *)(v21[0] + 16));
}

void WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  unsigned int v12 = WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::hash(*a2, v11) & v9;
  uint64_t v13 = (uint64_t *)(v8 + 24 * v12);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (*(_OWORD *)v13 != 0)
  {
    int v16 = 0;
    int v17 = 1;
    do
    {
      if (v14 == v10 && v15 == v11)
      {
        char v26 = 0;
        uint64_t v27 = v8 + 24 * *(unsigned int *)(v8 - 4);
        goto LABEL_29;
      }
      if (v14 == -1) {
        int v16 = v13;
      }
      unsigned int v12 = (v12 + v17) & v9;
      uint64_t v13 = (uint64_t *)(v8 + 24 * v12);
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      ++v17;
    }
    while (*(_OWORD *)v13 != 0);
    if (v16)
    {
      *int v16 = 0;
      v16[1] = 0;
      void v16[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v10 = *a2;
      uint64_t v13 = v16;
    }
  }
  *uint64_t v13 = v10;
  v13[1] = a2[1];
  uint64_t v18 = *a3;
  *a3 = 0;
  uint64_t v19 = v13[2];
  void v13[2] = v18;
  if (v19) {
    CFRelease(*(CFTypeRef *)(v19 + 8));
  }
  uint64_t v20 = *a1;
  if (*a1) {
    int v21 = *(_DWORD *)(v20 - 12) + 1;
  }
  else {
    int v21 = 1;
  }
  *(_DWORD *)(v20 - 12) = v21;
  uint64_t v22 = *a1;
  if (*a1) {
    int v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
  unint64_t v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_23:
      uint64_t v13 = (uint64_t *)WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1, v13);
      uint64_t v22 = *a1;
      if (*a1) {
        LODWORD(v25) = *(_DWORD *)(v22 - 4);
      }
      else {
        LODWORD(v25) = 0;
      }
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_23;
  }
  uint64_t v27 = v22 + 24 * v25;
  char v26 = 1;
LABEL_29:
  *(void *)a4 = v13;
  *(void *)(a4 + 8) = v27;
  *(unsigned char *)(a4 + 16) = v26;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  int v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = *(unsigned int *)(v8 - 4);
        }
        char v29 = 0;
        uint64_t v30 = v8 + 16 * v24;
        goto LABEL_31;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      int v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      int v16 = v18;
    }
  }
  *int v16 = v11;
  uint64_t v20 = *a3;
  *a3 = 0;
  uint64_t v21 = v16[1];
  v16[1] = v20;
  if (v21) {
    uint64_t result = (uint64_t *)WTF::fastFree((WTF *)(v21 - 16), a2);
  }
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v25 = *v6;
  if (*v6) {
    int v26 = *(_DWORD *)(v25 - 12);
  }
  else {
    int v26 = 0;
  }
  uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
  unint64_t v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_24:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
      int v16 = result;
      uint64_t v25 = *v6;
      if (*v6) {
        unint64_t v28 = *(unsigned int *)(v25 - 4);
      }
      else {
        unint64_t v28 = 0;
      }
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_24;
  }
  uint64_t v30 = v25 + 16 * v28;
  char v29 = 1;
LABEL_31:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v30;
  *(unsigned char *)(a4 + 16) = v29;
  return result;
}

void WebKit::WebURLSchemeHandler::stopAllTasksForPage(WebKit::WebURLSchemeHandler *this, WebKit::WebPageProxy *a2, WebKit::WebProcessProxy *a3)
{
  int v35 = *(WTF **)(*((void *)a2 + 4) + 760);
  uint64_t v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 4, &v35);
  uint64_t v7 = v6;
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    v8 += 16 * *(unsigned int *)(v8 - 4);
  }
  if (v8 != v6)
  {
    int v35 = 0;
    uint64_t v36 = 0;
    char v9 = *(uint64_t **)(v6 + 8);
    if (!v9) {
      goto LABEL_45;
    }
    uint64_t v10 = *((unsigned int *)v9 - 3);
    if (v10)
    {
      if (v10 >> 29)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v11 = (WTF *)WTF::fastMalloc((WTF *)(8 * v10));
      LODWORD(v36) = v10;
      int v35 = v11;
      char v9 = *(uint64_t **)(v7 + 8);
      if (!v9) {
        goto LABEL_45;
      }
    }
    if (!*((_DWORD *)v9 - 3)) {
      goto LABEL_45;
    }
    uint64_t v12 = *((unsigned int *)v9 - 1);
    unint64_t v13 = v9;
    if (v12)
    {
      uint64_t v14 = 8 * v12;
      unint64_t v13 = v9;
      while ((unint64_t)(*v13 + 1) <= 1)
      {
        ++v13;
        v14 -= 8;
        if (!v14) {
          goto LABEL_45;
        }
      }
    }
    unsigned int v15 = &v9[v12];
    if (v15 == v13)
    {
LABEL_45:
      unint64_t v30 = 0;
LABEL_46:
      WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v35, v30);
      long long v32 = v35;
      if (HIDWORD(v36))
      {
        uint64_t v33 = 8 * HIDWORD(v36);
        do
        {
          uint64_t v34 = *(void *)v32;
          long long v32 = (WTF *)((char *)v32 + 8);
          WebKit::WebURLSchemeHandler::stopTask((uint64_t *)this, (uint64_t)a2, v34);
          v33 -= 8;
        }
        while (v33);
        long long v32 = v35;
      }
      if (v32)
      {
        int v35 = 0;
        LODWORD(v36) = 0;
        WTF::fastFree(v32, v31);
      }
      return;
    }
    unsigned int v16 = 0;
LABEL_16:
    uint64_t v17 = *v13;
    if (!a3)
    {
LABEL_37:
      uint64_t v37 = v17;
      if (v16 == v36)
      {
        char v29 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v35, v16 + 1, (unint64_t)&v37);
        *((void *)v35 + HIDWORD(v36)) = *v29;
      }
      else
      {
        *((void *)v35 + v16) = v17;
      }
      unsigned int v16 = ++HIDWORD(v36);
LABEL_41:
      while (++v13 != v15)
      {
        if ((unint64_t)(*v13 + 1) > 1)
        {
          if (v13 != v15) {
            goto LABEL_16;
          }
          break;
        }
      }
      unint64_t v30 = v16;
      goto LABEL_46;
    }
    if (v17 == -1) {
      goto LABEL_35;
    }
    uint64_t v18 = *(void *)(*((void *)a2 + 4) + 760);
    int v19 = (WebKit::WebProcessProxy *)(v17 | v18);
    if (!(v17 | v18)) {
      goto LABEL_36;
    }
    uint64_t v20 = *((void *)this + 3);
    if (!v20) {
      goto LABEL_35;
    }
    int v21 = *(_DWORD *)(v20 - 8);
    unsigned int v22 = WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::hash(*v13, *(void *)(*((void *)a2 + 4) + 760)) & v21;
    int v23 = (uint64_t *)(v20 + 24 * v22);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    if (*v23 != v17 || v25 != v18)
    {
      int v27 = 1;
      while (v24 | v25)
      {
        unsigned int v22 = (v22 + v27) & v21;
        int v23 = (uint64_t *)(v20 + 24 * v22);
        uint64_t v24 = *v23;
        uint64_t v25 = v23[1];
        ++v27;
        if (*v23 == v17 && v25 == v18) {
          goto LABEL_33;
        }
      }
      int v23 = (uint64_t *)(v20 + 24 * *(unsigned int *)(v20 - 4));
    }
LABEL_33:
    if ((uint64_t *)(v20 + 24 * *(unsigned int *)(v20 - 4)) == v23) {
LABEL_35:
    }
      int v19 = 0;
    else {
      int v19 = *(WebKit::WebProcessProxy **)(v23[2] + 24);
    }
LABEL_36:
    if (v19 != a3) {
      goto LABEL_41;
    }
    goto LABEL_37;
  }
}

void WebKit::WebURLSchemeHandler::stopTask(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 32) + 760);
  v13[0] = a3;
  v13[1] = v3;
  if (a3 != -1 && a3 | v3)
  {
    uint64_t v7 = a1 + 3;
    uint64_t v8 = WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1 + 3, v13);
    char v9 = v8;
    uint64_t v10 = (uint64_t *)a1[3];
    if (v10) {
      v10 += 3 * *((unsigned int *)v10 - 1);
    }
    if (v10 != v8)
    {
      WebKit::WebURLSchemeTask::stop((WebKit::WebURLSchemeTask *)v8[2]);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 32))(a1, a2, v9[2]);
      WebKit::WebURLSchemeHandler::removeTaskFromPageMap((uint64_t)a1, *(void *)(*(void *)(a2 + 32) + 760), a3);
      uint64_t v11 = a1[3];
      if (v11)
      {
        uint64_t v12 = (uint64_t *)(v11 + 24 * *(unsigned int *)(v11 - 4));
        if (v12 == v9) {
          return;
        }
      }
      else
      {
        if (!v9) {
          return;
        }
        uint64_t v12 = 0;
      }
      if (v12 != v9) {
        WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(v7, v9);
      }
    }
  }
}

void WebKit::WebURLSchemeTask::stop(WebKit::WebURLSchemeTask *this)
{
  *((unsigned char *)this + 265) = 1;
  if (*((void *)this + 34))
  {
    char v2 = 0;
    uint64_t v3 = (char *)this + 264;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 264, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
    if (v2) {
      MEMORY[0x19972E8D0]((char *)this + 264);
    }
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v19);
    CFTypeRef cf = 0;
    char v22 = 0;
    char v20 = v20 & 0xF1 | 4;
    WebKit::failedCustomProtocolSyncLoad((WebKit::WebURLSchemeTask *)((char *)this + 56), (uint64_t)&v15);
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v4 = *((void *)this + 34);
    *((void *)this + 34) = 0;
    (*(void (**)(uint64_t, unsigned char *, WTF::StringImpl **, WTF **))(*(void *)v4 + 16))(v4, v19, &v15, &v13);
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    uint64_t v6 = v13;
    if (v13)
    {
      unint64_t v13 = 0;
      LODWORD(v14) = 0;
      WTF::fastFree(v6, v5);
    }
    CFTypeRef v7 = v18;
    CFTypeRef v18 = 0;
    if (v7) {
      CFRelease(v7);
    }
    uint64_t v8 = v17;
    uint64_t v17 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    char v9 = v16;
    unsigned int v16 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t v10 = v15;
    unsigned int v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    CFTypeRef v11 = cf;
    CFTypeRef cf = 0;
    if (v11) {
      CFRelease(v11);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v19, (WTF::StringImpl *)v5);
    int v12 = 1;
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
    }
  }
}

uint64_t *WebKit::WebURLSchemeHandler::removeTaskFromPageMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), &v12);
  if ((unint64_t)(a3 - 1) > 0xFFFFFFFFFFFFFFFDLL) {
    return result;
  }
  uint64_t v6 = result;
  CFTypeRef v7 = result + 1;
  uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(result + 1, &v11);
  uint64_t v8 = v6[1];
  if (v8)
  {
    char v9 = (uint64_t *)(v8 + 8 * *(unsigned int *)(v8 - 4));
    if (v9 == result) {
      goto LABEL_4;
    }
  }
  else
  {
    if (!result) {
      goto LABEL_11;
    }
    char v9 = 0;
  }
  if (v9 != result)
  {
    uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v7, result);
    uint64_t v8 = *v7;
  }
  if (v8)
  {
LABEL_4:
    if (*(_DWORD *)(v8 - 12)) {
      return result;
    }
  }
LABEL_11:
  if (*v4)
  {
    uint64_t v10 = *v4 + 16 * *(unsigned int *)(*v4 - 4);
    if ((uint64_t *)v10 == v6) {
      return result;
    }
  }
  else
  {
    if (!v6) {
      return result;
    }
    uint64_t v10 = 0;
  }
  if ((uint64_t *)v10 != v6) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v4, v6);
  }
  return result;
}

uint64_t WebKit::WebURLSchemeTask::WebURLSchemeTask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9DD9A0;
  ++*(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = a2;
  atomic_fetch_add((atomic_uint *volatile)(a4 + 16), 1u);
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = *(void *)(a6 + 8);
  *(void *)(a1 + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = *(void *)(*(void *)(a3 + 32) + 760);
  *(void *)(a1 + 48) = a5;
  WTF::URL::URL(a1 + 56, (uint64_t *)(a6 + 16));
  WTF::URL::URL(a1 + 96, (uint64_t *)(a6 + 56));
  *(void *)(a1 + 136) = *(void *)(a6 + 96);
  uint64_t v14 = *(void *)(a6 + 104);
  *(void *)(a6 + 104) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 16WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *(void *)(a1 + 144) = v14;
  uint64_t v15 = *(void *)(a6 + 112);
  *(void *)(a6 + 112) = 0;
  *(void *)(a1 + 152) = v15;
  LODWORD(v15) = *(_DWORD *)(a6 + 120);
  *(_DWORD *)(a6 + 12WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *(_DWORD *)(a1 + 16WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v15;
  LODWORD(v15) = *(_DWORD *)(a6 + 124);
  *(_DWORD *)(a6 + 124) = 0;
  *(_DWORD *)(a1 + 164) = v15;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  uint64_t v16 = *(void *)(a6 + 128);
  *(void *)(a6 + 128) = 0;
  *(void *)(a1 + 168) = v16;
  LODWORD(v16) = *(_DWORD *)(a6 + 136);
  *(_DWORD *)(a6 + 136) = 0;
  *(_DWORD *)(a1 + 176) = v16;
  LODWORD(v16) = *(_DWORD *)(a6 + 140);
  *(_DWORD *)(a6 + 14WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *(_DWORD *)(a1 + 18WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v16;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  uint64_t v17 = *(void *)(a6 + 144);
  *(void *)(a6 + 144) = 0;
  *(void *)(a1 + 184) = v17;
  LODWORD(v17) = *(_DWORD *)(a6 + 152);
  *(_DWORD *)(a6 + 152) = 0;
  *(_DWORD *)(a1 + 192) = v17;
  LODWORD(v17) = *(_DWORD *)(a6 + 156);
  *(_DWORD *)(a6 + 156) = 0;
  *(_DWORD *)(a1 + 196) = v17;
  LODWORD(v17) = *(_DWORD *)(a6 + 160);
  *(unsigned char *)(a1 + 204) = *(unsigned char *)(a6 + 164);
  *(_DWORD *)(a1 + 20WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v17;
  uint64_t v18 = *(void *)(a6 + 168);
  *(void *)(a6 + 168) = 0;
  *(void *)(a1 + 208) = v18;
  uint64_t v19 = *(void *)(a6 + 176);
  *(void *)(a6 + 176) = 0;
  *(void *)(a1 + 216) = v19;
  uint64_t v20 = *(void *)(a6 + 184);
  *(void *)(a6 + 184) = 0;
  *(void *)(a1 + 224) = v20;
  uint64_t v21 = *(void *)(a6 + 192);
  *(unsigned char *)(a1 + 24WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = *(unsigned char *)(a6 + 200);
  *(void *)(a1 + 232) = v21;
  uint64_t v22 = *(void *)(a6 + 208);
  *(void *)(a6 + 208) = 0;
  *(void *)(a1 + 248) = v22;
  CFRetain(*(CFTypeRef *)(a3 + 8));
  uint64_t v26 = a3;
  uint64_t v23 = API::Object::newObject(0x140uLL, 60);
  *(void *)(a1 + 256) = API::FrameInfo::FrameInfo(v23, a6 + 216, &v26);
  if (v26) {
    CFRelease(*(CFTypeRef *)(v26 + 8));
  }
  *(_WORD *)(a1 + 268) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  uint64_t v24 = *a7;
  *a7 = 0;
  *(void *)(a1 + 272) = v24;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 280));
  *(void *)(a1 + 52WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *(unsigned char *)(a1 + 528) = 0;
  *(unsigned char *)(a1 + 418) = *(unsigned char *)(a1 + 418) & 0xF1 | 4;
  *(void *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 544) = 0;
  return a1;
}

void WebKit::WebURLSchemeTask::~WebURLSchemeTask(WebKit::WebURLSchemeTask *this, void *a2)
{
  *(void *)this = &unk_1EE9DD9A0;
  uint64_t v3 = (unsigned int *)*((void *)this + 67);
  *((void *)this + 67) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  uint64_t v4 = (const void *)*((void *)this + 65);
  *((void *)this + 65) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::WebURLSchemeTask *)((char *)this + 280), (WTF::StringImpl *)a2);
  uint64_t v5 = *((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  CFTypeRef v7 = (const void *)*((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v7) {
    CFRelease(v7);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::WebURLSchemeTask *)((char *)this + 56));
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v8) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  }
  char v9 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v9)
  {
    if (v9[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
    }
    else {
      --v9[2];
    }
  }
}

{
  uint64_t vars8;

  WebKit::WebURLSchemeTask::~WebURLSchemeTask(this, a2);

  JUMPOUT(0x199740C10);
}

CFTypeRef *WebKit::WebURLSchemeTask::request@<X0>(WebKit::WebURLSchemeTask *this@<X0>, CFTypeRef *a2@<X8>)
{
  char v4 = 0;
  uint64_t v5 = (char *)this + 264;
  int v6 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 264, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0]((char *)this + 264);
  }
  uint64_t result = WebCore::ResourceRequest::ResourceRequest(a2, (const String *)this + 7);
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1)
  {
    return (CFTypeRef *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return result;
}

uint64_t WebKit::WebURLSchemeTask::willPerformRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (*(unsigned char *)(a1 + 265))
  {
    if (*(unsigned char *)(a1 + 269)) {
      return 6;
    }
    else {
      return 3;
    }
  }
  else if (*(unsigned char *)(a1 + 268))
  {
    return 1;
  }
  else if (*(unsigned char *)(a1 + 267))
  {
    return 0;
  }
  else if (*(unsigned char *)(a1 + 266))
  {
    return 2;
  }
  else if (*(unsigned char *)(a1 + 544))
  {
    return 5;
  }
  else
  {
    if (*(void *)(a1 + 272))
    {
      WebCore::ResourceResponseBase::operator=(a1 + 280, a2);
      uint64_t v9 = *(void *)(a2 + 240);
      if (v9) {
        CFRetain(*(CFTypeRef *)(a2 + 240));
      }
      uint64_t v10 = *(const void **)(a1 + 520);
      *(void *)(a1 + 52WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v9;
      if (v10) {
        CFRelease(v10);
      }
      *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 248);
    }
    char v11 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 264), (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
    if (v11) {
      MEMORY[0x19972E8D0](a1 + 264);
    }
    WebCore::ResourceRequestBase::operator=(a1 + 56, a3);
    uint64_t v12 = *(void *)(a3 + 192);
    if (v12) {
      CFRetain(*(CFTypeRef *)(a3 + 192));
    }
    unint64_t v13 = *(const void **)(a1 + 248);
    *(void *)(a1 + 248) = v12;
    if (v13) {
      CFRelease(v13);
    }
    int v14 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 264), (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 264));
    }
    WebKit::WebProcessProxy::webPage(*(void *)(a1 + 40), &v30);
    uint64_t v15 = v30;
    if (v30)
    {
      if (*(void *)(a1 + 24))
      {
        *(unsigned char *)(a1 + 544) = 1;
        CFRetain(*(CFTypeRef *)(a1 + 8));
        uint64_t v16 = *a4;
        *a4 = 0;
        uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x20);
        *uint64_t v17 = &unk_1EE9DDA38;
        v17[1] = a1;
        float v17[2] = a1;
        v17[3] = v16;
        uint64_t v18 = *(void *)(a1 + 24);
        uint64_t v28 = *(void *)(*(void *)(a1 + 16) + 16);
        v29[0] = &v28;
        v29[1] = a1 + 32;
        v29[2] = a2;
        CFTypeRef v29[3] = a3;
        uint64_t v19 = *(void *)(*(void *)(v15 + 32) + 1928);
        uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v20 = 2521;
        *((void *)v20 + 1) = v19;
        *((void *)v20 + 66) = (char *)v20 + 16;
        *((void *)v20 + 67) = 512;
        *((void *)v20 + 68) = 0;
        *((void *)v20 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
        *((void *)v20 + 69) = 0;
        IPC::Encoder::encodeHeader(v20);
        uint64_t v33 = v20;
        IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&>,0ul,1ul,2ul,3ul>(v20, (uint64_t)v29);
        uint64_t v21 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint64_t v21 = &unk_1EE9DDA60;
        v21[1] = v17;
        uint64_t v22 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        v31[0] = v21;
        v31[1] = v22;
        char v32 = 1;
        WebKit::AuxiliaryProcessProxy::sendMessage(v18, &v33, 0, (uint64_t)v31, 1);
        if (v32)
        {
          uint64_t v24 = v31[0];
          v31[0] = 0;
          if (v24) {
            (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
          }
        }
        uint64_t v25 = v33;
        uint64_t v33 = 0;
        if (v25)
        {
          IPC::Encoder::~Encoder(v25, v23);
          WTF::fastFree(v26, v27);
        }
      }
      CFRelease(*(CFTypeRef *)(v15 + 8));
    }
    return 6;
  }
}

uint64_t WebKit::WebURLSchemeTask::didPerformRedirection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 265))
  {
    if (*(unsigned char *)(a1 + 269)) {
      return 6;
    }
    else {
      return 3;
    }
  }
  else if (*(unsigned char *)(a1 + 268))
  {
    return 1;
  }
  else if (*(unsigned char *)(a1 + 267))
  {
    return 0;
  }
  else if (*(unsigned char *)(a1 + 266))
  {
    return 2;
  }
  else if (*(unsigned char *)(a1 + 544))
  {
    return 5;
  }
  else
  {
    if (*(void *)(a1 + 272))
    {
      WebCore::ResourceResponseBase::operator=(a1 + 280, a2);
      uint64_t v7 = *(void *)(a2 + 240);
      if (v7) {
        CFRetain(*(CFTypeRef *)(a2 + 240));
      }
      uint64_t v8 = *(const void **)(a1 + 520);
      *(void *)(a1 + 52WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v7;
      if (v8) {
        CFRelease(v8);
      }
      *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 248);
    }
    char v9 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 264), (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
    if (v9) {
      MEMORY[0x19972E8D0](a1 + 264);
    }
    WebCore::ResourceRequestBase::operator=(a1 + 56, a3);
    uint64_t v10 = *(void *)(a3 + 192);
    if (v10) {
      CFRetain(*(CFTypeRef *)(a3 + 192));
    }
    char v11 = *(const void **)(a1 + 248);
    *(void *)(a1 + 248) = v10;
    if (v11) {
      CFRelease(v11);
    }
    int v12 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 264), (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 264));
    }
    uint64_t v13 = *(void *)(a1 + 24);
    uint64_t v21 = *(void *)(*(void *)(a1 + 16) + 16);
    v22[0] = &v21;
    v22[1] = a1 + 32;
    void v22[2] = a2;
    _DWORD v22[3] = a3;
    uint64_t v14 = *(void *)(a1 + 48);
    if (v14)
    {
      uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v15 = 2518;
      *((void *)v15 + 1) = v14;
      *((void *)v15 + 66) = (char *)v15 + 16;
      *((void *)v15 + 67) = 512;
      *((void *)v15 + 68) = 0;
      *((void *)v15 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
      *((void *)v15 + 69) = 0;
      IPC::Encoder::encodeHeader(v15);
      uint64_t v25 = v15;
      IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&>,0ul,1ul,2ul,3ul>(v15, (uint64_t)v22);
      LOBYTE(v23) = 0;
      char v24 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v13, &v25, 0, (uint64_t)&v23, 1);
      if (v24)
      {
        uint64_t v17 = v23;
        uint64_t v23 = 0;
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
      }
      uint64_t v18 = v25;
      uint64_t v25 = 0;
      if (v18)
      {
        IPC::Encoder::~Encoder(v18, v16);
        WTF::fastFree(v19, v20);
      }
      return 6;
    }
    else
    {
      uint64_t result = 146;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebKit::WebURLSchemeTask::didReceiveResponse(WebKit::WebURLSchemeTask *this, const WebCore::ResourceResponse *a2)
{
  if (*((unsigned char *)this + 265))
  {
    if (*((unsigned char *)this + 269)) {
      return 6;
    }
    else {
      return 3;
    }
  }
  else if (*((unsigned char *)this + 268))
  {
    return 1;
  }
  else if (*((unsigned char *)this + 267))
  {
    return 0;
  }
  else if (*((unsigned char *)this + 544))
  {
    return 5;
  }
  else
  {
    *((unsigned char *)this + 266) = 1;
    if (*((void *)this + 34))
    {
      WebCore::ResourceResponseBase::operator=((uint64_t)this + 280, (uint64_t)a2);
      uint64_t v5 = *((void *)a2 + 30);
      if (v5) {
        CFRetain(*((CFTypeRef *)a2 + 30));
      }
      int v6 = (const void *)*((void *)this + 65);
      *((void *)this + 65) = v5;
      if (v6) {
        CFRelease(v6);
      }
      *((unsigned char *)this + 528) = *((unsigned char *)a2 + 248);
    }
    uint64_t v7 = *((void *)this + 3);
    uint64_t v9 = *(void *)(*((void *)this + 2) + 16);
    v10[0] = &v9;
    v10[1] = (char *)this + 32;
    void v10[2] = a2;
    uint64_t v8 = *((void *)this + 6);
    if (v8)
    {
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::URLSchemeTaskDidReceiveResponse>(v7, (uint64_t)v10, v8, 0);
      return 6;
    }
    else
    {
      uint64_t result = 146;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebKit::WebURLSchemeTask::didReceiveData(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 265))
  {
    if (*(unsigned char *)(a1 + 269)) {
      return 6;
    }
    else {
      return 3;
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 268))
    {
      if (!*(unsigned char *)(a1 + 266)) {
        return 4;
      }
      if (*(unsigned char *)(a1 + 544)) {
        return 5;
      }
      *(unsigned char *)(a1 + 267) = 1;
      if (*(void *)(a1 + 272))
      {
        WebCore::SharedBufferBuilder::ensureBuffer((WebCore::SharedBufferBuilder *)(a1 + 536));
        WebCore::FragmentedSharedBuffer::append();
      }
      else
      {
        uint64_t v4 = *(void *)(a1 + 24);
        uint64_t v6 = *(void *)(*(void *)(a1 + 16) + 16);
        v7[0] = &v6;
        v7[1] = (uint64_t *)(a1 + 32);
        void v7[2] = a2;
        uint64_t v5 = *(void *)(a1 + 48);
        if (!v5)
        {
          uint64_t result = 146;
          __break(0xC471u);
          return result;
        }
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::URLSchemeTaskDidReceiveData>(v4, v7, v5, 0);
      }
      return 6;
    }
    return 1;
  }
}

uint64_t WebKit::WebURLSchemeTask::didComplete(WebKit::WebURLSchemeTask *this, const WebCore::ResourceError *a2)
{
  if (*((unsigned char *)this + 265))
  {
    if (*((unsigned char *)this + 269)) {
      return 6;
    }
    else {
      return 3;
    }
  }
  if (*((unsigned char *)this + 268)) {
    return 1;
  }
  if (!(*((unsigned char *)this + 266) | *((unsigned char *)a2 + 60))) {
    return 4;
  }
  if (*((unsigned char *)this + 544) && !*((unsigned char *)a2 + 60)) {
    return 5;
  }
  *((unsigned char *)this + 268) = 1;
  if (*((void *)this + 34))
  {
    WebCore::SharedBufferBuilder::takeAsContiguous((uint64_t *)&v33, (WebKit::WebURLSchemeTask *)((char *)this + 536));
    uint64_t v5 = v33;
    uint64_t v6 = WebCore::SharedBuffer::data(v33);
    uint64_t v8 = (WTF *)*((void *)v5 + 6);
    v31[0] = 0;
    LODWORD(v31[1]) = 0;
    HIDWORD(v31[1]) = v8;
    if (v8)
    {
      if ((unint64_t)v8 >> 32)
      {
        __break(0xC471u);
LABEL_46:
        JUMPOUT(0x198F0A2D8);
      }
      uint64_t v9 = (char *)v6;
      uint64_t v10 = (WTF *)WTF::fastMalloc(v8);
      LODWORD(v31[1]) = v8;
      v31[0] = v10;
      do
      {
        char v11 = *v9++;
        *(unsigned char *)uint64_t v10 = v11;
        uint64_t v10 = (WTF *)((char *)v10 + 1);
        uint64_t v8 = (WTF *)((char *)v8 - 1);
      }
      while (v8);
    }
    int v12 = (unsigned int *)v33;
    uint64_t v33 = 0;
    if (v12) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v12, v7);
    }
    uint64_t v13 = *((void *)this + 34);
    *((void *)this + 34) = 0;
    (*(void (**)(uint64_t, char *, const WebCore::ResourceError *, WTF **))(*(void *)v13 + 16))(v13, (char *)this + 280, a2, v31);
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    uint64_t v15 = v31[0];
    if (v31[0])
    {
      v31[0] = 0;
      LODWORD(v31[1]) = 0;
      WTF::fastFree(v15, v14);
    }
  }
  uint64_t v16 = *((void *)this + 3);
  uint64_t v30 = *(void *)(*((void *)this + 2) + 16);
  uint64_t v17 = *((void *)this + 6);
  if (!v17)
  {
    __break(0xC471u);
    goto LABEL_46;
  }
  uint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v18 = 2517;
  *((void *)v18 + 1) = v17;
  *((void *)v18 + 66) = (char *)v18 + 16;
  *((void *)v18 + 67) = 512;
  *((void *)v18 + 68) = 0;
  *((void *)v18 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v18 + 69) = 0;
  IPC::Encoder::encodeHeader(v18);
  uint64_t v33 = v18;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v18, &v30);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v18, (uint64_t *)this + 4);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v18, a2);
  LOBYTE(v31[0]) = 0;
  char v32 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v16, &v33, 0, (uint64_t)v31, 1);
  if (v32)
  {
    uint64_t v20 = v31[0];
    v31[0] = 0;
    if (v20) {
      (*(void (**)(WTF *))(*(void *)v20 + 8))(v20);
    }
  }
  uint64_t v21 = v33;
  uint64_t v33 = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, v19);
    WTF::fastFree(v28, v29);
  }
  uint64_t v22 = (uint64_t *)*((void *)this + 2);
  *(_OWORD *)uint64_t v31 = *((_OWORD *)this + 2);
  uint64_t v23 = WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v22 + 3, (uint64_t *)v31);
  uint64_t v24 = v22[3];
  if (v24) {
    uint64_t v25 = (uint64_t *)(v24 + 24 * *(unsigned int *)(v24 - 4));
  }
  else {
    uint64_t v25 = 0;
  }
  if (v25 == v23)
  {
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v26 = v23[2];
    if (v26)
    {
      void v23[2] = 0;
      uint64_t v24 = v22[3];
    }
    if (v24)
    {
      int v27 = (uint64_t *)(v24 + 24 * *(unsigned int *)(v24 - 4));
      if (v27 == v23) {
        goto LABEL_41;
      }
LABEL_39:
      if (v27 != v23) {
        WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(v22 + 3, v23);
      }
      goto LABEL_41;
    }
    if (v23)
    {
      int v27 = 0;
      goto LABEL_39;
    }
  }
LABEL_41:
  WebKit::WebURLSchemeHandler::removeTaskFromPageMap((uint64_t)v22, *((void *)this + 5), *((void *)this + 4));
  (*(void (**)(uint64_t *, WebKit::WebURLSchemeTask *))(*v22 + 40))(v22, this);
  if (v26) {
    CFRelease(*(CFTypeRef *)(v26 + 8));
  }
  return 6;
}

uint64_t WebKit::WebURLSchemeTask::nsRequest(atomic_uchar *this)
{
  char v1 = 0;
  char v2 = this + 264;
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(this + 264, (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x19972E8D0](this + 264);
  }
  uint64_t v4 = WebCore::ResourceRequest::nsURLRequest();
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  return v4;
}

uint64_t WebKit::ViewGestureController::checkForActiveLoads(WebKit::ViewGestureController *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 32);
  if (*(void *)(v2 + 1016) || *(unsigned __int8 *)(v2 + 1000) <= 1u)
  {
    uint64_t result = WTF::RunLoop::TimerBase::isActive((WebKit::ViewGestureController *)((char *)this + 32));
    if ((result & 1) == 0)
    {
      return WTF::RunLoop::TimerBase::start();
    }
  }
  else
  {
    WTF::RunLoop::TimerBase::stop((WebKit::ViewGestureController *)((char *)this + 32));
    return WebKit::ViewGestureController::SnapshotRemovalTracker::stopWaitingForEvent((WebKit::ViewGestureController *)((char *)this + 168), (WebKit::ViewGestureController::SnapshotRemovalTracker *)0x10, "outstanding event occurred: ", 29, 1);
  }
  return result;
}

void WebKit::ViewGestureController::~ViewGestureController(WebKit::ViewGestureController *this)
{
  *(void *)this = &unk_1EE9DD9C8;
  [*((id *)this + 18) _setTransitionIsInFlight:0];
  [*((id *)this + 18) _setInteractor:0];
  [*((id *)this + 18) _setAnimator:0];
  [*((id *)this + 17) invalidate];
  {
    WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers = 0;
  }
  uint64_t v25 = *(void *)(*(void *)(*((void *)this + 2) + 32) + 760);
  uint64_t v2 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers, &v25);
  if (WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers)
  {
    uint64_t v4 = WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers
       + 16 * *(unsigned int *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 4);
    if ((void *)v4 == v2) {
      goto LABEL_20;
    }
  }
  else
  {
    if (!v2) {
      goto LABEL_20;
    }
    uint64_t v4 = 0;
  }
  if ((void *)v4 != v2)
  {
    uint64_t v5 = (unsigned int *)v2[1];
    *uint64_t v2 = -1;
    v2[1] = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v3);
    }
    ++*(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 16);
    if (WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers) {
      int v6 = *(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 12) - 1;
    }
    else {
      int v6 = -1;
    }
    *(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 12) = v6;
    if (WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers)
    {
      unsigned int v7 = *(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 4);
      if (6 * *(_DWORD *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 12) < v7 && v7 >= 9) {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v7 >> 1);
      }
    }
  }
LABEL_20:
  WebKit::ViewGestureController::disconnectFromProcess((unsigned __int8 *)this);
  uint64_t v9 = *((void *)this + 30);
  *((void *)this + 3WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *((void *)this + 25) = &unk_1EE9B3390;
  uint64_t v10 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::ViewGestureController *)((char *)this + 200));
  uint64_t v12 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = (const void *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = (const void *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v15 = (const void *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v16 = (const void *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v17 = (const void *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v18) {
    CFRelease(*(CFTypeRef *)(v18 + 8));
  }
  uint64_t v19 = *((void *)this + 10);
  *((void *)this + 1WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  if (v19) {
    CFRelease(*(CFTypeRef *)(v19 + 8));
  }
  uint64_t v20 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v20);
    WTF::fastFree((WTF *)v20, v11);
  }
  uint64_t v21 = *((void *)this + 8);
  if ((v21 & 0x8000000000000) != 0)
  {
    uint64_t v24 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, v11);
    }
  }
  *((void *)this + 4) = &unk_1EE9B3390;
  uint64_t v22 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::ViewGestureController *)((char *)this + 32));
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v23);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::ViewGestureController::~ViewGestureController(this);

  WTF::fastFree(v1, v2);
}

unsigned __int8 *WebKit::ViewGestureController::disconnectFromProcess(unsigned __int8 *this)
{
  if (this[161])
  {
    char v1 = this;
    this = IPC::MessageReceiverMap::removeMessageReceiver(*(void *)(*((void *)this + 2) + 256) + 152, 0x99u, *(void *)(*(void *)(*((void *)this + 2) + 32) + 1928));
    v1[161] = 0;
  }
  return this;
}

uint64_t WebKit::ViewGestureController::controllerForGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1;
  {
    WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers = 0;
  }
  uint64_t v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers, &v6);
  {
    uint64_t v4 = WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers;
    if (WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers) {
      uint64_t v4 = WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers
    }
         + 16 * *(unsigned int *)(WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers - 4);
  }
  else
  {
    uint64_t v4 = 0;
    WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers = 0;
  }
  if (v4 == v3) {
    return 0;
  }
  if (*(void *)(*(void *)(*(void *)(v3 + 8) + 8) + 96) == a2) {
    return *(void *)(*(void *)(v3 + 8) + 8);
  }
  return 0;
}

unsigned int *WebKit::ViewGestureController::setAlternateBackForwardListSourcePage(WebKit::ViewGestureController *this, WebKit::WebPageProxy *a2)
{
  if (a2)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
    uint64_t v4 = (atomic_uint *)*((void *)a2 + 3);
    if (v4) {
      atomic_fetch_add(v4, 1u);
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = v4;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

BOOL WebKit::ViewGestureController::canSwipeInDirection(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 28)) {
    return 0;
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 408);
  if (v4)
  {
    if ((*(uint64_t (**)(void))(**(void **)(v4 + 32) + 24))(*(void *)(v4 + 32))) {
      return 0;
    }
  }
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6 && (uint64_t v7 = *(void *)(v6 + 8)) != 0)
  {
    uint64_t v8 = v7 - 16;
    CFRetain(*(CFTypeRef *)(v7 - 8));
    char v9 = 0;
    uint64_t v10 = (uint64_t *)(v7 + 648);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = (uint64_t *)(*(void *)(a1 + 16) + 664);
    char v9 = 1;
  }
  uint64_t v11 = *v10;
  if (a2) {
    uint64_t v12 = WebKit::WebBackForwardList::forwardItem(v11);
  }
  else {
    uint64_t v12 = WebKit::WebBackForwardList::backItem(v11);
  }
  BOOL v5 = v12 != 0;
  if ((v9 & 1) == 0) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  return v5;
}

WTF::MonotonicTime *WebKit::ViewGestureController::didStartProvisionalOrSameDocumentLoadForMainFrame(WTF::MonotonicTime *this)
{
  char v1 = this;
  *((unsigned char *)this + 162) = 1;
  if (*((unsigned char *)this + 232))
  {
    this = (WTF::MonotonicTime *)((char *)this + 168);
    if (*((unsigned char *)v1 + 168)) {
      this = WebKit::ViewGestureController::SnapshotRemovalTracker::log((uint64_t)this);
    }
  }
  *((unsigned char *)v1 + 232) = 0;
  uint64_t v2 = *((void *)v1 + 30);
  *((void *)v1 + 3WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
    return (WTF::MonotonicTime *)v3(v2);
  }
  return this;
}

uint64_t WebKit::ViewGestureController::SnapshotRemovalTracker::startWatchdog(uint64_t a1)
{
  WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral>((uint64_t)"(re)started watchdog timer for ", 32, (uint64_t)" seconds", 9, &v5);
  WebKit::ViewGestureController::SnapshotRemovalTracker::log(a1);
  uint64_t v3 = v5;
  BOOL v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return WTF::RunLoop::TimerBase::start();
}

uint64_t WebKit::ViewGestureController::didReachNavigationTerminalState(uint64_t this, API::Navigation *a2)
{
  uint64_t v2 = *(API::Navigation **)(this + 88);
  if (v2) {
    BOOL v3 = v2 == a2;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = this;
    if (*(unsigned char *)(this + 232) && *(void *)(this + 176))
    {
      return WebKit::ViewGestureController::removeSwipeSnapshot((WebKit::ViewGestureController *)this);
    }
    else
    {
      this = WebKit::ViewGestureController::SnapshotRemovalTracker::stopWaitingForEvent((WebKit::ViewGestureController::SnapshotRemovalTracker *)(this + 168), (WebKit::ViewGestureController::SnapshotRemovalTracker *)8, "outstanding event occurred: ", 29, 1);
      if (this)
      {
        WebKit::ViewGestureController::SnapshotRemovalTracker::stopWaitingForEvent((WebKit::ViewGestureController::SnapshotRemovalTracker *)(v4 + 168), (WebKit::ViewGestureController::SnapshotRemovalTracker *)1, "wait for event cancelled: ", 27, 1);
        return WebKit::ViewGestureController::checkForActiveLoads((WebKit::ViewGestureController *)v4);
      }
    }
  }
  return this;
}

uint64_t WebKit::ViewGestureController::didSameDocumentNavigationForMainFrame(uint64_t a1, char a2)
{
  WebKit::ViewGestureController::didStartProvisionalOrSameDocumentLoadForMainFrame((WTF::MonotonicTime *)a1);
  int v4 = WebKit::ViewGestureController::SnapshotRemovalTracker::stopWaitingForEvent((WebKit::ViewGestureController::SnapshotRemovalTracker *)(a1 + 168), (WebKit::ViewGestureController::SnapshotRemovalTracker *)8, "wait for event cancelled: ", 27, 1);
  uint64_t result = WebKit::ViewGestureController::SnapshotRemovalTracker::stopWaitingForEvent((WebKit::ViewGestureController::SnapshotRemovalTracker *)(a1 + 168), (WebKit::ViewGestureController::SnapshotRemovalTracker *)1, "wait for event cancelled: ", 27, 1);
  if ((a2 & 0xFE) == 2 && v4 | result)
  {
    return WebKit::ViewGestureController::checkForActiveLoads((WebKit::ViewGestureController *)a1);
  }
  return result;
}

uint64_t WebKit::ViewGestureController::SnapshotRemovalTracker::watchdogTimerFired(WebKit::ViewGestureController::SnapshotRemovalTracker *this)
{
  WebKit::ViewGestureController::SnapshotRemovalTracker::log((uint64_t)this);

  return WebKit::ViewGestureController::SnapshotRemovalTracker::fireRemovalCallbackImmediately(this);
}

WTF::StringImpl *WebKit::ViewGestureController::SnapshotRemovalTracker::eventsDescription@<X0>(WebKit::ViewGestureController::SnapshotRemovalTracker *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  char v2 = (char)this;
  uint64_t v8 = 0;
  char v9 = 0;
  int v10 = 0;
  char v11 = 1;
  if (this)
  {
    WTF::StringBuilder::append();
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((this & 2) == 0)
  {
    goto LABEL_3;
  }
  WTF::StringBuilder::append();
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  WTF::StringBuilder::append();
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  WTF::StringBuilder::append();
  if ((v2 & 0x10) == 0)
  {
LABEL_6:
    if ((v2 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  WTF::StringBuilder::append();
  if ((v2 & 0x20) == 0)
  {
LABEL_7:
    if ((v2 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_19:
  WTF::StringBuilder::append();
  if ((v2 & 0x40) != 0) {
LABEL_8:
  }
    WTF::StringBuilder::append();
LABEL_9:
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v8);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v8);
  BOOL v5 = v8;
  if (v8) {
    *(_DWORD *)v8 += 2;
  }
  *a2 = v5;
  uint64_t v6 = v9;
  char v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::MonotonicTime *WebKit::ViewGestureController::SnapshotRemovalTracker::log(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  char v2 = qword_1EB358708;
  uint64_t result = (WTF::MonotonicTime *)os_log_type_enabled((os_log_t)qword_1EB358708, OS_LOG_TYPE_DEFAULT);
  if (result)
  {
    WTF::MonotonicTime::now(result);
    double v5 = (v4 - *(double *)(a1 + 16)) * 1000.0;
    WTF::StringView::utf8();
    if (v8) {
      uint64_t v6 = (char *)v8 + 16;
    }
    else {
      uint64_t v6 = 0;
    }
    *(_DWORD *)buf = 134218242;
    double v10 = v5;
    __int16 v11 = 2080;
    uint64_t v12 = v6;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "Swipe Snapshot Removal (%0.2f ms) - %s", buf, 0x16u);
    uint64_t result = v8;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1) {
        return (WTF::MonotonicTime *)WTF::fastFree(v8, v7);
      }
      else {
        --*(_DWORD *)v8;
      }
    }
  }
  return result;
}

uint64_t WebKit::ViewGestureController::SnapshotRemovalTracker::start(uint64_t a1, char a2, uint64_t *a3)
{
  *(unsigned char *)a1 = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  double v5 = *(WTF::MonotonicTime **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    double v5 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(void *)v5 + 8))(v5);
  }
  WTF::MonotonicTime::now(v5);
  *(void *)(a1 + 16) = v6;
  WebKit::ViewGestureController::SnapshotRemovalTracker::log(a1);
  uint64_t result = WebKit::ViewGestureController::SnapshotRemovalTracker::startWatchdog(a1);
  *(unsigned char *)(a1 + 64) = 1;
  return result;
}

uint64_t WebKit::ViewGestureController::SnapshotRemovalTracker::reset(WebKit::ViewGestureController::SnapshotRemovalTracker *this)
{
  char v2 = (WebKit::ViewGestureController::SnapshotRemovalTracker *)*(unsigned __int8 *)this;
  if (v2)
  {
    WebKit::ViewGestureController::SnapshotRemovalTracker::eventsDescription(v2, &v7);
    v9[0] = (uint64_t)"reset; had outstanding events: ";
    v9[1] = 32;
    uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>(v9, (uint64_t *)&v7, &v8);
    if (!v8)
    {
      __break(0xC471u);
      return result;
    }
    WebKit::ViewGestureController::SnapshotRemovalTracker::log((uint64_t)this);
    double v5 = v8;
    uint64_t v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = v7;
    uint64_t v7 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v4);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  *(unsigned char *)this = 0;
  WTF::RunLoop::TimerBase::stop((WebKit::ViewGestureController::SnapshotRemovalTracker *)((char *)this + 32));
  uint64_t result = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::ViewGestureController::SnapshotRemovalTracker::stopWaitingForEvent(WebKit::ViewGestureController::SnapshotRemovalTracker *a1, WebKit::ViewGestureController::SnapshotRemovalTracker *this, const char *a3, uint64_t a4, int a5)
{
  if ((*(unsigned char *)a1 & this) == 0) {
    return 0;
  }
  char v7 = (char)this;
  if (a5 && *((unsigned char *)a1 + 64))
  {
    WebKit::ViewGestureController::SnapshotRemovalTracker::eventsDescription(this, &v21);
    uint64_t v24 = "is paused; ignoring event: ";
    uint64_t v25 = 28;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v24, (uint64_t *)&v21, &v23);
    if (v23)
    {
      WebKit::ViewGestureController::SnapshotRemovalTracker::log((uint64_t)a1);
      double v10 = v23;
      uint64_t v23 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      uint64_t v19 = v21;
      uint64_t v21 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v9);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      return 0;
    }
    __break(0xC471u);
LABEL_39:
    JUMPOUT(0x198F0B3CCLL);
  }
  WebKit::ViewGestureController::SnapshotRemovalTracker::eventsDescription(this, &v20);
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v24, (uint64_t *)&v20, &v23);
  if (!v23)
  {
    __break(0xC471u);
    goto LABEL_39;
  }
  WebKit::ViewGestureController::SnapshotRemovalTracker::log((uint64_t)a1);
  uint64_t v12 = v23;
  uint64_t v23 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = v20;
  uint64_t v20 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  unsigned __int8 v14 = *(unsigned char *)a1 & ~v7;
  *(unsigned char *)a1 = v14;
  if (v14)
  {
    WebKit::ViewGestureController::SnapshotRemovalTracker::eventsDescription((WebKit::ViewGestureController::SnapshotRemovalTracker *)v14, &v22);
    uint64_t v24 = "deferring removal; had outstanding events: ";
    uint64_t v25 = 44;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v24, (uint64_t *)&v22, &v23);
    if (!v23)
    {
      __break(0xC471u);
      JUMPOUT(0x198F0B3D4);
    }
    WebKit::ViewGestureController::SnapshotRemovalTracker::log((uint64_t)a1);
    uint64_t v16 = v23;
    uint64_t v23 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = v22;
    uint64_t v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v15);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
  else
  {
    WebKit::ViewGestureController::SnapshotRemovalTracker::fireRemovalCallbackImmediately(a1);
  }
  return 1;
}

uint64_t WebKit::ViewGestureController::SnapshotRemovalTracker::fireRemovalCallbackImmediately(WebKit::ViewGestureController::SnapshotRemovalTracker *this)
{
  uint64_t result = WTF::RunLoop::TimerBase::stop((WebKit::ViewGestureController::SnapshotRemovalTracker *)((char *)this + 32));
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3)
  {
    WebKit::ViewGestureController::SnapshotRemovalTracker::log((uint64_t)this);
    WebKit::ViewGestureController::SnapshotRemovalTracker::reset(this);
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return v4(v3);
  }
  return result;
}

unsigned int *WebKit::ViewSnapshotStore::didAddImageToSnapshot(WebKit::ViewSnapshotStore *this, WebKit::ViewSnapshot *a2)
{
  uint64_t v4 = (uint64_t *)((char *)this + 8);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  double v5 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v5, 1u);
  char v9 = (WTF *)v5;
  WTF::ListHashSet<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>::add(v4, (uint64_t *)&v9, (uint64_t)v10);
  uint64_t result = (unsigned int *)v9;
  char v9 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
  }
  uint64_t v8 = *((void *)a2 + 2);
  if (v8) {
    uint64_t v8 = *(void *)(v8 + 32);
  }
  *(void *)this += v8;
  return result;
}

uint64_t *WTF::ListHashSet<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::expand(result, 0), (uint64_t v6 = *v4) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)(*a2 + 8);
  unint64_t v10 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
  unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = (v12 >> 31) ^ v12;
  for (int i = 1; ; ++i)
  {
    unsigned int v15 = v13 & v7;
    uint64_t v16 = (uint64_t *)(v6 + 8 * (v13 & v7));
    uint64_t v17 = *v16;
    if (*v16 == -1)
    {
      uint64_t v8 = (uint64_t *)(v6 + 8 * v15);
      goto LABEL_10;
    }
    if (!v17) {
      break;
    }
    if (*(void *)(*(void *)v17 + 8) == v9)
    {
      char v21 = 0;
      goto LABEL_26;
    }
LABEL_10:
    unsigned int v13 = i + v15;
  }
  if (v8)
  {
    *uint64_t v8 = 0;
    --*(_DWORD *)(*v4 - 16);
    uint64_t v16 = v8;
  }
  uint64_t result = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  uint64_t v18 = *a2;
  *a2 = 0;
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = v18;
  *uint64_t v16 = (uint64_t)result;
  uint64_t v19 = *v4;
  if (*v4) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v22 = *v4;
  if (*v4) {
    int v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
  unint64_t v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_21:
      uint64_t v16 = WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::expand(v4, v16);
      uint64_t result = (uint64_t *)*v16;
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_21;
  }
  uint64_t v26 = v4[2];
  result[1] = v26;
  result[2] = 0;
  if (v26) {
    int v27 = (uint64_t **)(v26 + 16);
  }
  else {
    int v27 = (uint64_t **)(v4 + 1);
  }
  *int v27 = result;
  void v4[2] = (uint64_t)result;
  uint64_t v17 = *v16;
  char v21 = 1;
LABEL_26:
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v17;
  *(unsigned char *)(a3 + 16) = v21;
  return result;
}

WTF **WebKit::ViewSnapshotStore::willRemoveImageFromSnapshot(WebKit::ViewSnapshotStore *this, WebKit::ViewSnapshot *a2)
{
  uint64_t v4 = (uint64_t *)((char *)this + 8);
  unint64_t v11 = a2;
  uint64_t result = (WTF **)WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WebKit::ViewSnapshot const*>((uint64_t *)this + 1, &v11);
  uint64_t v6 = (WTF **)*((void *)this + 1);
  if (v6) {
    v6 += *((unsigned int *)v6 - 1);
  }
  if (v6 != result)
  {
    int v7 = *result;
    if (*result)
    {
      unint64_t v11 = *result;
      uint64_t v8 = (void *)WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>>,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>(v4, (uint64_t)&v11);
      uint64_t v9 = *v4;
      if (*v4) {
        v9 += 8 * *(unsigned int *)(v9 - 4);
      }
      if ((void *)v9 != v8) {
        WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::remove(v4, v8);
      }
      uint64_t result = (WTF **)WTF::ListHashSet<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>::unlinkAndDelete((uint64_t)v4, v7);
    }
  }
  uint64_t v10 = *((void *)a2 + 2);
  if (v10) {
    uint64_t v10 = *(void *)(v10 + 32);
  }
  *(void *)this -= v10;
  return result;
}

WebKit::ViewSnapshot *WebKit::ViewSnapshotStore::recordSnapshot(WebKit::ViewSnapshot *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)a2 + 928))
  {
    if (*(void *)this >= 0x3200001uLL) {
      WebKit::ViewSnapshot::clearImage(*(WebCore::IOSurface **)(**((void **)this + 2) + 8));
    }
    WebKit::WebPageProxy::willRecordNavigationSnapshot((uint64_t)a2, (uint64_t)a3);
    LOBYTE(v20[0]) = 0;
    char v21 = 0;
    this = (WebKit::ViewSnapshot *)WebKit::WebPageProxy::takeViewSnapshot((uint64_t)a2, (uint64_t)v20);
    double v5 = v22;
    if (v22)
    {
      *((void *)v22 + 3) = *((void *)a2 + 117);
      uint64_t v6 = (char *)a2 + 764;
      if (!*((unsigned char *)a2 + 768)) {
        uint64_t v6 = (char *)a2 + 760;
      }
      *((_DWORD *)v5 + 8) = *(_DWORD *)v6;
      WebCore::Color::Color((WebCore::Color *)v20, (const Color *)(*((void *)a2 + 4) + 944));
      WebCore::Color::operator=();
      if (((unint64_t)v20[0] & 0x8000000000000) != 0)
      {
        uint64_t v19 = (unsigned int *)((unint64_t)v20[0] & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v20[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v19);
          WTF::fastFree((WTF *)v19, v7);
        }
      }
      uint64_t v8 = v22;
      float v9 = roundf(WebKit::WebPageProxy::viewScrollPosition(a2));
      if (v9 >= 2147500000.0)
      {
        uint64_t v11 = 0x7FFFFFFFLL;
      }
      else if (v9 <= -2147500000.0)
      {
        uint64_t v11 = 0x80000000;
      }
      else
      {
        uint64_t v11 = (int)v9;
      }
      float v12 = roundf(v10);
      if (v12 >= 2147500000.0)
      {
        unint64_t v13 = 0x7FFFFFFF00000000;
      }
      else if (v12 <= -2147500000.0)
      {
        unint64_t v13 = 0x8000000000000000;
      }
      else
      {
        unint64_t v13 = (unint64_t)(int)v12 << 32;
      }
      *((void *)v8 + 6) = v13 | v11;
      unsigned __int8 v14 = v22;
      WTF::URL::URL((uint64_t)v20, a3 + 7);
      WebCore::SecurityOriginData::fromURL(v24, (WebCore::SecurityOriginData *)v20, v15);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v14 + 56, (uint64_t)v24);
      if (v25 != -1) {
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_5[v25])(&v23, v24);
      }
      int v25 = -1;
      uint64_t v17 = v20[0];
      v20[0] = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v16);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      uint64_t v18 = v22;
      uint64_t v22 = 0;
      this = a3[42];
      a3[42] = v18;
      if (this)
      {
        WTF::RefCounted<WebKit::ViewSnapshot>::deref(this);
        this = v22;
        uint64_t v22 = 0;
        if (this) {
          return WTF::RefCounted<WebKit::ViewSnapshot>::deref(this);
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::ViewSnapshotStore::discardSnapshotImagesForOrigin(uint64_t this, const WebCore::SecurityOriginData *a2)
{
  for (uint64_t i = *(void *)(this + 16); i; this = WTF::fastFree((WTF *)v3, v4))
  {
    while (1)
    {
      atomic_uint *volatile v3 = *(atomic_uint *volatile *)i;
      atomic_fetch_add(*(atomic_uint *volatile *)i, 1u);
      uint64_t i = *(void *)(i + 16);
      this = WebCore::operator==();
      if (this) {
        this = (uint64_t)WebKit::ViewSnapshot::clearImage(*((WebCore::IOSurface **)v3 + 1));
      }
      if (atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
        break;
      }
      if (!i) {
        return this;
      }
    }
    atomic_store(1u, (unsigned int *)v3);
  }
  return this;
}

void WebKit::ViewSnapshot::~ViewSnapshot(WebKit::ViewSnapshot *this)
{
  WebKit::ViewSnapshot::clearImage(this);
  uint64_t v3 = *((unsigned int *)this + 20);
  if (v3 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_5[v3])(&v7, (char *)this + 56);
  }
  *((_DWORD *)this + 2WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = -1;
  uint64_t v4 = *((void *)this + 5);
  if ((v4 & 0x8000000000000) != 0)
  {
    uint64_t v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v2);
    }
  }
  std::unique_ptr<WebCore::IOSurface>::reset[abi:sn180100]((WebCore::IOSurface **)this + 2, 0);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
}

API::Attachment *API::Attachment::Attachment(API::Attachment *this, const WTF::String *a2, WebKit::WebPageProxy *a3)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9DDA00;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  uint64_t v6 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v6 += 2;
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = v6;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a3 + 6, (uint64_t)a3 + 16);
  char v7 = (atomic_uint *)*((void *)a3 + 3);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  *((void *)this + 7) = v7;
  *((_DWORD *)this + 16) = 0;
  return this;
}

void API::Attachment::~Attachment(API::Attachment *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  double v5 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  char v7 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7) {
    CFRelease(v7);
  }
}

{
  uint64_t vars8;

  API::Attachment::~Attachment(this, a2);

  JUMPOUT(0x199740C10);
}

WTF::StringImpl *API::Attachment::updateAttributes(API::Attachment *this, uint64_t *a2)
{
  uint64_t v2 = *((void *)this + 7);
  if (v2 && (uint64_t v3 = *(void *)(v2 + 8)) != 0)
  {
    return WebKit::WebPageProxy::updateAttachmentAttributes(v3 - 16, this, a2);
  }
  else
  {
    uint64_t v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return (WTF::StringImpl *)v6(v5);
  }
}

void API::Attachment::invalidate(API::Attachment *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  char v7 = 0;
  *((unsigned char *)this + 64) = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 16, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
  if (v7) {
    MEMORY[0x19972E8D0]((char *)this + 16);
  }
  uint64_t v8 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v8) {
    CFRelease(v8);
  }
  int v9 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 16, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1)
  {
    WTF::Lock::unlockSlow((API::Attachment *)((char *)this + 16));
  }
}

uint64_t WebKit::WebURLSchemeHandler::isAPIHandler(WebKit::WebURLSchemeHandler *this)
{
  return 0;
}

uint64_t API::ObjectImpl<(API::Object::Type)103>::type()
{
  return 103;
}

uint64_t API::ObjectImpl<(API::Object::Type)41>::type()
{
  return 41;
}

uint64_t WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 16);
    do
    {
      if (*(v4 - 2) != -1)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5) {
          CFRelease(*(CFTypeRef *)(v5 + 8));
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebScreenOrientationManager::OrientationDidChange>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2822;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::ScreenOrientationType,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  float v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

_OWORD *WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    unsigned int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v6;
    do
    {
      unint64_t v13 = (uint64_t *)(v5 + 24 * v10);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        uint64_t v9 = v13[1];
        if (v14 | v9)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            unsigned int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            unsigned int v18 = 0;
          }
          int v19 = WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::hash(v14, v9);
          int v20 = 0;
          do
          {
            unsigned int v21 = v19 & v18;
            uint64_t v22 = (_OWORD *)(v17 + 24 * (v19 & v18));
            int v19 = ++v20 + (v19 & v18);
          }
          while (*v22 != 0);
          uint64_t v23 = v17 + 24 * v21;
          uint64_t v26 = *(void *)(v23 + 16);
          int v25 = (void *)(v23 + 16);
          uint64_t v24 = v26;
          *int v25 = 0;
          if (v26) {
            CFRelease(*(CFTypeRef *)(v24 + 8));
          }
          *uint64_t v22 = *(_OWORD *)v13;
          uint64_t v27 = v5 + 24 * v10;
          uint64_t v28 = *(void *)(v27 + 16);
          *(void *)(v27 + 16) = 0;
          *int v25 = v28;
          uint64_t v29 = *(void *)(v27 + 16);
          *(void *)(v27 + 16) = 0;
          if (v29) {
            CFRelease(*(CFTypeRef *)(v29 + 8));
          }
          if (v13 == a3) {
            uint64_t v11 = v22;
          }
        }
        else
        {
          uint64_t v15 = v5 + 24 * v10;
          uint64_t v16 = *(void *)(v15 + 16);
          *(void *)(v15 + 16) = 0;
          if (v16) {
            CFRelease(*(CFTypeRef *)(v16 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), (void *)v9);
  return v11;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (uint64_t v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = *a2;
  unint64_t v10 = *a2 + ~(*a2 << 32);
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  uint64_t v14 = (uint64_t *)(v6 + 8 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if (v7) {
          uint64_t v26 = 0;
        }
        else {
          uint64_t v26 = *(unsigned int *)(v6 - 4);
        }
        char v25 = 0;
        uint64_t v24 = v6 + 8 * v26;
        goto LABEL_18;
      }
      if (v15 == -1) {
        uint64_t v16 = v14;
      }
      unsigned int v13 = (v13 + v17) & v8;
      uint64_t v14 = (uint64_t *)(v6 + 8 * v13);
      uint64_t v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *uint64_t v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      uint64_t v9 = *a2;
      uint64_t v14 = v16;
    }
  }
  *uint64_t v14 = v9;
  uint64_t v18 = *v4;
  if (*v4) {
    int v19 = *(_DWORD *)(v18 - 12) + 1;
  }
  else {
    int v19 = 1;
  }
  *(_DWORD *)(v18 - 12) = v19;
  uint64_t v20 = *v4;
  if (*v4) {
    int v21 = *(_DWORD *)(v20 - 12);
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
  unint64_t v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22) {
      goto LABEL_17;
    }
LABEL_22:
    uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v4, v14);
    uint64_t v14 = result;
    uint64_t v20 = *v4;
    if (*v4) {
      unint64_t v23 = *(unsigned int *)(v20 - 4);
    }
    else {
      unint64_t v23 = 0;
    }
    goto LABEL_17;
  }
  if (3 * v23 <= 4 * v22) {
    goto LABEL_22;
  }
LABEL_17:
  uint64_t v24 = v20 + 8 * v23;
  char v25 = 1;
LABEL_18:
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v24;
  *(unsigned char *)(a3 + 16) = v25;
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  unint64_t v11 = 0;
  if (v7)
  {
    uint64_t v7 = v7;
    unint64_t v12 = (void *)v6;
    do
    {
      if ((unint64_t)(*v12 + 1) >= 2)
      {
        unsigned int v13 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookupForReinsert(a1, v12);
        *unsigned int v13 = *v12;
        if (v12 == a3) {
          unint64_t v11 = v13;
        }
      }
      ++v12;
      --v7;
    }
    while (v7);
    goto LABEL_9;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_9:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookupForReinsert(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  unint64_t v4 = *a2 + ~(*a2 << 32);
  unint64_t v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  int v8 = 1;
  do
  {
    unsigned int v9 = v7;
    uint64_t v10 = *(void *)(v2 + 8 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 8 * v9;
}

uint64_t *WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  unsigned int v6 = WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::hash(*a2, v5) & v3;
  uint64_t result = (uint64_t *)(v2 + 24 * v6);
  uint64_t v8 = *result;
  uint64_t v9 = result[1];
  if (*result != v4 || v9 != v5)
  {
    int v11 = 1;
    while (v8 | v9)
    {
      unsigned int v6 = (v6 + v11) & v3;
      uint64_t result = (uint64_t *)(v2 + 24 * v6);
      uint64_t v8 = *result;
      uint64_t v9 = result[1];
      ++v11;
      if (*result == v4 && v9 == v5) {
        return result;
      }
    }
    return (uint64_t *)(v2 + 24 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

void WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  uint64_t v3 = a2[2];
  a2[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeTask,WTF::RawPtrTraits<WebKit::WebURLSchemeTask>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTask>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v8 >> 1, 0);
    }
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *result, void *a2)
{
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 12) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = *a2 + ~(*a2 << 32);
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  uint64_t v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  uint64_t v8 = *(void *)(v2 + 8 * v7);
  if (v8 == *a2) {
    return v2 + 8 * v7;
  }
  int v9 = 1;
  while (v8)
  {
    uint64_t v7 = (v7 + v9) & v3;
    uint64_t v8 = *(void *)(v2 + 8 * v7);
    ++v9;
    if (v8 == *a2) {
      return v2 + 8 * v7;
    }
  }
  return v2 + 8 * *(unsigned int *)(v2 - 4);
}

void *WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTask::willPerformRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::Function<void ()(WebCore::ResourceRequest)> &&)::$_0,void,WebCore::ResourceRequest>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DDA38;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTask::willPerformRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::Function<void ()(WebCore::ResourceRequest)> &&)::$_0,void,WebCore::ResourceRequest>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DDA38;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTask::willPerformRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::Function<void ()(WebCore::ResourceRequest)> &&)::$_0,void,WebCore::ResourceRequest>::call(uint64_t result)
{
  char v1 = *(unsigned char **)(result + 16);
  v1[544] = 0;
  if (!v1[265] && !v1[268]) {
    return (*(uint64_t (**)(void))(**(void **)(result + 24) + 16))();
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceResponse const&,WebCore::ResourceRequest const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, *(WebCore::ResourceResponseBase **)(a2 + 16));
  uint64_t v4 = *(WebCore::ResourceRequest **)(a2 + 24);

  return IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::URLSchemeTaskWillPerformRedirection,WTF::Function<void ()(WebCore::ResourceRequest &&)>>(WTF::Function<void ()(WebCore::ResourceRequest &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DDA60;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::URLSchemeTaskWillPerformRedirection,WTF::Function<void ()(WebCore::ResourceRequest &&)>>(WTF::Function<void ()(WebCore::ResourceRequest &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DDA60;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::URLSchemeTaskWillPerformRedirection,WTF::Function<void ()(WebCore::ResourceRequest &&)>>(WTF::Function<void ()(WebCore::ResourceRequest &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WebCore::ResourceRequest>>(a2, v4);
    if (v4[200])
    {
      (*(void (**)(void, unsigned char *))(*(void *)*v2 + 16))(*v2, v4);
      std::__optional_destruct_base<std::tuple<WebCore::ResourceRequest>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v4);
    }
    else
    {
      std::__optional_destruct_base<std::tuple<WebCore::ResourceRequest>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v4);
      IPC::Connection::cancelReply<Messages::WebPage::URLSchemeTaskWillPerformRedirection,WTF::Function<void ()(WebCore::ResourceRequest &&)>>(v2);
    }
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 8);
    IPC::Connection::cancelReply<Messages::WebPage::URLSchemeTaskWillPerformRedirection,WTF::Function<void ()(WebCore::ResourceRequest &&)>>(v3);
  }
}

void IPC::Connection::cancelReply<Messages::WebPage::URLSchemeTaskWillPerformRedirection,WTF::Function<void ()(WebCore::ResourceRequest &&)>>(void *a1)
{
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)v3);
  (*(void (**)(void, unsigned char *))(*(void *)*a1 + 16))(*a1, v3);
  CFTypeRef v2 = cf;
  CFTypeRef cf = 0;
  if (v2) {
    CFRelease(v2);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v3);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::URLSchemeTaskDidReceiveResponse>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2520;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceResponse const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceResponse const&>,0ul,1ul,2ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceResponse const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceResponse const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, *(uint64_t **)(a2 + 8));
  uint64_t v4 = *(WebCore::ResourceResponseBase **)(a2 + 16);

  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, v4);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::URLSchemeTaskDidReceiveData>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2519;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> const&>,0ul,1ul,2ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unsigned int *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, a2[1]);
  uint64_t v4 = (atomic_uint *)*a2[2];

  return IPC::ArgumentCoder<WebCore::SharedBuffer,void>::encode(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::ViewGestureController::*&)(void),WebKit::ViewGestureController*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  CFTypeRef v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::ViewGestureController::SnapshotRemovalTracker::*&)(void),WebKit::ViewGestureController::SnapshotRemovalTracker*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  CFTypeRef v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void *WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unsigned int v13 = (uint64_t *)(v6 + 8 * v11);
      uint64_t v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        uint64_t v15 = *a1;
        if (*a1) {
          int v16 = *(_DWORD *)(v15 - 8);
        }
        else {
          int v16 = 0;
        }
        unint64_t v17 = ~(*(void *)(*(void *)v14 + 8) << 32) + *(void *)(*(void *)v14 + 8);
        unint64_t v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
        unint64_t v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
        unsigned int v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~(v19 << 27)));
        int v21 = 1;
        do
        {
          unsigned int v22 = v20;
          uint64_t v23 = *(void *)(v15 + 8 * v20);
          unsigned int v20 = (v20 + v21++) & v16;
        }
        while (v23);
        uint64_t v24 = (void *)(v15 + 8 * v22);
        void *v24 = v14;
        if (v13 == a3) {
          unint64_t v12 = v24;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::ListHashSet<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>::unlinkAndDelete(uint64_t a1, WTF *this)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *((void *)this + 2);
  if (v2)
  {
    *(void *)(v2 + 16) = v3;
    uint64_t v3 = *((void *)this + 2);
  }
  else
  {
    *(void *)(a1 + 8) = v3;
  }
  if (v3) {
    int v4 = (void *)(v3 + 8);
  }
  else {
    int v4 = (void *)(a1 + 16);
  }
  *int v4 = v2;
  unsigned int v5 = *(unsigned int **)this;
  *(void *)this = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    int v7 = this;
    WTF::fastFree((WTF *)v5, this);
    this = v7;
  }

  return WTF::fastFree(this, this);
}

uint64_t *WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::remove(uint64_t *result, void *a2)
{
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 12) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>>,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  uint64_t v4 = *(void *)(**(void **)a2 + 8);
  unint64_t v5 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
  unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  unsigned int v8 = v3 & ((v7 >> 31) ^ v7);
  for (int i = 1; ; ++i)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void *)(v2 + 8 * v8);
    if (v11 != -1)
    {
      if (!v11) {
        return v2 + 8 * *(unsigned int *)(v2 - 4);
      }
      if (*(void *)(*(void *)v11 + 8) == v4) {
        break;
      }
    }
    unsigned int v8 = (v10 + i) & v3;
  }
  return v2 + 8 * v10;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::WeakRef<WebKit::ViewSnapshot,WTF::DefaultWeakPtrImpl>>>,WebKit::ViewSnapshot const*>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = ~(*a2 << 32) + *a2;
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  unsigned int v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  for (int i = 1; ; ++i)
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(void *)(v2 + 8 * v7);
    if (v10 != -1)
    {
      if (!v10) {
        return v2 + 8 * *(unsigned int *)(v2 - 4);
      }
      if (*(void *)(*(void *)v10 + 8) == *a2) {
        break;
      }
    }
    unsigned int v7 = (v9 + i) & v3;
  }
  return v2 + 8 * v9;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::installMemoryPressureHandler(void)::$_0,void,WTF::Critical,WTF::Synchronous>::call()
{
  {
    for (uint64_t i = *((void *)&WebKit::ViewSnapshotStore::singleton(void)::store + 1);
          *((void *)&WebKit::ViewSnapshotStore::singleton(void)::store + 1);
          uint64_t i = *((void *)&WebKit::ViewSnapshotStore::singleton(void)::store + 1))
    {
      if (!*(_DWORD *)(i - 12)) {
        break;
      }
      WebKit::ViewSnapshot::clearImage(*(WebCore::IOSurface **)(*(void *)qword_1EB35A7E0 + 8));
    }
  }
  else
  {
    byte_1EB35A7F0 = 0;
    WebKit::ViewSnapshotStore::singleton(void)::store = 0u;
    *(_OWORD *)&qword_1EB35A7E0 = 0u;
  }
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v6);
  if (v7)
  {
    uint64_t v2 = v6;
    uint64_t v3 = 8 * v7;
    do
    {
      unint64_t v4 = *v2++;
      WebKit::WebProcessPool::handleMemoryPressureWarning(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, v1);
}

void WebKit::GraphicsLayerCARemote::~GraphicsLayerCARemote(WebKit::GraphicsLayerCARemote *this, void *a2)
{
  uint64_t v3 = *((void *)this + 113);
  if (v3)
  {
    unint64_t v4 = *(WebKit::RemoteLayerTreeContext **)(v3 + 8);
    if (v4)
    {
      ++*((_DWORD *)v4 + 2);
      WebKit::RemoteLayerTreeContext::graphicsLayerWillLeaveContext(v4, this);
      if (*((_DWORD *)v4 + 2) == 1) {
        (*(void (**)(WebKit::RemoteLayerTreeContext *))(*(void *)v4 + 8))(v4);
      }
      else {
        --*((_DWORD *)v4 + 2);
      }
    }
    unint64_t v5 = (unsigned int *)*((void *)this + 113);
    *((void *)this + 113) = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  else
  {
    *((void *)this + 113) = 0;
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 112, a2);

  WebCore::GraphicsLayerCA::~GraphicsLayerCA(this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::GraphicsLayerCARemote::~GraphicsLayerCARemote(this, a2);

  WTF::fastFree(v2, v3);
}

void sub_198F0D438(_Unwind_Exception *a1, void *a2)
{
  unint64_t v4 = v3;
  unint64_t v6 = v4;
  int v7 = v4[2] - 1;
  if (v7) {
    void v6[2] = v7;
  }
  else {
    (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
  }
  unsigned int v8 = v2[113];
  v2[113] = 0;
  if (v8)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2 + 112, a2);
  WebCore::GraphicsLayerCA::~GraphicsLayerCA((WebCore::GraphicsLayerCA *)v2);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::RemoteLayerTreeContext::graphicsLayerWillLeaveContext(WebKit::RemoteLayerTreeContext *this, WebKit::GraphicsLayerCARemote *a2)
{
  uint64_t v4 = *((void *)this + 10);
  uint64_t result = (uint64_t *)((char *)this + 80);
  uint64_t v3 = v4;
  if (v4)
  {
    int v5 = *(_DWORD *)(v3 - 8);
    unint64_t v6 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
    unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    unsigned int v9 = v5 & ((v8 >> 31) ^ v8);
    for (int i = 1; ; ++i)
    {
      uint64_t v11 = v9;
      uint64_t v12 = *(void *)(v3 + 8 * v9);
      if (v12 != -1)
      {
        if (!v12) {
          return result;
        }
        if (*(WebKit::GraphicsLayerCARemote **)(v12 + 8) == a2) {
          break;
        }
      }
      unsigned int v9 = (v11 + i) & v5;
    }
    if (v11 != *(_DWORD *)(v3 - 4))
    {
      *(void *)(v3 + 8 * v11) = 0;
      if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v12);
        int v21 = result;
        uint64_t v19 = v11;
        uint64_t v20 = v3;
        WTF::fastFree((WTF *)v12, a2);
        uint64_t v11 = v19;
        uint64_t v3 = v20;
        uint64_t result = v21;
      }
      *(void *)(v3 + 8 * v11) = -1;
      ++*(_DWORD *)(*result - 16);
      uint64_t v13 = *result;
      if (*result) {
        int v14 = *(_DWORD *)(v13 - 12) - 1;
      }
      else {
        int v14 = -1;
      }
      *(_DWORD *)(v13 - 12) = v14;
      uint64_t v15 = *result;
      if (*result)
      {
        unsigned int v16 = 6 * *(_DWORD *)(v15 - 12);
        unsigned int v17 = *(_DWORD *)(v15 - 4);
        if (v16 < v17 && v17 >= 9)
        {
          return (uint64_t *)WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::rehash(result, v17 >> 1);
        }
      }
    }
  }
  return result;
}

void non-virtual thunk to'WebKit::GraphicsLayerCARemote::~GraphicsLayerCARemote(WebKit::GraphicsLayerCARemote *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::GraphicsLayerCARemote::~GraphicsLayerCARemote((WebKit::GraphicsLayerCARemote *)((char *)this - 608), a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::GraphicsLayerCARemote::createPlatformCALayer@<X0>(uint64_t a1@<X0>, WebCore::PlatformCALayerCocoa *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 904);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0)
  {
    uint64_t v9 = WTF::fastMalloc((WTF *)0x360);
    int v11 = WebCore::PlatformCALayerCocoa::layerTypeForPlatformLayer(a2, v10);
    WebKit::PlatformCALayerRemoteCustom::PlatformCALayerRemoteCustom(v9, v11, a2, a3, v6);
    uint64_t result = WebKit::RemoteLayerTreeContext::layerDidEnterContext(v6, (_OWORD *)v9, *(unsigned __int8 *)(v9 + 12));
    *a4 = v9;
  }
  else
  {
    uint64_t result = 80;
    __break(0xC471u);
  }
  return result;
}

void sub_198F0D718(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::GraphicsLayerCARemote::createPlatformCALayer@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 904);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0)
  {
    uint64_t v9 = WTF::fastMalloc((WTF *)0x360);
    WebKit::PlatformCALayerRemoteCustom::PlatformCALayerRemoteCustom(v9, 14, a2, a3, v6);
    uint64_t result = WebKit::RemoteLayerTreeContext::layerDidEnterContext(v6, (_OWORD *)v9, *(unsigned __int8 *)(v9 + 12));
    *a4 = v9;
  }
  else
  {
    uint64_t result = 86;
    __break(0xC471u);
  }
  return result;
}

void sub_198F0D7D8(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::GraphicsLayerCARemote::createPlatformCALayer@<X0>(uint64_t a1@<X0>, WebCore::Model **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 904);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0)
  {
    unint64_t v8 = *a2;
    *(_DWORD *)*a2 += 2;
    uint64_t v9 = WTF::fastMalloc((WTF *)0x350);
    ++*(_DWORD *)v8;
    WebKit::PlatformCALayerRemote::PlatformCALayerRemote(v9, 13, a3, v6);
    *(void *)uint64_t v9 = &unk_1EE9DED70;
    ++*(_DWORD *)v8;
    *(void *)(v9 + 84WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = v8;
    WTF::RefCounted<WebCore::Model>::deref(v8);
    WebKit::RemoteLayerTreeContext::layerDidEnterContext(v6, (_OWORD *)v9, *(unsigned __int8 *)(v9 + 12));
    WTF::RefCounted<WebCore::Model>::deref(v8);
    *a4 = v9;
    return (uint64_t)WTF::RefCounted<WebCore::Model>::deref(v8);
  }
  else
  {
    uint64_t result = 93;
    __break(0xC471u);
  }
  return result;
}

void sub_198F0D8FC(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  WTF::RefCounted<WebCore::Model>::deref(v1);
  WTF::RefCounted<WebCore::Model>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::GraphicsLayerCARemote::createPlatformCALayerHost@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 904);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0)
  {
    uint64_t v9 = WTF::fastMalloc((WTF *)0x350);
    WebKit::PlatformCALayerRemote::PlatformCALayerRemote(v9, 15, a3, v6);
    *(void *)uint64_t v9 = &unk_1EE9DE9E8;
    *(void *)(v9 + 84WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = a2;
    uint64_t result = WebKit::RemoteLayerTreeContext::layerDidEnterContext(v6, (_OWORD *)v9, *(unsigned __int8 *)(v9 + 12));
    *a4 = v9;
  }
  else
  {
    uint64_t result = 100;
    __break(0xC471u);
  }
  return result;
}

void sub_198F0D9F8(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::GraphicsLayerCARemote::createPlatformVideoLayer@<X0>(uint64_t a1@<X0>, WebCore::HTMLMediaElement *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 904);
  if (!v5 || (uint64_t v6 = *(void *)(v5 + 8)) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198F0DD18);
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)0x360);
  int v10 = WebCore::HTMLMediaElement::layerHostingContextID(a2);
  WebKit::PlatformCALayerRemoteCustom::PlatformCALayerRemoteCustom(v9, 8, v10, a3, v6);
  *(unsigned char *)(v9 + 84WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 1;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 12);
  long long v39 = *(_OWORD *)(v9 + 16);
  LOBYTE(v42) = 0;
  char v47 = 0;
  int v49 = 0;
  long long v40 = 0uLL;
  char v41 = 0;
  (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v9 + 880))(v9, &v40, v6, v11);
  uint64_t v12 = *((void *)a2 + 20);
  WebCore::HTMLMediaElement::videoLayerSize(a2);
  int v14 = v13;
  int v16 = v15;
  WebCore::HTMLMediaElement::naturalSize(a2);
  uint64_t v42 = v12;
  int v43 = v14;
  int v44 = v16;
  int v45 = v17;
  int v46 = v18;
  if (!v47) {
    char v47 = 1;
  }
  uint64_t v19 = (WebKit::PlaybackSessionManager **)WebKit::WebPage::videoPresentationManager(*(WebKit::WebPage **)(v6 + 24));
  WebKit::VideoPresentationManager::setupRemoteLayerHosting(v19, a2);
  uint64_t v20 = (uint64_t *)(v6 + 72);
  uint64_t v21 = *(void *)(v6 + 72);
  unint64_t v22 = *((void *)a2 + 20);
  if (v21
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand((uint64_t *)(v6 + 72), 0), (uint64_t v21 = *v20) != 0))
  {
    int v23 = *(_DWORD *)(v21 - 8);
  }
  else
  {
    int v23 = 0;
  }
  unsigned int v24 = WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::hash(&v39) & v23;
  char v25 = (unint64_t *)(v21 + 24 * v24);
  unint64_t v27 = *v25;
  unint64_t v26 = v25[1];
  if (*(_OWORD *)v25 == 0)
  {
LABEL_16:
    *(_OWORD *)char v25 = v39;
    float v25[2] = v22;
    uint64_t v30 = *v20;
    if (*v20) {
      int v31 = *(_DWORD *)(v30 - 12) + 1;
    }
    else {
      int v31 = 1;
    }
    *(_DWORD *)(v30 - 12) = v31;
    uint64_t v32 = *v20;
    if (*v20) {
      int v33 = *(_DWORD *)(v32 - 12);
    }
    else {
      int v33 = 0;
    }
    uint64_t v34 = (*(_DWORD *)(v32 - 16) + v33);
    unint64_t v35 = *(unsigned int *)(v32 - 4);
    if (v35 > 0x400)
    {
      if (v35 > 2 * v34) {
        goto LABEL_25;
      }
    }
    else if (3 * v35 > 4 * v34)
    {
      goto LABEL_25;
    }
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand((uint64_t *)(v6 + 72), v25);
    goto LABEL_25;
  }
  uint64_t v28 = 0;
  int v29 = 1;
  while (__PAIR128__(v26, v27) != v39)
  {
    if (v26 == -1) {
      uint64_t v28 = v25;
    }
    unsigned int v24 = (v24 + v29) & v23;
    char v25 = (unint64_t *)(v21 + 24 * v24);
    unint64_t v27 = *v25;
    unint64_t v26 = v25[1];
    ++v29;
    if (*(_OWORD *)v25 == 0)
    {
      if (v28)
      {
        *uint64_t v28 = 0;
        v28[1] = 0;
        void v28[2] = 0;
        --*(_DWORD *)(*v20 - 16);
        char v25 = v28;
      }
      goto LABEL_16;
    }
  }
LABEL_25:
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::add<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>((uint64_t)v38, (uint64_t *)(v6 + 32), &v39, &v40);
  uint64_t v37 = v9;
  uint64_t result = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::PlatformCALayerRemote*>((uint64_t)v38, (uint64_t *)(v6 + 56), &v39, &v37);
  if (v49 != -1) {
    uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t *))off_1EE9DF240[v49])(v38, &v48);
  }
  *a4 = v9;
  return result;
}

void sub_198F0DD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  if (a25 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9DF240[a25])(&a10, &a23);
  }
  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v25 + 8));
  _Unwind_Resume(a1);
}

uint64_t *WebKit::GraphicsLayerCARemote::createPlatformCAAnimation@<X0>(char a1@<W1>, WTF::StringImpl **a2@<X2>, uint64_t *a3@<X8>)
{
  return WebKit::PlatformCAAnimationRemote::create(a3, a1, a2);
}

uint64_t *WebKit::PlatformCAAnimationRemote::create(uint64_t *a1, char a2, WTF::StringImpl **a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x98);
  *(_DWORD *)(v6 + 8) = 1;
  *(unsigned char *)(v6 + 12) = a2;
  *(void *)uint64_t v6 = &unk_1EE9DE120;
  *(void *)(v6 + 16) = 0;
  *(unsigned char *)(v6 + 24) = 0;
  *(void *)(v6 + 4WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0;
  *(void *)(v6 + 48) = 0;
  *(void *)(v6 + 32) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v6 + 56) = _D0;
  *(_WORD *)(v6 + 64) = 0;
  *(void *)(v6 + 72) = 0;
  *(_DWORD *)(v6 + 8WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 256;
  *(unsigned char *)(v6 + 84) = 0;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 12WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  uint64_t result = WTF::String::operator=((uint64_t *)(v6 + 16), a3);
  *(unsigned char *)(v6 + 24) = a2;
  *a1 = v6;
  return result;
}

void sub_198F0DE48(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebKit::PlatformCAAnimationRemoteProperties::~PlatformCAAnimationRemoteProperties(v3, a2);
  WTF::fastFree(v2, v5);
  _Unwind_Resume(a1);
}

void WebKit::GraphicsLayerCARemote::pageTiledBackingBorderColor(void *a1@<X8>)
{
  *a1 = 0x110400001C4A7880;
}

WebCore::GraphicsLayerAsyncContentsDisplayDelegate *WebKit::GraphicsLayerCARemote::createAsyncContentsDisplayDelegate@<X0>(WebCore::GraphicsLayerAsyncContentsDisplayDelegate *this@<X0>, WebCore::GraphicsLayerAsyncContentsDisplayDelegate *a2@<X1>, WebCore::GraphicsLayerAsyncContentsDisplayDelegate **a3@<X8>)
{
  uint64_t v4 = *((void *)this + 113);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0)
  {
    ++*(_DWORD *)(v5 + 8);
    uint64_t v6 = *(void *)(*(void *)(v5 + 24) + 72);
    if (!v6 || !*(void *)(v6 + 32)) {
      goto LABEL_10;
    }
    unint64_t v7 = a2;
    {
      int v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v14);
    }
    this = (WebCore::GraphicsLayerAsyncContentsDisplayDelegate *)WebKit::WebProcess::singleton(void)::process;
    if (*(void *)(WebKit::WebProcess::singleton(void)::process + 40))
    {
      if (a2
        && ((*(uint64_t (**)(WebCore::GraphicsLayerAsyncContentsDisplayDelegate *))(*(void *)a2 + 56))(a2) & 1) != 0)
      {
        int v8 = *((_DWORD *)v7 + 2) + 1;
        *((_DWORD *)v7 + 2) = v8;
      }
      else
      {
        unint64_t v7 = (WebCore::GraphicsLayerAsyncContentsDisplayDelegate *)WTF::fastMalloc((WTF *)0x90);
        {
          int v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v15);
        }
        uint64_t v9 = *(atomic_uchar *volatile **)(WebKit::WebProcess::singleton(void)::process + 40);
        uint64_t v10 = *(void *)(*(void *)(v5 + 24) + 72);
        if (v10) {
          uint64_t v11 = *(void *)(v10 + 32);
        }
        else {
          uint64_t v11 = 0;
        }
        *((_DWORD *)v7 + 2) = 1;
        *(void *)unint64_t v7 = &unk_1EE9DF120;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v7 + 2, v9);
        *((unsigned char *)v7 + 56) = 0;
        *((unsigned char *)v7 + 128) = 0;
        *((void *)v7 + 17) = 0;
        *((void *)v7 + 4) = 0;
        *((void *)v7 + 5) = 0;
        *((void *)v7 + 3) = v11;
        *((unsigned char *)v7 + 48) = 0;
        int v8 = *((_DWORD *)v7 + 2);
      }
      *((_DWORD *)v7 + 2) = v8 + 1;
      uint64_t v12 = WebCore::GraphicsLayerCA::setContentsToAsyncDisplayDelegate();
      int v13 = a2;
      this = v7;
      if (v7)
      {
        if (*((_DWORD *)v7 + 2) == 1) {
          this = (WebCore::GraphicsLayerAsyncContentsDisplayDelegate *)(*(uint64_t (**)(WebCore::GraphicsLayerAsyncContentsDisplayDelegate *))(*(void *)v7 + 8))(v7);
        }
        else {
          --*((_DWORD *)v7 + 2);
        }
      }
      *((void *)v7 + 4) = v12;
      *((void *)v7 + 5) = v13;
    }
    else
    {
LABEL_10:
      unint64_t v7 = 0;
    }
    *a3 = v7;
    if (*(_DWORD *)(v5 + 8) == 1) {
      return (WebCore::GraphicsLayerAsyncContentsDisplayDelegate *)(*(uint64_t (**)(uint64_t, WebCore::GraphicsLayerAsyncContentsDisplayDelegate *))(*(void *)v5 + 8))(v5, a2);
    }
    else {
      --*(_DWORD *)(v5 + 8);
    }
  }
  else
  {
    *a3 = 0;
  }
  return this;
}