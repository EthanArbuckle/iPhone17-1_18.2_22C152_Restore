_DWORD *WebKit::RemoteCDMInstanceProxy::createSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  atomic_uint *v10;
  uint64_t v11;
  _DWORD *result;
  _DWORD *v13;
  WTF *v14;

  (*(void (**)(_DWORD **__return_ptr))(**(void **)(a1 + 40) + 80))(&v13);
  if (v13)
  {
    v5 = *(void *)(a1 + 32);
    if (v5)
    {
      v6 = *(void *)(v5 + 8);
      if (v6)
      {
        v7 = *(void *)(v6 + 16);
        if (v7)
        {
          if (*(void *)(v7 + 8))
          {
            (*(void (**)(void))(*(void *)v13 + 16))();
            WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
            v8 = *(void *)(a1 + 32);
            if (v8)
            {
              v9 = *(void *)(v8 + 8);
              if (v9)
              {
                WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v9 + 8), *(void *)(v8 + 8));
                v10 = *(atomic_uint **)(v9 + 8);
                if (v10) {
                  atomic_fetch_add(v10, 1u);
                }
              }
            }
            v13 = 0;
            operator new();
          }
        }
      }
    }
  }
  v14 = 0;
  v11 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v11 + 16))(v11, &v14);
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
    else {
      --result[2];
    }
  }
  return result;
}

void WebKit::RemoteCDMInstanceSessionProxy::~RemoteCDMInstanceSessionProxy(WebKit::RemoteCDMInstanceSessionProxy *this, void *a2)
{
  v3 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  uint64_t v5 = *((void *)this + 3);
  if (v5)
  {
    *(void *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((void *)this + 3);
    *((void *)this + 3) = 0;
    if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  else
  {
    *((void *)this + 3) = 0;
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t vars8;

  WebKit::RemoteCDMInstanceSessionProxy::~RemoteCDMInstanceSessionProxy(this, a2);

  JUMPOUT(0x199740C10);
}

void non-virtual thunk to'WebKit::RemoteCDMInstanceSessionProxy::~RemoteCDMInstanceSessionProxy(WebKit::RemoteCDMInstanceSessionProxy *this, void *a2)
{
}

{
  uint64_t vars8;

  WebKit::RemoteCDMInstanceSessionProxy::~RemoteCDMInstanceSessionProxy((WebKit::RemoteCDMInstanceSessionProxy *)((char *)this - 16), a2);

  JUMPOUT(0x199740C10);
}

unsigned int *WebKit::RemoteCDMInstanceSessionProxy::requestLicense(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5, uint64_t *a6)
{
  if (*a5
    && (uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24),
        ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 128))(v12, a4) & 1) != 0))
  {
    uint64_t v13 = *(void *)(a1 + 40);
    v21 = *a5;
    *a5 = 0;
    uint64_t v14 = *a6;
    *a6 = 0;
    v15 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v15 = &unk_1EE9C0BC0;
    v15[1] = v14;
    v20 = v15;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int **, void **))(*(void *)v13 + 40))(v13, a2, a3, a4, &v21, &v20);
    v17 = v20;
    v20 = 0;
    if (v17) {
      (*(void (**)(void *))(*v17 + 8))(v17);
    }
  }
  else
  {
    v21 = 0;
    uint64_t v18 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, unsigned int **, void, void, void))(*(void *)v18 + 16))(v18, &v21, MEMORY[0x1E4F30980], 0, 0);
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  result = v21;
  v21 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v16);
  }
  return result;
}

unsigned int *WebKit::RemoteCDMInstanceSessionProxy::updateLicense(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  if (*a4)
  {
    (*(void (**)(unsigned int **__return_ptr))(**(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
                                                        + 136))(&v20);
    if (v20)
    {
      uint64_t v9 = *(void *)(a1 + 40);
      v26[0] = v20;
      v20 = 0;
      uint64_t v10 = *a5;
      *a5 = 0;
      v11 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v11 = &unk_1EE9C0BE8;
      v11[1] = v10;
      v21 = v11;
      (*(void (**)(uint64_t, uint64_t, uint64_t, void *, void **))(*(void *)v9 + 48))(v9, a2, a3, v26, &v21);
      uint64_t v13 = v21;
      v21 = 0;
      if (v13) {
        (*(void (**)(void *))(*v13 + 8))(v13);
      }
      uint64_t v14 = (unsigned int *)v26[0];
      v26[0] = 0;
      if (v14) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v12);
      }
    }
    else
    {
      LOBYTE(v26[0]) = 0;
      char v27 = 0;
      v24[0] = 0;
      char v25 = 0;
      LOBYTE(v21) = 0;
      char v23 = 0;
      uint64_t v18 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, void, void *, char *, void **, void))(*(void *)v18 + 16))(v18, 0, v26, v24, &v21, 0);
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      if (v23)
      {
        v19 = v22;
        v22 = 0;
        if (v19) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v19, v12);
        }
      }
      if (v27) {
        WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v12);
      }
    }
    result = v20;
    v20 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v12);
    }
  }
  else
  {
    LOBYTE(v26[0]) = 0;
    char v27 = 0;
    v24[0] = 0;
    char v25 = 0;
    LOBYTE(v21) = 0;
    char v23 = 0;
    uint64_t v15 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t, void *, char *, void **, void))(*(void *)v15 + 16))(v15, 1, v26, v24, &v21, 0);
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 8))(v15);
    if (v23)
    {
      result = v22;
      v22 = 0;
      if (result) {
        result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v17);
      }
    }
    if (v27) {
      return (unsigned int *)WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v17);
    }
  }
  return result;
}

unsigned int *WebKit::RemoteCDMInstanceSessionProxy::loadSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
                                                         + 144))(&v21);
  if (v22)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *a5;
    *a5 = 0;
    v11 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v11 = &unk_1EE9C0C10;
    v11[1] = v10;
    v19[0] = v11;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t, void *))(*(void *)v9 + 56))(v9, a2, &v21, a4, v19);
    result = (unsigned int *)v19[0];
    v19[0] = 0;
    if (result) {
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
  }
  else
  {
    LOBYTE(v19[0]) = 0;
    char v20 = 0;
    v18[0] = 0;
    v18[8] = 0;
    v15[0] = 0;
    char v17 = 0;
    uint64_t v14 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void *, unsigned char *, unsigned char *, void, uint64_t))(*(void *)v14 + 16))(v14, v19, v18, v15, 0, 2);
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
    if (v17)
    {
      result = v16;
      v16 = 0;
      if (result) {
        result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v12);
      }
    }
    if (v20) {
      result = (unsigned int *)WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v12);
    }
  }
  if (v22)
  {
    result = (unsigned int *)v21;
    v21 = 0;
    if (result)
    {
      if (*result == 2) {
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v12);
      }
      else {
        *result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteCDMInstanceSessionProxy::closeSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *a3;
  *a3 = 0;
  v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v6 = &unk_1EE9C0C38;
  v6[1] = v5;
  v8 = v6;
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v4 + 64))(v4, a2, &v8);
  uint64_t result = (uint64_t)v8;
  v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::RemoteCDMInstanceSessionProxy::removeSessionData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *a4;
  *a4 = 0;
  v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v8 = &unk_1EE9C0C60;
  v8[1] = v7;
  uint64_t v10 = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v6 + 72))(v6, a2, a3, &v10);
  uint64_t result = (uint64_t)v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::RemoteCDMInstanceSessionProxy::storeRecordOfKeyUsage(WebKit::RemoteCDMInstanceSessionProxy *this, const WTF::String *a2)
{
  return (*(uint64_t (**)(void, const WTF::String *))(**((void **)this + 5) + 80))(*((void *)this + 5), a2);
}

atomic_uchar *WebKit::RemoteCDMInstanceSessionProxy::updateKeyStatuses(atomic_uchar *result, uint64_t *a2)
{
  uint64_t v2 = *((void *)result + 4);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 16);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          uint64_t v6 = result;
          uint64_t result = *(atomic_uchar **)(v5 + 24);
          if (result)
          {
            uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(void *)(v5 + 32), &v18);
            if (v18)
            {
              uint64_t v8 = *(void *)(v18 + 56);
              uint64_t v9 = *((void *)v6 + 6);
              uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)uint64_t v10 = 753;
              *((void *)v10 + 1) = v9;
              *((void *)v10 + 66) = (char *)v10 + 16;
              *((void *)v10 + 67) = 512;
              *((void *)v10 + 68) = 0;
              *((void *)v10 + 70) = 0;
              *((void *)v10 + 69) = 0;
              IPC::Encoder::encodeHeader(v10);
              v19 = v10;
              IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v10, *((unsigned int *)a2 + 3));
              uint64_t v11 = *((unsigned int *)a2 + 3);
              if (v11)
              {
                uint64_t v12 = *a2;
                uint64_t v13 = v12 + 16 * v11;
                do
                {
                  IPC::ArgumentCoder<WebCore::SharedBuffer,void>::encode(v10, *(atomic_uint **)v12);
                  IPC::ArgumentCoder<WebCore::CDMKeyStatus,void>::encode<IPC::Encoder>(v10, *(unsigned char *)(v12 + 8));
                  v12 += 16;
                }
                while (v12 != v13);
              }
              IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v19, 0, 0);
              uint64_t result = (atomic_uchar *)v19;
              v19 = 0;
              if (result)
              {
                IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
                uint64_t result = (atomic_uchar *)WTF::fastFree(v16, v17);
              }
              uint64_t v15 = v18;
              uint64_t v18 = 0;
              if (v15) {
                return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v15 + 16));
              }
            }
          }
        }
      }
    }
  }
  return result;
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteCDMInstanceSessionProxy::updateKeyStatuses(uint64_t a1, uint64_t *a2)
{
  return WebKit::RemoteCDMInstanceSessionProxy::updateKeyStatuses((atomic_uchar *)(a1 - 16), a2);
}

atomic_uchar *WebKit::RemoteCDMInstanceSessionProxy::sendMessage(atomic_uchar *result, char a2, atomic_uint **a3)
{
  uint64_t v3 = *((void *)result + 4);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 16);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6)
        {
          uint64_t v7 = result;
          uint64_t result = *(atomic_uchar **)(v6 + 24);
          if (result)
          {
            uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(void *)(v6 + 32), &v20);
            if (v20)
            {
              uint64_t v10 = *(void *)(v20 + 56);
              uint64_t v11 = *a3;
              *a3 = 0;
              v19 = (atomic_uchar *)v11;
              uint64_t v12 = *((void *)v7 + 6);
              uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)uint64_t v13 = 751;
              *((void *)v13 + 1) = v12;
              *((void *)v13 + 66) = (char *)v13 + 16;
              *((void *)v13 + 67) = 512;
              *((void *)v13 + 68) = 0;
              *((void *)v13 + 70) = 0;
              *((void *)v13 + 69) = 0;
              IPC::Encoder::encodeHeader(v13);
              v21 = v13;
              IPC::ArgumentCoder<WebCore::CDMKeyStatus,void>::encode<IPC::Encoder>(v13, a2);
              IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v13, (atomic_uint **)&v19);
              IPC::Connection::sendMessageImpl(v10, (uint64_t *)&v21, 0, 0);
              uint64_t v15 = v21;
              v21 = 0;
              if (v15)
              {
                IPC::Encoder::~Encoder(v15, v14);
                WTF::fastFree(v17, v18);
              }
              uint64_t result = v19;
              v19 = 0;
              if (result) {
                uint64_t result = (atomic_uchar *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v14);
              }
              uint64_t v16 = v20;
              uint64_t v20 = 0;
              if (v16) {
                return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v16 + 16));
              }
            }
          }
        }
      }
    }
  }
  return result;
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteCDMInstanceSessionProxy::sendMessage(uint64_t a1, char a2, atomic_uint **a3)
{
  return WebKit::RemoteCDMInstanceSessionProxy::sendMessage((atomic_uchar *)(a1 - 16), a2, a3);
}

atomic_uchar *WebKit::RemoteCDMInstanceSessionProxy::sessionIdChanged(atomic_uchar *this, const WTF::String *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 16);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          uint64_t v6 = this;
          this = *(atomic_uchar **)(v5 + 24);
          if (this)
          {
            this = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(this, *(void *)(v5 + 32), &v15);
            if (v15)
            {
              uint64_t v8 = *(void *)(v15 + 56);
              uint64_t v9 = *((void *)v6 + 6);
              uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)uint64_t v10 = 752;
              *((void *)v10 + 1) = v9;
              *((void *)v10 + 66) = (char *)v10 + 16;
              *((void *)v10 + 67) = 512;
              *((void *)v10 + 68) = 0;
              *((void *)v10 + 70) = 0;
              *((void *)v10 + 69) = 0;
              IPC::Encoder::encodeHeader(v10);
              uint64_t v16 = v10;
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, (uint64_t *)a2);
              IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v16, 0, 0);
              this = (atomic_uchar *)v16;
              uint64_t v16 = 0;
              if (this)
              {
                IPC::Encoder::~Encoder((IPC::Encoder *)this, v11);
                this = (atomic_uchar *)WTF::fastFree(v13, v14);
              }
              uint64_t v12 = v15;
              uint64_t v15 = 0;
              if (v12) {
                return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v12 + 16));
              }
            }
          }
        }
      }
    }
  }
  return this;
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteCDMInstanceSessionProxy::sessionIdChanged(atomic_uchar *this, const WTF::String *a2)
{
  return WebKit::RemoteCDMInstanceSessionProxy::sessionIdChanged(this - 16, a2);
}

uint64_t WebCore::AudioTrackPrivateClient::type(WebCore::AudioTrackPrivateClient *this)
{
  return 1;
}

uint64_t WebKit::RemoteCDMInstanceProxy::logger(WebKit::RemoteCDMInstanceProxy *this)
{
  return *((void *)this + 9);
}

uint64_t WebKit::RemoteCDMInstanceProxy::logIdentifier(WebKit::RemoteCDMInstanceProxy *this)
{
  return *((void *)this + 10);
}

uint64_t WebKit::RemoteCDMInstanceSessionProxy::displayID(WebKit::RemoteCDMInstanceSessionProxy *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t non-virtual thunk to'WebKit::RemoteCDMInstanceSessionProxy::displayID(WebKit::RemoteCDMInstanceSessionProxy *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WebKit::RemoteCDMInstanceSessionProxy **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::RemoteCDMInstanceSessionProxy *)-1) {
        std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>::reset[abi:sn180100](v4, 0);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void std::default_delete<WebKit::RemoteCDMInstanceConfiguration>::operator()[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (a2)
  {
    uint64_t v2 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, a2);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
    JUMPOUT(0x199740C10);
  }
}

WebKit::RemoteCDMInstanceSessionProxy *std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>::reset[abi:sn180100](WebKit::RemoteCDMInstanceSessionProxy **a1, WebKit::RemoteCDMInstanceSessionProxy *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteCDMInstanceSessionProxy::~RemoteCDMInstanceSessionProxy(result, a2);
    JUMPOUT(0x199740C10);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::RemoteAudioHardwareListener::AudioOutputDeviceChanged>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 707;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  char v17 = v10;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v10, *a2);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v10, a2[1]);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  char v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

void *WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastMalloc((WTF *)(8 * v7 + 16));
  if (v7)
  {
    uint64_t v10 = v7;
    uint64_t v11 = (_DWORD *)(v8 + 20);
    do
    {
      *((unsigned char *)v11 - 4) = -1;
      _DWORD *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = (void *)(v4 + 8 * v12);
      unsigned int v15 = *(unsigned __int8 *)v14;
      if (v15 <= 0xFD)
      {
        uint64_t v16 = *a1;
        if (*a1) {
          int v17 = *(_DWORD *)(v16 - 8);
        }
        else {
          int v17 = 0;
        }
        int v18 = 0;
        unsigned int v19 = 9 * ((~(v15 << 15) + v15) ^ ((~(v15 << 15) + v15) >> 10));
        unsigned int v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
        do
        {
          uint64_t v21 = v20 & v17;
          unsigned int v20 = ++v18 + v21;
        }
        while (*(unsigned __int8 *)(v16 + 8 * v21) != 255);
        char v22 = (void *)(v16 + 8 * v21);
        void *v22 = *v14;
        if (v14 == a2) {
          uint64_t v13 = v22;
        }
      }
      ++v12;
    }
    while (v12 != v5);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v13;
}

uint64_t WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(uint64_t a1, unsigned __int8 a2)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 - 8);
  unsigned int v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  uint64_t v4 = v2 & (((v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11)) ^ (((v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11)) >> 16));
  int v5 = *(unsigned __int8 *)(a1 + 8 * v4);
  if (v5 == a2) {
    return 1;
  }
  int v7 = 1;
  do
  {
    BOOL v6 = v5 != 255;
    if (v5 == 255) {
      break;
    }
    LODWORD(v4) = (v4 + v7) & v2;
    int v5 = *(unsigned __int8 *)(a1 + 8 * v4);
    ++v7;
  }
  while (v5 != a2);
  return v6;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSessionProxyManager::updatePreferredBufferSizeForProcess(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  unsigned int v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C0AD0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioSessionProxyManager::updatePreferredBufferSizeForProcess(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C0AD0;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WebCore::AudioSession *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSessionProxyManager::updatePreferredBufferSizeForProcess(void)::$_0,void>::call(WebCore::AudioSession *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t result = *(WebCore::AudioSession **)(v1 + 8);
    if (result) {
      return WebKit::RemoteAudioSessionProxyManager::updatePreferredBufferSizeForProcess(result);
    }
  }
  return result;
}

unint64_t WTF::Vector<audit_token_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  int v5 = *(void **)a1;
  if (*(void *)a1 > a3 || (unint64_t)v5 + 32 * *(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<audit_token_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  else
  {
    unint64_t v6 = a3 - (void)v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<audit_token_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void **WTF::Vector<audit_token_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      uint64_t v4 = *result;
      uint64_t v5 = *((unsigned int *)result + 3);
      unint64_t v6 = (void *)WTF::fastMalloc((WTF *)(32 * a2));
      *((_DWORD *)v3 + 2) = v2;
      unsigned int *v3 = v6;
      uint64_t result = (void **)memcpy(v6, v4, 32 * v5);
      if (v4)
      {
        if (*v3 == v4)
        {
          unsigned int *v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
  return result;
}

unint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioSessionProxyManager::updatePresentingProcesses(void)::$_0,void,WebKit::RemoteAudioSessionProxy &>::call(unint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 56))
  {
    unint64_t v2 = result;
    uint64_t result = *(void *)(a2 + 16);
    if (result)
    {
      uint64_t result = (unint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)result, *(void *)(a2 + 24), &v10);
      uint64_t v9 = v10;
      unint64_t v3 = v10 + 216;
      uint64_t v10 = 0;
      if (v9) {
        uint64_t result = (unint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v9 + 16));
      }
    }
    else
    {
      unint64_t v3 = 216;
    }
    if (*(unsigned char *)(v3 + 32))
    {
      uint64_t v4 = *(void *)(v2 + 8);
      uint64_t v5 = *(unsigned int *)(v4 + 12);
      if (v5 == *(_DWORD *)(v4 + 8))
      {
        uint64_t result = WTF::Vector<audit_token_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v5 + 1, v3);
        unint64_t v6 = (_OWORD *)(*(void *)v4 + 32 * *(unsigned int *)(v4 + 12));
        long long v7 = *(_OWORD *)result;
        long long v8 = *(_OWORD *)(result + 16);
      }
      else
      {
        unint64_t v6 = (_OWORD *)(*(void *)v4 + 32 * v5);
        long long v7 = *(_OWORD *)v3;
        long long v8 = *(_OWORD *)(v3 + 16);
      }
      _OWORD *v6 = v7;
      v6[1] = v8;
      ++*(_DWORD *)(v4 + 12);
    }
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSessionProxyManager::beginAudioSessionInterruption(void)::$_0,void,WebKit::RemoteAudioSessionProxy &>::call(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 56))
  {
    *(unsigned char *)(a2 + 57) = 1;
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(atomic_uchar **)(a2 + 16), *(void *)(a2 + 24), &v5);
    uint64_t v2 = v5;
    uint64_t v3 = *(void *)(v5 + 56);
    uint64_t v5 = 0;
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 16));
    return IPC::Connection::send<Messages::RemoteAudioSession::BeginInterruptionRemote>(v3);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSessionProxyManager::endAudioSessionInterruption(WebCore::AudioSession::MayResume)::$_0,void,WebKit::RemoteAudioSessionProxy &>::call(IPC::Encoder *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 56))
  {
    char v2 = *((unsigned char *)result + 8);
    *(unsigned char *)(a2 + 57) = 0;
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(atomic_uchar **)(a2 + 16), *(void *)(a2 + 24), &v9);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)v9 + 7);
    uint64_t v9 = 0;
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v3 + 2));
    uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v5 = 724;
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 66) = (char *)v5 + 16;
    *((void *)v5 + 67) = 512;
    *((void *)v5 + 68) = 0;
    *((void *)v5 + 70) = 0;
    *((void *)v5 + 69) = 0;
    IPC::Encoder::encodeHeader(v5);
    uint64_t v9 = v5;
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v5, v2);
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v9, 0, 0);
    uint64_t result = v9;
    uint64_t v9 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v6);
      return (IPC::Encoder *)WTF::fastFree(v7, v8);
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSessionProxyManager::configurationDidChange(WebCore::AudioSession const&)::$_0,void,WebKit::RemoteAudioSessionProxy &>::call(int a1, WebKit::RemoteAudioSessionProxy *this)
{
  return WebKit::RemoteAudioSessionProxy::configurationChanged(this);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioTrackProxy::RemoteAudioTrackProxy(WebKit::GPUConnectionToWebProcess &,WebCore::AudioTrackPrivate &,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void,WTF::Function<void ()(void)> &&>::call()
{
  return WTF::ensureOnMainThread();
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 8);
    unint64_t v4 = *a2 + ~(*a2 << 32);
    unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
    unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
    uint64_t v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
    uint64_t v8 = *(void *)(v2 + 16 * v7);
    if (v8 == *a2) {
      return *(void *)(v2 + 16 * v7 + 8);
    }
    int v9 = 1;
    while (v8)
    {
      uint64_t v7 = (v7 + v9) & v3;
      uint64_t v8 = *(void *)(v2 + 16 * v7);
      ++v9;
      if (v8 == *a2) {
        return *(void *)(v2 + 16 * v7 + 8);
      }
    }
  }
  return 0;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v8 = 0;
    while (1)
    {
      int v9 = (uint64_t *)(v2 + 16 * v8);
      uint64_t v10 = *v9;
      if (*v9 != -1)
      {
        if (v10)
        {
          uint64_t v13 = *a1;
          if (*a1) {
            int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            int v14 = 0;
          }
          unint64_t v15 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
          unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          unsigned int v18 = v14 & ((v17 >> 31) ^ v17);
          int v19 = 1;
          do
          {
            unsigned int v20 = v18;
            uint64_t v21 = *(void *)(v13 + 16 * v18);
            unsigned int v18 = (v18 + v19++) & v14;
          }
          while (v21);
          char v22 = (uint64_t *)(v13 + 16 * v20);
          uint64_t v23 = v22[1];
          v22[1] = 0;
          if (v23) {
            (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
          }
          uint64_t *v22 = *v9;
          uint64_t v24 = v2 + 16 * v8;
          uint64_t v25 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          v22[1] = v25;
          uint64_t v12 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          if (!v12) {
            goto LABEL_21;
          }
LABEL_20:
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
          goto LABEL_21;
        }
        uint64_t v11 = v2 + 16 * v8;
        uint64_t v12 = *(void *)(v11 + 8);
        *(void *)(v11 + 8) = 0;
        if (v12) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if (++v8 == v3) {
        goto LABEL_24;
      }
    }
  }
  if (v2)
  {
LABEL_24:
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  unint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    uint64_t *v16 = v11;
    uint64_t v20 = *a3;
    *a3 = 0;
    uint64_t result = (uint64_t *)v16[1];
    v16[1] = v20;
    if (result) {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    }
    uint64_t v22 = *a1;
    if (*a1) {
      int v23 = *(_DWORD *)(v22 - 12) + 1;
    }
    else {
      int v23 = 1;
    }
    *(_DWORD *)(v22 - 12) = v23;
    uint64_t v25 = *a1;
    if (*a1) {
      int v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
    unint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_24:
        uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, v16);
        unint64_t v16 = result;
        uint64_t v25 = *a1;
        if (*a1) {
          unint64_t v28 = *(unsigned int *)(v25 - 4);
        }
        else {
          unint64_t v28 = 0;
        }
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_24;
    }
    *(void *)a4 = v16;
    *(void *)(a4 + 8) = v25 + 16 * v28;
    *(unsigned char *)(a4 + 16) = 1;
    return result;
  }
  unsigned int v18 = 0;
  int v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1) {
      unsigned int v18 = v16;
    }
    unsigned int v15 = (v15 + v19) & v10;
    unint64_t v16 = (uint64_t *)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *unsigned int v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        uint64_t v11 = *a2;
        unint64_t v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *(unsigned int *)(v8 - 4);
  }
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v8 + 16 * v24;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v29 = *a3;
  *a3 = 0;
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = v29;
  if (result)
  {
    v30 = *(uint64_t (**)(void))(*result + 8);
    return (uint64_t *)v30();
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          int v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = v26[1];
          v26[1] = 0;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
          *int v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
          if (v13 == a3) {
            unint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(void *)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      unint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 16 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          uint64_t v24 = v15 + 16 * v22;
          std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>::reset[abi:sn180100]((WebKit::RemoteCDMInstanceSessionProxy **)(v24 + 8), 0);
          *(void *)uint64_t v24 = *v13;
          uint64_t v25 = v6 + 16 * v11;
          uint64_t v26 = *(void *)(v25 + 8);
          v25 += 8;
          *(void *)uint64_t v25 = 0;
          *(void *)(v24 + 8) = v26;
          std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>::reset[abi:sn180100]((WebKit::RemoteCDMInstanceSessionProxy **)v25, 0);
          if (v13 == a3) {
            uint64_t v12 = v24;
          }
        }
        else
        {
          std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>::reset[abi:sn180100]((WebKit::RemoteCDMInstanceSessionProxy **)(v6 + 16 * v11 + 8), 0);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WebKit::RemoteCDMInstanceSessionProxy *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, uint64_t a2)
{
  *(void *)a2 = -1;
  uint64_t result = std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>::reset[abi:sn180100]((WebKit::RemoteCDMInstanceSessionProxy **)(a2 + 8), 0);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WebKit::RemoteCDMInstanceSessionProxy *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,BOOL)> &&)::$_0,void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::String const,BOOL,WebCore::CDMInstanceSession::SuccessValue>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C0BC0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,BOOL)> &&)::$_0,void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::String const,BOOL,WebCore::CDMInstanceSession::SuccessValue>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C0BC0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,BOOL)> &&)::$_0,void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::String const,BOOL,WebCore::CDMInstanceSession::SuccessValue>::call(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5 = *a2;
  *a2 = 0;
  uint64_t v9 = v5;
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, unsigned int **, uint64_t, uint64_t, BOOL))(*(void *)v6 + 16))(v6, &v9, a3, a4, a5 == 1);
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::updateLicense(WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref>> &&,BOOL)> &&)::$_0,void,BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,WebCore::CDMMessageType,WebCore::CDMInstanceSession::SuccessValue>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C0BE8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::updateLicense(WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref>> &&,BOOL)> &&)::$_0,void,BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,WebCore::CDMMessageType,WebCore::CDMInstanceSession::SuccessValue>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C0BE8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::updateLicense(WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref>> &&,BOOL)> &&)::$_0,void,BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,WebCore::CDMMessageType,WebCore::CDMInstanceSession::SuccessValue>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL))(*(void *)v6 + 16))(v6, a2, a3, a4, a5, a6 == 1);
  unsigned int v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);

  return v7(v6);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::loadSession(WebCore::CDMSessionType,WTF::String,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,BOOL,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0,void,std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::optional<double>,std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,WebCore::CDMInstanceSession::SuccessValue,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C0C10;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::loadSession(WebCore::CDMSessionType,WTF::String,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,BOOL,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0,void,std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::optional<double>,std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,WebCore::CDMInstanceSession::SuccessValue,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C0C10;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::loadSession(WebCore::CDMSessionType,WTF::String,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,BOOL,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0,void,std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::optional<double>,std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,WebCore::CDMInstanceSession::SuccessValue,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, BOOL))(*(void *)v5 + 16))(v5, a2, a3, a4, a5 == 1);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C0C38;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C0C38;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,BOOL)> &&)::$_0,void,WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMInstanceSession::SuccessValue>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C0C60;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,BOOL)> &&)::$_0,void,WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMInstanceSession::SuccessValue>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C0C60;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,BOOL)> &&)::$_0,void,WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMInstanceSession::SuccessValue>::call(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL))(*(void *)v4 + 16))(v4, a2, a3, a4 == 1);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

void WebKit::WebMemorySampler::processName(WebKit::WebMemorySampler *this)
{
  if (!objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier")) {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28F80], "processInfo"), "processName");
  }

  JUMPOUT(0x19972EAD0);
}

uint64_t WebKit::WebMemorySampler::sampleWebKit@<X0>(WebKit::WebMemorySampler *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v118 = 0;
  uint64_t v119 = 0;
  uint64_t v120 = 0;
  uint64_t v3 = (WebCore *)WTF::fastMallocStatistics(&v118, this);
  uint64_t v116 = v119;
  uint64_t v117 = v119 - v120;
  uint64_t v121 = v119;
  uint64_t v122 = v119 - v120;
  uint64_t v4 = (uint64_t *)MEMORY[0x1E4FB64D8];
  if (!*MEMORY[0x1E4FB64D8]) {
    WebCore::commonVMSlow(v3);
  }
  MEMORY[0x19972D160](v115);
  uint64_t v114 = 0;
  uint64_t v5 = *v4;
  if (!*v4) {
    uint64_t v5 = WebCore::commonVMSlow(0);
  }
  v113 = 0;
  uint64_t v114 = JSC::Heap::size((JSC::Heap *)(v5 + 192));
  uint64_t v6 = *v4;
  if (!*v4) {
    uint64_t v6 = WebCore::commonVMSlow(0);
  }
  v113 = (JSC *)JSC::Heap::capacity((JSC::Heap *)(v6 + 192));
  v122 += v114;
  v121 += (uint64_t)v113;
  uint64_t v111 = JSC::globalMemoryStatistics(v113);
  uint64_t v112 = v7;
  v122 += v7 + v111;
  v121 += v7 + v111;
  *(void *)task_info_outCnt = 0;
  stats.blocks_in_use = 0;
  memset(&stats.size_in_use, 0, 24);
  long long v105 = *(unint64_t *)&stats.blocks_in_use;
  long long v106 = 0u;
  long long v107 = *(unint64_t *)&stats.blocks_in_use;
  long long v108 = 0u;
  long long v110 = 0u;
  long long v109 = *(unint64_t *)&stats.blocks_in_use;
  malloc_get_all_zones();
  uint64_t v103 = *((void *)&v107 + 1);
  uint64_t v104 = *((void *)&v105 + 1);
  uint64_t v101 = 0;
  uint64_t v102 = *((void *)&v109 + 1);
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  v122 += *((void *)&v107 + 1) + *((void *)&v105 + 1) + *((void *)&v109 + 1);
  task_info_outCnt[0] = 10;
  unsigned int v8 = (WTF::WallTime *)task_info(*MEMORY[0x1E4F14960], 0x12u, (task_info_t)&stats, task_info_outCnt);
  uint64_t v9 = *(size_t *)((char *)&stats.size_in_use + 4);
  uint64_t v98 = *(size_t *)((char *)&stats.size_in_use + 4);
  WTF::WallTime::now(v8);
  double v11 = v10;
  *(void *)&stats.blocks_in_use = "Timestamp";
  stats.size_in_use = 10;
  uint64_t v12 = *(unsigned int *)(a2 + 12);
  if (v12 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    uint64_t v13 = *(void *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v14 = *(_DWORD *)(a2 + 12);
    *(void *)(v13 + 8 * v12) = *(void *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v14 + 1;
  }
  uint64_t v15 = (void *)(a2 + 16);
  unint64_t v16 = *(unsigned int *)(a2 + 28);
  if (v16 == *(_DWORD *)(a2 + 24))
  {
    unint64_t v17 = v16 + (v16 >> 2);
    if (v17 >= 0x10) {
      unint64_t v18 = v17 + 1;
    }
    else {
      unint64_t v18 = 16;
    }
    if (v18 <= v16 + 1) {
      unint64_t v19 = v16 + 1;
    }
    else {
      unint64_t v19 = v18;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a2 + 16, v19);
    unint64_t v16 = *(unsigned int *)(a2 + 28);
    unsigned int v20 = (void *)(*(void *)(a2 + 16) + 8 * v16);
  }
  else
  {
    unsigned int v20 = (void *)(*v15 + 8 * v16);
  }
  void *v20 = (unint64_t)v11;
  *(_DWORD *)(a2 + 28) = v16 + 1;
  *(void *)&stats.blocks_in_use = "Total Bytes of Memory In Use";
  stats.size_in_use = 29;
  uint64_t v21 = *(unsigned int *)(a2 + 12);
  if (v21 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    uint64_t v22 = *(void *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v23 = *(_DWORD *)(a2 + 12);
    *(void *)(v22 + 8 * v21) = *(void *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v23 + 1;
  }
  uint64_t v24 = *(unsigned int *)(a2 + 28);
  if (v24 == *(_DWORD *)(a2 + 24))
  {
    uint64_t v25 = (void *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v24 + 1, (unint64_t)&v122);
    uint64_t v24 = *(unsigned int *)(a2 + 28);
    *(void *)(*(void *)(a2 + 16) + 8 * v24) = *v25;
  }
  else
  {
    *(void *)(*v15 + 8 * v24) = v122;
  }
  *(_DWORD *)(a2 + 28) = v24 + 1;
  *(void *)&stats.blocks_in_use = "Fast Malloc Zone Bytes";
  stats.size_in_use = 23;
  uint64_t v26 = *(unsigned int *)(a2 + 12);
  if (v26 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    uint64_t v27 = *(void *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v28 = *(_DWORD *)(a2 + 12);
    *(void *)(v27 + 8 * v26) = *(void *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v28 + 1;
  }
  uint64_t v29 = *(unsigned int *)(a2 + 28);
  if (v29 == *(_DWORD *)(a2 + 24))
  {
    uint64_t v30 = (void *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v29 + 1, (unint64_t)&v117);
    uint64_t v29 = *(unsigned int *)(a2 + 28);
    *(void *)(*(void *)(a2 + 16) + 8 * v29) = *v30;
  }
  else
  {
    *(void *)(*v15 + 8 * v29) = v117;
  }
  *(_DWORD *)(a2 + 28) = v29 + 1;
  *(void *)&stats.blocks_in_use = "Default Malloc Zone Bytes";
  stats.size_in_use = 26;
  uint64_t v31 = *(unsigned int *)(a2 + 12);
  if (v31 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    uint64_t v32 = *(void *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v33 = *(_DWORD *)(a2 + 12);
    *(void *)(v32 + 8 * v31) = *(void *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v33 + 1;
  }
  uint64_t v34 = *(unsigned int *)(a2 + 28);
  if (v34 == *(_DWORD *)(a2 + 24))
  {
    v35 = (void *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v34 + 1, (unint64_t)&v104);
    uint64_t v34 = *(unsigned int *)(a2 + 28);
    *(void *)(*(void *)(a2 + 16) + 8 * v34) = *v35;
  }
  else
  {
    *(void *)(*v15 + 8 * v34) = v104;
  }
  *(_DWORD *)(a2 + 28) = v34 + 1;
  *(void *)&stats.blocks_in_use = "Dispatch Continuation Malloc Zone Bytes";
  stats.size_in_use = 40;
  uint64_t v36 = *(unsigned int *)(a2 + 12);
  if (v36 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    uint64_t v37 = *(void *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v38 = *(_DWORD *)(a2 + 12);
    *(void *)(v37 + 8 * v36) = *(void *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v38 + 1;
  }
  uint64_t v39 = *(unsigned int *)(a2 + 28);
  if (v39 == *(_DWORD *)(a2 + 24))
  {
    v40 = (void *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v39 + 1, (unint64_t)&v103);
    uint64_t v39 = *(unsigned int *)(a2 + 28);
    *(void *)(*(void *)(a2 + 16) + 8 * v39) = *v40;
  }
  else
  {
    *(void *)(*v15 + 8 * v39) = v103;
  }
  *(_DWORD *)(a2 + 28) = v39 + 1;
  *(void *)&stats.blocks_in_use = "Purgeable Malloc Zone Bytes";
  stats.size_in_use = 28;
  uint64_t v41 = *(unsigned int *)(a2 + 12);
  if (v41 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    uint64_t v42 = *(void *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v43 = *(_DWORD *)(a2 + 12);
    *(void *)(v42 + 8 * v41) = *(void *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v43 + 1;
  }
  uint64_t v44 = *(unsigned int *)(a2 + 28);
  if (v44 == *(_DWORD *)(a2 + 24))
  {
    v45 = (void *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v44 + 1, (unint64_t)&v102);
    uint64_t v44 = *(unsigned int *)(a2 + 28);
    *(void *)(*(void *)(a2 + 16) + 8 * v44) = *v45;
  }
  else
  {
    *(void *)(*v15 + 8 * v44) = v102;
  }
  *(_DWORD *)(a2 + 28) = v44 + 1;
  *(void *)&stats.blocks_in_use = "JavaScript Heap Bytes";
  stats.size_in_use = 22;
  uint64_t v46 = *(unsigned int *)(a2 + 12);
  if (v46 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    uint64_t v47 = *(void *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v48 = *(_DWORD *)(a2 + 12);
    *(void *)(v47 + 8 * v46) = *(void *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v48 + 1;
  }
  uint64_t v49 = *(unsigned int *)(a2 + 28);
  if (v49 == *(_DWORD *)(a2 + 24))
  {
    v50 = (void *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v49 + 1, (unint64_t)&v114);
    uint64_t v49 = *(unsigned int *)(a2 + 28);
    *(void *)(*(void *)(a2 + 16) + 8 * v49) = *v50;
  }
  else
  {
    *(void *)(*v15 + 8 * v49) = v114;
  }
  *(_DWORD *)(a2 + 28) = v49 + 1;
  *(void *)&stats.blocks_in_use = "Total Bytes of Committed Memory";
  stats.size_in_use = 32;
  uint64_t v51 = *(unsigned int *)(a2 + 12);
  if (v51 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    uint64_t v52 = *(void *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v53 = *(_DWORD *)(a2 + 12);
    *(void *)(v52 + 8 * v51) = *(void *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v53 + 1;
  }
  uint64_t v54 = *(unsigned int *)(a2 + 28);
  if (v54 == *(_DWORD *)(a2 + 24))
  {
    v55 = (void *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v54 + 1, (unint64_t)&v121);
    uint64_t v54 = *(unsigned int *)(a2 + 28);
    *(void *)(*(void *)(a2 + 16) + 8 * v54) = *v55;
  }
  else
  {
    *(void *)(*v15 + 8 * v54) = v121;
  }
  *(_DWORD *)(a2 + 28) = v54 + 1;
  *(void *)&stats.blocks_in_use = "Fast Malloc Zone Bytes";
  stats.size_in_use = 23;
  uint64_t v56 = *(unsigned int *)(a2 + 12);
  if (v56 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    uint64_t v57 = *(void *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v58 = *(_DWORD *)(a2 + 12);
    *(void *)(v57 + 8 * v56) = *(void *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v58 + 1;
  }
  uint64_t v59 = *(unsigned int *)(a2 + 28);
  if (v59 == *(_DWORD *)(a2 + 24))
  {
    v60 = (void *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v59 + 1, (unint64_t)&v116);
    uint64_t v59 = *(unsigned int *)(a2 + 28);
    *(void *)(*(void *)(a2 + 16) + 8 * v59) = *v60;
  }
  else
  {
    *(void *)(*v15 + 8 * v59) = v116;
  }
  *(_DWORD *)(a2 + 28) = v59 + 1;
  *(void *)&stats.blocks_in_use = "Default Malloc Zone Bytes";
  stats.size_in_use = 26;
  uint64_t v61 = *(unsigned int *)(a2 + 12);
  if (v61 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    uint64_t v62 = *(void *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v63 = *(_DWORD *)(a2 + 12);
    *(void *)(v62 + 8 * v61) = *(void *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v63 + 1;
  }
  uint64_t v64 = *(unsigned int *)(a2 + 28);
  if (v64 == *(_DWORD *)(a2 + 24))
  {
    v65 = (void *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v64 + 1, (unint64_t)&v101);
    uint64_t v64 = *(unsigned int *)(a2 + 28);
    *(void *)(*(void *)(a2 + 16) + 8 * v64) = *v65;
  }
  else
  {
    *(void *)(*v15 + 8 * v64) = v101;
  }
  *(_DWORD *)(a2 + 28) = v64 + 1;
  *(void *)&stats.blocks_in_use = "Dispatch Continuation Malloc Zone Bytes";
  stats.size_in_use = 40;
  uint64_t v66 = *(unsigned int *)(a2 + 12);
  if (v66 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    uint64_t v67 = *(void *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v68 = *(_DWORD *)(a2 + 12);
    *(void *)(v67 + 8 * v66) = *(void *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v68 + 1;
  }
  uint64_t v69 = *(unsigned int *)(a2 + 28);
  if (v69 == *(_DWORD *)(a2 + 24))
  {
    v70 = (void *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v69 + 1, (unint64_t)&v100);
    uint64_t v69 = *(unsigned int *)(a2 + 28);
    *(void *)(*(void *)(a2 + 16) + 8 * v69) = *v70;
  }
  else
  {
    *(void *)(*v15 + 8 * v69) = v100;
  }
  *(_DWORD *)(a2 + 28) = v69 + 1;
  *(void *)&stats.blocks_in_use = "Purgeable Malloc Zone Bytes";
  stats.size_in_use = 28;
  uint64_t v71 = *(unsigned int *)(a2 + 12);
  if (v71 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    uint64_t v72 = *(void *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v73 = *(_DWORD *)(a2 + 12);
    *(void *)(v72 + 8 * v71) = *(void *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v73 + 1;
  }
  uint64_t v74 = *(unsigned int *)(a2 + 28);
  if (v74 == *(_DWORD *)(a2 + 24))
  {
    v75 = (void *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v74 + 1, (unint64_t)&v99);
    uint64_t v74 = *(unsigned int *)(a2 + 28);
    *(void *)(*(void *)(a2 + 16) + 8 * v74) = *v75;
  }
  else
  {
    *(void *)(*v15 + 8 * v74) = v99;
  }
  *(_DWORD *)(a2 + 28) = v74 + 1;
  *(void *)&stats.blocks_in_use = "JavaScript Heap Bytes";
  stats.size_in_use = 22;
  uint64_t v76 = *(unsigned int *)(a2 + 12);
  if (v76 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    uint64_t v77 = *(void *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v78 = *(_DWORD *)(a2 + 12);
    *(void *)(v77 + 8 * v76) = *(void *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v78 + 1;
  }
  uint64_t v79 = *(unsigned int *)(a2 + 28);
  if (v79 == *(_DWORD *)(a2 + 24))
  {
    v80 = (void *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v79 + 1, (unint64_t)&v113);
    uint64_t v79 = *(unsigned int *)(a2 + 28);
    *(void *)(*(void *)(a2 + 16) + 8 * v79) = *v80;
  }
  else
  {
    *(void *)(*v15 + 8 * v79) = v113;
  }
  *(_DWORD *)(a2 + 28) = v79 + 1;
  *(void *)&stats.blocks_in_use = "JavaScript Stack Bytes";
  stats.size_in_use = 23;
  uint64_t v81 = *(unsigned int *)(a2 + 12);
  if (v81 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    uint64_t v82 = *(void *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v83 = *(_DWORD *)(a2 + 12);
    *(void *)(v82 + 8 * v81) = *(void *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v83 + 1;
  }
  uint64_t v84 = *(unsigned int *)(a2 + 28);
  if (v84 == *(_DWORD *)(a2 + 24))
  {
    v85 = (void *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v84 + 1, (unint64_t)&v111);
    uint64_t v84 = *(unsigned int *)(a2 + 28);
    *(void *)(*(void *)(a2 + 16) + 8 * v84) = *v85;
  }
  else
  {
    *(void *)(*v15 + 8 * v84) = v111;
  }
  *(_DWORD *)(a2 + 28) = v84 + 1;
  *(void *)&stats.blocks_in_use = "JavaScript JIT Bytes";
  stats.size_in_use = 21;
  uint64_t v86 = *(unsigned int *)(a2 + 12);
  if (v86 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    uint64_t v87 = *(void *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v88 = *(_DWORD *)(a2 + 12);
    *(void *)(v87 + 8 * v86) = *(void *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v88 + 1;
  }
  v89 = &v112;
  uint64_t v90 = *(unsigned int *)(a2 + 28);
  if (v90 == *(_DWORD *)(a2 + 24))
  {
    v89 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v90 + 1, (unint64_t)&v112);
    uint64_t v90 = *(unsigned int *)(a2 + 28);
    v91 = (uint64_t *)(*(void *)(a2 + 16) + 8 * v90);
  }
  else
  {
    v91 = (uint64_t *)(*v15 + 8 * v90);
  }
  uint64_t *v91 = *v89;
  *(_DWORD *)(a2 + 28) = v90 + 1;
  *(void *)&stats.blocks_in_use = "Resident Size";
  stats.size_in_use = 14;
  uint64_t v92 = *(unsigned int *)(a2 + 12);
  if (v92 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    uint64_t v93 = *(void *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v94 = *(_DWORD *)(a2 + 12);
    *(void *)(v93 + 8 * v92) = *(void *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v94 + 1;
  }
  uint64_t v95 = *(unsigned int *)(a2 + 28);
  if (v95 == *(_DWORD *)(a2 + 24))
  {
    v96 = (void *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v95 + 1, (unint64_t)&v98);
    uint64_t v95 = *(unsigned int *)(a2 + 28);
    *(void *)(*(void *)(a2 + 16) + 8 * v95) = *v96;
  }
  else
  {
    *(void *)(*v15 + 8 * v95) = v9;
  }
  *(_DWORD *)(a2 + 28) = v95 + 1;
  return MEMORY[0x19972D170](v115);
}

void sub_198AF7E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  MEMORY[0x19972D170](&a33);
  uint64_t v36 = *(WTF **)(v33 + 16);
  if (v36)
  {
    *(void *)(v33 + 16) = 0;
    *(_DWORD *)(v33 + 24) = 0;
    WTF::fastFree(v36, v35);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v33, v35);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 <= v4 + 1) {
    unint64_t v7 = v4 + 1;
  }
  else {
    unint64_t v7 = v6;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  WTF::String::String((uint64_t *)(*(void *)a1 + 8 * *(unsigned int *)(a1 + 12)), *a2, a2[1]);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WebKit::RemoteCDMProxy::create@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t result = *a1;
  if (*a1)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)result + 32))(&v4);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 64))(&v5);
    char v6 = (*(uint64_t (**)(void))(*(void *)*a1 + 112))();
    char v7 = (*(uint64_t (**)(void))(*(void *)*a1 + 120))();
    uint64_t v8 = 0;
    operator new();
  }
  *a2 = 0;
  return result;
}

void WebKit::RemoteCDMProxy::~RemoteCDMProxy(WebKit::RemoteCDMProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9C0C88;
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  std::unique_ptr<WebKit::RemoteCDMConfiguration>::reset[abi:sn180100]((uint64_t *)this + 4, a2);
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  char v6 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v4);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

{
  uint64_t vars8;

  WebKit::RemoteCDMProxy::~RemoteCDMProxy(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::RemoteCDMProxy::getSupportedConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  uint64_t v9 = *a4;
  *a4 = 0;
  void *v8 = &unk_1EE9C12A8;
  v8[1] = v9;
  if (v9)
  {
    double v11 = v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v7 + 24))(v7, a2, a3, &v11);
    uint64_t result = (uint64_t)v11;
    double v11 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    uint64_t result = 139;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteCDMProxy::createInstance(uint64_t a1, uint64_t *a2)
{
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(void **)(a1 + 24) + 96))(&v9);
  if (v9)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4)
    {
      if (*(void *)(v4 + 8))
      {
        WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
        v10[0] = v9;
        uint64_t v9 = 0;
        WebKit::RemoteCDMInstanceProxy::create(a1, (uint64_t)v10);
      }
    }
  }
  v10[0] = 0;
  uint64_t v5 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, void, WTF::StringImpl **))(*(void *)v5 + 16))(v5, 0, v10);
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  uint64_t v7 = v10[0];
  v10[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
    else {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

WebKit::RemoteLegacyCDMFactoryProxy *WebKit::RemoteLegacyCDMFactoryProxy::RemoteLegacyCDMFactoryProxy(WebKit::RemoteLegacyCDMFactoryProxy *this, WebKit::GPUConnectionToWebProcess *a2)
{
  *(void *)this = &unk_1EE9C0CC0;
  *((void *)this + 1) = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  uint64_t v4 = (atomic_uint *)*((void *)a2 + 1);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  *((void *)this + 2) = v4;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  return this;
}

void WebKit::RemoteLegacyCDMFactoryProxy::~RemoteLegacyCDMFactoryProxy(WebKit::RemoteLegacyCDMFactoryProxy *this, void *a2)
{
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *((void *)this + 4);
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  if (!v5) {
    goto LABEL_44;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6) {
    goto LABEL_44;
  }
  if (!v4)
  {
    uint64_t v9 = 0;
    uint64_t v7 = 0;
LABEL_12:
    uint64_t v8 = (uint64_t *)(v4 + 16 * v7);
    goto LABEL_13;
  }
  uint64_t v7 = *(unsigned int *)(v4 - 4);
  uint64_t v8 = (uint64_t *)(v4 + 16 * v7);
  if (!*(_DWORD *)(v4 - 12))
  {
    uint64_t v9 = (uint64_t *)(v4 + 16 * v7);
    goto LABEL_12;
  }
  uint64_t v9 = (uint64_t *)v4;
  if (v7)
  {
    uint64_t v10 = 16 * v7;
    uint64_t v9 = (uint64_t *)v4;
    while ((unint64_t)(*v9 + 1) <= 1)
    {
      v9 += 2;
      v10 -= 16;
      if (!v10)
      {
        uint64_t v9 = v8;
        break;
      }
    }
  }
LABEL_13:
  if (v4) {
    double v11 = (uint64_t *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  }
  else {
    double v11 = 0;
  }
  while (v9 != v11)
  {
    uint64_t v12 = v9 + 2;
    IPC::MessageReceiverMap::removeMessageReceiver(v6 + 64, 0x5Eu, *v9);
    uint64_t v9 = v8;
    if (v12 != v8)
    {
      uint64_t v9 = v12;
      while ((unint64_t)(*v9 + 1) <= 1)
      {
        v9 += 2;
        if (v9 == v8)
        {
          uint64_t v9 = v8;
          break;
        }
      }
    }
  }
  if (v3)
  {
    uint64_t v13 = *(unsigned int *)(v3 - 4);
    int v14 = (uint64_t *)(v3 + 16 * v13);
    if (*(_DWORD *)(v3 - 12))
    {
      uint64_t v15 = (uint64_t *)v3;
      if (v13)
      {
        uint64_t v16 = 16 * v13;
        uint64_t v15 = (uint64_t *)v3;
        while ((unint64_t)(*v15 + 1) <= 1)
        {
          v15 += 2;
          v16 -= 16;
          if (!v16)
          {
            uint64_t v15 = v14;
            goto LABEL_33;
          }
        }
      }
      goto LABEL_33;
    }
    uint64_t v15 = (uint64_t *)(v3 + 16 * v13);
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v13 = 0;
  }
  int v14 = (uint64_t *)(v3 + 16 * v13);
LABEL_33:
  if (v3) {
    unint64_t v17 = (uint64_t *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  }
  else {
    unint64_t v17 = 0;
  }
  if (v17 != v15)
  {
    uint64_t v18 = v6 + 64;
    do
    {
      unint64_t v19 = v15 + 2;
      IPC::MessageReceiverMap::removeMessageReceiver(v18, 0x5Cu, *v15);
      uint64_t v15 = v14;
      if (v19 != v14)
      {
        uint64_t v15 = v19;
        while ((unint64_t)(*v15 + 1) <= 1)
        {
          v15 += 2;
          if (v15 == v14)
          {
            uint64_t v15 = v14;
            break;
          }
        }
      }
    }
    while (v15 != v17);
  }
LABEL_44:
  if (v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v4, a2);
  }
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
  }
  unsigned int v20 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v20 && atomic_fetch_add((atomic_uint *volatile)v20 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v20 + 2);
    (*(void (**)(unsigned int *))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *((void *)this + 4);
  if (v21) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v21, a2);
  }
  uint64_t v22 = *((void *)this + 3);
  if (v22) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v22, a2);
  }
  int v23 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v23 && atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v23);
    WTF::fastFree((WTF *)v23, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteLegacyCDMFactoryProxy::~RemoteLegacyCDMFactoryProxy(this, a2);

  WTF::fastFree(v2, v3);
}

WebCore::LegacyCDM *WebKit::RemoteLegacyCDMFactoryProxy::createCDM(uint64_t a1, WebCore::LegacyCDM *this, uint64_t a3, uint64_t *a4)
{
  WebCore::LegacyCDM::create((uint64_t *)&v11, this, this);
  if (v11)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    uint64_t v6 = *(atomic_uint **)(a1 + 8);
    if (v6) {
      atomic_fetch_add(v6, 1u);
    }
    operator new();
  }
  v12[0] = 0;
  uint64_t v7 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, v12);
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  uint64_t result = v11;
  double v11 = 0;
  if (result)
  {
    WebCore::LegacyCDM::~LegacyCDM(result);
    return (WebCore::LegacyCDM *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::RemoteLegacyCDMFactoryProxy::supportsKeySystem(int a1, WebCore::LegacyCDM *this, WTF::String *a3, uint64_t *a4)
{
  if (*((unsigned char *)a3 + 8)) {
    uint64_t v5 = WebCore::LegacyCDM::keySystemSupportsMimeType(this, a3, a3);
  }
  else {
    uint64_t v5 = WebCore::LegacyCDM::supportsKeySystem(this, this);
  }
  uint64_t v6 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);

  return v7(v6);
}

void WebKit::RemoteLegacyCDMFactoryProxy::didReceiveCDMMessage(WebKit::RemoteLegacyCDMFactoryProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a3 + 8);
  if ((unint64_t)(v4 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v7 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v8 = 136446210;
      uint64_t v9 = "void WebKit::RemoteLegacyCDMFactoryProxy::didReceiveCDMMessage(IPC::Connection &, IPC::Decoder &)";
      _os_log_fault_impl(&dword_1985F2000, v7, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteLegacyCDMFactoryProxy.cpp 102: Invalid message dispatched %{public}s", (uint8_t *)&v8, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
  }
  else
  {
    uint64_t v6 = (uint64_t *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*((void *)this + 3), v4);
    if (v6)
    {
      WebKit::RemoteLegacyCDMProxy::didReceiveMessage(v6, a2, a3);
    }
  }
}

void WebKit::RemoteLegacyCDMFactoryProxy::didReceiveCDMSessionMessage(WebKit::RemoteLegacyCDMFactoryProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a3 + 8);
  if ((unint64_t)(v4 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v9 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v10 = 136446210;
      double v11 = "void WebKit::RemoteLegacyCDMFactoryProxy::didReceiveCDMSessionMessage(IPC::Connection &, IPC::Decoder &)";
      _os_log_fault_impl(&dword_1985F2000, v9, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteLegacyCDMFactoryProxy.cpp 109: Invalid message dispatched %{public}s", (uint8_t *)&v10, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
  }
  else
  {
    uint64_t v6 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*((void *)this + 4), v4);
    if (v6)
    {
      if (*((_WORD *)a3 + 25) == 1136)
      {
        uint64_t v7 = *(void *)(v6 + 64);
        if (v7)
        {
          int v8 = *(void (**)(void))(*(void *)v7 + 48);
          v8();
        }
      }
    }
  }
}

uint64_t WebKit::RemoteLegacyCDMFactoryProxy::didReceiveSyncCDMMessage(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a3 + 64);
  if ((unint64_t)(v5 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    int v10 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v11 = 136446210;
      uint64_t v12 = "BOOL WebKit::RemoteLegacyCDMFactoryProxy::didReceiveSyncCDMMessage(IPC::Connection &, IPC::Decoder &, Unique"
            "Ref<IPC::Encoder> &)";
      _os_log_fault_impl(&dword_1985F2000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteLegacyCDMFactoryProxy.cpp 116: Invalid message dispatched %{public}s", (uint8_t *)&v11, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
    return 0;
  }
  uint64_t v8 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 24), v5);
  if (!v8) {
    return 0;
  }

  return WebKit::RemoteLegacyCDMProxy::didReceiveSyncMessage(v8, (atomic_uchar *volatile *)a2, (unsigned __int16 *)a3, a4);
}

uint64_t WebKit::RemoteLegacyCDMFactoryProxy::didReceiveSyncCDMSessionMessage(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a3 + 64);
  if ((unint64_t)(v5 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    int v10 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v11 = 136446210;
      uint64_t v12 = "BOOL WebKit::RemoteLegacyCDMFactoryProxy::didReceiveSyncCDMSessionMessage(IPC::Connection &, IPC::Decoder &,"
            " UniqueRef<IPC::Encoder> &)";
      _os_log_fault_impl(&dword_1985F2000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteLegacyCDMFactoryProxy.cpp 124: Invalid message dispatched %{public}s", (uint8_t *)&v11, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
    return 0;
  }
  uint64_t v8 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 32), v5);
  if (!v8) {
    return 0;
  }

  return WebKit::RemoteLegacyCDMSessionProxy::didReceiveSyncMessage(v8, (atomic_uchar *volatile *)a2, a3, a4);
}

uint64_t WebKit::RemoteLegacyCDMFactoryProxy::removeSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      IPC::MessageReceiverMap::removeMessageReceiver(v5 + 64, 0x5Eu, a2);
      uint64_t v11 = *(void *)(a1 + 32);
      int v10 = (uint64_t *)(a1 + 32);
      uint64_t v9 = v11;
      if (!v11) {
        goto LABEL_31;
      }
      unsigned int v12 = *(_DWORD *)(v9 - 8);
      unint64_t v13 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      uint64_t v16 = v12 & ((v15 >> 31) ^ v15);
      uint64_t v17 = *(void *)(v9 + 16 * v16);
      if (v17 != a2)
      {
        int v18 = 1;
        while (v17)
        {
          uint64_t v16 = (v16 + v18) & v12;
          uint64_t v17 = *(void *)(v9 + 16 * v16);
          ++v18;
          if (v17 == a2) {
            goto LABEL_10;
          }
        }
        uint64_t v16 = *(unsigned int *)(v9 - 4);
      }
LABEL_10:
      if (v16 != *(_DWORD *)(v9 - 4))
      {
        unint64_t v19 = (void *)(v9 + 16 * v16);
        unsigned int v20 = (void *)v19[1];
        v19[1] = 0;
        uint64_t v21 = *v10;
        if (!*v10 || (v21 += 16 * *(unsigned int *)(v21 - 4), (void *)v21 != v19))
        {
          if ((void *)v21 != v19)
          {
            void *v19 = -1;
            v19[1] = 0;
            ++*(_DWORD *)(*v10 - 16);
            uint64_t v22 = *v10;
            int v23 = *v10 ? *(_DWORD *)(v22 - 12) - 1 : -1;
            *(_DWORD *)(v22 - 12) = v23;
            uint64_t v24 = *v10;
            if (*v10)
            {
              unsigned int v25 = 6 * *(_DWORD *)(v24 - 12);
              unsigned int v26 = *(_DWORD *)(v24 - 4);
              if (v25 < v26 && v26 >= 9) {
                WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v10, v26 >> 1);
              }
            }
          }
        }
        if (v20)
        {
          int v28 = (unsigned int *)v20[4];
          v20[4] = 0;
          if (v28 && atomic_fetch_add((atomic_uint *volatile)v28, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v28);
            WTF::fastFree((WTF *)v28, v8);
          }
          (*(void (**)(void *))(*v20 + 8))(v20);
        }
      }
      if (!*v10 || !*(_DWORD *)(*v10 - 12)) {
LABEL_31:
      }
        WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure(*(WebKit::GPUProcess **)(v5 + 80));
    }
  }
  uint64_t v29 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
  uint64_t v30 = *(uint64_t (**)(uint64_t))(*(void *)v29 + 8);

  return v30(v29);
}

void WebKit::RemoteLegacyCDMProxy::~RemoteLegacyCDMProxy(WebKit::RemoteLegacyCDMProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9C0CF8;
  *((void *)this + 2) = &unk_1EE9C0D38;
  uint64_t v3 = (WebCore::LegacyCDM *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3)
  {
    WebCore::LegacyCDM::~LegacyCDM(v3);
    WTF::fastFree(v4, v5);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t vars8;

  WebKit::RemoteLegacyCDMProxy::~RemoteLegacyCDMProxy(this, a2);

  JUMPOUT(0x199740C10);
}

void non-virtual thunk to'WebKit::RemoteLegacyCDMProxy::~RemoteLegacyCDMProxy(WebKit::RemoteLegacyCDMProxy *this, void *a2)
{
}

{
  uint64_t vars8;

  WebKit::RemoteLegacyCDMProxy::~RemoteLegacyCDMProxy((WebKit::RemoteLegacyCDMProxy *)((char *)this - 16), a2);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::RemoteLegacyCDMProxy::supportsMIMEType(uint64_t a1, const WTF::String *a2, uint64_t *a3)
{
  uint64_t v4 = *(WebCore::LegacyCDM **)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = WebCore::LegacyCDM::supportsMIMEType(v4, a2);
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
  }
  else
  {
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);

  return v7(v6);
}

uint64_t WebKit::RemoteLegacyCDMProxy::createSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!*(void *)(a1 + 40) || (uint64_t v6 = *(void *)(a1 + 24)) == 0 || !*(void *)(v6 + 8))
  {
    v55[0] = 0;
    uint64_t v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)v11 + 16))(v11, v55);
    return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  uint64_t v54 = IdentifierInternal;
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9) {
    uint64_t v10 = *(void *)(v9 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x50);
  *unint64_t v13 = &unk_1EE9C0D60;
  v13[1] = 0;
  v13[2] = &unk_1EE9C0DC0;
  v13[3] = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v10 + 8), v10);
  unint64_t v14 = *(atomic_uint **)(v10 + 8);
  if (v14) {
    atomic_fetch_add(v14, 1u);
  }
  v13[4] = v14;
  uint64_t v15 = *(void *)(v10 + 40);
  if (!v15)
  {
    uint64_t v16 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v16 + 8) = 1;
    *(void *)uint64_t v16 = &unk_1EE9BEFD8;
    *(unsigned char *)(v16 + 12) = 1;
    *(void *)(v16 + 16) = v10;
    uint64_t v17 = *(unsigned int **)(v10 + 40);
    *(void *)(v10 + 40) = v16;
    if (v17 && atomic_fetch_add((atomic_uint *volatile)v17 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(void *)v17 + 8))(v17);
    }
    uint64_t v18 = *(void *)(v10 + 16);
    if (v18)
    {
      uint64_t v18 = *(void *)(v18 + 8);
      char v19 = 1;
      int v20 = 0;
      if (v18)
      {
        uint64_t v21 = *(void *)(v18 + 16);
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
        if (v20)
        {
          uint64_t v51 = v21;
          uint64_t v52 = v18;
          MEMORY[0x19972E8D0]();
          uint64_t v21 = v51;
          uint64_t v18 = v52;
        }
        ++*(void *)(v21 + 8);
        int v22 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
        if (v22 != 1)
        {
          uint64_t v53 = v18;
          WTF::Lock::unlockSlow((WTF::Lock *)v21);
          uint64_t v18 = v53;
        }
        uint64_t v23 = *(void *)(v18 + 136);
        if ((v23 & 0x8000000000000000) == 0 || v23 == -1)
        {
          char v19 = 0;
          LOBYTE(v20) = 1;
        }
        else
        {
          char v19 = 0;
          LOBYTE(v20) = *(unsigned char *)(v18 + 380) != 0;
        }
      }
    }
    else
    {
      LOBYTE(v20) = 0;
      char v19 = 1;
    }
    uint64_t v15 = *(void *)(v10 + 40);
    if (*(void *)(v15 + 16) == v10) {
      *(unsigned char *)(v15 + 12) = v20;
    }
    if ((v19 & 1) == 0)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v18 + 16));
      uint64_t v15 = *(void *)(v10 + 40);
    }
  }
  atomic_fetch_add((atomic_uint *volatile)(v15 + 8), 1u);
  v13[5] = v15;
  v13[6] = a3;
  v13[7] = IdentifierInternal;
  WebCore::LegacyCDM::createSession();
  v13[9] = 0;
  if (!v13[8])
  {
    uint64_t v24 = v13[5];
    unsigned int v25 = (unsigned __int8 *)v13[6];
    v55[0] = "RemoteLegacyCDMSessionProxy";
    v55[1] = (unsigned __int8 *)28;
    v55[2] = "RemoteLegacyCDMSessionProxy";
    v55[3] = v25;
    if (*(unsigned char *)(v24 + 12)) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [32]>((uint64_t)&WebKit2LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)v55, "could not create CDM session.");
    }
  }
  uint64_t v26 = *(void *)(a1 + 24);
  if (v26) {
    uint64_t v27 = *(void *)(v26 + 8);
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v28 = *(void *)(v27 + 16);
  if (v28)
  {
    uint64_t v29 = *(void *)(v28 + 8);
    if (v29)
    {
      v56[0] = 94;
      v56[1] = IdentifierInternal;
      WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v29 + 72), (unsigned __int8 *)v56, (uint64_t)v13, v55);
      uint64_t v32 = *(void *)(v27 + 32);
      uint64_t v31 = (uint64_t *)(v27 + 32);
      uint64_t v30 = v32;
      if (v32
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v31),
            (uint64_t v30 = *v31) != 0))
      {
        int v33 = *(_DWORD *)(v30 - 8);
      }
      else
      {
        int v33 = 0;
      }
      unint64_t v34 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                                   + ~(IdentifierInternal << 32)) >> 22);
      unint64_t v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
      unint64_t v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
      unsigned int v37 = v33 & ((v36 >> 31) ^ v36);
      int v38 = (uint64_t *)(v30 + 16 * v37);
      uint64_t v39 = *v38;
      if (*v38)
      {
        v40 = 0;
        int v41 = 1;
        while (v39 != IdentifierInternal)
        {
          if (v39 == -1) {
            v40 = v38;
          }
          unsigned int v37 = (v37 + v41) & v33;
          int v38 = (uint64_t *)(v30 + 16 * v37);
          uint64_t v39 = *v38;
          ++v41;
          if (!*v38)
          {
            if (v40)
            {
              uint64_t *v40 = 0;
              v40[1] = 0;
              --*(_DWORD *)(*v31 - 16);
              int v38 = v40;
            }
            goto LABEL_47;
          }
        }
        uint64_t v45 = v38[1];
        v38[1] = (uint64_t)v13;
        if (v45) {
          (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
        }
        goto LABEL_60;
      }
LABEL_47:
      uint64_t v42 = v38[1];
      *int v38 = IdentifierInternal;
      v38[1] = (uint64_t)v13;
      if (v42) {
        (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
      }
      uint64_t v43 = *v31;
      if (*v31) {
        int v44 = *(_DWORD *)(v43 - 12) + 1;
      }
      else {
        int v44 = 1;
      }
      *(_DWORD *)(v43 - 12) = v44;
      uint64_t v46 = *v31;
      if (*v31) {
        int v47 = *(_DWORD *)(v46 - 12);
      }
      else {
        int v47 = 0;
      }
      uint64_t v48 = (*(_DWORD *)(v46 - 16) + v47);
      unint64_t v49 = *(unsigned int *)(v46 - 4);
      if (v49 > 0x400)
      {
        if (v49 > 2 * v48) {
          goto LABEL_60;
        }
      }
      else if (3 * v49 > 4 * v48)
      {
LABEL_60:
        unint64_t v13 = 0;
        goto LABEL_61;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v31);
      goto LABEL_60;
    }
  }
LABEL_61:
  uint64_t v50 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v50 + 16))(v50, &v54);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 8))(v50);
  if (v13) {
    return (*(uint64_t (**)(void *))(*v13 + 8))(v13);
  }
  return result;
}

atomic_uchar *WebKit::RemoteLegacyCDMProxy::cdmMediaPlayer@<X0>(atomic_uchar *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = this + 32;
  if (*((void *)this + 4)
    && (uint64_t v5 = *((void *)this + 3)) != 0
    && (uint64_t v6 = *(void *)(v5 + 8)) != 0
    && (this = (atomic_uchar *)WebKit::RemoteLegacyCDMFactoryProxy::gpuConnectionToWebProcess(&v8, *(void *)(v6 + 16)),
        (uint64_t v7 = v8) != 0))
  {
    WebKit::RemoteMediaPlayerManagerProxy::mediaPlayer(*(void *)(v8 + 128), v4, a2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v7 + 16));
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

void *WebKit::RemoteLegacyCDMFactoryProxy::gpuConnectionToWebProcess(void *this, uint64_t a2)
{
  uint64_t v2 = this;
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    if (v3)
    {
      char v4 = 0;
      uint64_t v5 = *(void *)(v3 + 16);
      int v6 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        this = (void *)MEMORY[0x19972E8D0](v5);
      }
      ++*(void *)(v5 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 != 1) {
        this = (void *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  *uint64_t v2 = v3;
  return this;
}

uint64_t WebKit::RemoteMediaPlayerManagerProxy::mediaPlayer@<X0>(uint64_t result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if ((unint64_t)(*a2 - 1) > 0xFFFFFFFFFFFFFFFDLL) {
    goto LABEL_7;
  }
  uint64_t v4 = result;
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(result + 16), a2);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5) {
    v5 += 16 * *(unsigned int *)(v5 - 4);
  }
  if (v5 == result)
  {
LABEL_7:
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(result + 8);
    uint64_t v7 = *(void *)(v6 + 120);
    if (v7) {
      uint64_t result = (uint64_t)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(*(atomic_uchar *volatile **)(v6 + 120));
    }
  }
  *a3 = v7;
  return result;
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteLegacyCDMProxy::cdmMediaPlayer@<X0>(atomic_uchar *this@<X0>, void *a2@<X8>)
{
  return WebKit::RemoteLegacyCDMProxy::cdmMediaPlayer(this - 16, a2);
}

uint64_t WebKit::RemoteLegacyCDMSessionProxy::logger(WebKit::RemoteLegacyCDMSessionProxy *this)
{
  return *((void *)this + 5);
}

uint64_t WebKit::RemoteLegacyCDMSessionProxy::logIdentifier(WebKit::RemoteLegacyCDMSessionProxy *this)
{
  return *((void *)this + 6);
}

void WebKit::RemoteLegacyCDMSessionProxy::~RemoteLegacyCDMSessionProxy(WebKit::RemoteLegacyCDMSessionProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9C0D60;
  *((void *)this + 2) = &unk_1EE9C0DC0;
  uint64_t v3 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    *(void *)(v7 + 8) = 0;
    uint64_t v8 = (unsigned int *)*((void *)this + 3);
    *((void *)this + 3) = 0;
    if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  else
  {
    *((void *)this + 3) = 0;
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteLegacyCDMSessionProxy::~RemoteLegacyCDMSessionProxy(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::RemoteLegacyCDMSessionProxy::~RemoteLegacyCDMSessionProxy(WebKit::RemoteLegacyCDMSessionProxy *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteLegacyCDMSessionProxy::~RemoteLegacyCDMSessionProxy((WebKit::RemoteLegacyCDMSessionProxy *)((char *)this - 16), a2);

  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebKit::RemoteLegacyCDMSessionProxy::generateKeyRequest(uint64_t a1, uint64_t a2, WTF::DeferrableRefCountedBase **a3, uint64_t *a4)
{
  if (*(void *)(a1 + 64) && (WebKit::convertToUint8Array(&v23, a3), (uint64_t v6 = v23) != 0))
  {
    int v22 = 0;
    unsigned __int16 v21 = 0;
    unsigned int v20 = 0;
    (*(void (**)(JSC::ArrayBufferView **__return_ptr))(**(void **)(a1 + 64) + 40))(&v19);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v8 = v22;
    int v22 = v24;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    unsigned int v12 = v19;
    if (v19) {
      ++*(_DWORD *)v19;
    }
    WebKit::convertToOptionalSharedBuffer<WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>>>>((unsigned int *)&v24, v12);
    uint64_t v13 = v21;
    uint64_t v14 = v20;
    uint64_t v15 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, uint64_t, uint64_t))(*(void *)v15 + 16))(v15, &v24, &v22, v13, v14);
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    uint64_t v17 = (unsigned int *)v24;
    uint64_t v24 = 0;
    if (v17) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v17, v16);
    }
    if (v12)
    {
      if (*(_DWORD *)v12 == 1) {
        JSC::ArrayBufferView::operator delete();
      }
      else {
        --*(_DWORD *)v12;
      }
    }
    uint64_t v18 = v19;
    char v19 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1) {
        JSC::ArrayBufferView::operator delete();
      }
      else {
        --*(_DWORD *)v18;
      }
    }
    uint64_t result = v22;
    int v22 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v16);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    if (*v6 == 1) {
      return (WTF::StringImpl *)JSC::ArrayBufferView::operator delete();
    }
    else {
      --*v6;
    }
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, void, void, void))(*(void *)v9 + 16))(v9, &v24, MEMORY[0x1E4F30980], 0, 0);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    uint64_t result = v24;
    uint64_t v24 = 0;
    if (result) {
      return (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v10);
    }
  }
  return result;
}

WTF::DeferrableRefCountedBase *WebKit::convertToUint8Array(void *a1, WTF::DeferrableRefCountedBase **a2)
{
  uint64_t result = *a2;
  if (*a2
    && (result = (WTF::DeferrableRefCountedBase *)WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer((uint64_t *)&v9, result), (uint64_t v5 = (uint64_t)v9) != 0))
  {
    uint64_t v9 = 0;
    uint64_t v7 = (WTF::DeferrableRefCountedBase *)v5;
    JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::create((uint64_t *)&v7, 0, *((void *)*a2 + 6), 1, &v8);
    uint64_t v6 = v7;
    *a1 = v8;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    if (v6) {
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
    }
    uint64_t result = v9;
    uint64_t v9 = 0;
    if (result) {
      return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
    }
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

unsigned int *WebKit::convertToOptionalSharedBuffer<WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>>>>(unsigned int *result, JSC::ArrayBufferView *this)
{
  uint64_t v2 = result;
  if (this)
  {
    JSC::ArrayBufferView::baseAddress(this);
    JSC::ArrayBufferView::byteLength(this);
    uint64_t result = WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>(&v5);
    uint64_t v4 = v5;
  }
  else
  {
    uint64_t v4 = 0;
  }
  *uint64_t v2 = v4;
  return result;
}

unsigned int *WebKit::RemoteLegacyCDMSessionProxy::update(uint64_t a1, WTF::DeferrableRefCountedBase **a2, uint64_t *a3)
{
  if (!*(void *)(a1 + 64))
  {
    unsigned __int16 v21 = 0;
    uint64_t v13 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void, unsigned int **, void, void))(*(void *)v13 + 16))(v13, 0, &v21, 0, 0);
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    uint64_t result = v21;
    unsigned __int16 v21 = 0;
    if (!result) {
      return result;
    }
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v14);
  }
  WebKit::convertToUint8Array(&v21, a2);
  uint64_t v5 = v21;
  if (!v21)
  {
    unsigned int v20 = 0;
    uint64_t v16 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void, JSC::ArrayBufferView **, void, void))(*(void *)v16 + 16))(v16, 0, &v20, 0, 0);
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    uint64_t result = (unsigned int *)v20;
    unsigned int v20 = 0;
    if (!result) {
      return result;
    }
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v14);
  }
  unsigned int v20 = 0;
  unsigned __int16 v19 = 0;
  unsigned int v18 = 0;
  uint64_t v6 = (*(uint64_t (**)(void, unsigned int *, JSC::ArrayBufferView **, unsigned __int16 *, unsigned int *))(**(void **)(a1 + 64) + 56))(*(void *)(a1 + 64), v21, &v20, &v19, &v18);
  uint64_t v7 = v20;
  if (v20) {
    ++*(_DWORD *)v20;
  }
  WebKit::convertToOptionalSharedBuffer<WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>>>>((unsigned int *)&v17, v7);
  uint64_t v8 = v19;
  uint64_t v9 = v18;
  uint64_t v10 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t, unsigned int **, uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v6, &v17, v8, v9);
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  unsigned int v12 = v17;
  uint64_t v17 = 0;
  if (v12) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v12, v11);
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 1) {
      JSC::ArrayBufferView::operator delete();
    }
    else {
      --*(_DWORD *)v7;
    }
  }
  uint64_t result = (unsigned int *)v20;
  unsigned int v20 = 0;
  if (result)
  {
    if (*result == 1) {
      uint64_t result = (unsigned int *)JSC::ArrayBufferView::operator delete();
    }
    else {
      --*result;
    }
  }
  if (*v5 == 1) {
    return (unsigned int *)JSC::ArrayBufferView::operator delete();
  }
  --*v5;
  return result;
}

WTF::DeferrableRefCountedBase *WebKit::RemoteLegacyCDMSessionProxy::cachedKeyForKeyID(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4)
  {
    (*(void (**)(JSC::ArrayBuffer **__return_ptr))(*(void *)v4 + 64))(&v11);
    if (v11)
    {
      v12[0] = JSC::ArrayBuffer::span(v11);
      v12[1] = v5;
      WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>(&v13);
      uint64_t v6 = v13;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v11 = 0;
  }
  v12[0] = v6;
  uint64_t v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, v12);
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  uint64_t v9 = (unsigned int *)v12[0];
  v12[0] = 0;
  if (v9) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v9, v8);
  }
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result) {
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  }
  return result;
}

atomic_uchar *WebKit::RemoteLegacyCDMSessionProxy::sendMessage(atomic_uchar *result, JSC::ArrayBufferView *a2, uint64_t *a3)
{
  uint64_t v3 = *((void *)result + 4);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v7 = result;
      uint64_t result = (atomic_uchar *)WebKit::RemoteLegacyCDMFactoryProxy::gpuConnectionToWebProcess(&v20, *(void *)(v4 + 16));
      uint64_t v8 = v20;
      if (v20)
      {
        uint64_t v9 = *(void *)(v20 + 56);
        if (a2)
        {
          uint64_t v10 = (IPC::Encoder *)JSC::ArrayBufferView::baseAddress(a2);
          uint64_t v11 = (IPC::Encoder *)JSC::ArrayBufferView::byteLength(a2);
          v21[0] = v10;
          v21[1] = v11;
          WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)&v22);
          unsigned int v12 = v22;
        }
        else
        {
          unsigned int v12 = 0;
        }
        int v22 = v12;
        uint64_t v13 = *((void *)v7 + 7);
        uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v14 = 1138;
        *((void *)v14 + 1) = v13;
        *((void *)v14 + 66) = (char *)v14 + 16;
        *((void *)v14 + 67) = 512;
        *((void *)v14 + 68) = 0;
        *((void *)v14 + 70) = 0;
        *((void *)v14 + 69) = 0;
        IPC::Encoder::encodeHeader(v14);
        v21[0] = v14;
        IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v14, &v22);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a3);
        IPC::Connection::sendMessageImpl(v9, (uint64_t *)v21, 0, 0);
        uint64_t v16 = v21[0];
        v21[0] = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v15);
          WTF::fastFree(v18, v19);
        }
        uint64_t v17 = (unsigned int *)v22;
        int v22 = 0;
        if (v17) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v17, v15);
        }
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v8 + 16));
      }
    }
  }
  return result;
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteLegacyCDMSessionProxy::sendMessage(uint64_t a1, JSC::ArrayBufferView *a2, uint64_t *a3)
{
  return WebKit::RemoteLegacyCDMSessionProxy::sendMessage((atomic_uchar *)(a1 - 16), a2, a3);
}

uint64_t WebKit::RemoteLegacyCDMSessionProxy::sendError(uint64_t this, __int16 a2, int a3)
{
  uint64_t v3 = *(void *)(this + 32);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v7 = this;
      this = (uint64_t)WebKit::RemoteLegacyCDMFactoryProxy::gpuConnectionToWebProcess(&v18, *(void *)(v4 + 16));
      uint64_t v8 = v18;
      if (v18)
      {
        uint64_t v9 = *(void *)(v18 + 56);
        uint64_t v10 = *(void *)(v7 + 56);
        uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v11 = 1137;
        *((void *)v11 + 1) = v10;
        *((void *)v11 + 66) = (char *)v11 + 16;
        *((void *)v11 + 67) = 512;
        *((void *)v11 + 68) = 0;
        *((void *)v11 + 70) = 0;
        *((void *)v11 + 69) = 0;
        IPC::Encoder::encodeHeader(v11);
        unsigned __int16 v19 = v11;
        IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v11, a2);
        unsigned int v12 = (_DWORD *)IPC::Encoder::grow(v11, 4uLL, 4);
        if (v13 <= 3)
        {
          this = 831;
          __break(0xC471u);
        }
        else
        {
          *unsigned int v12 = a3;
          IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v19, 0, 0);
          uint64_t v15 = v19;
          unsigned __int16 v19 = 0;
          if (v15)
          {
            IPC::Encoder::~Encoder(v15, v14);
            WTF::fastFree(v16, v17);
          }
          return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v8 + 16));
        }
      }
    }
  }
  return this;
}

uint64_t non-virtual thunk to'WebKit::RemoteLegacyCDMSessionProxy::sendError(WebKit::RemoteLegacyCDMSessionProxy *this, __int16 a2, int a3)
{
  return WebKit::RemoteLegacyCDMSessionProxy::sendError((uint64_t)this - 16, a2, a3);
}

atomic_uchar *WebKit::RemoteLegacyCDMSessionProxy::mediaKeysStorageDirectory@<X0>(atomic_uchar *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 4);
  if (!v3 || (uint64_t v4 = *(void *)(v3 + 8)) == 0)
  {
    uint64_t v7 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (!*MEMORY[0x1E4F30980])
    {
LABEL_9:
      *a2 = v7;
      return this;
    }
LABEL_8:
    *v7 += 2;
    goto LABEL_9;
  }
  this = (atomic_uchar *)WebKit::RemoteLegacyCDMFactoryProxy::gpuConnectionToWebProcess(&v8, *(void *)(v4 + 16));
  uint64_t v5 = v8;
  if (!v8)
  {
    uint64_t v7 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (!*MEMORY[0x1E4F30980])
    {
      *a2 = 0;
      return this;
    }
    goto LABEL_8;
  }
  uint64_t v6 = (_DWORD *)*WebKit::GPUConnectionToWebProcess::mediaKeysStorageDirectory(v8);
  if (v6) {
    *v6 += 2;
  }
  *a2 = v6;
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v5 + 2));
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteLegacyCDMSessionProxy::mediaKeysStorageDirectory@<X0>(atomic_uchar *this@<X0>, void *a2@<X8>)
{
  return WebKit::RemoteLegacyCDMSessionProxy::mediaKeysStorageDirectory(this - 16, a2);
}

void WebKit::RemoteMediaEngineConfigurationFactoryProxy::~RemoteMediaEngineConfigurationFactoryProxy(unsigned int **this, void *a2)
{
  *this = (unsigned int *)&unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
}

{
  void *v3;
  uint64_t vars8;

  *this = (unsigned int *)&unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);

  WTF::fastFree((WTF *)this, v3);
}

uint64_t WebKit::RemoteMediaEngineConfigurationFactoryProxy::createDecodingConfiguration(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9C12D0;
  v4[1] = v3;
  uint64_t v6 = v4;
  WebCore::MediaEngineConfigurationFactory::createDecodingConfiguration();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::RemoteMediaEngineConfigurationFactoryProxy::createEncodingConfiguration(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9C12F8;
  v4[1] = v3;
  uint64_t v6 = v4;
  WebCore::MediaEngineConfigurationFactory::createEncodingConfiguration();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
  }
  return result;
}

void WebKit::RemoteMediaPlayerManagerProxy::~RemoteMediaPlayerManagerProxy(unsigned int **this)
{
  *this = (unsigned int *)&unk_1EE9C0E40;
  WebKit::RemoteMediaPlayerManagerProxy::clear((WebKit::RemoteMediaPlayerManagerProxy *)this);
  uint64_t v3 = this[5];
  this[5] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uchar *)this[3];
  this[3] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v2);
  }
  uint64_t v5 = (uint64_t)this[2];
  if (v5) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v5, v2);
  }
  *this = (unsigned int *)&unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteMediaPlayerManagerProxy::~RemoteMediaPlayerManagerProxy(this);

  WTF::fastFree(v1, v2);
}

void *WebKit::RemoteMediaPlayerManagerProxy::clear(WebKit::RemoteMediaPlayerManagerProxy *this)
{
  uint64_t v1 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin(v1);
  uint64_t v4 = (uint64_t)result;
  uint64_t v5 = v3;
  uint64_t v6 = 0;
  if (v1) {
    uint64_t v6 = &v1[2 * *((unsigned int *)v1 - 1)];
  }
  if (v6 != result)
  {
    do
    {
      uint64_t result = WebKit::RemoteMediaPlayerProxy::invalidate(*(WebCore::MediaPlayer ***)(v4 + 8));
      while (1)
      {
        v4 += 16;
        if ((void *)v4 == v5) {
          break;
        }
        if ((unint64_t)(*(void *)v4 + 1) > 1) {
          goto LABEL_11;
        }
      }
      uint64_t v4 = (uint64_t)v5;
LABEL_11:
      ;
    }
    while ((void *)v4 != v6);
  }
  if (v1)
  {
    return (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable((uint64_t)v1, v3);
  }
  return result;
}

unsigned int *WebKit::RemoteMediaPlayerProxy::invalidate(WebCore::MediaPlayer **this)
{
  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(this + 24));
  WebCore::MediaPlayer::invalidate(this[15]);
  uint64_t v2 = this[13];
  if (v2)
  {
    uint64_t v3 = *((void *)v2 + 2) - 1;
    *((void *)v2 + 2) = v3;
    if (v3)
    {
      this[13] = 0;
    }
    else
    {
      *(void *)(*((void *)v2 + 1) + 8) = 0;
      sandbox_extension_release();
      uint64_t v2 = this[13];
      this[13] = 0;
      if (!v2) {
        goto LABEL_5;
      }
    }
    WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v2);
  }
LABEL_5:
  if (*((unsigned char *)this + 832)) {
    atomic_fetch_add((atomic_uint *volatile)&WebKit::ScopedRenderingResourcesRequest::s_requests, 0xFFFFFFFF);
  }
  *((unsigned char *)this + 832) = 0;
  uint64_t result = (unsigned int *)this[106];
  this[106] = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v5();
  }
  return result;
}

atomic_uchar *WebKit::RemoteMediaPlayerManagerProxy::createMediaPlayer(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t result = *(atomic_uchar **)(a1 + 24);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(void *)(a1 + 32), &v72);
    if (v72)
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v71, (uint64_t **)(v72 + 56));
      uint64_t v69 = *(void *)(v72 + 200);
      v70 = (atomic_uchar *volatile *)(v69 + 16);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v69 + 16));
      uint64_t v11 = WTF::fastMalloc((WTF *)0x368);
      *(_DWORD *)(v11 + 16) = 1;
      *(void *)uint64_t v11 = &unk_1EE9C0E78;
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 24) = &unk_1EE9C1148;
      *(void *)(v11 + 32) = 0;
      *(_OWORD *)(v11 + 40) = 0u;
      *(_OWORD *)(v11 + 56) = 0u;
      *(_OWORD *)(v11 + 72) = 0u;
      *(void *)(v11 + 88) = a2;
      *(void *)(v11 + 96) = a3;
      unsigned int v12 = v71;
      uint64_t v71 = 0;
      *(void *)(v11 + 104) = 0;
      *(void *)(v11 + 112) = v12;
      *(_OWORD *)(v11 + 120) = 0u;
      *(_OWORD *)(v11 + 136) = 0u;
      *(void *)(v11 + 152) = 0;
      unint64_t v13 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
      uint64_t v14 = *(atomic_uint **)(a1 + 8);
      if (v14) {
        atomic_fetch_add(v14, 1u);
      }
      *(void *)(v11 + 160) = v14;
      *(unsigned char *)(v11 + 168) = a4;
      *(void *)(v11 + 176) = 0;
      *(void *)(v11 + 184) = 0;
      uint64_t v15 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v13);
      uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x20);
      void *v16 = &unk_1EE9C1398;
      v16[1] = WebKit::RemoteMediaPlayerProxy::timerFired;
      v16[2] = 0;
      v16[3] = v11;
      WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(v11 + 192), v15);
      *(void *)(v11 + 192) = &unk_1EE9B3390;
      *(void *)(v11 + 224) = 0;
      *(void *)(v11 + 216) = v16;
      *(_DWORD *)(v11 + 232) = 10000000;
      *(unsigned char *)(v11 + 236) = 1;
      *(void *)(v11 + 240) = 0;
      *(_DWORD *)(v11 + 248) = 10000000;
      *(unsigned char *)(v11 + 252) = 1;
      *(void *)(v11 + 256) = 0;
      *(_DWORD *)(v11 + 264) = 10000000;
      *(unsigned char *)(v11 + 268) = 1;
      *(void *)(v11 + 272) = 0;
      *(_DWORD *)(v11 + 280) = 10000000;
      *(unsigned char *)(v11 + 284) = 1;
      *(void *)(v11 + 288) = 0;
      *(_DWORD *)(v11 + 296) = 10000000;
      *(unsigned char *)(v11 + 300) = 1;
      *(unsigned char *)(v11 + 336) = 0;
      *(_WORD *)(v11 + 344) = 0;
      *(unsigned char *)(v11 + 346) = 0;
      *(void *)(v11 + 348) = 0;
      *(unsigned char *)(v11 + 432) = 0;
      *(void *)(v11 + 304) = 0;
      *(void *)(v11 + 312) = 0;
      *(unsigned char *)(v11 + 320) = 0;
      *(_OWORD *)(v11 + 385) = 0u;
      *(_OWORD *)(v11 + 376) = 0u;
      *(_OWORD *)(v11 + 360) = 0u;
      *(_WORD *)(v11 + 440) = 257;
      *(unsigned char *)(v11 + 442) = 1;
      *(_DWORD *)(v11 + 443) = 0;
      *(_DWORD *)(v11 + 446) = 0;
      uint64_t v17 = *(_DWORD **)a5;
      if (*(void *)a5) {
        *v17 += 2;
      }
      *(void *)(v11 + 456) = v17;
      uint64_t v18 = *(_DWORD **)(a5 + 8);
      if (v18) {
        *v18 += 2;
      }
      *(void *)(v11 + 464) = v18;
      unsigned __int16 v19 = *(_DWORD **)(a5 + 16);
      if (v19) {
        *v19 += 2;
      }
      *(void *)(v11 + 472) = v19;
      uint64_t v20 = *(_DWORD **)(a5 + 24);
      if (v20) {
        *v20 += 2;
      }
      *(void *)(v11 + 480) = v20;
      uint64_t v21 = *(unsigned int *)(a5 + 44);
      *(void *)(v11 + 488) = 0;
      *(void *)(v11 + 496) = 0;
      *(_DWORD *)(v11 + 500) = v21;
      if (v21)
      {
        if (v21 >> 28) {
          goto LABEL_89;
        }
        uint64_t v22 = WTF::fastMalloc((WTF *)(16 * v21));
        *(_DWORD *)(v11 + 496) = v21;
        *(void *)(v11 + 488) = v22;
        uint64_t v23 = *(unsigned int *)(a5 + 44);
        if (v23)
        {
          uint64_t v24 = *(void *)(a5 + 32);
          uint64_t v25 = v24 + 16 * v23;
          do
          {
            uint64_t v26 = *(_DWORD **)v24;
            if (*(void *)v24) {
              *v26 += 2;
            }
            *(void *)uint64_t v22 = v26;
            *(unsigned char *)(v22 + 8) = *(unsigned char *)(v24 + 8);
            v24 += 16;
            v22 += 16;
          }
          while (v24 != v25);
        }
      }
      *(unsigned char *)(v11 + 504) = 0;
      *(unsigned char *)(v11 + 520) = 0;
      if (*(unsigned char *)(a5 + 64))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v11 + 504, a5 + 48);
        *(unsigned char *)(v11 + 520) = 1;
      }
      *(unsigned char *)(v11 + 528) = 0;
      *(unsigned char *)(v11 + 544) = 0;
      if (*(unsigned char *)(a5 + 88))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v11 + 528, a5 + 72);
        *(unsigned char *)(v11 + 544) = 1;
      }
      *(unsigned char *)(v11 + 552) = 0;
      *(unsigned char *)(v11 + 568) = 0;
      if (*(unsigned char *)(a5 + 112))
      {
        WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v11 + 552, a5 + 96);
        *(unsigned char *)(v11 + 568) = 1;
      }
      *(unsigned char *)(v11 + 576) = 0;
      *(unsigned char *)(v11 + 592) = 0;
      if (*(unsigned char *)(a5 + 136))
      {
        WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v11 + 576, a5 + 120);
        *(unsigned char *)(v11 + 592) = 1;
      }
      *(unsigned char *)(v11 + 600) = 0;
      *(unsigned char *)(v11 + 616) = 0;
      if (*(unsigned char *)(a5 + 160))
      {
        WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v11 + 600, a5 + 144);
        *(unsigned char *)(v11 + 616) = 1;
      }
      *(_OWORD *)(v11 + 624) = *(_OWORD *)(a5 + 168);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v11 + 640, a5 + 184);
      uint64_t v27 = *(unsigned int *)(a5 + 212);
      *(void *)(v11 + 664) = 0;
      *(void *)(v11 + 656) = 0;
      *(_DWORD *)(v11 + 668) = v27;
      if (!v27)
      {
LABEL_42:
        *(unsigned char *)(v11 + 672) = 0;
        *(_DWORD *)(v11 + 696) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v11 + 672, a5 + 216);
        long long v37 = *(_OWORD *)(a5 + 248);
        *(_OWORD *)(v11 + 718) = *(_OWORD *)(a5 + 262);
        *(_OWORD *)(v11 + 704) = v37;
        *(_OWORD *)(v11 + 736) = 0u;
        *(_OWORD *)(v11 + 752) = 0u;
        *(unsigned char *)(v11 + 768) = 0;
        *(_DWORD *)(v11 + 772) = 1065353216;
        *(_OWORD *)(v11 + 776) = 0u;
        *(_WORD *)(v11 + 792) = 1;
        *(_DWORD *)(v11 + 796) = 0;
        *(_WORD *)(v11 + 800) = 0;
        *(unsigned char *)(v11 + 808) = 0;
        *(unsigned char *)(v11 + 816) = 0;
        *(void *)(v11 + 824) = 0;
        *(unsigned char *)(v11 + 832) = 1;
        atomic_fetch_add((atomic_uint *volatile)&WebKit::ScopedRenderingResourcesRequest::s_requests, 1u);
        *(unsigned char *)(v11 + 833) = 0;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v70);
        *(void *)(v11 + 840) = v69;
        *(void *)(v11 + 848) = 0;
        *(unsigned char *)(v11 + 856) = 0;
        uint64_t v38 = *(void *)(a1 + 40);
        if (!v38)
        {
          uint64_t v39 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)(v39 + 8) = 1;
          *(void *)uint64_t v39 = &unk_1EE9BEFD8;
          *(unsigned char *)(v39 + 12) = 1;
          *(void *)(v39 + 16) = a1;
          v40 = *(unsigned int **)(a1 + 40);
          *(void *)(a1 + 40) = v39;
          if (v40 && atomic_fetch_add((atomic_uint *volatile)v40 + 2, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v40 + 2);
            (*(void (**)(unsigned int *))(*(void *)v40 + 8))(v40);
          }
          int v41 = *(atomic_uchar **)(a1 + 24);
          if (v41)
          {
            WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v41, *(void *)(a1 + 32), &v73);
            uint64_t v42 = v73;
            uint64_t v38 = *(void *)(a1 + 40);
            if (v73)
            {
              uint64_t v68 = *(void *)(v73 + 136);
              BOOL v43 = (v68 & 0x8000000000000000) == 0 || v68 == -1 || *(unsigned char *)(v73 + 380) != 0;
            }
            else
            {
              BOOL v43 = 0;
            }
          }
          else
          {
            uint64_t v42 = 0;
            BOOL v43 = 0;
            uint64_t v38 = *(void *)(a1 + 40);
          }
          if (*(void *)(v38 + 16) == a1) {
            *(unsigned char *)(v38 + 12) = v43;
          }
          uint64_t v73 = 0;
          if (v42)
          {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v42 + 16));
            uint64_t v38 = *(void *)(a1 + 40);
          }
        }
        *(void *)(v11 + 864) = v38;
        WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v11 + 176, v11 + 488);
        *(unsigned char *)(v11 + 793) = *(unsigned char *)(v11 + 730);
        *(_OWORD *)(v11 + 776) = *(_OWORD *)(v11 + 624);
        WebCore::MediaPlayer::create();
        uint64_t v44 = v73;
        uint64_t v73 = 0;
        uint64_t v45 = *(atomic_uchar ***)(v11 + 120);
        *(void *)(v11 + 120) = v44;
        if (v45)
        {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v45);
          uint64_t v46 = (atomic_uchar **)v73;
          uint64_t v73 = 0;
          if (v46) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v46);
          }
        }
        WebCore::MediaPlayer::setResourceOwner();
        WebCore::MediaPlayer::setPresentationSize(*(WebCore::MediaPlayer **)(v11 + 120), (const IntSize *)(v11 + 704));
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)v70, v47);
        uint64_t result = (atomic_uchar *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v71);
        uint64_t v50 = *(void *)(a1 + 16);
        unint64_t v49 = (uint64_t *)(a1 + 16);
        uint64_t v48 = v50;
        if (v50
          || (uint64_t result = (atomic_uchar *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v49, 0), (v48 = *v49) != 0))
        {
          int v51 = *(_DWORD *)(v48 - 8);
        }
        else
        {
          int v51 = 0;
        }
        unint64_t v52 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
        unint64_t v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
        unint64_t v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
        unsigned int v55 = v51 & ((v54 >> 31) ^ v54);
        uint64_t v56 = (uint64_t *)(v48 + 16 * v55);
        uint64_t v57 = *v56;
        if (*v56)
        {
          int v58 = 0;
          int v59 = 1;
          do
          {
            if (v57 == a2)
            {
              uint64_t result = (atomic_uchar *)WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref((_DWORD *)(v11 + 16));
              goto LABEL_76;
            }
            if (v57 == -1) {
              int v58 = v56;
            }
            unsigned int v55 = (v55 + v59) & v51;
            uint64_t v56 = (uint64_t *)(v48 + 16 * v55);
            uint64_t v57 = *v56;
            ++v59;
          }
          while (*v56);
          if (v58)
          {
            *int v58 = 0;
            v58[1] = 0;
            --*(_DWORD *)(*v49 - 16);
            uint64_t v56 = v58;
          }
        }
        uint64_t v60 = v56[1];
        *uint64_t v56 = a2;
        v56[1] = v11;
        if (v60) {
          uint64_t result = (atomic_uchar *)WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref((_DWORD *)(v60 + 16));
        }
        uint64_t v61 = *v49;
        if (*v49) {
          int v62 = *(_DWORD *)(v61 - 12) + 1;
        }
        else {
          int v62 = 1;
        }
        *(_DWORD *)(v61 - 12) = v62;
        uint64_t v63 = *v49;
        if (*v49) {
          int v64 = *(_DWORD *)(v63 - 12);
        }
        else {
          int v64 = 0;
        }
        uint64_t v65 = (*(_DWORD *)(v63 - 16) + v64);
        unint64_t v66 = *(unsigned int *)(v63 - 4);
        if (v66 > 0x400)
        {
          if (v66 > 2 * v65)
          {
LABEL_76:
            uint64_t v67 = v72;
            uint64_t v72 = 0;
            if (v67) {
              return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v67 + 16));
            }
            return result;
          }
        }
        else if (3 * v66 > 4 * v65)
        {
          goto LABEL_76;
        }
        uint64_t result = (atomic_uchar *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v49, v56);
        goto LABEL_76;
      }
      if (v27 < 0x6666667)
      {
        int v28 = 40 * v27;
        uint64_t v29 = WTF::fastMalloc((WTF *)(40 * v27));
        *(_DWORD *)(v11 + 664) = (v28 & 0xFFFFFFF8) / 0x28;
        *(void *)(v11 + 656) = v29;
        unsigned int v30 = *(_DWORD *)(a5 + 212);
        if (v30)
        {
          uint64_t v31 = *(void *)(a5 + 200);
          uint64_t v32 = v31 + 40 * v30;
          do
          {
            int v33 = *(_DWORD **)v31;
            if (*(void *)v31) {
              *v33 += 2;
            }
            *(void *)uint64_t v29 = v33;
            unint64_t v34 = *(_DWORD **)(v31 + 8);
            if (v34) {
              *v34 += 2;
            }
            *(void *)(v29 + 8) = v34;
            unint64_t v35 = *(_DWORD **)(v31 + 16);
            if (v35) {
              *v35 += 2;
            }
            *(void *)(v29 + 16) = v35;
            uint64_t v36 = *(void *)(v31 + 24);
            *(unsigned char *)(v29 + 32) = *(unsigned char *)(v31 + 32);
            *(void *)(v29 + 24) = v36;
            v31 += 40;
            v29 += 40;
          }
          while (v31 != v32);
        }
        goto LABEL_42;
      }
LABEL_89:
      __break(0xC471u);
      JUMPOUT(0x198AFB648);
    }
  }
  return result;
}

void WebKit::RemoteMediaPlayerManagerProxy::deleteMediaPlayer(uint64_t *a1, uint64_t a2)
{
  uint64_t v10 = a2;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 2, &v10);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::take(v3, v4, &v9);
  if (v9)
  {
    WebKit::RemoteMediaPlayerProxy::invalidate((WebCore::MediaPlayer **)v9);
    uint64_t v5 = v9;
    uint64_t v9 = 0;
    if (v5) {
      WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref((_DWORD *)v5 + 4);
    }
  }
  uint64_t v6 = (atomic_uchar *)a1[3];
  if (v6)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v6, a1[4], &v9);
    if (v9)
    {
      if (!atomic_load(&WebKit::ScopedRenderingResourcesRequest::s_requests)) {
        WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure(*((WebKit::GPUProcess **)v9 + 10));
      }
      uint64_t v8 = v9;
      uint64_t v9 = 0;
      if (v8) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v8 + 2));
      }
    }
  }
}

WTF::StringImpl **WebKit::RemoteMediaPlayerManagerProxy::getSupportedTypes(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = WebCore::MediaPlayer::mediaEngine();
  if (!v4)
  {
    WTFLogAlways();
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 16))(v8, &v19);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    return (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v9);
  }
  uint64_t v18 = 0;
  uint64_t result = (WTF::StringImpl **)(*(uint64_t (**)(uint64_t, WTF::StringImpl ***))(*(void *)v4 + 32))(v4, &v18);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (v18 && (uint64_t v6 = *((unsigned int *)v18 - 3), v6))
  {
    if (v6 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v7 = WTF::fastMalloc((WTF *)(8 * v6));
    LODWORD(v20) = v6;
    uint64_t v19 = v7;
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v10 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(&v18);
  unsigned int v12 = v18;
  if (v18) {
    unsigned int v12 = &v18[*((unsigned int *)v18 - 1)];
  }
  if (v12 != v10)
  {
    unsigned int v13 = 0;
    do
    {
      uint64_t v14 = *v10;
      if (*v10) {
        *(_DWORD *)v14 += 2;
      }
      *(void *)(v7 + 8 * v13) = v14;
      while (++v10 != v11)
      {
        if ((unint64_t)*v10 + 1 > 1) {
          goto LABEL_19;
        }
      }
      uint64_t v10 = v11;
LABEL_19:
      ++v13;
    }
    while (v10 != v12);
    HIDWORD(v20) = v13;
  }
  uint64_t v15 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v15 + 16))(v15, &v19);
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v16);
  uint64_t result = v18;
  if (v18) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v18, v17);
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerManagerProxy::supportsTypeAndCodecs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = WebCore::MediaPlayer::mediaEngine();
  if (v6)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 40))(v6, a3);
    uint64_t v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v7);
  }
  else
  {
    WTFLogAlways();
    uint64_t v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v8 + 16))(v8, 0);
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);

  return v9(v8);
}

uint64_t WebKit::RemoteMediaPlayerManagerProxy::supportsKeySystem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = WebCore::MediaPlayer::mediaEngine();
  if (v8)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 72))(v8, a3, a4);
    uint64_t v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v9);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return v11(v10);
  }
  else
  {
    return WTFLogAlways();
  }
}

void WebKit::RemoteMediaPlayerManagerProxy::didReceivePlayerMessage(WebKit::RemoteMediaPlayerManagerProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a3 + 8);
  if ((unint64_t)(v4 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v7 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v8 = 136446210;
      uint64_t v9 = "void WebKit::RemoteMediaPlayerManagerProxy::didReceivePlayerMessage(IPC::Connection &, IPC::Decoder &)";
      _os_log_fault_impl(&dword_1985F2000, v7, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteMediaPlayerManagerProxy.cpp 150: Invalid message dispatched %{public}s", (uint8_t *)&v8, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
  }
  else
  {
    uint64_t v6 = (WebKit::RemoteMediaPlayerProxy *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*((void *)this + 2), v4);
    if (v6)
    {
      WebKit::RemoteMediaPlayerProxy::didReceiveMessage(v6, (atomic_uchar *volatile *)a2, a3);
    }
  }
}

BOOL WebKit::RemoteMediaPlayerManagerProxy::didReceiveSyncPlayerMessage(uint64_t a1, uint64_t a2, uint64_t a3, IPC::Encoder **a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a3 + 64);
  if ((unint64_t)(v5 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v10 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v11 = 136446210;
      unsigned int v12 = "BOOL WebKit::RemoteMediaPlayerManagerProxy::didReceiveSyncPlayerMessage(IPC::Connection &, IPC::Decoder &, U"
            "niqueRef<IPC::Encoder> &)";
      _os_log_fault_impl(&dword_1985F2000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteMediaPlayerManagerProxy.cpp 158: Invalid message dispatched %{public}s", (uint8_t *)&v11, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
    return 0;
  }
  uint64_t v8 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 16), v5);
  if (!v8) {
    return 0;
  }

  return WebKit::RemoteMediaPlayerProxy::didReceiveSyncMessage(v8, (atomic_uchar *volatile *)a2, a3, a4);
}

WebCore::ShareableBitmap *WebKit::RemoteMediaPlayerManagerProxy::bitmapImageForCurrentTime@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v34 = a2;
  uint64_t result = (WebCore::ShareableBitmap *)WebKit::RemoteMediaPlayerManagerProxy::mediaPlayer(a1, &v34, &v33);
  uint64_t v5 = v33;
  if (!v33)
  {
    *a3 = 0;
    a3[64] = 0;
    return result;
  }
  WebCore::MediaPlayer::nativeImageForCurrentTime((uint64_t *)&v32, v33);
  uint64_t result = v32;
  if (v32)
  {
    uint64_t v31 = WebCore::NativeImage::size(v32);
    WebCore::MediaPlayer::colorSpace((uint64_t *)&v21, v5);
    CFTypeRef v6 = v21;
    CFTypeRef v21 = 0;
    CFTypeRef v25 = v6;
    char v26 = 1;
    MEMORY[0x199738D60](&v27, &v31, &v25, 0);
    WebCore::ShareableBitmap::create();
    if (v29)
    {
      CFTypeRef v8 = cf;
      CFTypeRef cf = 0;
      if (v8) {
        CFRelease(v8);
      }
    }
    if (v26)
    {
      CFTypeRef v9 = v25;
      CFTypeRef v25 = 0;
      if (v9) {
        CFRelease(v9);
      }
    }
    CFTypeRef v10 = v21;
    CFTypeRef v21 = 0;
    if (v10) {
      CFRelease(v10);
    }
    uint64_t result = v30;
    if (v30)
    {
      WebCore::ShareableBitmap::createGraphicsContext(&v24, v30);
      if (v24)
      {
        uint64_t v27 = 0;
        *(float *)&CFTypeRef cf = (float)(int)v31;
        *((float *)&cf + 1) = (float)SHIDWORD(v31);
        CFTypeRef v21 = 0;
        float v22 = (float)(int)v31;
        float v23 = (float)SHIDWORD(v31);
        WebCore::GraphicsContext::drawNativeImage();
        WebCore::ShareableBitmap::createHandle();
        uint64_t v11 = v24;
        uint64_t v24 = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
      }
      else
      {
        *a3 = 0;
        a3[64] = 0;
      }
      uint64_t result = v30;
      unsigned int v30 = 0;
      if (result) {
        uint64_t result = (WebCore::ShareableBitmap *)WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)result, v7);
      }
    }
    else
    {
      *a3 = 0;
      a3[64] = 0;
    }
    unsigned int v12 = v32;
    uint64_t v32 = 0;
    if (!v12) {
      goto LABEL_32;
    }
    char v13 = 0;
    uint64_t v14 = *((void *)v12 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 1u, memory_order_acquire, memory_order_acquire);
    if (v13) {
      uint64_t result = (WebCore::ShareableBitmap *)MEMORY[0x19972E8D0](v14);
    }
    uint64_t v15 = *(void *)(v14 + 8);
    int v16 = 1;
    uint64_t v17 = v15 - 1;
    *(void *)(v14 + 8) = v15 - 1;
    if (v15 == 1)
    {
      uint64_t v20 = *(void *)(v14 + 16);
      uint64_t v18 = *(void *)(v14 + 24);
      *(void *)(v14 + 24) = 0;
      BOOL v19 = v20 != 0;
    }
    else
    {
      uint64_t v18 = 0;
      BOOL v19 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
    if (v16 == 1)
    {
      if (!v17)
      {
LABEL_28:
        if (v18) {
          uint64_t result = (WebCore::ShareableBitmap *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
        if (!v19) {
          uint64_t result = (WebCore::ShareableBitmap *)WTF::fastFree((WTF *)v14, v7);
        }
      }
    }
    else
    {
      uint64_t result = (WebCore::ShareableBitmap *)WTF::Lock::unlockSlow((WTF::Lock *)v14);
      if (!v17) {
        goto LABEL_28;
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[64] = 0;
  }
LABEL_32:
  if (v33) {
    return (WebCore::ShareableBitmap *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(atomic_uchar **)v33);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 12);
    uint64_t v5 = *(unsigned int *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        LODWORD(v4) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct((WTF::StringImpl *)(*(void *)a1 + 16 * v5), (WTF::StringImpl *)(*(void *)a1 + 16 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      LODWORD(v4) = v5;
    }
    std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::ContentType const*,WebCore::ContentType const*,WebCore::ContentType*,0>(*(void *)a2, *(void *)a2 + 16 * v4, *(void *)a1);
    uint64_t v6 = *(unsigned int *)(a1 + 12);
    uint64_t v7 = *(unsigned int *)(a2 + 12);
    if (v6 != v7)
    {
      uint64_t v8 = *(void *)a2 + 16 * v7;
      uint64_t v9 = *(void *)a1 + 16 * v6;
      uint64_t v10 = *(void *)a2 + 16 * v6;
      do
      {
        uint64_t v11 = *(_DWORD **)v10;
        if (*(void *)v10) {
          *v11 += 2;
        }
        *(void *)uint64_t v9 = v11;
        *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
        v10 += 16;
        v9 += 16;
      }
      while (v10 != v8);
    }
    *(_DWORD *)(a1 + 12) = v7;
  }
  return a1;
}

void WebKit::RemoteMediaPlayerProxy::~RemoteMediaPlayerProxy(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v2 = (WebKit::RemoteMediaSourceProxy *)*((void *)this + 93);
  if (v2) {
    WebKit::RemoteMediaSourceProxy::shutdown(v2);
  }
  uint64_t v3 = *((void *)this + 92);
  if (v3)
  {
    *((void *)this + 92) = 0;
    LOBYTE(v46) = 0;
    char v48 = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(void *)v3 + 16))(v3, &v46);
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebKit::RemoteMediaPlayerProxy::setShouldEnableAudioSourceProvider((WebCore::MediaPlayer **)this, 0);
  uint64_t v46 = (uint64_t *)*((void *)this + 16);
  uint64_t v47 = *((void *)this + 17);
  v45[0] = 0;
  *((void *)this + 16) = 0;
  v45[1] = 0;
  *((void *)this + 17) = 0;
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v4);
  if (HIDWORD(v47))
  {
    uint64_t v6 = v46;
    uint64_t v7 = 8 * HIDWORD(v47);
    do
    {
      uint64_t v8 = *v6;
      *v6++ = 0;
      (*(void (**)(uint64_t, void))(*(void *)v8 + 16))(v8, 0);
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      v7 -= 8;
    }
    while (v7);
  }
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v5);
  uint64_t v10 = (unsigned int *)*((void *)this + 106);
  *((void *)this + 106) = 0;
  if (v10 && atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v10 + 2);
    (*(void (**)(unsigned int *))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 105);
  *((void *)this + 105) = 0;
  if (v11) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 16), v9);
  }
  if (*((unsigned char *)this + 832)) {
    atomic_fetch_add((atomic_uint *volatile)&WebKit::ScopedRenderingResourcesRequest::s_requests, 0xFFFFFFFF);
  }
  unsigned int v12 = (unsigned int *)*((void *)this + 103);
  *((void *)this + 103) = 0;
  if (v12 && atomic_fetch_add((atomic_uint *volatile)v12 + 4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v12 + 4);
    (*(void (**)(unsigned int *))(*(void *)v12 + 16))(v12);
  }
  uint64_t v13 = *((void *)this + 93);
  *((void *)this + 93) = 0;
  if (v13) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(v13 + 8), v9);
  }
  uint64_t v14 = *((void *)this + 92);
  *((void *)this + 92) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  WebKit::RemoteMediaPlayerProxyConfiguration::~RemoteMediaPlayerProxyConfiguration((WebKit::RemoteMediaPlayerProxy *)((char *)this + 456), v9);
  if (*((unsigned char *)this + 336))
  {
    int v16 = (WTF *)*((void *)this + 40);
    if (v16)
    {
      *((void *)this + 40) = 0;
      *((_DWORD *)this + 82) = 0;
      WTF::fastFree(v16, v15);
    }
  }
  uint64_t v17 = (WTF::StringImpl *)*((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v15);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t v18 = (WTF::StringImpl *)*((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v15);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  *((void *)this + 24) = &unk_1EE9B3390;
  uint64_t v19 = *((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::RemoteMediaPlayerProxy *)((char *)this + 192));
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 176, v20);
  float v22 = (unsigned int *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v22 && atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v22);
    WTF::fastFree((WTF *)v22, v21);
  }
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)this + 19, 0);
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)this + 18, 0);
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 128, v23);
  uint64_t v24 = (atomic_uchar **)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v24) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v24);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)this + 14);
  char v26 = (const char ***)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v26) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v26);
  }
  uint64_t v27 = *((unsigned int *)this + 21);
  if (v27)
  {
    int v28 = (uint64_t *)*((void *)this + 9);
    uint64_t v29 = 8 * v27;
    do
    {
      uint64_t v30 = *v28;
      *int v28 = 0;
      if (v30) {
        WTF::ThreadSafeRefCounted<WebKit::RemoteTextTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)(v30 + 16));
      }
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  uint64_t v31 = (WTF *)*((void *)this + 9);
  if (v31)
  {
    *((void *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v31, v25);
  }
  uint64_t v32 = *((unsigned int *)this + 17);
  if (v32)
  {
    int v33 = (uint64_t *)*((void *)this + 7);
    uint64_t v34 = 8 * v32;
    do
    {
      uint64_t v35 = *v33;
      *int v33 = 0;
      if (v35) {
        WTF::ThreadSafeRefCounted<WebKit::RemoteVideoTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)(v35 + 16));
      }
      ++v33;
      v34 -= 8;
    }
    while (v34);
  }
  uint64_t v36 = (WTF *)*((void *)this + 7);
  if (v36)
  {
    *((void *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v36, v25);
  }
  uint64_t v37 = *((unsigned int *)this + 13);
  if (v37)
  {
    uint64_t v38 = (uint64_t *)*((void *)this + 5);
    uint64_t v39 = 8 * v37;
    do
    {
      uint64_t v40 = *v38;
      *uint64_t v38 = 0;
      if (v40) {
        WTF::ThreadSafeRefCounted<WebKit::RemoteAudioTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)(v40 + 16));
      }
      ++v38;
      v39 -= 8;
    }
    while (v39);
  }
  int v41 = (WTF *)*((void *)this + 5);
  if (v41)
  {
    *((void *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v41, v25);
  }
  *((void *)this + 3) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 4, v25);
  uint64_t v43 = *((void *)this + 1);
  if (v43)
  {
    *(void *)(v43 + 8) = 0;
    uint64_t v44 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v44)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v44, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v44);
        WTF::fastFree((WTF *)v44, v42);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteMediaPlayerProxy::~RemoteMediaPlayerProxy(this);

  WTF::fastFree(v1, v2);
}

unsigned int *WebKit::RemoteMediaPlayerProxy::setShouldEnableAudioSourceProvider(WebCore::MediaPlayer **this, int a2)
{
  uint64_t result = (unsigned int *)WebCore::MediaPlayer::audioSourceProvider(this[15]);
  if (result)
  {
    uint64_t v5 = result;
    if (a2 && (uint64_t v6 = (uint64_t)this[103]) != 0)
    {
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 8), v6);
      uint64_t v7 = *(atomic_uint **)(v6 + 8);
      if (v7) {
        atomic_fetch_add(v7, 1u);
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    uint64_t v9 = (WTF *)v7;
    (*(void (**)(unsigned int *, WTF **))(*(void *)v5 + 8))(v5, &v9);
    uint64_t result = (unsigned int *)v9;
    uint64_t v9 = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v8);
      }
    }
  }
  return result;
}

void non-virtual thunk to'WebKit::RemoteMediaPlayerProxy::~RemoteMediaPlayerProxy(WebKit::RemoteMediaPlayerProxy *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteMediaPlayerProxy::~RemoteMediaPlayerProxy((WebKit::RemoteMediaPlayerProxy *)((char *)this - 24));

  WTF::fastFree(v1, v2);
}

uint64_t *WebKit::RemoteMediaPlayerProxy::commitAllTransactions@<X0>(WebKit::RemoteMediaPlayerProxy *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 20);
  if (v3
    && (uint64_t v4 = *(void *)(v3 + 8)) != 0
    && (uint64_t v6 = *(atomic_uchar **)(v4 + 24)) != 0
    && (WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v6, *(void *)(v4 + 32), v10), uint64_t v8 = v10[0], v10[0] = 0, v8))
  {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v8 + 16));
    uint64_t v9 = (os_unfair_lock_s *)*((void *)this + 14);
    LOBYTE(v10[0]) = 0;
    return IPC::Connection::sendWithPromisedReply<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(v9, *((void *)this + 11), 0, a2);
  }
  else
  {
    char v11 = 1;
    v10[0] = 0;
    v10[1] = 0;
    v10[2] = "commitAllTransactions";
    v10[3] = 0;
    return (uint64_t *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>(&v11, (WTF::Logger::LogSiteIdentifier *)v10, a2);
  }
}

WTF::Lock *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>@<X0>(char *a1@<X0>, WTF::Logger::LogSiteIdentifier *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x78);
  uint64_t v7 = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::NativePromise(v6, a2);
  *a3 = v7;

  return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v7, a1, a2);
}

uint64_t WebKit::RemoteMediaPlayerProxy::getConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  WebCore::MediaPlayer::engineDescription((uint64_t *)v13, *(WebCore::MediaPlayer **)(a1 + 120));
  uint64_t v5 = v13[0];
  v13[0] = 0;
  uint64_t v6 = *(WTF::StringImpl **)a2;
  *(void *)a2 = v5;
  if (v6)
  {
    int v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 != 2) {
      goto LABEL_5;
    }
    WTF::StringImpl::destroy(v6, v4);
    uint64_t v6 = v13[0];
    v13[0] = 0;
    if (!v6) {
      goto LABEL_6;
    }
    int v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v8);
    }
    else {
LABEL_5:
    }
      *(_DWORD *)uint64_t v6 = v7;
  }
LABEL_6:
  WebCore::MediaPlayer::maximumDurationToCacheMediaTime(*(WebCore::MediaPlayer **)(a1 + 120));
  if (v9 == 0.0) {
    double v9 = 0.2;
  }
  *(double *)(a2 + 8) = v9;
  *(unsigned char *)(a2 + 16) = WebCore::MediaPlayer::supportsScanning(*(WebCore::MediaPlayer **)(a1 + 120));
  *(unsigned char *)(a2 + 17) = WebCore::MediaPlayer::supportsFullscreen(*(WebCore::MediaPlayer **)(a1 + 120));
  *(unsigned char *)(a2 + 18) = WebCore::MediaPlayer::supportsPictureInPicture(*(WebCore::MediaPlayer **)(a1 + 120));
  *(unsigned char *)(a2 + 19) = WebCore::MediaPlayer::supportsAcceleratedRendering(*(WebCore::MediaPlayer **)(a1 + 120));
  *(unsigned char *)(a2 + 20) = WebCore::MediaPlayer::supportsPlayAtHostTime(*(WebCore::MediaPlayer **)(a1 + 120));
  *(unsigned char *)(a2 + 21) = WebCore::MediaPlayer::supportsPauseAtHostTime(*(WebCore::MediaPlayer **)(a1 + 120));
  *(unsigned char *)(a2 + 22) = WebCore::MediaPlayer::canPlayToWirelessPlaybackTarget(*(WebCore::MediaPlayer **)(a1 + 120));
  *(unsigned char *)(a2 + 23) = WebCore::MediaPlayer::shouldIgnoreIntrinsicSize(*(WebCore::MediaPlayer **)(a1 + 120));
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v10 = *(atomic_uint **)(a1 + 8);
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  char v11 = (WTF::StringImpl **)operator new(0x18uLL);
  _DWORD *v11 = (WTF::StringImpl *)&unk_1EE9C1440;
  v11[1] = (WTF::StringImpl *)a1;
  v11[2] = (WTF::StringImpl *)v10;
  uint64_t v14 = v11;
  *(unsigned char *)(a1 + 833) = WebCore::MediaPlayer::setCurrentTimeDidChangeCallback();
  uint64_t result = (uint64_t)v14;
  if (v14 == v13) {
    return (*((uint64_t (**)(WTF::StringImpl **))v13[0] + 4))(v13);
  }
  if (v14) {
    return (*((uint64_t (**)(void))*v14 + 5))();
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteMediaPlayerProxy::load(uint64_t a1, WTF::URL *a2, uint64_t *a3, WebCore::ContentType *a4, WTF::String *a5, BOOL a6, uint64_t *a7)
{
  v20[0] = 0;
  v20[2] = 0;
  if (*((unsigned char *)a3 + 8))
  {
    if (*a3)
    {
      uint64_t v13 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)uint64_t v13 = 1;
      uint64_t v14 = *a3;
      *a3 = 0;
      *(void *)(v13 + 8) = v14;
      *(void *)(v13 + 16) = 0;
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v15 = *(const char ****)(a1 + 104);
    *(void *)(a1 + 104) = v13;
    if (v15)
    {
      WTF::RefCounted<WebKit::SandboxExtension>::deref(v15);
      uint64_t v13 = *(void *)(a1 + 104);
    }
    if (v13)
    {
      uint64_t v16 = *(void *)(v13 + 16);
      *(void *)(v13 + 16) = v16 + 1;
      if (!v16) {
        WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(v13 + 8));
      }
    }
    else
    {
      WTFLogAlways();
    }
  }
  WebCore::MediaPlayer::load(*(WebCore::MediaPlayer **)(a1 + 120), a2, a4, a5);
  WebKit::RemoteMediaPlayerProxy::getConfiguration(a1, (uint64_t)v20);
  uint64_t v17 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v17 + 16))(v17, v20);
  (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  uint64_t result = v20[0];
  v20[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteMediaPlayerProxy::loadMediaSource(uint64_t a1, const WTF::URL *a2, const WebCore::ContentType *a3, char a4, uint64_t a5, uint64_t *a6)
{
  v25[0] = 0;
  v25[2] = 0;
  uint64_t v7 = *(void *)(a1 + 160);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8)
    {
      uint64_t v10 = *(atomic_uchar **)(v8 + 24);
      if (v10)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v10, *(void *)(v8 + 32), &v24);
        uint64_t v18 = v24;
        uint64_t v24 = 0;
        if (v18)
        {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v18 + 16));
          uint64_t v19 = *(WebKit::RemoteMediaSourceProxy **)(a1 + 744);
          if (v19) {
            WebKit::RemoteMediaSourceProxy::shutdown(v19);
          }
          uint64_t v20 = WTF::fastMalloc((WTF *)0x60);
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(atomic_uchar **)(*(void *)(*(void *)(a1 + 160) + 8) + 24), *(void *)(*(void *)(*(void *)(a1 + 160) + 8) + 32), &v24);
          WebKit::RemoteMediaSourceProxy::RemoteMediaSourceProxy(v20, v24, a5, a4, a1);
          uint64_t v22 = *(void *)(a1 + 744);
          *(void *)(a1 + 744) = v20;
          if (v22) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(v22 + 8), v21);
          }
          uint64_t v23 = v24;
          uint64_t v24 = 0;
          if (v23) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v23 + 16));
          }
          WebCore::MediaPlayer::load(*(WebCore::MediaPlayer **)(a1 + 120), a2, a3, *(WebCore::MediaSourcePrivateClient **)(a1 + 744));
          WebKit::RemoteMediaPlayerProxy::getConfiguration(a1, (uint64_t)v25);
        }
      }
    }
  }
  uint64_t v11 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v11 + 16))(v11, v25);
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  uint64_t result = v25[0];
  v25[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::prepareForPlayback(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, IntSize a9)
{
  IntSize v14 = a9;
  WebCore::MediaPlayer::setPrivateBrowsingMode(*(WebCore::MediaPlayer **)(a1 + 120));
  WebCore::MediaPlayer::setPreload();
  WebCore::MediaPlayer::setPreservesPitch(*(WebCore::MediaPlayer **)(a1 + 120));
  WebCore::MediaPlayer::setPitchCorrectionAlgorithm();
  WebCore::MediaPlayer::setPreferredDynamicRangeMode();
  uint64_t result = WebCore::MediaPlayer::setPresentationSize(*(WebCore::MediaPlayer **)(a1 + 120), &v14);
  if (a7) {
    uint64_t result = WebCore::MediaPlayer::prepareToPlay(*(WebCore::MediaPlayer **)(a1 + 120));
  }
  if (a8) {
    uint64_t result = WebCore::MediaPlayer::prepareForRendering(*(WebCore::MediaPlayer **)(a1 + 120));
  }
  *(float *)(a1 + 772) = a2;
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::prepareToPlay(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v2 = *((void *)this + 108);
  uint64_t v3 = *((void *)this + 90);
  v5[0] = "RemoteMediaPlayerProxy";
  v5[1] = 23;
  v5[2] = "prepareToPlay";
  v5[3] = v3;
  if (*(unsigned char *)(v2 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v5);
  }
  return WebCore::MediaPlayer::prepareToPlay(*((WebCore::MediaPlayer **)this + 15));
}

WTF *WebKit::RemoteMediaPlayerProxy::play(WebCore::MediaPlayer **this)
{
  if (WebCore::MediaPlayer::movieLoadType(this[15]) != 3) {
    WebKit::RemoteMediaPlayerProxy::startUpdateCachedStateMessageTimer((WebKit::RemoteMediaPlayerProxy *)this);
  }
  WebCore::MediaPlayer::play(this[15]);

  return WebKit::RemoteMediaPlayerProxy::sendCachedState((WebKit::RemoteMediaPlayerProxy *)this);
}

uint64_t WebKit::RemoteMediaPlayerProxy::startUpdateCachedStateMessageTimer(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t result = WTF::RunLoop::TimerBase::isActive((WebKit::RemoteMediaPlayerProxy *)((char *)this + 192));
  if ((result & 1) == 0)
  {
    return WTF::RunLoop::TimerBase::start();
  }
  return result;
}

WTF *WebKit::RemoteMediaPlayerProxy::sendCachedState(WebKit::RemoteMediaPlayerProxy *this)
{
  WebKit::RemoteMediaPlayerProxy::updateCachedState(this, 0);
  uint64_t v2 = *((void *)this + 14);
  uint64_t v5 = (uint64_t)this + 224;
  uint64_t result = (WTF *)IPC::Connection::send<Messages::MediaPlayerPrivateRemote::UpdateCachedState>(v2, &v5, *((void *)this + 11), 0, 0);
  if (*((unsigned char *)this + 336))
  {
    uint64_t result = (WTF *)*((void *)this + 40);
    if (result)
    {
      *((void *)this + 40) = 0;
      *((_DWORD *)this + 82) = 0;
      uint64_t result = (WTF *)WTF::fastFree(result, v4);
    }
    *((unsigned char *)this + 336) = 0;
  }
  return result;
}

WTF *WebKit::RemoteMediaPlayerProxy::pause(WebCore::MediaPlayer **this)
{
  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(this + 24));
  WebKit::RemoteMediaPlayerProxy::updateCachedVideoMetrics((WebKit::RemoteMediaPlayerProxy *)this);
  WebCore::MediaPlayer::pause(this[15]);

  return WebKit::RemoteMediaPlayerProxy::sendCachedState((WebKit::RemoteMediaPlayerProxy *)this);
}

unsigned int *WebKit::RemoteMediaPlayerProxy::updateCachedVideoMetrics(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v1 = this;
  v86[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 108);
  uint64_t v3 = *((void *)this + 90);
  *(void *)&long long buf = "RemoteMediaPlayerProxy";
  *((void *)&buf + 1) = 23;
  uint64_t v77 = "updateCachedVideoMetrics";
  uint64_t v78 = v3;
  if (*(unsigned char *)(v2 + 12)) {
    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
  }
  uint64_t result = (unsigned int *)WTF::MonotonicTime::now(this);
  *((double *)v1 + 95) = *((double *)v1 + 94) + v5;
  if (!*((unsigned char *)v1 + 768))
  {
    *((unsigned char *)v1 + 768) = 1;
    uint64_t v6 = (WTF::RunLoop *)WebCore::MediaPlayer::asyncVideoPlaybackQualityMetrics((uint64_t *)&v59, *((WebCore::MediaPlayer **)v1 + 15));
    uint64_t v7 = (uint64_t)v59;
    uint64_t v8 = WTF::RunLoop::current(v6);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v1 + 2, (uint64_t)v1);
    double v9 = (atomic_uint *)*((void *)v1 + 1);
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
    uint64_t v10 = WTF::fastMalloc((WTF *)0x50);
    (*(void (**)(uint64_t))(*(void *)v8 + 32))(v8);
    uint64_t v11 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x18);
    char v12 = 0;
    *(void *)uint64_t v11 = &unk_1EE9C11C0;
    *((void *)v11 + 1) = v9;
    *((void *)v11 + 2) = v1;
    *(_DWORD *)(v10 + 8) = 1;
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = "updateCachedVideoMetrics";
    *(void *)(v10 + 48) = 0;
    *(_WORD *)(v10 + 56) = 0;
    *(void *)uint64_t v10 = &unk_1EE9C11E8;
    *(void *)(v10 + 64) = 0;
    *(void *)(v10 + 72) = v11;
    atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
    long long v62 = 0uLL;
    uint64_t v63 = "updateCachedVideoMetrics";
    uint64_t v64 = 0;
    uint64_t v60 = (unsigned int *)v7;
    uint64_t v61 = 0;
    uint64_t v65 = v10;
    uint64_t v13 = (atomic_uchar *)(v7 + 48);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v7 + 48), (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
    if (v12) {
      uint64_t v11 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0](v7 + 48);
    }
    *(unsigned char *)(v7 + 144) = 1;
    IntSize v14 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v11);
    if (*v14)
    {
      uint64_t v15 = v14;
      if (v14[16] >= 4u)
      {
        WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v74, (WTF::Logger::LogSiteIdentifier *)&v62);
        WTF::String::String((WTF::String *)&v73, " invoking maybeSettle() [");
        WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v72, v7);
        WTF::String::String((WTF::String *)&v71, " callback:");
        WTF::LogArgument<void const*>::toString();
        WTF::String::String((WTF::String *)&v69, " isNothing:");
        WTF::LogArgument<BOOL>::toString<BOOL>(&v68);
        WTF::String::String((WTF::String *)&v67, "]");
        uint64_t result = (unsigned int *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v74, (uint64_t *)&v73, (uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, &v75);
        if (!v75)
        {
          __break(0xC471u);
          return result;
        }
        uint64_t v17 = v67;
        uint64_t v67 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            WTF::StringImpl::destroy(v17, v16);
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
        uint64_t v18 = v68;
        uint64_t v68 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v16);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
        uint64_t v19 = v69;
        uint64_t v69 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v16);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
        uint64_t v20 = v70;
        v70 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2) {
            WTF::StringImpl::destroy(v20, v16);
          }
          else {
            *(_DWORD *)v20 -= 2;
          }
        }
        CFTypeRef v21 = v71;
        uint64_t v71 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v16);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
        uint64_t v22 = v72;
        uint64_t v72 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, v16);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
        uint64_t v23 = v73;
        uint64_t v73 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2) {
            WTF::StringImpl::destroy(v23, v16);
          }
          else {
            *(_DWORD *)v23 -= 2;
          }
        }
        uint64_t v24 = v74;
        uint64_t v74 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2) {
            WTF::StringImpl::destroy(v24, v16);
          }
          else {
            *(_DWORD *)v24 -= 2;
          }
        }
        CFTypeRef v25 = *((void *)v15 + 4);
        char v26 = (WTF *)os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
        if (v26)
        {
          WTF::String::utf8();
          int v28 = v66[0] ? (char *)v66[0] + 16 : 0;
          LODWORD(buf) = 136446210;
          *(void *)((char *)&buf + 4) = v28;
          _os_log_impl(&dword_1985F2000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          char v26 = v66[0];
          v66[0] = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 1) {
              char v26 = (WTF *)WTF::fastFree(v26, v27);
            }
            else {
              --*(_DWORD *)v26;
            }
          }
        }
        if (*v15 && v15[16] >= 4u)
        {
          uint64_t v29 = (atomic_uchar *)MEMORY[0x1E4F30998];
          while (1)
          {
            int v30 = *v29;
            if (v30) {
              break;
            }
            int v31 = *v29;
            atomic_compare_exchange_strong_explicit(v29, (unsigned __int8 *)&v31, v30 | 1, memory_order_acquire, memory_order_acquire);
            if (v31 == v30)
            {
              uint64_t v32 = WTF::Logger::observers(v26);
              uint64_t v33 = *(unsigned int *)(v32 + 12);
              if (v33)
              {
                uint64_t v34 = *(uint64_t **)v32;
                uint64_t v58 = *(void *)v32 + 8 * v33;
                do
                {
                  uint64_t v35 = *v34;
                  LODWORD(buf) = 0;
                  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)&v62);
                  LODWORD(v77) = 0;
                  WTF::String::String((WTF::String *)&v78, " invoking maybeSettle() [");
                  int v79 = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v80, v7);
                  int v81 = 0;
                  WTF::String::String((WTF::String *)v82, " callback:");
                  v82[2] = 0;
                  WTF::LogArgument<void const*>::toString();
                  v82[6] = 0;
                  WTF::String::String((WTF::String *)v83, " isNothing:");
                  v83[2] = 0;
                  WTF::LogArgument<BOOL>::toString<BOOL>(&v84);
                  int v85 = 0;
                  WTF::String::String((WTF::String *)v86, "]");
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)&buf, 8uLL);
                  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(void *)v35 + 16))(v35, v15, 4, v66);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v36);
                  for (uint64_t i = 120; i != -8; i -= 16)
                  {
                    uint64_t v38 = *(WTF::StringImpl **)((char *)&buf + i);
                    *(void *)((char *)&buf + i) = 0;
                    if (v38)
                    {
                      if (*(_DWORD *)v38 == 2) {
                        WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v27);
                      }
                      else {
                        *(_DWORD *)v38 -= 2;
                      }
                    }
                  }
                  ++v34;
                }
                while (v34 != (uint64_t *)v58);
              }
              int v39 = 1;
              atomic_compare_exchange_strong_explicit(v29, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
              uint64_t v13 = (atomic_uchar *)(v7 + 48);
              if (v39 != 1) {
                WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
              }
              break;
            }
          }
        }
        IntSize v14 = v75;
        v75 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            IntSize v14 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v14, (WTF::StringImpl *)v27);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
      }
    }
    if (*(_DWORD *)(v7 + 96))
    {
      uint64_t v40 = v65;
      if (!*(void *)(v65 + 16)
        || (int v41 = atomic_load((unsigned __int8 *)(v7 + 145)), v41 == 1)
        && (IntSize v14 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(v65 + 16) + 24))(*(void *)(v65 + 16)),
            v14))
      {
        if (*(unsigned char *)(v40 + 56))
        {
          *(void *)&long long buf = v40;
          unint64_t v54 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v14);
          if (*v54 && v54[16] >= 4u) {
            WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v54, v7, (uint64_t)&buf, (WTF::Logger::LogSiteIdentifier *)(v40 + 24));
          }
        }
        else
        {
          int v55 = 1;
          atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v55, 0, memory_order_release, memory_order_relaxed);
          if (v55 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v13);
          }
          if (WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::hasRunnable(v7))
          {
            WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::takeResultRunnable((uint64_t)v66, v7);
            uint64_t v56 = v66[0];
            (*(void (**)(long long *__return_ptr, WTF *))(*(void *)v66[0] + 16))(&buf, v66[0]);
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v40 + 24))(v40, v7, &buf);
            (*(void (**)(WTF *))(*(void *)v56 + 8))(v56);
          }
          else
          {
            WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::takeResult((WTF::StringImpl *)&buf, v7);
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v40 + 24))(v40, v7, &buf);
          }
          char v57 = 0;
          atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v57, 1u, memory_order_acquire, memory_order_acquire);
          if (v57) {
            MEMORY[0x19972E8D0](v13);
          }
        }
      }
      else
      {
        uint64_t v42 = *(void *)(v40 + 16);
        atomic_fetch_add((atomic_uint *volatile)(v40 + 8), 1u);
        atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
        uint64_t v43 = (void *)WTF::fastMalloc((WTF *)0x20);
        *uint64_t v43 = &unk_1EE9C1540;
        v43[1] = v40;
        v43[2] = v40;
        v43[3] = v7;
        *(void *)&long long buf = v43;
        (*(void (**)(uint64_t, long long *))(*(void *)v42 + 16))(v42, &buf);
        uint64_t v44 = buf;
        *(void *)&long long buf = 0;
        if (v44) {
          (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
        }
      }
    }
    else
    {
      uint64_t v45 = *(unsigned int *)(v7 + 116);
      if (v45 == *(_DWORD *)(v7 + 112))
      {
        uint64_t v46 = (uint64_t *)WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 104, v45 + 1, (unint64_t)&v65);
        uint64_t v45 = *(unsigned int *)(v7 + 116);
        int v47 = v45 + 1;
        uint64_t v48 = *(void *)(v7 + 104);
        uint64_t v49 = *v46;
        *uint64_t v46 = 0;
      }
      else
      {
        int v47 = v45 + 1;
        uint64_t v48 = *(void *)(v7 + 104);
        uint64_t v49 = v65;
        uint64_t v65 = 0;
      }
      *(void *)(v48 + 8 * v45) = v49;
      *(_DWORD *)(v7 + 116) = v47;
    }
    int v50 = 1;
    atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v50, 0, memory_order_release, memory_order_relaxed);
    if (v50 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v13);
    }
    int v51 = (unsigned int *)v65;
    uint64_t v65 = 0;
    if (v51 && atomic_fetch_add((atomic_uint *volatile)v51 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(void *)v51 + 8))(v51);
    }
    unint64_t v52 = v61;
    uint64_t v61 = 0;
    if (v52 && atomic_fetch_add((atomic_uint *volatile)v52 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v52 + 2);
      (*(void (**)(unsigned int *))(*(void *)v52 + 8))(v52);
    }
    unint64_t v53 = v60;
    uint64_t v60 = 0;
    if (v53 && atomic_fetch_add((atomic_uint *volatile)v53 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v53 + 2);
      (*(void (**)(unsigned int *))(*(void *)v53 + 16))(v53);
    }
    uint64_t result = v59;
    int v59 = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::seekToTarget(WebKit::RemoteMediaPlayerProxy *this, const WebCore::SeekTarget *a2)
{
  uint64_t v2 = *((void *)this + 108);
  uint64_t v3 = *((void *)this + 90);
  v5[0] = "RemoteMediaPlayerProxy";
  v5[1] = 23;
  v5[2] = "seekToTarget";
  v5[3] = v3;
  if (*(unsigned char *)(v2 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::SeekTarget>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v5, a2);
  }
  return WebCore::MediaPlayer::seekToTarget();
}

uint64_t WebKit::RemoteMediaPlayerProxy::setMuted(WebKit::RemoteMediaPlayerProxy *this)
{
  return MEMORY[0x1F416CA78](*((void *)this + 15));
}

uint64_t WebKit::RemoteMediaPlayerProxy::setPrivateBrowsingMode(WebCore::MediaPlayer **this)
{
  return WebCore::MediaPlayer::setPrivateBrowsingMode(this[15]);
}

uint64_t WebKit::RemoteMediaPlayerProxy::setPreservesPitch(WebCore::MediaPlayer **this)
{
  return WebCore::MediaPlayer::setPreservesPitch(this[15]);
}

uint64_t WebKit::RemoteMediaPlayerProxy::prepareForRendering(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v2 = *((void *)this + 108);
  uint64_t v3 = *((void *)this + 90);
  v5[0] = "RemoteMediaPlayerProxy";
  v5[1] = 23;
  v5[2] = "prepareForRendering";
  v5[3] = v3;
  if (*(unsigned char *)(v2 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v5);
  }
  return WebCore::MediaPlayer::prepareForRendering(*((WebCore::MediaPlayer **)this + 15));
}

uint64_t WebKit::RemoteMediaPlayerProxy::setPageIsVisible(WebKit::RemoteMediaPlayerProxy *this, char a2)
{
  char v7 = a2;
  uint64_t v3 = *((void *)this + 108);
  uint64_t v4 = *((void *)this + 90);
  v6[0] = "RemoteMediaPlayerProxy";
  v6[1] = 23;
  v6[2] = "setPageIsVisible";
  v6[3] = v4;
  if (*(unsigned char *)(v3 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v6);
  }
  return WebCore::MediaPlayer::setPageIsVisible(*((WebCore::MediaPlayer **)this + 15));
}

uint64_t WebKit::RemoteMediaPlayerProxy::setShouldMaintainAspectRatio(WebKit::RemoteMediaPlayerProxy *this)
{
  return MEMORY[0x1F416C9B0](*((void *)this + 15));
}

uint64_t WebKit::RemoteMediaPlayerProxy::acceleratedRenderingStateChanged(WebKit::RemoteMediaPlayerProxy *this, char a2)
{
  char v7 = a2;
  uint64_t v3 = *((void *)this + 108);
  uint64_t v4 = *((void *)this + 90);
  v6[0] = "RemoteMediaPlayerProxy";
  v6[1] = 23;
  v6[2] = "acceleratedRenderingStateChanged";
  v6[3] = v4;
  if (*(unsigned char *)(v3 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v6);
    a2 = v7;
  }
  *((unsigned char *)this + 793) = a2;
  return WebCore::MediaPlayer::acceleratedRenderingStateChanged(*((WebCore::MediaPlayer **)this + 15));
}

uint64_t WebKit::RemoteMediaPlayerProxy::setShouldDisableSleep(WebKit::RemoteMediaPlayerProxy *this)
{
  return MEMORY[0x1F416C910](*((void *)this + 15));
}

uint64_t WebKit::RemoteMediaPlayerProxy::didLoadingProgress(uint64_t a1)
{
  return MEMORY[0x1F4174400](*(void *)(a1 + 120));
}

uint64_t WebKit::RemoteMediaPlayerProxy::setPresentationSize(uint64_t this, const IntSize *a2)
{
  if (a2->m_width != *(_DWORD *)(this + 704) || a2->m_height != *(_DWORD *)(this + 708))
  {
    *(IntSize *)(this + 704) = *a2;
    return WebCore::MediaPlayer::setPresentationSize(*(WebCore::MediaPlayer **)(this + 120), a2);
  }
  return this;
}

uint64_t WebKit::RemoteMediaPlayerProxy::requestResource@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, WTF::ThreadSafeWeakPtrControlBlock **a4@<X8>)
{
  int v19 = a3;
  uint64_t v5 = *(void *)(result + 160);
  if (v5
    && (uint64_t v6 = *(void *)(v5 + 8)) != 0
    && (v7 = (uint64_t *)result, (uint64_t result = *(void *)(v6 + 24)) != 0)
    && (result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)result, *(void *)(v6 + 32), v17), uint64_t v9 = v17[0], v17[0] = 0, v9))
  {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v9 + 16));
    uint64_t v10 = (void *)v7[20];
    if (v10) {
      uint64_t v10 = (void *)v10[1];
    }
    uint64_t v11 = (atomic_uchar *)v10[3];
    if (v11)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v11, v10[4], v17);
      uint64_t v11 = (atomic_uchar *)v17[0];
    }
    else
    {
      v17[0] = 0;
    }
    uint64_t v12 = WebKit::GPUConnectionToWebProcess::remoteMediaResourceManager((WebKit::GPUConnectionToWebProcess *)v11);
    uint64_t v13 = v17[0];
    v17[0] = 0;
    if (v13) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v13 + 16));
    }
    uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    uint64_t v18 = IdentifierInternal;
    uint64_t v15 = (WTF::ThreadSafeWeakPtrControlBlock *)WTF::fastMalloc((WTF *)0x48);
    WebKit::RemoteMediaResource::RemoteMediaResource((uint64_t)v15, v12, (uint64_t)v7, IdentifierInternal);
    WebKit::RemoteMediaResourceManager::addMediaResource(v12, IdentifierInternal, v15);
    uint64_t v16 = v7[14];
    v17[0] = &v18;
    v17[1] = a2;
    v17[2] = &v19;
    uint64_t result = IPC::Connection::send<Messages::MediaPlayerPrivateRemote::RequestResource>(v16, (uint64_t)v17, v7[11], 0, 0);
    *a4 = v15;
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::videoFullscreenStandbyChanged(WebKit::RemoteMediaPlayerProxy *this, char a2)
{
  *((unsigned char *)this + 800) = a2;
  return MEMORY[0x1F416C9D0](*((void *)this + 15));
}

WTF::StringImpl *WebKit::RemoteMediaPlayerProxy::accessLog(uint64_t a1, uint64_t *a2)
{
  WebCore::MediaPlayer::accessLog((uint64_t *)&v5, *(WebCore::MediaPlayer **)(a1 + 120));
  WTF::CompletionHandler<void ()(WTF::String)>::operator()(a2, &v5);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WTF::String)>::operator()(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  char v7 = v3;
  uint64_t v8 = v2;
  WTF::Function<void ()(WTF::String)>::operator()(&v8, &v7);
  uint64_t v5 = v7;
  char v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteMediaPlayerProxy::errorLog(uint64_t a1, uint64_t *a2)
{
  WebCore::MediaPlayer::errorLog((uint64_t *)&v5, *(WebCore::MediaPlayer **)(a1 + 120));
  WTF::CompletionHandler<void ()(WTF::String)>::operator()(a2, &v5);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerNetworkStateChanged(WebCore::MediaPlayer **this)
{
  WebKit::RemoteMediaPlayerProxy::updateCachedState((WebKit::RemoteMediaPlayerProxy *)this, 1);
  uint64_t v2 = (char *)(this + 28);
  *((unsigned char *)this + 344) = WebCore::MediaPlayer::networkState(this[15]);
  uint64_t v3 = (uint64_t)this[14];
  uint64_t v4 = this[11];
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 163;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebKit::RemoteMediaPlayerState,void>::encode(v5, (uint64_t)v2);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

unsigned int *WebKit::RemoteMediaPlayerProxy::updateCachedState(WebKit::RemoteMediaPlayerProxy *this, int a2)
{
  if (*((unsigned char *)this + 833)) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3)
  {
    v9[0] = WebCore::MediaPlayer::currentTime(*((WebCore::MediaPlayer **)this + 15));
    v9[1] = v4;
    WebKit::RemoteMediaPlayerProxy::currentTimeChanged(this, (const WTF::MediaTime *)v9);
  }
  *((unsigned char *)this + 442) = WebCore::MediaPlayer::paused(*((WebCore::MediaPlayer **)this + 15));
  uint64_t result = WebKit::RemoteMediaPlayerProxy::maybeUpdateCachedVideoMetrics((unsigned int *)this);
  if (*((unsigned char *)this + 792))
  {
    *((unsigned char *)this + 792) = 0;
    int v6 = *((unsigned __int8 *)this + 168);
    if (v6 != 1 && v6 != 8)
    {
      uint64_t v8 = WebCore::MediaPlayer::buffered(*((WebCore::MediaPlayer **)this + 15));
      return (unsigned int *)std::optional<WebCore::PlatformTimeRanges>::operator=[abi:sn180100]<WebCore::PlatformTimeRanges const&,void>((uint64_t)this + 320, v8);
    }
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerReadyStateChanged(WebCore::MediaPlayer **this)
{
  uint64_t v2 = (char *)(this + 33);
  char ready = WebCore::MediaPlayer::readyState(this[15]);
  BOOL v3 = this[108];
  uint64_t v4 = this[90];
  v33[0] = (WebCore::SecurityOrigin *)"RemoteMediaPlayerProxy";
  v33[1] = (WebCore::SecurityOrigin *)23;
  v33[2] = (WebCore::SecurityOrigin *)"mediaPlayerReadyStateChanged";
  v33[3] = v4;
  if (*((unsigned char *)v3 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MediaPlayerReadyState>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v33);
  }
  WebKit::RemoteMediaPlayerProxy::updateCachedVideoMetrics((WebKit::RemoteMediaPlayerProxy *)this);
  WebKit::RemoteMediaPlayerProxy::updateCachedState((WebKit::RemoteMediaPlayerProxy *)this, 1);
  *((unsigned char *)this + 344) = WebCore::MediaPlayer::networkState(this[15]);
  this[28] = (WebCore::MediaPlayer *)WebCore::MediaPlayer::duration(this[15]);
  uint64_t v5 = (char *)(this + 28);
  *((_DWORD *)this + 58) = v6;
  *((unsigned char *)this + 236) = v7;
  *((unsigned char *)this + 345) = WebCore::MediaPlayer::movieLoadType(this[15]);
  this[30] = (WebCore::MediaPlayer *)WebCore::MediaPlayer::minTimeSeekable(this[15]);
  *((_DWORD *)this + 62) = v8;
  *((unsigned char *)this + 252) = v9;
  this[32] = (WebCore::MediaPlayer *)WebCore::MediaPlayer::maxTimeSeekable(this[15]);
  *(_DWORD *)uint64_t v2 = v10;
  v2[4] = v11;
  this[34] = (WebCore::MediaPlayer *)WebCore::MediaPlayer::getStartDate(this[15]);
  *((_DWORD *)v2 + 4) = v12;
  v2[20] = v13;
  this[36] = (WebCore::MediaPlayer *)WebCore::MediaPlayer::startTime(this[15]);
  *((_DWORD *)v2 + 8) = v14;
  v2[36] = v15;
  WebCore::MediaPlayer::naturalSize(this[15]);
  *((_DWORD *)this + 87) = v16;
  *((_DWORD *)this + 88) = v17;
  WebCore::MediaPlayer::maxFastForwardRate(this[15]);
  this[45] = v18;
  WebCore::MediaPlayer::minFastReverseRate(this[15]);
  this[46] = v19;
  WebCore::MediaPlayer::seekableTimeRangesLastModifiedTime(this[15]);
  this[47] = v20;
  WebCore::MediaPlayer::liveUpdateInterval(this[15]);
  this[48] = v21;
  *((unsigned char *)this + 447) = WebCore::MediaPlayer::hasAvailableVideoFrame(this[15]);
  *((unsigned char *)this + 448) = WebCore::MediaPlayer::wirelessVideoPlaybackDisabled(this[15]);
  *((unsigned char *)this + 443) = WebCore::MediaPlayer::canSaveMediaData(this[15]);
  *((unsigned char *)this + 449) = WebCore::MediaPlayer::didPassCORSAccessCheck(this[15]);
  uint64_t v22 = this[15];
  WebCore::SecurityOriginData::securityOrigin((uint64_t *)v33, (WebCore::SecurityOriginData *)(this + 84));
  *((_WORD *)this + 220) = WebCore::MediaPlayer::isCrossOrigin(v22, v33[0]) | 0x100;
  uint64_t v24 = v33[0];
  v33[0] = 0;
  if (v24) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v24, v23);
  }
  uint64_t v25 = (uint64_t)this[14];
  char v26 = ready;
  uint64_t v27 = this[11];
  int v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v28 = 170;
  *((void *)v28 + 1) = v27;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  v33[0] = v28;
  IPC::ArgumentCoder<WebKit::RemoteMediaPlayerState,void>::encode(v28, (uint64_t)v5);
  IPC::ArgumentCoder<WebCore::MediaPlayerReadyState,void>::encode<IPC::Encoder>(v28, v26);
  IPC::Connection::sendMessageImpl(v25, (uint64_t *)v33, 0, 0);
  uint64_t result = v33[0];
  v33[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v29);
    return (IPC::Encoder *)WTF::fastFree(v31, v32);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerVolumeChanged(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v2 = *((void *)this + 14);
  WebCore::MediaPlayer::volume(*((WebCore::MediaPlayer **)this + 15));
  double v4 = v3;
  uint64_t v5 = *((void *)this + 11);
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 191;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  char v11 = v6;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v6, v4);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  char v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerMuteChanged(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v2 = *((void *)this + 14);
  char v9 = WebCore::MediaPlayer::muted(*((WebCore::MediaPlayer **)this + 15));
  uint64_t v3 = *((void *)this + 11);
  double v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v4 = 162;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  int v10 = v4;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v4, &v9);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerSeeked(WebKit::RemoteMediaPlayerProxy *this, const WTF::MediaTime *a2)
{
  uint64_t v4 = *((void *)this + 108);
  uint64_t v5 = *((void *)this + 90);
  int v17 = "RemoteMediaPlayerProxy";
  uint64_t v18 = 23;
  int v19 = "mediaPlayerSeeked";
  uint64_t v20 = v5;
  if (*(unsigned char *)(v4 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v17, a2);
  }
  uint64_t v7 = *((void *)this + 14);
  int v6 = (WebCore::MediaPlayer *)*((void *)this + 15);
  uint64_t v8 = *((void *)a2 + 1);
  int v17 = *(const char **)a2;
  LODWORD(v18) = v8;
  BYTE4(v18) = BYTE4(v8);
  IsProgressing = (WTF::MonotonicTime *)WebCore::MediaPlayer::timeIsProgressing(v6);
  LOBYTE(v19) = (_BYTE)IsProgressing;
  WTF::MonotonicTime::now(IsProgressing);
  uint64_t v20 = v10;
  uint64_t v11 = *((void *)this + 11);
  int v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v12 = 183;
  *((void *)v12 + 1) = v11;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  CFTypeRef v21 = v12;
  IPC::ArgumentCoder<WebKit::MediaTimeUpdateData,void>::encode(v12, (uint64_t)&v17);
  IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v21, 0, 0);
  uint64_t result = v21;
  CFTypeRef v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerTimeChanged(WebCore::MediaPlayer **this)
{
  WebKit::RemoteMediaPlayerProxy::updateCachedState((WebKit::RemoteMediaPlayerProxy *)this, 1);
  this[28] = (WebCore::MediaPlayer *)WebCore::MediaPlayer::duration(this[15]);
  uint64_t v2 = (char *)(this + 28);
  *((_DWORD *)this + 58) = v3;
  *((unsigned char *)this + 236) = v4;
  uint64_t v5 = (uint64_t)this[14];
  int v6 = this[15];
  uint64_t v17 = WebCore::MediaPlayer::currentTime(v6);
  int v18 = v7;
  char v19 = v8;
  IsProgressing = (WTF::MonotonicTime *)WebCore::MediaPlayer::timeIsProgressing(v6);
  char v20 = (char)IsProgressing;
  WTF::MonotonicTime::now(IsProgressing);
  uint64_t v21 = v10;
  uint64_t v11 = *((void *)v2 - 17);
  int v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v12 = 186;
  *((void *)v12 + 1) = v11;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v22 = v12;
  IPC::ArgumentCoder<WebKit::RemoteMediaPlayerState,void>::encode(v12, (uint64_t)v2);
  IPC::ArgumentCoder<WebKit::MediaTimeUpdateData,void>::encode(v12, (uint64_t)&v17);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v22, 0, 0);
  uint64_t result = v22;
  uint64_t v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerDurationChanged(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v1 = this;
  WebKit::RemoteMediaPlayerProxy::updateCachedState(this, 1);
  *((void *)v1 + 28) = WebCore::MediaPlayer::duration(*((WebCore::MediaPlayer **)v1 + 15));
  uint64_t v1 = (WebKit::RemoteMediaPlayerProxy *)((char *)v1 + 224);
  *((_DWORD *)v1 + 2) = v2;
  *((unsigned char *)v1 + 12) = v3;
  uint64_t v4 = *((void *)v1 - 14);
  uint64_t v5 = *((void *)v1 - 17);
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 155;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<WebKit::RemoteMediaPlayerState,void>::encode(v6, (uint64_t)v1);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerRateChanged(WebCore::MediaPlayer **this)
{
  WebKit::RemoteMediaPlayerProxy::updateCachedVideoMetrics((WebKit::RemoteMediaPlayerProxy *)this);
  WebKit::RemoteMediaPlayerProxy::sendCachedState((WebKit::RemoteMediaPlayerProxy *)this);
  uint64_t v2 = (uint64_t)this[14];
  WebCore::MediaPlayer::effectiveRate(this[15]);
  double v4 = v3;
  uint64_t v5 = this[15];
  uint64_t v16 = WebCore::MediaPlayer::currentTime(v5);
  int v17 = v6;
  char v18 = v7;
  IsProgressing = (WTF::MonotonicTime *)WebCore::MediaPlayer::timeIsProgressing(v5);
  char v19 = (char)IsProgressing;
  WTF::MonotonicTime::now(IsProgressing);
  uint64_t v20 = v9;
  uint64_t v10 = this[11];
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 169;
  *((void *)v11 + 1) = v10;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v21 = v11;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v11, v4);
  IPC::ArgumentCoder<WebKit::MediaTimeUpdateData,void>::encode(v11, (uint64_t)&v16);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v21, 0, 0);
  uint64_t result = v21;
  uint64_t v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerEngineFailedToLoad(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v2 = *((void *)this + 14);
  uint64_t v3 = WebCore::MediaPlayer::platformErrorCode(*((WebCore::MediaPlayer **)this + 15));
  uint64_t v4 = *((void *)this + 11);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 156;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, v3);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

atomic_uchar *WebKit::RemoteMediaPlayerProxy::mediaPlayerMediaKeysStorageDirectory@<X0>(atomic_uchar *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 20);
  if (v3
    && (uint64_t v4 = *(void *)(v3 + 8)) != 0
    && (uint64_t v5 = this, (this = *(atomic_uchar **)(v4 + 24)) != 0)
    && (this = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(this, *(void *)(v4 + 32), &v12), v7 = v12, int v12 = 0, v7))
  {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v7 + 2));
    char v8 = (void *)*((void *)v5 + 20);
    if (v8) {
      char v8 = (void *)v8[1];
    }
    uint64_t v9 = (atomic_uchar *)v8[3];
    if (v9)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v9, v8[4], &v12);
      uint64_t v9 = v12;
    }
    else
    {
      int v12 = 0;
    }
    this = (atomic_uchar *)WebKit::GPUConnectionToWebProcess::mediaKeysStorageDirectory((WebKit::GPUConnectionToWebProcess *)v9);
    uint64_t v10 = *(_DWORD **)this;
    if (*(void *)this) {
      *v10 += 2;
    }
    *a2 = v10;
    uint64_t v11 = v12;
    int v12 = 0;
    if (v11) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v11 + 2));
    }
  }
  else
  {
    int v6 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980]) {
      *v6 += 2;
    }
    *a2 = v6;
  }
  return this;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerReferrer@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 456);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerUserAgent@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 464);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerSourceApplicationIdentifier@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 472);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerNetworkInterfaceName@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 480);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerGetRawCookies(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(os_unfair_lock_s **)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *a3;
  *a3 = 0;
  char v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v7 = &unk_1EE9C14D0;
  v7[1] = v6;
  uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 158;
  *((void *)v9 + 1) = v5;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v16 = v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a2);
  v15[0] = (uint64_t)v7;
  v15[1] = v8;
  IPC::Connection::sendMessageWithAsyncReply(v4, &v16, v15, 0, 0);
  uint64_t v11 = v15[0];
  v15[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t *WebKit::RemoteMediaPlayerProxy::mediaPlayerMediaCacheDirectory(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v1 = *((void *)this + 20);
  if (!v1) {
    return (uint64_t *)MEMORY[0x1E4F30980];
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return (uint64_t *)MEMORY[0x1E4F30980];
  }
  uint64_t v4 = *(atomic_uchar **)(v2 + 24);
  if (!v4) {
    return (uint64_t *)MEMORY[0x1E4F30980];
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v4, *(void *)(v2 + 32), &v11);
  char v7 = v11;
  uint64_t v11 = 0;
  if (!v7) {
    return (uint64_t *)MEMORY[0x1E4F30980];
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v7 + 2));
  uint64_t v8 = (void *)*((void *)this + 20);
  if (v8) {
    uint64_t v8 = (void *)v8[1];
  }
  uint64_t v9 = (atomic_uchar *)v8[3];
  if (v9)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v9, v8[4], &v11);
    uint64_t v9 = v11;
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v5 = WebKit::GPUConnectionToWebProcess::mediaCacheDirectory((WebKit::GPUConnectionToWebProcess *)v9);
  uint64_t v10 = v11;
  uint64_t v11 = 0;
  if (v10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v10 + 2));
  }
  return v5;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerContentBoxRect(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((void *)this + 97);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaContentTypesRequiringHardwareSupport(WebKit::RemoteMediaPlayerProxy *this)
{
  return (uint64_t)this + 176;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerPreferredAudioCharacteristics@<X0>(WebKit::RemoteMediaPlayerProxy *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t)this + 640);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerShouldUsePersistentCache(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((unsigned __int8 *)this + 728);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerIsVideo(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((unsigned __int8 *)this + 729);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerPlaybackStateChanged(WebCore::MediaPlayer **this)
{
  char v2 = WebCore::MediaPlayer::paused(this[15]);
  *((unsigned char *)this + 442) = v2;
  uint64_t v3 = (uint64_t)this[14];
  uint64_t v4 = this[15];
  uint64_t v17 = WebCore::MediaPlayer::currentTime(v4);
  int v18 = v5;
  char v19 = v6;
  IsProgressing = (WTF::MonotonicTime *)WebCore::MediaPlayer::timeIsProgressing(v4);
  char v20 = (char)IsProgressing;
  WTF::MonotonicTime::now(IsProgressing);
  uint64_t v21 = v8;
  uint64_t v9 = this[11];
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 167;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v22 = v10;
  uint64_t v11 = (unsigned char *)IPC::Encoder::grow(v10, 1uLL, 1);
  if (v12)
  {
    unsigned char *v11 = v2;
    IPC::ArgumentCoder<WebKit::MediaTimeUpdateData,void>::encode(v10, (uint64_t)&v17);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v22, 0, 0);
    uint64_t result = (uint64_t)v22;
    uint64_t v22 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
      return WTF::fastFree(v15, v16);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerBufferedTimeRangesChanged(uint64_t this)
{
  *(unsigned char *)(this + 792) = 1;
  return this;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerSeekableTimeRangesChanged(WebKit::RemoteMediaPlayerProxy *this)
{
  *((void *)this + 30) = WebCore::MediaPlayer::minTimeSeekable(*((WebCore::MediaPlayer **)this + 15));
  *((_DWORD *)this + 62) = v2;
  *((unsigned char *)this + 252) = v3;
  *((void *)this + 32) = WebCore::MediaPlayer::maxTimeSeekable(*((WebCore::MediaPlayer **)this + 15));
  *((_DWORD *)this + 66) = v4;
  *((unsigned char *)this + 268) = v5;
  WebCore::MediaPlayer::seekableTimeRangesLastModifiedTime(*((WebCore::MediaPlayer **)this + 15));
  *((void *)this + 47) = v6;
  WebCore::MediaPlayer::liveUpdateInterval(*((WebCore::MediaPlayer **)this + 15));
  *((void *)this + 48) = v7;
  uint64_t result = WTF::RunLoop::TimerBase::isActive((WebKit::RemoteMediaPlayerProxy *)((char *)this + 192));
  if ((result & 1) == 0)
  {
    return (uint64_t)WebKit::RemoteMediaPlayerProxy::sendCachedState(this);
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteMediaPlayerProxy::mediaPlayerCharacteristicChanged(WebCore::MediaPlayer **this)
{
  WebKit::RemoteMediaPlayerProxy::updateCachedVideoMetrics((WebKit::RemoteMediaPlayerProxy *)this);
  WebKit::RemoteMediaPlayerProxy::updateCachedState((WebKit::RemoteMediaPlayerProxy *)this, 0);
  *((unsigned char *)this + 444) = WebCore::MediaPlayer::hasAudio(this[15]);
  *((unsigned char *)this + 445) = WebCore::MediaPlayer::hasVideo(this[15]);
  *((unsigned char *)this + 446) = WebCore::MediaPlayer::hasClosedCaptions(this[15]);
  WebCore::MediaPlayer::languageOfPrimaryAudioTrack((uint64_t *)&v15, this[15]);
  char v3 = v15;
  char v15 = 0;
  int v4 = this[38];
  this[38] = v3;
  if (!v4) {
    goto LABEL_6;
  }
  int v5 = *(_DWORD *)v4 - 2;
  if (*(_DWORD *)v4 != 2) {
    goto LABEL_5;
  }
  WTF::StringImpl::destroy(v4, v2);
  int v4 = v15;
  char v15 = 0;
  if (!v4) {
    goto LABEL_6;
  }
  int v5 = *(_DWORD *)v4 - 2;
  if (*(_DWORD *)v4 == 2) {
    WTF::StringImpl::destroy(v4, v6);
  }
  else {
LABEL_5:
  }
    *(_DWORD *)int v4 = v5;
LABEL_6:
  uint64_t v7 = (char *)(this + 28);
  uint64_t v8 = (uint64_t)this[14];
  uint64_t v9 = this[11];
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 151;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  char v15 = v10;
  IPC::ArgumentCoder<WebKit::RemoteMediaPlayerState,void>::encode(v10, (uint64_t)v7);
  IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v15, 0, 0);
  uint64_t result = v15;
  char v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (WTF::StringImpl *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerRenderingCanBeAccelerated(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((unsigned __int8 *)this + 793);
}

atomic_uchar *WebKit::RemoteMediaPlayerProxy::addRemoteAudioTrackProxy(atomic_uchar *this, atomic_uint *a2)
{
  uint64_t v2 = *((void *)this + 20);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      int v4 = this;
      this = *(atomic_uchar **)(v3 + 24);
      if (this)
      {
        this = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(this, *(void *)(v3 + 32), &v32);
        uint64_t v6 = v32;
        uint64_t v32 = 0;
        if (v6)
        {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v6 + 2));
          (*(void (**)(atomic_uint *, void, void))(*(void *)a2 + 112))(a2, *((void *)v4 + 108), *((void *)v4 + 90));
          uint64_t v7 = (atomic_uchar **)*((void *)v4 + 5);
          uint64_t v8 = *((unsigned int *)v4 + 13);
          if (v8)
          {
            uint64_t v9 = 8 * v8;
            while (1)
            {
              uint64_t v10 = *((void *)*v7 + 5);
              if (WebCore::TrackPrivateBase::operator==())
              {
                if (WebCore::operator==((uint64_t)(a2 + 14), v10 + 56, v11))
                {
                  int v12 = (*(uint64_t (**)(atomic_uint *))(*(void *)a2 + 128))(a2);
                  this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 128))(v10);
                  if (v12 == this) {
                    break;
                  }
                }
              }
              uint64_t v13 = (*(uint64_t (**)(void))(**((void **)*v7 + 5) + 48))(*((void *)*v7 + 5));
              if (v13 == (*(uint64_t (**)(atomic_uint *))(*(void *)a2 + 48))(a2))
              {
                uint64_t v25 = (void *)*((void *)v4 + 20);
                if (v25) {
                  uint64_t v25 = (void *)v25[1];
                }
                char v26 = (atomic_uchar *)v25[3];
                if (v26)
                {
                  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v26, v25[4], &v32);
                  uint64_t v27 = (uint64_t)v32;
                }
                else
                {
                  uint64_t v27 = 0;
                  uint64_t v32 = 0;
                }
                uint64_t v28 = *((void *)v4 + 11);
                uint64_t v29 = WTF::fastMalloc((WTF *)0x50);
                this = (atomic_uchar *)WebKit::RemoteAudioTrackProxy::RemoteAudioTrackProxy(v29, v27, a2, v28);
                int v30 = *v7;
                *uint64_t v7 = this;
                if (v30) {
                  this = (atomic_uchar *)WTF::ThreadSafeRefCounted<WebKit::RemoteAudioTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)v30 + 4);
                }
                uint64_t v24 = v32;
                uint64_t v32 = 0;
                if (!v24) {
                  return this;
                }
                return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v24 + 2));
              }
              ++v7;
              v9 -= 8;
              if (!v9) {
                goto LABEL_13;
              }
            }
          }
          else
          {
LABEL_13:
            int v14 = (void *)*((void *)v4 + 20);
            if (v14) {
              int v14 = (void *)v14[1];
            }
            char v15 = (atomic_uchar *)v14[3];
            if (v15)
            {
              WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v15, v14[4], &v31);
              uint64_t v16 = v31;
            }
            else
            {
              uint64_t v16 = 0;
              uint64_t v31 = 0;
            }
            uint64_t v17 = *((void *)v4 + 11);
            uint64_t v18 = WTF::fastMalloc((WTF *)0x50);
            this = (atomic_uchar *)WebKit::RemoteAudioTrackProxy::RemoteAudioTrackProxy(v18, v16, a2, v17);
            uint64_t v32 = this;
            uint64_t v19 = *((unsigned int *)v4 + 13);
            if (v19 == *((_DWORD *)v4 + 12))
            {
              this = (atomic_uchar *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v4 + 40), v19 + 1, (unint64_t)&v32);
              uint64_t v20 = *((unsigned int *)v4 + 13);
              uint64_t v21 = *((void *)v4 + 5);
              uint64_t v22 = *(void *)this;
              *(void *)this = 0;
              *(void *)(v21 + 8 * v20) = v22;
              uint64_t v23 = v32;
              *((_DWORD *)v4 + 13) = v20 + 1;
              uint64_t v32 = 0;
              if (v23) {
                this = (atomic_uchar *)WTF::ThreadSafeRefCounted<WebKit::RemoteAudioTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)v23 + 4);
              }
            }
            else
            {
              *(void *)(*((void *)v4 + 5) + 8 * v19) = this;
              *((_DWORD *)v4 + 13) = v19 + 1;
              uint64_t v32 = 0;
            }
            uint64_t v24 = (atomic_uchar *)v31;
            uint64_t v31 = 0;
            if (v24) {
              return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v24 + 2));
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerLogger(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((void *)this + 108);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerLogIdentifier(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((void *)this + 90);
}

uint64_t WebKit::RemoteMediaPlayerProxy::audioTrackSetEnabled(uint64_t this, uint64_t a2, char a3)
{
  uint64_t v3 = *(unsigned int *)(this + 52);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(this + 40);
    uint64_t v7 = 8 * v3;
    while (1)
    {
      this = (*(uint64_t (**)(void))(**(void **)(*v6 + 40) + 48))(*(void *)(*v6 + 40));
      if (this == a2) {
        break;
      }
      ++v6;
      v7 -= 8;
      if (!v7) {
        return this;
      }
    }
    uint64_t v8 = *v6;
    *(unsigned char *)(v8 + 64) = a3;
    uint64_t v9 = *(uint64_t (**)(void))(**(void **)(v8 + 40) + 120);
    return v9();
  }
  return this;
}

atomic_uchar *WebKit::RemoteMediaPlayerProxy::addRemoteVideoTrackProxy(atomic_uchar *this, atomic_uint *a2)
{
  uint64_t v2 = *((void *)this + 20);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      int v4 = this;
      this = *(atomic_uchar **)(v3 + 24);
      if (this)
      {
        this = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(this, *(void *)(v3 + 32), &v32);
        uint64_t v6 = v32;
        uint64_t v32 = 0;
        if (v6)
        {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v6 + 2));
          (*(void (**)(atomic_uint *, void, void))(*(void *)a2 + 112))(a2, *((void *)v4 + 108), *((void *)v4 + 90));
          uint64_t v7 = (atomic_uchar **)*((void *)v4 + 7);
          uint64_t v8 = *((unsigned int *)v4 + 17);
          if (v8)
          {
            uint64_t v9 = 8 * v8;
            while (1)
            {
              uint64_t v10 = *((void *)*v7 + 5);
              if (WebCore::TrackPrivateBase::operator==())
              {
                if (WebCore::operator==((uint64_t)(a2 + 14), v10 + 56, v11))
                {
                  int v12 = (*(uint64_t (**)(atomic_uint *))(*(void *)a2 + 136))(a2);
                  this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 136))(v10);
                  if (v12 == this) {
                    break;
                  }
                }
              }
              uint64_t v13 = (*(uint64_t (**)(void))(**((void **)*v7 + 5) + 48))(*((void *)*v7 + 5));
              if (v13 == (*(uint64_t (**)(atomic_uint *))(*(void *)a2 + 48))(a2))
              {
                uint64_t v25 = (void *)*((void *)v4 + 20);
                if (v25) {
                  uint64_t v25 = (void *)v25[1];
                }
                char v26 = (atomic_uchar *)v25[3];
                if (v26)
                {
                  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v26, v25[4], &v32);
                  uint64_t v27 = (uint64_t)v32;
                }
                else
                {
                  uint64_t v27 = 0;
                  uint64_t v32 = 0;
                }
                uint64_t v28 = *((void *)v4 + 11);
                uint64_t v29 = WTF::fastMalloc((WTF *)0x50);
                this = (atomic_uchar *)WebKit::RemoteVideoTrackProxy::RemoteVideoTrackProxy(v29, v27, a2, v28);
                int v30 = *v7;
                *uint64_t v7 = this;
                if (v30) {
                  this = (atomic_uchar *)WTF::ThreadSafeRefCounted<WebKit::RemoteVideoTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)v30 + 4);
                }
                uint64_t v24 = v32;
                uint64_t v32 = 0;
                if (!v24) {
                  return this;
                }
                return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v24 + 2));
              }
              ++v7;
              v9 -= 8;
              if (!v9) {
                goto LABEL_13;
              }
            }
          }
          else
          {
LABEL_13:
            int v14 = (void *)*((void *)v4 + 20);
            if (v14) {
              int v14 = (void *)v14[1];
            }
            char v15 = (atomic_uchar *)v14[3];
            if (v15)
            {
              WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v15, v14[4], &v31);
              uint64_t v16 = v31;
            }
            else
            {
              uint64_t v16 = 0;
              uint64_t v31 = 0;
            }
            uint64_t v17 = *((void *)v4 + 11);
            uint64_t v18 = WTF::fastMalloc((WTF *)0x50);
            this = (atomic_uchar *)WebKit::RemoteVideoTrackProxy::RemoteVideoTrackProxy(v18, v16, a2, v17);
            uint64_t v32 = this;
            uint64_t v19 = *((unsigned int *)v4 + 17);
            if (v19 == *((_DWORD *)v4 + 16))
            {
              this = (atomic_uchar *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v4 + 56), v19 + 1, (unint64_t)&v32);
              uint64_t v20 = *((unsigned int *)v4 + 17);
              uint64_t v21 = *((void *)v4 + 7);
              uint64_t v22 = *(void *)this;
              *(void *)this = 0;
              *(void *)(v21 + 8 * v20) = v22;
              uint64_t v23 = v32;
              *((_DWORD *)v4 + 17) = v20 + 1;
              uint64_t v32 = 0;
              if (v23) {
                this = (atomic_uchar *)WTF::ThreadSafeRefCounted<WebKit::RemoteVideoTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)v23 + 4);
              }
            }
            else
            {
              *(void *)(*((void *)v4 + 7) + 8 * v19) = this;
              *((_DWORD *)v4 + 17) = v19 + 1;
              uint64_t v32 = 0;
            }
            uint64_t v24 = (atomic_uchar *)v31;
            uint64_t v31 = 0;
            if (v24) {
              return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v24 + 2));
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::RemoteMediaPlayerProxy::videoTrackSetSelected(uint64_t this, uint64_t a2, char a3)
{
  uint64_t v3 = *(unsigned int *)(this + 68);
  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(this + 56);
    uint64_t v7 = 8 * v3;
    while (1)
    {
      this = (*(uint64_t (**)(void))(**(void **)(*v6 + 40) + 48))(*(void *)(*v6 + 40));
      if (this == a2) {
        break;
      }
      ++v6;
      v7 -= 8;
      if (!v7) {
        return this;
      }
    }
    uint64_t v8 = *v6;
    *(unsigned char *)(v8 + 64) = a3;
    uint64_t v9 = *(uint64_t (**)(void))(**(void **)(v8 + 40) + 120);
    return v9();
  }
  return this;
}

atomic_uchar *WebKit::RemoteMediaPlayerProxy::addRemoteTextTrackProxy(atomic_uchar *this, atomic_uint *a2)
{
  uint64_t v2 = *((void *)this + 20);
  if (!v2) {
    return this;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return this;
  }
  int v4 = this;
  this = *(atomic_uchar **)(v3 + 24);
  if (!this) {
    return this;
  }
  this = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(this, *(void *)(v3 + 32), &v40);
  uint64_t v6 = v40;
  uint64_t v40 = 0;
  if (!v6) {
    return this;
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v6 + 2));
  (*(void (**)(atomic_uint *, void, void))(*(void *)a2 + 112))(a2, *((void *)v4 + 108), *((void *)v4 + 90));
  uint64_t v7 = (atomic_uchar **)*((void *)v4 + 9);
  uint64_t v8 = *((unsigned int *)v4 + 21);
  if (!v8)
  {
LABEL_29:
    uint64_t v22 = (void *)*((void *)v4 + 20);
    if (v22) {
      uint64_t v22 = (void *)v22[1];
    }
    uint64_t v23 = (atomic_uchar *)v22[3];
    if (v23)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v23, v22[4], &v39);
      uint64_t v24 = (uint64_t)v39;
    }
    else
    {
      uint64_t v24 = 0;
      int v39 = 0;
    }
    uint64_t v25 = *((void *)v4 + 11);
    uint64_t v26 = WTF::fastMalloc((WTF *)0x48);
    this = (atomic_uchar *)WebKit::RemoteTextTrackProxy::RemoteTextTrackProxy(v26, v24, a2, v25);
    uint64_t v40 = (WTF::StringImpl *)this;
    uint64_t v27 = *((unsigned int *)v4 + 21);
    if (v27 == *((_DWORD *)v4 + 20))
    {
      this = (atomic_uchar *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v4 + 72), v27 + 1, (unint64_t)&v40);
      uint64_t v28 = *((unsigned int *)v4 + 21);
      uint64_t v29 = *((void *)v4 + 9);
      uint64_t v30 = *(void *)this;
      *(void *)this = 0;
      *(void *)(v29 + 8 * v28) = v30;
      uint64_t v31 = v40;
      *((_DWORD *)v4 + 21) = v28 + 1;
      uint64_t v40 = 0;
      if (v31) {
        this = (atomic_uchar *)WTF::ThreadSafeRefCounted<WebKit::RemoteTextTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)v31 + 4);
      }
    }
    else
    {
      *(void *)(*((void *)v4 + 9) + 8 * v27) = this;
      *((_DWORD *)v4 + 21) = v27 + 1;
      uint64_t v40 = 0;
    }
    uint64_t v32 = v39;
    int v39 = 0;
    if (v32) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v32 + 2));
    }
    return this;
  }
  uint64_t v9 = 8 * v8;
  while (1)
  {
    uint64_t v10 = (unsigned __int8 *)*((void *)*v7 + 5);
    if (!WebCore::TrackPrivateBase::operator==()) {
      goto LABEL_27;
    }
    if (*((unsigned __int8 *)a2 + 48) != v10[48]) {
      goto LABEL_27;
    }
    int v11 = (*(uint64_t (**)(atomic_uint *))(*(void *)a2 + 136))(a2);
    if (v11 != (*(unsigned int (**)(unsigned __int8 *))(*(void *)v10 + 136))(v10)) {
      goto LABEL_27;
    }
    int v12 = (*(uint64_t (**)(atomic_uint *))(*(void *)a2 + 144))(a2);
    if (v12 != (*(unsigned int (**)(unsigned __int8 *))(*(void *)v10 + 144))(v10)) {
      goto LABEL_27;
    }
    int v13 = (*(uint64_t (**)(atomic_uint *))(*(void *)a2 + 152))(a2);
    if (v13 != (*(unsigned int (**)(unsigned __int8 *))(*(void *)v10 + 152))(v10)) {
      goto LABEL_27;
    }
    int v14 = (*(uint64_t (**)(atomic_uint *))(*(void *)a2 + 160))(a2);
    if (v14 != (*(unsigned int (**)(unsigned __int8 *))(*(void *)v10 + 160))(v10)) {
      goto LABEL_27;
    }
    int v15 = (*(uint64_t (**)(atomic_uint *))(*(void *)a2 + 168))(a2);
    if (v15 != (*(unsigned int (**)(unsigned __int8 *))(*(void *)v10 + 168))(v10)) {
      goto LABEL_27;
    }
    int v16 = (*(uint64_t (**)(atomic_uint *))(*(void *)a2 + 176))(a2);
    if (v16 != (*(unsigned int (**)(unsigned __int8 *))(*(void *)v10 + 176))(v10)) {
      goto LABEL_27;
    }
    int v17 = (*(uint64_t (**)(atomic_uint *))(*(void *)a2 + 184))(a2);
    if (v17 != (*(unsigned int (**)(unsigned __int8 *))(*(void *)v10 + 184))(v10)) {
      goto LABEL_27;
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, atomic_uint *))(*(void *)a2 + 192))(&v40, a2);
    (*(void (**)(WTF::StringImpl **__return_ptr, unsigned __int8 *))(*(void *)v10 + 192))(&v39, v10);
    uint64_t v19 = v39;
    uint64_t v20 = v40;
    int v39 = 0;
    if (!v19) {
      goto LABEL_20;
    }
    if (*(_DWORD *)v19 != 2)
    {
      *(_DWORD *)v19 -= 2;
LABEL_20:
      this = (atomic_uchar *)v20;
      goto LABEL_22;
    }
    WTF::StringImpl::destroy(v19, v18);
    this = (atomic_uchar *)v40;
LABEL_22:
    uint64_t v40 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        this = (atomic_uchar *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v18);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
    if (v20 == v19) {
      return this;
    }
LABEL_27:
    uint64_t v21 = (*(uint64_t (**)(void))(**((void **)*v7 + 5) + 48))(*((void *)*v7 + 5));
    if (v21 == (*(uint64_t (**)(atomic_uint *))(*(void *)a2 + 48))(a2)) {
      break;
    }
    ++v7;
    v9 -= 8;
    if (!v9) {
      goto LABEL_29;
    }
  }
  uint64_t v33 = (void *)*((void *)v4 + 20);
  if (v33) {
    uint64_t v33 = (void *)v33[1];
  }
  uint64_t v34 = (atomic_uchar *)v33[3];
  if (v34)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v34, v33[4], &v40);
    uint64_t v35 = v40;
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v40 = 0;
  }
  uint64_t v36 = *((void *)v4 + 11);
  uint64_t v37 = WTF::fastMalloc((WTF *)0x48);
  this = (atomic_uchar *)WebKit::RemoteTextTrackProxy::RemoteTextTrackProxy(v37, (uint64_t)v35, a2, v36);
  uint64_t v38 = *v7;
  *uint64_t v7 = this;
  if (v38) {
    this = (atomic_uchar *)WTF::ThreadSafeRefCounted<WebKit::RemoteTextTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)v38 + 4);
  }
  uint64_t v32 = v40;
  uint64_t v40 = 0;
  if (v32) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v32 + 2));
  }
  return this;
}

uint64_t WebKit::RemoteMediaPlayerProxy::textTrackSetMode(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 84);
  if (v2)
  {
    uint64_t v4 = *(void *)(result + 72);
    uint64_t v5 = 8 * v2;
    while (1)
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)v4 + 40) + 48))(*(void *)(*(void *)v4 + 40));
      if (result == a2) {
        break;
      }
      v4 += 8;
      v5 -= 8;
      if (!v5) {
        return result;
      }
    }
    uint64_t v6 = *(uint64_t (**)(void))(**(void **)(*(void *)v4 + 40) + 120);
    return v6();
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerDidRemoveAudioTrack(WebKit::RemoteMediaPlayerProxy *this, WebCore::AudioTrackPrivate *a2)
{
  uint64_t v4 = *((void *)this + 14);
  uint64_t v19 = (*(uint64_t (**)(WebCore::AudioTrackPrivate *))(*(void *)a2 + 48))(a2);
  uint64_t v5 = *((void *)this + 11);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 176;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v20 = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, &v19);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  uint64_t result = v20;
  uint64_t v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  if (*((_DWORD *)this + 13))
  {
    uint64_t v9 = 0;
    for (uint64_t i = -8; ; i -= 8)
    {
      uint64_t v11 = *((void *)this + 5);
      uint64_t v12 = (*(uint64_t (**)(WebCore::AudioTrackPrivate *))(*(void *)a2 + 48))(a2);
      uint64_t v13 = *(void *)(*(void *)(v11 + 8 * v9) + 40);
      uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
      if ((IPC::Encoder *)v12 == result) {
        break;
      }
      if (++v9 >= (unint64_t)*((unsigned int *)this + 13)) {
        return result;
      }
    }
    uint64_t v14 = *((void *)this + 5);
    int v15 = (uint64_t *)(v14 + 8 * v9);
    uint64_t v16 = *v15;
    uint64_t *v15 = 0;
    if (v16) {
      WTF::ThreadSafeRefCounted<WebKit::RemoteAudioTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)(v16 + 16));
    }
    uint64_t result = (IPC::Encoder *)memmove((void *)(v14 + 8 * v9), v15 + 1, *((void *)this + 5) + 8 * *((unsigned int *)this + 13) - v14 + i);
    --*((_DWORD *)this + 13);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerDidRemoveVideoTrack(WebKit::RemoteMediaPlayerProxy *this, WebCore::VideoTrackPrivate *a2)
{
  uint64_t v4 = *((void *)this + 14);
  uint64_t v19 = (*(uint64_t (**)(WebCore::VideoTrackPrivate *))(*(void *)a2 + 48))(a2);
  uint64_t v5 = *((void *)this + 11);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 178;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v20 = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, &v19);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  uint64_t result = v20;
  uint64_t v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  if (*((_DWORD *)this + 17))
  {
    uint64_t v9 = 0;
    for (uint64_t i = -8; ; i -= 8)
    {
      uint64_t v11 = *((void *)this + 7);
      uint64_t v12 = (*(uint64_t (**)(WebCore::VideoTrackPrivate *))(*(void *)a2 + 48))(a2);
      uint64_t v13 = *(void *)(*(void *)(v11 + 8 * v9) + 40);
      uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
      if ((IPC::Encoder *)v12 == result) {
        break;
      }
      if (++v9 >= (unint64_t)*((unsigned int *)this + 17)) {
        return result;
      }
    }
    uint64_t v14 = *((void *)this + 7);
    int v15 = (uint64_t *)(v14 + 8 * v9);
    uint64_t v16 = *v15;
    uint64_t *v15 = 0;
    if (v16) {
      WTF::ThreadSafeRefCounted<WebKit::RemoteVideoTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)(v16 + 16));
    }
    uint64_t result = (IPC::Encoder *)memmove((void *)(v14 + 8 * v9), v15 + 1, *((void *)this + 7) + 8 * *((unsigned int *)this + 17) - v14 + i);
    --*((_DWORD *)this + 17);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerDidRemoveTextTrack(WebKit::RemoteMediaPlayerProxy *this, WebCore::InbandTextTrackPrivate *a2)
{
  uint64_t v4 = *((void *)this + 14);
  uint64_t v19 = (*(uint64_t (**)(WebCore::InbandTextTrackPrivate *))(*(void *)a2 + 48))(a2);
  uint64_t v5 = *((void *)this + 11);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 177;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v20 = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, &v19);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v20, 0, 0);
  uint64_t result = v20;
  uint64_t v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  if (*((_DWORD *)this + 21))
  {
    uint64_t v9 = 0;
    for (uint64_t i = -8; ; i -= 8)
    {
      uint64_t v11 = *((void *)this + 9);
      uint64_t v12 = (*(uint64_t (**)(WebCore::InbandTextTrackPrivate *))(*(void *)a2 + 48))(a2);
      uint64_t v13 = *(void *)(*(void *)(v11 + 8 * v9) + 40);
      uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
      if ((IPC::Encoder *)v12 == result) {
        break;
      }
      if (++v9 >= (unint64_t)*((unsigned int *)this + 21)) {
        return result;
      }
    }
    uint64_t v14 = *((void *)this + 9);
    int v15 = (uint64_t *)(v14 + 8 * v9);
    uint64_t v16 = *v15;
    uint64_t *v15 = 0;
    if (v16) {
      WTF::ThreadSafeRefCounted<WebKit::RemoteTextTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)(v16 + 16));
    }
    uint64_t result = (IPC::Encoder *)memmove((void *)(v14 + 8 * v9), v15 + 1, *((void *)this + 9) + 8 * *((unsigned int *)this + 21) - v14 + i);
    --*((_DWORD *)this + 21);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerResourceNotSupported(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v1 = *((void *)this + 14);
  uint64_t v2 = *((void *)this + 11);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 182;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerSizeChanged(WebCore::MediaPlayer **this)
{
  WebCore::MediaPlayer::naturalSize(this[15]);
  uint64_t v2 = (float *)this + 87;
  *((_DWORD *)this + 87) = v3;
  *((_DWORD *)this + 88) = v4;
  uint64_t v5 = (uint64_t)this[14];
  uint64_t v6 = this[11];
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 185;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v7, v2);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerActiveSourceBuffersChanged(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v1 = *((void *)this + 14);
  char v3 = 0;
  return IPC::Connection::send<Messages::MediaPlayerPrivateRemote::ActiveSourceBuffersChanged>(v1, (uint64_t)&v3, *((void *)this + 11), 0, 0);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerCachedKeyForKeyId@<X0>(uint64_t this@<X0>, const WTF::String *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(this + 160);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      uint64_t v6 = this;
      this = *(void *)(v5 + 24);
      if (this)
      {
        this = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)this, *(void *)(v5 + 32), &v15);
        uint64_t v8 = v15;
        int v15 = 0;
        if (v8)
        {
          this = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v8 + 2));
          if (*(unsigned char *)(v6 + 816))
          {
            uint64_t v9 = *(void **)(v6 + 160);
            if (v9) {
              uint64_t v9 = (void *)v9[1];
            }
            uint64_t v10 = (atomic_uchar *)v9[3];
            if (v10)
            {
              WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v10, v9[4], &v15);
              uint64_t v10 = v15;
            }
            else
            {
              int v15 = 0;
            }
            this = WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)v10);
            if (!*(unsigned char *)(v6 + 816))
            {
              __break(1u);
              return this;
            }
            uint64_t v11 = *(void *)(this + 32);
            this = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v11, *(void *)(v6 + 808));
            if (v11) {
              uint64_t v12 = v11 + 16 * *(unsigned int *)(v11 - 4);
            }
            else {
              uint64_t v12 = 0;
            }
            if (v12 == this) {
              uint64_t v13 = 0;
            }
            else {
              uint64_t v13 = *(void *)(this + 8);
            }
            uint64_t v14 = v15;
            int v15 = 0;
            if (v14) {
              this = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v14 + 2));
            }
            if (v13)
            {
              this = *(void *)(v13 + 64);
              if (this) {
                return (*(uint64_t (**)(uint64_t, const WTF::String *))(*(void *)this + 64))(this, a2);
              }
            }
          }
        }
      }
    }
  }
  *a3 = 0;
  return this;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerKeyNeeded(WebKit::RemoteMediaPlayerProxy *this, size_t *a2)
{
  uint64_t v4 = *((void *)this + 14);
  uint64_t v5 = (const void *)WebCore::SharedBuffer::data((WebCore::SharedBuffer *)a2);
  size_t v6 = a2[6];
  uint64_t v7 = *((void *)this + 11);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 161;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v13 = v8;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v8, v5, v6);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerInitializationDataEncountered(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *a3;
  unint64_t v6 = *(void *)(*a3 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(MEMORY[0x1E4F309C0] + 56);
    if (v7)
    {
      BOOL v8 = *(unsigned char *)(MEMORY[0x1E4F309C0] + 34) || *MEMORY[0x1E4F309B8] == 0;
      unint64_t v9 = (v6 & 0x3FFFFFFFFLL) + v7;
      if (v8) {
        unint64_t v6 = v9;
      }
    }
  }
  if (*(unsigned char *)(v5 + 64) && (uint64_t v10 = *(void *)(v5 + 32)) != 0) {
    size_t v11 = *(void *)(v10 + 32);
  }
  else {
    size_t v11 = *(void *)(v5 + 48);
  }
  uint64_t v12 = *(void *)(a1 + 88);
  uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v13 = 159;
  *((void *)v13 + 1) = v12;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  uint64_t v18 = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v13, (const void *)v6, v11);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v18, 0, 0);
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerWaitingForKeyChanged(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v2 = *((void *)this + 14);
  char v9 = WebCore::MediaPlayer::waitingForKey(*((WebCore::MediaPlayer **)this + 15));
  uint64_t v3 = *((void *)this + 11);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 192;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v4, &v9);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteMediaPlayerProxy::mediaPlayerCurrentPlaybackTargetIsWirelessChanged(WebCore::MediaPlayer **this, char a2)
{
  WebCore::MediaPlayer::wirelessPlaybackTargetName((uint64_t *)&v17, this[15]);
  uint64_t v5 = v17;
  int v17 = 0;
  unint64_t v6 = this[39];
  this[39] = v5;
  if (!v6) {
    goto LABEL_6;
  }
  int v7 = *(_DWORD *)v6 - 2;
  if (*(_DWORD *)v6 != 2) {
    goto LABEL_5;
  }
  WTF::StringImpl::destroy(v6, v4);
  unint64_t v6 = v17;
  int v17 = 0;
  if (!v6) {
    goto LABEL_6;
  }
  int v7 = *(_DWORD *)v6 - 2;
  if (*(_DWORD *)v6 == 2) {
    WTF::StringImpl::destroy(v6, v8);
  }
  else {
LABEL_5:
  }
    *(_DWORD *)unint64_t v6 = v7;
LABEL_6:
  *((unsigned char *)this + 346) = WebCore::MediaPlayer::wirelessPlaybackTargetType(this[15]);
  WebKit::RemoteMediaPlayerProxy::sendCachedState((WebKit::RemoteMediaPlayerProxy *)this);
  uint64_t v9 = (uint64_t)this[14];
  char v16 = a2;
  uint64_t v10 = this[11];
  size_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)size_t v11 = 153;
  *((void *)v11 + 1) = v10;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  int v17 = v11;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v11, &v16);
  IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v17, 0, 0);
  uint64_t result = v17;
  int v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (WTF::StringImpl *)WTF::fastFree(v14, v15);
  }
  return result;
}

WTF *WebKit::RemoteMediaPlayerProxy::setWirelessVideoPlaybackDisabled(WebCore::MediaPlayer **this)
{
  WebCore::MediaPlayer::setWirelessVideoPlaybackDisabled(this[15]);
  *((unsigned char *)this + 448) = WebCore::MediaPlayer::wirelessVideoPlaybackDisabled(this[15]);

  return WebKit::RemoteMediaPlayerProxy::sendCachedState((WebKit::RemoteMediaPlayerProxy *)this);
}

uint64_t WebKit::RemoteMediaPlayerProxy::setShouldPlayToPlaybackTarget(WebKit::RemoteMediaPlayerProxy *this)
{
  return MEMORY[0x1F416C9C8](*((void *)this + 15));
}

_DWORD *WebKit::RemoteMediaPlayerProxy::setWirelessPlaybackTarget(int a1, WebKit::MediaPlaybackTargetContextSerialized *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  WebKit::MediaPlaybackTargetContextSerialized::platformContext(this, (uint64_t)v5);
  if (v6 == 1)
  {
    WebCore::MediaPlaybackTargetMock::create();
  }
  else
  {
    if (v6)
    {
      uint64_t v3 = (WebKit::RemoteMediaPlayerProxy *)std::__throw_bad_variant_access[abi:sn180100]();
      return (_DWORD *)WebKit::RemoteMediaPlayerProxy::mediaPlayerIsFullscreen(v3);
    }
    WebCore::MediaPlaybackTargetCocoa::create();
  }
  WebCore::MediaPlayer::setWirelessPlaybackTarget();
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result)
  {
    if (result[2] == 1) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
    else {
      --result[2];
    }
  }
  if (v6 != -1) {
    return (_DWORD *)((uint64_t (*)(_DWORD **, unsigned char *))off_1EE9C11A0[v6])(&v4, v5);
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerIsFullscreen(WebKit::RemoteMediaPlayerProxy *this)
{
  return 0;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerIsFullscreenPermitted(WebKit::RemoteMediaPlayerProxy *this)
{
  return 0;
}

float WebKit::RemoteMediaPlayerProxy::mediaPlayerContentsScale(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((float *)this + 193);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerPlatformVolumeConfigurationRequired(WebKit::RemoteMediaPlayerProxy *this)
{
  return 0;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerCachedResourceLoader(WebKit::RemoteMediaPlayerProxy *this)
{
  return 0;
}

unsigned int *WebKit::RemoteMediaPlayerProxy::mediaPlayerCreateResourceLoader@<X0>(WebKit::RemoteMediaPlayerProxy *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v4 + 8) = 1;
  *(void *)uint64_t v4 = &unk_1EE9C18B0;
  uint64_t result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  int v6 = (atomic_uint *)*((void *)this + 1);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  *(void *)(v4 + 16) = v6;
  *a2 = v4;
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::doesHaveAttribute(WebKit::RemoteMediaPlayerProxy *this, const AtomString *a2, AtomString *a3)
{
  return 0;
}

uint64_t WebKit::RemoteMediaPlayerProxy::outOfBandTrackSources@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v2 = *(unsigned int *)(this + 668);
  if (v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v4 = this;
      this = WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(a2 + 8) = v2;
      *(void *)a2 = this;
      unsigned int v5 = *(_DWORD *)(v4 + 668);
      if (v5)
      {
        uint64_t v6 = this;
        uint64_t v7 = 0;
        BOOL v8 = *(uint64_t **)(v4 + 656);
        uint64_t v9 = &v8[5 * v5];
        do
        {
          this = WTF::fastMalloc((WTF *)0x40);
          *(_DWORD *)(this + 8) = 1;
          *(void *)this = &unk_1EE9C14F8;
          uint64_t v10 = *v8;
          uint64_t *v8 = 0;
          *(void *)(this + 16) = v10;
          uint64_t v11 = v8[1];
          v8[1] = 0;
          *(void *)(this + 24) = v11;
          uint64_t v12 = v8[2];
          v8[2] = 0;
          *(void *)(this + 32) = v12;
          uint64_t v13 = v8[3];
          *(unsigned char *)(this + 48) = *((unsigned char *)v8 + 32);
          *(void *)(this + 40) = v13;
          *(void *)(v6 + 8 * v7++) = this;
          *(_DWORD *)(a2 + 12) = v7;
          v8 += 5;
        }
        while (v8 != v9);
      }
    }
  }
  return this;
}

double WebKit::RemoteMediaPlayerProxy::mediaPlayerRequestedPlaybackRate(WebKit::RemoteMediaPlayerProxy *this)
{
  return 0.0;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerFullscreenMode(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((unsigned int *)this + 199);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerIsVideoFullscreenStandby(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((unsigned __int8 *)this + 800);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerShouldDisableSleep(WebKit::RemoteMediaPlayerProxy *this)
{
  return 0;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerShouldCheckHardwareSupport(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((unsigned __int8 *)this + 856);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerVideoTarget(WebKit::RemoteMediaPlayerProxy *this)
{
  return 0;
}

uint64_t WebKit::RemoteMediaPlayerProxy::currentTimeChanged(WebKit::RemoteMediaPlayerProxy *this, const WTF::MediaTime *a2)
{
  uint64_t v4 = *((void *)this + 14);
  uint64_t v3 = (WebCore::MediaPlayer *)*((void *)this + 15);
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v9 = *(void *)a2;
  int v10 = v5;
  char v11 = BYTE4(v5);
  IsProgressing = (WTF::MonotonicTime *)WebCore::MediaPlayer::timeIsProgressing(v3);
  char v12 = (char)IsProgressing;
  WTF::MonotonicTime::now(IsProgressing);
  uint64_t v13 = v7;
  uint64_t v14 = &v9;
  return IPC::Connection::send<Messages::MediaPlayerPrivateRemote::CurrentTimeChanged>(v4, (uint64_t *)&v14, *((void *)this + 11), 0, 0);
}

uint64_t WebKit::RemoteMediaPlayerProxy::videoFrameForCurrentTimeIfChanged(void *a1, uint64_t *a2)
{
  LOBYTE(v15[0]) = 0;
  char v17 = 0;
  uint64_t v4 = (WebCore::MediaPlayer *)a1[15];
  if (v4)
  {
    WebCore::MediaPlayer::videoFrameForCurrentTime((uint64_t *)v13, v4);
    uint64_t v5 = *(unsigned int **)&v13[0];
    uint64_t v6 = (unsigned int *)a1[106];
    if (v6 != *(unsigned int **)&v13[0])
    {
      if (*(void *)&v13[0])
      {
        atomic_fetch_add((atomic_uint *volatile)(*(void *)&v13[0] + 8), 1u);
        uint64_t v6 = (unsigned int *)a1[106];
      }
      a1[106] = v5;
      if (!v6) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v6 = (unsigned int *)a1[106];
    if (v6)
    {
      uint64_t v5 = 0;
      a1[106] = 0;
LABEL_9:
      if (atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v6 + 2);
        (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
        if (v5) {
          goto LABEL_11;
        }
        goto LABEL_17;
      }
LABEL_10:
      if (v5)
      {
LABEL_11:
        uint64_t v7 = a1[105];
        char v12 = v5;
        WebKit::RemoteVideoFrameObjectHeap::add(v7, (uint64_t *)&v12, (uint64_t)v13);
        v15[0] = v13[0];
        v15[1] = v13[1];
        uint64_t v15[2] = v13[2];
        uint64_t v16 = v14;
        if (!v17) {
          char v17 = 1;
        }
        BOOL v8 = v12;
        char v12 = 0;
        if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v8 + 2);
          (*(void (**)(unsigned int *))(*(void *)v8 + 8))(v8);
        }
        uint64_t v5 = 0;
      }
LABEL_17:
      uint64_t v9 = 1;
      goto LABEL_20;
    }
    uint64_t v9 = 0;
    uint64_t v5 = 0;
  }
LABEL_20:
  uint64_t v10 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(void *)v10 + 16))(v10, v15, v9);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
  if (v5)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5 + 2);
      return (*(uint64_t (**)(unsigned int *))(*(void *)v5 + 8))(v5);
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::setShouldDisableHDR(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 732) != a2)
  {
    *(unsigned char *)(this + 732) = a2;
    this = *(void *)(this + 120);
    if (this) {
      return MEMORY[0x1F416C8D8]();
    }
  }
  return this;
}

unsigned int *WebKit::RemoteMediaPlayerProxy::maybeUpdateCachedVideoMetrics(unsigned int *this)
{
  if (!*((unsigned char *)this + 442))
  {
    uint64_t v1 = (uint64_t)this;
    if (*((double *)this + 94) != 0.0)
    {
      this = (unsigned int *)WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
      if (v2 >= *(double *)(v1 + 760) && !*(unsigned char *)(v1 + 768))
      {
        return WebKit::RemoteMediaPlayerProxy::updateCachedVideoMetrics((WebKit::RemoteMediaPlayerProxy *)v1);
      }
    }
  }
  return this;
}

uint64_t std::optional<WebCore::PlatformTimeRanges>::operator=[abi:sn180100]<WebCore::PlatformTimeRanges const&,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1, a2);
  }
  else
  {
    WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t WebKit::RemoteMediaPlayerProxy::setLegacyCDMSession(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 160);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = result;
      uint64_t result = *(void *)(v3 + 24);
      if (result)
      {
        uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)result, *(void *)(v3 + 32), &v25);
        uint64_t v6 = v25;
        uint64_t v25 = 0;
        if (v6)
        {
          uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v6 + 2));
          uint64_t v7 = (uint64_t *)(v4 + 808);
          if (*(unsigned char *)(v4 + 816) && *(unsigned char *)(a2 + 8))
          {
            if (*v7 == *(void *)a2) {
              return result;
            }
          }
          else
          {
            if ((*(unsigned char *)(v4 + 816) != 0) == (*(unsigned char *)(a2 + 8) != 0)) {
              return result;
            }
            if (!*(unsigned char *)(v4 + 816)) {
              goto LABEL_28;
            }
          }
          BOOL v8 = *(void **)(v4 + 160);
          if (v8) {
            BOOL v8 = (void *)v8[1];
          }
          uint64_t v9 = (atomic_uchar *)v8[3];
          if (v9)
          {
            WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v9, v8[4], &v25);
            uint64_t v9 = v25;
          }
          else
          {
            uint64_t v25 = 0;
          }
          uint64_t result = WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)v9);
          unsigned int add = *(unsigned __int8 *)(v4 + 816);
          if (!*(unsigned char *)(v4 + 816)) {
            goto LABEL_50;
          }
          uint64_t v12 = *(void *)(result + 32);
          uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v12, *v7);
          if (v12) {
            uint64_t v13 = v12 + 16 * *(unsigned int *)(v12 - 4);
          }
          else {
            uint64_t v13 = 0;
          }
          if (v13 == result) {
            uint64_t v14 = 0;
          }
          else {
            uint64_t v14 = *(void *)(result + 8);
          }
          int v15 = v25;
          uint64_t v25 = 0;
          if (v15) {
            uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v15 + 2));
          }
          if (v14)
          {
            WebCore::MediaPlayer::setCDMSession();
            uint64_t result = *(void *)(v14 + 72);
            *(void *)(v14 + 72) = 0;
            if (result)
            {
              unsigned int add = atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF);
              if (add == 1) {
                goto LABEL_51;
              }
            }
          }
LABEL_28:
          while (1)
          {
            uint64_t v16 = *(void *)a2;
            *(unsigned char *)(v4 + 816) = *(unsigned char *)(a2 + 8);
            *uint64_t v7 = v16;
            if (!*(unsigned char *)(v4 + 816)) {
              break;
            }
            char v17 = *(void **)(v4 + 160);
            if (v17) {
              char v17 = (void *)v17[1];
            }
            uint64_t v18 = (atomic_uchar *)v17[3];
            if (v18)
            {
              WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v18, v17[4], &v25);
              uint64_t v18 = v25;
            }
            else
            {
              uint64_t v25 = 0;
            }
            uint64_t result = WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)v18);
            unsigned int add = *(unsigned __int8 *)(v4 + 816);
            if (*(unsigned char *)(v4 + 816))
            {
              uint64_t v19 = *(void *)(result + 32);
              uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v19, *v7);
              if (v19) {
                uint64_t v20 = v19 + 16 * *(unsigned int *)(v19 - 4);
              }
              else {
                uint64_t v20 = 0;
              }
              if (v20 == result) {
                uint64_t v21 = 0;
              }
              else {
                uint64_t v21 = *(void *)(result + 8);
              }
              uint64_t v22 = v25;
              uint64_t v25 = 0;
              if (v22) {
                uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v22 + 2));
              }
              if (v21)
              {
                WebCore::MediaPlayer::setCDMSession();
                WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
                uint64_t v24 = *(atomic_uint **)(v4 + 8);
                if (v24) {
                  atomic_fetch_add(v24, 1u);
                }
                uint64_t result = *(void *)(v21 + 72);
                *(void *)(v21 + 72) = v24;
                if (result)
                {
                  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
                  {
                    atomic_store(1u, (unsigned int *)result);
                    return WTF::fastFree((WTF *)result, v23);
                  }
                }
              }
              return result;
            }
LABEL_50:
            __break(1u);
LABEL_51:
            atomic_store(add, (unsigned int *)result);
            uint64_t result = WTF::fastFree((WTF *)result, v10);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::cdmInstanceAttached(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 160);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = result;
      uint64_t result = *(void *)(v3 + 24);
      if (result)
      {
        uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)result, *(void *)(v3 + 32), &v12);
        uint64_t v6 = v12;
        uint64_t v12 = 0;
        if (v6)
        {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v6 + 2));
          uint64_t v7 = *(void **)(v4 + 160);
          if (v7) {
            uint64_t v7 = (void *)v7[1];
          }
          BOOL v8 = (atomic_uchar *)v7[3];
          if (v8)
          {
            WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v8, v7[4], &v12);
            BOOL v8 = v12;
          }
          else
          {
            uint64_t v12 = 0;
          }
          uint64_t v9 = WebKit::GPUConnectionToWebProcess::cdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)v8);
          uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(v9 + 48), a2);
          uint64_t v10 = result;
          char v11 = v12;
          uint64_t v12 = 0;
          if (v11) {
            uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v11 + 2));
          }
          if (v10) {
            return WebCore::MediaPlayer::cdmInstanceAttached(*(WebCore::MediaPlayer **)(v4 + 120), *(WebCore::CDMInstance **)(v10 + 40));
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::cdmInstanceDetached(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 160);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = result;
      uint64_t result = *(void *)(v3 + 24);
      if (result)
      {
        uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)result, *(void *)(v3 + 32), &v12);
        uint64_t v6 = v12;
        uint64_t v12 = 0;
        if (v6)
        {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v6 + 2));
          uint64_t v7 = *(void **)(v4 + 160);
          if (v7) {
            uint64_t v7 = (void *)v7[1];
          }
          BOOL v8 = (atomic_uchar *)v7[3];
          if (v8)
          {
            WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v8, v7[4], &v12);
            BOOL v8 = v12;
          }
          else
          {
            uint64_t v12 = 0;
          }
          uint64_t v9 = WebKit::GPUConnectionToWebProcess::cdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)v8);
          uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(v9 + 48), a2);
          uint64_t v10 = result;
          char v11 = v12;
          uint64_t v12 = 0;
          if (v11) {
            uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v11 + 2));
          }
          if (v10) {
            return WebCore::MediaPlayer::cdmInstanceDetached(*(WebCore::MediaPlayer **)(v4 + 120), *(WebCore::CDMInstance **)(v10 + 40));
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::attemptToDecryptWithInstance(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 160);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = result;
      uint64_t result = *(void *)(v3 + 24);
      if (result)
      {
        uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)result, *(void *)(v3 + 32), &v12);
        uint64_t v6 = v12;
        uint64_t v12 = 0;
        if (v6)
        {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v6 + 2));
          uint64_t v7 = *(void **)(v4 + 160);
          if (v7) {
            uint64_t v7 = (void *)v7[1];
          }
          BOOL v8 = (atomic_uchar *)v7[3];
          if (v8)
          {
            WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v8, v7[4], &v12);
            BOOL v8 = v12;
          }
          else
          {
            uint64_t v12 = 0;
          }
          uint64_t v9 = WebKit::GPUConnectionToWebProcess::cdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)v8);
          uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(v9 + 48), a2);
          uint64_t v10 = result;
          char v11 = v12;
          uint64_t v12 = 0;
          if (v11) {
            uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v11 + 2));
          }
          if (v10) {
            return WebCore::MediaPlayer::attemptToDecryptWithInstance(*(WebCore::MediaPlayer **)(v4 + 120), *(WebCore::CDMInstance **)(v10 + 40));
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::setShouldContinueAfterKeyNeeded(WebKit::RemoteMediaPlayerProxy *this)
{
  return MEMORY[0x1F416C9E8](*((void *)this + 15));
}

uint64_t WebKit::RemoteMediaPlayerProxy::performTaskAtTime(uint64_t a1, WTF::MediaTime *a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 736);
  if (v6)
  {
    *(void *)(a1 + 736) = 0;
    LOBYTE(v15) = 0;
    char v16 = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v6 + 16))(v6, &v15);
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *(void *)&long long v14 = WebCore::MediaPlayer::currentTime(*(WebCore::MediaPlayer **)(a1 + 120));
  *((void *)&v14 + 1) = v7;
  if ((int)WTF::MediaTime::compare(a2, (const WTF::MediaTime *)&v14) <= 0)
  {
    long long v15 = v14;
    uint64_t v13 = *a3;
    *a3 = 0;
    char v16 = 1;
    (*(void (**)(uint64_t, long long *))(*(void *)v13 + 16))(v13, &v15);
    return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  else
  {
    uint64_t v8 = *a3;
    *a3 = 0;
    uint64_t v9 = *(void *)(a1 + 736);
    *(void *)(a1 + 736) = v8;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    uint64_t v10 = *(atomic_uint **)(a1 + 8);
    if (v10) {
      atomic_fetch_add(v10, 1u);
    }
    char v11 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v11 = &unk_1EE9C1518;
    v11[1] = a1;
    v11[2] = v10;
    *(void *)&long long v15 = v11;
    WebCore::MediaPlayer::performTaskAtTime();
    uint64_t result = v15;
    *(void *)&long long v15 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

WebCore::SecurityOrigin *WebKit::RemoteMediaPlayerProxy::isCrossOrigin(uint64_t a1, WebCore::SecurityOriginData *this, uint64_t *a3)
{
  uint64_t v4 = *(WebCore::MediaPlayer **)(a1 + 120);
  WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v9, this);
  unsigned int isCrossOrigin = WebCore::MediaPlayer::isCrossOrigin(v4, v9);
  uint64_t v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, isCrossOrigin | 0x100);
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result) {
    return (WebCore::SecurityOrigin *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)result, v7);
  }
  return result;
}

double WebKit::RemoteMediaPlayerProxy::setVideoPlaybackMetricsUpdateInterval(WebKit::RemoteMediaPlayerProxy *this, double a2)
{
  double v9 = a2;
  uint64_t v3 = *((void *)this + 108);
  uint64_t v4 = *((void *)this + 90);
  v8[0] = "RemoteMediaPlayerProxy";
  v8[1] = 23;
  v8[2] = "setVideoPlaybackMetricsUpdateInterval";
  v8[3] = v4;
  if (*(unsigned char *)(v3 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v8, &v9);
  }
  updated = WebKit::RemoteMediaPlayerProxy::updateCachedVideoMetrics(this);
  *((double *)this + 94) = v9;
  WTF::MonotonicTime::now((WTF::MonotonicTime *)updated);
  double result = v9 + v6 + -0.25;
  *((double *)this + 95) = result;
  return result;
}

atomic_uchar *volatile **WebKit::RemoteMediaPlayerProxy::createAudioSourceProvider(WebKit::RemoteMediaPlayerProxy *this)
{
  double result = (atomic_uchar *volatile **)*((void *)this + 15);
  if (result)
  {
    double result = (atomic_uchar *volatile **)WebCore::MediaPlayer::audioSourceProvider((WebCore::MediaPlayer *)result);
    if (result)
    {
      double result = (atomic_uchar *volatile **)(*((uint64_t (**)(atomic_uchar *volatile **))*result + 2))(result);
      if (result)
      {
        uint64_t v3 = *((void *)this + 11);
        uint64_t v4 = (atomic_uchar *volatile *)*((void *)this + 14);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v4);
        uint64_t v8 = v4;
        WebKit::RemoteAudioSourceProviderProxy::create(v3, (uint64_t *)&v8, (uint64_t *)&v9);
        uint64_t v5 = (uint64_t)v9;
        double v9 = 0;
        double v6 = (unsigned int *)*((void *)this + 103);
        *((void *)this + 103) = v5;
        if (v6)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v6 + 4, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v6 + 4);
            (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
          }
          uint64_t v7 = v9;
          double v9 = 0;
          if (v7)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v7 + 4, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v7 + 4);
              (*(void (**)(unsigned int *))(*(void *)v7 + 16))(v7);
            }
          }
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v8);
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::playerContentBoxRectChanged(uint64_t result, _DWORD *a2)
{
  BOOL v2 = *(_DWORD *)(result + 776) == *a2 && *(_DWORD *)(result + 780) == a2[1];
  if (!v2 || (*(_DWORD *)(result + 784) == a2[2] ? (BOOL v3 = *(_DWORD *)(result + 788) == a2[3]) : (BOOL v3 = 0), !v3))
  {
    *(_OWORD *)(result + 776) = *(_OWORD *)a2;
    double result = *(void *)(result + 120);
    if (result) {
      return MEMORY[0x1F416C990]();
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::setShouldCheckHardwareSupport(WebCore::MediaPlayer **this, char a2)
{
  uint64_t result = WebCore::MediaPlayer::setShouldCheckHardwareSupport(this[15]);
  *((unsigned char *)this + 856) = a2;
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::isInFullscreenOrPictureInPictureChanged(WebKit::RemoteMediaPlayerProxy *this)
{
  return MEMORY[0x1F416CA20](*((void *)this + 15));
}

uint64_t WebKit::RemoteMediaResource::RemoteMediaResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_1994F5F10;
  *(void *)(v8 + 24) = a1;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE9C1180;
  double v9 = *(atomic_uchar **)(a2 + 16);
  if (v9) {
    double v9 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v9);
  }
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  uint64_t v10 = *(atomic_uint **)(a3 + 8);
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = a4;
  *(_WORD *)(a1 + 64) = 0;
  return a1;
}

void WebKit::RemoteMediaResource::~RemoteMediaResource(WebKit::RemoteMediaResource *this, void *a2)
{
  *(void *)this = &unk_1EE9C1180;
  BOOL v3 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (atomic_uchar *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }

  WebCore::PlatformMediaResource::~PlatformMediaResource(this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteMediaResource::~RemoteMediaResource(this, a2);

  WTF::fastFree(v2, v3);
}

void WebCore::PlatformMediaResource::~PlatformMediaResource(WebCore::PlatformMediaResource *this)
{
  *(void *)this = &unk_1EE9C1278;
  BOOL v2 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebCore::PlatformMediaResource::~PlatformMediaResource(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *WebKit::RemoteMediaResource::shutdown(atomic_uchar *this)
{
  if ((atomic_exchange(this + 65, 1u) & 1) == 0)
  {
    uint64_t v1 = this;
    double v9 = 0;
    WebCore::PlatformMediaResource::setClient((uint64_t)this, (uint64_t *)&v9);
    BOOL v2 = v9;
    double v9 = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
    BOOL v3 = (atomic_uchar *)*((void *)v1 + 4);
    if (v3)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v3, *((void *)v1 + 5), &v9);
      if (v9)
      {
        WebKit::RemoteMediaResourceManager::removeMediaResource((uint64_t)v9, *((void *)v1 + 7));
        uint64_t v5 = (uint64_t)v9;
        double v9 = 0;
        if (v5) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), v4);
        }
      }
    }
    uint64_t v6 = *((void *)v1 + 6);
    uint64_t v7 = *((void *)v1 + 7);
    *((void *)v1 + 6) = 0;
    uint64_t v8 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v8 = &unk_1EE9C1568;
    *((void *)v8 + 1) = v6;
    *((void *)v8 + 2) = v7;
    double v9 = v8;
    WTF::ensureOnMainRunLoop();
    this = (atomic_uchar *)v9;
    double v9 = 0;
    if (this) {
      return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)this + 8))(this);
    }
  }
  return this;
}

unsigned int *WebCore::PlatformMediaResource::setClient(uint64_t a1, uint64_t *a2)
{
  char v4 = 0;
  uint64_t v5 = (atomic_uchar *)(a1 + 24);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 24), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 24);
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t result = *(unsigned int **)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
  }
  int v8 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1)
  {
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return result;
}

uint64_t WebKit::RemoteMediaResource::didPassAccessControlCheck(WebKit::RemoteMediaResource *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 64);
  return v1 & 1;
}

unsigned int *WebKit::RemoteMediaResource::responseReceived(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t *a4)
{
  WebKit::RemoteMediaResourceLoader::defaultQueue(&v16);
  int v8 = v16;
  char v16 = 0;
  if (v8) {
    (*(void (**)(unsigned int *))(*(void *)v8 + 56))(v8);
  }
  WebCore::PlatformMediaResource::client(a1, &v16);
  double v9 = v16;
  if (v16)
  {
    atomic_store(a3, (unsigned __int8 *)(a1 + 64));
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(a1 + 8));
    uint64_t v10 = *a4;
    *a4 = 0;
    char v11 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v11 = &unk_1EE9C1590;
    v11[1] = a1;
    v11[2] = v10;
    long long v15 = v11;
    (*(void (**)(unsigned int *, uint64_t, uint64_t, void **))(*(void *)v9 + 16))(v9, a1, a2, &v15);
    uint64_t v12 = v15;
    long long v15 = 0;
    if (v12) {
      (*(void (**)(void *))(*v12 + 8))(v12);
    }
  }
  else
  {
    uint64_t v13 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v13 + 16))(v13, 0);
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t result = v16;
  char v16 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaResourceLoader::defaultQueue@<X0>(void *a1@<X8>)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&WebKit::RemoteMediaResourceLoader::defaultQueue(void)::onceKey, memory_order_acquire) != -1)
  {
    uint64_t v7 = &v5;
    uint64_t v6 = &v7;
    std::__call_once(&WebKit::RemoteMediaResourceLoader::defaultQueue(void)::onceKey, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::RemoteMediaResourceLoader::defaultQueue(void)::{lambda(void)#1} &&>>);
  }
  BOOL v3 = WebKit::RemoteMediaResourceLoader::defaultQueue(void)::messageQueue;
  uint64_t result = (*(uint64_t (**)(void *))(*(void *)WebKit::RemoteMediaResourceLoader::defaultQueue(void)::messageQueue
                                             + 48))(WebKit::RemoteMediaResourceLoader::defaultQueue(void)::messageQueue);
  *a1 = v3;
  return result;
}

uint64_t WebCore::PlatformMediaResource::client@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = this;
  char v4 = 0;
  char v5 = (atomic_uchar *)(this + 24);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(this + 24), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    this = MEMORY[0x19972E8D0](this + 24);
  }
  uint64_t v6 = *(void *)(v2 + 16);
  if (v6) {
    atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  }
  *a2 = v6;
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return this;
}

unsigned int *WebKit::RemoteMediaResource::redirectReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WebKit::RemoteMediaResourceLoader::defaultQueue(&v10);
  int v8 = v10;
  uint64_t v10 = 0;
  if (v8) {
    (*(void (**)(unsigned int *))(*(void *)v8 + 56))(v8);
  }
  WebCore::PlatformMediaResource::client(a1, &v10);
  uint64_t result = v10;
  if (v10)
  {
    (*(void (**)(unsigned int *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 24))(v10, a1, a2, a3, a4);
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *WebKit::RemoteMediaResource::dataSent(WebKit::RemoteMediaResource *this, uint64_t a2, uint64_t a3)
{
  WebKit::RemoteMediaResourceLoader::defaultQueue(&v8);
  uint64_t v6 = v8;
  int v8 = 0;
  if (v6) {
    (*(void (**)(unsigned int *))(*(void *)v6 + 56))(v6);
  }
  WebCore::PlatformMediaResource::client((uint64_t)this, &v8);
  uint64_t result = v8;
  if (v8)
  {
    (*(void (**)(unsigned int *, WebKit::RemoteMediaResource *, uint64_t, uint64_t))(*(void *)v8 + 40))(v8, this, a2, a3);
    uint64_t result = v8;
    int v8 = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *WebKit::RemoteMediaResource::dataReceived(WebKit::RemoteMediaResource *this, const WebCore::SharedBuffer *a2)
{
  WebKit::RemoteMediaResourceLoader::defaultQueue(&v6);
  char v4 = v6;
  uint64_t v6 = 0;
  if (v4) {
    (*(void (**)(unsigned int *))(*(void *)v4 + 56))(v4);
  }
  WebCore::PlatformMediaResource::client((uint64_t)this, &v6);
  uint64_t result = v6;
  if (v6)
  {
    (*(void (**)(unsigned int *, WebKit::RemoteMediaResource *, const WebCore::SharedBuffer *))(*(void *)v6 + 48))(v6, this, a2);
    uint64_t result = v6;
    uint64_t v6 = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *WebKit::RemoteMediaResource::accessControlCheckFailed(WebKit::RemoteMediaResource *this, const WebCore::ResourceError *a2)
{
  WebKit::RemoteMediaResourceLoader::defaultQueue(&v6);
  char v4 = v6;
  uint64_t v6 = 0;
  if (v4) {
    (*(void (**)(unsigned int *))(*(void *)v4 + 56))(v4);
  }
  atomic_store(0, (unsigned __int8 *)this + 64);
  WebCore::PlatformMediaResource::client((uint64_t)this, &v6);
  uint64_t result = v6;
  if (v6)
  {
    (*(void (**)(unsigned int *, WebKit::RemoteMediaResource *, const WebCore::ResourceError *))(*(void *)v6 + 56))(v6, this, a2);
    uint64_t result = v6;
    uint64_t v6 = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *WebKit::RemoteMediaResource::loadFailed(WebKit::RemoteMediaResource *this, const WebCore::ResourceError *a2)
{
  WebKit::RemoteMediaResourceLoader::defaultQueue(&v6);
  char v4 = v6;
  uint64_t v6 = 0;
  if (v4) {
    (*(void (**)(unsigned int *))(*(void *)v4 + 56))(v4);
  }
  WebCore::PlatformMediaResource::client((uint64_t)this, &v6);
  uint64_t result = v6;
  if (v6)
  {
    (*(void (**)(unsigned int *, WebKit::RemoteMediaResource *, const WebCore::ResourceError *))(*(void *)v6 + 64))(v6, this, a2);
    uint64_t result = v6;
    uint64_t v6 = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *WebKit::RemoteMediaResource::loadFinished(WebKit::RemoteMediaResource *this, const WebCore::NetworkLoadMetrics *a2)
{
  WebKit::RemoteMediaResourceLoader::defaultQueue(&v6);
  char v4 = v6;
  uint64_t v6 = 0;
  if (v4) {
    (*(void (**)(unsigned int *))(*(void *)v4 + 56))(v4);
  }
  WebCore::PlatformMediaResource::client((uint64_t)this, &v6);
  uint64_t result = v6;
  if (v6)
  {
    (*(void (**)(unsigned int *, WebKit::RemoteMediaResource *, const WebCore::NetworkLoadMetrics *))(*(void *)v6 + 72))(v6, this, a2);
    uint64_t result = v6;
    uint64_t v6 = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteLegacyCDMSessionProxy::logger(WebKit::RemoteLegacyCDMSessionProxy *this)
{
  return *((void *)this + 3);
}

uint64_t non-virtual thunk to'WebKit::RemoteLegacyCDMSessionProxy::logIdentifier(WebKit::RemoteLegacyCDMSessionProxy *this)
{
  return *((void *)this + 4);
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerAcceleratedCompositingEnabled(WebCore::MediaPlayerClient *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerIsLooping(WebCore::MediaPlayerClient *this)
{
  return 0;
}

void WebCore::MediaPlayerClient::mediaPlayerElementId(void *a1@<X8>)
{
  uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v2 += 2;
  }
  *a1 = v2;
}

uint64_t WebKit::RemoteMediaPlayerProxy::allowedMediaContainerTypes(WebKit::RemoteMediaPlayerProxy *this)
{
  return (uint64_t)this + 504;
}

uint64_t WebKit::RemoteMediaPlayerProxy::allowedMediaCodecTypes(WebKit::RemoteMediaPlayerProxy *this)
{
  return (uint64_t)this + 528;
}

uint64_t WebKit::RemoteMediaPlayerProxy::allowedMediaVideoCodecIDs(WebKit::RemoteMediaPlayerProxy *this)
{
  return (uint64_t)this + 552;
}

uint64_t WebKit::RemoteMediaPlayerProxy::allowedMediaAudioCodecIDs(WebKit::RemoteMediaPlayerProxy *this)
{
  return (uint64_t)this + 576;
}

uint64_t WebKit::RemoteMediaPlayerProxy::allowedMediaCaptionFormatTypes(WebKit::RemoteMediaPlayerProxy *this)
{
  return (uint64_t)this + 600;
}

double WebCore::MediaPlayerClient::documentSecurityOrigin@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void WebCore::MediaPlayerClient::audioOutputDeviceId(void *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::MediaPlayerClient::audioOutputDeviceIdOverride(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerQueueTaskOnEventLoop(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F40EB408](a2);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerPrefersSandboxedParsing(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((unsigned __int8 *)this + 731);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerShouldDisableHDR(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((unsigned __int8 *)this + 732);
}

float WebKit::RemoteMediaPlayerProxy::mediaPlayerVideoLayerSize(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((float *)this + 178);
}

uint64_t WebCore::MediaPlayerClient::isGStreamerHolePunchingEnabled(WebCore::MediaPlayerClient *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerClientIdentifier(WebCore::MediaPlayerClient *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerClient::canShowWhileLocked(WebCore::MediaPlayerClient *this)
{
  return 0;
}

uint64_t *std::unique_ptr<WebKit::RemoteCDMConfiguration>::reset[abi:sn180100](uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  unsigned int *result = 0;
  if (v2)
  {
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 16, a2);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, v3);
    JUMPOUT(0x199740C10);
  }
  return result;
}

uint64_t JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::create@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  uint64_t result = JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate(a1, a2, a3, a4, &v7);
  if (v7)
  {
    *a5 = v7;
  }
  else
  {
    uint64_t result = 72;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = *a1;
  if (!*a1) {
    goto LABEL_13;
  }
  if (*(unsigned char *)(v6 + 64) && (uint64_t v7 = *(void *)(v6 + 32)) != 0) {
    unint64_t v8 = *(void *)(v7 + 32);
  }
  else {
    unint64_t v8 = *(void *)(v6 + 48);
  }
  BOOL v9 = a4 == 0;
  if (a3 <= v8 - a2) {
    BOOL v9 = 1;
  }
  if (v8 < a2 || !v9)
  {
LABEL_13:
    uint64_t result = 0;
  }
  else
  {
    WTF::fastMalloc((WTF *)0x28);
    uint64_t result = JSC::ArrayBufferView::ArrayBufferView();
  }
  *a5 = result;
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    char v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5) {
          WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref((_DWORD *)(v5 + 16));
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 30))
  {
    uint64_t v5 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (v6)
    {
      uint64_t v7 = *(int **)a2;
      uint64_t v8 = 4 * v6;
      do
      {
        int v9 = *v7++;
        *v5++ = v9;
        v8 -= 4;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result = WTF::equal(*(WTF **)a1, *(const WTF::StringImpl **)a2, a3);
  if (result) {
    return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
  }
        && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
        && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  return result;
}

{
  uint64_t result;
  uint64_t vars8;

  uint64_t result = WTF::equal(*(WTF **)a1, *(const WTF::StringImpl **)a2, a3);
  if (result)
  {
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8) || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)) {
      return 0;
    }
    uint64_t result = WebCore::operator==((unsigned __int8 *)(a1 + 16), (unsigned __int8 *)(a2 + 16));
    if (!result) {
      return result;
    }
    if (*(double *)(a1 + 24) == *(double *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32))
    {
      uint64_t result = (*(unsigned char *)(a1 + 60) != 0) == (*(unsigned char *)(a2 + 60) != 0);
      if (*(unsigned char *)(a1 + 60) && *(unsigned char *)(a2 + 60))
      {
        return WebCore::operator==(a1 + 40, a2 + 40);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = WTF::equal(*(WTF **)a1, *(const WTF::StringImpl **)a2, a3);
  if (result)
  {
    uint64_t result = WebCore::operator==();
    if (result)
    {
      uint64_t result = WebCore::operator==();
      if (result) {
        return *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72);
      }
    }
  }
  return result;
}

BOOL WebCore::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = a2[1];
  if (a1[1]) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if ((a1[1] != 0) != (v2 != 0)) {
      return 0;
    }
  }
  else if (*a1 != *a2)
  {
    return 0;
  }
  int v4 = a2[3];
  if (a1[3]) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (a1[2] == a2[2]) {
      goto LABEL_17;
    }
    return 0;
  }
  if ((a1[3] != 0) != (v4 != 0)) {
    return 0;
  }
LABEL_17:
  if (a1[5] && a2[5])
  {
    if (a1[4] != a2[4]) {
      return 0;
    }
  }
  else if ((a1[5] != 0) != (a2[5] != 0))
  {
    return 0;
  }
  BOOL v6 = (a1[7] != 0) == (a2[7] != 0);
  if (a1[7] && a2[7]) {
    return a1[6] == a2[6];
  }
  return v6;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore31MediaPlaybackTargetContextCocoaENS8_30MediaPlaybackTargetContextMockEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4171F30](a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore31MediaPlaybackTargetContextCocoaENS8_30MediaPlaybackTargetContextMockEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 2);
  *((void *)a2 + 2) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    unsigned int v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebKit::DocumentEditingContext::TextRectAndRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        unsigned int v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 12) = v5;
      unsigned int v4 = v5;
    }
    if (v4)
    {
      memmove(*(void **)a1, *(const void **)a2, 32 * v4);
      unsigned int v4 = *(_DWORD *)(a1 + 12);
    }
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (v4 != v6)
    {
      uint64_t v7 = v4;
      uint64_t v8 = (_OWORD *)(*(void *)a1 + 32 * v4);
      int v9 = (long long *)(*(void *)a2 + 32 * v7);
      uint64_t v10 = 32 * v6 - 32 * v7;
      do
      {
        long long v11 = *v9;
        long long v12 = v9[1];
        v9 += 2;
        _OWORD *v8 = v11;
        v8[1] = v12;
        v8 += 2;
        v10 -= 32;
      }
      while (v10);
      unsigned int v4 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 12) = v4;
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 27))
  {
    unsigned int v5 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (v6)
    {
      uint64_t v7 = *(long long **)a2;
      uint64_t v8 = 32 * v6;
      do
      {
        long long v9 = *v7;
        long long v10 = v7[1];
        v7 += 2;
        *unsigned int v5 = v9;
        v5[1] = v10;
        v5 += 2;
        v8 -= 32;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore27VideoPlaybackQualityMetricsENS3_18PlatformMediaErrorELj0EE11whenSettledIZN6WebKit22RemoteMediaPlayerProxy24updateCachedVideoMetricsEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSO_EED1Ev(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C11C0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore27VideoPlaybackQualityMetricsENS3_18PlatformMediaErrorELj0EE11whenSettledIZN6WebKit22RemoteMediaPlayerProxy24updateCachedVideoMetricsEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSO_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C11C0;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore27VideoPlaybackQualityMetricsENS3_18PlatformMediaErrorELj0EE11whenSettledIZN6WebKit22RemoteMediaPlayerProxy24updateCachedVideoMetricsEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSO_EE4callESO_(IPC::Encoder *result, uint64_t a2)
{
  uint64_t v2 = *((void *)result + 1);
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v4 = *((void *)result + 2);
    if (*(_DWORD *)(a2 + 32))
    {
      if (*(unsigned char *)(v4 + 432)) {
        *(unsigned char *)(v4 + 432) = 0;
      }
    }
    else
    {
      unsigned int v5 = (_OWORD *)(v4 + 400);
      if (*(unsigned char *)(v4 + 432))
      {
        long long v6 = *(_OWORD *)a2;
        *(_OWORD *)(v4 + 412) = *(_OWORD *)(a2 + 12);
        *unsigned int v5 = v6;
      }
      else
      {
        long long v7 = *(_OWORD *)(a2 + 16);
        *unsigned int v5 = *(_OWORD *)a2;
        *(_OWORD *)(v4 + 416) = v7;
        *(unsigned char *)(v4 + 432) = 1;
      }
      if (*(_DWORD *)(a2 + 32))
      {
        uint64_t v14 = std::__throw_bad_variant_access[abi:sn180100]();
        return (IPC::Encoder *)WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::~ThenCallback(v14);
      }
      uint64_t v8 = *(void *)(v4 + 112);
      uint64_t v9 = *(void *)(v4 + 88);
      long long v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)long long v10 = 190;
      *((void *)v10 + 1) = v9;
      *((void *)v10 + 66) = (char *)v10 + 16;
      *((void *)v10 + 67) = 512;
      *((void *)v10 + 68) = 0;
      *((void *)v10 + 70) = 0;
      *((void *)v10 + 69) = 0;
      IPC::Encoder::encodeHeader(v10);
      long long v15 = v10;
      IPC::ArgumentCoder<WebCore::VideoPlaybackQualityMetrics,void>::encode(v10, a2);
      IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v15, 0, 0);
      uint64_t result = v15;
      long long v15 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v11);
        uint64_t result = (IPC::Encoder *)WTF::fastFree(v12, v13);
      }
    }
    *(unsigned char *)(v4 + 768) = 0;
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C11E8;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9C1218;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9C11E8;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9C1218;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v63[1] = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(a3 + 32);
  uint64_t v42 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)v42) {
    BOOL v7 = *(unsigned __int8 *)(v42 + 16) >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (v6) {
      uint64_t v8 = "Rejecting";
    }
    else {
      uint64_t v8 = "Resolving";
    }
    int v41 = (char *)v8;
    WTF::String::String((WTF::String *)&v51, v8);
    WTF::String::String((WTF::String *)&v50, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v49, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v48, "[");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v47, a2);
    WTF::String::String((WTF::String *)&v46, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v44, "]");
    uint64_t result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, (uint64_t *)&v45, (uint64_t *)&v44, &v52);
    if (!v52)
    {
      __break(0xC471u);
      return result;
    }
    long long v11 = v44;
    uint64_t v44 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    long long v12 = v45;
    uint64_t v45 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t v13 = v46;
    uint64_t v46 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v10);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v14 = v47;
    int v47 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v10);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    long long v15 = v48;
    uint64_t v48 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v10);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    char v16 = v49;
    uint64_t v49 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v10);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    char v17 = v50;
    int v50 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v10);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t v18 = v51;
    int v51 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v10);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    uint64_t v19 = *(NSObject **)(v42 + 32);
    uint64_t v20 = (WTF *)os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      WTF::String::utf8();
      uint64_t v22 = v43[0] ? (char *)v43[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&buf[4] = v22;
      _os_log_impl(&dword_1985F2000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v20 = v43[0];
      v43[0] = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1) {
          uint64_t v20 = (WTF *)WTF::fastFree(v20, v21);
        }
        else {
          --*(_DWORD *)v20;
        }
      }
    }
    if (*(unsigned char *)v42 && *(unsigned __int8 *)(v42 + 16) >= 4u)
    {
      uint64_t v23 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v24 = *v23;
        if (v24) {
          break;
        }
        int v25 = *v23;
        atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v25, v24 | 1, memory_order_acquire, memory_order_acquire);
        if (v25 == v24)
        {
          uint64_t v26 = WTF::Logger::observers(v20);
          uint64_t v27 = *(unsigned int *)(v26 + 12);
          if (v27)
          {
            uint64_t v28 = *(uint64_t **)v26;
            uint64_t v40 = *(void *)v26 + 8 * v27;
            do
            {
              uint64_t v29 = *v28;
              *(_DWORD *)long long buf = 0;
              WTF::String::String((WTF::String *)&buf[8], v41);
              LODWORD(v54) = 0;
              WTF::String::String((WTF::String *)&v55, " then() call made from ");
              int v56 = 0;
              WTF::Logger::LogSiteIdentifier::toString(&v57, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
              int v58 = 0;
              WTF::String::String((WTF::String *)v59, "[");
              v59[2] = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v60, a2);
              int v61 = 0;
              WTF::String::String((WTF::String *)v62, " callback:");
              v62[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v62[6] = 0;
              WTF::String::String((WTF::String *)v63, "]");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v43, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v29 + 16))(v29, v42, 4, v43);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v30);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                uint64_t v32 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v32)
                {
                  if (*(_DWORD *)v32 == 2) {
                    WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v21);
                  }
                  else {
                    *(_DWORD *)v32 -= 2;
                  }
                }
              }
              ++v28;
            }
            while (v28 != (uint64_t *)v40);
          }
          int v33 = 1;
          atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
          if (v33 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v34 = v52;
    unint64_t v52 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
  }
  char v35 = 0;
  int v36 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v35, 1u, memory_order_acquire, memory_order_acquire);
  if (v35) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  uint64_t v37 = *(uint64_t **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v36, 0, memory_order_release, memory_order_relaxed);
  if (v36 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), a3);
  if (v37)
  {
    *(_OWORD *)long long buf = 0uLL;
    unint64_t v54 = "<chained completion promise>";
    uint64_t v55 = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v37, (WTF::NativePromiseBase *)buf);
  }
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v37)
  {
    uint64_t v38 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v37);
    return WTF::fastFree((WTF *)v38, v39);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(unsigned char *)(result + 56) = 1;
  return result;
}

uint64_t *std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100](uint64_t **a1, uint64_t *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    uint64_t v4 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(result);
    return (uint64_t *)WTF::fastFree((WTF *)v4, v5);
  }
  return result;
}

uint64_t *WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<void,void,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t WTF::NativePromise<void,void,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  uint64_t v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 108);
  if (v4)
  {
    int v6 = *(uint64_t **)(v1 + 96);
    uint64_t v7 = 40 * v4;
    do
    {
      uint64_t result = *v6;
      if (*v6) {
        uint64_t result = WTF::NativePromise<void,void,0u>::assertIsDead();
      }
      v6 += 5;
      v7 -= 40;
    }
    while (v7);
  }
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

WTF::StringImpl *WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(uint64_t *a1, WTF::NativePromiseBase *a2)
{
  uint64_t isSettled = *a1;
  if (isSettled)
  {
    uint64_t isSettled = WTF::NativePromise<void,void,0u>::isSettled(isSettled);
    uint64_t v5 = *a1;
    if (!isSettled)
    {
      return WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(v5, a2);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
  if (*(unsigned char *)result) {
    BOOL v7 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)result, 4u, a2, " ignored already resolved or rejected ", v5);
  }
  return result;
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(void *a1, uint64_t a2)
{
  WTF::LogArgument<void const*>::toString();
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char,WTF::String,char>((uint64_t)"NativePromise", 14, (uint64_t *)&v8, 60, (uint64_t *)&v7, 62, a1);
  uint64_t v5 = v7;
  BOOL v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, void *a9@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v19 = *a2;
  uint64_t v20 = v9;
  uint64_t v18 = *a3;
  uint64_t v10 = *a4;
  uint64_t v16 = *a5;
  uint64_t v17 = v10;
  uint64_t v11 = *a6;
  uint64_t v14 = *a7;
  uint64_t v15 = v11;
  uint64_t v13 = *a8;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v20, &v19, &v18, &v17, &v16, &v15, &v14, &v13, a9);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, void *a9@<X8>)
{
  if (*a1) {
    int v18 = *(_DWORD *)(*a1 + 4);
  }
  else {
    int v18 = 0;
  }
  if (*a2) {
    uint64_t v19 = *(unsigned int *)(*a2 + 4);
  }
  else {
    uint64_t v19 = 0;
  }
  if (*a3) {
    int v20 = *(_DWORD *)(*a3 + 4);
  }
  else {
    int v20 = 0;
  }
  if (*a4) {
    int v21 = *(_DWORD *)(*a4 + 4);
  }
  else {
    int v21 = 0;
  }
  if (*a5) {
    int v22 = *(_DWORD *)(*a5 + 4);
  }
  else {
    int v22 = 0;
  }
  if (*a6) {
    int v23 = *(_DWORD *)(*a6 + 4);
  }
  else {
    int v23 = 0;
  }
  if (*a7) {
    int v24 = *(_DWORD *)(*a7 + 4);
  }
  else {
    int v24 = 0;
  }
  if (*a8) {
    int v25 = *(_DWORD *)(*a8 + 4);
  }
  else {
    int v25 = 0;
  }
  uint64_t result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(v19, v20, v21, v22, v23, v24, v25, (uint64_t)v30);
  if (v18 < 0 || v30[0] || (uint64_t result = (v18 + v31), __OFADD__(v18, v31)))
  {
    *a9 = 0;
  }
  else
  {
    uint64_t v27 = *a1;
    if (!*a1 || (*(unsigned char *)(v27 + 16) & 4) != 0)
    {
      uint64_t v29 = *a2;
      if ((!*a2 || (*(unsigned char *)(v29 + 16) & 4) != 0)
        && (!*a3 || (*(unsigned char *)(*a3 + 16) & 4) != 0)
        && (!*a4 || (*(unsigned char *)(*a4 + 16) & 4) != 0)
        && (!*a5 || (*(unsigned char *)(*a5 + 16) & 4) != 0)
        && (!*a6 || (*(unsigned char *)(*a6 + 16) & 4) != 0)
        && (!*a7 || (*(unsigned char *)(*a7 + 16) & 4) != 0))
      {
        if (*a8) {
          int v28 = (*(unsigned __int8 *)(*a8 + 16) >> 2) & 1;
        }
        else {
          int v28 = 1;
        }
      }
      else
      {
        int v28 = 0;
      }
    }
    else
    {
      int v28 = 0;
      uint64_t v29 = *a2;
    }
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v28, v27, (_DWORD *)v29, *a3, *a4, *a5, *a6, a9, *a7, *a8);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v17 = result;
  if (!a2)
  {
    if (result)
    {
      if (result <= 0x7FFFFFEF)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
        uint64_t v19 = v30;
        if (!v30) {
          goto LABEL_21;
        }
        uint64_t v28 = a5;
        *uint64_t v30 = 2;
        v19[1] = v17;
        *((void *)v19 + 1) = v19 + 5;
        v19[4] = 0;
        uint64_t v29 = a3;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v29, (char *)v19 + 20);
        uint64_t v24 = v29;
        int v20 = a9;
        if (v29) {
          uint64_t v24 = *(unsigned int *)(v29 + 4);
        }
        int v25 = (char *)v19 + 2 * v24 + 20;
        uint64_t v30 = a4;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v30, v25);
        unint64_t v26 = (unint64_t)v30;
        if (v30) {
          unint64_t v26 = v30[1];
        }
        uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v25[2 * v26], v28, a6, a7, a8, a10, a11);
        goto LABEL_10;
      }
LABEL_13:
      uint64_t v19 = 0;
      goto LABEL_21;
    }
LABEL_14:
    uint64_t v19 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_21;
  }
  if (!result) {
    goto LABEL_14;
  }
  if ((result & 0x80000000) != 0) {
    goto LABEL_13;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
  uint64_t v19 = v30;
  if (v30)
  {
    int v20 = a9;
    *uint64_t v30 = 2;
    v19[1] = v17;
    *((void *)v19 + 1) = v19 + 5;
    v19[4] = 4;
    uint64_t v29 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v29, (char *)v19 + 20);
    uint64_t v21 = v29;
    if (v29) {
      uint64_t v21 = *(unsigned int *)(v29 + 4);
    }
    int v22 = (char *)v19 + v21 + 20;
    uint64_t v30 = a4;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v30, v22);
    unint64_t v23 = (unint64_t)v30;
    if (v30) {
      unint64_t v23 = v30[1];
    }
    uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v22[v23], a5, a6, a7, a8, a10, a11);
LABEL_10:
    a9 = v20;
  }
LABEL_21:
  *a9 = v19;
  return result;
}

uint64_t *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v23 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v23, __dst);
  uint64_t v13 = v23;
  if (v23) {
    uint64_t v13 = *(unsigned int *)(v23 + 4);
  }
  uint64_t v14 = &__dst[v13];
  uint64_t v24 = a3;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v24, v14);
  uint64_t v15 = v24;
  if (v24) {
    uint64_t v15 = *(unsigned int *)(v24 + 4);
  }
  uint64_t v16 = &v14[v15];
  uint64_t v25 = a4;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v25, &v14[v15]);
  uint64_t v17 = v25;
  if (v25) {
    uint64_t v17 = *(unsigned int *)(v25 + 4);
  }
  int v18 = &v16[v17];
  uint64_t v26 = a5;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v26, &v16[v17]);
  uint64_t v19 = v26;
  if (v26) {
    uint64_t v19 = *(unsigned int *)(v26 + 4);
  }
  int v20 = &v18[v19];
  uint64_t v27 = a6;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v27, &v18[v19]);
  uint64_t v21 = v27;
  if (v27) {
    uint64_t v21 = *(unsigned int *)(v27 + 4);
  }
  uint64_t v28 = a7;
  return WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v28, &v20[v21]);
}

uint64_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v23 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v23, __dst);
  uint64_t v13 = v23;
  if (v23) {
    uint64_t v13 = *(unsigned int *)(v23 + 4);
  }
  uint64_t v14 = &__dst[2 * v13];
  uint64_t v24 = a3;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v24, v14);
  uint64_t v15 = v24;
  if (v24) {
    uint64_t v15 = *(unsigned int *)(v24 + 4);
  }
  uint64_t v16 = &v14[2 * v15];
  uint64_t v25 = a4;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v25, v16);
  uint64_t v17 = v25;
  if (v25) {
    uint64_t v17 = *(unsigned int *)(v25 + 4);
  }
  int v18 = &v16[2 * v17];
  uint64_t v26 = a5;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v26, v18);
  uint64_t v19 = v26;
  if (v26) {
    uint64_t v19 = *(unsigned int *)(v26 + 4);
  }
  int v20 = &v18[2 * v19];
  uint64_t v27 = a6;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v27, v20);
  uint64_t v21 = v27;
  if (v27) {
    uint64_t v21 = *(unsigned int *)(v27 + 4);
  }
  uint64_t v28 = a7;
  return WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v28, &v20[2 * v21]);
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String,char,WTF::String,char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, char a6@<W5>, void *a7@<X8>)
{
  v11[0] = a1;
  v11[1] = a2;
  char v10 = a4;
  char v9 = a6;
  uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,char,WTF::String,char>(v11, a3, &v10, a5, &v9, a7);
  if (!*a7) {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,char,WTF::String,char>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, char *a5@<X4>, void *a6@<X8>)
{
  uint64_t v6 = a1[1];
  BOOL v7 = v6 != 0;
  unint64_t v8 = v6 - 1;
  if (!v7) {
    unint64_t v8 = 0;
  }
  uint64_t v14 = *a1;
  if (v8 >> 31)
  {
    uint64_t result = 124;
    __break(0xC471u);
  }
  else
  {
    int v15 = v8;
    uint64_t v13 = *a2;
    char v12 = *a3;
    uint64_t v11 = *a4;
    char v10 = *a5;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v14, &v13, &v12, &v11, &v10, a6);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, char *a5@<X4>, void *a6@<X8>)
{
  uint64_t v7 = *a2;
  if (*a2) {
    int v8 = *(_DWORD *)(v7 + 4);
  }
  else {
    int v8 = 0;
  }
  int v9 = *(_DWORD *)(result + 8);
  uint64_t v10 = *a4;
  if (*a4)
  {
    int v11 = *(_DWORD *)(v10 + 4);
    if (v11 < 0)
    {
LABEL_24:
      *a6 = 0;
      return result;
    }
  }
  else
  {
    int v11 = 0;
  }
  BOOL v12 = __OFADD__(v11, 1);
  int v13 = v11 + 1;
  if (v12) {
    goto LABEL_24;
  }
  BOOL v12 = __OFADD__(v13, 1);
  int v14 = v13 + 1;
  BOOL v15 = v12;
  if (v8 < 0 || v15) {
    goto LABEL_24;
  }
  BOOL v12 = __OFADD__(v8, v14);
  int v16 = v8 + v14;
  BOOL v17 = v12;
  if (v9 < 0) {
    goto LABEL_24;
  }
  if (v17) {
    goto LABEL_24;
  }
  BOOL v12 = __OFADD__(v9, v16);
  uint64_t v18 = (v9 + v16);
  if (v12) {
    goto LABEL_24;
  }
  BOOL v19 = (!v7 || (*(unsigned char *)(v7 + 16) & 4) != 0) && (!v10 || (*(unsigned char *)(v10 + 16) & 4) != 0);
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v18, v19, *(_OWORD **)result, *(void *)(result + 8), v7, *a3, (_DWORD *)v10, *a5, a6);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, _DWORD *a7@<X6>, char a8@<W7>, void *a9@<X8>)
{
  int v15 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        BOOL v17 = v39;
        if (v39)
        {
          uint64_t v18 = v39 + 5;
          *int v39 = 2;
          v17[1] = v15;
          *((void *)v17 + 1) = v17 + 5;
          v17[4] = 4;
          if (a4)
          {
            if (a4 == 1) {
              *uint64_t v18 = *(unsigned char *)a3;
            }
            else {
              memcpy(v17 + 5, a3, a4);
            }
          }
          BOOL v19 = &v18[a4];
          uint64_t v38 = a5;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v38, v19);
          uint64_t v20 = v38;
          if (v38) {
            uint64_t v20 = *(unsigned int *)(v38 + 4);
          }
          v19[v20] = a6;
          uint64_t v21 = &v19[v20 + 1];
          int v39 = a7;
          uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v39, v21);
          unint64_t v22 = (unint64_t)v39;
          if (v39) {
            unint64_t v22 = v39[1];
          }
          v21[v22] = a8;
        }
        goto LABEL_29;
      }
LABEL_15:
      BOOL v17 = 0;
      goto LABEL_29;
    }
LABEL_16:
    BOOL v17 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_29;
  }
  if (!result) {
    goto LABEL_16;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_15;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  BOOL v17 = v39;
  if (v39)
  {
    uint64_t v23 = (char *)(v39 + 5);
    *int v39 = 2;
    v17[1] = v15;
    *((void *)v17 + 1) = v17 + 5;
    v17[4] = 0;
    uint64_t v24 = (uint64_t)v17 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      uint64_t v25 = &v23[2 * (a4 & 0xFFFFFFC0)];
      long long v26 = 0uLL;
      do
      {
        v40.val[0] = (int8x16_t)*a3;
        int8x16_t v27 = *((int8x16_t *)a3 + 1);
        v41.val[0] = (int8x16_t)a3[2];
        long long v28 = a3[3];
        a3 += 4;
        long long v29 = v28;
        v41.val[1] = 0uLL;
        v42.val[0] = v27;
        v40.val[1] = 0uLL;
        uint64_t v30 = v23;
        vst2q_s8(v30, v40);
        v30 += 32;
        v42.val[1] = 0uLL;
        vst2q_s8(v30, v42);
        int v31 = v23 + 64;
        vst2q_s8(v31, v41);
        uint64_t v32 = v23 + 96;
        vst2q_s8(v32, *(int8x16x2_t *)(&v26 - 1));
        v23 += 128;
      }
      while (v23 != v25);
      uint64_t v23 = v25;
    }
    while (v23 != (char *)v24)
    {
      __int16 v33 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)uint64_t v23 = v33;
      v23 += 2;
    }
    uint64_t v38 = a5;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v38, (char *)v17 + 2 * a4 + 20);
    uint64_t v34 = v38;
    if (v38) {
      uint64_t v34 = *(unsigned int *)(v38 + 4);
    }
    char v35 = (_WORD *)(v24 + 2 * v34);
    _WORD *v35 = a6;
    int v36 = (char *)(v35 + 1);
    int v39 = a7;
    uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v39, v36);
    unint64_t v37 = (unint64_t)v39;
    if (v39) {
      unint64_t v37 = v39[1];
    }
    *(_WORD *)&v36[2 * v37] = a8;
  }
LABEL_29:
  *a9 = v17;
  return result;
}

BOOL WTF::NativePromise<void,void,0u>::isSettled(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = (atomic_uchar *)(a1 + 48);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](a1 + 48);
  }
  int v5 = *(_DWORD *)(a1 + 64);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v5 != 0;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  v41[2] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v35, this);
  WTF::String::String((WTF::String *)&v34, a4);
  uint64_t v30 = a5;
  WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a5, &v33);
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v35, (uint64_t *)&v34, (uint64_t *)&v33, &v36);
  uint64_t v10 = v33;
  __int16 v33 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  int v11 = v34;
  uint64_t v34 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  BOOL v12 = v35;
  char v35 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v9);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(NSObject **)(a1 + 32);
  int v14 = (WTF *)os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if (v14)
  {
    WTF::String::utf8();
    int v16 = v32[0] ? (char *)v32[0] + 16 : 0;
    *(_DWORD *)long long buf = 136446210;
    uint64_t v38 = v16;
    _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    int v14 = v32[0];
    v32[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1) {
        int v14 = (WTF *)WTF::fastFree(v14, v15);
      }
      else {
        --*(_DWORD *)v14;
      }
    }
  }
  if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    BOOL v17 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v18 = *v17;
      if (v18) {
        break;
      }
      int v19 = *v17;
      atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v19, v18 | 1, memory_order_acquire, memory_order_acquire);
      if (v19 == v18)
      {
        uint64_t v20 = WTF::Logger::observers(v14);
        uint64_t v21 = *(unsigned int *)(v20 + 12);
        if (v21)
        {
          unint64_t v22 = *(uint64_t **)v20;
          uint64_t v23 = *(void *)v20 + 8 * v21;
          do
          {
            uint64_t v24 = *v22;
            *(_DWORD *)long long buf = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v38 + 4), this);
            int v39 = 0;
            WTF::String::String((WTF::String *)v40, a4);
            v40[2] = 0;
            WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(v30, v41);
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v32, (uint64_t)buf, 3uLL);
            (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v24 + 16))(v24, a1, a2, v32);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v32, v25);
            for (uint64_t i = 40; i != -8; i -= 16)
            {
              int8x16_t v27 = *(WTF::StringImpl **)&buf[i];
              *(void *)&buf[i] = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2) {
                  WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v15);
                }
                else {
                  *(_DWORD *)v27 -= 2;
                }
              }
            }
            ++v22;
          }
          while (v22 != (uint64_t *)v23);
        }
        int v28 = 1;
        atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
        if (v28 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  uint64_t result = v36;
  int v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v15);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  WTF::LogArgument<void const*>::toString();
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)(a1 + 16));
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char,WTF::String,char>((uint64_t)"GenericPromise", 15, (uint64_t *)&v8, 60, (uint64_t *)&v7, 62, a2);
  int v5 = v7;
  uint64_t v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v8;
  int v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIvvLj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvNS8_6detail15VoidPlaceholderEEENS8_8FunctionIFSI_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSC_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

unsigned __int8 *WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, atomic_uchar *volatile *a3)
{
  int v5 = a1;
  if (!*((void *)a1 + 2)
    || (int v6 = atomic_load((unsigned __int8 *)(a2 + 113)), v6 == 1)
    && (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(void))(**((void **)a1 + 2) + 24))(*((void *)a1 + 2)),
        a1))
  {
    if (*((unsigned char *)v5 + 56))
    {
      BOOL v17 = (unsigned __int8 *)v5;
      uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
      if (*result) {
        BOOL v10 = result[16] >= 4u;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10) {
        return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,void,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)&v17, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
      }
    }
    else
    {
      atomic_uchar *volatile v11 = *a3;
      int v12 = 1;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
      }
      if (WTF::NativePromise<void,void,0u>::hasRunnable(a2))
      {
        WTF::NativePromise<void,void,0u>::takeResultRunnable(a2, &v17);
        (*(void (**)(unsigned char *__return_ptr))(*(void *)v17 + 16))(v16);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned char *))(*(void *)v5 + 24))(v5, a2, v16);
        int v13 = v17;
        BOOL v17 = 0;
        if (v13) {
          (*(void (**)(unsigned __int8 *))(*(void *)v13 + 8))(v13);
        }
      }
      else
      {
        WTF::NativePromise<void,void,0u>::takeResult(a2, &v17, v15);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(void *)v5 + 24))(v5, a2, &v17);
      }
      char v14 = 0;
      uint64_t result = (unsigned __int8 *)*a3;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
      if (v14) {
        return (unsigned __int8 *)MEMORY[0x19972E8D0]();
      }
    }
  }
  else
  {
    uint64_t v7 = *((void *)v5 + 2);
    atomic_fetch_add((atomic_uint *volatile)v5 + 2, 1u);
    atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
    int v8 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
    *(void *)int v8 = &unk_1EE9C1630;
    *((void *)v8 + 1) = v5;
    *((void *)v8 + 2) = v5;
    *((void *)v8 + 3) = a2;
    BOOL v17 = v8;
    (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)v7 + 16))(v7, &v17);
    uint64_t result = v17;
    BOOL v17 = 0;
    if (result) {
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t *WTF::NativePromise<void,void,0u>::settleChainedPromise(uint64_t a1, uint64_t a2)
{
  char v2 = *(atomic_uint **)a2;
  *(void *)a2 = 0;
  int v9 = v2;
  long long v3 = *(_OWORD *)(a2 + 24);
  long long v10 = *(_OWORD *)(a2 + 8);
  long long v11 = v3;
  if (v2)
  {
    atomic_fetch_add(v2 + 2, 1u);
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = "<chained promise>";
    uint64_t v8 = 0;
    WTF::NativePromise<void,void,0u>::settleAsChainedPromise<WTF::NativePromise<void,void,0u>::Storage>((uint64_t)v2, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v5);
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2 + 2);
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = "<chained promise>";
    uint64_t v8 = 0;
    WTF::NativePromise<void,void,0u>::settleAsChainedPromise<WTF::NativePromise<void,void,0u>::Storage>(0, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v5);
  }
  return WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer((uint64_t *)&v9);
}

unsigned int *WTF::VectorDestructor<true,WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>>::destruct(unsigned int *result, unsigned int **a2)
{
  if (result != (unsigned int *)a2)
  {
    long long v3 = (unsigned int **)result;
    do
    {
      uint64_t result = *v3;
      atomic_uchar *v3 = 0;
      if (result)
      {
        if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result + 2);
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

BOOL WTF::NativePromise<void,void,0u>::hasRunnable(uint64_t a1)
{
  char v2 = 0;
  long long v3 = (atomic_uchar *)(a1 + 48);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](a1 + 48);
  }
  int v5 = *(_DWORD *)(a1 + 64);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v5 == 2;
}

uint64_t WTF::NativePromise<void,void,0u>::takeResultRunnable@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  if (*(_DWORD *)(v2 + 64) == 2)
  {
    uint64_t v6 = *(void *)(v2 + 56);
    *(void *)(v2 + 56) = 0;
    *a2 = v6;
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<void,void,0u>::takeResult(v8);
  }
  return result;
}

uint64_t WTF::NativePromise<void,void,0u>::takeResult@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>, uint64_t a3)
{
  uint64_t v3 = result;
  char v5 = 0;
  uint64_t v6 = (WTF::Lock *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  if (*(_DWORD *)(v3 + 64) == 1)
  {
    *a2 = *(_WORD *)(v3 + 56);
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow(v6);
    }
  }
  else
  {
    int v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Logger::log<char [32],WTF::NativePromise<void,void,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(v8, v9, v10, v11, v12, v13, v14, v15, a3);
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<void,void,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4, const char *a5, int a6, const char *a7, WTF::Logger::LogSiteIdentifier *a8, const char *a9)
{
  v64[1] = *MEMORY[0x1E4F143B8];
  WTF::String::String((WTF::String *)&v49, a3);
  WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a4, &v48);
  WTF::String::String((WTF::String *)&v47, a5);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v45, a7);
  int v39 = a8;
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v44, a8);
  WTF::String::String((WTF::String *)&v43, a9);
  v42[0] = v48;
  uint64_t v55 = v47;
  *(void *)long long buf = v49;
  unint64_t v53 = v45;
  unint64_t v54 = v46;
  int v51 = v43;
  unint64_t v52 = v44;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, (uint64_t *)v42, (uint64_t *)&v55, (uint64_t *)&v54, (uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, &v50);
  if (v50)
  {
    int v15 = v43;
    uint64_t v43 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    int v16 = v44;
    uint64_t v44 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v14);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    BOOL v17 = v45;
    uint64_t v45 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v14);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    int v18 = v46;
    uint64_t v46 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v14);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    int v19 = v47;
    int v47 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v14);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    uint64_t v20 = v48;
    uint64_t v48 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v14);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    uint64_t v21 = v49;
    uint64_t v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v14);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    unint64_t v22 = *(NSObject **)(a1 + 32);
    uint64_t v23 = (WTF *)os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    if (v23)
    {
      WTF::String::utf8();
      uint64_t v25 = v42[0] ? (char *)v42[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v23 = v42[0];
      v42[0] = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1) {
          uint64_t v23 = (WTF *)WTF::fastFree(v23, v24);
        }
        else {
          --*(_DWORD *)v23;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      long long v26 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v27 = *v26;
        if (v27) {
          break;
        }
        int v28 = *v26;
        atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v28, v27 | 1, memory_order_acquire, memory_order_acquire);
        if (v28 == v27)
        {
          uint64_t v29 = WTF::Logger::observers(v23);
          uint64_t v30 = *(unsigned int *)(v29 + 12);
          if (v30)
          {
            int v31 = *(uint64_t **)v29;
            uint64_t v37 = *(void *)v29 + 8 * v30;
            do
            {
              uint64_t v32 = *v31;
              *(_DWORD *)long long buf = 0;
              WTF::String::String((WTF::String *)&buf[8], a3);
              int v57 = 0;
              WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a4, &v58);
              int v59 = 0;
              WTF::String::String((WTF::String *)v60, a5);
              v60[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v60[6] = 0;
              WTF::String::String((WTF::String *)v61, a7);
              v61[2] = 0;
              WTF::Logger::LogSiteIdentifier::toString(&v62, v39);
              int v63 = 0;
              WTF::String::String((WTF::String *)v64, a9);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v42, (uint64_t)buf, 7uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v32 + 16))(v32, a1, a2, v42);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v33);
              for (uint64_t i = 104; i != -8; i -= 16)
              {
                char v35 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2) {
                    WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v24);
                  }
                  else {
                    *(_DWORD *)v35 -= 2;
                  }
                }
              }
              ++v31;
            }
            while (v31 != (uint64_t *)v37);
          }
          int v36 = 1;
          atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v36, 0, memory_order_release, memory_order_relaxed);
          if (v36 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v50;
    int v50 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v24);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, void *a8@<X8>)
{
  if (*a1) {
    uint64_t v16 = *(unsigned int *)(*a1 + 4);
  }
  else {
    uint64_t v16 = 0;
  }
  if (*a2) {
    int v17 = *(_DWORD *)(*a2 + 4);
  }
  else {
    int v17 = 0;
  }
  if (*a3) {
    int v18 = *(_DWORD *)(*a3 + 4);
  }
  else {
    int v18 = 0;
  }
  if (*a4) {
    int v19 = *(_DWORD *)(*a4 + 4);
  }
  else {
    int v19 = 0;
  }
  if (*a5) {
    int v20 = *(_DWORD *)(*a5 + 4);
  }
  else {
    int v20 = 0;
  }
  if (*a6) {
    int v21 = *(_DWORD *)(*a6 + 4);
  }
  else {
    int v21 = 0;
  }
  if (*a7) {
    int v22 = *(_DWORD *)(*a7 + 4);
  }
  else {
    int v22 = 0;
  }
  uint64_t result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(v16, v17, v18, v19, v20, v21, v22, (uint64_t)v27);
  if (v27[0])
  {
    *a8 = 0;
  }
  else
  {
    uint64_t v24 = *a1;
    if (!*a1 || (*(unsigned char *)(v24 + 16) & 4) != 0)
    {
      uint64_t v26 = *a2;
      if ((!*a2 || (*(unsigned char *)(v26 + 16) & 4) != 0)
        && (!*a3 || (*(unsigned char *)(*a3 + 16) & 4) != 0)
        && (!*a4 || (*(unsigned char *)(*a4 + 16) & 4) != 0)
        && (!*a5 || (*(unsigned char *)(*a5 + 16) & 4) != 0)
        && (!*a6 || (*(unsigned char *)(*a6 + 16) & 4) != 0))
      {
        if (*a7) {
          int v25 = (*(unsigned __int8 *)(*a7 + 16) >> 2) & 1;
        }
        else {
          int v25 = 1;
        }
      }
      else
      {
        int v25 = 0;
      }
    }
    else
    {
      int v25 = 0;
      uint64_t v26 = *a2;
    }
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v28, v25, (_DWORD *)v24, v26, *a3, *a4, *a5, *a6, a8, *a7);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  int v16 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        int v18 = v22;
        if (v22)
        {
          _DWORD *v22 = 2;
          v18[1] = v16;
          *((void *)v18 + 1) = v18 + 5;
          v18[4] = 4;
          int v22 = a3;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v22, (char *)v18 + 20);
          unint64_t v19 = (unint64_t)v22;
          if (v22) {
            unint64_t v19 = v22[1];
          }
          uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)v18 + v19 + 20, a4, a5, a6, a7, a8, a10);
        }
        goto LABEL_16;
      }
LABEL_10:
      int v18 = 0;
      goto LABEL_16;
    }
LABEL_11:
    int v18 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_16;
  }
  if (!result) {
    goto LABEL_11;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_10;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  int v18 = v22;
  if (v22)
  {
    _DWORD *v22 = 2;
    v18[1] = v16;
    *((void *)v18 + 1) = v18 + 5;
    v18[4] = 0;
    int v22 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v22, (char *)v18 + 20);
    unint64_t v20 = (unint64_t)v22;
    if (v22) {
      unint64_t v20 = v22[1];
    }
    uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)v18 + 2 * v20 + 20, a4, a5, a6, a7, a8, a10);
  }
LABEL_16:
  *a9 = v18;
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,void,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C1630;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,void,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C1630;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  char v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,void,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,void,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

unsigned __int8 *WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,void,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[2];
  if (*(unsigned char *)(*a1 + 56))
  {
    long long v10 = (unsigned __int8 *)*a1;
    uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
    if (*result) {
      BOOL v4 = result[16] >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,void,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)&v10, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<void,void,0u>::hasRunnable(a1[2]);
    uint64_t v7 = a1[2];
    if (hasRunnable)
    {
      WTF::NativePromise<void,void,0u>::takeResultRunnable(a1[2], &v10);
      (*(void (**)(unsigned char *__return_ptr))(*(void *)v10 + 16))(v9);
      (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v1 + 24))(v1, v7, v9);
      uint64_t result = v10;
      long long v10 = 0;
      if (result) {
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
      }
    }
    else
    {
      WTF::NativePromise<void,void,0u>::takeResult(a1[2], &v10, v8);
      return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 **))(*(void *)v1 + 24))(v1, v7, &v10);
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<void,void,0u>::settleAsChainedPromise<WTF::NativePromise<void,void,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  int v12 = v7;
  char v13 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  uint64_t v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", a1);
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,void,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<void,void,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>,(std::__variant_detail::_Trait)1>>(a1 + 56, a2);
  uint64_t result = (WTF::Lock *)WTF::NativePromise<void,void,0u>::dispatchAll(a1, &v12);
  if (v13)
  {
    uint64_t result = v12;
    int v11 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
    if (v11 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,void,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<void,void,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9C1238[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1EE9C1250[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvvLj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvNS8_6detail15VoidPlaceholderEEENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSC_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 8);
  if (v2)
  {
    if (v2 != -1) {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9C1238[v2])(&v3, v1);
    }
    *(_DWORD *)(v1 + 8) = 0;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvvLj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvNS8_6detail15VoidPlaceholderEEENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSC_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,void,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>>(*a1, a2, a3);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvvLj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvNS8_6detail15VoidPlaceholderEEENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSC_SI_SL_EEEOS10_EEEDcSS_DpT0_(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,void,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>(*a1, a2, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,void,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 == 1)
  {
    int v7 = *(unsigned __int8 *)(a2 + 1);
    uint64_t v5 = (char *)(a2 + 1);
    int v6 = v7;
    if ((*(unsigned char *)(a3 + 1) != 0) == (v7 != 0)) {
      return result;
    }
    if (*(unsigned char *)(a3 + 1))
    {
      *uint64_t v5 = 1;
      uint64_t v5 = &v9;
    }
    else if (!v6)
    {
      return result;
    }
    *uint64_t v5 = 0;
  }
  else
  {
    uint64_t v8 = result;
    if (v4 != -1) {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9C1238[v4])(&v10, result);
    }
    *(_DWORD *)(v8 + 8) = -1;
    *(_WORD *)uint64_t v8 = *(_WORD *)a3;
    *(_DWORD *)(v8 + 8) = 1;
  }
  return result;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,void,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = result[2];
  if (v4 == 2)
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    uint64_t result = *a2;
    *a2 = v5;
    if (result)
    {
      int v6 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v6();
    }
  }
  else
  {
    int v7 = result;
    if (v4 != -1) {
      uint64_t result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1EE9C1238[v4])(&v9, result);
    }
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)int v7 = v8;
    v7[2] = 2;
  }
  return result;
}

uint64_t WebCore::PlatformMediaResource::didPassAccessControlCheck(WebCore::PlatformMediaResource *this)
{
  return 0;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::RemoteMediaResourceLoader::defaultQueue(void)::{lambda(void)#1} &&>>()
{
  uint64_t result = WTF::WorkQueue::create();
  WebKit::RemoteMediaResourceLoader::defaultQueue(void)::messageQueue = v1;
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>,void,std::optional<WebCore::CDMKeySystemConfiguration>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C12A8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>,void,std::optional<WebCore::CDMKeySystemConfiguration>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C12A8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>,void,std::optional<WebCore::CDMKeySystemConfiguration>>::call(uint64_t a1, uint64_t a2)
{
  LOBYTE(v11) = 0;
  char v20 = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    std::construct_at[abi:sn180100]<WebCore::CDMKeySystemConfiguration,WebCore::CDMKeySystemConfiguration,WebCore::CDMKeySystemConfiguration*>((uint64_t)&v11, (uint64_t *)a2);
    char v20 = 1;
    uint64_t v31 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    long long v3 = v11;
    long long v11 = 0uLL;
    long long v21 = v3;
    *(void *)&long long v3 = v12;
    uint64_t v12 = 0;
    uint64_t v22 = v3;
    uint64_t v4 = v13;
    uint64_t v13 = 0;
    uint64_t v23 = v4;
    *(void *)&long long v3 = v14;
    uint64_t v14 = 0;
    uint64_t v24 = v3;
    uint64_t v5 = v15;
    uint64_t v15 = 0;
    uint64_t v25 = v5;
    *(void *)&long long v3 = v16;
    uint64_t v16 = 0;
    uint64_t v26 = v3;
    __int16 v27 = v17;
    uint64_t v6 = v18;
    uint64_t v18 = 0;
    uint64_t v28 = v6;
    *(void *)&long long v3 = v19;
    uint64_t v19 = 0;
    uint64_t v29 = v3;
    char v30 = 1;
  }
  else
  {
    uint64_t v31 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    LOBYTE(v21) = 0;
    char v30 = 0;
  }
  WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>::operator()(&v31, (uint64_t)&v21);
  std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v7);
  uint64_t v9 = v31;
  uint64_t v31 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v11, v8);
}

uint64_t WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  v5[0] = 0;
  char v6 = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    std::construct_at[abi:sn180100]<WebCore::CDMKeySystemConfiguration,WebCore::CDMKeySystemConfiguration,WebCore::CDMKeySystemConfiguration*>((uint64_t)v5, (uint64_t *)a2);
    char v6 = 1;
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, v5);
  return std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::CDMKeySystemConfiguration,WebCore::CDMKeySystemConfiguration,WebCore::CDMKeySystemConfiguration*>(uint64_t result, uint64_t *a2)
{
  if (result)
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = v2;
    uint64_t v3 = a2[1];
    a2[1] = 0;
    *(void *)(result + 8) = v3;
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(result + 16) = v3;
    LODWORD(v3) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = 0;
    *(_DWORD *)(result + 20) = v3;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    uint64_t v4 = a2[3];
    a2[3] = 0;
    *(void *)(result + 24) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = 0;
    *(_DWORD *)(result + 32) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = 0;
    *(_DWORD *)(result + 36) = v4;
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = 0;
    uint64_t v5 = a2[5];
    a2[5] = 0;
    *(void *)(result + 40) = v5;
    LODWORD(v5) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = 0;
    *(_DWORD *)(result + 48) = v5;
    LODWORD(v5) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = 0;
    *(_DWORD *)(result + 52) = v5;
    *(_WORD *)(result + 56) = *((_WORD *)a2 + 28);
    *(void *)(result + 64) = 0;
    *(void *)(result + 72) = 0;
    uint64_t v6 = a2[8];
    a2[8] = 0;
    *(void *)(result + 64) = v6;
    LODWORD(v6) = *((_DWORD *)a2 + 18);
    *((_DWORD *)a2 + 18) = 0;
    *(_DWORD *)(result + 72) = v6;
    LODWORD(v6) = *((_DWORD *)a2 + 19);
    *((_DWORD *)a2 + 19) = 0;
    *(_DWORD *)(result + 76) = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLegacyCDMSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      char v10 = (uint64_t *)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          uint64_t v23 = (uint64_t *)(v14 + 16 * v21);
          uint64_t v24 = v23[1];
          v23[1] = 0;
          if (v24) {
            (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
          }
          *uint64_t v23 = *v10;
          uint64_t v25 = v4 + 16 * v9;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          v23[1] = v26;
          uint64_t v13 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (!v13) {
            goto LABEL_19;
          }
LABEL_18:
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
          goto LABEL_19;
        }
        uint64_t v12 = v4 + 16 * v9;
        uint64_t v13 = *(void *)(v12 + 8);
        *(void *)(v12 + 8) = 0;
        if (v13) {
          goto LABEL_18;
        }
      }
LABEL_19:
      if (++v9 == v5) {
        goto LABEL_22;
      }
    }
  }
  if (v4)
  {
LABEL_22:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteMediaEngineConfigurationFactoryProxy::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::CompletionHandler<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0,void,WebCore::MediaCapabilitiesDecodingInfo>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C12D0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaEngineConfigurationFactoryProxy::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::CompletionHandler<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0,void,WebCore::MediaCapabilitiesDecodingInfo>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C12D0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::RemoteMediaEngineConfigurationFactoryProxy::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::CompletionHandler<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0,void,WebCore::MediaCapabilitiesDecodingInfo>::call(uint64_t a1, __int16 *a2)
{
  __int16 v12 = *a2;
  char v13 = *((unsigned char *)a2 + 2);
  LOBYTE(v14) = 0;
  char v17 = 0;
  if (*((unsigned char *)a2 + 48))
  {
    uint64_t v2 = (WTF::StringImpl *)*((void *)a2 + 1);
    *((void *)a2 + 1) = 0;
    uint64_t v14 = v2;
    long long v3 = *((_OWORD *)a2 + 2);
    long long v15 = *((_OWORD *)a2 + 1);
    long long v16 = v3;
    char v17 = 1;
  }
  LOBYTE(v18) = 0;
  char v20 = 0;
  if (*((unsigned char *)a2 + 104))
  {
    long long v4 = *(_OWORD *)(a2 + 28);
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    long long v5 = *(_OWORD *)(a2 + 36);
    long long v18 = v4;
    v19[0] = v5;
    *(_OWORD *)((char *)v19 + 10) = *(_OWORD *)(a2 + 41);
    char v20 = 1;
  }
  LOBYTE(v21[0]) = 0;
  char v22 = 0;
  if (*((unsigned char *)a2 + 128))
  {
    v21[0] = *((void *)a2 + 14);
    uint64_t v6 = *((void *)a2 + 15);
    *((void *)a2 + 14) = 0;
    *((void *)a2 + 15) = 0;
    v21[1] = v6;
    char v22 = 1;
  }
  LOBYTE(v23[0]) = 0;
  char v24 = 0;
  if (*((unsigned char *)a2 + 152))
  {
    v23[0] = *((void *)a2 + 17);
    uint64_t v7 = *((void *)a2 + 18);
    *((void *)a2 + 17) = 0;
    *((void *)a2 + 18) = 0;
    v23[1] = v7;
    char v24 = 1;
  }
  __int16 v25 = a2[80];
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, __int16 *))(*(void *)v8 + 16))(v8, &v12);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  if (v24) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v9);
  }
  if (v22) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v9);
  }
  uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, (WTF::StringImpl *)v9);
  if (v17)
  {
    uint64_t result = v14;
    uint64_t v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteMediaEngineConfigurationFactoryProxy::createEncodingConfiguration(WebCore::MediaEncodingConfiguration &&,WTF::CompletionHandler<void ()(WebCore::MediaCapabilitiesEncodingInfo &&)> &&)::$_0,void,WebCore::MediaCapabilitiesEncodingInfo>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C12F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaEngineConfigurationFactoryProxy::createEncodingConfiguration(WebCore::MediaEncodingConfiguration &&,WTF::CompletionHandler<void ()(WebCore::MediaCapabilitiesEncodingInfo &&)> &&)::$_0,void,WebCore::MediaCapabilitiesEncodingInfo>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C12F8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::RemoteMediaEngineConfigurationFactoryProxy::createEncodingConfiguration(WebCore::MediaEncodingConfiguration &&,WTF::CompletionHandler<void ()(WebCore::MediaCapabilitiesEncodingInfo &&)> &&)::$_0,void,WebCore::MediaCapabilitiesEncodingInfo>::call(uint64_t a1, __int16 *a2)
{
  __int16 v12 = *a2;
  char v13 = *((unsigned char *)a2 + 2);
  LOBYTE(v14) = 0;
  char v17 = 0;
  if (*((unsigned char *)a2 + 48))
  {
    uint64_t v2 = (WTF::StringImpl *)*((void *)a2 + 1);
    *((void *)a2 + 1) = 0;
    uint64_t v14 = v2;
    long long v3 = *((_OWORD *)a2 + 2);
    long long v15 = *((_OWORD *)a2 + 1);
    long long v16 = v3;
    char v17 = 1;
  }
  LOBYTE(v18) = 0;
  char v20 = 0;
  if (*((unsigned char *)a2 + 104))
  {
    long long v4 = *(_OWORD *)(a2 + 28);
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    long long v5 = *(_OWORD *)(a2 + 36);
    long long v18 = v4;
    v19[0] = v5;
    *(_OWORD *)((char *)v19 + 10) = *(_OWORD *)(a2 + 41);
    char v20 = 1;
  }
  LOBYTE(v21[0]) = 0;
  char v22 = 0;
  if (*((unsigned char *)a2 + 128))
  {
    v21[0] = *((void *)a2 + 14);
    uint64_t v6 = *((void *)a2 + 15);
    *((void *)a2 + 14) = 0;
    *((void *)a2 + 15) = 0;
    v21[1] = v6;
    char v22 = 1;
  }
  LOBYTE(v23[0]) = 0;
  char v24 = 0;
  if (*((unsigned char *)a2 + 152))
  {
    v23[0] = *((void *)a2 + 17);
    uint64_t v7 = *((void *)a2 + 18);
    *((void *)a2 + 17) = 0;
    *((void *)a2 + 18) = 0;
    v23[1] = v7;
    char v24 = 1;
  }
  char v25 = *((unsigned char *)a2 + 160);
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, __int16 *))(*(void *)v8 + 16))(v8, &v12);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  if (v24) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v9);
  }
  if (v22) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v9);
  }
  uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, (WTF::StringImpl *)v9);
  if (v17)
  {
    uint64_t result = v14;
    uint64_t v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v4, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    __int16 v12 = 0;
    do
    {
      char v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          uint64_t v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = v26[1];
          v26[1] = 0;
          if (v27) {
            WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref((_DWORD *)(v27 + 16));
          }
          *uint64_t v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30) {
            WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref((_DWORD *)(v30 + 16));
          }
          if (v13 == a3) {
            __int16 v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(void *)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16) {
            WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref((_DWORD *)(v16 + 16));
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    __int16 v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *result;
  if (*result) {
    unsigned int v4 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  }
  else {
    unsigned int v4 = 0;
  }
  if (v4 == a2)
  {
    *a3 = 0;
    return result;
  }
  uint64_t v5 = a2[1];
  if (v5)
  {
    a2[1] = 0;
    uint64_t v3 = *result;
  }
  *a3 = v5;
  if (v3)
  {
    uint64_t v6 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v6 == a2) {
      return result;
    }
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if (v6 != a2) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(result, a2);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3) {
    uint64_t result = (uint64_t *)WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref((_DWORD *)(v3 + 16));
  }
  ++*(_DWORD *)(*v2 - 16);
  uint64_t v4 = *v2;
  if (*v2) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *v2;
  if (*v2)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v2, v8 >> 1, 0);
    }
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::RemoteAudioTrackProxy,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = result;
    atomic_store(1u, result);
    uint64_t v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v2 = &unk_1EE9C1320;
    *((void *)v2 + 1) = v1;
    uint64_t v3 = v2;
    WTF::ensureOnMainThread();
    uint64_t result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::RemoteAudioTrackProxy,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WebKit::RemoteAudioTrackProxy::~RemoteAudioTrackProxy((WebKit::RemoteAudioTrackProxy *)(*(void *)(a1 + 8) - 16));

  return WTF::fastFree(v1, v2);
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::RemoteTextTrackProxy,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = result;
    atomic_store(1u, result);
    uint64_t v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v2 = &unk_1EE9C1348;
    *((void *)v2 + 1) = v1;
    uint64_t v3 = v2;
    WTF::ensureOnMainThread();
    uint64_t result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::RemoteTextTrackProxy,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WebKit::RemoteTextTrackProxy::~RemoteTextTrackProxy((WebKit::RemoteTextTrackProxy *)(*(void *)(a1 + 8) - 16));

  return WTF::fastFree(v1, v2);
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::RemoteVideoTrackProxy,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = result;
    atomic_store(1u, result);
    uint64_t v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v2 = &unk_1EE9C1370;
    *((void *)v2 + 1) = v1;
    uint64_t v3 = v2;
    WTF::ensureOnMainThread();
    uint64_t result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::RemoteVideoTrackProxy,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WebKit::RemoteAudioTrackProxy::~RemoteAudioTrackProxy((WebKit::RemoteAudioTrackProxy *)(*(void *)(a1 + 8) - 16));

  return WTF::fastFree(v1, v2);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::RemoteMediaPlayerProxy::*&)(void),WebKit::RemoteMediaPlayerProxy*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivateClient,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7) {
    this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

uint64_t std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::ContentType const*,WebCore::ContentType const*,WebCore::ContentType*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    WTF::String::operator=((uint64_t *)a3, (WTF::StringImpl **)v4);
    *(unsigned char *)(a3 + 8) = *(unsigned char *)(v4 + 8);
    a3 += 16;
    v4 += 16;
  }
  while (v4 != v5);
  return v5;
}

WTF::Lock *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(uint64_t a1, char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  uint64_t v14 = v7;
  char v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  BOOL v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " rejecting ", a1);
  }
  char v10 = *a2;
  uint64_t v11 = *(unsigned int *)(a1 + 64);
  if (v11 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9C13B0[v11])(&v16, a1 + 56);
  }
  *(unsigned char *)(a1 + 56) = v10;
  int v12 = 1;
  *(unsigned char *)(a1 + 57) = 1;
  *(_DWORD *)(a1 + 64) = 1;
  uint64_t result = (WTF::Lock *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::dispatchAll((void *)a1, (atomic_uchar *volatile *)&v14);
  if (v15)
  {
    uint64_t result = v14;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::NativePromise(uint64_t a1, _OWORD *a2)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9C15E0;
  long long v3 = a2[1];
  *(_OWORD *)(a1 + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a1 + 88;
  *(void *)(a1 + 80) = 1;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 112) = 0;
  uint64_t v4 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v4 && v4[16] >= 4u) {
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v4, 4u, "creating ", a1);
  }
  return a1;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  long long v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 108);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(v1 + 96);
    uint64_t v6 = 40 * v4;
    do
    {
      uint64_t result = *v5;
      if (*v5) {
        uint64_t result = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead();
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::~NativePromise(unsigned int *a1)
{
  uint64_t v1 = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::~NativePromise(a1);

  return WTF::fastFree((WTF *)v1, v2);
}

WTF::StringImpl *WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  WTF::String::String((WTF::String *)&v30, a3);
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, &v29);
  *(void *)long long buf = v30;
  v28[0] = v29;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
  if (v31)
  {
    BOOL v9 = v29;
    uint64_t v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    char v10 = v30;
    uint64_t v30 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    uint64_t v11 = *(NSObject **)(a1 + 32);
    int v12 = (WTF *)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      WTF::String::utf8();
      uint64_t v14 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      int v12 = v28[0];
      v28[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1) {
          int v12 = (WTF *)WTF::fastFree(v12, v13);
        }
        else {
          --*(_DWORD *)v12;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      char v15 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v16 = *v15;
        if (v16) {
          break;
        }
        int v17 = *v15;
        atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v17, v16 | 1, memory_order_acquire, memory_order_acquire);
        if (v17 == v16)
        {
          uint64_t v18 = WTF::Logger::observers(v12);
          uint64_t v19 = *(unsigned int *)(v18 + 12);
          if (v19)
          {
            unint64_t v20 = *(uint64_t **)v18;
            uint64_t v21 = *(void *)v18 + 8 * v19;
            do
            {
              uint64_t v22 = *v20;
              *(_DWORD *)long long buf = 0;
              WTF::String::String((WTF::String *)&buf[8], a3);
              int v33 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, v34);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v22 + 16))(v22, a1, a2, v28);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v23);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v25 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v25)
                {
                  if (*(_DWORD *)v25 == 2) {
                    WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v13);
                  }
                  else {
                    *(_DWORD *)v25 -= 2;
                  }
                }
              }
              ++v20;
            }
            while (v20 != (uint64_t *)v21);
          }
          int v26 = 1;
          atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
          if (v26 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v31;
    uint64_t v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  WTF::LogArgument<void const*>::toString();
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)(a1 + 16));
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char,WTF::String,char>((uint64_t)"NativePromise", 14, (uint64_t *)&v8, 60, (uint64_t *)&v7, 62, a2);
  uint64_t v5 = v7;
  int v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::~NativePromise(unsigned int *a1)
{
  char v2 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2) {
    BOOL v3 = v2[16] >= 4u;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v2, 4u, "destroying ", (uint64_t)a1);
  }
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), v4);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 18), v5);
  uint64_t v6 = a1[16];
  if (v6 != -1) {
    ((void (*)(char *, unsigned int *))off_1EE9C13B0[v6])(&v8, a1 + 14);
  }
  a1[16] = -1;
  return a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      uint64_t v4 = WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t *WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>>::destruct(*(unsigned int **)a1, (unsigned int **)(*(void *)a1 + 8 * v3));
  }
  uint64_t v4 = *(unsigned int **)a1;
  if (a1 + 16 != *(void *)a1 && v4 != 0)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSE_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  v41[2] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v35, this);
  WTF::String::String((WTF::String *)&v34, a4);
  uint64_t v30 = a5;
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, &v33);
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v35, (uint64_t *)&v34, (uint64_t *)&v33, &v36);
  char v10 = v33;
  int v33 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = v34;
  uint64_t v34 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  int v12 = v35;
  char v35 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v9);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  char v13 = *(NSObject **)(a1 + 32);
  uint64_t v14 = (WTF *)os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if (v14)
  {
    WTF::String::utf8();
    int v16 = v32[0] ? (char *)v32[0] + 16 : 0;
    *(_DWORD *)long long buf = 136446210;
    uint64_t v38 = v16;
    _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    uint64_t v14 = v32[0];
    v32[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1) {
        uint64_t v14 = (WTF *)WTF::fastFree(v14, v15);
      }
      else {
        --*(_DWORD *)v14;
      }
    }
  }
  if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    int v17 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v18 = *v17;
      if (v18) {
        break;
      }
      int v19 = *v17;
      atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v19, v18 | 1, memory_order_acquire, memory_order_acquire);
      if (v19 == v18)
      {
        uint64_t v20 = WTF::Logger::observers(v14);
        uint64_t v21 = *(unsigned int *)(v20 + 12);
        if (v21)
        {
          uint64_t v22 = *(uint64_t **)v20;
          uint64_t v23 = *(void *)v20 + 8 * v21;
          do
          {
            uint64_t v24 = *v22;
            *(_DWORD *)long long buf = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v38 + 4), this);
            int v39 = 0;
            WTF::String::String((WTF::String *)v40, a4);
            v40[2] = 0;
            WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v30, v41);
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v32, (uint64_t)buf, 3uLL);
            (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v24 + 16))(v24, a1, a2, v32);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v32, v25);
            for (uint64_t i = 40; i != -8; i -= 16)
            {
              uint64_t v27 = *(WTF::StringImpl **)&buf[i];
              *(void *)&buf[i] = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2) {
                  WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v15);
                }
                else {
                  *(_DWORD *)v27 -= 2;
                }
              }
            }
            ++v22;
          }
          while (v22 != (uint64_t *)v23);
        }
        int v28 = 1;
        atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
        if (v28 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  uint64_t result = v36;
  int v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v15);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::dispatchAll(void *__dst, atomic_uchar *volatile *a2)
{
  uint64_t v5 = __dst + 9;
  uint64_t v4 = (void *)__dst[9];
  uint64_t v20 = &v22;
  uint64_t v21 = 1;
  uint64_t v23 = (WTF::NativePromiseBase **)&v25;
  uint64_t v24 = 1;
  if (v4 == __dst + 11)
  {
    uint64_t v7 = *((unsigned int *)__dst + 21);
    memcpy(&v25, v4, 8 * v7);
  }
  else
  {
    __dst[9] = __dst + 11;
    uint64_t v23 = (WTF::NativePromiseBase **)v4;
    int v6 = *((_DWORD *)__dst + 20);
    LODWORD(v7) = *((_DWORD *)__dst + 21);
    *((_DWORD *)__dst + 20) = 1;
    LODWORD(v24) = v6;
  }
  *((_DWORD *)__dst + 21) = 0;
  HIDWORD(v24) = v7;
  WTF::VectorBuffer<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::FastMalloc>::adopt(v5, &v20);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v8);
  uint64_t v9 = __dst[12];
  uint64_t v20 = (uint64_t *)v9;
  uint64_t v10 = *((unsigned int *)__dst + 27);
  LODWORD(v21) = *((_DWORD *)__dst + 26);
  HIDWORD(v21) = v10;
  v19[0] = 0;
  __dst[12] = 0;
  v19[1] = 0;
  __dst[13] = 0;
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v11);
  if (HIDWORD(v24))
  {
    char v13 = v23;
    uint64_t v14 = 8 * HIDWORD(v24);
    do
    {
      char v15 = *v13++;
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(v15, (uint64_t)__dst, a2);
      v14 -= 8;
    }
    while (v14);
  }
  if (v10)
  {
    uint64_t v16 = 40 * v10;
    do
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settleChainedPromise((uint64_t)__dst, v9);
      v9 += 40;
      v16 -= 40;
    }
    while (v16);
  }
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v12);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v17);
}

unsigned __int8 *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, atomic_uchar *volatile *a3)
{
  uint64_t v5 = a1;
  if (!*((void *)a1 + 2)
    || (int v6 = atomic_load((unsigned __int8 *)(a2 + 113)), v6 == 1)
    && (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(void))(**((void **)a1 + 2) + 24))(*((void *)a1 + 2)),
        a1))
  {
    if (*((unsigned char *)v5 + 56))
    {
      int v17 = (unsigned __int8 *)v5;
      uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
      if (*result) {
        BOOL v10 = result[16] >= 4u;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10) {
        return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)&v17, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
      }
    }
    else
    {
      atomic_uchar *volatile v11 = *a3;
      int v12 = 1;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
      }
      if (WTF::NativePromise<void,void,0u>::hasRunnable(a2))
      {
        WTF::NativePromise<void,void,0u>::takeResultRunnable(a2, &v17);
        (*(void (**)(unsigned char *__return_ptr))(*(void *)v17 + 16))(v16);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned char *))(*(void *)v5 + 24))(v5, a2, v16);
        char v13 = v17;
        int v17 = 0;
        if (v13) {
          (*(void (**)(unsigned __int8 *))(*(void *)v13 + 8))(v13);
        }
      }
      else
      {
        WTF::NativePromise<void,void,0u>::takeResult(a2, &v17, v15);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(void *)v5 + 24))(v5, a2, &v17);
      }
      char v14 = 0;
      uint64_t result = (unsigned __int8 *)*a3;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
      if (v14) {
        return (unsigned __int8 *)MEMORY[0x19972E8D0]();
      }
    }
  }
  else
  {
    uint64_t v7 = *((void *)v5 + 2);
    atomic_fetch_add((atomic_uint *volatile)v5 + 2, 1u);
    atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
    char v8 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
    *(void *)char v8 = &unk_1EE9C1608;
    *((void *)v8 + 1) = v5;
    *((void *)v8 + 2) = v5;
    *((void *)v8 + 3) = a2;
    int v17 = v8;
    (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)v7 + 16))(v7, &v17);
    uint64_t result = v17;
    int v17 = 0;
    if (result) {
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settleChainedPromise(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v9 = v2;
  long long v3 = *(_OWORD *)(a2 + 24);
  long long v10 = *(_OWORD *)(a2 + 8);
  long long v11 = v3;
  if (v2)
  {
    atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = "<chained promise>";
    uint64_t v8 = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage>((atomic_uchar *)v2, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v5);
    if (atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v2 + 8));
      (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = "<chained promise>";
    uint64_t v8 = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage>(0, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v5);
  }
  return WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v9);
}

WTF *WTF::VectorBuffer<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::FastMalloc>::adopt(_DWORD *__dst, _DWORD *a2)
{
  uint64_t v5 = (WTF *)(__dst + 4);
  uint64_t result = *(WTF **)__dst;
  if (result != v5)
  {
    if (result)
    {
      *(void *)__dst = 0;
      __dst[2] = 0;
      uint64_t result = (WTF *)WTF::fastFree(result, a2);
    }
    *(void *)__dst = v5;
  }
  uint64_t v6 = *(const void **)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    uint64_t result = (WTF *)memcpy(v5, v6, 8 * a2[3]);
    int v7 = a2[2];
  }
  else
  {
    *(void *)a2 = a2 + 4;
    *(void *)__dst = v6;
    int v7 = a2[2];
    a2[2] = 1;
  }
  __dst[2] = v7;
  int v8 = a2[3];
  a2[3] = 0;
  __dst[3] = v8;
  return result;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4, const char *a5, int a6, const char *a7, WTF::Logger::LogSiteIdentifier *a8, const char *a9)
{
  v64[1] = *MEMORY[0x1E4F143B8];
  WTF::String::String((WTF::String *)&v49, a3);
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, &v48);
  WTF::String::String((WTF::String *)&v47, a5);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v45, a7);
  int v39 = a8;
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v44, a8);
  WTF::String::String((WTF::String *)&v43, a9);
  v42[0] = v48;
  uint64_t v55 = v47;
  *(void *)long long buf = v49;
  unint64_t v53 = v45;
  unint64_t v54 = v46;
  int v51 = v43;
  unint64_t v52 = v44;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, (uint64_t *)v42, (uint64_t *)&v55, (uint64_t *)&v54, (uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, &v50);
  if (v50)
  {
    uint64_t v15 = v43;
    uint64_t v43 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t v16 = v44;
    uint64_t v44 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v14);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    int v17 = v45;
    uint64_t v45 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v14);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    int v18 = v46;
    uint64_t v46 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v14);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    int v19 = v47;
    int v47 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v14);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    uint64_t v20 = v48;
    uint64_t v48 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v14);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    uint64_t v21 = v49;
    uint64_t v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v14);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    uint64_t v22 = *(NSObject **)(a1 + 32);
    uint64_t v23 = (WTF *)os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    if (v23)
    {
      WTF::String::utf8();
      uint64_t v25 = v42[0] ? (char *)v42[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v23 = v42[0];
      v42[0] = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1) {
          uint64_t v23 = (WTF *)WTF::fastFree(v23, v24);
        }
        else {
          --*(_DWORD *)v23;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      int v26 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v27 = *v26;
        if (v27) {
          break;
        }
        int v28 = *v26;
        atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v28, v27 | 1, memory_order_acquire, memory_order_acquire);
        if (v28 == v27)
        {
          uint64_t v29 = WTF::Logger::observers(v23);
          uint64_t v30 = *(unsigned int *)(v29 + 12);
          if (v30)
          {
            uint64_t v31 = *(uint64_t **)v29;
            uint64_t v37 = *(void *)v29 + 8 * v30;
            do
            {
              uint64_t v32 = *v31;
              *(_DWORD *)long long buf = 0;
              WTF::String::String((WTF::String *)&buf[8], a3);
              int v57 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, &v58);
              int v59 = 0;
              WTF::String::String((WTF::String *)v60, a5);
              v60[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v60[6] = 0;
              WTF::String::String((WTF::String *)v61, a7);
              v61[2] = 0;
              WTF::Logger::LogSiteIdentifier::toString(&v62, v39);
              int v63 = 0;
              WTF::String::String((WTF::String *)v64, a9);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v42, (uint64_t)buf, 7uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v32 + 16))(v32, a1, a2, v42);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v33);
              for (uint64_t i = 104; i != -8; i -= 16)
              {
                char v35 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2) {
                    WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v24);
                  }
                  else {
                    *(_DWORD *)v35 -= 2;
                  }
                }
              }
              ++v31;
            }
            while (v31 != (uint64_t *)v37);
          }
          int v36 = 1;
          atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v36, 0, memory_order_release, memory_order_relaxed);
          if (v36 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v50;
    int v50 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v24);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C1608;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  long long v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C1608;
  long long v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

unsigned __int8 *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[2];
  if (*(unsigned char *)(*a1 + 56))
  {
    long long v10 = (unsigned __int8 *)*a1;
    uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
    if (*result) {
      BOOL v4 = result[16] >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)&v10, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<void,void,0u>::hasRunnable(a1[2]);
    uint64_t v7 = a1[2];
    if (hasRunnable)
    {
      WTF::NativePromise<void,void,0u>::takeResultRunnable(a1[2], &v10);
      (*(void (**)(unsigned char *__return_ptr))(*(void *)v10 + 16))(v9);
      (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v1 + 24))(v1, v7, v9);
      uint64_t result = v10;
      long long v10 = 0;
      if (result) {
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
      }
    }
    else
    {
      WTF::NativePromise<void,void,0u>::takeResult(a1[2], &v10, v8);
      return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 **))(*(void *)v1 + 24))(v1, v7, &v10);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage>(atomic_uchar *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = a1 + 48;
  int v12 = (WTF::Lock *)v7;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (atomic_uchar *)MEMORY[0x19972E8D0]();
  }
  uint64_t v8 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", (uint64_t)a1);
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>,(std::__variant_detail::_Trait)1>>((uint64_t)(a1 + 56), a2);
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::dispatchAll(a1);
  uint64_t result = (uint64_t)v12;
  int v11 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    return WTF::Lock::unlockSlow(v12);
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9C13B0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1EE9C13C8[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 8);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9C13B0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

unsigned char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(unsigned char **a1, unsigned char *a2, __int16 *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>(*a1, a2, a3);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>(*a1, a2, a3);
}

unsigned char *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>(unsigned char *result, unsigned char *a2, __int16 *a3)
{
  uint64_t v4 = result;
  uint64_t v5 = *((unsigned int *)result + 2);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      __int16 v6 = *a3;
      return std::optional<WebCore::PlatformMediaError>::swap[abi:sn180100](&v6, a2);
    }
    uint64_t result = (unsigned char *)((uint64_t (*)(char *, unsigned char *))off_1EE9C13B0[v5])(&v7, result);
  }
  *((_DWORD *)v4 + 2) = -1;
  *(_WORD *)uint64_t v4 = *a3;
  *((_DWORD *)v4 + 2) = 1;
  return result;
}

unsigned char *std::optional<WebCore::PlatformMediaError>::swap[abi:sn180100](unsigned char *result, unsigned char *a2)
{
  if ((result[1] != 0) != (a2[1] != 0))
  {
    if (result[1])
    {
      *a2 = *result;
      a2[1] = 1;
      if (result[1]) {
        result[1] = 0;
      }
    }
    else
    {
      unsigned __int8 *result = *a2;
      result[1] = 1;
      if (a2[1]) {
        a2[1] = 0;
      }
    }
  }
  else if (result[1])
  {
    char v2 = *result;
    unsigned __int8 *result = *a2;
    *a2 = v2;
  }
  return result;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = result;
  uint64_t v5 = result[2];
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1EE9C13B0[v5])(&v9, result);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    v4[2] = 2;
    return result;
  }
  __int16 v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    char v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v7();
  }
  return result;
}

uint64_t *IPC::Connection::sendWithPromisedReply<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>@<X0>(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t *a4@<X8>)
{
  v17[0] = 0;
  v17[1] = 0;
  v17[2] = (uint64_t)"sendWithPromisedReply";
  void v17[3] = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)v18, 0, (WTF::Logger::LogSiteIdentifier *)v17);
  uint64_t v8 = v18[0];
  if (v18[0]) {
    atomic_fetch_add((atomic_uint *volatile)(v18[0] + 8), 1u);
  }
  *a4 = v8;
  IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(v18, v17);
  char v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v9 = 152;
  *((void *)v9 + 1) = a2;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v16 = v9;
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(a1, &v16, v17, a3, 0);
  int v11 = v16;
  uint64_t v16 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v10);
    WTF::fastFree(v14, v15);
  }
  uint64_t v12 = v17[0];
  v17[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(v18);
}

uint64_t *IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  long long v4 = *(_OWORD *)(a1 + 3);
  long long v9 = *(_OWORD *)(a1 + 1);
  long long v10 = v4;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v5 = &unk_1EE9C13F0;
  *(void *)(v5 + 8) = v3;
  uint64_t v8 = 0;
  long long v6 = v10;
  *(_OWORD *)(v5 + 16) = v9;
  *(_OWORD *)(v5 + 32) = v6;
  *a2 = v5;
  a2[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  return WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v8);
}

uint64_t WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>(uint64_t a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x78);
  char v7 = (atomic_uchar *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::NativePromise(v6, a3);
  *(void *)a1 = v7;
  long long v8 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 24) = *((_OWORD *)a3 + 1);
  *(_OWORD *)(a1 + 8) = v8;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::setDispatchMode(v7, a2, a3);
  return a1;
}

WTF::StringImpl *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::setDispatchMode(atomic_uchar *a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5 = (uint64_t)a1;
  char v6 = 0;
  char v7 = (WTF::Lock *)(a1 + 48);
  atomic_compare_exchange_strong_explicit(a1 + 48, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    a1 = (atomic_uchar *)MEMORY[0x19972E8D0](a1 + 48);
  }
  uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)result) {
    BOOL v9 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    uint64_t result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)result, 4u, a3, " runSynchronouslyOnTarget ", v5);
  }
  atomic_store(a2, (unsigned __int8 *)(v5 + 113));
  int v10 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v5 + 48), (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1)
  {
    return (WTF::StringImpl *)WTF::Lock::unlockSlow(v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C13F0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9C13F0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  char v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  long long v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9C1418;
  v4[1] = v3;
  char v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  uint64_t result = (uint64_t)v7;
  char v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(uint64_t *a1, uint64_t *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t isSettled = *a1;
  if (isSettled)
  {
    uint64_t isSettled = WTF::NativePromise<void,void,0u>::isSettled(isSettled);
    uint64_t v7 = *a1;
    if (!isSettled)
    {
      return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settleWithFunction(v7, a2, a3);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
  if (*(unsigned char *)result) {
    BOOL v9 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)result, 4u, a3, " ignored already resolved or rejected ", v7);
  }
  return result;
}

WTF::Lock *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settleWithFunction(uint64_t a1, uint64_t *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  char v14 = v7;
  char v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  long long v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " settling ", a1);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 64);
  if (v10 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9C13B0[v10])(&v16, a1 + 56);
  }
  uint64_t v11 = *a2;
  *a2 = 0;
  *(void *)(a1 + 56) = v11;
  *(_DWORD *)(a1 + 64) = 2;
  uint64_t result = (WTF::Lock *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::dispatchAll((void *)a1, (atomic_uchar *volatile *)&v14);
  if (v15)
  {
    uint64_t result = v14;
    int v13 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C1418;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9C1418;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::call@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  char v2 = *(void **)(result + 8);
  if (v2 && *v2) {
    *a2 = 0;
  }
  else {
    *a2 = 260;
  }
  return result;
}

void *std::__function::__func<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0,std::allocator<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0>,void ()(WTF::MediaTime const&)>::~__func(void *a1, void *a2)
{
  *a1 = &unk_1EE9C1440;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

void std::__function::__func<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0,std::allocator<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0>,void ()(WTF::MediaTime const&)>::~__func(void *a1, void *a2)
{
  *a1 = &unk_1EE9C1440;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  JUMPOUT(0x199740C10);
}

void *std::__function::__func<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0,std::allocator<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0>,void ()(WTF::MediaTime const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(atomic_uint **)(a1 + 16);
  void *result = &unk_1EE9C1440;
  result[1] = v4;
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  result[2] = v3;
  return result;
}

uint64_t std::__function::__func<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0,std::allocator<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0>,void ()(WTF::MediaTime const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE9C1440;
  a2[1] = v2;
  uint64_t v3 = *(atomic_uint **)(result + 16);
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  a2[2] = v3;
  return result;
}

unsigned int *std::__function::__func<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0,std::allocator<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0>,void ()(WTF::MediaTime const&)>::destroy(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void std::__function::__func<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0,std::allocator<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0>,void ()(WTF::MediaTime const&)>::destroy_deallocate(void *__p, void *a2)
{
  uint64_t v3 = (unsigned int *)__p[2];
  __p[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0,std::allocator<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0>,void ()(WTF::MediaTime const&)>::operator()(uint64_t result, long long *a2)
{
  long long v3 = *a2;
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    if (*(void *)(v2 + 8)) {
      return WebKit::RemoteMediaPlayerProxy::currentTimeChanged(*(WebKit::RemoteMediaPlayerProxy **)(result + 8), (const WTF::MediaTime *)&v3);
    }
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::SeekTarget>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, WebCore::SeekTarget *a4)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v30, this);
  WebCore::SeekTarget::toString((uint64_t *)&v29, a4);
  *(void *)long long buf = v30;
  v28[0] = v29;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
  if (v31)
  {
    BOOL v9 = v29;
    uint64_t v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t v10 = v30;
    uint64_t v30 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    uint64_t v11 = *(NSObject **)(a1 + 32);
    uint64_t v12 = (WTF *)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      WTF::String::utf8();
      char v14 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v12 = v28[0];
      v28[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1) {
          uint64_t v12 = (WTF *)WTF::fastFree(v12, v13);
        }
        else {
          --*(_DWORD *)v12;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      char v15 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v16 = *v15;
        if (v16) {
          break;
        }
        int v17 = *v15;
        atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v17, v16 | 1, memory_order_acquire, memory_order_acquire);
        if (v17 == v16)
        {
          uint64_t v18 = WTF::Logger::observers(v12);
          uint64_t v19 = *(unsigned int *)(v18 + 12);
          if (v19)
          {
            uint64_t v20 = *(uint64_t **)v18;
            uint64_t v21 = *(void *)v18 + 8 * v19;
            do
            {
              uint64_t v22 = *v20;
              *(_DWORD *)long long buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], this);
              int v33 = 0;
              WebCore::SeekTarget::toString(v34, a4);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v22 + 16))(v22, a1, a2, v28);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v23);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v25 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v25)
                {
                  if (*(_DWORD *)v25 == 2) {
                    WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v13);
                  }
                  else {
                    *(_DWORD *)v25 -= 2;
                  }
                }
              }
              ++v20;
            }
            while (v20 != (uint64_t *)v21);
          }
          int v26 = 1;
          atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
          if (v26 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v31;
    uint64_t v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v28, this);
  WTF::LogArgument<BOOL>::toString<BOOL>(&v27);
  *(void *)long long buf = v28;
  v26[0] = v27;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v26, &v29);
  if (v29)
  {
    uint64_t v7 = v27;
    int v27 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    long long v8 = v28;
    int v28 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    BOOL v9 = *(NSObject **)(a1 + 32);
    uint64_t v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      WTF::String::utf8();
      uint64_t v12 = v26[0] ? (char *)v26[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v10 = v26[0];
      v26[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1) {
          uint64_t v10 = (WTF *)WTF::fastFree(v10, v11);
        }
        else {
          --*(_DWORD *)v10;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      int v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v14 = *v13;
        if (v14) {
          break;
        }
        int v15 = *v13;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
        if (v15 == v14)
        {
          uint64_t v16 = WTF::Logger::observers(v10);
          uint64_t v17 = *(unsigned int *)(v16 + 12);
          if (v17)
          {
            uint64_t v18 = *(uint64_t **)v16;
            uint64_t v19 = *(void *)v16 + 8 * v17;
            do
            {
              uint64_t v20 = *v18;
              *(_DWORD *)long long buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], this);
              int v31 = 0;
              WTF::LogArgument<BOOL>::toString<BOOL>(v32);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v26, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v20 + 16))(v20, a1, a2, v26);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v21);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v23 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2) {
                    WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                  }
                  else {
                    *(_DWORD *)v23 -= 2;
                  }
                }
              }
              ++v18;
            }
            while (v18 != (uint64_t *)v19);
          }
          int v24 = 1;
          atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
          if (v24 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v29;
    uint64_t v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v11);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::LogArgument<BOOL>::toString<BOOL>@<X0>(void *a1@<X8>)
{
  uint64_t result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *a1 = v3;
  return result;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7) {
    this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

uint64_t IPC::Connection::send<Messages::MediaPlayerPrivateRemote::RequestResource>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 181;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceRequest const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceRequest const&,unsigned int const&>,0ul,1ul,2ul>(v10, a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  int v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceRequest const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebCore::ResourceRequest const&,unsigned int const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, *(WebCore::ResourceRequest **)(a2 + 8));
  int v4 = **(_DWORD **)(a2 + 16);

  return IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t IPC::Connection::sendWithAsyncReply<Messages::MediaPlayerPrivateRemote::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(os_unfair_lock_s *a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v10 = &unk_1EE9C1488;
  v10[1] = v9;
  uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 184;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v21 = v12;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, *a2);
  v20[0] = (uint64_t)v10;
  v20[1] = v11;
  int v14 = IPC::Connection::sendMessageWithAsyncReply(a1, &v21, v20, a5, 0);
  uint64_t v15 = v20[0];
  v20[0] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v21;
  uint64_t v21 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v13);
    WTF::fastFree(v18, v19);
  }
  if (v14) {
    return 0;
  }
  else {
    return v11;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::MediaPlayerPrivateRemote::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C1488;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::MediaPlayerPrivateRemote::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C1488;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::MediaPlayerPrivateRemote::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>>(a2, (uint64_t)v7);
    if (v9)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v7);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v9)
      {
        if (v8 != -1) {
          return ((uint64_t (*)(char *, unsigned char *))off_1EE9C14A0[v8])(&v6, v7);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::MediaPlayerPrivateRemote::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(v2);
    }
  }
  else
  {
    int v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::MediaPlayerPrivateRemote::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(v5);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::MediaPlayerPrivateRemote::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(uint64_t *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  int v5 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v5 != -1) {
    return ((uint64_t (*)(char *, void *))off_1EE9C14A0[v5])(&v3, v4);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 88))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t result = IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>(a1, (uint64_t)v7);
  int v4 = v9;
  *(unsigned char *)a2 = 0;
  if (v4)
  {
    *(_DWORD *)(a2 + 80) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v7);
    int v5 = v9;
    *(unsigned char *)(a2 + 88) = 1;
    if (v5)
    {
      if (v8 != -1) {
        return ((uint64_t (*)(char *, unsigned char *))off_1EE9C14A0[v8])(&v6, v7);
      }
    }
  }
  else
  {
    *(unsigned char *)(a2 + 88) = 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 88))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v17 = a1[3];
    if (v17)
    {
      uint64_t v20 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
        a1 = v20;
        uint64_t v16 = *v20;
        unint64_t v15 = v20[1];
      }
      else
      {
        unint64_t v15 = 0;
        uint64_t v16 = 0;
      }
    }
    goto LABEL_15;
  }
  char v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v15 = v3;
    uint64_t v16 = 0;
LABEL_15:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v18 = a1[3];
    if (v18)
    {
      uint64_t v19 = a1;
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v18 + 16))(v18, v16, v15);
        a1 = v19;
        uint64_t v4 = *v19;
        unint64_t v3 = v19[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_16;
  }
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
LABEL_16:
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v3) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v4);
    }
LABEL_17:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 88) = 0;
    return result;
  }
  if (v7)
  {
    uint64_t result = IPC::Decoder::decode<WTF::Seconds>(a1);
    if (v9)
    {
      *(void *)a2 = result;
      *(_DWORD *)(a2 + 80) = 0;
      *(unsigned char *)(a2 + 88) = 1;
      return result;
    }
    goto LABEL_17;
  }
  IPC::Decoder::decode<WebCore::ResourceError>((IPC::Decoder *)a1, (uint64_t)&v29);
  if (v38)
  {
    long long v11 = v31;
    LODWORD(v31) = v31 & 0xFFFFFFFE;
    uint64_t v24 = v33;
    int v25 = v34;
    __int16 v26 = v35;
    uint64_t v27 = v36;
    char v28 = v37;
    uint64_t v12 = v29;
    int v13 = v30;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    long long v22 = v11;
    long long v23 = v32;
    uint64_t v33 = 0;
    uint64_t v36 = 0;
    uint64_t v21 = v13;
    *(void *)a2 = v12;
    WTF::URL::URL(a2 + 8, (uint64_t *)&v21);
    int v14 = v21;
    *(void *)(a2 + 48) = v24;
    *(_DWORD *)(a2 + 56) = v25;
    *(_WORD *)(a2 + 60) = v26;
    *(void *)(a2 + 64) = v27;
    *(unsigned char *)(a2 + 72) = v28;
    *(_DWORD *)(a2 + 80) = 1;
    *(unsigned char *)(a2 + 88) = 1;
    uint64_t v27 = 0;
    uint64_t v24 = 0;
    uint64_t v21 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v10);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 88) = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v10);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 80);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9C14A0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 80) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 80);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9C14B0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 80) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF7SecondsEN7WebCore13ResourceErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF7SecondsEN7WebCore13ResourceErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  *(void *)a2 = v5;
  WTF::URL::URL(a2 + 8, a3 + 1);
  uint64_t v6 = a3[6];
  a3[6] = 0;
  *(void *)(a2 + 48) = v6;
  LODWORD(v6) = *((_DWORD *)a3 + 14);
  *(_WORD *)(a2 + 60) = *((_WORD *)a3 + 30);
  *(_DWORD *)(a2 + 56) = v6;
  uint64_t v7 = a3[8];
  a3[8] = 0;
  *(void *)(a2 + 64) = v7;
  *(unsigned char *)(a2 + 72) = *((unsigned char *)a3 + 72);
}

WTF::StringImpl *WTF::Function<void ()(WTF::String)>::operator()(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v6 = v3;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v2 + 16))(v2, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MediaPlayerReadyState>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v28, this);
  WebCore::convertEnumerationToString();
  *(void *)long long buf = v28;
  v26[0] = v27;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v26, &v29);
  if (v29)
  {
    uint64_t v7 = v27;
    uint64_t v27 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    int v8 = v28;
    char v28 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    char v9 = *(NSObject **)(a1 + 32);
    uint64_t v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      WTF::String::utf8();
      uint64_t v12 = v26[0] ? (char *)v26[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v10 = v26[0];
      v26[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1) {
          uint64_t v10 = (WTF *)WTF::fastFree(v10, v11);
        }
        else {
          --*(_DWORD *)v10;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      int v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v14 = *v13;
        if (v14) {
          break;
        }
        int v15 = *v13;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
        if (v15 == v14)
        {
          uint64_t v16 = WTF::Logger::observers(v10);
          uint64_t v17 = *(unsigned int *)(v16 + 12);
          if (v17)
          {
            uint64_t v18 = *(uint64_t **)v16;
            uint64_t v19 = *(void *)v16 + 8 * v17;
            do
            {
              uint64_t v20 = *v18;
              *(_DWORD *)long long buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], this);
              int v31 = 0;
              WebCore::convertEnumerationToString();
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v26, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v20 + 16))(v20, a1, a2, v26);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v21);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                long long v23 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2) {
                    WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                  }
                  else {
                    *(_DWORD *)v23 -= 2;
                  }
                }
              }
              ++v18;
            }
            while (v18 != (uint64_t *)v19);
          }
          int v24 = 1;
          atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
          if (v24 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v29;
    uint64_t v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v11);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::MediaPlayerReadyState,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, WTF::MediaTime *a4)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v30, this);
  WTF::MediaTime::toJSONString((uint64_t *)&v29, a4);
  *(void *)long long buf = v30;
  v28[0] = v29;
  unint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
  if (v31)
  {
    char v9 = v29;
    uint64_t v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t v10 = v30;
    uint64_t v30 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    long long v11 = *(NSObject **)(a1 + 32);
    uint64_t v12 = (WTF *)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      WTF::String::utf8();
      int v14 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v12 = v28[0];
      v28[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1) {
          uint64_t v12 = (WTF *)WTF::fastFree(v12, v13);
        }
        else {
          --*(_DWORD *)v12;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      int v15 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v16 = *v15;
        if (v16) {
          break;
        }
        int v17 = *v15;
        atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v17, v16 | 1, memory_order_acquire, memory_order_acquire);
        if (v17 == v16)
        {
          uint64_t v18 = WTF::Logger::observers(v12);
          uint64_t v19 = *(unsigned int *)(v18 + 12);
          if (v19)
          {
            uint64_t v20 = *(uint64_t **)v18;
            uint64_t v21 = *(void *)v18 + 8 * v19;
            do
            {
              uint64_t v22 = *v20;
              *(_DWORD *)long long buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], this);
              int v33 = 1;
              WTF::MediaTime::toJSONString(v34, a4);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v22 + 16))(v22, a1, a2, v28);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v23);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                int v25 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v25)
                {
                  if (*(_DWORD *)v25 == 2) {
                    WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v13);
                  }
                  else {
                    *(_DWORD *)v25 -= 2;
                  }
                }
              }
              ++v20;
            }
            while (v20 != (uint64_t *)v21);
          }
          int v26 = 1;
          atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
          if (v26 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    unint64_t result = v31;
    int v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::MediaPlayerPrivateRemote::GetRawCookies,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C14D0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::MediaPlayerPrivateRemote::GetRawCookies,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C14D0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::MediaPlayerPrivateRemote::GetRawCookies,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v7);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8) {
        return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::MediaPlayerPrivateRemote::GetRawCookies,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::MediaPlayerPrivateRemote::GetRawCookies,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v6);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::MediaPlayerPrivateRemote::GetRawCookies,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t *a1)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v6 != 0)
    {
      char v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v8);
  char v6 = v10;
  if (v10)
  {
    *(void *)a3 = v8;
    uint64_t v7 = v9;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    *(void *)(a3 + 8) = v7;
    uint64_t result = WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
    char v6 = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 16) = v6;
  return result;
}

uint64_t IPC::Connection::send<Messages::MediaPlayerPrivateRemote::ActiveSourceBuffersChanged>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 144;
  *((void *)v9 + 1) = a3;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  int v16 = v9;
  uint64_t v11 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v16, a4, a5);
  uint64_t v12 = v16;
  int v16 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

void WebCore::PlatformTextTrack::~PlatformTextTrack(WebCore::PlatformTextTrack *this, WTF::StringImpl *a2)
{
  WebCore::PlatformTextTrack::~PlatformTextTrack(this, a2);

  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(void *)this = &unk_1EE9C14F8;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
}

uint64_t IPC::Connection::send<Messages::MediaPlayerPrivateRemote::CurrentTimeChanged>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5)
{
  char v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v10 = 154;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  int v17 = v10;
  IPC::ArgumentCoder<WebKit::MediaTimeUpdateData,void>::encode(v10, *a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  int v13 = v17;
  int v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t IPC::Connection::send<Messages::MediaPlayerPrivateRemote::UpdateCachedState>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5)
{
  char v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v10 = 187;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  int v17 = v10;
  IPC::ArgumentCoder<WebKit::RemoteMediaPlayerState,void>::encode(v10, *a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  int v13 = v17;
  int v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteMediaPlayerProxy::performTaskAtTime(WTF::MediaTime const&,WTF::CompletionHandler<void ()(std::optional<WTF::MediaTime>)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C1518;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaPlayerProxy::performTaskAtTime(WTF::MediaTime const&,WTF::CompletionHandler<void ()(std::optional<WTF::MediaTime>)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C1518;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaPlayerProxy::performTaskAtTime(WTF::MediaTime const&,WTF::CompletionHandler<void ()(std::optional<WTF::MediaTime>)> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = *(void *)(result + 8);
    uint64_t v3 = *(void *)(v2 + 736);
    if (v3)
    {
      *(void *)(v2 + 736) = 0;
      v5[0] = WebCore::MediaPlayer::currentTime(*(WebCore::MediaPlayer **)(v2 + 120));
      v5[1] = v4;
      char v6 = 1;
      (*(void (**)(uint64_t, void *))(*(void *)v3 + 16))(v3, v5);
      return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, double *a4)
{
  v37[2] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v33, this);
  WTF::String::number((uint64_t *)&v32, v7, *a4);
  *(void *)long long buf = v33;
  v31[0] = v32;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v31, &v34);
  if (v34)
  {
    char v10 = v32;
    uint64_t v32 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    uint64_t v11 = v33;
    int v33 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = *(NSObject **)(a1 + 32);
    int v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (v13)
    {
      WTF::String::utf8();
      int v15 = v31[0] ? (char *)v31[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v15;
      _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      int v13 = v31[0];
      v31[0] = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1) {
          int v13 = (WTF *)WTF::fastFree(v13, v14);
        }
        else {
          --*(_DWORD *)v13;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      int v16 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v17 = *v16;
        if (v17) {
          break;
        }
        int v18 = *v16;
        atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, v17 | 1, memory_order_acquire, memory_order_acquire);
        if (v18 == v17)
        {
          uint64_t v19 = WTF::Logger::observers(v13);
          uint64_t v20 = *(unsigned int *)(v19 + 12);
          if (v20)
          {
            uint64_t v21 = *(uint64_t **)v19;
            uint64_t v22 = *(void *)v19 + 8 * v20;
            do
            {
              uint64_t v23 = *v21;
              *(_DWORD *)long long buf = 0;
              int v24 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], this);
              double v25 = *a4;
              int v36 = 0;
              WTF::String::number(v37, v24, v25);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v31, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v23 + 16))(v23, a1, a2, v31);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v31, v26);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                char v28 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v28)
                {
                  if (*(_DWORD *)v28 == 2) {
                    WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v14);
                  }
                  else {
                    *(_DWORD *)v28 -= 2;
                  }
                }
              }
              ++v21;
            }
            while (v21 != (uint64_t *)v22);
          }
          int v29 = 1;
          atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v29, 0, memory_order_release, memory_order_relaxed);
          if (v29 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v34;
    int v34 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

BOOL WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::hasRunnable(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = (atomic_uchar *)(a1 + 48);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](a1 + 48);
  }
  int v5 = *(_DWORD *)(a1 + 96);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v5 == 2;
}

uint64_t WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = MEMORY[0x19972E8D0](a2 + 48);
  }
  if (*(_DWORD *)(a2 + 96) == 2)
  {
    uint64_t v6 = *(void *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    void *v3 = v6;
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::takeResult(v8);
  }
  return result;
}

WTF::StringImpl *WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::takeResult(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v3 = result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = (WTF::StringImpl *)MEMORY[0x19972E8D0](a2 + 48);
  }
  if (*(_DWORD *)(a2 + 96) == 1)
  {
    long long v6 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)uint64_t v3 = *(_OWORD *)(a2 + 56);
    *((_OWORD *)v3 + 1) = v6;
    *((void *)v3 + 4) = *(void *)(a2 + 88);
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return (WTF::StringImpl *)WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(v8, v9, v10, v11);
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  v56[1] = *MEMORY[0x1E4F143B8];
  WTF::String::String((WTF::String *)&v41, "ThenCallback disconnected from ");
  uint64_t v31 = a2;
  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v40, a2);
  WTF::String::String((WTF::String *)&v39, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v37, " callSite:");
  uint64_t v32 = a4;
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v36, a4);
  WTF::String::String((WTF::String *)&v35, "]");
  v34[0] = v40;
  int v47 = v39;
  *(void *)long long buf = v41;
  uint64_t v45 = v37;
  uint64_t v46 = v38;
  uint64_t v43 = v35;
  uint64_t v44 = v36;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, (uint64_t *)v34, (uint64_t *)&v47, (uint64_t *)&v46, (uint64_t *)&v45, (uint64_t *)&v44, (uint64_t *)&v43, &v42);
  if (v42)
  {
    uint64_t v8 = v35;
    __int16 v35 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t v9 = v36;
    int v36 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v7);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t v10 = v37;
    char v37 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v7);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    uint64_t v11 = v38;
    char v38 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v7);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = v39;
    int v39 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v7);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    int v13 = v40;
    int8x16x2_t v40 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v7);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    int v14 = v41;
    int8x16x2_t v41 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v7);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    int v15 = *(NSObject **)(a1 + 32);
    int v16 = (WTF *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (v16)
    {
      WTF::String::utf8();
      int v18 = v34[0] ? (char *)v34[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl(&dword_1985F2000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      int v16 = v34[0];
      v34[0] = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1) {
          int v16 = (WTF *)WTF::fastFree(v16, v17);
        }
        else {
          --*(_DWORD *)v16;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
    {
      uint64_t v19 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v20 = *v19;
        if (v20) {
          break;
        }
        int v21 = *v19;
        atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, v20 | 1, memory_order_acquire, memory_order_acquire);
        if (v21 == v20)
        {
          uint64_t v22 = WTF::Logger::observers(v16);
          uint64_t v23 = *(unsigned int *)(v22 + 12);
          if (v23)
          {
            int v24 = *(uint64_t **)v22;
            uint64_t v30 = *(void *)v22 + 8 * v23;
            do
            {
              uint64_t v25 = *v24;
              *(_DWORD *)long long buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "ThenCallback disconnected from ");
              int v49 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v50, v31);
              int v51 = 0;
              WTF::String::String((WTF::String *)v52, " aborting [callback:");
              v52[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v52[6] = 0;
              WTF::String::String((WTF::String *)v53, " callSite:");
              v53[2] = 0;
              WTF::Logger::LogSiteIdentifier::toString(&v54, v32);
              int v55 = 0;
              WTF::String::String((WTF::String *)v56, "]");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v34, (uint64_t)buf, 7uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v25 + 16))(v25, a1, 4, v34);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v26);
              for (uint64_t i = 104; i != -8; i -= 16)
              {
                char v28 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v28)
                {
                  if (*(_DWORD *)v28 == 2) {
                    WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v17);
                  }
                  else {
                    *(_DWORD *)v28 -= 2;
                  }
                }
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v30);
          }
          int v29 = 1;
          atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v29, 0, memory_order_release, memory_order_relaxed);
          if (v29 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v42;
    int8x16x2_t v42 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C1540;
  char v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C1540;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  char v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  uint64_t v1 = (unsigned char *)*((void *)a1 + 1);
  uint64_t v2 = *((void *)a1 + 3);
  if (v1[56])
  {
    v10[0] = *((void *)a1 + 1);
    uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(unsigned char *)result) {
      BOOL v4 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::hasRunnable(*((void *)a1 + 3));
    uint64_t v7 = *((void *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::takeResultRunnable((uint64_t)&v9, *((void *)a1 + 3));
      uint64_t v8 = v9;
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v9 + 16))(v10, v9);
      (*(void (**)(unsigned char *, uint64_t, void *))(*(void *)v1 + 24))(v1, v7, v10);
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::takeResult((WTF::StringImpl *)v10, *((void *)a1 + 3));
      return (WTF::StringImpl *)(*(uint64_t (**)(unsigned char *, uint64_t, void *))(*(void *)v1 + 24))(v1, v7, v10);
    }
  }
  return result;
}

unint64_t WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  int v5 = *(void **)a1;
  if (*(void *)a1 > a3 || (unint64_t)v5 + 8 * *(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  else
  {
    unint64_t v6 = a3 - (void)v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void **WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    unint64_t v3 = result;
    BOOL v4 = (void **)*result;
    uint64_t v5 = *((unsigned int *)result + 3);
    if (a2 < 2)
    {
      unint64_t v6 = result + 2;
      unsigned int *v3 = v3 + 2;
      *((_DWORD *)v3 + 2) = 1;
    }
    else
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      unint64_t v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
      *((_DWORD *)v3 + 2) = v2;
      unsigned int *v3 = v6;
    }
    uint64_t result = (void **)memcpy(v6, v4, 8 * v5);
    if (v3 + 2 != v4 && v4 != 0)
    {
      if (*v3 == v4)
      {
        unsigned int *v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v4, v7);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteMediaResource::shutdown(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  unint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C1568;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaResource::shutdown(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C1568;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteMediaResource::shutdown(void)::$_0,void>::call(IPC::Encoder *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v9 = *((void *)result + 2);
      uint64_t v3 = *(void *)(v2 + 112);
      uint64_t v4 = *(void *)(v2 + 88);
      uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v5 = 179;
      *((void *)v5 + 1) = v4;
      *((void *)v5 + 66) = (char *)v5 + 16;
      *((void *)v5 + 67) = 512;
      *((void *)v5 + 68) = 0;
      *((void *)v5 + 70) = 0;
      *((void *)v5 + 69) = 0;
      IPC::Encoder::encodeHeader(v5);
      unint64_t v10 = v5;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, &v9);
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v10, 0, 0);
      uint64_t result = v10;
      unint64_t v10 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v6);
        return (IPC::Encoder *)WTF::fastFree(v7, v8);
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteMediaResource::responseReceived(WebCore::ResourceResponse const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)::$_0,void,WebCore::ShouldContinuePolicyCheck>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C1590;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaResource::responseReceived(WebCore::ResourceResponse const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)::$_0,void,WebCore::ShouldContinuePolicyCheck>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C1590;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaResource::responseReceived(WebCore::ResourceResponse const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)::$_0,void,WebCore::ShouldContinuePolicyCheck>::call(uint64_t a1, uint64_t a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(v4 + 8));
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v5 = &unk_1EE9C15B8;
    v5[1] = v4;
    unint64_t v8 = v5;
    WTF::ensureOnMainThread();
    if (v8) {
      (*(void (**)(void *))(*v8 + 8))(v8);
    }
  }
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a2);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19RemoteMediaResource16responseReceivedERKN7WebCore16ResourceResponseEbONS_17CompletionHandlerIFvNS4_25ShouldContinuePolicyCheckEEEEEN3__0clIS9_EEDaT_EUlvE_vJEED1Ev(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9C15B8;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19RemoteMediaResource16responseReceivedERKN7WebCore16ResourceResponseEbONS_17CompletionHandlerIFvNS4_25ShouldContinuePolicyCheckEEEEEN3__0clIS9_EEDaT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C15B8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19RemoteMediaResource16responseReceivedERKN7WebCore16ResourceResponseEbONS_17CompletionHandlerIFvNS4_25ShouldContinuePolicyCheckEEEEEN3__0clIS9_EEDaT_EUlvE_vJEE4callEv(uint64_t a1)
{
  return WebKit::RemoteMediaResource::shutdown(*(atomic_uchar **)(a1 + 8));
}

void sub_198B0C7EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::ApplicationStateTracker::~ApplicationStateTracker(id *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358730;
  if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int v20 = 134217984;
    *(void *)&v20[4] = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - ~ApplicationStateTracker", v20, 0xCu);
  }
  WebKit::ApplicationStateTracker::setWindow(this, 0);
  WebKit::ApplicationStateTracker::setScene(this, 0);
  WebKit::ApplicationStateTracker::setViewController(this, 0);
  uint64_t v3 = (uint64_t)WebKit::ApplicationStateTracker::removeAllObservers(this);
  {
    int v6 = dword_1EB35A600;
    unsigned int v5 = dword_1EB35A604;
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
    WebKit::allApplicationStateTrackers(void)::trackers = 0;
    *(void *)&dword_1EB35A600 = 0;
  }
  dword_1EB35A600 = v6 + 1;
  if (v6 + 1 > v5)
  {
    uint64_t v7 = WebKit::allApplicationStateTrackers(void)::trackers;
    if (WebKit::allApplicationStateTrackers(void)::trackers)
    {
      int v8 = *(_DWORD *)(WebKit::allApplicationStateTrackers(void)::trackers - 4);
      if (!v8) {
        goto LABEL_26;
      }
      int v9 = 0;
      unsigned int v10 = v8 - 1;
      do
      {
        uint64_t v11 = v10;
        uint64_t v3 = *(void *)(v7 + 8 * v10);
        if ((unint64_t)(v3 + 1) >= 2 && !*(void *)(v3 + 8))
        {
          *(void *)(v7 + 8 * v10) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v3);
            uint64_t v3 = WTF::fastFree((WTF *)v3, v4);
          }
          *(void *)(v7 + 8 * v10) = -1;
          ++v9;
        }
        --v10;
      }
      while (v11);
      uint64_t v7 = WebKit::allApplicationStateTrackers(void)::trackers;
      if (v9)
      {
        *(_DWORD *)(WebKit::allApplicationStateTrackers(void)::trackers - 16) += v9;
        if (WebKit::allApplicationStateTrackers(void)::trackers) {
          int v12 = *(_DWORD *)(WebKit::allApplicationStateTrackers(void)::trackers - 12);
        }
        else {
          int v12 = 0;
        }
        *(_DWORD *)(WebKit::allApplicationStateTrackers(void)::trackers - 12) = v12 - v9;
        uint64_t v7 = WebKit::allApplicationStateTrackers(void)::trackers;
      }
      if (v7)
      {
        unsigned int v13 = *(_DWORD *)(v7 - 4);
        if (v13 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v13)
        {
          uint64_t v3 = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&WebKit::allApplicationStateTrackers(void)::trackers);
          uint64_t v7 = WebKit::allApplicationStateTrackers(void)::trackers;
          dword_1EB35A600 = 0;
          if (!WebKit::allApplicationStateTrackers(void)::trackers)
          {
            unsigned int v15 = 0;
            goto LABEL_30;
          }
          goto LABEL_29;
        }
LABEL_26:
        dword_1EB35A600 = 0;
LABEL_29:
        unsigned int v15 = *(_DWORD *)(v7 - 12);
        int v16 = 0x7FFFFFFF;
        if (v15 >= 0x7FFFFFFF)
        {
LABEL_31:
          dword_1EB35A604 = 2 * v16;
          goto LABEL_32;
        }
LABEL_30:
        int v16 = v15;
        goto LABEL_31;
      }
    }
    unsigned int v15 = 0;
    dword_1EB35A600 = 0;
    goto LABEL_30;
  }
LABEL_32:
  if (*this && *((void *)*this + 1))
  {
    *(void *)int v20 = *this;
    uint64_t v3 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(&WebKit::allApplicationStateTrackers(void)::trackers, v20);
    if (WebKit::allApplicationStateTrackers(void)::trackers)
    {
      uint64_t v17 = WebKit::allApplicationStateTrackers(void)::trackers
          + 8 * *(unsigned int *)(WebKit::allApplicationStateTrackers(void)::trackers - 4);
      if (v17 == v3) {
        goto LABEL_41;
      }
    }
    else
    {
      if (!v3) {
        goto LABEL_41;
      }
      uint64_t v17 = 0;
    }
    if (v17 != v3) {
      uint64_t v3 = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(&WebKit::allApplicationStateTrackers(void)::trackers, (unsigned int **)v3);
    }
  }
LABEL_41:
  WebKit::updateApplicationBackgroundState((WebKit *)v3);
  objc_destroyWeak(this + 15);
  objc_destroyWeak(this + 14);
  objc_destroyWeak(this + 13);
  objc_destroyWeak(this + 12);
  id v18 = this[5];
  this[5] = 0;
  if (v18) {
    CFRelease(v18);
  }
  objc_destroyWeak(this + 4);
  objc_destroyWeak(this + 3);
  objc_destroyWeak(this + 2);
  objc_destroyWeak(this + 1);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, v19);
}

void sub_198B0CBD8(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 + 120));
  objc_destroyWeak((id *)(v1 + 112));
  objc_destroyWeak((id *)(v1 + 104));
  objc_destroyWeak((id *)(v1 + 96));
  uint64_t v3 = *(const void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (v3) {
    CFRelease(v3);
  }
  objc_destroyWeak((id *)(v1 + 32));
  objc_destroyWeak((id *)(v1 + 24));
  objc_destroyWeak((id *)(v1 + 16));
  objc_destroyWeak((id *)(v1 + 8));
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)v1, v4);
  _Unwind_Resume(a1);
}

void ___ZN6WebKit23ApplicationStateTracker8setSceneEP7UIScene_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = *(WebKit::ApplicationStateTracker **)(a1 + 32);
    uint64_t v3 = qword_1EB358730;
    if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 134217984;
      unsigned int v5 = v2;
      _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - ApplicationStateTracker: UISceneDidEnterBackground", (uint8_t *)&v4, 0xCu);
    }
    WebKit::ApplicationStateTracker::applicationDidEnterBackground(v2);
  }
}

unsigned int *__destroy_helper_block_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__1(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void ___ZN6WebKit23ApplicationStateTracker8setSceneEP7UIScene_block_invoke_19(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = *(WebKit::ApplicationStateTracker **)(a1 + 32);
    uint64_t v3 = qword_1EB358730;
    if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 134217984;
      unsigned int v5 = v2;
      _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - ApplicationStateTracker: UISceneWillEnterForeground", (uint8_t *)&v4, 0xCu);
    }
    WebKit::ApplicationStateTracker::applicationWillEnterForeground(v2);
  }
}

unsigned int *__destroy_helper_block_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__2(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void ___ZN6WebKit23ApplicationStateTracker8setSceneEP7UIScene_block_invoke_21(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = qword_1EB358730;
    if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 134217984;
      uint64_t v7 = v2;
      _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - ApplicationStateTracker:willBeginSnapshotSequence()", (uint8_t *)&v6, 0xCu);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 8));
    unsigned int v5 = WeakRetained;
    if (WeakRetained)
    {
      [WeakRetained *(SEL *)(v2 + 72)];
      CFRelease(v5);
    }
  }
}

void sub_198B0CED8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

unsigned int *__destroy_helper_block_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__3(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void ___ZN6WebKit23ApplicationStateTracker8setSceneEP7UIScene_block_invoke_23(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = qword_1EB358730;
    if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 134217984;
      uint64_t v7 = v2;
      _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - ApplicationStateTracker:didCompleteSnapshotSequence()", (uint8_t *)&v6, 0xCu);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 8));
    unsigned int v5 = WeakRetained;
    if (WeakRetained)
    {
      [WeakRetained *(SEL *)(v2 + 80)];
      CFRelease(v5);
    }
  }
}

void sub_198B0CFF4(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

unsigned int *__destroy_helper_block_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__4(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void ___ZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewController_block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v3 = *(WebKit::ApplicationStateTracker **)(a1 + 32);
    int v4 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      if (_UIApplicationIsExtension()) {
        unsigned int v5 = "Extension";
      }
      else {
        unsigned int v5 = "ViewService";
      }
      pid_t v6 = getpid();
      int v7 = *(_DWORD *)(a1 + 48);
      int v8 = 136446722;
      int v9 = v5;
      __int16 v10 = 1024;
      pid_t v11 = v6;
      __int16 v12 = 1024;
      int v13 = v7;
      _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s has PID %d, host application PID=%d, didEnterBackground", (uint8_t *)&v8, 0x18u);
    }
    WebKit::ApplicationStateTracker::applicationDidEnterBackground(v3);
  }
}

uint64_t __copy_helper_block_e8_32c83_ZTSKZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewControllerE3__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  uint64_t v2 = *(atomic_uint **)(a2 + 40);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  *(void *)(result + 40) = v2;
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

unsigned int *__destroy_helper_block_e8_32c83_ZTSKZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewControllerE3__0(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void ___ZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewController_block_invoke_37(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v3 = *(WebKit::ApplicationStateTracker **)(a1 + 32);
    int v4 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      if (_UIApplicationIsExtension()) {
        unsigned int v5 = "Extension";
      }
      else {
        unsigned int v5 = "ViewService";
      }
      pid_t v6 = getpid();
      int v7 = *(_DWORD *)(a1 + 48);
      int v8 = 136446722;
      int v9 = v5;
      __int16 v10 = 1024;
      pid_t v11 = v6;
      __int16 v12 = 1024;
      int v13 = v7;
      _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s has PID %d, host application PID=%d, willEnterForeground", (uint8_t *)&v8, 0x18u);
    }
    WebKit::ApplicationStateTracker::applicationWillEnterForeground(v3);
  }
}

uint64_t __copy_helper_block_e8_32c83_ZTSKZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewControllerE3__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  uint64_t v2 = *(atomic_uint **)(a2 + 40);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  *(void *)(result + 40) = v2;
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

unsigned int *__destroy_helper_block_e8_32c83_ZTSKZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewControllerE3__1(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WebKit::ApplicationStateTracker::applicationDidEnterBackground(WebKit::ApplicationStateTracker *this)
{
  *((unsigned char *)this + 88) = 1;
  WebKit::updateApplicationBackgroundState(this);
  id WeakRetained = objc_loadWeakRetained((id *)this + 1);
  if (WeakRetained)
  {
    uint64_t v3 = WeakRetained;
    [WeakRetained *((SEL *)this + 7)];
    CFRelease(v3);
  }
}

void sub_198B0D340(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::ApplicationStateTracker::applicationWillEnterForeground(WebKit::ApplicationStateTracker *this)
{
  *((unsigned char *)this + 88) = 0;
  WebKit::updateApplicationBackgroundState(this);
  id WeakRetained = objc_loadWeakRetained((id *)this + 1);
  if (WeakRetained)
  {
    uint64_t v3 = WeakRetained;
    [WeakRetained *((SEL *)this + 8)];
    CFRelease(v3);
  }
}

void sub_198B0D3B4(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198B0D65C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B0DC30(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B0DDF8(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B0DEB4(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B0DF70(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

void sub_198B0E3F0(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198B0E5CC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WKContextIsPlugInUpdateAvailable()
{
  return 0;
}

uint64_t WKContextCopyPlugInInfoForBundleIdentifier()
{
  return 0;
}

WTF::StringImpl *WKContextRegisterSchemeForCustomProtocol(uint64_t a1, void *a2)
{
  if (a2)
  {
    [a2 _apiObject];
    WTF::String::isolatedCopy();
  }
  else
  {
    int v4 = 0;
  }
  WebKit::WebProcessPool::registerGlobalURLSchemeAsHavingCustomProtocolHandlers((WebKit *)&v4, (const WTF::String *)a2);
  uint64_t result = v4;
  int v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKContextUnregisterSchemeForCustomProtocol(uint64_t a1, void *a2)
{
  if (a2)
  {
    [a2 _apiObject];
    WTF::String::isolatedCopy();
  }
  else
  {
    int v4 = 0;
  }
  WebKit::WebProcessPool::unregisterGlobalURLSchemeAsHavingCustomProtocolHandlers((WebKit *)&v4, (const WTF::String *)a2);
  uint64_t result = v4;
  int v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPlugInInfoPathKey()
{
  return 0;
}

uint64_t WKPlugInInfoBundleIdentifierKey()
{
  return 0;
}

uint64_t WKPlugInInfoVersionKey()
{
  return 0;
}

uint64_t WKPlugInInfoLoadPolicyKey()
{
  return 0;
}

uint64_t WKPlugInInfoUpdatePastLastBlockedVersionIsKnownAvailableKey()
{
  return 0;
}

uint64_t WKPlugInInfoIsSandboxedKey()
{
  return 0;
}

uint64_t WKContextHandlesSafeBrowsing()
{
  return 1;
}

id WKNotificationCopyDictionaryRepresentation(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  uint64_t v1 = (void *)WebCore::NotificationData::dictionaryRepresentation((WebCore::NotificationData *)(a1 + 32));

  return v1;
}

void sub_198B0E8F4(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_198B0E9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B0EB3C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WKPageCreateObservableState(CFTypeRef *a1)
{
  uint64_t v2 = [WKObservablePageState alloc];
  if (a1)
  {
    a1 = (CFTypeRef *)[(CFTypeRef *)a1 _apiObject];
    CFRetain(a1[1]);
  }
  pid_t v6 = a1;
  uint64_t v3 = [(WKObservablePageState *)v2 initWithPage:&v6];
  int v4 = v6;
  pid_t v6 = 0;
  if (v4) {
    CFRelease(v4[1]);
  }
  return v3;
}

void sub_198B0ECF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t WKPageGetObjectRegistry()
{
  return 0;
}

BOOL WKPageIsURLKnownHSTSHost(void *a1, void *a2)
{
  uint64_t v3 = (WebKit::WebProcessPool *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)([a1 _apiObject] + 48) + 24));
  if (a2) {
    uint64_t v4 = [a2 _apiObject];
  }
  else {
    uint64_t v4 = 0;
  }

  return WebKit::WebProcessPool::isURLKnownHSTSHost(v3, (WTF::StringImpl **)(v4 + 16));
}

CFTypeRef WKPageLoadURLRequestReturningNavigation(void *a1, void *a2)
{
  if (a2) {
    uint64_t v3 = [a2 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)v17, (const String *)(v3 + 16));
  uint64_t v4 = *(_DWORD **)(v3 + 168);
  if (v4) {
    *v4 += 2;
  }
  id v18 = v4;
  unsigned int v5 = *(_DWORD **)(v3 + 176);
  if (v5) {
    *v5 += 2;
  }
  uint64_t v19 = v5;
  pid_t v6 = *(_DWORD **)(v3 + 184);
  if (v6) {
    ++*v6;
  }
  uint64_t v7 = *(void *)(v3 + 192);
  int v20 = v6;
  uint64_t v21 = v7;
  char v22 = *(unsigned char *)(v3 + 200);
  int v8 = *(const void **)(v3 + 208);
  CFTypeRef cf = v8;
  if (v8) {
    CFRetain(v8);
  }
  if (a1) {
    uint64_t v9 = [a1 _apiObject];
  }
  else {
    uint64_t v9 = 0;
  }
  WebKit::WebPageProxy::loadRequest(v9, (WebCore::ResourceRequestBase *)v17, 1, 0, 0, &v16);
  uint64_t v10 = v16;
  if (v16)
  {
    pid_t v11 = *(const void **)(v16 + 8);
    if (v11)
    {
      CFRetain(*(CFTypeRef *)(v16 + 8));
      __int16 v12 = *(const void **)(v10 + 8);
    }
    else
    {
      __int16 v12 = 0;
    }
    CFRelease(v12);
  }
  else
  {
    pid_t v11 = 0;
  }
  CFTypeRef v13 = (id)CFMakeCollectable(v11);
  CFTypeRef v14 = cf;
  CFTypeRef cf = 0;
  if (v14) {
    CFRelease(v14);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v17);
  return v13;
}

void sub_198B0EEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef cf)
{
}

CFTypeRef WKPageLoadFileReturningNavigation(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    unsigned int v5 = (WebKit::WebPageProxy *)[a1 _apiObject];
    if (a2) {
      goto LABEL_3;
    }
LABEL_6:
    pid_t v6 = 0;
    goto LABEL_7;
  }
  unsigned int v5 = 0;
  if (!a2) {
    goto LABEL_6;
  }
LABEL_3:
  pid_t v6 = *(WTF::StringImpl **)([a2 _apiObject] + 16);
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
LABEL_7:
  id v18 = v6;
  if (a3)
  {
    uint64_t v7 = *(WTF::StringImpl **)([a3 _apiObject] + 16);
    if (v7) {
      *(_DWORD *)v7 += 2;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v17 = v7;
  WebKit::WebPageProxy::loadFile(v5, (const WTF::String *)&v18, (const WTF::String *)&v17, 1, 0);
  uint64_t v8 = v19;
  if (v19)
  {
    uint64_t v19 = 0;
    uint64_t v9 = *(const void **)(v8 + 8);
    if (v9)
    {
      CFRetain(*(CFTypeRef *)(v8 + 8));
      uint64_t v10 = *(const void **)(v8 + 8);
    }
    else
    {
      uint64_t v10 = 0;
    }
    CFRelease(v10);
  }
  else
  {
    uint64_t v9 = 0;
  }
  CFTypeRef v12 = (id)CFMakeCollectable(v9);
  uint64_t v13 = v19;
  uint64_t v19 = 0;
  if (v13) {
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  CFTypeRef v14 = v17;
  uint64_t v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v11);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  unsigned int v15 = v18;
  id v18 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v11);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  return v12;
}

void sub_198B0F060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12)
{
  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a12) {
    CFRelease(*(CFTypeRef *)(a12 + 8));
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v14);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v14);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

id WKPageGetWebView(id result)
{
  if (result)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)([result _apiObject] + 32) + 2016));
    uint64_t v2 = (void *)CFMakeCollectable(WeakRetained);
    return v2;
  }
  return result;
}

uint64_t WKPageSetFullscreenDelegate(void *a1, void *a2)
{
  uint64_t v3 = *(uint64_t (****)(void, uint64_t))([a1 _apiObject] + 416);
  if ((**v3)(v3, 1))
  {
    return WebKit::FullscreenClient::setDelegate((uint64_t)v3, a2);
  }
  else
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WKPageGetFullscreenDelegate(void *a1)
{
  uint64_t v1 = *(id **)([a1 _apiObject] + 416);
  if ((*(uint64_t (**)(id *, uint64_t))*v1)(v1, 1))
  {
    WebKit::DiagnosticLoggingClient::delegate(v1, &cf);
    uint64_t v2 = (void *)CFMakeCollectable(cf);
    return (uint64_t)v2;
  }
  else
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WKProtectionSpaceCopyNSURLProtectionSpace(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  uint64_t v1 = (void *)WebCore::ProtectionSpace::nsSpace((WebCore::ProtectionSpace *)(a1 + 16));

  return [v1 copy];
}

void *WKWebsiteDataStoreGetDataStore(void *result)
{
  if (result) {
    return *(void **)([result _apiObject] + 8);
  }
  return result;
}

WebKit::PageLoadStateObserver *WebKit::PageLoadStateObserver::PageLoadStateObserver(WebKit::PageLoadStateObserver *this, objc_object *a2, NSString *a3)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EE9C1778;
  *((void *)this + 2) = 0;
  objc_initWeak((id *)this + 2, a2);
  *((void *)this + 3) = [(NSString *)a3 copy];
  return this;
}

void sub_198B0F320(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v1, v4);
  _Unwind_Resume(a1);
}

void WebKit::PageLoadStateObserver::~PageLoadStateObserver(WebKit::PageLoadStateObserver *this)
{
  *(void *)this = &unk_1EE9C1778;
  uint64_t v2 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    CFRelease(v2);
  }
  objc_destroyWeak((id *)this + 2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

{
  const void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE9C1778;
  uint64_t v2 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    CFRelease(v2);
  }
  objc_destroyWeak((id *)this + 2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);

  WTF::fastFree(this, v4);
}

void WebKit::PageLoadStateObserver::willChangeIsLoading(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained willChangeValueForKey:@"loading"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B0F46C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::didChangeIsLoading(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained didChangeValueForKey:@"loading"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B0F4DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::willChangeTitle(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained willChangeValueForKey:@"title"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B0F54C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::didChangeTitle(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained didChangeValueForKey:@"title"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B0F5BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::willChangeActiveURL(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained willChangeValueForKey:this[3]];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B0F62C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::didChangeActiveURL(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained didChangeValueForKey:this[3]];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B0F69C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::willChangeHasOnlySecureContent(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained willChangeValueForKey:@"hasOnlySecureContent"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B0F70C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::didChangeHasOnlySecureContent(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained didChangeValueForKey:@"hasOnlySecureContent"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B0F77C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::willChangeEstimatedProgress(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained willChangeValueForKey:@"estimatedProgress"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B0F7FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::didChangeEstimatedProgress(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained didChangeValueForKey:@"estimatedProgress"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B0F86C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::willChangeWebProcessIsResponsive(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained willChangeValueForKey:@"_webProcessIsResponsive"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B0F8FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::didChangeWebProcessIsResponsive(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained didChangeValueForKey:@"_webProcessIsResponsive"];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B0F96C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::RemoteMediaResourceLoader::~RemoteMediaResourceLoader(WebKit::RemoteMediaResourceLoader *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  uint64_t vars8;

  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  WTF::fastFree(this, a2);
}

uint64_t WebKit::RemoteMediaResourceLoader::requestResource@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, WTF::ThreadSafeWeakPtrControlBlock **a4@<X8>)
{
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t result = *(void *)(v4 + 8);
    if (result) {
      return WebKit::RemoteMediaPlayerProxy::requestResource(result, a2, a3, a4);
    }
  }
  *a4 = 0;
  return result;
}

uint64_t WebKit::RemoteMediaResourceLoader::sendH2Ping(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0)
  {
    pid_t v6 = *(os_unfair_lock_s **)(v5 + 112);
    *(void *)&v18[0] = a2;
    return IPC::Connection::sendWithAsyncReply<Messages::MediaPlayerPrivateRemote::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(v6, (uint64_t **)v18, a3, *(void *)(v5 + 88), 0);
  }
  else
  {
    WebCore::createInternalError();
    __int16 v21 = v14;
    int v20 = v13;
    v18[0] = *(_OWORD *)v9;
    v18[1] = v10;
    v18[2] = v11;
    uint64_t v19 = v12;
    CFTypeRef v22 = cf;
    char v23 = v16;
    int v24 = 1;
    uint64_t v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v8 + 16))(v8, v18);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    if (v24 != -1) {
      ((void (*)(char *, _OWORD *))off_1EE9C1BA8[v24])(&v17, v18);
    }
    return 0;
  }
}

void WebKit::RemoteMediaResourceManager::~RemoteMediaResourceManager(WebKit::RemoteMediaResourceManager *this)
{
  char v2 = 0;
  *(void *)this = &unk_1EE9C18E8;
  uint64_t v3 = (char *)this + 24;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 24, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0]((char *)this + 24);
  }
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v5 = &unk_1EE9C1EA8;
  v5[1] = v4;
  uint64_t v19 = v5;
  WTF::callOnMainRunLoop();
  if (v19) {
    (*(void (**)(void *))(*v19 + 8))(v19);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  uint64_t v8 = (atomic_uchar *volatile *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v8)
  {
    char v9 = 0;
    atomic_uchar *volatile v10 = *v8;
    atomic_compare_exchange_strong_explicit(*v8, (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
    if (v9) {
      MEMORY[0x19972E8D0](v10);
    }
    uint64_t v11 = *((void *)v10 + 1);
    uint64_t v12 = v11 - 1;
    *((void *)v10 + 1) = v11 - 1;
    if (v11 == 1)
    {
      uint64_t v18 = *((void *)v10 + 2);
      uint64_t v14 = *((void *)v10 + 3);
      *((void *)v10 + 3) = 0;
      BOOL v13 = v18 == 0;
    }
    else
    {
      BOOL v13 = 0;
      uint64_t v14 = 0;
    }
    int v15 = 1;
    atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
    if (v15 == 1)
    {
      if (v12) {
        goto LABEL_16;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      if (v12) {
        goto LABEL_16;
      }
    }
    uint64_t v16 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v16 = &unk_1EE9B37E8;
    *(void *)(v16 + 8) = v10;
    *(void *)(v16 + 16) = v14;
    *(unsigned char *)(v16 + 24) = v13;
    uint64_t v20 = v16;
    WTF::ensureOnMainRunLoop();
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
  }
LABEL_16:
  uint64_t v17 = *((void *)this + 4);
  if (v17) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v17, v6);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v6);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteMediaResourceManager::~RemoteMediaResourceManager(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *volatile **WebKit::RemoteMediaResourceManager::stopListeningForIPC(WebKit::RemoteMediaResourceManager *this)
{
  return WebKit::RemoteMediaResourceManager::initializeConnection(this, 0);
}

atomic_uchar *volatile **WebKit::RemoteMediaResourceManager::initializeConnection(WebKit::RemoteMediaResourceManager *this, atomic_uchar *volatile *a2)
{
  uint64_t v4 = (atomic_uchar *volatile **)((char *)this + 40);
  uint64_t result = (atomic_uchar *volatile **)*((void *)this + 5);
  if (result != (atomic_uchar *volatile **)a2)
  {
    if (result) {
      IPC::Connection::removeWorkQueueMessageReceiver((uint64_t)result, 0x64u, 0);
    }
    uint64_t result = WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::operator=(v4, a2);
    pid_t v6 = *v4;
    if (v6)
    {
      WebKit::RemoteMediaResourceLoader::defaultQueue(&v7);
      IPC::Connection::addWorkQueueMessageReceiver((uint64_t)v6, 0x64u, (uint64_t)v7, (uint64_t)this, 0);
      uint64_t result = v7;
      int v7 = 0;
      if (result) {
        return (atomic_uchar *volatile **)(*((uint64_t (**)(atomic_uchar *volatile **))*result + 7))(result);
      }
    }
  }
  return result;
}

atomic_uchar *volatile **WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::operator=(atomic_uchar *volatile **a1, atomic_uchar *volatile *a2)
{
  if (a2)
  {
    char v4 = 0;
    atomic_uchar *volatile v5 = *a2;
    int v6 = 1;
    atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      MEMORY[0x19972E8D0](v5);
    }
    ++*((void *)v5 + 1);
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
    }
  }
  int v7 = *a1;
  *a1 = a2;
  if (v7)
  {
    char v8 = 0;
    atomic_uchar *volatile v9 = *v7;
    atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
    if (v8) {
      MEMORY[0x19972E8D0](v9);
    }
    uint64_t v10 = *((void *)v9 + 1);
    uint64_t v11 = v10 - 1;
    *((void *)v9 + 1) = v10 - 1;
    if (v10 == 1)
    {
      uint64_t v17 = *((void *)v9 + 2);
      uint64_t v13 = *((void *)v9 + 3);
      *((void *)v9 + 3) = 0;
      BOOL v12 = v17 == 0;
    }
    else
    {
      BOOL v12 = 0;
      uint64_t v13 = 0;
    }
    int v14 = 1;
    atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 == 1)
    {
      if (v11) {
        return a1;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      if (v11) {
        return a1;
      }
    }
    uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v15 = &unk_1EE9B37E8;
    *(void *)(v15 + 8) = v9;
    *(void *)(v15 + 16) = v13;
    *(unsigned char *)(v15 + 24) = v12;
    uint64_t v18 = v15;
    WTF::ensureOnMainRunLoop();
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  return a1;
}

atomic_uchar *WebKit::RemoteMediaResourceManager::addMediaResource(uint64_t a1, uint64_t a2, WTF::ThreadSafeWeakPtrControlBlock *a3)
{
  char v5 = 0;
  uint64_t v14 = a2;
  int v6 = (atomic_uchar *)(a1 + 24);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 24), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 24);
  }
  int v7 = (uint64_t *)(a1 + 32);
  char v8 = (atomic_uchar *)*((void *)a3 + 1);
  if (v8) {
    char v8 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v8);
  }
  v13[0] = (WTF::ThreadSafeWeakPtrControlBlock *)v8;
  v13[1] = a3;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::add<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>(v7, &v14, (uint64_t *)v13, (uint64_t)&v12);
  uint64_t result = (atomic_uchar *)v13[0];
  v13[0] = 0;
  if (result) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v9);
  }
  int v11 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::add<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  unint64_t v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  unsigned int v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~(v14 << 27)));
  uint64_t v16 = (uint64_t *)(v8 + 24 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          unsigned int v24 = 0;
        }
        else {
          unsigned int v24 = *(_DWORD *)(v8 - 4);
        }
        char v29 = 0;
        uint64_t v30 = v8 + 24 * v24;
        goto LABEL_31;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 24 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  uint64_t v20 = *a3;
  uint64_t v21 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result) {
    uint64_t result = (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)result, a2);
  }
  unsigned char v16[2] = v21;
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v25 = *v6;
  if (*v6) {
    int v26 = *(_DWORD *)(v25 - 12);
  }
  else {
    int v26 = 0;
  }
  uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
  unint64_t v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_24:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
      uint64_t v16 = result;
      uint64_t v25 = *v6;
      if (*v6) {
        LODWORD(v28) = *(_DWORD *)(v25 - 4);
      }
      else {
        LODWORD(v28) = 0;
      }
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_24;
  }
  uint64_t v30 = v25 + 24 * v28;
  char v29 = 1;
LABEL_31:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v30;
  *(unsigned char *)(a4 + 16) = v29;
  return result;
}

void *WebKit::RemoteMediaResourceManager::removeMediaResource(uint64_t a1, uint64_t a2)
{
  char v3 = 0;
  uint64_t v9 = a2;
  char v4 = (atomic_uchar *)(a1 + 24);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 24), (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    MEMORY[0x19972E8D0](a1 + 24);
  }
  uint64_t result = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 32), &v9);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    int v7 = (void *)(v6 + 24 * *(unsigned int *)(v6 - 4));
    if (v7 == result) {
      goto LABEL_10;
    }
  }
  else
  {
    if (!result) {
      goto LABEL_10;
    }
    int v7 = 0;
  }
  if (v7 != result) {
    uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove((uint64_t *)(a1 + 32), result);
  }
LABEL_10:
  int v8 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    return (void *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  return result;
}

atomic_uchar *WebKit::RemoteMediaResourceManager::resourceForId(atomic_uchar *result, uint64_t a2, uint64_t a3)
{
  char v5 = result;
  char v6 = 0;
  int v7 = (atomic_uchar *)(a2 + 24);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 24), (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t result = (atomic_uchar *)MEMORY[0x19972E8D0](a2 + 24);
  }
  uint64_t v8 = *(void *)(a2 + 32);
  if (v8)
  {
    int v9 = *(_DWORD *)(v8 - 8);
    unint64_t v10 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    unsigned int v13 = v9 & ((v12 >> 31) ^ v12);
    uint64_t v14 = *(void *)(v8 + 24 * v13);
    if (v14 == a3)
    {
LABEL_8:
      uint64_t result = *(atomic_uchar **)(v8 + 24 * v13 + 8);
      if (result)
      {
        uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakRef(result);
        if (result)
        {
          uint64_t v16 = result;
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(v5, result, *(void *)(v8 + 24 * v13 + 16));
          uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v16, v17);
          goto LABEL_12;
        }
      }
    }
    else
    {
      int v15 = 1;
      while (v14)
      {
        unsigned int v13 = (v13 + v15) & v9;
        uint64_t v14 = *(void *)(v8 + 24 * v13);
        ++v15;
        if (v14 == a3) {
          goto LABEL_8;
        }
      }
    }
  }
  *(void *)char v5 = 0;
LABEL_12:
  int v18 = 1;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
  if (v18 != 1)
  {
    return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  return result;
}

atomic_uchar *WebKit::RemoteMediaResourceManager::responseReceived(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t *a5)
{
  WebKit::RemoteMediaResourceLoader::defaultQueue(&v15);
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 56))(v10);
  }
  WebKit::RemoteMediaResourceManager::resourceForId((atomic_uchar *)&v15, a1, a2);
  uint64_t v11 = v15;
  if (v15)
  {
    WebKit::RemoteMediaResource::responseReceived(v15, a3, a4, a5);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 8), v12);
  }
  else
  {
    uint64_t v14 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v14 + 16))(v14, 0);
    return (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
}

void WebKit::RemoteMediaResourceManager::redirectReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WebKit::RemoteMediaResourceLoader::defaultQueue(v15);
  uint64_t v10 = v15[0];
  v15[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 56))(v10);
  }
  WebKit::RemoteMediaResourceManager::resourceForId((atomic_uchar *)&v17, a1, a2);
  uint64_t v11 = v17;
  if (v17)
  {
    WebKit::RemoteMediaResource::redirectReceived(v17, a3, a4, (uint64_t)a5);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 8), v12);
  }
  else
  {
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)v15);
    uint64_t v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v13 + 16))(v13, v15);
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    CFTypeRef v14 = cf;
    CFTypeRef cf = 0;
    if (v14) {
      CFRelease(v14);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v15);
  }
}

atomic_uchar *WebKit::RemoteMediaResourceManager::dataSent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WebKit::RemoteMediaResourceLoader::defaultQueue(&v12);
  uint64_t v8 = v12;
  unint64_t v12 = 0;
  if (v8) {
    (*(void (**)(WebKit::RemoteMediaResource *))(*(void *)v8 + 56))(v8);
  }
  uint64_t result = WebKit::RemoteMediaResourceManager::resourceForId((atomic_uchar *)&v12, a1, a2);
  uint64_t v10 = v12;
  if (v12)
  {
    WebKit::RemoteMediaResource::dataSent(v12, a3, a4);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*((atomic_uchar **)v10 + 1), v11);
  }
  return result;
}

void WebKit::RemoteMediaResourceManager::dataReceived(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4)
{
  WebKit::RemoteMediaResourceManager::resourceForId((atomic_uchar *)&v19, a1, a2);
  char v6 = v19;
  if (v19)
  {
    IPC::SharedBufferReference::sharedCopy(a3, &v16);
    if (v16)
    {
      WebCore::SharedMemory::createHandle();
      if (!v18)
      {
        LOBYTE(v14[0]) = 0;
        char v15 = 0;
        uint64_t v13 = *a4;
        *a4 = 0;
        (*(void (**)(uint64_t, WebCore::SharedBuffer **))(*(void *)v13 + 16))(v13, v14);
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        if (v15) {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v14);
        }
        goto LABEL_10;
      }
      WebCore::SharedMemory::createSharedBuffer(v16);
      WebKit::RemoteMediaResource::dataReceived((WebKit::RemoteMediaResource *)v6, v14[0]);
      uint64_t v8 = (unsigned int *)v14[0];
      v14[0] = 0;
      if (v8) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v8, v7);
      }
    }
    else
    {
      v17[0] = 0;
      char v18 = 0;
    }
    uint64_t v10 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v10 + 16))(v10, v17);
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
LABEL_10:
    if (v18) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v17);
    }
    unint64_t v12 = (unsigned int *)v16;
    uint64_t v16 = 0;
    if (v12) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v12);
    }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(v6[1], v11);
    return;
  }
  v17[0] = 0;
  char v18 = 0;
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 16))(v9, v17);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  if (v18) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v17);
  }
}

atomic_uchar *WebKit::RemoteMediaResourceManager::accessControlCheckFailed(uint64_t a1, uint64_t a2, const WebCore::ResourceError *a3)
{
  WebKit::RemoteMediaResourceLoader::defaultQueue(&v10);
  char v6 = v10;
  uint64_t v10 = 0;
  if (v6) {
    (*(void (**)(WebKit::RemoteMediaResource *))(*(void *)v6 + 56))(v6);
  }
  uint64_t result = WebKit::RemoteMediaResourceManager::resourceForId((atomic_uchar *)&v10, a1, a2);
  uint64_t v8 = v10;
  if (v10)
  {
    WebKit::RemoteMediaResource::accessControlCheckFailed(v10, a3);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*((atomic_uchar **)v8 + 1), v9);
  }
  return result;
}

atomic_uchar *WebKit::RemoteMediaResourceManager::loadFailed(uint64_t a1, uint64_t a2, const WebCore::ResourceError *a3)
{
  WebKit::RemoteMediaResourceLoader::defaultQueue(&v10);
  char v6 = v10;
  uint64_t v10 = 0;
  if (v6) {
    (*(void (**)(WebKit::RemoteMediaResource *))(*(void *)v6 + 56))(v6);
  }
  uint64_t result = WebKit::RemoteMediaResourceManager::resourceForId((atomic_uchar *)&v10, a1, a2);
  uint64_t v8 = v10;
  if (v10)
  {
    WebKit::RemoteMediaResource::loadFailed(v10, a3);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*((atomic_uchar **)v8 + 1), v9);
  }
  return result;
}

atomic_uchar *WebKit::RemoteMediaResourceManager::loadFinished(uint64_t a1, uint64_t a2, const WebCore::NetworkLoadMetrics *a3)
{
  WebKit::RemoteMediaResourceLoader::defaultQueue(&v10);
  char v6 = v10;
  uint64_t v10 = 0;
  if (v6) {
    (*(void (**)(WebKit::RemoteMediaResource *))(*(void *)v6 + 56))(v6);
  }
  uint64_t result = WebKit::RemoteMediaResourceManager::resourceForId((atomic_uchar *)&v10, a1, a2);
  uint64_t v8 = v10;
  if (v10)
  {
    WebKit::RemoteMediaResource::loadFinished(v10, a3);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*((atomic_uchar **)v8 + 1), v9);
  }
  return result;
}

uint64_t WebKit::RemoteMediaSourceProxy::RemoteMediaSourceProxy(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_1994F5F10;
  *(void *)(v10 + 24) = a1;
  *(void *)a1 = &unk_1EE9C1920;
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = &unk_1EE9C1980;
  *(void *)(a1 + 24) = 0;
  uint64_t v11 = *(atomic_uchar **)(a2 + 16);
  if (v11) {
    uint64_t v11 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v11);
  }
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  *(unsigned char *)(a1 + 56) = a4;
  *(void *)(a1 + 64) = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a5 + 8), a5);
  unint64_t v12 = *(atomic_uint **)(a5 + 8);
  if (v12) {
    atomic_fetch_add(v12, 1u);
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = v12;
  uint64_t v13 = *(void *)(a1 + 48);
  v16[0] = 105;
  v16[1] = v13;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(a2 + 72), (unsigned __int8 *)v16, a1 + 16, &v15);
  return a1;
}

void WebKit::RemoteMediaSourceProxy::~RemoteMediaSourceProxy(unsigned int **this)
{
  WebKit::RemoteMediaSourceProxy::disconnect((WebKit::RemoteMediaSourceProxy *)this);
  uint64_t v3 = *((unsigned int *)this + 23);
  if (v3)
  {
    char v4 = this[10];
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)char v4 = 0;
      if (v6) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 8), v2);
      }
      v4 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  int v7 = (WTF *)this[10];
  if (v7)
  {
    this[10] = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v7, v2);
  }
  uint64_t v8 = this[9];
  this[9] = 0;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v2);
  }
  uint64_t v9 = this[8];
  this[8] = 0;
  if (v9) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*((atomic_uchar **)v9 + 1), v2);
  }
  uint64_t v10 = (atomic_uchar *)this[4];
  this[4] = 0;
  if (v10) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v10, v2);
  }
  this[2] = (unsigned int *)&unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 3, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteMediaSourceProxy::~RemoteMediaSourceProxy(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *WebKit::RemoteMediaSourceProxy::disconnect(WebKit::RemoteMediaSourceProxy *this)
{
  uint64_t result = (atomic_uchar *)*((void *)this + 4);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((void *)this + 5), &v5);
    if (v5)
    {
      IPC::MessageReceiverMap::removeMessageReceiver(v5 + 64, 0x69u, *((void *)this + 6));
      uint64_t result = (atomic_uchar *)*((void *)this + 4);
      *((void *)this + 4) = 0;
      if (result) {
        uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v3);
      }
      *((void *)this + 5) = 0;
      uint64_t v4 = v5;
      uint64_t v5 = 0;
      if (v4) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v4 + 16));
      }
    }
  }
  return result;
}

void non-virtual thunk to'WebKit::RemoteMediaSourceProxy::~RemoteMediaSourceProxy(unsigned int **this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteMediaSourceProxy::~RemoteMediaSourceProxy(this - 2);

  WTF::fastFree(v1, v2);
}

atomic_uchar *WebKit::RemoteMediaSourceProxy::setPrivateAndOpen(atomic_uchar *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *((void *)result + 8);
  *((void *)result + 8) = v2;
  if (v3) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return result;
}

atomic_uchar *WebKit::RemoteMediaSourceProxy::waitForTarget@<X0>(WebKit::RemoteMediaSourceProxy *this@<X0>, const WebCore::SeekTarget *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = (atomic_uchar *)*((void *)this + 4);
  if (!v5)
  {
    uint64_t v21 = 0;
LABEL_3:
    LOBYTE(v23) = 4;
    int v26 = 0;
    *(void *)&long long v27 = 0;
    *((void *)&v27 + 1) = "waitForTarget";
    *(void *)&long long v28 = 0;
    uint64_t result = (atomic_uchar *)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((char *)&v23, (WTF::Logger::LogSiteIdentifier *)&v26, a3);
    goto LABEL_4;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, *((void *)this + 5), &v21);
  if (!v21) {
    goto LABEL_3;
  }
  uint64_t v9 = *(os_unfair_lock_s **)(v21 + 56);
  uint64_t v10 = *((void *)this + 6);
  int v26 = 0;
  *(void *)&long long v27 = 0;
  *((void *)&v27 + 1) = "sendWithPromisedReply";
  *(void *)&long long v28 = 0;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v23, 0, (WTF::Logger::LogSiteIdentifier *)&v26);
  uint64_t v11 = v23;
  if (v23)
  {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 8), 1u);
    uint64_t v12 = v23;
  }
  else
  {
    uint64_t v12 = 0;
  }
  *a3 = v11;
  uint64_t v23 = 0;
  long long v27 = v24;
  long long v28 = v25;
  uint64_t v13 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v13 = &unk_1EE9C1F20;
  *(void *)(v13 + 8) = v12;
  int v26 = 0;
  long long v14 = v28;
  *(_OWORD *)(v13 + 16) = v27;
  *(_OWORD *)(v13 + 3WebKit::RemoteMediaSourceProxy::~RemoteMediaSourceProxy(this - 2) = v14;
  v22[0] = v13;
  v22[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v26);
  char v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v15 = 195;
  *((void *)v15 + 1) = v10;
  *((void *)v15 + 66) = (char *)v15 + 16;
  *((void *)v15 + 67) = 512;
  *((void *)v15 + 68) = 0;
  *((void *)v15 + 70) = 0;
  *((void *)v15 + 69) = 0;
  IPC::Encoder::encodeHeader(v15);
  int v26 = v15;
  IPC::ArgumentCoder<WebCore::SeekTarget,void>::encode(v15, (uint64_t)a2);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v9, &v26, v22, 0, 0);
  uint64_t v17 = v26;
  int v26 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v16);
    WTF::fastFree(v19, v20);
  }
  uint64_t v18 = v22[0];
  v22[0] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t result = (atomic_uchar *)WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v23);
LABEL_4:
  uint64_t v7 = v21;
  uint64_t v21 = 0;
  if (v7) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v7 + 16));
  }
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>@<X0>(char *a1@<X0>, WTF::Logger::LogSiteIdentifier *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x88);
  uint64_t v7 = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::NativePromise(v6, a2);
  *a3 = v7;

  return WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v7, a1, a2);
}

atomic_uchar *WebKit::RemoteMediaSourceProxy::seekToTime@<X0>(WebKit::RemoteMediaSourceProxy *this@<X0>, const WTF::MediaTime *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = (atomic_uchar *)*((void *)this + 4);
  if (!v5)
  {
    uint64_t v21 = 0;
LABEL_3:
    LOBYTE(v23) = 4;
    int v26 = 0;
    *(void *)&long long v27 = 0;
    *((void *)&v27 + 1) = "seekToTime";
    *(void *)&long long v28 = 0;
    uint64_t result = (atomic_uchar *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((char *)&v23, (WTF::Logger::LogSiteIdentifier *)&v26, a3);
    goto LABEL_4;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, *((void *)this + 5), &v21);
  if (!v21) {
    goto LABEL_3;
  }
  uint64_t v9 = *(os_unfair_lock_s **)(v21 + 56);
  uint64_t v10 = *((void *)this + 6);
  int v26 = 0;
  *(void *)&long long v27 = 0;
  *((void *)&v27 + 1) = "sendWithPromisedReply";
  *(void *)&long long v28 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v23, 0, (WTF::Logger::LogSiteIdentifier *)&v26);
  uint64_t v11 = v23;
  if (v23)
  {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 8), 1u);
    uint64_t v12 = v23;
  }
  else
  {
    uint64_t v12 = 0;
  }
  *a3 = v11;
  uint64_t v23 = 0;
  long long v27 = v24;
  long long v28 = v25;
  uint64_t v13 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v13 = &unk_1EE9C1F70;
  *(void *)(v13 + 8) = v12;
  int v26 = 0;
  long long v14 = v28;
  *(_OWORD *)(v13 + 16) = v27;
  *(_OWORD *)(v13 + 3WebKit::RemoteMediaSourceProxy::~RemoteMediaSourceProxy(this - 2) = v14;
  v22[0] = v13;
  v22[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v26);
  char v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v15 = 194;
  *((void *)v15 + 1) = v10;
  *((void *)v15 + 66) = (char *)v15 + 16;
  *((void *)v15 + 67) = 512;
  *((void *)v15 + 68) = 0;
  *((void *)v15 + 70) = 0;
  *((void *)v15 + 69) = 0;
  IPC::Encoder::encodeHeader(v15);
  int v26 = v15;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v15, (uint64_t)a2);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v9, &v26, v22, 0, 0);
  uint64_t v17 = v26;
  int v26 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v16);
    WTF::fastFree(v19, v20);
  }
  uint64_t v18 = v22[0];
  v22[0] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t result = (atomic_uchar *)WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v23);
LABEL_4:
  uint64_t v7 = v21;
  uint64_t v21 = 0;
  if (v7) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v7 + 16));
  }
  return result;
}

atomic_uchar *WebKit::RemoteMediaSourceProxy::addSourceBuffer(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = *(atomic_uchar **)(a1 + 32);
  if (result) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(void *)(a1 + 40), &v32);
  }
  else {
    uint64_t v32 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 72);
  if (v7 && *(void *)(v7 + 8))
  {
    if (!v32) {
      return result;
    }
    uint64_t v31 = 0;
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, void, uint64_t *))(**(void **)(a1 + 64) + 32))(*(void *)(a1 + 64), a2, *(unsigned __int8 *)(a1 + 56), &v31);
    uint64_t IdentifierInternal = 0;
    uint64_t v10 = 0;
    if (!v8)
    {
      uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
      uint64_t v12 = v31;
      uint64_t v11 = v32;
      uint64_t v31 = 0;
      uint64_t v13 = *(void *)(a1 + 72);
      if (v13) {
        uint64_t v14 = *(void *)(v13 + 8);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = WTF::fastMalloc((WTF *)0x70);
      uint64_t v16 = WTF::fastMalloc((WTF *)0x20);
      *(unsigned char *)uint64_t v16 = 0;
      *(_OWORD *)(v16 + 8) = xmmword_1994F5F10;
      *(void *)(v16 + 24) = v15;
      *(void *)uint64_t v15 = &unk_1EE9C19F0;
      *(void *)(v15 + 8) = v16;
      *(void *)(v15 + 16) = &unk_1EE9C1A58;
      *(void *)(v15 + 24) = 0;
      uint64_t v17 = *(atomic_uchar **)(v11 + 16);
      if (v17) {
        uint64_t v17 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v17);
      }
      *(void *)(v15 + 3WebKit::RemoteMediaSourceProxy::~RemoteMediaSourceProxy(this - 2) = v17;
      *(void *)(v15 + 40) = v11;
      *(void *)(v15 + 48) = IdentifierInternal;
      *(void *)(v15 + 56) = v12;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v14 + 8), v14);
      uint64_t v18 = *(atomic_uint **)(v14 + 8);
      if (v18) {
        atomic_fetch_add(v18, 1u);
      }
      *(void *)(v15 + 64) = v18;
      *(_OWORD *)(v15 + 7WebKit::RemoteMediaSourceProxy::~RemoteMediaSourceProxy(this - 2) = 0u;
      *(_OWORD *)(v15 + 88) = 0u;
      *(_DWORD *)(v15 + 104) = 1065353216;
      uint64_t v19 = *(void *)(v15 + 48);
      v34[0] = 125;
      v34[1] = v19;
      WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v11 + 72), (unsigned __int8 *)v34, v15 + 16, &v33);
      uint64_t result = (atomic_uchar *)WebCore::SourceBufferPrivate::setClient();
      unint64_t v20 = *(unsigned int *)(a1 + 92);
      if (v20 == *(_DWORD *)(a1 + 88))
      {
        unint64_t v21 = v20 + (v20 >> 2);
        if (v21 >= 0x10) {
          unint64_t v22 = v21 + 1;
        }
        else {
          unint64_t v22 = 16;
        }
        if (v22 <= v20 + 1) {
          unint64_t v23 = v20 + 1;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v23 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        long long v24 = *(void **)(a1 + 80);
        long long v25 = (void *)WTF::fastMalloc((WTF *)(8 * v23));
        *(_DWORD *)(a1 + 88) = v23;
        *(void *)(a1 + 80) = v25;
        memcpy(v25, v24, 8 * v20);
        if (v24)
        {
          if (*(void **)(a1 + 80) == v24)
          {
            *(void *)(a1 + 80) = 0;
            *(_DWORD *)(a1 + 88) = 0;
          }
          WTF::fastFree((WTF *)v24, v26);
        }
        unint64_t v20 = *(unsigned int *)(a1 + 92);
        long long v27 = (uint64_t *)(*(void *)(a1 + 80) + 8 * v20);
      }
      else
      {
        long long v27 = (uint64_t *)(*(void *)(a1 + 80) + 8 * v20);
      }
      *long long v27 = v15;
      *(_DWORD *)(a1 + 9WebKit::RemoteMediaSourceProxy::~RemoteMediaSourceProxy(this - 2) = v20 + 1;
      uint64_t v10 = 1;
    }
    uint64_t v28 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v8, IdentifierInternal, v10);
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v28 + 8))(v28);
    uint64_t v29 = v31;
    uint64_t v31 = 0;
    if (v29) {
      uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v29 + 8));
    }
  }
  uint64_t v30 = v32;
  uint64_t v32 = 0;
  if (v30) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v30 + 16));
  }
  return result;
}

uint64_t WebKit::RemoteMediaSourceProxy::bufferedChanged(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

atomic_uchar *WebKit::RemoteMediaSourceProxy::shutdown(WebKit::RemoteMediaSourceProxy *this)
{
  uint64_t result = (atomic_uchar *)*((void *)this + 4);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((void *)this + 5), &v27);
    uint64_t v3 = v27;
    if (v27)
    {
      uint64_t v4 = *((unsigned int *)this + 23);
      if (v4)
      {
        uint64_t v5 = (atomic_uchar ***)*((void *)this + 10);
        uint64_t v6 = 8 * v4;
        do
        {
          uint64_t v7 = *v5;
          if (*v5)
          {
            WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(v7[1]);
            WebKit::RemoteSourceBufferProxy::shutdown((WebKit::RemoteSourceBufferProxy *)v7);
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivateClient,(WTF::DestructionThread)0>(v7[1], v8);
          }
          else
          {
            WebKit::RemoteSourceBufferProxy::shutdown(0);
          }
          ++v5;
          v6 -= 8;
        }
        while (v6);
        uint64_t v3 = v27;
      }
      char v9 = 0;
      uint64_t v10 = *(os_unfair_lock_s **)(v3 + 56);
      *(void *)int v26 = this;
      uint64_t v11 = *((void *)this + 1);
      int v12 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
      if (v9)
      {
        uint64_t v25 = v11;
        MEMORY[0x19972E8D0]();
        uint64_t v11 = v25;
      }
      ++*(void *)(v11 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
      }
      *(void *)&v26[8] = this;
      WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>::Ref(&v26[16], v27);
      uint64_t v13 = *((void *)this + 6);
      uint64_t v14 = *(void *)&v26[16];
      long long v24 = *(_OWORD *)v26;
      *(_OWORD *)&v26[8] = 0u;
      uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v15 = &unk_1EE9C1FC0;
      *(_OWORD *)(v15 + 8) = v24;
      *(void *)(v15 + 24) = v14;
      uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      uint64_t v17 = WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v17 = 193;
      *(void *)(v17 + 8) = v13;
      *(void *)(v17 + 528) = v17 + 16;
      *(void *)(v17 + 536) = 512;
      *(void *)(v17 + 544) = 0;
      *(_OWORD *)(v17 + 55WebKit::RemoteMediaSourceProxy::~RemoteMediaSourceProxy(this - 2) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
      uint64_t v29 = (atomic_uchar *)v17;
      v28[0] = v15;
      v28[1] = v16;
      IPC::Connection::sendMessageWithAsyncReply(v10, (IPC::Encoder **)&v29, v28, 0, 0);
      uint64_t v19 = v28[0];
      v28[0] = 0;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
      uint64_t result = v29;
      uint64_t v29 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v18);
        uint64_t result = (atomic_uchar *)WTF::fastFree(v22, v23);
      }
      uint64_t v20 = *(void *)&v26[16];
      *(void *)&v26[16] = 0;
      if (v20) {
        uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v20 + 16));
      }
      if (*(void *)&v26[8]) {
        uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(*(void *)&v26[8] + 8), v18);
      }
      uint64_t v21 = v27;
      uint64_t v27 = 0;
      if (v21) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v21 + 16));
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::RemoteSourceBufferProxy::shutdown(WebKit::RemoteSourceBufferProxy *this)
{
  uint64_t result = (atomic_uchar *)*((void *)this + 4);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((void *)this + 5), &v17);
    if (v17)
    {
      uint64_t v3 = *(os_unfair_lock_s **)(v17 + 56);
      *(void *)uint64_t v16 = this;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*((atomic_uchar **)this + 1));
      *(void *)&v16[8] = this;
      WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>::Ref(&v16[16], v17);
      uint64_t v4 = *((void *)this + 6);
      uint64_t v5 = *(void *)&v16[16];
      long long v15 = *(_OWORD *)v16;
      *(_OWORD *)&v16[8] = 0u;
      uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v6 = &unk_1EE9C20A8;
      *(_OWORD *)(v6 + 8) = v15;
      *(void *)(v6 + 24) = v5;
      uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      uint64_t v8 = WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v8 = 1477;
      *(void *)(v8 + 8) = v4;
      *(void *)(v8 + 528) = v8 + 16;
      *(void *)(v8 + 536) = 512;
      *(void *)(v8 + 544) = 0;
      *(_OWORD *)(v8 + 55WebKit::RemoteMediaSourceProxy::~RemoteMediaSourceProxy(this - 2) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
      uint64_t v19 = (atomic_uchar *)v8;
      v18[0] = v6;
      v18[1] = v7;
      IPC::Connection::sendMessageWithAsyncReply(v3, (IPC::Encoder **)&v19, v18, 0, 0);
      uint64_t v10 = v18[0];
      v18[0] = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      uint64_t result = v19;
      uint64_t v19 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
        uint64_t result = (atomic_uchar *)WTF::fastFree(v13, v14);
      }
      uint64_t v11 = *(void *)&v16[16];
      *(void *)&v16[16] = 0;
      if (v11) {
        uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v11 + 16));
      }
      if (*(void *)&v16[8]) {
        uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(*(void *)&v16[8] + 8), v9);
      }
      uint64_t v12 = v17;
      uint64_t v17 = 0;
      if (v12) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v12 + 16));
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteRemoteCommandListenerProxy::RemoteRemoteCommandListenerProxy(uint64_t a1, uint64_t a2, void *a3)
{
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)a1 = &unk_1EE9C19B8;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(atomic_uchar **)(a2 + 16);
  if (v6) {
    uint64_t v6 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v6);
  }
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 3WebKit::RemoteMediaSourceProxy::~RemoteMediaSourceProxy(this - 2) = a2;
  *(void *)(a1 + 40) = *a3;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  return a1;
}

void WebKit::RemoteRemoteCommandListenerProxy::~RemoteRemoteCommandListenerProxy(WebKit::RemoteRemoteCommandListenerProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9C19B8;
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v4 = (atomic_uchar *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteRemoteCommandListenerProxy::~RemoteRemoteCommandListenerProxy(this, a2);

  WTF::fastFree(v2, v3);
}

atomic_uchar *WebKit::RemoteRemoteCommandListenerProxy::updateSupportedCommands(uint64_t a1, unsigned int *a2, char a3)
{
  uint64_t v7 = (uint64_t *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6)
  {
    *uint64_t v7 = 0;
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  uint64_t v8 = a2[3];
  if (v8)
  {
    char v9 = *(unsigned char **)a2;
    uint64_t v10 = &v9[v8];
    while (1)
    {
      uint64_t v11 = *v7;
      if (*v7
        || (WTF::HashTable<WebCore::GamepadHapticEffectType,WebCore::GamepadHapticEffectType,WTF::IdentityExtractor,WTF::IntHash<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>>::expand(v7),
            (uint64_t v11 = *v7) != 0))
      {
        unsigned int v12 = *(_DWORD *)(v11 - 8);
      }
      else
      {
        unsigned int v12 = 0;
      }
      int v13 = *v9;
      unsigned int v14 = 9 * ((~(v13 << 15) + v13) ^ ((~(v13 << 15) + v13) >> 10));
      unsigned int v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
      int v16 = v15 ^ HIWORD(v15);
      unsigned int v17 = v12;
      uint64_t v18 = v16 & v12;
      uint64_t v19 = (unsigned char *)(v11 + v18);
      int v20 = *(unsigned __int8 *)(v11 + v18);
      if (v20 != 255)
      {
        uint64_t v21 = 0;
        int v22 = 1;
        while (v20 != v13)
        {
          if (v20 == 254) {
            uint64_t v21 = v19;
          }
          uint64_t v18 = (v18 + v22) & v17;
          uint64_t v19 = (unsigned char *)(v11 + v18);
          int v20 = *(unsigned __int8 *)(v11 + v18);
          ++v22;
          if (v20 == 255)
          {
            if (v21)
            {
              unsigned char *v21 = -1;
              --*(_DWORD *)(*v7 - 16);
              LOBYTE(v13) = *v9;
              uint64_t v19 = v21;
            }
            goto LABEL_16;
          }
        }
        goto LABEL_25;
      }
LABEL_16:
      unsigned char *v19 = v13;
      uint64_t v23 = *v7;
      int v24 = *v7 ? *(_DWORD *)(v23 - 12) + 1 : 1;
      *(_DWORD *)(v23 - 1WebKit::RemoteMediaSourceProxy::~RemoteMediaSourceProxy(this - 2) = v24;
      uint64_t v25 = *v7;
      int v26 = *v7 ? *(_DWORD *)(v25 - 12) : 0;
      uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
      unint64_t v28 = *(unsigned int *)(v25 - 4);
      if (v28 > 0x400) {
        break;
      }
      if (3 * v28 <= 4 * v27) {
        goto LABEL_24;
      }
LABEL_25:
      if (++v9 == v10) {
        goto LABEL_30;
      }
    }
    if (v28 > 2 * v27) {
      goto LABEL_25;
    }
LABEL_24:
    WTF::HashTable<WebCore::GamepadHapticEffectType,WebCore::GamepadHapticEffectType,WTF::IdentityExtractor,WTF::IntHash<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>>::expand(v7);
    goto LABEL_25;
  }
LABEL_30:
  *(unsigned char *)(a1 + 56) = a3;
  uint64_t result = *(atomic_uchar **)(a1 + 24);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(void *)(a1 + 32), &v31);
    uint64_t result = (atomic_uchar *)v31;
    if (v31)
    {
      uint64_t result = (atomic_uchar *)WebKit::GPUConnectionToWebProcess::updateSupportedRemoteCommands((uint64_t)v31);
      uint64_t v30 = v31;
      uint64_t v31 = 0;
      if (v30) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v30 + 2));
      }
    }
  }
  return result;
}

void WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(unsigned int **this)
{
  WebKit::RemoteSourceBufferProxy::disconnect((WebKit::RemoteSourceBufferProxy *)this);
  uint64_t v3 = this[11];
  while (v3)
  {
    uint64_t v4 = (WTF *)v3;
    uint64_t v3 = *(unsigned int **)v3;
    uint64_t v5 = (unsigned int *)*((void *)v4 + 3);
    *((void *)v4 + 3) = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
    }
    WTF::fastFree(v4, v2);
  }
  uint64_t v6 = (WTF *)this[9];
  this[9] = 0;
  if (v6) {
    WTF::fastFree(v6, v2);
  }
  uint64_t v7 = this[8];
  this[8] = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v2);
  }
  uint64_t v8 = this[7];
  this[7] = 0;
  if (v8) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*((atomic_uchar **)v8 + 1));
  }
  char v9 = (atomic_uchar *)this[4];
  this[4] = 0;
  if (v9) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v9, v2);
  }
  this[2] = (unsigned int *)&unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 3, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *WebKit::RemoteSourceBufferProxy::disconnect(WebKit::RemoteSourceBufferProxy *this)
{
  uint64_t result = (atomic_uchar *)*((void *)this + 4);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((void *)this + 5), &v5);
    if (v5)
    {
      IPC::MessageReceiverMap::removeMessageReceiver(v5 + 64, 0x7Du, *((void *)this + 6));
      uint64_t result = (atomic_uchar *)*((void *)this + 4);
      *((void *)this + 4) = 0;
      if (result) {
        uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v3);
      }
      *((void *)this + 5) = 0;
      uint64_t v4 = v5;
      uint64_t v5 = 0;
      if (v4) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v4 + 16));
      }
    }
  }
  return result;
}

void non-virtual thunk to'WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(unsigned int **this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2);

  WTF::fastFree(v1, v2);
}

WTF::Lock *WebKit::RemoteSourceBufferProxy::sourceBufferPrivateDidReceiveInitializationSegment@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = *((void *)a1 + 8);
  if (!v3 || !*(void *)(v3 + 8))
  {
    LOBYTE(v90) = 1;
    long long v107 = 0;
    uint64_t v108 = 0;
    long long v109 = "sourceBufferPrivateDidReceiveInitializationSegment";
    *(void *)&long long v110 = 0;
    return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((char *)&v90, (WTF::Logger::LogSiteIdentifier *)&v107, a3);
  }
  long long v104 = 0u;
  long long v105 = 0u;
  *(void *)&long long v102 = *(void *)a2;
  *(void *)((char *)&v102 + 5) = *(void *)(a2 + 5);
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v6 = *(unsigned int *)(a2 + 28);
  if (!v6)
  {
    unsigned int v10 = 0;
    char v9 = 0;
LABEL_14:
    LODWORD(v1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
    goto LABEL_15;
  }
  if (v6 >= 0xAAAAAAB)
  {
    __break(0xC471u);
    goto LABEL_74;
  }
  int v7 = 24 * v6;
  uint64_t v8 = (WTF::ThreadSafeWeakPtrControlBlock *)WTF::fastMalloc((WTF *)(24 * v6));
  char v9 = v8;
  unsigned int v10 = (v7 & 0xFFFFFFF8) / 0x18;
  LODWORD(v91) = v10;
  uint64_t v90 = v8;
  if (!*(_DWORD *)(a2 + 28)) {
    goto LABEL_14;
  }
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  int v13 = (unint64_t *)((char *)v8 + 16);
  do
  {
    uint64_t v14 = *(void *)(a2 + 16);
    unint64_t v106 = (*(uint64_t (**)(void))(**(void **)(v14 + v11 + 8) + 48))(*(void *)(v14 + v11 + 8));
    uint64_t v15 = *((void *)a1 + 8);
    if (v15) {
      int v16 = *(atomic_uchar **)(v15 + 8);
    }
    else {
      int v16 = 0;
    }
    WebKit::RemoteMediaPlayerProxy::addRemoteAudioTrackProxy(v16, *(atomic_uint **)(v14 + v11 + 8));
    uint64_t v17 = *(void *)(v14 + v11);
    v97 = &v106;
    *(void *)&long long v89 = v17;
    std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<WebCore::MediaDescription&>>((void *)a1 + 9, v106, &v97, (uint64_t *)&v89);
    WebKit::MediaDescriptionInfo::MediaDescriptionInfo((WebKit::MediaDescriptionInfo *)&v107, *(const WebCore::MediaDescription **)(v14 + v11));
    unint64_t v18 = v106;
    long long v109 = (const char *)v106;
    *(v13 - WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = (unint64_t)v107;
    __int16 v19 = v108;
    *((unsigned char *)v13 - 6) = BYTE2(v108);
    *((_WORD *)v13 - 4) = v19;
    *int v13 = v18;
    v13 += 3;
    ++v12;
    v11 += 16;
  }
  while (v12 < *(unsigned int *)(a2 + 28));
  char v9 = v90;
  unsigned int v10 = v91;
LABEL_15:
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  *(void *)&long long v103 = v9;
  *((void *)&v103 + 1) = __PAIR64__(v12, v10);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v90, (void *)a2);
  uint64_t v22 = *(unsigned int *)(a2 + 44);
  unsigned int v80 = v10;
  int v81 = v9;
  if (v22)
  {
    if (v22 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x198B12B94);
    }
    int v23 = 24 * v22;
    uint64_t v24 = WTF::fastMalloc((WTF *)(24 * v22));
    unsigned int v25 = (v23 & 0xFFFFFFF8) / 0x18;
    if (*(_DWORD *)(a2 + 44))
    {
      unsigned int v85 = v25;
      uint64_t v87 = v24;
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      unint64_t v28 = (void *)(v24 + 16);
      do
      {
        uint64_t v29 = *(void *)(a2 + 32);
        *(void *)&long long v89 = (*(uint64_t (**)(void))(**(void **)(v29 + v26 + 8) + 48))(*(void *)(v29 + v26 + 8));
        uint64_t v30 = *((void *)a1 + 8);
        if (v30) {
          uint64_t v31 = *(atomic_uchar **)(v30 + 8);
        }
        else {
          uint64_t v31 = 0;
        }
        WebKit::RemoteMediaPlayerProxy::addRemoteVideoTrackProxy(v31, *(atomic_uint **)(v29 + v26 + 8));
        uint64_t v32 = *(unint64_t **)(v29 + v26);
        uint64_t v90 = (WTF::ThreadSafeWeakPtrControlBlock *)&v89;
        v97 = v32;
        std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<WebCore::MediaDescription&>>((void *)a1 + 9, v89, (void **)&v90, (uint64_t *)&v97);
        WebKit::MediaDescriptionInfo::MediaDescriptionInfo((WebKit::MediaDescriptionInfo *)&v107, *(const WebCore::MediaDescription **)(v29 + v26));
        uint64_t v33 = v89;
        long long v109 = (const char *)v89;
        *(v28 - WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v107;
        __int16 v34 = v108;
        *((unsigned char *)v28 - 6) = BYTE2(v108);
        *((_WORD *)v28 - 4) = v34;
        *unint64_t v28 = v33;
        v28 += 3;
        ++v27;
        v26 += 16;
      }
      while (v27 < *(unsigned int *)(a2 + 44));
      unsigned int v25 = v85;
      uint64_t v24 = v87;
    }
    else
    {
      LODWORD(v27) = 0;
    }
  }
  else
  {
    LODWORD(v27) = 0;
    unsigned int v25 = 0;
    uint64_t v24 = 0;
  }
  long long v107 = 0;
  uint64_t v108 = 0;
  uint64_t v88 = v24;
  *(void *)&long long v104 = v24;
  *((void *)&v104 + 1) = __PAIR64__(v27, v25);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v107, v21);
  uint64_t v36 = *(unsigned int *)(a2 + 60);
  unsigned int v86 = v25;
  if (v36)
  {
    if (v36 < 0xAAAAAAB)
    {
      int v37 = 24 * v36;
      uint64_t v38 = WTF::fastMalloc((WTF *)(24 * v36));
      unsigned int v83 = (v37 & 0xFFFFFFF8) / 0x18;
      uint64_t v84 = v38;
      if (*(_DWORD *)(a2 + 60))
      {
        uint64_t v39 = 0;
        unint64_t v40 = 0;
        int8x16x2_t v41 = (void *)(v38 + 16);
        do
        {
          uint64_t v42 = *(void *)(a2 + 48);
          *(void *)&long long v89 = (*(uint64_t (**)(void))(**(void **)(v42 + v39 + 8) + 48))(*(void *)(v42 + v39 + 8));
          uint64_t v43 = *((void *)a1 + 8);
          if (v43) {
            uint64_t v44 = *(atomic_uchar **)(v43 + 8);
          }
          else {
            uint64_t v44 = 0;
          }
          WebKit::RemoteMediaPlayerProxy::addRemoteTextTrackProxy(v44, *(atomic_uint **)(v42 + v39 + 8));
          uint64_t v45 = *(unint64_t **)(v42 + v39);
          uint64_t v90 = (WTF::ThreadSafeWeakPtrControlBlock *)&v89;
          v97 = v45;
          std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<WebCore::MediaDescription&>>((void *)a1 + 9, v89, (void **)&v90, (uint64_t *)&v97);
          WebKit::MediaDescriptionInfo::MediaDescriptionInfo((WebKit::MediaDescriptionInfo *)&v107, *(const WebCore::MediaDescription **)(v42 + v39));
          uint64_t v46 = v89;
          long long v109 = (const char *)v89;
          *(v41 - WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v107;
          __int16 v47 = v108;
          *((unsigned char *)v41 - 6) = BYTE2(v108);
          *((_WORD *)v41 - 4) = v47;
          *int8x16x2_t v41 = v46;
          v41 += 3;
          ++v40;
          v39 += 16;
        }
        while (v40 < *(unsigned int *)(a2 + 60));
      }
      else
      {
        LODWORD(v40) = 0;
      }
      goto LABEL_37;
    }
    __break(0xC471u);
LABEL_74:
    JUMPOUT(0x198B12B8CLL);
  }
  LODWORD(v40) = 0;
  unsigned int v83 = 0;
  uint64_t v84 = 0;
LABEL_37:
  long long v107 = 0;
  uint64_t v108 = 0;
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v107, v35);
  uint64_t v48 = *((void *)a1 + 8);
  if (v48) {
    int v49 = *(WebKit::RemoteMediaPlayerProxy **)(v48 + 8);
  }
  else {
    int v49 = 0;
  }
  uint64_t v50 = WebKit::RemoteMediaPlayerProxy::commitAllTransactions(v49, (uint64_t *)&v106);
  unint64_t v51 = v106;
  uint64_t v52 = WTF::RunLoop::current((WTF::RunLoop *)v50);
  unint64_t v53 = (atomic_uchar *)*((void *)a1 + 1);
  if (v53) {
    uint64_t v54 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v53);
  }
  else {
    uint64_t v54 = 0;
  }
  uint64_t v91 = 0;
  uint64_t v92 = a1;
  long long v93 = v102;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v89 = 0uLL;
  long long v105 = 0u;
  uint64_t v90 = 0;
  long long v109 = a1;
  long long v110 = v102;
  long long v95 = 0u;
  long long v94 = 0u;
  long long v96 = 0u;
  uint64_t v55 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(void *)v52 + 32))(v52);
  uint64_t v56 = WTF::fastMalloc((WTF *)0x60);
  *(void *)uint64_t v56 = &unk_1EE9C1BC8;
  *(void *)(v56 + 8) = v54;
  long long v107 = 0;
  uint64_t v108 = 0;
  *(void *)(v56 + 16) = a1;
  *(void *)(v56 + 24) = a1;
  *(_OWORD *)(v56 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v110;
  v111[0] = 0;
  *(void *)(v56 + 48) = v81;
  v111[1] = 0;
  *(_DWORD *)(v56 + 56) = v80;
  *(_DWORD *)(v56 + 60) = v12;
  v112[0] = 0;
  *(void *)(v56 + 64) = v88;
  v112[1] = 0;
  *(_DWORD *)(v56 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v86;
  *(_DWORD *)(v56 + 76) = v27;
  v113[0] = 0;
  *(void *)(v56 + 80) = v84;
  v113[1] = 0;
  *(_DWORD *)(v56 + 88) = v83;
  *(_DWORD *)(v56 + 9WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v40;
  *(_DWORD *)(v55 + 8) = 1;
  *(void *)(v55 + 16) = v52;
  *(void *)(v55 + 24) = 0;
  *(void *)(v55 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  *(void *)(v55 + 40) = "sourceBufferPrivateDidReceiveInitializationSegment";
  *(void *)(v55 + 48) = 0;
  *(_WORD *)(v55 + 56) = 0;
  *(void *)uint64_t v55 = &unk_1EE9C1C58;
  *(void *)(v55 + 64) = 0;
  *(void *)(v55 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v56;
  atomic_fetch_add((atomic_uint *volatile)(v51 + 8), 1u);
  v97 = (unint64_t *)v51;
  uint64_t v98 = (WTF::NativePromiseBase *)v55;
  long long v99 = v89;
  uint64_t v100 = "sourceBufferPrivateDidReceiveInitializationSegment";
  uint64_t v101 = 0;
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v113, v57);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v112, v58);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v111, v59);
  int v61 = (atomic_uchar *)v107;
  long long v107 = 0;
  if (v61) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v61, v60);
  }
  long long v107 = 0;
  uint64_t v108 = 0;
  long long v109 = "<completion promise>";
  *(void *)&long long v110 = 0;
  uint64_t v62 = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
  uint64_t v63 = *(void *)WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)v62, 0, (WTF::Logger::LogSiteIdentifier *)&v107);
  if (v63)
  {
    atomic_fetch_add((atomic_uint *volatile)(v63 + 8), 1u);
    uint64_t v55 = (uint64_t)v98;
  }
  char v64 = 0;
  *a3 = v63;
  int v65 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v55 + 57), (unsigned __int8 *)&v64, 1u, memory_order_acquire, memory_order_acquire);
  if (v64) {
    MEMORY[0x19972E8D0](v55 + 57);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>>::reset[abi:sn180100]((uint64_t **)(v55 + 64), v62);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v55 + 57), (unsigned __int8 *)&v65, 0, memory_order_release, memory_order_relaxed);
  if (v65 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(v55 + 57));
  }
  unint64_t v66 = v98;
  uint64_t v98 = 0;
  long long v107 = v66;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle((uint64_t)v97, &v107, (WTF::Logger::LogSiteIdentifier *)&v99);
  uint64_t v68 = (unsigned int *)v107;
  long long v107 = 0;
  if (v68 && atomic_fetch_add((atomic_uint *volatile)v68 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v68 + 2);
    (*(void (**)(unsigned int *))(*(void *)v68 + 8))(v68);
  }
  uint64_t v69 = v98;
  if (v98)
  {
    uint64_t v98 = 0;
    long long v107 = v69;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle((uint64_t)v97, &v107, (WTF::Logger::LogSiteIdentifier *)&v99);
    v70 = (unsigned int *)v107;
    long long v107 = 0;
    if (v70 && atomic_fetch_add((atomic_uint *volatile)v70 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v70 + 2);
      (*(void (**)(unsigned int *))(*(void *)v70 + 8))(v70);
    }
    uint64_t v71 = (unsigned int *)v98;
    uint64_t v98 = 0;
    if (v71 && atomic_fetch_add((atomic_uint *volatile)v71 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v71 + 2);
      (*(void (**)(unsigned int *))(*(void *)v71 + 8))(v71);
    }
  }
  else
  {
    uint64_t v98 = 0;
  }
  uint64_t v72 = (unsigned int *)v97;
  v97 = 0;
  if (v72 && atomic_fetch_add((atomic_uint *volatile)v72 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v72 + 2);
    (*(void (**)(unsigned int *))(*(void *)v72 + 16))(v72);
  }
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v96, v67);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v95, v73);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v94, v74);
  uint64_t v76 = v90;
  uint64_t v90 = 0;
  if (v76) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)v76, v75);
  }
  uint64_t v77 = (unsigned int *)v106;
  unint64_t v106 = 0;
  if (v77)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v77 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v77 + 2);
      (*(void (**)(unsigned int *))(*(void *)v77 + 16))(v77);
    }
  }
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v105, v75);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v104, v78);
  return (WTF::Lock *)WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v103, v79);
}

atomic_uchar *WebKit::RemoteSourceBufferProxy::sourceBufferPrivateHighestPresentationTimestampChanged(WebKit::RemoteSourceBufferProxy *this, const WTF::MediaTime *a2)
{
  uint64_t result = (atomic_uchar *)*((void *)this + 4);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((void *)this + 5), &v12);
    if (v12)
    {
      uint64_t v5 = *(void *)(v12 + 56);
      uint64_t v6 = *((void *)this + 6);
      int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)int v7 = 1476;
      *((void *)v7 + 1) = v6;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      int v13 = v7;
      IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v7, (uint64_t)a2);
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v13, 0, 0);
      uint64_t result = (atomic_uchar *)v13;
      int v13 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
        uint64_t result = (atomic_uchar *)WTF::fastFree(v10, v11);
      }
      uint64_t v9 = v12;
      uint64_t v12 = 0;
      if (v9) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v9 + 16));
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::RemoteSourceBufferProxy::sourceBufferPrivateDurationChanged@<X0>(WebKit::RemoteSourceBufferProxy *this@<X0>, const WTF::MediaTime *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = (atomic_uchar *)*((void *)this + 4);
  if (!v5)
  {
    uint64_t v21 = 0;
LABEL_3:
    LOBYTE(v23) = 4;
    uint64_t v26 = 0;
    *(void *)&long long v27 = 0;
    *((void *)&v27 + 1) = "sourceBufferPrivateDurationChanged";
    *(void *)&long long v28 = 0;
    uint64_t result = (atomic_uchar *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((char *)&v23, (WTF::Logger::LogSiteIdentifier *)&v26, a3);
    goto LABEL_4;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, *((void *)this + 5), &v21);
  if (!v21) {
    goto LABEL_3;
  }
  uint64_t v9 = *(os_unfair_lock_s **)(v21 + 56);
  uint64_t v10 = *((void *)this + 6);
  uint64_t v26 = 0;
  *(void *)&long long v27 = 0;
  *((void *)&v27 + 1) = "sendWithPromisedReply";
  *(void *)&long long v28 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v23, 0, (WTF::Logger::LogSiteIdentifier *)&v26);
  uint64_t v11 = v23;
  if (v23)
  {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 8), 1u);
    uint64_t v12 = v23;
  }
  else
  {
    uint64_t v12 = 0;
  }
  *a3 = v11;
  uint64_t v23 = 0;
  long long v27 = v24;
  long long v28 = v25;
  uint64_t v13 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v13 = &unk_1EE9C1FE8;
  *(void *)(v13 + 8) = v12;
  uint64_t v26 = 0;
  long long v14 = v28;
  *(_OWORD *)(v13 + 16) = v27;
  *(_OWORD *)(v13 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v14;
  v22[0] = v13;
  v22[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v26);
  uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v15 = 1474;
  *((void *)v15 + 1) = v10;
  *((void *)v15 + 66) = (char *)v15 + 16;
  *((void *)v15 + 67) = 512;
  *((void *)v15 + 68) = 0;
  *((void *)v15 + 70) = 0;
  *((void *)v15 + 69) = 0;
  IPC::Encoder::encodeHeader(v15);
  uint64_t v26 = v15;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v15, (uint64_t)a2);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v9, &v26, v22, 0, 0);
  uint64_t v17 = v26;
  uint64_t v26 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v16);
    WTF::fastFree(v19, v20);
  }
  uint64_t v18 = v22[0];
  v22[0] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t result = (atomic_uchar *)WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v23);
LABEL_4:
  uint64_t v7 = v21;
  uint64_t v21 = 0;
  if (v7) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v7 + 16));
  }
  return result;
}

WTF::Lock *WebKit::RemoteSourceBufferProxy::sourceBufferPrivateBufferedChanged@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (atomic_uchar *)a1[4];
  if (!v5)
  {
    uint64_t v31 = 0;
LABEL_3:
    uint64_t v36 = 0;
    *(void *)&long long v37 = 0;
    *((void *)&v37 + 1) = "sourceBufferPrivateBufferedChanged";
    *(void *)&long long v38 = 0;
    uint64_t v6 = WTF::fastMalloc((WTF *)0x78);
    uint64_t v7 = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::NativePromise(v6, &v36);
    char v8 = 0;
    *a3 = v7;
    uint64_t v9 = (WTF::Lock *)(v7 + 48);
    uint64_t v33 = v9;
    LOBYTE(v34) = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
    if (v8) {
      uint64_t v9 = (WTF::Lock *)MEMORY[0x19972E8D0]();
    }
    uint64_t v10 = (unsigned char *)WTF::NativePromiseBase::logChannel(v9);
    if (*v10 && v10[16] >= 4u) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v10, 4u, (WTF::Logger::LogSiteIdentifier *)&v36, " resolving ", v6);
    }
    uint64_t v11 = *(unsigned int *)(v6 + 64);
    if (v11 != -1) {
      ((void (*)(uint64_t *, uint64_t))off_1EE9C1BE0[v11])(v32, v6 + 56);
    }
    *(_WORD *)(v6 + 56) = 0;
    int v12 = 1;
    *(_DWORD *)(v6 + 64) = 1;
    uint64_t result = (WTF::Lock *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::dispatchAll((void *)v6, (atomic_uchar *volatile *)&v33);
    if ((_BYTE)v34)
    {
      uint64_t result = v33;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v33, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 != 1) {
        uint64_t result = (WTF::Lock *)WTF::Lock::unlockSlow(result);
      }
    }
    goto LABEL_13;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, a1[5], &v31);
  if (!v31) {
    goto LABEL_3;
  }
  int v16 = *(os_unfair_lock_s **)(v31 + 56);
  uint64_t v17 = a1[6];
  uint64_t v36 = 0;
  *(void *)&long long v37 = 0;
  *((void *)&v37 + 1) = "sendWithPromisedReply";
  *(void *)&long long v38 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v33, 0, (WTF::Logger::LogSiteIdentifier *)&v36);
  uint64_t v18 = v33;
  if (v33)
  {
    atomic_fetch_add((atomic_uint *volatile)v33 + 2, 1u);
    __int16 v19 = v33;
  }
  else
  {
    __int16 v19 = 0;
  }
  *a3 = v18;
  uint64_t v33 = 0;
  long long v37 = v34;
  long long v38 = v35;
  uint64_t v20 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v20 = &unk_1EE9C2038;
  *(void *)(v20 + 8) = v19;
  uint64_t v36 = 0;
  long long v21 = v38;
  *(_OWORD *)(v20 + 16) = v37;
  *(_OWORD *)(v20 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v21;
  v32[0] = v20;
  v32[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v36);
  uint64_t v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v22 = 1470;
  *((void *)v22 + 1) = v17;
  *((void *)v22 + 66) = (char *)v22 + 16;
  *((void *)v22 + 67) = 512;
  *((void *)v22 + 68) = 0;
  *((void *)v22 + 70) = 0;
  *((void *)v22 + 69) = 0;
  IPC::Encoder::encodeHeader(v22);
  uint64_t v36 = v22;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v22, *(unsigned int *)(a2 + 12));
  uint64_t v23 = *(unsigned int *)(a2 + 12);
  if (v23)
  {
    uint64_t v24 = *(void *)a2;
    uint64_t v25 = 16 * v23;
    do
    {
      IPC::VectorArgumentCoder<false,WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v22, v24);
      v24 += 16;
      v25 -= 16;
    }
    while (v25);
  }
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v16, &v36, v32, 0, 0);
  long long v27 = v36;
  uint64_t v36 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v29, v30);
  }
  uint64_t v28 = v32[0];
  v32[0] = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  uint64_t result = (WTF::Lock *)WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v33);
LABEL_13:
  uint64_t v14 = v31;
  uint64_t v31 = 0;
  if (v14) {
    return (WTF::Lock *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v14 + 16));
  }
  return result;
}

atomic_uchar *WebKit::RemoteSourceBufferProxy::sourceBufferPrivateDidDropSample(WebKit::RemoteSourceBufferProxy *this)
{
  uint64_t result = (atomic_uchar *)*((void *)this + 4);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((void *)this + 5), &v10);
    if (v10)
    {
      uint64_t v3 = *(void *)(v10 + 56);
      uint64_t v4 = *((void *)this + 6);
      uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v5 = 1471;
      *((void *)v5 + 1) = v4;
      *((void *)v5 + 66) = (char *)v5 + 16;
      *((void *)v5 + 67) = 512;
      *((void *)v5 + 68) = 0;
      *((void *)v5 + 70) = 0;
      *((void *)v5 + 69) = 0;
      IPC::Encoder::encodeHeader(v5);
      uint64_t v11 = v5;
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
      uint64_t result = (atomic_uchar *)v11;
      uint64_t v11 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v6);
        uint64_t result = (atomic_uchar *)WTF::fastFree(v8, v9);
      }
      uint64_t v7 = v10;
      uint64_t v10 = 0;
      if (v7) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v7 + 16));
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::RemoteSourceBufferProxy::sourceBufferPrivateDidReceiveRenderingError(WebKit::RemoteSourceBufferProxy *this, uint64_t a2)
{
  uint64_t result = (atomic_uchar *)*((void *)this + 4);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((void *)this + 5), &v12);
    if (v12)
    {
      uint64_t v5 = *(void *)(v12 + 56);
      uint64_t v6 = *((void *)this + 6);
      uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v7 = 1473;
      *((void *)v7 + 1) = v6;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      uint64_t v13 = v7;
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v7, a2);
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v13, 0, 0);
      uint64_t result = (atomic_uchar *)v13;
      uint64_t v13 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
        uint64_t result = (atomic_uchar *)WTF::fastFree(v10, v11);
      }
      uint64_t v9 = v12;
      uint64_t v12 = 0;
      if (v9) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v9 + 16));
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::RemoteSourceBufferProxy::sourceBufferPrivateEvictionDataChanged(void *a1, uint64_t *a2)
{
  uint64_t result = (atomic_uchar *)a1[4];
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, a1[5], &v12);
    if (v12)
    {
      uint64_t v5 = *(void *)(v12 + 56);
      uint64_t v6 = a1[6];
      uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v7 = 1475;
      *((void *)v7 + 1) = v6;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      uint64_t v13 = v7;
      IPC::ArgumentCoder<WebCore::SourceBufferEvictionData,void>::encode(v7, a2);
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v13, 0, 0);
      uint64_t result = (atomic_uchar *)v13;
      uint64_t v13 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
        uint64_t result = (atomic_uchar *)WTF::fastFree(v10, v11);
      }
      uint64_t v9 = v12;
      uint64_t v12 = 0;
      if (v9) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v9 + 16));
      }
    }
  }
  return result;
}

unsigned int *WebKit::RemoteSourceBufferProxy::append(uint64_t a1, IPC::SharedBufferReference *this, uint64_t *a3)
{
  IPC::SharedBufferReference::sharedCopy((unsigned int *)this, &v37);
  if (v37)
  {
    WebCore::SharedMemory::createHandle();
    uint64_t v5 = *(atomic_uchar **)(a1 + 32);
    if (v5) {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, *(void *)(a1 + 40), &v34);
    }
    else {
      uint64_t v34 = 0;
    }
    if (v36)
    {
      if (v34)
      {
        uint64_t v6 = *(void *)(v34 + 56);
        uint64_t v7 = *(void *)(a1 + 48);
        char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)char v8 = 1478;
        *((void *)v8 + 1) = v7;
        *((void *)v8 + 66) = (char *)v8 + 16;
        *((void *)v8 + 67) = 512;
        *((void *)v8 + 68) = 0;
        *((void *)v8 + 70) = 0;
        *((void *)v8 + 69) = 0;
        IPC::Encoder::encodeHeader(v8);
        v27[0] = v8;
        IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(v8, (unint64_t)v35);
        IPC::Connection::sendMessageImpl(v6, (uint64_t *)v27, 0, 0);
        uint64_t v10 = v27[0];
        v27[0] = 0;
        if (v10)
        {
          IPC::Encoder::~Encoder(v10, v9);
          WTF::fastFree(v25, v26);
        }
      }
    }
    uint64_t v11 = *(void *)(a1 + 56);
    WebCore::SharedMemory::createSharedBuffer(v37);
    uint64_t v12 = (WTF::RunLoop *)(*(void *(**)(unsigned int **__return_ptr, uint64_t, unsigned int **))(*(void *)v11 + 64))(&v29, v11, &v28);
    uint64_t v13 = (uint64_t)v29;
    uint64_t v14 = WTF::RunLoop::current(v12);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(a1 + 8));
    uint64_t v15 = *a3;
    *a3 = 0;
    v27[0] = 0;
    v27[1] = 0;
    uint64_t v16 = WTF::fastMalloc((WTF *)0x50);
    (*(void (**)(uint64_t))(*(void *)v14 + 32))(v14);
    uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v17 = &unk_1EE9C1C88;
    v17[1] = a1;
    v17[2] = a1;
    void v17[3] = v15;
    *(_DWORD *)(v16 + 8) = 1;
    *(void *)(v16 + 16) = v14;
    *(void *)(v16 + 24) = 0;
    *(void *)(v16 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
    *(void *)(v16 + 40) = "append";
    *(void *)(v16 + 48) = 0;
    *(_WORD *)(v16 + 56) = 0;
    *(void *)uint64_t v16 = &unk_1EE9C2260;
    *(void *)(v16 + 64) = 0;
    *(void *)(v16 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v17;
    atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
    v30[0] = v13;
    v30[1] = v16;
    long long v31 = *(_OWORD *)v27;
    uint64_t v32 = "append";
    uint64_t v33 = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand(v30);
    __int16 v19 = v29;
    uint64_t v29 = 0;
    if (v19 && atomic_fetch_add((atomic_uint *volatile)v19 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v19 + 2);
      (*(void (**)(unsigned int *))(*(void *)v19 + 16))(v19);
    }
    uint64_t v20 = v28;
    uint64_t v28 = 0;
    if (v20) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v20, v18);
    }
    uint64_t v21 = v34;
    uint64_t v34 = 0;
    if (v21) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v21 + 16));
    }
    if (v36) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v35);
    }
  }
  else
  {
    v35[0] = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 304))(*(void *)(a1 + 56));
    v35[1] = v22;
    uint64_t v23 = *a3;
    *a3 = 0;
    LOWORD(v27[0]) = 262;
    (*(void (**)(uint64_t, IPC::Encoder **, void *))(*(void *)v23 + 16))(v23, v27, v35);
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t result = (unsigned int *)v37;
  long long v37 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

uint64_t WebKit::RemoteSourceBufferProxy::setMediaSourceEnded(WebKit::RemoteSourceBufferProxy *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7) + 104))();
}

uint64_t WebKit::RemoteSourceBufferProxy::setActive(WebKit::RemoteSourceBufferProxy *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7) + 56))();
}

uint64_t WebKit::RemoteSourceBufferProxy::canSwitchToType(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 96))(*(void *)(a1 + 56));
  uint64_t v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v4);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

unsigned int *WebKit::RemoteSourceBufferProxy::removeCodedFrames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = (WTF::RunLoop *)(*(void *(**)(unsigned int **__return_ptr))(**(void **)(a1 + 56) + 184))(&v13);
  unint64_t v7 = (unint64_t)v13;
  uint64_t v8 = WTF::RunLoop::current(v6);
  __n128 v10 = 0uLL;
  uint64_t v11 = "removeCodedFrames";
  uint64_t v12 = 0;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(void)>>(v7, v8, a5, &v10, v14);
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)v14);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
    }
  }
  return result;
}

__n128 WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(void)>>@<Q0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X3>, __n128 *a5@<X8>)
{
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t v10 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v11 = &unk_1EE9C22C0;
  v11[1] = v9;
  *(_DWORD *)(v10 + 8) = 1;
  *(void *)uint64_t v10 = &unk_1EE9C2290;
  *(void *)(v10 + 16) = a2;
  __n128 v12 = *a4;
  *(__n128 *)(v10 + 40) = a4[1];
  *(__n128 *)(v10 + 24) = v12;
  *(_WORD *)(v10 + 56) = 0;
  *(void *)uint64_t v10 = &unk_1EE9C2260;
  *(void *)(v10 + 64) = 0;
  *(void *)(v10 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v11;
  atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  a5->n128_u64[0] = a1;
  a5->n128_u64[1] = v10;
  __n128 result = *a4;
  __n128 v14 = a4[1];
  a5[1] = *a4;
  a5[2] = v14;
  return result;
}

uint64_t WebKit::RemoteSourceBufferProxy::evictCodedFrames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  (*(void (**)(void))(**(void **)(a1 + 56) + 192))(*(void *)(a1 + 56));
  WebCore::SourceBufferPrivate::trackBuffersRanges(v12, *(WebCore::SourceBufferPrivate **)(a1 + 56));
  uint64_t v6 = *(void *)(a1 + 56);
  long long v7 = *(_OWORD *)(v6 + 56);
  v11[0] = *(_OWORD *)(v6 + 40);
  v11[1] = v7;
  uint64_t v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t *, _OWORD *))(*(void *)v8 + 16))(v8, v12, v11);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  return WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v9);
}

atomic_uchar *WebKit::RemoteSourceBufferProxy::addTrackBuffer(WebKit::RemoteSourceBufferProxy *this, unint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int8x8_t v3 = *(int8x8_t *)((char *)this + 80);
  if (v3)
  {
    uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      unint64_t v5 = a2;
      if (*(void *)&v3 <= a2) {
        unint64_t v5 = a2 % *(void *)&v3;
      }
    }
    else
    {
      unint64_t v5 = (*(void *)&v3 - 1) & a2;
    }
    uint64_t v6 = *((void *)this + 9);
    long long v7 = *(void **)(v6 + 8 * v5);
    if (v7)
    {
      uint64_t v8 = (void *)*v7;
      if (*v7)
      {
        uint64_t v9 = *(void *)&v3 - 1;
        do
        {
          unint64_t v10 = v8[1];
          if (v10 == a2)
          {
            if (v8[2] == a2)
            {
              uint64_t v13 = *((void *)this + 7);
              if (v4.u32[0] > 1uLL)
              {
                unint64_t v14 = a2;
                if (*(void *)&v3 <= a2) {
                  unint64_t v14 = a2 % *(void *)&v3;
                }
              }
              else
              {
                unint64_t v14 = v9 & a2;
              }
              long long v27 = *(void **)(v6 + 8 * v14);
              do
              {
                do
                  long long v27 = (void *)*v27;
                while (v27[1] != a2);
              }
              while (v27[2] != a2);
              uint64_t v28 = v27[3];
              atomic_fetch_add((atomic_uint *volatile)(v28 + 8), 1u);
              *(void *)long long buf = v28;
              (*(void (**)(uint64_t))(*(void *)v13 + 128))(v13);
              __n128 result = *(atomic_uchar **)buf;
              *(void *)long long buf = 0;
              if (result)
              {
                if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, (unsigned int *)result + 2);
                  return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 8))(result);
                }
              }
              return result;
            }
          }
          else
          {
            if (v4.u32[0] > 1uLL)
            {
              if (v10 >= *(void *)&v3) {
                v10 %= *(void *)&v3;
              }
            }
            else
            {
              v10 &= v9;
            }
            if (v10 != v5) {
              break;
            }
          }
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
    }
  }
  uint64_t v11 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::RemoteSourceBufferProxy::addTrackBuffer(TrackID)";
    _os_log_fault_impl(&dword_1985F2000, v11, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteSourceBufferProxy.cpp 258: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  __n128 result = (atomic_uchar *)*((void *)this + 4);
  if (result)
  {
    __n128 result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((void *)this + 5), buf);
    if (*(void *)buf)
    {
      char v15 = 0;
      uint64_t v16 = *(void *)(*(void *)buf + 56);
      atomic_uchar *volatile v17 = *(atomic_uchar *volatile *)v16;
      int v18 = 1;
      atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)v16, (unsigned __int8 *)&v15, 1u, memory_order_acquire, memory_order_acquire);
      if (v15) {
        __n128 result = (atomic_uchar *)MEMORY[0x19972E8D0](v17);
      }
      ++*((void *)v17 + 1);
      atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
      if (v18 != 1) {
        __n128 result = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v17);
      }
      uint64_t v19 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v19) {
        __n128 result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v19 + 16));
      }
      char v20 = 0;
      *(unsigned char *)(v16 + 98) = 1;
      atomic_uchar *volatile v21 = *(atomic_uchar *volatile *)v16;
      atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)v16, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
      if (v20) {
        __n128 result = (atomic_uchar *)MEMORY[0x19972E8D0](v21);
      }
      uint64_t v22 = *((void *)v21 + 1) - 1;
      *((void *)v21 + 1) = v22;
      if (v22)
      {
        BOOL v23 = 0;
        uint64_t v24 = 0;
      }
      else
      {
        uint64_t v29 = *((void *)v21 + 2);
        uint64_t v24 = *((void *)v21 + 3);
        *((void *)v21 + 3) = 0;
        BOOL v23 = v29 == 0;
      }
      int v25 = 1;
      atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
      if (v25 == 1)
      {
        if (v22) {
          return result;
        }
      }
      else
      {
        uint64_t v30 = v22;
        __n128 result = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v21);
        if (v30) {
          return result;
        }
      }
      uint64_t v26 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v26 = &unk_1EE9B37E8;
      *(void *)(v26 + 8) = v21;
      *(void *)(v26 + 16) = v24;
      *(unsigned char *)(v26 + 24) = v23;
      *(void *)long long buf = v26;
      WTF::ensureOnMainRunLoop();
      __n128 result = *(atomic_uchar **)buf;
      *(void *)long long buf = 0;
      if (result) {
        return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteSourceBufferProxy::setShouldGenerateTimestamps(WebKit::RemoteSourceBufferProxy *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7) + 176))();
}

unsigned int *WebKit::RemoteSourceBufferProxy::setMaximumBufferSize(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint8x8_t v4 = (WTF::RunLoop *)(*(void *(**)(unsigned int **__return_ptr))(**(void **)(a1 + 56) + 320))(&v14);
  uint64_t v5 = (uint64_t)v14;
  uint64_t v6 = WTF::RunLoop::current(v4);
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v9 = &unk_1EE9C1CB0;
  v9[1] = v7;
  *(_DWORD *)(v8 + 8) = 1;
  *(void *)(v8 + 16) = v6;
  *(void *)(v8 + 24) = 0;
  *(void *)(v8 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  *(void *)(v8 + 40) = "setMaximumBufferSize";
  *(void *)(v8 + 48) = 0;
  *(_WORD *)(v8 + 56) = 0;
  *(void *)uint64_t v8 = &unk_1EE9C1CD8;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v9;
  atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
  long long v17 = 0uLL;
  int v18 = "setMaximumBufferSize";
  uint64_t v19 = 0;
  char v15 = (unsigned int *)v5;
  uint64_t v16 = 0;
  char v20 = (WTF::NativePromiseBase *)v8;
  WTF::NativePromise<void,void,0u>::maybeSettle(v5, &v20, (WTF::Logger::LogSiteIdentifier *)&v17);
  unint64_t v10 = (unsigned int *)v20;
  char v20 = 0;
  if (v10 && atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v10 + 2);
    (*(void (**)(unsigned int *))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v16;
  uint64_t v16 = 0;
  if (v11 && atomic_fetch_add((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11 + 2);
    (*(void (**)(unsigned int *))(*(void *)v11 + 8))(v11);
  }
  __n128 v12 = v15;
  char v15 = 0;
  if (v12 && atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v12 + 2);
    (*(void (**)(unsigned int *))(*(void *)v12 + 16))(v12);
  }
  __n128 result = v14;
  unint64_t v14 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
    }
  }
  return result;
}

unsigned int *WebKit::RemoteSourceBufferProxy::computeSeekTime(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint8x8_t v4 = (WTF::RunLoop *)(*(void *(**)(unsigned int **__return_ptr))(**(void **)(a1 + 56) + 264))(&v11);
  unint64_t v5 = (unint64_t)v11;
  uint64_t v6 = WTF::RunLoop::current(v4);
  __n128 v8 = 0uLL;
  uint64_t v9 = "computeSeekTime";
  uint64_t v10 = 0;
  WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> &&)>>(v5, v6, a3, &v8, v12);
  WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)v12);
  __n128 result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
    }
  }
  return result;
}

__n128 WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> &&)>>@<Q0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X3>, __n128 *a5@<X8>)
{
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t v10 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v11 = &unk_1EE9C1D38;
  v11[1] = v9;
  *(_DWORD *)(v10 + 8) = 1;
  *(void *)uint64_t v10 = &unk_1EE9C1D90;
  *(void *)(v10 + 16) = a2;
  __n128 v12 = *a4;
  *(__n128 *)(v10 + 40) = a4[1];
  *(__n128 *)(v10 + 24) = v12;
  *(_WORD *)(v10 + 56) = 0;
  *(void *)uint64_t v10 = &unk_1EE9C1D60;
  *(void *)(v10 + 64) = 0;
  *(void *)(v10 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v11;
  atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  a5->n128_u64[0] = a1;
  a5->n128_u64[1] = v10;
  __n128 result = *a4;
  __n128 v14 = a4[1];
  a5[1] = *a4;
  a5[2] = v14;
  return result;
}

uint64_t WebKit::RemoteSourceBufferProxy::updateTrackIds(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 12)) {
    return (*(uint64_t (**)(void))(**(void **)(result + 56) + 280))();
  }
  return result;
}

unsigned int *WebKit::RemoteSourceBufferProxy::bufferedSamplesForTrackId(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint8x8_t v4 = (WTF::RunLoop *)(*(void *(**)(unsigned int **__return_ptr))(**(void **)(a1 + 56) + 336))(&v11);
  unint64_t v5 = (unint64_t)v11;
  uint64_t v6 = WTF::RunLoop::current(v4);
  __n128 v8 = 0uLL;
  uint64_t v9 = "bufferedSamplesForTrackId";
  uint64_t v10 = 0;
  WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError> &&)>>(v12, v5, v6, a3, &v8);
  WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)v12);
  __n128 result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
    }
  }
  return result;
}

__n128 WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError> &&)>>(__n128 *a1, unint64_t a2, uint64_t a3, uint64_t *a4, __n128 *a5)
{
  uint64_t v9 = *a4;
  *a4 = 0;
  uint64_t v10 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(void *)a3 + 32))(a3);
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v11 = &unk_1EE9C1DC0;
  v11[1] = v9;
  *(_DWORD *)(v10 + 8) = 1;
  *(void *)uint64_t v10 = &unk_1EE9C1E18;
  *(void *)(v10 + 16) = a3;
  __n128 v12 = *a5;
  *(__n128 *)(v10 + 40) = a5[1];
  *(__n128 *)(v10 + 24) = v12;
  *(_WORD *)(v10 + 56) = 0;
  *(void *)uint64_t v10 = &unk_1EE9C1DE8;
  *(void *)(v10 + 64) = 0;
  *(void *)(v10 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v11;
  atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
  a1->n128_u64[0] = a2;
  a1->n128_u64[1] = v10;
  __n128 result = *a5;
  __n128 v14 = a5[1];
  a1[1] = *a5;
  a1[2] = v14;
  return result;
}

unsigned int *WebKit::RemoteSourceBufferProxy::enqueuedSamplesForTrackID(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint8x8_t v4 = (WTF::RunLoop *)(*(void *(**)(unsigned int **__return_ptr))(**(void **)(a1 + 56) + 344))(&v11);
  unint64_t v5 = (unint64_t)v11;
  uint64_t v6 = WTF::RunLoop::current(v4);
  __n128 v8 = 0uLL;
  uint64_t v9 = "enqueuedSamplesForTrackID";
  uint64_t v10 = 0;
  WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError> &&)>>(v12, v5, v6, a3, &v8);
  WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)v12);
  __n128 result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
    }
  }
  return result;
}

uint64_t WebKit::RemoteSourceBufferProxy::minimumUpcomingPresentationTimeForTrackID(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 352))(*(void *)(a1 + 56));
  uint64_t v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v4, v6);
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v7(v5);
}

uint64_t WebKit::RemoteTextTrackProxy::RemoteTextTrackProxy(uint64_t a1, uint64_t a2, atomic_uint *a3, uint64_t a4)
{
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)a1 = &unk_1EE9C1A90;
  *(void *)(a1 + 8) = 0;
  __n128 v8 = *(atomic_uchar **)(a2 + 16);
  if (v8) {
    __n128 v8 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v8);
  }
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = a2;
  atomic_fetch_add(a3 + 2, 1u);
  *(void *)(a1 + 40) = a3;
  *(void *)(a1 + 48) = (*(uint64_t (**)(atomic_uint *))(*(void *)a3 + 48))(a3);
  *(void *)(a1 + 56) = a4;
  *(void *)(a1 + 64) = 0;
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v9 = &unk_1EE9C20D0;
  uint64_t v19 = v9;
  *(void *)(a1 + 64) = WebCore::TrackPrivateBase::addClient();
  uint64_t v10 = v19;
  uint64_t v19 = 0;
  if (v10) {
    (*(void (**)(IPC::Encoder *))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *(void *)(a2 + 56);
  WebKit::RemoteTextTrackProxy::configuration((WebKit::RemoteTextTrackProxy *)a1);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v13 = 149;
  *((void *)v13 + 1) = v12;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  uint64_t v19 = v13;
  IPC::ArgumentCoder<WebKit::TextTrackPrivateRemoteConfiguration,void>::encode(v13, (uint64_t)&qword_1EB359708);
  IPC::Connection::sendMessageImpl(v11, (uint64_t *)&v19, 0, 0);
  char v15 = v19;
  uint64_t v19 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v14);
    WTF::fastFree(v17, v18);
  }
  return a1;
}

uint64_t WebKit::RemoteTextTrackProxy::configuration(WebKit::RemoteTextTrackProxy *this)
{
  if ((_MergedGlobals_65 & 1) == 0)
  {
    *(_OWORD *)&dword_1EB359738 = 0u;
    *(_OWORD *)&qword_1EB359728 = 0u;
    *(_OWORD *)&qword_1EB359718 = 0u;
    *(_OWORD *)&qword_1EB359708 = 0u;
    *(_OWORD *)&qword_1EB359728 = *(_OWORD *)WTF::MediaTime::zeroTime(this);
    *(void *)&byte_1EB35973C = 0x10000000601;
    _MergedGlobals_65 = 1;
  }
  qword_1EB359708 = (*(uint64_t (**)(void))(**((void **)this + 5) + 48))(*((void *)this + 5));
  (*(void (**)(WTF::StringImpl **__return_ptr))(**((void **)this + 5) + 56))(&v12);
  WTF::String::operator=(&qword_1EB359710, &v12);
  int8x8_t v3 = v12;
  uint64_t v12 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**((void **)this + 5) + 64))(&v12);
  WTF::String::operator=(&qword_1EB359718, &v12);
  uint64_t v5 = v12;
  uint64_t v12 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  dword_1EB359738 = (*(uint64_t (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5));
  (*(void (**)(WTF::StringImpl **__return_ptr))(**((void **)this + 5) + 192))(&v12);
  WTF::String::operator=(&qword_1EB359720, &v12);
  uint64_t v7 = v12;
  uint64_t v12 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  qword_1EB359728 = (*(uint64_t (**)(void))(**((void **)this + 5) + 96))(*((void *)this + 5));
  dword_1EB359730 = v8;
  byte_1EB359734 = v9;
  uint64_t v10 = (unsigned char *)*((void *)this + 5);
  byte_1EB35973C = v10[48];
  byte_1EB35973E = (*(uint64_t (**)(unsigned char *))(*(void *)v10 + 144))(v10);
  byte_1EB35973F = (*(uint64_t (**)(void))(**((void **)this + 5) + 152))(*((void *)this + 5));
  byte_1EB359740 = (*(uint64_t (**)(void))(**((void **)this + 5) + 160))(*((void *)this + 5));
  byte_1EB359741 = (*(uint64_t (**)(void))(**((void **)this + 5) + 168))(*((void *)this + 5));
  byte_1EB359742 = (*(uint64_t (**)(void))(**((void **)this + 5) + 176))(*((void *)this + 5));
  byte_1EB359743 = (*(uint64_t (**)(void))(**((void **)this + 5) + 184))(*((void *)this + 5));
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 5) + 136))(*((void *)this + 5));
  byte_1EB35973D = result;
  return result;
}

void WebKit::RemoteTextTrackProxy::~RemoteTextTrackProxy(WebKit::RemoteTextTrackProxy *this)
{
  WebCore::TrackPrivateBase::removeClient(*((WebCore::TrackPrivateBase **)this + 5));
  int8x8_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uchar *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteTextTrackProxy::~RemoteTextTrackProxy(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteTextTrackProxy::configurationChanged(WebKit::RemoteTextTrackProxy *this)
{
  uint64_t result = *((void *)this + 3);
  if (result)
  {
    uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)result, *((void *)this + 4), &v14);
    if (v14)
    {
      uint64_t v3 = *(void *)(v14 + 56);
      uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 5) + 48))(*((void *)this + 5));
      uint64_t v5 = *((void *)this + 6);
      *((void *)this + 6) = v4;
      WebKit::RemoteTextTrackProxy::configuration(this);
      uint64_t v6 = *((void *)this + 7);
      uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v7 = 172;
      *((void *)v7 + 1) = v6;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      char v15 = v7;
      int v8 = (void *)IPC::Encoder::grow(v7, 8uLL, 8);
      if (v9 <= 7)
      {
        uint64_t result = 831;
        __break(0xC471u);
      }
      else
      {
        void *v8 = v5;
        IPC::ArgumentCoder<WebKit::TextTrackPrivateRemoteConfiguration,void>::encode(v7, (uint64_t)&qword_1EB359708);
        IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v15, 0, 0);
        uint64_t result = (uint64_t)v15;
        char v15 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
          uint64_t result = WTF::fastFree(v12, v13);
        }
        uint64_t v11 = v14;
        uint64_t v14 = 0;
        if (v11) {
          return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v11 + 16));
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteTextTrackProxy::addDataCue(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)result, *(void *)(a1 + 32), &v21);
    if (v21)
    {
      uint64_t v11 = *(void *)(v21 + 56);
      uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 48))(*(void *)(a1 + 40));
      uint64_t v13 = *(void *)(a1 + 56);
      uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v14 = 145;
      *((void *)v14 + 1) = v13;
      *((void *)v14 + 66) = (char *)v14 + 16;
      *((void *)v14 + 67) = 512;
      *((void *)v14 + 68) = 0;
      *((void *)v14 + 70) = 0;
      *((void *)v14 + 69) = 0;
      IPC::Encoder::encodeHeader(v14);
      uint64_t v22 = v14;
      char v15 = (void *)IPC::Encoder::grow(v14, 8uLL, 8);
      if (v16 <= 7)
      {
        uint64_t result = 831;
        __break(0xC471u);
      }
      else
      {
        void *v15 = v12;
        IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v14, a2);
        IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v14, a3);
        IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v14, a4, a5);
        IPC::Connection::sendMessageImpl(v11, (uint64_t *)&v22, 0, 0);
        uint64_t result = (uint64_t)v22;
        uint64_t v22 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder((IPC::Encoder *)result, v17);
          uint64_t result = WTF::fastFree(v19, v20);
        }
        uint64_t v18 = v21;
        uint64_t v21 = 0;
        if (v18) {
          return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v18 + 16));
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteTextTrackProxy::addDataCue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)result, *(void *)(a1 + 32), &v23);
    if (v23)
    {
      uint64_t v11 = *(void *)(v23 + 56);
      uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 48))(*(void *)(a1 + 40));
      (*(void (**)(void *__return_ptr))(**(void **)a4 + 56))(v22);
      uint64_t v13 = *(void *)(a1 + 56);
      uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v14 = 146;
      *((void *)v14 + 1) = v13;
      *((void *)v14 + 66) = (char *)v14 + 16;
      *((void *)v14 + 67) = 512;
      *((void *)v14 + 68) = 0;
      *((void *)v14 + 70) = 0;
      *((void *)v14 + 69) = 0;
      IPC::Encoder::encodeHeader(v14);
      uint64_t v24 = v14;
      char v15 = (void *)IPC::Encoder::grow(v14, 8uLL, 8);
      if (v16 <= 7)
      {
        uint64_t result = 831;
        __break(0xC471u);
      }
      else
      {
        void *v15 = v12;
        IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v14, a2);
        IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v14, a3);
        ((void (*)(IPC::Encoder *, void *))IPC::ArgumentCoder<std::optional<WebCore::SerializedPlatformDataCueValue::Data>,void>::encode<IPC::Encoder,std::optional<WebCore::SerializedPlatformDataCueValue::Data> const&>)(v14, v22);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a5);
        IPC::Connection::sendMessageImpl(v11, (uint64_t *)&v24, 0, 0);
        uint64_t v18 = v24;
        uint64_t v24 = 0;
        if (v18)
        {
          IPC::Encoder::~Encoder(v18, v17);
          WTF::fastFree(v20, v21);
        }
        uint64_t result = std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, (WTF::StringImpl *)v17);
        uint64_t v19 = v23;
        uint64_t v23 = 0;
        if (v19) {
          return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v19 + 16));
        }
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::RemoteTextTrackProxy::updateDataCue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(atomic_uchar **)(a1 + 24);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(void *)(a1 + 32), &v20);
    if (v20)
    {
      uint64_t v9 = *(void *)(v20 + 56);
      uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 48))(*(void *)(a1 + 40));
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a4 + 56))(v18, a4);
      v19[0] = v10;
      v19[1] = a2;
      void v19[2] = a3;
      v19[3] = (uint64_t)v18;
      uint64_t v11 = *(void *)(a1 + 56);
      uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v12 = 188;
      *((void *)v12 + 1) = v11;
      *((void *)v12 + 66) = (char *)v12 + 16;
      *((void *)v12 + 67) = 512;
      *((void *)v12 + 68) = 0;
      *((void *)v12 + 70) = 0;
      *((void *)v12 + 69) = 0;
      IPC::Encoder::encodeHeader(v12);
      uint64_t v21 = v12;
      IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::MediaTime const&,WTF::MediaTime const&,WebCore::SerializedPlatformDataCueValue const&>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,WTF::MediaTime const&,WTF::MediaTime const&,WebCore::SerializedPlatformDataCueValue const&>,0ul,1ul,2ul,3ul>(v12, v19);
      IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v21, 0, 0);
      uint64_t v14 = v21;
      uint64_t v21 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v13);
        WTF::fastFree(v16, v17);
      }
      uint64_t result = (atomic_uchar *)std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, (WTF::StringImpl *)v13);
      uint64_t v15 = v20;
      uint64_t v20 = 0;
      if (v15) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v15 + 16));
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::RemoteTextTrackProxy::removeDataCue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(atomic_uchar **)(a1 + 24);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(void *)(a1 + 32), &v20);
    if (v20)
    {
      uint64_t v9 = *(void *)(v20 + 56);
      uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 48))(*(void *)(a1 + 40));
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a4 + 56))(v18, a4);
      v19[0] = v10;
      v19[1] = a2;
      void v19[2] = a3;
      v19[3] = (uint64_t)v18;
      uint64_t v11 = *(void *)(a1 + 56);
      uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v12 = 174;
      *((void *)v12 + 1) = v11;
      *((void *)v12 + 66) = (char *)v12 + 16;
      *((void *)v12 + 67) = 512;
      *((void *)v12 + 68) = 0;
      *((void *)v12 + 70) = 0;
      *((void *)v12 + 69) = 0;
      IPC::Encoder::encodeHeader(v12);
      uint64_t v21 = v12;
      IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::MediaTime const&,WTF::MediaTime const&,WebCore::SerializedPlatformDataCueValue const&>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,WTF::MediaTime const&,WTF::MediaTime const&,WebCore::SerializedPlatformDataCueValue const&>,0ul,1ul,2ul,3ul>(v12, v19);
      IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v21, 0, 0);
      uint64_t v14 = v21;
      uint64_t v21 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v13);
        WTF::fastFree(v16, v17);
      }
      uint64_t result = (atomic_uchar *)std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, (WTF::StringImpl *)v13);
      uint64_t v15 = v20;
      uint64_t v20 = 0;
      if (v15) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v15 + 16));
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::RemoteTextTrackProxy::addGenericCue(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(atomic_uchar **)(a1 + 24);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(void *)(a1 + 32), &v13);
    if (v13)
    {
      uint64_t v5 = *(void *)(v13 + 56);
      v12[0] = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 48))(*(void *)(a1 + 40));
      v12[1] = a2 + 8;
      uint64_t v6 = *(void *)(a1 + 56);
      uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v7 = 147;
      *((void *)v7 + 1) = v6;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      uint64_t v14 = v7;
      IPC::ArgumentCoder<std::tuple<unsigned long long,WebCore::GenericCueData const&>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,WebCore::GenericCueData const&>,0ul,1ul>(v7, v12);
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v14, 0, 0);
      uint64_t result = (atomic_uchar *)v14;
      uint64_t v14 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
        uint64_t result = (atomic_uchar *)WTF::fastFree(v10, v11);
      }
      uint64_t v9 = v13;
      uint64_t v13 = 0;
      if (v9) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v9 + 16));
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::RemoteTextTrackProxy::updateGenericCue(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(atomic_uchar **)(a1 + 24);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(void *)(a1 + 32), &v13);
    if (v13)
    {
      uint64_t v5 = *(void *)(v13 + 56);
      v12[0] = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 48))(*(void *)(a1 + 40));
      v12[1] = a2 + 8;
      uint64_t v6 = *(void *)(a1 + 56);
      uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v7 = 189;
      *((void *)v7 + 1) = v6;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      uint64_t v14 = v7;
      IPC::ArgumentCoder<std::tuple<unsigned long long,WebCore::GenericCueData const&>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,WebCore::GenericCueData const&>,0ul,1ul>(v7, v12);
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v14, 0, 0);
      uint64_t result = (atomic_uchar *)v14;
      uint64_t v14 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
        uint64_t result = (atomic_uchar *)WTF::fastFree(v10, v11);
      }
      uint64_t v9 = v13;
      uint64_t v13 = 0;
      if (v9) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v9 + 16));
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::RemoteTextTrackProxy::removeGenericCue(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(atomic_uchar **)(a1 + 24);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(void *)(a1 + 32), &v13);
    if (v13)
    {
      uint64_t v5 = *(void *)(v13 + 56);
      v12[0] = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 48))(*(void *)(a1 + 40));
      v12[1] = a2 + 8;
      uint64_t v6 = *(void *)(a1 + 56);
      uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v7 = 175;
      *((void *)v7 + 1) = v6;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      uint64_t v14 = v7;
      IPC::ArgumentCoder<std::tuple<unsigned long long,WebCore::GenericCueData const&>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,WebCore::GenericCueData const&>,0ul,1ul>(v7, v12);
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v14, 0, 0);
      uint64_t result = (atomic_uchar *)v14;
      uint64_t v14 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
        uint64_t result = (atomic_uchar *)WTF::fastFree(v10, v11);
      }
      uint64_t v9 = v13;
      uint64_t v13 = 0;
      if (v9) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v9 + 16));
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::RemoteTextTrackProxy::parseWebVTTFileHeader(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(atomic_uchar **)(a1 + 24);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(void *)(a1 + 32), &v13);
    if (v13)
    {
      uint64_t v5 = *(void *)(v13 + 56);
      v12[0] = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 48))(*(void *)(a1 + 40));
      v12[1] = a2;
      uint64_t v6 = *(void *)(a1 + 56);
      uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v7 = 166;
      *((void *)v7 + 1) = v6;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      uint64_t v14 = v7;
      IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,WTF::String const&>,0ul,1ul>(v7, v12);
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v14, 0, 0);
      uint64_t result = (atomic_uchar *)v14;
      uint64_t v14 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
        uint64_t result = (atomic_uchar *)WTF::fastFree(v10, v11);
      }
      uint64_t v9 = v13;
      uint64_t v13 = 0;
      if (v9) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v9 + 16));
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteTextTrackProxy::parseWebVTTCueData(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)result, *(void *)(a1 + 32), &v17);
    if (v17)
    {
      uint64_t v7 = *(void *)(v17 + 56);
      uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 48))(*(void *)(a1 + 40));
      uint64_t v9 = *(void *)(a1 + 56);
      uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v10 = 164;
      *((void *)v10 + 1) = v9;
      *((void *)v10 + 66) = (char *)v10 + 16;
      *((void *)v10 + 67) = 512;
      *((void *)v10 + 68) = 0;
      *((void *)v10 + 70) = 0;
      *((void *)v10 + 69) = 0;
      IPC::Encoder::encodeHeader(v10);
      uint64_t v18 = v10;
      uint64_t v11 = (void *)IPC::Encoder::grow(v10, 8uLL, 8);
      if (v12 <= 7)
      {
        uint64_t result = 831;
        __break(0xC471u);
      }
      else
      {
        void *v11 = v8;
        IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v10, a2, a3);
        IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v18, 0, 0);
        uint64_t result = (uint64_t)v18;
        uint64_t v18 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
          uint64_t result = WTF::fastFree(v15, v16);
        }
        uint64_t v14 = v17;
        uint64_t v17 = 0;
        if (v14) {
          return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v14 + 16));
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteTextTrackProxy::parseWebVTTCueData(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)result, *(void *)(a1 + 32), &v15);
    if (v15)
    {
      uint64_t v5 = *(void *)(v15 + 56);
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 48))(*(void *)(a1 + 40));
      uint64_t v7 = *(void *)(a1 + 56);
      uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v8 = 165;
      *((void *)v8 + 1) = v7;
      *((void *)v8 + 66) = (char *)v8 + 16;
      *((void *)v8 + 67) = 512;
      *((void *)v8 + 68) = 0;
      *((void *)v8 + 70) = 0;
      *((void *)v8 + 69) = 0;
      IPC::Encoder::encodeHeader(v8);
      unint64_t v16 = v8;
      uint64_t v9 = (void *)IPC::Encoder::grow(v8, 8uLL, 8);
      if (v10 <= 7)
      {
        uint64_t result = 831;
        __break(0xC471u);
      }
      else
      {
        *uint64_t v9 = v6;
        IPC::ArgumentCoder<WebCore::ISOWebVTTCue,void>::encode(v8, a2);
        IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v16, 0, 0);
        uint64_t result = (uint64_t)v16;
        unint64_t v16 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder((IPC::Encoder *)result, v11);
          uint64_t result = WTF::fastFree(v13, v14);
        }
        uint64_t v12 = v15;
        uint64_t v15 = 0;
        if (v12) {
          return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v12 + 16));
        }
      }
    }
  }
  return result;
}

void WebKit::RemoteVideoFrameObjectHeap::~RemoteVideoFrameObjectHeap(WebKit::RemoteVideoFrameObjectHeap *this)
{
  uint64_t v4 = (WTF *)*((void *)this + 21);
  uint64_t v2 = (void *)((char *)this + 168);
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((int)v2, v3);
  }
  WebKit::SharedVideoFrameReader::~SharedVideoFrameReader((WebKit::RemoteVideoFrameObjectHeap *)((char *)this + 80));
  WebKit::SharedVideoFrameWriter::~SharedVideoFrameWriter((WebKit::RemoteVideoFrameObjectHeap *)((char *)this + 56));
  *((void *)this + 4) = &unk_1EE9C1E48;
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v6, v5);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)this + 3);
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v7);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteVideoFrameObjectHeap::~RemoteVideoFrameObjectHeap(this);

  WTF::fastFree(v1, v2);
}

void WebKit::SharedVideoFrameWriter::~SharedVideoFrameWriter(WebKit::SharedVideoFrameWriter *this)
{
  uint64_t v2 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  }
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)this, 0);
}

void *IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::~ThreadSafeObjectHeap(void *a1, void *a2)
{
  *a1 = &unk_1EE9C1E48;
  uint64_t v3 = a1[2];
  if (v3) {
    WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v3, a2);
  }
  return a1;
}

uint64_t WebKit::RemoteVideoFrameObjectHeap::close(uint64_t this)
{
  if (!*(unsigned char *)(this + 176))
  {
    uint64_t v1 = this;
    *(unsigned char *)(this + 176) = 1;
    IPC::Connection::removeWorkQueueMessageReceiver(*(void *)(this + 24), 0x81u, 0);
    WebKit::SharedVideoFrameWriter::disable((WebKit::SharedVideoFrameWriter *)(v1 + 56));
  }
  return this;
}

uint64_t IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::clear(uint64_t a1, void *a2)
{
  char v3 = 0;
  uint64_t v4 = (atomic_uchar *)(a1 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 8), (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    MEMORY[0x19972E8D0](a1 + 8);
  }
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    *(void *)(a1 + 16) = 0;
    uint64_t result = WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(result, a2);
  }
  int v6 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  return result;
}

unsigned int *WebKit::RemoteVideoFrameObjectHeap::add@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  v9[0] = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v9[1] = 0;
  WebKit::RemoteVideoFrameProxy::properties(v9[0], 0, *a2, a3);
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v8 = (unsigned int *)v6;
  IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::add(a1 + 32, v9, (uint64_t *)&v8);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::add(uint64_t a1, void *a2, uint64_t *a3)
{
  char v6 = 0;
  uint64_t v7 = (atomic_uchar *)(a1 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 8), (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x19972E8D0](a1 + 8);
  }
  uint64_t v8 = (_OWORD **)(a1 + 16);
  unint64_t v16 = a3;
  WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::ensure<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::add(IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>)::{lambda(void)#1}>((uint64_t *)(a1 + 16), a2, &v16, (uint64_t)&v17);
  if (v18) {
    goto LABEL_4;
  }
  if (*((unsigned char *)v17 + 32) && !*((void *)v17 + 3))
  {
    uint64_t v15 = *v8;
    if (!*v8 || (uint64_t v15 = (_OWORD *)((char *)v15 + 56 * *((unsigned int *)v15 - 1)), v15 != v17))
    {
      if (v15 != v17) {
        WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove((uint64_t *)(a1 + 16), v17);
      }
    }
    goto LABEL_6;
  }
  if (!*((unsigned char *)v17 + 48))
  {
    std::optional<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::operator=[abi:sn180100]<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,void>((uint64_t)v17 + 40, a3);
LABEL_4:
    unint64_t v10 = (unsigned __int8 *)(a1 + 9);
    unsigned __int8 v11 = atomic_load((unsigned __int8 *)(a1 + 9));
    if (v11)
    {
      atomic_store(0, v10);
      WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v10, v9);
    }
LABEL_6:
    uint64_t v12 = 1;
    goto LABEL_7;
  }
  uint64_t v12 = 0;
LABEL_7:
  int v13 = 1;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
  if (v13 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  return v12;
}

uint64_t IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::remove(uint64_t a1, long long *a2)
{
  char v4 = 0;
  uint64_t v5 = (atomic_uchar *)(a1 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 8), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 8);
  }
  unint64_t v6 = *((void *)a2 + 2);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = (uint64_t *)(a1 + 16);
  uint64_t v8 = v9;
  long long v30 = *a2;
  if (v9
    || (WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(v7, 0), (uint64_t v8 = *v7) != 0))
  {
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
  }
  LODWORD(v31) = -1640531527;
  WORD2(v31) = 0;
  BYTE6(v31) = 0;
  WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v31, &v30);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v31);
  unsigned int v12 = result & v10;
  uint64_t v13 = v8 + 56 * (result & v10);
  unint64_t v14 = *(void *)v13;
  unint64_t v15 = *(void *)(v13 + 8);
  if (*(_OWORD *)v13 == 0)
  {
LABEL_14:
    *(_OWORD *)uint64_t v13 = v30;
    *(void *)&long long v31 = 0;
    *((void *)&v31 + 1) = v6;
    char v32 = 1;
    LOBYTE(v33) = 0;
    char v34 = 0;
    *(unsigned char *)(v13 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 1;
    *(_OWORD *)(v13 + 16) = v31;
    std::__optional_storage_base<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,false>>((unsigned int *)(v13 + 40), (uint64_t *)&v33);
    if (v34)
    {
      char v18 = v33;
      uint64_t v33 = 0;
      if (v18)
      {
        if (atomic_fetch_add((atomic_uint *volatile)v18 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v18 + 2);
          (*(void (**)(unsigned int *))(*(void *)v18 + 8))(v18);
        }
      }
    }
    uint64_t v19 = *v7;
    if (*v7) {
      int v20 = *(_DWORD *)(v19 - 12) + 1;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(v19 - 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v20;
    uint64_t v21 = *v7;
    if (*v7) {
      int v22 = *(_DWORD *)(v21 - 12);
    }
    else {
      int v22 = 0;
    }
    uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
    unint64_t v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 > 2 * v23) {
        goto LABEL_27;
      }
    }
    else if (3 * v24 > 4 * v23)
    {
LABEL_27:
      int v25 = 0;
      goto LABEL_28;
    }
    WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(v7, (_OWORD *)v13);
    goto LABEL_27;
  }
  uint64_t v16 = 0;
  int v17 = 1;
  while (v30 != __PAIR128__(v15, v14))
  {
    if (v14 == -1) {
      uint64_t v16 = v13;
    }
    unsigned int v12 = (v12 + v17) & v10;
    uint64_t v13 = v8 + 56 * v12;
    unint64_t v14 = *(void *)v13;
    unint64_t v15 = *(void *)(v13 + 8);
    ++v17;
    if (*(_OWORD *)v13 == 0)
    {
      if (v16)
      {
        *(void *)(v16 + 48) = 0;
        *(_OWORD *)(v16 + 16) = 0u;
        *(_OWORD *)(v16 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0u;
        *(_OWORD *)uint64_t v16 = 0u;
        --*(_DWORD *)(*v7 - 16);
        uint64_t v13 = v16;
      }
      goto LABEL_14;
    }
  }
  if (*(unsigned char *)(v13 + 32) || (unint64_t v27 = *(void *)(v13 + 16), v27 > v6))
  {
    int v25 = 0;
    uint64_t v26 = 0;
    goto LABEL_32;
  }
  if (v27 != v6)
  {
    int v25 = 0;
    *(void *)(v13 + 24) = v6;
    uint64_t v26 = 1;
    *(unsigned char *)(v13 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 1;
    goto LABEL_32;
  }
  if (!*(unsigned char *)(v13 + 48))
  {
    __break(1u);
    return result;
  }
  int v25 = *(unsigned int **)(v13 + 40);
  *(void *)(v13 + 40) = 0;
  uint64_t v29 = *v7;
  if (!*v7 || (v29 += 56 * *(unsigned int *)(v29 - 4), v29 != v13))
  {
    if (v29 != v13) {
      WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(v7, (_OWORD *)v13);
    }
  }
LABEL_28:
  uint64_t v26 = 1;
LABEL_32:
  int v28 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
  if (v28 == 1)
  {
    if (v25) {
      goto LABEL_34;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v25)
    {
LABEL_34:
      if (atomic_fetch_add((atomic_uint *volatile)v25 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v25 + 2);
        (*(void (**)(unsigned int *))(*(void *)v25 + 8))(v25);
      }
    }
  }
  return v26;
}

unsigned int *WebKit::RemoteVideoFrameObjectHeap::getVideoFrameBuffer(WebKit *a1, _OWORD *a2, int a3)
{
  unint64_t v6 = (WTF::ApproximateTime *)WebKit::remoteVideoFrameObjectHeapQueue(a1);
  uint64_t v27 = *(void *)a2;
  WTF::ApproximateTime::now(v6);
  IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::read((uint64_t)a1 + 32, a2, &v26, v7 + 0.0);
  v23[0] = 0;
  char v25 = 0;
  if (v26)
  {
    uint64_t v8 = (WebCore::SharedVideoFrameInfo *)(*(uint64_t (**)(unsigned int *))(*(void *)v26 + 56))(v26);
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v9 = &unk_1EE9C20F8;
    v9[1] = a1;
    uint64_t v19 = v9;
    int v10 = (void *)WTF::fastMalloc((WTF *)0x10);
    *int v10 = &unk_1EE9C2120;
    v10[1] = a1;
    char v18 = v10;
    WebKit::SharedVideoFrameWriter::writeBuffer(v8, (void *)a1 + 7, (uint64_t *)&v19, &v18, a3, (uint64_t)v20);
    if (v25 == v22)
    {
      if (!v25)
      {
LABEL_14:
        (*(void (**)(void *))(*v10 + 8))(v10);
        (*(void (**)(void *))(*v9 + 8))(v9);
        goto LABEL_15;
      }
      std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)v23, (uint64_t)v20);
    }
    else if (v25)
    {
      if (v24 != -1) {
        ((void (*)(char *, unsigned char *))off_1EE9C1E58[v24])(&v28, v23);
      }
      int v24 = -1;
      char v25 = 0;
    }
    else
    {
      v23[0] = 0;
      int v24 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)v23, (uint64_t)v20);
      char v25 = 1;
    }
    if (v22)
    {
      if (v21 != -1) {
        ((void (*)(char *, IPC::Encoder **))off_1EE9C1E58[v21])(&v28, v20);
      }
      int v21 = -1;
    }
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v11 = *((void *)a1 + 3);
  unsigned int v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v12 = 1414;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  v20[0] = v12;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v12, &v27);
  IPC::ArgumentCoder<std::optional<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>,void>::encode<IPC::Encoder,std::optional<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>>(v12, (uint64_t)v23);
  IPC::Connection::sendMessageImpl(v11, (uint64_t *)v20, 0, 0);
  unint64_t v14 = v20[0];
  v20[0] = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v13);
    WTF::fastFree(v16, v17);
  }
  if (v25 && v24 != -1) {
    ((void (*)(IPC::Encoder **, unsigned char *))off_1EE9C1E58[v24])(v20, v23);
  }
  uint64_t result = v26;
  uint64_t v26 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *WebKit::RemoteVideoFrameObjectHeap::pixelBuffer(WebKit *a1, _OWORD *a2, uint64_t *a3)
{
  unint64_t v6 = (WTF::ApproximateTime *)WebKit::remoteVideoFrameObjectHeapQueue(a1);
  WTF::ApproximateTime::now(v6);
  IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::read((uint64_t)a1 + 32, a2, &v13, v7 + 0.0);
  if (!v13)
  {
    CFTypeRef cf = 0;
    WTF::CompletionHandler<void ()(WTF::RetainPtr<__CVBuffer *>)>::operator()(a3, &cf);
    CFTypeRef v9 = cf;
    CFTypeRef cf = 0;
    if (!v9) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  uint64_t v8 = (const void *)(*(uint64_t (**)(unsigned int *))(*(void *)v13 + 56))(v13);
  uint64_t v11 = v8;
  if (v8) {
    CFRetain(v8);
  }
  WTF::CompletionHandler<void ()(WTF::RetainPtr<__CVBuffer *>)>::operator()(a3, &v11);
  CFTypeRef v9 = v11;
  uint64_t v11 = 0;
  if (v9) {
LABEL_10:
  }
    CFRelease(v9);
LABEL_5:
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WTF::RetainPtr<__CVBuffer *>)>::operator()(uint64_t *a1, const void **a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  char v3 = *a2;
  *a2 = 0;
  CFTypeRef cf = v3;
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v2 + 16))(v2, &cf);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

void WebKit::RemoteVideoFrameObjectHeap::convertFrameBuffer(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6 = *(const void **)WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)a1);
  CFTypeRef cf = v6;
  if (v6) {
    CFRetain(v6);
  }
  WebCore::DestinationColorSpace::DestinationColorSpace();
  double v7 = (void *)cf;
  CFTypeRef cf = 0;
  if (v7) {
    CFRelease(v7);
  }
  if (*(_DWORD *)(a2 + 40) == 1)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)v7);
    IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::read(a1 + 32, (_OWORD *)(a2 + 24), v37, v8 + 0.0);
  }
  else
  {
    WebKit::SharedVideoFrameReader::read(a1 + 80, a2, v37);
  }
  CFTypeRef v9 = (unsigned int *)v37[0];
  if (v37[0])
  {
    int v10 = (WebCore *)(*(uint64_t (**)(CFTypeRef))(*(void *)v37[0] + 56))(v37[0]);
    unsigned int v12 = v10;
    if (v10) {
      CFRetain(v10);
    }
    WebCore::createCGColorSpaceForCVPixelBuffer((uint64_t *)&v36, v12, v11);
    WebCore::DestinationColorSpace::DestinationColorSpace();
    CFTypeRef v13 = v37[0];
    v37[0] = 0;
    CFTypeRef v14 = v42;
    CFTypeRef v42 = v13;
    if (v14)
    {
      CFRelease(v14);
      CFTypeRef v15 = v37[0];
      v37[0] = 0;
      if (v15) {
        CFRelease(v15);
      }
    }
    CFTypeRef v16 = v36;
    CFTypeRef v36 = 0;
    if (v16) {
      CFRelease(v16);
    }
    if (((unsigned int (*)(WebCore *))*MEMORY[0x1E4FB6518])(v12) == 1111970369)
    {
      int v17 = v12;
LABEL_39:
      char v28 = (void *)WTF::fastMalloc((WTF *)0x10);
      *char v28 = &unk_1EE9C2148;
      v28[1] = a1;
      CFTypeRef v40 = v28;
      uint64_t v29 = (CFTypeRef *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v29 = &unk_1EE9C2170;
      v29[1] = (CFTypeRef)a1;
      long long v35 = v29;
      WebKit::SharedVideoFrameWriter::writeBuffer(v17, (void *)(a1 + 56), (uint64_t *)&v40, &v35, 0, (uint64_t)v37);
      if (v35) {
        (*((void (**)(CFTypeRef *))*v35 + 1))(v35);
      }
      if (v40) {
        (*(void (**)(CFTypeRef))(*(void *)v40 + 8))(v40);
      }
      uint64_t v30 = *(void *)(a1 + 24);
      CFTypeRef v40 = v37;
      IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::NewConvertedVideoFrameBuffer>(v30, (uint64_t *)&v40);
      if (v39 && v38 != -1) {
        ((void (*)(CFTypeRef *, CFTypeRef *))off_1EE9C1E58[v38])(&v40, v37);
      }
      goto LABEL_46;
    }
    char v19 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 160), (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
    if (v19) {
      MEMORY[0x19972E8D0](a1 + 160);
    }
    int v20 = *(WebCore::PixelBufferConformerCV **)(a1 + 168);
    if (!v20)
    {
      WebKit::RemoteVideoFrameObjectHeap::createPixelConformer((WebKit::RemoteVideoFrameObjectHeap *)a1, (WebCore::PixelBufferConformerCV **)&v40);
      CFTypeRef v21 = v40;
      CFTypeRef v40 = 0;
      v37[0] = 0;
      char v22 = *(WTF **)(a1 + 168);
      *(void *)(a1 + 168) = v21;
      if (v22)
      {
        std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100](a1 + 168, v22);
        uint64_t v33 = (WTF *)v37[0];
        v37[0] = 0;
        if (v33) {
          std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((int)v37, v33);
        }
        char v34 = (WTF *)v40;
        CFTypeRef v40 = 0;
        if (v34) {
          std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((int)&v40, v34);
        }
      }
      int v20 = *(WebCore::PixelBufferConformerCV **)(a1 + 168);
    }
    WebCore::PixelBufferConformerCV::convert((uint64_t *)&v40, v20, v12);
    uint64_t v23 = (WebCore::SharedVideoFrameInfo *)v40;
    if (v40)
    {
      CFTypeRef v40 = 0;
      int v17 = v23;
      if (!v12) {
        goto LABEL_37;
      }
      CFRelease(v12);
      unsigned int v12 = v23;
    }
    else
    {
      int v24 = qword_1EB358820;
      if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v37[0]) = 0;
        _os_log_error_impl(&dword_1985F2000, v24, OS_LOG_TYPE_ERROR, "RemoteVideoFrameObjectHeap::convertFrameBuffer conformer failed", (uint8_t *)v37, 2u);
      }
      uint64_t v25 = *(void *)(a1 + 24);
      LOBYTE(v37[0]) = 0;
      char v39 = 0;
      long long v35 = v37;
      IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::NewConvertedVideoFrameBuffer>(v25, (uint64_t *)&v35);
      if (v39 && v38 != -1) {
        ((void (*)(char *, CFTypeRef *))off_1EE9C1E58[v38])(&v43, v37);
      }
    }
    CFTypeRef v26 = v40;
    CFTypeRef v40 = 0;
    if (v26) {
      CFRelease(v26);
    }
    int v17 = v12;
LABEL_37:
    int v27 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 160), (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
    if (v27 == 1)
    {
      if (v23) {
        goto LABEL_39;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 160));
      if (v23) {
        goto LABEL_39;
      }
    }
LABEL_46:
    if (v17) {
      CFRelease(v17);
    }
    if (atomic_fetch_add((atomic_uint *volatile)v9 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(void *)v9 + 8))(v9);
    }
    goto LABEL_50;
  }
  uint64_t v18 = *(void *)(a1 + 24);
  LOBYTE(v37[0]) = 0;
  char v39 = 0;
  CFTypeRef v40 = v37;
  IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::NewConvertedVideoFrameBuffer>(v18, (uint64_t *)&v40);
  if (v39 && v38 != -1) {
    ((void (*)(CFTypeRef **, CFTypeRef *))off_1EE9C1E58[v38])(&v35, v37);
  }
LABEL_50:
  v37[0] = v42;
  if (v42) {
    CFRetain(v42);
  }
  WTF::CompletionHandler<void ()(WebCore::DestinationColorSpace)>::operator()(a3, v37);
  CFTypeRef v31 = v37[0];
  v37[0] = 0;
  if (v31) {
    CFRelease(v31);
  }
  CFTypeRef v32 = v42;
  CFTypeRef v42 = 0;
  if (v32) {
    CFRelease(v32);
  }
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::NewConvertedVideoFrameBuffer>(uint64_t a1, uint64_t *a2)
{
  CFTypeRef v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)CFTypeRef v4 = 1413;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  CFTypeRef v9 = v4;
  IPC::ArgumentCoder<std::optional<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>,void>::encode<IPC::Encoder,std::optional<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>>(v4, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  CFTypeRef v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Semaphore *WebKit::RemoteVideoFrameObjectHeap::setSharedVideoFrameSemaphore(uint64_t a1, IPC::Semaphore *a2)
{
  return std::optional<IPC::Semaphore>::operator=[abi:sn180100]<IPC::Semaphore,void>((IPC::Semaphore *)(a1 + 96), a2);
}

BOOL WebKit::RemoteVideoFrameObjectHeap::setSharedVideoFrameMemory(uint64_t a1)
{
  return WebKit::SharedVideoFrameReader::setSharedMemory(a1 + 80);
}

void WebKit::RemoteVideoFrameObjectHeap::lowMemoryHandler(atomic_uchar *this)
{
  char v2 = 0;
  char v3 = this + 160;
  atomic_compare_exchange_strong_explicit(this + 160, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this + 160);
  }
  unint64_t v6 = (WTF *)*((void *)this + 21);
  uint64_t v5 = this + 168;
  CFTypeRef v4 = v6;
  *uint64_t v5 = 0;
  if (v6) {
    std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((int)v5, v4);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
}

uint64_t WebKit::RemoteVideoTrackProxy::RemoteVideoTrackProxy(uint64_t a1, uint64_t a2, atomic_uint *a3, uint64_t a4)
{
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)a1 = &unk_1EE9C1B60;
  *(void *)(a1 + 8) = 0;
  double v8 = *(atomic_uchar **)(a2 + 16);
  if (v8) {
    double v8 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v8);
  }
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = a2;
  atomic_fetch_add(a3 + 2, 1u);
  *(void *)(a1 + 40) = a3;
  *(void *)(a1 + 48) = (*(uint64_t (**)(atomic_uint *))(*(void *)a3 + 48))(a3);
  *(void *)(a1 + 56) = a4;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  CFTypeRef v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *CFTypeRef v9 = &unk_1EE9C2198;
  char v22 = v9;
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = WebCore::TrackPrivateBase::addClient();
  int v10 = v22;
  char v22 = 0;
  if (v10) {
    (*(void (**)(void *))(*v10 + 8))(v10);
  }
  uint64_t v11 = *(void *)(a2 + 56);
  WebKit::RemoteVideoTrackProxy::configuration((WebKit::RemoteVideoTrackProxy *)&v22, a1);
  uint64_t v12 = *(void *)(a1 + 56);
  CFTypeRef v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)CFTypeRef v13 = 150;
  *((void *)v13 + 1) = v12;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  CFTypeRef v26 = v13;
  IPC::ArgumentCoder<WebKit::VideoTrackPrivateRemoteConfiguration,void>::encode(v13, (uint64_t)&v22);
  IPC::Connection::sendMessageImpl(v11, (uint64_t *)&v26, 0, 0);
  CFTypeRef v15 = v26;
  CFTypeRef v26 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v14);
    WTF::fastFree(v20, v21);
  }
  CFTypeRef v16 = v25;
  uint64_t v25 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v14);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  int v17 = v24;
  int v24 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v14);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t v18 = v23;
  uint64_t v23 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v14);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *WebKit::RemoteVideoTrackProxy::configuration(WebKit::RemoteVideoTrackProxy *this, uint64_t a2)
{
  *(void *)this = (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 48))(*(void *)(a2 + 40));
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(void **)(a2 + 40) + 56))(&v14);
  CFTypeRef v4 = v14;
  if (v14) {
    *(_DWORD *)v14 += 2;
  }
  *((void *)this + 1) = v4;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(void **)(a2 + 40) + 64))(&v13);
  uint64_t v5 = v13;
  if (v13) {
    *(_DWORD *)v13 += 2;
  }
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v5;
  *((void *)this + 3) = (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 96))(*(void *)(a2 + 40));
  *((void *)this + 4) = v6;
  *((_DWORD *)this + 10) = (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 72))(*(void *)(a2 + 40));
  *((unsigned char *)this + 44) = (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 128))(*(void *)(a2 + 40));
  *((unsigned char *)this + 45) = (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 136))(*(void *)(a2 + 40));
  uint64_t v8 = *(void *)(a2 + 40);
  CFTypeRef v9 = *(_DWORD **)(v8 + 56);
  if (v9) {
    *v9 += 2;
  }
  *((void *)this + 6) = v9;
  long long v10 = *(_OWORD *)(v8 + 80);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)(v8 + 64);
  *(_OWORD *)((char *)this + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v10;
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)(v8 + 96);
  *(void *)((char *)this + 101) = *(void *)(v8 + 109);
  uint64_t v11 = v13;
  CFTypeRef v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v7);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v14;
  CFTypeRef v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::RemoteVideoTrackProxy::~RemoteVideoTrackProxy(WebKit::RemoteVideoTrackProxy *this)
{
  WebKit::RemoteAudioTrackProxy::~RemoteAudioTrackProxy(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteVideoTrackProxy::updateConfiguration(WebKit::RemoteVideoTrackProxy *this)
{
  uint64_t result = *((void *)this + 3);
  if (result)
  {
    uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)result, *((void *)this + 4), &v21);
    if (v21)
    {
      uint64_t v3 = *(void *)(v21 + 56);
      uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 5) + 48))(*((void *)this + 5));
      uint64_t v5 = *((void *)this + 6);
      *((void *)this + 6) = v4;
      WebKit::RemoteVideoTrackProxy::configuration((WebKit::RemoteVideoTrackProxy *)&v17, (uint64_t)this);
      uint64_t v6 = *((void *)this + 7);
      int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)int v7 = 173;
      *((void *)v7 + 1) = v6;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      char v22 = v7;
      uint64_t v8 = (void *)IPC::Encoder::grow(v7, 8uLL, 8);
      if (v9 <= 7)
      {
        uint64_t result = 831;
        __break(0xC471u);
      }
      else
      {
        void *v8 = v5;
        IPC::ArgumentCoder<WebKit::VideoTrackPrivateRemoteConfiguration,void>::encode(v7, (uint64_t)&v17);
        IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v22, 0, 0);
        uint64_t v11 = v22;
        char v22 = 0;
        if (v11)
        {
          IPC::Encoder::~Encoder(v11, v10);
          WTF::fastFree(v15, v16);
        }
        uint64_t v12 = v20;
        int v20 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v10);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
        CFTypeRef v13 = v19;
        char v19 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v10);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
        uint64_t result = (uint64_t)v18;
        uint64_t v18 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v10);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        uint64_t v14 = v21;
        uint64_t v21 = 0;
        if (v14) {
          return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v14 + 16));
        }
      }
    }
  }
  return result;
}

WebKit::RemoteVideoTrackProxy *WebKit::RemoteVideoTrackProxy::selectedChanged(WebKit::RemoteVideoTrackProxy *this, int a2)
{
  if (*((unsigned __int8 *)this + 64) != a2)
  {
    *((unsigned char *)this + 64) = a2;
    return (WebKit::RemoteVideoTrackProxy *)WebKit::RemoteVideoTrackProxy::updateConfiguration(this);
  }
  return this;
}

uint64_t WebKit::RemoteMediaResourceLoader::targetDispatcher@<X0>(void *a1@<X8>)
{
  uint64_t result = WebKit::RemoteMediaResourceLoader::defaultQueue(&v4);
  *a1 = v4 + 32;
  return result;
}

uint64_t WebCore::MediaSourcePrivateClient::logger(WebCore::MediaSourcePrivateClient *this)
{
  return 0;
}

uint64_t WebCore::InbandTextTrackPrivateClient::type(WebCore::InbandTextTrackPrivateClient *this)
{
  return 0;
}

uint64_t WebCore::VideoTrackPrivateClient::type(WebCore::VideoTrackPrivateClient *this)
{
  return 2;
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZN6WebKit23RemoteSourceBufferProxy50sourceBufferPrivateDidReceiveInitializationSegmentEONS3_25SourceBufferPrivateClient21InitializationSegmentEE3__3EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSQ_EED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9C1BC8;
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 10), a2);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 8), v3);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 6), v4);
  uint64_t v6 = (atomic_uchar *)a1[1];
  a1[1] = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v5);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZN6WebKit23RemoteSourceBufferProxy50sourceBufferPrivateDidReceiveInitializationSegmentEONS3_25SourceBufferPrivateClient21InitializationSegmentEE3__3EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSQ_EED0Ev(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9C1BC8;
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 80, a2);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 64, v3);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 48, v4);
  uint64_t v6 = (atomic_uchar *)*((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v5);
  }

  return WTF::fastFree(a1, v5);
}

atomic_uchar *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZN6WebKit23RemoteSourceBufferProxy50sourceBufferPrivateDidReceiveInitializationSegmentEONS3_25SourceBufferPrivateClient21InitializationSegmentEE3__3EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSQ_EE4callESQ_@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (void *)a1[3];
  uint64_t v7 = a1[1];
  if (v7)
  {
    char v8 = 0;
    uint64_t v9 = a1[2];
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
    if (v8) {
      MEMORY[0x19972E8D0](v7);
    }
    if (*(void *)(v7 + 24)) {
      ++*(void *)(v7 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
    int v10 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v11 = (atomic_uchar *)v6[4];
  if (v11)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v11, v6[5], &v28);
    if (v9) {
      goto LABEL_12;
    }
LABEL_22:
    LOBYTE(v30) = 4;
    uint64_t v33 = 0;
    *(void *)&long long v34 = 0;
    *((void *)&v34 + 1) = "operator()";
    *(void *)&long long v35 = 0;
    uint64_t result = (atomic_uchar *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((char *)&v30, (WTF::Logger::LogSiteIdentifier *)&v33, a3);
    goto LABEL_23;
  }
  uint64_t v28 = 0;
  if (!v9) {
    goto LABEL_22;
  }
LABEL_12:
  if (*(unsigned char *)(a2 + 1) || !v28) {
    goto LABEL_22;
  }
  uint64_t v12 = *(os_unfair_lock_s **)(v28 + 56);
  uint64_t v13 = (uint64_t)(a1 + 4);
  uint64_t v14 = v6[6];
  uint64_t v33 = 0;
  *(void *)&long long v34 = 0;
  *((void *)&v34 + 1) = "sendWithPromisedReply";
  *(void *)&long long v35 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v30, 0, (WTF::Logger::LogSiteIdentifier *)&v33);
  uint64_t v15 = v30;
  if (v30)
  {
    atomic_fetch_add((atomic_uint *volatile)(v30 + 8), 1u);
    uint64_t v16 = v30;
  }
  else
  {
    uint64_t v16 = 0;
  }
  *a3 = v15;
  uint64_t v30 = 0;
  long long v34 = v31;
  long long v35 = v32;
  uint64_t v17 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v17 = &unk_1EE9C1C08;
  *(void *)(v17 + 8) = v16;
  uint64_t v33 = 0;
  long long v18 = v35;
  *(_OWORD *)(v17 + 16) = v34;
  *(_OWORD *)(v17 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v18;
  v29[0] = v17;
  v29[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v33);
  char v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v19 = 1472;
  *((void *)v19 + 1) = v14;
  *((void *)v19 + 66) = (char *)v19 + 16;
  *((void *)v19 + 67) = 512;
  *((void *)v19 + 68) = 0;
  *((void *)v19 + 70) = 0;
  *((void *)v19 + 69) = 0;
  IPC::Encoder::encodeHeader(v19);
  uint64_t v33 = v19;
  IPC::ArgumentCoder<WebKit::InitializationSegmentInfo,void>::encode(v19, v13);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v12, &v33, v29, 0, 0);
  uint64_t v21 = v33;
  uint64_t v33 = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, v20);
    WTF::fastFree(v26, v27);
  }
  uint64_t v22 = v29[0];
  v29[0] = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t result = (atomic_uchar *)WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v30);
LABEL_23:
  uint64_t v25 = v28;
  uint64_t v28 = 0;
  if (v25) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v25 + 16));
  }
  if (v9) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(v9 + 8), v24);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDidReceiveInitializationSegment,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C1C08;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDidReceiveInitializationSegment,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9C1C08;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDidReceiveInitializationSegment,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  char v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9C1C30;
  v4[1] = v3;
  uint64_t v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  uint64_t result = (uint64_t)v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDidReceiveInitializationSegment,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C1C30;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDidReceiveInitializationSegment,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9C1C30;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDidReceiveInitializationSegment,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::call@<X0>(uint64_t *result@<X0>, __int16 *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)result[1];
  if (v3
    && *v3
    && (uint64_t result = IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>>((uint64_t)&v5, v3), v6))
  {
    __int16 v4 = v5;
  }
  else
  {
    __int16 v4 = 260;
  }
  *a2 = v4;
  return result;
}

uint64_t *IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>(a2, &v8);
  if (v9)
  {
    *(_WORD *)a1 = v8;
    *(unsigned char *)(a1 + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (uint64_t *)a2[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
    }
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[2])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t *)a1[3];
    if (result && v5 != 0)
    {
      BOOL v7 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v7();
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t *result = 0;
    result[1] = 0;
    uint64_t v11 = result[3];
    if (v11)
    {
      uint64_t v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        uint64_t result = v14;
        uint64_t v10 = *v14;
        unint64_t v9 = v14[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_11;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v9 = v3;
    uint64_t v10 = 0;
LABEL_11:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t *result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      uint64_t v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        uint64_t result = v13;
        uint64_t v4 = *v13;
        unint64_t v3 = v13[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_12;
  }
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
LABEL_12:
    uint64_t *result = 0;
    result[1] = 0;
    uint64_t result = (uint64_t *)result[3];
    if (result && v3) {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
    }
LABEL_7:
    char v8 = 0;
    *a2 = 0;
    goto LABEL_9;
  }
  if (!v7)
  {
    uint64_t result = (uint64_t *)IPC::Decoder::decode<WebCore::PlatformMediaError>(result);
    if ((unsigned __int16)result > 0xFFu)
    {
      *a2 = (_BYTE)result;
      char v8 = 1;
      a2[1] = 1;
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *(_WORD *)a2 = 0;
  char v8 = 1;
LABEL_9:
  a2[2] = v8;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::PlatformMediaError>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PlatformMediaError,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::PlatformMediaError,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      uint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        uint64_t v8 = *v12;
        unint64_t v7 = v12[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_6;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
    }
    goto LABEL_7;
  }
  unsigned int v5 = *v4;
  if (v5 >= 0xC)
  {
LABEL_7:
    unsigned int v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  int v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::~ThenCallback(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C1C58;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9C2290;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9C1C58;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9C2290;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::disconnect(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 1);
  v16[0] = a1;
  int v6 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v6) {
    BOOL v7 = v6[16] >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (v5) {
      uint64_t v8 = "Rejecting";
    }
    else {
      uint64_t v8 = "Resolving";
    }
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [2]>((uint64_t)v6, 4u, v8, " then() call made from ", (WTF::Logger::LogSiteIdentifier *)(a1 + 24), "[", a2, " callback:", (uint64_t)v16, "]");
  }
  char v9 = 0;
  int v10 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
  if (v9) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  uint64_t v11 = *(uint64_t **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  }
  (*(void (**)(atomic_uchar **__return_ptr))(**(void **)(a1 + 72) + 16))(&v17);
  if (v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    void v16[2] = "<chained completion promise>";
    v16[3] = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo(v17, (unint64_t)v11, (WTF::Logger::LogSiteIdentifier *)v16);
  }
  uint64_t v12 = (unsigned int *)v17;
  uint64_t v17 = 0;
  if (v12 && atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v12 + 2);
    (*(void (**)(unsigned int *))(*(void *)v12 + 16))(v12);
  }
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v11)
  {
    uint64_t v14 = WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(v11);
    return WTF::fastFree((WTF *)v14, v15);
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(unsigned char *)(result + 56) = 1;
  return result;
}

uint64_t *std::unique_ptr<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>>::reset[abi:sn180100](uint64_t **a1, uint64_t *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    uint64_t v4 = WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(result);
    return (uint64_t *)WTF::fastFree((WTF *)v4, v5);
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo(atomic_uchar *a1, unint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5 = (uint64_t)a1;
  char v6 = 0;
  BOOL v7 = a1 + 48;
  atomic_compare_exchange_strong_explicit(a1 + 48, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    a1 = (atomic_uchar *)MEMORY[0x19972E8D0](a1 + 48);
  }
  *(unsigned char *)(v5 + 11WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 1;
  uint64_t v8 = *(atomic_uchar **)a2;
  if (*(void *)a2) {
    atomic_fetch_add((atomic_uint *volatile)v8 + 2, 1u);
  }
  BOOL v21 = *(_DWORD *)(v5 + 64) == 0;
  char v9 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v9) {
    BOOL v10 = v9[16] >= 4u;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [22],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [17],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [12],BOOL,char [2]>((uint64_t)v9, 4u, a3, " invoking chainTo() [", v5, " chainedPromise:", (uint64_t)v8, " isNothing:", (uint64_t)&v21, "]");
  }
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v8 + 2);
    (*(void (**)(atomic_uchar *))(*(void *)v8 + 16))(v8);
  }
  unsigned __int8 v11 = atomic_load((unsigned __int8 *)(v5 + 113));
  uint64_t result = (uint64_t)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::setDispatchMode(*(atomic_uchar **)a2, v11, a3);
  if (*(_DWORD *)(v5 + 64))
  {
    uint64_t result = (uint64_t)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settleChainedPromise(v5, a2);
  }
  else
  {
    uint64_t v13 = *(unsigned int *)(v5 + 108);
    if (v13 == *(_DWORD *)(v5 + 104))
    {
      uint64_t result = WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 96, v13 + 1, a2);
      uint64_t v14 = *(void *)(v5 + 96) + 40 * *(unsigned int *)(v5 + 108);
      uint64_t v15 = *(void *)result;
      *(void *)uint64_t result = 0;
      *(void *)uint64_t v14 = v15;
      long long v16 = *(_OWORD *)(result + 24);
      *(_OWORD *)(v14 + 8) = *(_OWORD *)(result + 8);
      *(_OWORD *)(v14 + 24) = v16;
    }
    else
    {
      uint64_t v17 = *(void *)(v5 + 96) + 40 * v13;
      long long v18 = *(atomic_uchar **)a2;
      *(void *)a2 = 0;
      *(void *)uint64_t v17 = v18;
      long long v19 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v17 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v17 + 8) = v19;
    }
    ++*(_DWORD *)(v5 + 108);
  }
  int v20 = 1;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v20, 0, memory_order_release, memory_order_relaxed);
  if (v20 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [2]>(uint64_t a1, unsigned int a2, char *a3, const char *a4, WTF::Logger::LogSiteIdentifier *a5, const char *a6, uint64_t a7, const char *a8, uint64_t a9, const char *a10)
{
  v65[1] = *MEMORY[0x1E4F143B8];
  WTF::String::String((WTF::String *)&v53, a3);
  WTF::String::String((WTF::String *)&v52, a4);
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v51, a5);
  WTF::String::String((WTF::String *)&v50, a6);
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a7, &v49);
  CFTypeRef v42 = (char *)a8;
  WTF::String::String((WTF::String *)&v48, a8);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v46, a10);
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, &v54);
  if (v54)
  {
    uint64_t v17 = v46;
    uint64_t v46 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    long long v18 = v47;
    __int16 v47 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v16);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    long long v19 = v48;
    uint64_t v48 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v16);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    int v20 = v49;
    int v49 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v16);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    BOOL v21 = v50;
    uint64_t v50 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v16);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    uint64_t v22 = v51;
    unint64_t v51 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v16);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    uint64_t v23 = v52;
    uint64_t v52 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v16);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    int v24 = v53;
    unint64_t v53 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v16);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    uint64_t v25 = *(NSObject **)(a1 + 32);
    CFTypeRef v26 = (WTF *)os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    if (v26)
    {
      WTF::String::utf8();
      uint64_t v28 = v45[0] ? (char *)v45[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      uint64_t v56 = v28;
      _os_log_impl(&dword_1985F2000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      CFTypeRef v26 = v45[0];
      v45[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          CFTypeRef v26 = (WTF *)WTF::fastFree(v26, v27);
        }
        else {
          --*(_DWORD *)v26;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      uint64_t v29 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v30 = *v29;
        if (v30) {
          break;
        }
        int v31 = *v29;
        atomic_compare_exchange_strong_explicit(v29, (unsigned __int8 *)&v31, v30 | 1, memory_order_acquire, memory_order_acquire);
        if (v31 == v30)
        {
          uint64_t v32 = WTF::Logger::observers(v26);
          uint64_t v33 = *(unsigned int *)(v32 + 12);
          if (v33)
          {
            long long v34 = *(uint64_t **)v32;
            uint64_t v40 = *(void *)v32 + 8 * v33;
            do
            {
              uint64_t v35 = *v34;
              *(_DWORD *)long long buf = 0;
              WTF::String::String((WTF::String *)((char *)&v56 + 4), a3);
              int v57 = 0;
              WTF::String::String((WTF::String *)v58, a4);
              v58[2] = 0;
              WTF::Logger::LogSiteIdentifier::toString(&v59, a5);
              int v60 = 0;
              WTF::String::String((WTF::String *)v61, a6);
              v61[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a7, &v62);
              int v63 = 0;
              WTF::String::String((WTF::String *)v64, v42);
              v64[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v64[6] = 0;
              WTF::String::String((WTF::String *)v65, a10);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v45, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v35 + 16))(v35, a1, a2, v45);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v36);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                int v38 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2) {
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v27);
                  }
                  else {
                    *(_DWORD *)v38 -= 2;
                  }
                }
              }
              ++v34;
            }
            while (v34 != (uint64_t *)v40);
          }
          int v39 = 1;
          atomic_compare_exchange_strong_explicit(v29, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
          if (v39 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v54;
    uint64_t v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v27);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [22],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [17],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [12],BOOL,char [2]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5, const char *a6, uint64_t a7, const char *a8, uint64_t a9, const char *a10)
{
  v67[1] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v53, this);
  WTF::String::String((WTF::String *)&v52, a4);
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, &v51);
  WTF::String::String((WTF::String *)&v50, a6);
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a7, &v49);
  CFTypeRef v42 = (char *)a8;
  WTF::String::String((WTF::String *)&v48, a8);
  WTF::LogArgument<BOOL>::toString<BOOL>(&v47);
  WTF::String::String((WTF::String *)&v46, a10);
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, &v54);
  if (v54)
  {
    uint64_t v17 = v46;
    uint64_t v46 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    long long v18 = v47;
    __int16 v47 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v16);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    long long v19 = v48;
    uint64_t v48 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v16);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    int v20 = v49;
    int v49 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v16);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    BOOL v21 = v50;
    uint64_t v50 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v16);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    uint64_t v22 = v51;
    unint64_t v51 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v16);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    uint64_t v23 = v52;
    uint64_t v52 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v16);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    int v24 = v53;
    unint64_t v53 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v16);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    uint64_t v25 = *(NSObject **)(a1 + 32);
    CFTypeRef v26 = (WTF *)os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    if (v26)
    {
      WTF::String::utf8();
      uint64_t v28 = v45[0] ? (char *)v45[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      uint64_t v56 = v28;
      _os_log_impl(&dword_1985F2000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      CFTypeRef v26 = v45[0];
      v45[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          CFTypeRef v26 = (WTF *)WTF::fastFree(v26, v27);
        }
        else {
          --*(_DWORD *)v26;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      uint64_t v29 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v30 = *v29;
        if (v30) {
          break;
        }
        int v31 = *v29;
        atomic_compare_exchange_strong_explicit(v29, (unsigned __int8 *)&v31, v30 | 1, memory_order_acquire, memory_order_acquire);
        if (v31 == v30)
        {
          uint64_t v32 = WTF::Logger::observers(v26);
          uint64_t v33 = *(unsigned int *)(v32 + 12);
          if (v33)
          {
            long long v34 = *(uint64_t **)v32;
            uint64_t v40 = *(void *)v32 + 8 * v33;
            do
            {
              uint64_t v35 = *v34;
              *(_DWORD *)long long buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v56 + 4), this);
              int v57 = 0;
              WTF::String::String((WTF::String *)v58, a4);
              v58[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, &v59);
              int v60 = 0;
              WTF::String::String((WTF::String *)v61, a6);
              v61[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a7, &v62);
              int v63 = 0;
              WTF::String::String((WTF::String *)v64, v42);
              v64[2] = 0;
              WTF::LogArgument<BOOL>::toString<BOOL>(&v65);
              int v66 = 0;
              WTF::String::String((WTF::String *)v67, a10);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v45, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v35 + 16))(v35, a1, a2, v45);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v36);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                int v38 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2) {
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v27);
                  }
                  else {
                    *(_DWORD *)v38 -= 2;
                  }
                }
              }
              ++v34;
            }
            while (v34 != (uint64_t *)v40);
          }
          int v39 = 1;
          atomic_compare_exchange_strong_explicit(v29, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
          if (v39 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v54;
    uint64_t v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v27);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0x6666667)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    unsigned int v4 = *(_DWORD *)(result + 12);
    int v5 = 40 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)uint64_t v2 = v6;
    if (v4)
    {
      uint64_t v8 = v6;
      unint64_t v9 = (uint64_t *)v3;
      do
      {
        uint64_t v10 = *v9;
        *unint64_t v9 = 0;
        *(void *)uint64_t v8 = v10;
        long long v11 = *(_OWORD *)(v9 + 1);
        *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 3);
        *(_OWORD *)(v8 + 8) = v11;
        unint64_t v9 = WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(v9) + 5;
        v8 += 40;
      }
      while (v9 != (uint64_t *)((char *)v3 + 40 * v4));
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZN6WebKit23RemoteSourceBufferProxy6appendEON3IPC21SharedBufferReferenceEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIvS4_EERKNS_9MediaTimeEEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlOSG_E_vJSX_EED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9C1C88;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZN6WebKit23RemoteSourceBufferProxy6appendEON3IPC21SharedBufferReferenceEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIvS4_EERKNS_9MediaTimeEEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlOSG_E_vJSX_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C1C88;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZN6WebKit23RemoteSourceBufferProxy6appendEON3IPC21SharedBufferReferenceEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIvS4_EERKNS_9MediaTimeEEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlOSG_E_vJSX_EE4callESX_(uint64_t a1, __int16 *a2)
{
  __int16 v3 = *a2;
  v7[0] = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 56) + 304))(*(void *)(*(void *)(a1 + 8) + 56));
  v7[1] = v4;
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  __int16 v8 = v3;
  (*(void (**)(uint64_t, __int16 *, void *))(*(void *)v5 + 16))(v5, &v8, v7);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C2260;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9C2290;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9C2260;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9C2290;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(unsigned __int8 *)(a3 + 1);
  v16[0] = a1;
  unint64_t v7 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7) {
    BOOL v8 = v7[16] >= 4u;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    if (v6) {
      unint64_t v9 = "Rejecting";
    }
    else {
      unint64_t v9 = "Resolving";
    }
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [2]>((uint64_t)v7, 4u, v9, " then() call made from ", (WTF::Logger::LogSiteIdentifier *)(a1 + 24), "[", a2, " callback:", (uint64_t)v16, "]");
  }
  char v10 = 0;
  int v11 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
  if (v10) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  uint64_t v12 = *(uint64_t **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), a3);
  if (v12)
  {
    v16[0] = 0;
    v16[1] = 0;
    void v16[2] = "<chained completion promise>";
    v16[3] = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v12, (WTF::NativePromiseBase *)v16);
  }
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v12)
  {
    uint64_t v14 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v12);
    return WTF::fastFree((WTF *)v14, v15);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSN_EED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C22C0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSN_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C22C0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSN_EE4callESN_(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvvLj0EE11whenSettledINS_17CompletionHandlerIFvvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvNS_6detail15VoidPlaceholderEEEE_vJSN_EED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C1CB0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvvLj0EE11whenSettledINS_17CompletionHandlerIFvvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvNS_6detail15VoidPlaceholderEEEE_vJSN_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C1CB0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvvLj0EE11whenSettledINS_17CompletionHandlerIFvvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvNS_6detail15VoidPlaceholderEEEE_vJSN_EE4callESN_(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::NativePromise<void,void,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C1CD8;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9C1D08;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9C1CD8;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9C1D08;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<void,void,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<void,void,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(unsigned __int8 *)(a3 + 1);
  v16[0] = a1;
  unint64_t v7 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7) {
    BOOL v8 = v7[16] >= 4u;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    if (v6) {
      unint64_t v9 = "Rejecting";
    }
    else {
      unint64_t v9 = "Resolving";
    }
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,void,0u>,char [11],void const*,char [2]>((uint64_t)v7, 4u, v9, " then() call made from ", (WTF::Logger::LogSiteIdentifier *)(a1 + 24), "[", a2, " callback:", (uint64_t)v16, "]");
  }
  char v10 = 0;
  int v11 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
  if (v10) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  uint64_t v12 = *(uint64_t **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), a3);
  if (v12)
  {
    v16[0] = 0;
    v16[1] = 0;
    void v16[2] = "<chained completion promise>";
    v16[3] = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v12, (WTF::NativePromiseBase *)v16);
  }
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v12)
  {
    uint64_t v14 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v12);
    return WTF::fastFree((WTF *)v14, v15);
  }
  return result;
}

uint64_t WTF::NativePromise<void,void,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(unsigned char *)(result + 56) = 1;
  return result;
}

WTF::StringImpl *WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,void,0u>,char [11],void const*,char [2]>(uint64_t a1, unsigned int a2, char *a3, const char *a4, WTF::Logger::LogSiteIdentifier *a5, const char *a6, uint64_t a7, const char *a8, uint64_t a9, const char *a10)
{
  v65[1] = *MEMORY[0x1E4F143B8];
  WTF::String::String((WTF::String *)&v53, a3);
  WTF::String::String((WTF::String *)&v52, a4);
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v51, a5);
  WTF::String::String((WTF::String *)&v50, a6);
  WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a7, &v49);
  CFTypeRef v42 = (char *)a8;
  WTF::String::String((WTF::String *)&v48, a8);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v46, a10);
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, &v54);
  if (v54)
  {
    uint64_t v17 = v46;
    uint64_t v46 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    long long v18 = v47;
    __int16 v47 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v16);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    long long v19 = v48;
    uint64_t v48 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v16);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    int v20 = v49;
    int v49 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v16);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    BOOL v21 = v50;
    uint64_t v50 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v16);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    uint64_t v22 = v51;
    unint64_t v51 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v16);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    uint64_t v23 = v52;
    uint64_t v52 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v16);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    int v24 = v53;
    unint64_t v53 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v16);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    uint64_t v25 = *(NSObject **)(a1 + 32);
    CFTypeRef v26 = (WTF *)os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    if (v26)
    {
      WTF::String::utf8();
      uint64_t v28 = v45[0] ? (char *)v45[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      uint64_t v56 = v28;
      _os_log_impl(&dword_1985F2000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      CFTypeRef v26 = v45[0];
      v45[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          CFTypeRef v26 = (WTF *)WTF::fastFree(v26, v27);
        }
        else {
          --*(_DWORD *)v26;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      uint64_t v29 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v30 = *v29;
        if (v30) {
          break;
        }
        int v31 = *v29;
        atomic_compare_exchange_strong_explicit(v29, (unsigned __int8 *)&v31, v30 | 1, memory_order_acquire, memory_order_acquire);
        if (v31 == v30)
        {
          uint64_t v32 = WTF::Logger::observers(v26);
          uint64_t v33 = *(unsigned int *)(v32 + 12);
          if (v33)
          {
            long long v34 = *(uint64_t **)v32;
            uint64_t v40 = *(void *)v32 + 8 * v33;
            do
            {
              uint64_t v35 = *v34;
              *(_DWORD *)long long buf = 0;
              WTF::String::String((WTF::String *)((char *)&v56 + 4), a3);
              int v57 = 0;
              WTF::String::String((WTF::String *)v58, a4);
              v58[2] = 0;
              WTF::Logger::LogSiteIdentifier::toString(&v59, a5);
              int v60 = 0;
              WTF::String::String((WTF::String *)v61, a6);
              v61[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a7, &v62);
              int v63 = 0;
              WTF::String::String((WTF::String *)v64, v42);
              v64[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v64[6] = 0;
              WTF::String::String((WTF::String *)v65, a10);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v45, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v35 + 16))(v35, a1, a2, v45);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v36);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                int v38 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2) {
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v27);
                  }
                  else {
                    *(_DWORD *)v38 -= 2;
                  }
                }
              }
              ++v34;
            }
            while (v34 != (uint64_t *)v40);
          }
          int v39 = 1;
          atomic_compare_exchange_strong_explicit(v29, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
          if (v39 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v54;
    uint64_t v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v27);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS3_S5_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSD_E_vJSD_EED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C1D38;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS3_S5_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSD_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C1D38;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS3_S5_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSD_E_vJSD_EE4callESD_(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C1D60;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9C1D90;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9C1D60;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9C1D90;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a3 + 16);
  v16[0] = a1;
  unint64_t v7 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7) {
    BOOL v8 = v7[16] >= 4u;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    if (v6) {
      unint64_t v9 = "Rejecting";
    }
    else {
      unint64_t v9 = "Resolving";
    }
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [2]>((uint64_t)v7, 4u, v9, " then() call made from ", (WTF::Logger::LogSiteIdentifier *)(a1 + 24), "[", a2, " callback:", (uint64_t)v16, "]");
  }
  char v10 = 0;
  int v11 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
  if (v10) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  uint64_t v12 = *(uint64_t **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), a3);
  if (v12)
  {
    v16[0] = 0;
    v16[1] = 0;
    void v16[2] = "<chained completion promise>";
    v16[3] = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v12, (WTF::NativePromiseBase *)v16);
  }
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v12)
  {
    uint64_t v14 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v12);
    return WTF::fastFree((WTF *)v14, v15);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(unsigned char *)(result + 56) = 1;
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS7_S9_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSH_E_vJSH_EED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C1DC0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS7_S9_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSH_E_vJSH_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C1DC0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS7_S9_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSH_E_vJSH_EE4callESH_(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C1DE8;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9C1E18;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9C1DE8;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9C1E18;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v63[1] = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(a3 + 16);
  uint64_t v42 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)v42) {
    BOOL v7 = *(unsigned __int8 *)(v42 + 16) >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (v6) {
      BOOL v8 = "Rejecting";
    }
    else {
      BOOL v8 = "Resolving";
    }
    int8x16x2_t v41 = (char *)v8;
    WTF::String::String((WTF::String *)&v51, v8);
    WTF::String::String((WTF::String *)&v50, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v49, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v48, "[");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a2, &v47);
    WTF::String::String((WTF::String *)&v46, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v44, "]");
    uint64_t result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, (uint64_t *)&v45, (uint64_t *)&v44, &v52);
    if (!v52)
    {
      __break(0xC471u);
      return result;
    }
    int v11 = v44;
    uint64_t v44 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = v45;
    uint64_t v45 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t v13 = v46;
    uint64_t v46 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v10);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v14 = v47;
    __int16 v47 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v10);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t v15 = v48;
    uint64_t v48 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v10);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    long long v16 = v49;
    int v49 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v10);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = v50;
    uint64_t v50 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v10);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    long long v18 = v51;
    unint64_t v51 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v10);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    long long v19 = *(NSObject **)(v42 + 32);
    int v20 = (WTF *)os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      WTF::String::utf8();
      uint64_t v22 = v43[0] ? (char *)v43[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v22;
      _os_log_impl(&dword_1985F2000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      int v20 = v43[0];
      v43[0] = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1) {
          int v20 = (WTF *)WTF::fastFree(v20, v21);
        }
        else {
          --*(_DWORD *)v20;
        }
      }
    }
    if (*(unsigned char *)v42 && *(unsigned __int8 *)(v42 + 16) >= 4u)
    {
      uint64_t v23 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v24 = *v23;
        if (v24) {
          break;
        }
        int v25 = *v23;
        atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v25, v24 | 1, memory_order_acquire, memory_order_acquire);
        if (v25 == v24)
        {
          uint64_t v26 = WTF::Logger::observers(v20);
          uint64_t v27 = *(unsigned int *)(v26 + 12);
          if (v27)
          {
            uint64_t v28 = *(uint64_t **)v26;
            uint64_t v40 = *(void *)v26 + 8 * v27;
            do
            {
              uint64_t v29 = *v28;
              *(_DWORD *)long long buf = 0;
              WTF::String::String((WTF::String *)&buf[8], v41);
              LODWORD(v54) = 0;
              WTF::String::String((WTF::String *)&v55, " then() call made from ");
              int v56 = 0;
              WTF::Logger::LogSiteIdentifier::toString(&v57, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
              int v58 = 0;
              WTF::String::String((WTF::String *)v59, "[");
              v59[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a2, &v60);
              int v61 = 0;
              WTF::String::String((WTF::String *)v62, " callback:");
              v62[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v62[6] = 0;
              WTF::String::String((WTF::String *)v63, "]");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v43, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v29 + 16))(v29, v42, 4, v43);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v30);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                uint64_t v32 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v32)
                {
                  if (*(_DWORD *)v32 == 2) {
                    WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v21);
                  }
                  else {
                    *(_DWORD *)v32 -= 2;
                  }
                }
              }
              ++v28;
            }
            while (v28 != (uint64_t *)v40);
          }
          int v33 = 1;
          atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
          if (v33 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    long long v34 = v52;
    uint64_t v52 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
  }
  char v35 = 0;
  int v36 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v35, 1u, memory_order_acquire, memory_order_acquire);
  if (v35) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  long long v37 = *(uint64_t **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v36, 0, memory_order_release, memory_order_relaxed);
  if (v36 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), a3);
  if (v37)
  {
    *(_OWORD *)long long buf = 0uLL;
    uint64_t v54 = "<chained completion promise>";
    uint64_t v55 = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v37, (WTF::NativePromiseBase *)buf);
  }
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v37)
  {
    int v38 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v37);
    return WTF::fastFree((WTF *)v38, v39);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(unsigned char *)(result + 56) = 1;
  return result;
}

void IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::~ThreadSafeObjectHeap(void *a1, void *a2)
{
  *a1 = &unk_1EE9C1E48;
  uint64_t v2 = a1[2];
  if (v2) {
    WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v2, a2);
  }

  JUMPOUT(0x199740C10);
}

IPC::Semaphore *std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100](IPC::Semaphore **a1, IPC::Semaphore *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    IPC::Semaphore::~Semaphore(result);
    return (IPC::Semaphore *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 40;
    do
    {
      if (*(void *)(v4 - 40) != -1) {
        uint64_t v4 = std::__optional_destruct_base<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,false>::~__optional_destruct_base[abi:sn180100](v4);
      }
      v4 += 56;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 16);
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9C1E58[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 16) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1EE9C1E78[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEENSA_13MachSendRightEN7WebCore7IntSizeEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJDnSI_SJ_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)result;
  uint64_t v3 = *(unsigned int *)(*(void *)result + 16);
  if (v3 != -1)
  {
    if (!v3)
    {
      *a2 = 0;
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9C1E58[v3])(&v4, v2);
  }
  *(void *)uint64_t v2 = 0;
  *(_DWORD *)(v2 + 16) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEENSA_13MachSendRightEN7WebCore7IntSizeEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJDnSI_SJ_SL_EEEOS10_EEEDcSS_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  char v4 = *a1;
  uint64_t v5 = (*a1)[1].n128_u32[0];
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      __n128 result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1EE9C1E58[v5])(&v7, v4);
  }
  v4[1].n128_u32[0] = -1;
  __n128 result = *a3;
  __n128 *v4 = *a3;
  v4[1].n128_u32[0] = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEENSA_13MachSendRightEN7WebCore7IntSizeEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJDnSI_SJ_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t *a1)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__assign_alt[abi:sn180100]<2ul,WTF::MachSendRight,WTF::MachSendRight>(*a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEENSA_13MachSendRightEN7WebCore7IntSizeEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJDnSI_SJ_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 != -1)
  {
    if (v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE9C1E58[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 16) = 3;
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__assign_alt[abi:sn180100]<2ul,WTF::MachSendRight,WTF::MachSendRight>(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) == 2) {
    return WTF::MachSendRight::operator=();
  }
  else {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__emplace[abi:sn180100]<2ul,WTF::MachSendRight>(a1);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__emplace[abi:sn180100]<2ul,WTF::MachSendRight>(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9C1E58[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 16) = -1;
  uint64_t result = WTF::MachSendRight::MachSendRight();
  *(_DWORD *)(a1 + 16) = 2;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteMediaResourceManager::~RemoteMediaResourceManager()::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C1EA8;
  uint64_t v3 = a1[1];
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaResourceManager::~RemoteMediaResourceManager()::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C1EA8;
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteMediaResourceManager::~RemoteMediaResourceManager()::$_0,void>::call(void *result)
{
  uint64_t v1 = result[1];
  if (!v1)
  {
    char v4 = 0;
    LODWORD(vWebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
LABEL_10:
    uint64_t v3 = (void *)(v1 + 24 * v2);
    goto LABEL_11;
  }
  uint64_t v2 = *(unsigned int *)(v1 - 4);
  uint64_t v3 = (void *)(v1 + 24 * v2);
  if (!*(_DWORD *)(v1 - 12))
  {
    char v4 = (void *)(v1 + 24 * v2);
    goto LABEL_10;
  }
  char v4 = (void *)result[1];
  if (v2)
  {
    uint64_t v5 = 24 * v2;
    char v4 = (void *)result[1];
    while ((unint64_t)(*v4 + 1) <= 1)
    {
      v4 += 3;
      v5 -= 24;
      if (!v5)
      {
        char v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1) {
    char v6 = (void *)(v1 + 24 * *(unsigned int *)(v1 - 4));
  }
  else {
    char v6 = 0;
  }
  while (v4 != v6)
  {
    char v7 = (atomic_uchar *)v4[1];
    if (v7)
    {
      uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v11, v7, v4[2]);
      BOOL v8 = v11;
      if (v11)
      {
        WebKit::RemoteMediaResource::shutdown((atomic_uchar *)v11);
        uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*((atomic_uchar **)v8 + 1), v9);
      }
    }
    char v10 = v4 + 3;
    char v4 = v3;
    if (v10 != v3)
    {
      char v4 = v10;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        v4 += 3;
        if (v4 == v3)
        {
          char v4 = v3;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 24 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    do
    {
      uint64_t v14 = (uint64_t *)(v4 + 24 * v11);
      uint64_t v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            int v19 = 0;
          }
          unint64_t v20 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
          int v24 = 1;
          do
          {
            unsigned int v25 = v23;
            uint64_t v26 = (uint64_t *)(v18 + 24 * v23);
            unsigned int v23 = (v23 + v24++) & v19;
          }
          while (*v26);
          unsigned int v27 = v25;
          uint64_t v28 = v18 + 24 * v25;
          int v31 = *(atomic_uchar **)(v28 + 8);
          int v30 = (void *)(v28 + 8);
          uint64_t v29 = v31;
          *int v30 = 0;
          if (v31) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v29, v8);
          }
          *uint64_t v26 = *v14;
          uint64_t v32 = v4 + 24 * v11;
          *int v30 = *(void *)(v32 + 8);
          uint64_t v33 = *(void *)(v32 + 16);
          *(void *)(v32 + 8) = 0;
          *(void *)(v32 + 16) = 0;
          *(void *)(v18 + 24 * v27 + 16) = v33;
          long long v34 = *(atomic_uchar **)(v32 + 8);
          *(void *)(v32 + 8) = 0;
          if (v34) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v34, v8);
          }
          if (v14 == a3) {
            uint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v16 = v4 + 24 * v11;
          uint64_t v17 = *(atomic_uchar **)(v16 + 8);
          *(void *)(v16 + 8) = 0;
          if (v17) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v17, v8);
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

atomic_uchar *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (atomic_uchar *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (atomic_uchar *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7) {
    this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

WTF::Lock *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(uint64_t a1, char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  uint64_t v14 = v7;
  char v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  BOOL v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " rejecting ", a1);
  }
  char v10 = *a2;
  uint64_t v11 = *(unsigned int *)(a1 + 80);
  if (v11 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9C1EC0[v11])(&v16, a1 + 56);
  }
  *(unsigned char *)(a1 + 56) = v10;
  int v12 = 1;
  *(_DWORD *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 1;
  *(_DWORD *)(a1 + 80) = 1;
  uint64_t result = (WTF::Lock *)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::dispatchAll((void *)a1, (atomic_uchar *volatile *)&v14);
  if (v15)
  {
    uint64_t result = v14;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::NativePromise(uint64_t a1, _OWORD *a2)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9C21E8;
  long long v3 = a2[1];
  *(_OWORD *)(a1 + 16) = *a2;
  *(_OWORD *)(a1 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v3;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a1 + 104;
  *(void *)(a1 + 96) = 1;
  *(void *)(a1 + 11WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  *(void *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 128) = 0;
  uint64_t v4 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v4 && v4[16] >= 4u) {
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v4, 4u, "creating ", a1);
  }
  return a1;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  long long v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 124);
  if (v4)
  {
    int v5 = *(uint64_t **)(v1 + 112);
    uint64_t v6 = 40 * v4;
    do
    {
      uint64_t result = *v5;
      if (*v5) {
        uint64_t result = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::assertIsDead();
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromise(unsigned int *a1)
{
  uint64_t v1 = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromise(a1);

  return WTF::fastFree((WTF *)v1, v2);
}

unsigned int *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromise(unsigned int *a1)
{
  char v2 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2) {
    BOOL v3 = v2[16] >= 4u;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v2, 4u, "destroying ", (uint64_t)a1);
  }
  WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 28), v4);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 22), v5);
  uint64_t v6 = a1[20];
  if (v6 != -1) {
    ((void (*)(char *, unsigned int *))off_1EE9C1EC0[v6])(&v8, a1 + 14);
  }
  a1[20] = -1;
  return a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      uint64_t v4 = WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t *WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::dispatchAll(void *__dst, atomic_uchar *volatile *a2)
{
  uint64_t v5 = __dst + 11;
  uint64_t v4 = (void *)__dst[11];
  unint64_t v20 = &v22;
  uint64_t v21 = 1;
  unsigned int v23 = (WTF::NativePromiseBase **)&v25;
  uint64_t v24 = 1;
  if (v4 == __dst + 13)
  {
    uint64_t v7 = *((unsigned int *)__dst + 25);
    memcpy(&v25, v4, 8 * v7);
  }
  else
  {
    __dst[11] = __dst + 13;
    unsigned int v23 = (WTF::NativePromiseBase **)v4;
    int v6 = *((_DWORD *)__dst + 24);
    LODWORD(v7) = *((_DWORD *)__dst + 25);
    *((_DWORD *)__dst + 24) = 1;
    LODWORD(v24) = v6;
  }
  *((_DWORD *)__dst + 25) = 0;
  HIDWORD(v24) = v7;
  WTF::VectorBuffer<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::FastMalloc>::adopt(v5, &v20);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v8);
  uint64_t v9 = __dst[14];
  unint64_t v20 = (uint64_t *)v9;
  uint64_t v10 = *((unsigned int *)__dst + 31);
  LODWORD(v21) = *((_DWORD *)__dst + 30);
  HIDWORD(v21) = v10;
  v19[0] = 0;
  __dst[14] = 0;
  v19[1] = 0;
  __dst[15] = 0;
  WTF::Vector<WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v11);
  if (HIDWORD(v24))
  {
    uint64_t v13 = v23;
    uint64_t v14 = 8 * HIDWORD(v24);
    do
    {
      char v15 = *v13++;
      WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(v15, (uint64_t)__dst, a2);
      v14 -= 8;
    }
    while (v14);
  }
  if (v10)
  {
    uint64_t v16 = 40 * v10;
    do
    {
      WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleChainedPromise((uint64_t)__dst, v9);
      v9 += 40;
      v16 -= 40;
    }
    while (v16);
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v12);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v17);
}

unsigned __int8 *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, atomic_uchar *volatile *a3)
{
  uint64_t v5 = a1;
  if (!*((void *)a1 + 2)
    || (int v6 = atomic_load((unsigned __int8 *)(a2 + 129)), v6 == 1)
    && (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(void))(**((void **)a1 + 2) + 24))(*((void *)a1 + 2)),
        a1))
  {
    if (*((unsigned char *)v5 + 56))
    {
      v16[0] = v5;
      uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
      if (*result) {
        BOOL v10 = result[16] >= 4u;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10) {
        return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)v16, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
      }
    }
    else
    {
      atomic_uchar *volatile v11 = *a3;
      int v12 = 1;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
      }
      if (WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(a2))
      {
        WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::takeResultRunnable(a2, &v15);
        (*(void (**)(void *__return_ptr))(*(void *)v15 + 16))(v16);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, void *))(*(void *)v5 + 24))(v5, a2, v16);
        uint64_t v13 = v15;
        uint64_t v15 = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
      }
      else
      {
        WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::takeResult((atomic_uchar *)a2, (uint64_t)v16);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, void *))(*(void *)v5 + 24))(v5, a2, v16);
      }
      char v14 = 0;
      uint64_t result = (unsigned __int8 *)*a3;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
      if (v14) {
        return (unsigned __int8 *)MEMORY[0x19972E8D0]();
      }
    }
  }
  else
  {
    uint64_t v7 = *((void *)v5 + 2);
    atomic_fetch_add((atomic_uint *volatile)v5 + 2, 1u);
    atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
    char v8 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v8 = &unk_1EE9C2210;
    v8[1] = v5;
    v8[2] = v5;
    v8[3] = a2;
    v16[0] = v8;
    (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, v16);
    uint64_t result = (unsigned __int8 *)v16[0];
    v16[0] = 0;
    if (result) {
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleChainedPromise(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v9 = v2;
  long long v3 = *(_OWORD *)(a2 + 24);
  long long v10 = *(_OWORD *)(a2 + 8);
  long long v11 = v3;
  if (v2)
  {
    atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = "<chained promise>";
    uint64_t v8 = 0;
    WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage>((atomic_uchar *)v2, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v5);
    if (atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v2 + 8));
      (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = "<chained promise>";
    uint64_t v8 = 0;
    WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage>(0, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v5);
  }
  return WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v9);
}

BOOL WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(uint64_t a1)
{
  char v2 = 0;
  long long v3 = (atomic_uchar *)(a1 + 48);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](a1 + 48);
  }
  int v5 = *(_DWORD *)(a1 + 80);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v5 == 2;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::takeResultRunnable@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  if (*(_DWORD *)(v2 + 80) == 2)
  {
    uint64_t v6 = *(void *)(v2 + 56);
    *(void *)(v2 + 56) = 0;
    *a2 = v6;
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::takeResult(v8);
  }
  return result;
}

atomic_uchar *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::takeResult@<X0>(atomic_uchar *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  char v4 = 0;
  int v5 = (WTF::Lock *)(result + 48);
  atomic_compare_exchange_strong_explicit(result + 48, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = (atomic_uchar *)MEMORY[0x19972E8D0](result + 48);
  }
  if (*((_DWORD *)v2 + 20) == 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)(v2 + 56);
    *(void *)(a2 + 16) = *((void *)v2 + 9);
    int v6 = 1;
    atomic_compare_exchange_strong_explicit(v2 + 48, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1)
    {
      return (atomic_uchar *)WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    int v7 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
    return (atomic_uchar *)WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C2210;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  long long v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C2210;
  long long v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  char v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

unsigned __int8 *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[2];
  if (*(unsigned char *)(*a1 + 56))
  {
    v9[0] = *a1;
    uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
    if (*result) {
      BOOL v4 = result[16] >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)v9, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(a1[2]);
    uint64_t v7 = a1[2];
    if (hasRunnable)
    {
      WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::takeResultRunnable(a1[2], &v8);
      (*(void (**)(void *__return_ptr))(*(void *)v8 + 16))(v9);
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v1 + 24))(v1, v7, v9);
      uint64_t result = v8;
      uint64_t v8 = 0;
      if (result) {
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
      }
    }
    else
    {
      WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::takeResult((atomic_uchar *)a1[2], (uint64_t)v9);
      return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)v1 + 24))(v1, v7, v9);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage>(atomic_uchar *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = a1 + 48;
  int v12 = (WTF::Lock *)v7;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (atomic_uchar *)MEMORY[0x19972E8D0]();
  }
  uint64_t v8 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", (uint64_t)a1);
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>,(std::__variant_detail::_Trait)1>>((uint64_t)(a1 + 56), a2);
  WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::dispatchAll(a1);
  uint64_t result = (uint64_t)v12;
  int v11 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    return WTF::Lock::unlockSlow(v12);
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 24);
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9C1EC0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1EE9C1ED8[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 24);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9C1EC0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(__n128 **a1, uint64_t a2, __n128 *a3)
{
  *(void *)&double result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>(*a1, a2, a3).n128_u64[0];
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>(*a1, a2, a3);
}

__n128 std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>(__n128 *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v5 = a1[1].n128_u32[2];
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      __n128 v7 = *a3;
      unint64_t v8 = a3[1].n128_u64[0];
      std::variant<WTF::MediaTime,WebCore::PlatformMediaError>::swap[abi:sn180100]<true,0>((uint64_t)&v7, a2);
      return result;
    }
    ((void (*)(__n128 *, __n128 *))off_1EE9C1EC0[v5])(&v7, a1);
  }
  a1[1].n128_u32[2] = -1;
  __n128 result = *a3;
  a1[1].n128_u64[0] = a3[1].n128_u64[0];
  *a1 = result;
  a1[1].n128_u32[2] = 1;
  return result;
}

uint64_t std::variant<WTF::MediaTime,WebCore::PlatformMediaError>::swap[abi:sn180100]<true,0>(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 16);
  uint64_t v3 = *(unsigned int *)(a2 + 16);
  if (v2 != -1 || v3 != -1)
  {
    BOOL v5 = v2 == -1;
    if (v2 == -1) {
      uint64_t v6 = -1;
    }
    else {
      uint64_t v6 = *(unsigned int *)(result + 16);
    }
    if (v3 != -1) {
      BOOL v5 = v6 == v3;
    }
    if (v5)
    {
      return ((uint64_t (*)(long long *, uint64_t, uint64_t))off_1EE9C1EF0[v6])(&v13, result, a2);
    }
    else
    {
      BOOL v8 = (v2 - 2) < 0xFFFFFFFD || (v3 + 1) < 3;
      if (v8) {
        uint64_t v9 = result;
      }
      else {
        uint64_t v9 = a2;
      }
      if (v8) {
        uint64_t v10 = a2;
      }
      else {
        uint64_t v10 = result;
      }
      long long v13 = *(_OWORD *)v10;
      uint64_t v14 = *(void *)(v10 + 16);
      *(_DWORD *)(v10 + 16) = -1;
      uint64_t v11 = *(unsigned int *)(v9 + 16);
      if (v11 != -1)
      {
        __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9C1F00[v11])(&v15, v10, v9);
        *(_DWORD *)(v10 + 16) = v11;
      }
      *(_DWORD *)(v9 + 16) = -1;
      int v12 = v14;
      if (v14 != -1)
      {
        __n128 result = ((uint64_t (*)(char *, uint64_t, long long *))off_1EE9C1F00[v14])(&v15, v9, &v13);
        *(_DWORD *)(v9 + 16) = v12;
      }
    }
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF9MediaTimeEN7WebCore18PlatformMediaErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, uint64_t a2, void *a3)
{
  __n128 result = *(__n128 *)a2;
  uint64_t v4 = *(void *)((char *)a3 + 5);
  *(void *)a2 = *a3;
  *(void *)(a2 + 5) = v4;
  *(void *)((char *)a3 + 5) = *(void *)&v5[5];
  *a3 = *(void *)v5;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF9MediaTimeEN7WebCore18PlatformMediaErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9MediaTimeEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9MediaTimeEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = result;
  uint64_t v5 = result[6];
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    __n128 result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1EE9C1EC0[v5])(&v9, result);
LABEL_8:
    BOOL v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    v4[6] = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  __n128 result = *a2;
  *a2 = v6;
  if (result)
  {
    __n128 v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v7();
  }
  return result;
}

uint64_t WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>(uint64_t a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x88);
  __n128 v7 = (atomic_uchar *)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::NativePromise(v6, a3);
  *(void *)a1 = v7;
  long long v8 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 24) = *((_OWORD *)a3 + 1);
  *(_OWORD *)(a1 + 8) = v8;
  WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::setDispatchMode(v7, a2, a3);
  return a1;
}

WTF::StringImpl *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::setDispatchMode(atomic_uchar *a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5 = (uint64_t)a1;
  char v6 = 0;
  __n128 v7 = (WTF::Lock *)(a1 + 48);
  atomic_compare_exchange_strong_explicit(a1 + 48, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    a1 = (atomic_uchar *)MEMORY[0x19972E8D0](a1 + 48);
  }
  __n128 result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)result) {
    BOOL v9 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    __n128 result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)result, 4u, a3, " runSynchronouslyOnTarget ", v5);
  }
  atomic_store(a2, (unsigned __int8 *)(v5 + 129));
  int v10 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v5 + 48), (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1)
  {
    return (WTF::StringImpl *)WTF::Lock::unlockSlow(v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxyWaitForTarget,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C1F20;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxyWaitForTarget,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9C1F20;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxyWaitForTarget,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  int v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9C1F48;
  v4[1] = v3;
  __n128 v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  uint64_t result = (uint64_t)v7;
  __n128 v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(uint64_t *a1, uint64_t *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t isSettled = *a1;
  if (isSettled)
  {
    uint64_t isSettled = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::isSettled(isSettled);
    uint64_t v7 = *a1;
    if (!isSettled)
    {
      return WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleWithFunction(v7, a2, a3);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
  if (*(unsigned char *)result) {
    BOOL v9 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)result, 4u, a3, " ignored already resolved or rejected ", v7);
  }
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleWithFunction(uint64_t a1, uint64_t *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  uint64_t v14 = v7;
  char v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  long long v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " settling ", a1);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 80);
  if (v10 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9C1EC0[v10])(&v16, a1 + 56);
  }
  uint64_t v11 = *a2;
  *a2 = 0;
  *(void *)(a1 + 56) = v11;
  *(_DWORD *)(a1 + 80) = 2;
  uint64_t result = (WTF::Lock *)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::dispatchAll((void *)a1, (atomic_uchar *volatile *)&v14);
  if (v15)
  {
    uint64_t result = v14;
    int v13 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

BOOL WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::isSettled(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = (atomic_uchar *)(a1 + 48);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](a1 + 48);
  }
  int v5 = *(_DWORD *)(a1 + 80);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v5 != 0;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxyWaitForTarget,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C1F48;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxyWaitForTarget,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9C1F48;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxyWaitForTarget,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = *(uint64_t **)(a1 + 8);
  if (result
    && *result
    && (uint64_t result = (uint64_t *)IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>>(result, (uint64_t)&v4), v6))
  {
    *(_OWORD *)a2 = v4;
    *(void *)(a2 + 16) = v5;
  }
  else
  {
    *(unsigned char *)a2 = 4;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

int64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int64_t result = IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>(a1, (uint64_t)&v8);
  if (v10)
  {
    *(_OWORD *)a2 = v8;
    *(void *)(a2 + 16) = v9;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    int64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(int64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

int64_t IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  int64_t result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    int64_t result = a1[3];
    if (result && v5 != 0)
    {
      BOOL v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

int64_t IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,void>::decode<IPC::Decoder>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      char v15 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        a1 = v15;
        uint64_t v11 = *v15;
        unint64_t v10 = v15[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_14;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v10 = v3;
    uint64_t v11 = 0;
LABEL_14:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      uint64_t v14 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        a1 = v14;
        uint64_t v4 = *v14;
        unint64_t v3 = v14[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_15;
  }
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
LABEL_15:
    *a1 = 0;
    a1[1] = 0;
    int64_t result = a1[3];
    if (result && v3) {
      int64_t result = (*(uint64_t (**)(int64_t, uint64_t))(*(void *)result + 16))(result, v4);
    }
    goto LABEL_8;
  }
  if (v7)
  {
    int64_t result = IPC::Decoder::decode<WTF::MediaTime>((IPC::Decoder *)a1, (uint64_t)&v16);
    char v9 = v17;
    if (v17)
    {
      *(_OWORD *)a2 = v16;
      *(_DWORD *)(a2 + 16) = 0;
      char v9 = 1;
    }
    else
    {
      *(unsigned char *)a2 = 0;
    }
    goto LABEL_11;
  }
  int64_t result = IPC::Decoder::decode<WebCore::PlatformMediaError>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
LABEL_8:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    return result;
  }
  *(unsigned char *)a2 = result;
  char v9 = 1;
  *(_DWORD *)(a2 + 16) = 1;
LABEL_11:
  *(unsigned char *)(a2 + 24) = v9;
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxySeekToTime,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C1F70;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxySeekToTime,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9C1F70;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxySeekToTime,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  char v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9C1F98;
  v4[1] = v3;
  unsigned int v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  uint64_t result = (uint64_t)v7;
  unsigned int v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxySeekToTime,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C1F98;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxySeekToTime,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9C1F98;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxySeekToTime,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::call@<X0>(uint64_t *result@<X0>, __int16 *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)result[1];
  if (v3
    && *v3
    && (uint64_t result = IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>>((uint64_t)&v5, v3), v6))
  {
    __int16 v4 = v5;
  }
  else
  {
    __int16 v4 = 260;
  }
  *a2 = v4;
  return result;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(atomic_uchar *this)
{
  uint64_t v1 = this;
  char v2 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = v3 - 1;
  *((void *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    uint64_t v9 = *((void *)v1 + 2);
    uint64_t v6 = *((void *)v1 + 3);
    *((void *)v1 + 3) = 0;
    BOOL v5 = v9 == 0;
  }
  else
  {
    BOOL v5 = 0;
    uint64_t v6 = 0;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 == 1)
  {
    if (v4) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4) {
      return this;
    }
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v8 = &unk_1EE9C21C0;
  *(void *)(v8 + 8) = v1;
  *(void *)(v8 + 16) = v6;
  *(unsigned char *)(v8 + 24) = v5;
  unint64_t v10 = (atomic_uchar *)v8;
  WTF::ensureOnMainThread();
  this = v10;
  if (v10) {
    return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v10 + 8))(v10);
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t v4 = *(WTF **)(a1 + 8);
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    return WTF::fastFree(v4, a2);
  }
  return result;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivateClient,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  char v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7) {
    this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::MediaSourcePrivateRemoteMessageReceiver::MediaSourcePrivateShuttingDown,WebKit::RemoteMediaSourceProxy::shutdown(void)::$_0>(WebKit::RemoteMediaSourceProxy::shutdown(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C1FC0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 16));
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::MediaSourcePrivateRemoteMessageReceiver::MediaSourcePrivateShuttingDown,WebKit::RemoteMediaSourceProxy::shutdown(void)::$_0>(WebKit::RemoteMediaSourceProxy::shutdown(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C1FC0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 16));
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::MediaSourcePrivateRemoteMessageReceiver::MediaSourcePrivateShuttingDown,WebKit::RemoteMediaSourceProxy::shutdown(void)::$_0>(WebKit::RemoteMediaSourceProxy::shutdown(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  return WebKit::RemoteMediaSourceProxy::disconnect(*(WebKit::RemoteMediaSourceProxy **)(a1 + 8));
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<WebCore::MediaDescription&>>(void *result, unint64_t a2, void **a3, uint64_t *a4)
{
  BOOL v8 = (float *)result;
  unint64_t v9 = result[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
    uint64_t v11 = *(void **)(*result + 8 * v4);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == a2)
        {
          if (i[2] == a2) {
            return result;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = result + 2;
  uint64_t result = (void *)WTF::fastMalloc((WTF *)0x20);
  long long v16 = result;
  uint64_t *result = 0;
  result[1] = a2;
  uint64_t v17 = *a4;
  result[2] = **a3;
  atomic_fetch_add((atomic_uint *volatile)(v17 + 8), 1u);
  result[3] = v17;
  float v18 = (float)(unint64_t)(*((void *)v8 + 3) + 1);
  float v19 = v8[8];
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    if (v23 == 1)
    {
      size_t v23 = 2;
    }
    else if ((v23 & (v23 - 1)) != 0)
    {
      uint64_t result = (void *)std::__next_prime(v23);
      size_t v23 = (size_t)result;
    }
    unint64_t v9 = *((void *)v8 + 1);
    if (v23 > v9) {
      goto LABEL_30;
    }
    if (v23 < v9)
    {
      uint64_t result = (void *)vcvtps_u32_f32((float)*((unint64_t *)v8 + 3) / v8[8]);
      if (v9 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        uint64_t result = (void *)std::__next_prime((size_t)result);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz((unint64_t)result - 1);
        if ((unint64_t)result >= 2) {
          uint64_t result = (void *)v31;
        }
      }
      if (v23 <= (unint64_t)result) {
        size_t v23 = (size_t)result;
      }
      if (v23 >= v9)
      {
        unint64_t v9 = *((void *)v8 + 1);
      }
      else
      {
        if (v23)
        {
LABEL_30:
          uint64_t v25 = WTF::fastMalloc((WTF *)(8 * v23));
          uint64_t result = *(void **)v8;
          *(void *)BOOL v8 = v25;
          if (result) {
            uint64_t result = (void *)WTF::fastFree((WTF *)result, v24);
          }
          uint64_t v26 = 0;
          *((void *)v8 + 1) = v23;
          do
            *(void *)(*(void *)v8 + 8 * v26++) = 0;
          while (v23 != v26);
          unsigned int v27 = (void *)*v14;
          if (*v14)
          {
            size_t v28 = v27[1];
            uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= v23) {
                v28 %= v23;
              }
            }
            else
            {
              v28 &= v23 - 1;
            }
            *(void *)(*(void *)v8 + 8 * v28) = v14;
            uint64_t v32 = (void *)*v27;
            if (*v27)
            {
              do
              {
                size_t v33 = v32[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v33 >= v23) {
                    v33 %= v23;
                  }
                }
                else
                {
                  v33 &= v23 - 1;
                }
                if (v33 != v28)
                {
                  if (!*(void *)(*(void *)v8 + 8 * v33))
                  {
                    *(void *)(*(void *)v8 + 8 * v33) = v27;
                    goto LABEL_54;
                  }
                  *unsigned int v27 = *v32;
                  *uint64_t v32 = **(void **)(*(void *)v8 + 8 * v33);
                  **(void **)(*(void *)v8 + 8 * v33) = v32;
                  uint64_t v32 = v27;
                }
                size_t v33 = v28;
LABEL_54:
                unsigned int v27 = v32;
                uint64_t v32 = (void *)*v32;
                size_t v28 = v33;
              }
              while (v32);
            }
          }
          unint64_t v9 = v23;
          goto LABEL_58;
        }
        uint64_t result = *(void **)v8;
        *(void *)BOOL v8 = 0;
        if (result) {
          uint64_t result = (void *)WTF::fastFree((WTF *)result, v15);
        }
        unint64_t v9 = 0;
        *((void *)v8 + 1) = 0;
      }
    }
LABEL_58:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
      else {
        unint64_t v4 = a2;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
  }
  long long v34 = *(void **)(*(void *)v8 + 8 * v4);
  if (v34)
  {
    void *v16 = *v34;
LABEL_71:
    *long long v34 = v16;
    goto LABEL_72;
  }
  void *v16 = *((void *)v8 + 2);
  *((void *)v8 + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v16;
  *(void *)(*(void *)v8 + 8 * v4) = v14;
  if (*v16)
  {
    unint64_t v35 = *(void *)(*v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9) {
        v35 %= v9;
      }
    }
    else
    {
      v35 &= v9 - 1;
    }
    long long v34 = (void *)(*(void *)v8 + 8 * v35);
    goto LABEL_71;
  }
LABEL_72:
  ++*((void *)v8 + 3);
  return result;
}

WebKit::MediaDescriptionInfo *WebKit::MediaDescriptionInfo::MediaDescriptionInfo(WebKit::MediaDescriptionInfo *this, const WebCore::MediaDescription *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  if (v4 && (*(unsigned char *)(v4 + 16) & 4) == 0) {
    WTF::String::String();
  }
  else {
    WTF::String::String();
  }
  *((unsigned char *)this + 8) = (*(uint64_t (**)(const WebCore::MediaDescription *))(*(void *)a2 + 16))(a2);
  *((unsigned char *)this + 9) = (*(uint64_t (**)(const WebCore::MediaDescription *))(*(void *)a2 + 24))(a2);
  *((unsigned char *)this + 10) = (*(uint64_t (**)(const WebCore::MediaDescription *))(*(void *)a2 + 32))(a2);
  return this;
}

unsigned __int8 *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  uint64_t v17 = v7;
  char v18 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  *(unsigned char *)(a1 + 11WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 1;
  long long v16 = *a2;
  BOOL v15 = *(_DWORD *)(a1 + 64) == 0;
  uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v7);
  if (*result) {
    BOOL v9 = result[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    uint64_t result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [12],BOOL,char [2]>((uint64_t)result, 4u, a3, " invoking maybeSettle() [", a1, " callback:", (int)&v16, " isNothing:", (uint64_t)&v15, "]");
  }
  if (*(_DWORD *)(a1 + 64))
  {
    uint64_t result = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(*a2, a1, (atomic_uchar *volatile *)&v17);
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a1 + 84);
    if (v10 == *(_DWORD *)(a1 + 80))
    {
      uint64_t result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 72, v10 + 1, (unint64_t)a2);
      uint64_t v10 = *(unsigned int *)(a1 + 84);
      int v11 = v10 + 1;
      uint64_t v12 = *(void *)(a1 + 72);
      unint64_t v13 = *(WTF::NativePromiseBase **)result;
      *(void *)uint64_t result = 0;
    }
    else
    {
      int v11 = v10 + 1;
      uint64_t v12 = *(void *)(a1 + 72);
      unint64_t v13 = *a2;
      *a2 = 0;
    }
    *(void *)(v12 + 8 * v10) = v13;
    *(_DWORD *)(a1 + 84) = v11;
  }
  if (v18)
  {
    uint64_t result = (unsigned __int8 *)v17;
    int v14 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 != 1) {
      return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
    }
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [12],BOOL,char [2]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5, const char *a6, int a7, const char *a8, uint64_t a9, const char *a10)
{
  v64[1] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v52, this);
  WTF::String::String((WTF::String *)&v51, a4);
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, &v50);
  WTF::String::String((WTF::String *)&v49, a6);
  WTF::LogArgument<void const*>::toString();
  int8x16x2_t v41 = (char *)a8;
  WTF::String::String((WTF::String *)&v47, a8);
  WTF::LogArgument<BOOL>::toString<BOOL>(&v46);
  WTF::String::String((WTF::String *)&v45, a10);
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, (uint64_t *)&v45, &v53);
  if (v53)
  {
    long long v16 = v45;
    uint64_t v45 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = v46;
    uint64_t v46 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v15);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    char v18 = v47;
    __int16 v47 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v15);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    float v19 = v48;
    uint64_t v48 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v15);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    BOOL v20 = v49;
    int v49 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v15);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    unint64_t v21 = v50;
    uint64_t v50 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v15);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    unint64_t v22 = v51;
    unint64_t v51 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v15);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    size_t v23 = v52;
    uint64_t v52 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v15);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    uint64_t v24 = *(NSObject **)(a1 + 32);
    uint64_t v25 = (WTF *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    if (v25)
    {
      WTF::String::utf8();
      unsigned int v27 = v44[0] ? (char *)v44[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      uint64_t v55 = v27;
      _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v25 = v44[0];
      v44[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1) {
          uint64_t v25 = (WTF *)WTF::fastFree(v25, v26);
        }
        else {
          --*(_DWORD *)v25;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      size_t v28 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v29 = *v28;
        if (v29) {
          break;
        }
        int v30 = *v28;
        atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, v29 | 1, memory_order_acquire, memory_order_acquire);
        if (v30 == v29)
        {
          uint64_t v31 = WTF::Logger::observers(v25);
          uint64_t v32 = *(unsigned int *)(v31 + 12);
          if (v32)
          {
            size_t v33 = *(uint64_t **)v31;
            uint64_t v39 = *(void *)v31 + 8 * v32;
            do
            {
              uint64_t v34 = *v33;
              *(_DWORD *)long long buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v55 + 4), this);
              int v56 = 0;
              WTF::String::String((WTF::String *)v57, a4);
              v57[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, &v58);
              int v59 = 0;
              WTF::String::String((WTF::String *)v60, a6);
              v60[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v60[6] = 0;
              WTF::String::String((WTF::String *)v61, v41);
              v61[2] = 0;
              WTF::LogArgument<BOOL>::toString<BOOL>(&v62);
              int v63 = 0;
              WTF::String::String((WTF::String *)v64, a10);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v44, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v34 + 16))(v34, a1, a2, v44);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v35);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                long long v37 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2) {
                    WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v26);
                  }
                  else {
                    *(_DWORD *)v37 -= 2;
                  }
                }
              }
              ++v33;
            }
            while (v33 != (uint64_t *)v39);
          }
          int v38 = 1;
          atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v38, 0, memory_order_release, memory_order_relaxed);
          if (v38 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v53;
    unint64_t v53 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v26);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

unint64_t WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = *(void **)result;
  uint64_t v5 = *(unsigned int *)(result + 12);
  if (a2 < 2)
  {
    uint64_t v6 = (void *)(result + 16);
    *(void *)uint64_t v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 1;
LABEL_6:
    memcpy(v6, v4, 8 * v5);
    if ((void *)(v3 + 16) != v4 && v4 != 0)
    {
      if (*(void **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  if (!(a2 >> 29))
  {
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDurationChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C1FE8;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDurationChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9C1FE8;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDurationChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  int v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9C2010;
  v4[1] = v3;
  unint64_t v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  uint64_t result = (uint64_t)v7;
  unint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDurationChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C2010;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDurationChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9C2010;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDurationChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::call@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  int v2 = *(void **)(result + 8);
  if (v2 && *v2) {
    *a2 = 0;
  }
  else {
    *a2 = 260;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateBufferedChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C2038;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateBufferedChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9C2038;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateBufferedChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  int v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9C2060;
  v4[1] = v3;
  unint64_t v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  uint64_t result = (uint64_t)v7;
  unint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateBufferedChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C2060;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateBufferedChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9C2060;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateBufferedChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::call@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  int v2 = *(void **)(result + 8);
  if (v2 && *v2) {
    *a2 = 0;
  }
  else {
    *a2 = 260;
  }
  return result;
}

uint64_t *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand(uint64_t *a1)
{
  int v2 = (WTF::NativePromiseBase *)a1[1];
  if (v2)
  {
    uint64_t v3 = *a1;
    a1[1] = 0;
    unint64_t v8 = v2;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(v3, &v8, (WTF::Logger::LogSiteIdentifier *)(a1 + 2));
    uint64_t v4 = (unsigned int *)v8;
    unint64_t v8 = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = (unsigned int *)a1[1];
    a1[1] = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
    }
  }
  else
  {
    a1[1] = 0;
  }
  uint64_t v6 = (unsigned int *)*a1;
  *a1 = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
  }
  return a1;
}

unsigned __int8 *WTF::NativePromise<void,void,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  unint64_t v7 = (WTF::Lock *)(a1 + 48);
  uint64_t v17 = v7;
  char v18 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    unint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  *(unsigned char *)(a1 + 11WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 1;
  long long v16 = *a2;
  BOOL v15 = *(_DWORD *)(a1 + 64) == 0;
  uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v7);
  if (*result) {
    BOOL v9 = result[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    uint64_t result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WTF::NativePromise<void,void,0u>,char [11],void const*,char [12],BOOL,char [2]>((uint64_t)result, 4u, a3, " invoking maybeSettle() [", a1, " callback:", (int)&v16, " isNothing:", (uint64_t)&v15, "]");
  }
  if (*(_DWORD *)(a1 + 64))
  {
    uint64_t result = WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(*a2, a1, (atomic_uchar *volatile *)&v17);
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a1 + 84);
    if (v10 == *(_DWORD *)(a1 + 80))
    {
      uint64_t result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 72, v10 + 1, (unint64_t)a2);
      uint64_t v10 = *(unsigned int *)(a1 + 84);
      int v11 = v10 + 1;
      uint64_t v12 = *(void *)(a1 + 72);
      unint64_t v13 = *(WTF::NativePromiseBase **)result;
      *(void *)uint64_t result = 0;
    }
    else
    {
      int v11 = v10 + 1;
      uint64_t v12 = *(void *)(a1 + 72);
      unint64_t v13 = *a2;
      *a2 = 0;
    }
    *(void *)(v12 + 8 * v10) = v13;
    *(_DWORD *)(a1 + 84) = v11;
  }
  if (v18)
  {
    uint64_t result = (unsigned __int8 *)v17;
    int v14 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 != 1) {
      return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
    }
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WTF::NativePromise<void,void,0u>,char [11],void const*,char [12],BOOL,char [2]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5, const char *a6, int a7, const char *a8, uint64_t a9, const char *a10)
{
  v64[1] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v52, this);
  WTF::String::String((WTF::String *)&v51, a4);
  WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a5, &v50);
  WTF::String::String((WTF::String *)&v49, a6);
  WTF::LogArgument<void const*>::toString();
  int8x16x2_t v41 = (char *)a8;
  WTF::String::String((WTF::String *)&v47, a8);
  WTF::LogArgument<BOOL>::toString<BOOL>(&v46);
  WTF::String::String((WTF::String *)&v45, a10);
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, (uint64_t *)&v45, &v53);
  if (v53)
  {
    long long v16 = v45;
    uint64_t v45 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = v46;
    uint64_t v46 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v15);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    char v18 = v47;
    __int16 v47 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v15);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    float v19 = v48;
    uint64_t v48 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v15);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    BOOL v20 = v49;
    int v49 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v15);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    unint64_t v21 = v50;
    uint64_t v50 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v15);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    unint64_t v22 = v51;
    unint64_t v51 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v15);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    size_t v23 = v52;
    uint64_t v52 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v15);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    uint64_t v24 = *(NSObject **)(a1 + 32);
    uint64_t v25 = (WTF *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    if (v25)
    {
      WTF::String::utf8();
      unsigned int v27 = v44[0] ? (char *)v44[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      uint64_t v55 = v27;
      _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v25 = v44[0];
      v44[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1) {
          uint64_t v25 = (WTF *)WTF::fastFree(v25, v26);
        }
        else {
          --*(_DWORD *)v25;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      size_t v28 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v29 = *v28;
        if (v29) {
          break;
        }
        int v30 = *v28;
        atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, v29 | 1, memory_order_acquire, memory_order_acquire);
        if (v30 == v29)
        {
          uint64_t v31 = WTF::Logger::observers(v25);
          uint64_t v32 = *(unsigned int *)(v31 + 12);
          if (v32)
          {
            size_t v33 = *(uint64_t **)v31;
            uint64_t v39 = *(void *)v31 + 8 * v32;
            do
            {
              uint64_t v34 = *v33;
              *(_DWORD *)long long buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v55 + 4), this);
              int v56 = 0;
              WTF::String::String((WTF::String *)v57, a4);
              v57[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a5, &v58);
              int v59 = 0;
              WTF::String::String((WTF::String *)v60, a6);
              v60[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v60[6] = 0;
              WTF::String::String((WTF::String *)v61, v41);
              v61[2] = 0;
              WTF::LogArgument<BOOL>::toString<BOOL>(&v62);
              int v63 = 0;
              WTF::String::String((WTF::String *)v64, a10);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v44, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v34 + 16))(v34, a1, a2, v44);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v35);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                long long v37 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2) {
                    WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v26);
                  }
                  else {
                    *(_DWORD *)v37 -= 2;
                  }
                }
              }
              ++v33;
            }
            while (v33 != (uint64_t *)v39);
          }
          int v38 = 1;
          atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v38, 0, memory_order_release, memory_order_relaxed);
          if (v38 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v53;
    unint64_t v53 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v26);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

unint64_t WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = *(void **)result;
  uint64_t v5 = *(unsigned int *)(result + 12);
  if (a2 < 2)
  {
    uint64_t v6 = (void *)(result + 16);
    *(void *)uint64_t v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 1;
LABEL_6:
    memcpy(v6, v4, 8 * v5);
    if ((void *)(v3 + 16) != v4 && v4 != 0)
    {
      if (*(void **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  if (!(a2 >> 29))
  {
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand(uint64_t *a1)
{
  int v2 = (WTF::NativePromiseBase *)a1[1];
  if (v2)
  {
    uint64_t v3 = *a1;
    a1[1] = 0;
    unint64_t v8 = v2;
    WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::maybeSettle(v3, &v8, (WTF::Logger::LogSiteIdentifier *)(a1 + 2));
    uint64_t v4 = (unsigned int *)v8;
    unint64_t v8 = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = (unsigned int *)a1[1];
    a1[1] = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
    }
  }
  else
  {
    a1[1] = 0;
  }
  uint64_t v6 = (unsigned int *)*a1;
  *a1 = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
  }
  return a1;
}

unsigned __int8 *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  unint64_t v7 = (WTF::Lock *)(a1 + 48);
  uint64_t v17 = v7;
  char v18 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    unint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  *(unsigned char *)(a1 + 128) = 1;
  long long v16 = *a2;
  BOOL v15 = *(_DWORD *)(a1 + 80) == 0;
  uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v7);
  if (*result) {
    BOOL v9 = result[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    uint64_t result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [12],BOOL,char [2]>((uint64_t)result, 4u, a3, " invoking maybeSettle() [", a1, " callback:", (int)&v16, " isNothing:", (uint64_t)&v15, "]");
  }
  if (*(_DWORD *)(a1 + 80))
  {
    uint64_t result = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(*a2, a1, (atomic_uchar *volatile *)&v17);
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a1 + 100);
    if (v10 == *(_DWORD *)(a1 + 96))
    {
      uint64_t result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 88, v10 + 1, (unint64_t)a2);
      uint64_t v10 = *(unsigned int *)(a1 + 100);
      int v11 = v10 + 1;
      uint64_t v12 = *(void *)(a1 + 88);
      unint64_t v13 = *(WTF::NativePromiseBase **)result;
      *(void *)uint64_t result = 0;
    }
    else
    {
      int v11 = v10 + 1;
      uint64_t v12 = *(void *)(a1 + 88);
      unint64_t v13 = *a2;
      *a2 = 0;
    }
    *(void *)(v12 + 8 * v10) = v13;
    *(_DWORD *)(a1 + 100) = v11;
  }
  if (v18)
  {
    uint64_t result = (unsigned __int8 *)v17;
    int v14 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 != 1) {
      return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand(uint64_t *a1)
{
  v68[1] = *MEMORY[0x1E4F143B8];
  int v2 = (WTF::NativePromiseBase *)a1[1];
  if (v2)
  {
    char v3 = 0;
    uint64_t v4 = *a1;
    a1[1] = 0;
    uint64_t v5 = (WTF::NativePromiseBase *)(v4 + 48);
    uint64_t v45 = v2;
    uint64_t v46 = (WTF::Lock *)(v4 + 48);
    char v47 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 48), (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
    if (v3) {
      uint64_t v5 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
    }
    *(unsigned char *)(v4 + 128) = 1;
    char v6 = (unsigned char *)WTF::NativePromiseBase::logChannel(v5);
    if (*v6)
    {
      unint64_t v7 = v6;
      if (v6[16] >= 4u)
      {
        WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v56, (WTF::Logger::LogSiteIdentifier *)(a1 + 2));
        WTF::String::String((WTF::String *)&v55, " invoking maybeSettle() [");
        WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v4, &v54);
        WTF::String::String((WTF::String *)&v53, " callback:");
        WTF::LogArgument<void const*>::toString();
        WTF::String::String((WTF::String *)&v51, " isNothing:");
        WTF::LogArgument<BOOL>::toString<BOOL>(&v50);
        WTF::String::String((WTF::String *)&v49, "]");
        uint64_t result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v56, (uint64_t *)&v55, (uint64_t *)&v54, (uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, &v57);
        if (!v57)
        {
          __break(0xC471u);
          return result;
        }
        uint64_t v10 = v49;
        int v49 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2) {
            WTF::StringImpl::destroy(v10, v9);
          }
          else {
            *(_DWORD *)v10 -= 2;
          }
        }
        int v11 = v50;
        uint64_t v50 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2) {
            WTF::StringImpl::destroy(v11, v9);
          }
          else {
            *(_DWORD *)v11 -= 2;
          }
        }
        uint64_t v12 = v51;
        unint64_t v51 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v9);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
        unint64_t v13 = v52;
        uint64_t v52 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, v9);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
        int v14 = v53;
        unint64_t v53 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy(v14, v9);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
        BOOL v15 = v54;
        uint64_t v54 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v9);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
        long long v16 = v55;
        uint64_t v55 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2) {
            WTF::StringImpl::destroy(v16, v9);
          }
          else {
            *(_DWORD *)v16 -= 2;
          }
        }
        uint64_t v17 = v56;
        int v56 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            WTF::StringImpl::destroy(v17, v9);
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
        char v18 = *((void *)v7 + 4);
        float v19 = (WTF *)os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        if (v19)
        {
          WTF::String::utf8();
          unint64_t v21 = v48[0] ? (char *)v48[0] + 16 : 0;
          *(_DWORD *)long long buf = 136446210;
          int v59 = v21;
          _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          float v19 = v48[0];
          v48[0] = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 1) {
              float v19 = (WTF *)WTF::fastFree(v19, v20);
            }
            else {
              --*(_DWORD *)v19;
            }
          }
        }
        if (*v7 && v7[16] >= 4u)
        {
          unint64_t v22 = (atomic_uchar *)MEMORY[0x1E4F30998];
          while (1)
          {
            int v23 = *v22;
            if (v23) {
              break;
            }
            int v24 = *v22;
            atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v24, v23 | 1, memory_order_acquire, memory_order_acquire);
            if (v24 == v23)
            {
              uint64_t v25 = WTF::Logger::observers(v19);
              uint64_t v26 = *(unsigned int *)(v25 + 12);
              if (v26)
              {
                unsigned int v27 = *(uint64_t **)v25;
                uint64_t v44 = *(void *)v25 + 8 * v26;
                do
                {
                  uint64_t v28 = *v27;
                  *(_DWORD *)long long buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v59 + 4), (WTF::Logger::LogSiteIdentifier *)(a1 + 2));
                  int v60 = 0;
                  WTF::String::String((WTF::String *)v61, " invoking maybeSettle() [");
                  v61[2] = 0;
                  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v4, &v62);
                  int v63 = 0;
                  WTF::String::String((WTF::String *)v64, " callback:");
                  v64[2] = 0;
                  WTF::LogArgument<void const*>::toString();
                  v64[6] = 0;
                  WTF::String::String((WTF::String *)v65, " isNothing:");
                  v65[2] = 0;
                  WTF::LogArgument<BOOL>::toString<BOOL>(&v66);
                  int v67 = 0;
                  WTF::String::String((WTF::String *)v68, "]");
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v48, (uint64_t)buf, 8uLL);
                  (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v28 + 16))(v28, v7, 4, v48);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v48, v29);
                  for (uint64_t i = 120; i != -8; i -= 16)
                  {
                    uint64_t v31 = *(WTF::StringImpl **)&buf[i];
                    *(void *)&buf[i] = 0;
                    if (v31)
                    {
                      if (*(_DWORD *)v31 == 2) {
                        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v20);
                      }
                      else {
                        *(_DWORD *)v31 -= 2;
                      }
                    }
                  }
                  ++v27;
                }
                while (v27 != (uint64_t *)v44);
              }
              int v32 = 1;
              atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
              if (v32 != 1) {
                WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
              }
              break;
            }
          }
        }
        size_t v33 = v57;
        uint64_t v57 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2) {
            WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v20);
          }
          else {
            *(_DWORD *)v33 -= 2;
          }
        }
      }
    }
    if (*(_DWORD *)(v4 + 80))
    {
      WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(v45, v4, (atomic_uchar *volatile *)&v46);
    }
    else
    {
      uint64_t v34 = *(unsigned int *)(v4 + 100);
      if (v34 == *(_DWORD *)(v4 + 96))
      {
        unint64_t v35 = (WTF::NativePromiseBase **)WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4 + 88, v34 + 1, (unint64_t)&v45);
        uint64_t v34 = *(unsigned int *)(v4 + 100);
        int v36 = v34 + 1;
        uint64_t v37 = *(void *)(v4 + 88);
        int v38 = *v35;
        void *v35 = 0;
      }
      else
      {
        int v36 = v34 + 1;
        uint64_t v37 = *(void *)(v4 + 88);
        int v38 = v45;
        uint64_t v45 = 0;
      }
      *(void *)(v37 + 8 * v34) = v38;
      *(_DWORD *)(v4 + 100) = v36;
    }
    if (v47)
    {
      uint64_t v39 = v46;
      int v40 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v46, (unsigned __int8 *)&v40, 0, memory_order_release, memory_order_relaxed);
      if (v40 != 1) {
        WTF::Lock::unlockSlow(v39);
      }
    }
    int8x16x2_t v41 = (unsigned int *)v45;
    uint64_t v45 = 0;
    if (v41 && atomic_fetch_add((atomic_uint *volatile)v41 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v41 + 2);
      (*(void (**)(unsigned int *))(*(void *)v41 + 8))(v41);
    }
    uint64_t v42 = (unsigned int *)a1[1];
    a1[1] = 0;
    if (v42 && atomic_fetch_add((atomic_uint *volatile)v42 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v42 + 2);
      (*(void (**)(unsigned int *))(*(void *)v42 + 8))(v42);
    }
  }
  else
  {
    a1[1] = 0;
  }
  char v43 = (unsigned int *)*a1;
  *a1 = 0;
  if (v43)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v43 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v43 + 2);
      (*(void (**)(unsigned int *))(*(void *)v43 + 16))(v43);
    }
  }
  return (uint64_t)a1;
}

unsigned __int8 *WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, atomic_uchar *volatile *a3)
{
  uint64_t v5 = a1;
  if (!*((void *)a1 + 2)
    || (int v6 = atomic_load((unsigned __int8 *)(a2 + 129)), v6 == 1)
    && (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(void))(**((void **)a1 + 2) + 24))(*((void *)a1 + 2)),
        a1))
  {
    if (*((unsigned char *)v5 + 56))
    {
      v16[0] = v5;
      uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
      if (*result) {
        BOOL v10 = result[16] >= 4u;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10) {
        return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)v16, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
      }
    }
    else
    {
      atomic_uchar *volatile v11 = *a3;
      int v12 = 1;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
      }
      if (WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(a2))
      {
        WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::takeResultRunnable(a2, &v15);
        (*(void (**)(void *__return_ptr))(*(void *)v15 + 16))(v16);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, void *))(*(void *)v5 + 24))(v5, a2, v16);
        if (v17 != -1) {
          ((void (*)(char *, void *))off_1EE9C2078[v17])(&v18, v16);
        }
        int v17 = -1;
        uint64_t v13 = v15;
        uint64_t v15 = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
      }
      else
      {
        WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::takeResult(a2, (uint64_t)v16);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, void *))(*(void *)v5 + 24))(v5, a2, v16);
        if (v17 != -1) {
          ((void (*)(uint64_t *, void *))off_1EE9C2078[v17])(&v15, v16);
        }
      }
      char v14 = 0;
      uint64_t result = (unsigned __int8 *)*a3;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
      if (v14) {
        return (unsigned __int8 *)MEMORY[0x19972E8D0]();
      }
    }
  }
  else
  {
    uint64_t v7 = *((void *)v5 + 2);
    atomic_fetch_add((atomic_uint *volatile)v5 + 2, 1u);
    atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
    unint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v8 = &unk_1EE9C2238;
    v8[1] = v5;
    v8[2] = v5;
    v8[3] = a2;
    v16[0] = v8;
    (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, v16);
    uint64_t result = (unsigned __int8 *)v16[0];
    v16[0] = 0;
    if (result) {
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::takeResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = 0;
  uint64_t v5 = (WTF::Lock *)(a1 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 48);
  }
  if (*(_DWORD *)(a1 + 80) == 1)
  {
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>,(std::__variant_detail::_Trait)1>>(a2, a1 + 56);
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return WTF::Lock::unlockSlow(v5);
    }
  }
  else
  {
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(v8);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9C2078[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9C2088[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C2238;
  int v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C2238;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

unsigned __int8 *WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[2];
  if (*(unsigned char *)(*a1 + 56))
  {
    v9[0] = *a1;
    uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
    if (*result) {
      BOOL v4 = result[16] >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)v9, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(a1[2]);
    uint64_t v7 = a1[2];
    if (hasRunnable)
    {
      WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::takeResultRunnable(a1[2], &v8);
      (*(void (**)(void *__return_ptr))(*(void *)v8 + 16))(v9);
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v1 + 24))(v1, v7, v9);
      if (v10 != -1) {
        ((void (*)(char *, void *))off_1EE9C2078[v10])(&v11, v9);
      }
      int v10 = -1;
      uint64_t result = v8;
      uint64_t v8 = 0;
      if (result) {
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
      }
    }
    else
    {
      WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::takeResult(a1[2], (uint64_t)v9);
      uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)v1 + 24))(v1, v7, v9);
      if (v10 != -1) {
        return (unsigned __int8 *)((uint64_t (*)(unsigned __int8 **, void *))off_1EE9C2078[v10])(&v8, v9);
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateShuttingDown,WebKit::RemoteSourceBufferProxy::shutdown(void)::$_0>(WebKit::RemoteSourceBufferProxy::shutdown(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C20A8;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 16));
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateShuttingDown,WebKit::RemoteSourceBufferProxy::shutdown(void)::$_0>(WebKit::RemoteSourceBufferProxy::shutdown(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C20A8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 16));
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateShuttingDown,WebKit::RemoteSourceBufferProxy::shutdown(void)::$_0>(WebKit::RemoteSourceBufferProxy::shutdown(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  return WebKit::RemoteSourceBufferProxy::disconnect(*(WebKit::RemoteSourceBufferProxy **)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteTextTrackProxy::RemoteTextTrackProxy(WebKit::GPUConnectionToWebProcess &,WebCore::InbandTextTrackPrivate &,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void,WTF::Function<void ()(void)> &&>::call()
{
  return WTF::ensureOnMainThread();
}

void IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::MediaTime const&,WTF::MediaTime const&,WebCore::SerializedPlatformDataCueValue const&>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,WTF::MediaTime const&,WTF::MediaTime const&,WebCore::SerializedPlatformDataCueValue const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7)
  {
    __break(0xC471u);
  }
  else
  {
    *uint64_t v5 = v4;
    IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2[1]);
    IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2[2]);
  }
  JUMPOUT(0x1989499F0);
}

uint64_t IPC::ArgumentCoder<std::tuple<unsigned long long,WebCore::GenericCueData const&>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,WebCore::GenericCueData const&>,0ul,1ul>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v5 = v4;
    uint64_t v7 = a2[1];
    return IPC::ArgumentCoder<WebCore::GenericCueData,void>::encode(a1, v7);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,WTF::String const&>,0ul,1ul>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v5 = v4;
    uint64_t v7 = (uint64_t *)a2[1];
    return (uint64_t)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v7);
  }
  return result;
}

uint64_t WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::ensure<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::add(IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>)::{lambda(void)#1}>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  LODWORD(v29) = -1640531527;
  WORD2(v29) = 0;
  BYTE6(v29) = 0;
  WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v29, a2);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
  unsigned int v11 = result & v9;
  uint64_t v12 = v8 + 56 * (result & v9);
  uint64_t v13 = *(void *)v12;
  uint64_t v14 = *(void *)(v12 + 8);
  if (*(_OWORD *)v12 != 0)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    do
    {
      if (*a2 == v13 && a2[1] == v14)
      {
        uint64_t v25 = *a1;
        if (*a1) {
          unsigned int v26 = *(_DWORD *)(v25 - 4);
        }
        else {
          unsigned int v26 = 0;
        }
        char v28 = 0;
        uint64_t v27 = v25 + 56 * v26;
        goto LABEL_34;
      }
      if (v13 == -1) {
        uint64_t v15 = v12;
      }
      unsigned int v11 = (v11 + v16) & v9;
      uint64_t v12 = v8 + 56 * v11;
      uint64_t v13 = *(void *)v12;
      uint64_t v14 = *(void *)(v12 + 8);
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      *(void *)(v15 + 48) = 0;
      *(_OWORD *)(v15 + 16) = 0u;
      *(_OWORD *)(v15 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0u;
      *(_OWORD *)uint64_t v15 = 0u;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v12 = v15;
    }
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a2;
  int v17 = *a3;
  *(void *)&long long v29 = 0;
  BYTE8(v29) = 0;
  char v30 = 0;
  uint64_t v18 = *v17;
  uint64_t *v17 = 0;
  uint64_t v31 = v18;
  char v32 = 1;
  *(unsigned char *)(v12 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  *(_OWORD *)(v12 + 16) = v29;
  uint64_t result = (uint64_t)std::__optional_storage_base<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,false>>((unsigned int *)(v12 + 40), &v31);
  if (v32)
  {
    uint64_t result = v31;
    uint64_t v31 = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)(result + 8));
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  uint64_t v19 = *a1;
  if (*a1) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v20;
  uint64_t v21 = *a1;
  if (*a1) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_25:
      uint64_t result = (uint64_t)WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1, (_OWORD *)v12);
      uint64_t v12 = result;
      uint64_t v21 = *a1;
      if (*a1) {
        LODWORD(v24) = *(_DWORD *)(v21 - 4);
      }
      else {
        LODWORD(v24) = 0;
      }
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_25;
  }
  uint64_t v27 = v21 + 56 * v24;
  char v28 = 1;
LABEL_34:
  *(void *)a4 = v12;
  *(void *)(a4 + 8) = v27;
  *(unsigned char *)(a4 + 16) = v28;
  return result;
}

uint64_t std::optional<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::operator=[abi:sn180100]<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,void>(uint64_t a1, uint64_t *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v4 = *a2;
  *a2 = 0;
  if (v3)
  {
    uint64_t v5 = *(unsigned int **)a1;
    *(void *)a1 = v4;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
    }
  }
  else
  {
    *(void *)a1 = v4;
    *(unsigned char *)(a1 + 8) = 1;
  }
  return a1;
}

_OWORD *WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v5, a2);
}

unsigned int *std::__optional_storage_base<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,false>>(unsigned int *result, uint64_t *a2)
{
  uint64_t v2 = result;
  if (*((unsigned __int8 *)result + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*((unsigned char *)result + 8))
    {
      uint64_t v3 = *a2;
      *a2 = 0;
      uint64_t result = *(unsigned int **)result;
      *(void *)uint64_t v2 = v3;
      if (result)
      {
        if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result + 2);
          int v4 = *(uint64_t (**)(void))(*(void *)result + 8);
          return (unsigned int *)v4();
        }
      }
    }
  }
  else if (*((unsigned char *)result + 8))
  {
    uint64_t result = *(unsigned int **)result;
    *(void *)uint64_t v2 = 0;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
    *((unsigned char *)v2 + 8) = 0;
  }
  else
  {
    uint64_t v5 = *a2;
    *a2 = 0;
    *(void *)uint64_t result = v5;
    *((unsigned char *)result + 8) = 1;
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameObjectHeap::getVideoFrameBuffer(IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> &&,BOOL)::$_0,void,IPC::Semaphore &>::call(uint64_t a1, IPC::Semaphore *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 24);
  int v4 = a2;
  return IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::SetSharedVideoFrameSemaphore>(v2, &v4);
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::SetSharedVideoFrameSemaphore>(uint64_t a1, IPC::Semaphore **a2)
{
  int v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v4 = 1416;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  int v9 = v4;
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode((uint64_t)v4, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  int v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameObjectHeap::getVideoFrameBuffer(IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> &&,BOOL)::$_1,void,WebCore::SharedMemoryHandle &&>::call(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 24);
  unint64_t v4 = a2;
  return IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::SetSharedVideoFrameMemory>(v2, &v4);
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::SetSharedVideoFrameMemory>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v4 = 1415;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  int v9 = v4;
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(v4, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  int v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<std::optional<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>,void>::encode<IPC::Encoder,std::optional<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 24);
  uint64_t result = (IPC::Encoder *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198B20B18);
    }
    *(unsigned char *)uint64_t result = 1;
    if (!*(unsigned char *)(a2 + 24))
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      JUMPOUT(0x198B20B40);
    }
    unsigned __int8 v7 = *(_DWORD *)(a2 + 16);
    IPC::Encoder::operator<<<BOOL>(a1, (char *)&v7);
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>(a1, (int *)a2, v7);
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198B20B38);
    }
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameObjectHeap::convertFrameBuffer(WebKit::SharedVideoFrame &&,WTF::CompletionHandler<void ()(WebCore::DestinationColorSpace)> &&)::$_1,void,IPC::Semaphore &>::call(uint64_t a1, IPC::Semaphore *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 24);
  int v4 = a2;
  return IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::SetSharedVideoFrameSemaphore>(v2, &v4);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameObjectHeap::convertFrameBuffer(WebKit::SharedVideoFrame &&,WTF::CompletionHandler<void ()(WebCore::DestinationColorSpace)> &&)::$_2,void,WTF::CompletionHandler::SharedMemoryHandle &&>::call(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 24);
  unint64_t v4 = a2;
  return IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::SetSharedVideoFrameMemory>(v2, &v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoTrackProxy::RemoteVideoTrackProxy(WebKit::GPUConnectionToWebProcess &,WebCore::VideoTrackPrivate &,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void,WTF::Function<void ()(void)> &&>::call()
{
  return WTF::ensureOnMainThread();
}

void API::Attachment::setFileWrapper(atomic_uchar *this, CFTypeRef cf)
{
  char v4 = 0;
  uint64_t v5 = this + 16;
  atomic_compare_exchange_strong_explicit(this + 16, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (!v4)
  {
    if (!cf) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  MEMORY[0x19972E8D0](this + 16);
  if (cf) {
LABEL_3:
  }
    CFRetain(cf);
LABEL_4:
  uint64_t v6 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = cf;
  if (v6) {
    CFRelease(v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
}

void sub_198B20C64(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::Attachment::doWithFileWrapper(uint64_t a1, void *a2)
{
  char v4 = 0;
  uint64_t v5 = (atomic_uchar *)(a1 + 16);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 16), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 16);
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a2 + 16))(*a2, *(void *)(a1 + 24));
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return result;
}

void sub_198B20D3C(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

void API::Attachment::mimeType(API::Attachment *this@<X0>, void *a2@<X8>)
{
  char v4 = (WTF::StringImpl *)*((void *)this + 6);
  if (v4 && *((_DWORD *)v4 + 1))
  {
    *(_DWORD *)v4 += 2;
    unsigned int v11 = v4;
  }
  else
  {
    API::mimeTypeInferredFromFileExtension((API *)&v11, this);
    if (!v11)
    {
      uint64_t v6 = &stru_1EEA10550;
      goto LABEL_9;
    }
  }
  uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
  int v7 = v11;
  unsigned int v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
LABEL_9:
  if ([(__CFString *)v6 length])
  {
    if (API::isDeclaredOrDynamicTypeIdentifier(v6, v8))
    {
      CFStringRef v9 = UTTypeCopyPreferredTagWithClass(v6, (CFStringRef)*MEMORY[0x1E4F22500]);
      MEMORY[0x19972EAD0](a2, v9);
      if (v9) {
        CFRelease(v9);
      }
    }
    else
    {
      MEMORY[0x19972EAD0](a2, v6);
    }
  }
  else
  {
    int v10 = (_DWORD *)*MEMORY[0x1E4F30978];
    if (*MEMORY[0x1E4F30978]) {
      *v10 += 2;
    }
    *a2 = v10;
  }
}

void sub_198B20E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *API::mimeTypeInferredFromFileExtension(API *this, const API::Attachment *a2)
{
  API::Attachment::fileName(a2, (uint64_t)&v8);
  if (v8) {
    int v3 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    int v3 = &stru_1EEA10550;
  }
  uint64_t v5 = [(__CFString *)v3 pathExtension];
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (!result)
  {
LABEL_6:
    if (v5) {
      goto LABEL_7;
    }
LABEL_11:
    *(void *)this = 0;
    return result;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_6;
  }
  uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
  if (!v5) {
    goto LABEL_11;
  }
LABEL_7:
  MEMORY[0x19972EAD0](&v8, v5);
  WebCore::MIMETypeRegistry::mimeTypeForExtension();
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198B20FA0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL API::isDeclaredOrDynamicTypeIdentifier(const __CFString *this, NSString *a2)
{
  return UTTypeIsDeclared(this) || UTTypeIsDynamic(this) != 0;
}

void API::Attachment::utiType(API::Attachment *this@<X0>, void *a2@<X8>)
{
  char v4 = (WTF::StringImpl *)*((void *)this + 6);
  if (v4 && *((_DWORD *)v4 + 1))
  {
    *(_DWORD *)v4 += 2;
    unsigned int v11 = v4;
  }
  else
  {
    API::mimeTypeInferredFromFileExtension((API *)&v11, this);
    if (!v11)
    {
      uint64_t v6 = &stru_1EEA10550;
      goto LABEL_9;
    }
  }
  uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
  int v7 = v11;
  unsigned int v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
LABEL_9:
  if ([(__CFString *)v6 length])
  {
    if (API::isDeclaredOrDynamicTypeIdentifier(v6, v8))
    {
      MEMORY[0x19972EAD0](a2, v6);
    }
    else
    {
      CFStringRef PreferredIdentifierForTag = UTTypeCreatePreferredIdentifierForTag((CFStringRef)*MEMORY[0x1E4F22500], v6, 0);
      MEMORY[0x19972EAD0](a2, PreferredIdentifierForTag);
      if (PreferredIdentifierForTag) {
        CFRelease(PreferredIdentifierForTag);
      }
    }
  }
  else
  {
    CFStringRef v9 = (_DWORD *)*MEMORY[0x1E4F30978];
    if (*MEMORY[0x1E4F30978]) {
      *v9 += 2;
    }
    *a2 = v9;
  }
}

void sub_198B2112C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::Attachment::fileName@<X0>(API::Attachment *this@<X0>, uint64_t a2@<X8>)
{
  char v4 = 0;
  uint64_t v5 = (char *)this + 16;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 16, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0]((char *)this + 16);
  }
  uint64_t v6 = objc_msgSend((id)objc_msgSend(*((id *)this + 3), "filename"), "length");
  int v7 = (void *)*((void *)this + 3);
  if (v6) {
    uint64_t v8 = [v7 filename];
  }
  else {
    uint64_t v8 = [v7 preferredFilename];
  }
  uint64_t result = MEMORY[0x19972EAD0](a2, v8);
  int v10 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return result;
}

void sub_198B21228(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

void API::Attachment::setFileWrapperAndUpdateContentType(API::Attachment *this, NSFileWrapper *a2, __CFString *a3)
{
  int v3 = a3;
  if (![(__CFString *)a3 length])
  {
    if ([(NSFileWrapper *)a2 isDirectory])
    {
      int v3 = (__CFString *)*MEMORY[0x1E4F225A0];
    }
    else if ([(NSFileWrapper *)a2 isRegularFile])
    {
      if ([(NSString *)[(NSFileWrapper *)a2 filename] length]) {
        uint64_t v6 = [(NSFileWrapper *)a2 filename];
      }
      else {
        uint64_t v6 = [(NSFileWrapper *)a2 preferredFilename];
      }
      uint64_t v7 = [(NSString *)v6 pathExtension];
      if (v7)
      {
        MEMORY[0x19972EAD0](&v13, v7);
        WebCore::MIMETypeRegistry::mimeTypeForExtension();
        if (v14)
        {
          int v3 = (__CFString *)WTF::StringImpl::operator NSString *();
          CFStringRef v9 = v14;
          uint64_t v14 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2) {
              WTF::StringImpl::destroy(v9, v8);
            }
            else {
              *(_DWORD *)v9 -= 2;
            }
          }
        }
        else
        {
          uint64_t v14 = 0;
          int v3 = &stru_1EEA10550;
        }
        int v10 = v13;
        uint64_t v13 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2) {
            WTF::StringImpl::destroy(v10, v8);
          }
          else {
            *(_DWORD *)v10 -= 2;
          }
        }
      }
      if (![(__CFString *)v3 length]) {
        int v3 = (__CFString *)*MEMORY[0x1E4F22590];
      }
    }
  }
  MEMORY[0x19972EAD0](&v14, v3);
  WTF::String::operator=((uint64_t *)this + 6, &v14);
  uint64_t v12 = v14;
  uint64_t v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  API::Attachment::setFileWrapper((atomic_uchar *)this, a2);
}

void sub_198B213F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t API::Attachment::fileSizeForDisplay(API::Attachment *this)
{
  char v2 = 0;
  int v3 = (char *)this + 16;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 16, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0]((char *)this + 16);
  }
  if ([*((id *)this + 3) isRegularFile])
  {
    char v4 = (void *)[*((id *)this + 3) fileAttributes];
    uint64_t v5 = objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E4F28390]), "unsignedLongLongValue");
    if (!v5) {
      uint64_t v5 = objc_msgSend((id)objc_msgSend(*((id *)this + 3), "regularFileContents"), "length");
    }
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    LOBYTE(v5) = 0;
    unint64_t v6 = 0;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v6 | v5;
}

void sub_198B21530(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::Attachment::associatedElementData@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(this + 65))
  {
    uint64_t v3 = this;
    char v4 = 0;
    int v10 = 0;
    uint64_t v5 = (atomic_uchar *)(this + 16);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(this + 16), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      MEMORY[0x19972E8D0](this + 16);
    }
    this = [*(id *)(v3 + 24) isRegularFile];
    int v7 = this;
    if (this)
    {
      this = [*(id *)(v3 + 24) regularFileContents];
      int v10 = (WebCore::FragmentedSharedBuffer *)this;
    }
    else
    {
      *a2 = 0;
    }
    int v8 = 1;
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1)
    {
      if (!v7) {
        return this;
      }
    }
    else
    {
      this = WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (!v7) {
        return this;
      }
    }
    if (v10)
    {
      this = (uint64_t)WebCore::SharedBuffer::create<NSData *&>(&v10, v6, &v9);
      *a2 = v9;
      return this;
    }
  }
  *a2 = 0;
  return this;
}

void sub_198B21630(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL API::Attachment::isEmpty(atomic_uchar *this)
{
  char v2 = 0;
  int v3 = this + 16;
  int v4 = 1;
  atomic_compare_exchange_strong_explicit(this + 16, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this + 16);
  }
  uint64_t v5 = *((void *)this + 3);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v5 == 0;
}

atomic_uchar *API::Attachment::createSerializedRepresentation@<X0>(atomic_uchar *this@<X0>, void *a2@<X8>)
{
  char v2 = this;
  char v4 = 0;
  unsigned int v11 = 0;
  uint64_t v5 = this + 16;
  atomic_compare_exchange_strong_explicit(this + 16, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this + 16);
  }
  if (*((void *)v2 + 3) && (uint64_t v6 = *((void *)v2 + 7)) != 0 && *(void *)(v6 + 8))
  {
    int v7 = 1;
    this = (atomic_uchar *)objc_msgSend(MEMORY[0x1E4F28DB0], "archivedDataWithRootObject:requiringSecureCoding:error:");
    unsigned int v11 = this;
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1) {
      this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
    }
    if (v11)
    {
      this = (atomic_uchar *)WebCore::SharedBuffer::create<NSData *&>((WebCore::FragmentedSharedBuffer **)&v11, v8, &v10);
      *a2 = v10;
    }
    else
    {
      *a2 = 0;
    }
  }
  else
  {
    *a2 = 0;
    int v9 = 1;
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != 1)
    {
      return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
    }
  }
  return this;
}

void sub_198B217D4(_Unwind_Exception *exception_object)
{
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v2, 0, memory_order_release, memory_order_relaxed);
  if (v2 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

void API::Attachment::updateFromSerializedRepresentation(uint64_t a1, WebCore::SharedBuffer **a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3)
  {
    if (*(void *)(v3 + 8))
    {
      WebCore::SharedBuffer::createNSData((uint64_t *)&cf, *a2);
      if (cf)
      {
        uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
        if (v6) {
          uint64_t v7 = v6 - 16;
        }
        else {
          uint64_t v7 = 0;
        }
        uint64_t v8 = *(void *)(v7 + 40);
        if (v8) {
          uint64_t v9 = *(void *)(v8 + 8);
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = (void *)MEMORY[0x1E4F28DC0];
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 1728))(v9);
        uint64_t v12 = (NSFileWrapper *)[v10 unarchivedObjectOfClasses:v11 fromData:cf error:0];
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          *(unsigned char *)(a1 + 67) = 1;
          if (*a3) {
            uint64_t v13 = (__CFString *)WTF::StringImpl::operator NSString *();
          }
          else {
            uint64_t v13 = &stru_1EEA10550;
          }
          API::Attachment::setFileWrapperAndUpdateContentType((API::Attachment *)a1, v12, v13);
          uint64_t v14 = *(void *)(a1 + 56);
          if (v14)
          {
            uint64_t v15 = *(void *)(v14 + 8);
            if (v15) {
              uint64_t v16 = v15 - 16;
            }
            else {
              uint64_t v16 = 0;
            }
          }
          else
          {
            uint64_t v16 = 0;
          }
          int v17 = (void *)WTF::fastMalloc((WTF *)0x10);
          void *v17 = &unk_1EE9C2330;
          int v20 = v17;
          WebKit::WebPageProxy::updateAttachmentAttributes(v16, (API::Attachment *)a1, (uint64_t *)&v20);
          uint64_t v18 = (uint64_t)v20;
          int v20 = 0;
          if (v18) {
            (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
          }
        }
        CFTypeRef v19 = cf;
        CFTypeRef cf = 0;
        if (v19) {
          CFRelease(v19);
        }
      }
    }
  }
}

void sub_198B219AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void API::Attachment::cloneFileWrapperTo(API::Attachment *this, API::Attachment *a2)
{
  char v4 = 0;
  *((unsigned char *)a2 + 67) = *((unsigned char *)this + 67);
  uint64_t v5 = (char *)this + 16;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 16, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0]((char *)this + 16);
  }
  API::Attachment::setFileWrapper((atomic_uchar *)a2, *((CFTypeRef *)this + 3));
  int v6 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1)
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
}

void sub_198B21A64(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

void API::ContentRuleListStore::defaultStorePath(API::ContentRuleListStore *this)
{
  if ((_MergedGlobals_66 & 1) == 0)
  {
    qword_1EB359790 = 0;
    _MergedGlobals_66 = 1;
  }
  if (qword_1EB359788 != -1) {
    dispatch_once(&qword_1EB359788, &__block_literal_global_17);
  }
  uint64_t v1 = (void *)[MEMORY[0x1E4F28CB8] defaultManager];
  [v1 createDirectoryAtURL:qword_1EB359790 withIntermediateDirectories:1 attributes:0 error:0];
  objc_msgSend((id)objc_msgSend((id)qword_1EB359790, "absoluteURL"), "path");

  JUMPOUT(0x19972EAD0);
}

void ___ZN3API20ContentRuleListStore16defaultStorePathEv_block_invoke()
{
  v0 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "URLForDirectory:inDomain:appropriateForURL:create:error:", 5, 1, 0, 0, 0);
  if (v0)
  {
    uint64_t v1 = (void *)[v0 URLByAppendingPathComponent:@"WebKit" isDirectory:1];
    if (!WebKit::processHasContainer((WebKit *)v1))
    {
      uint64_t v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier");
      if (!v2) {
        uint64_t v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28F80], "processInfo"), "processName");
      }
      uint64_t v1 = (void *)[v1 URLByAppendingPathComponent:v2 isDirectory:1];
    }
    int v3 = (const void *)[v1 URLByAppendingPathComponent:@"ContentRuleLists" isDirectory:1];
    uint64_t v4 = (uint64_t)v3;
    if (v3) {
      CFRetain(v3);
    }
    uint64_t v5 = (const void *)qword_1EB359790;
    qword_1EB359790 = v4;
    if (v5)
    {
      CFRelease(v5);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t API::SerializedScriptValue::deserialize(API::SerializedScriptValue *this, WebCore::SerializedScriptValue *a2)
{
  {
    API::SharedJSContext::SharedJSContext(this);
  }
  API::SharedJSContext::ensureContext((API::SharedJSContext *)&v9);
  id v3 = v9;
  uint64_t v4 = (OpaqueJSContext *)[v9 JSGlobalContextRef];
  uint64_t v5 = v4;
  if (v4) {
    JSGlobalContextRetain(v4);
  }
  uint64_t v6 = WebCore::SerializedScriptValue::deserialize(this, v5, 0);
  if (v6)
  {
    uint64_t v7 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F30938], "valueWithJSValueRef:inContext:", v6, v3), "toObject");
    if (!v5) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v7 = 0;
  if (v5) {
LABEL_7:
  }
    JSGlobalContextRelease(v5);
LABEL_8:
  if (v3) {
    CFRelease(v3);
  }
  return v7;
}

void sub_198B21D14(_Unwind_Exception *exception_object)
{
  if (v2) {
    JSGlobalContextRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef API::SharedJSContext::ensureContext(API::SharedJSContext *this)
{
  WTF::MonotonicTime::now(this);
  qword_1EB359770 = v2;
  CFTypeRef result = (CFTypeRef)API::sharedContext(void)::sharedContext;
  if (API::sharedContext(void)::sharedContext)
  {
    *(void *)this = API::sharedContext(void)::sharedContext;
LABEL_6:
    return CFRetain(result);
  }
  JSRemoteInspectorGetInspectionFollowsInternalPolicies();
  JSRemoteInspectorSetInspectionFollowsInternalPolicies();
  JSRemoteInspectorGetInspectionEnabledByDefault();
  JSRemoteInspectorSetInspectionEnabledByDefault();
  id v4 = objc_alloc_init(MEMORY[0x1E4F30920]);
  uint64_t v5 = (const void *)API::sharedContext(void)::sharedContext;
  API::sharedContext(void)::sharedContext = (uint64_t)v4;
  if (v5) {
    CFRelease(v5);
  }
  JSRemoteInspectorSetInspectionEnabledByDefault();
  JSRemoteInspectorSetInspectionFollowsInternalPolicies();
  WTF::RunLoop::TimerBase::start();
  CFTypeRef result = (CFTypeRef)API::sharedContext(void)::sharedContext;
  *(void *)this = API::sharedContext(void)::sharedContext;
  if (result) {
    goto LABEL_6;
  }
  return result;
}

void API::SerializedScriptValue::createFromNSObject(BOOL this@<X0>, objc_object *a2@<X1>, WebKit **a3@<X8>)
{
  BOOL v3 = this;
  if (this)
  {
    this = API::validateObject((API *)this, a2);
    if (!this) {
      goto LABEL_12;
    }
  }
  {
    API::SharedJSContext::SharedJSContext((API::SharedJSContext *)this);
  }
  API::SharedJSContext::ensureContext((API::SharedJSContext *)&v12);
  uint64_t v5 = v12;
  uint64_t v6 = (void *)[MEMORY[0x1E4F30938] valueWithObject:v3 inContext:v12];
  if (v6)
  {
    uint64_t v7 = (OpaqueJSContext *)[v5 JSGlobalContextRef];
    uint64_t v8 = v7;
    if (v7) {
      JSGlobalContextRetain(v7);
    }
    JSC::JSLockHolder::JSLockHolder();
    [v6 JSValueRef];
    WebCore::SerializedScriptValue::create();
    MEMORY[0x19972D170](v11);
    JSGlobalContextRelease(v8);
    if (v5) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (v5) {
LABEL_9:
    }
      CFRelease(v5);
  }
  if (v10)
  {
    id v9 = (WebKit *)API::Object::newObject(0x18uLL, 20);
    *(void *)id v9 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2(v9);
    *(void *)id v9 = &unk_1EE9B3F70;
    *((void *)v9 + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v10;
    *a3 = v9;
    return;
  }
LABEL_12:
  *a3 = 0;
}

void sub_198B21F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10)
{
  WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v10);
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(a10);
  }
  _Unwind_Resume(a1);
}

void sub_198B22504(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t readOnlyAccessPaths(void)
{
  if (byte_1EB359784 == 1) {
    return qword_1EB3597B0;
  }
  uint64_t result = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:2];
  qword_1EB3597B0 = result;
  byte_1EB359784 = 1;
  return result;
}

void sub_198B22C00(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = 0;
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B23680(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  uint64_t v72 = v68;
  WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(v72, a2);
  WTF::fastFree(v74, v75);
  if (v70) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v69);
  }
  _Block_object_dispose(&a61, 8);
  uint64_t v76 = a67;
  a67 = 0;
  if (v76) {
    WTF::ThreadSafeRefCounted<WTF::Box<WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>::Data,(WTF::DestructionThread)0>::deref(v76);
  }
  _Block_object_dispose(&a68, 8);
  uint64_t v77 = (const void *)STACK[0x208];
  STACK[0x208] = 0;
  if (v77) {
    CFRelease(v77);
  }
  _Block_object_dispose((const void *)(v71 - 208), 8);
  uint64_t v78 = *(const void **)(v71 - 160);
  *(void *)(v71 - 160) = 0;
  if (v78) {
    CFRelease(v78);
  }
  _Block_object_dispose((const void *)(v71 - 152), 8);
  int v79 = *(const void **)(v71 - 104);
  *(void *)(v71 - 104) = 0;
  if (v79) {
    CFRelease(v79);
  }
  _Block_object_dispose((const void *)(v71 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t __Block_byref_object_copy__205(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

void __Block_byref_object_dispose__206(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t __Block_byref_object_copy__209(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

void __Block_byref_object_dispose__210(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t __Block_byref_object_copy__212(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__213(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WTF::Box<WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>::Data,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

void sub_198B239B8(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B23A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B242B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_198B24348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::SharedJSContext::SharedJSContext(API::SharedJSContext *this)
{
  API::sharedContext(void)::sharedContext = 0;
  uint64_t v1 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v2 = &unk_1EE9C2308;
  v2[1] = API::SharedJSContext::releaseContextIfNecessary;
  v2[2] = 0;
  v2[3] = &API::sharedContext(void)::sharedContext;
  uint64_t result = WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)qword_1EB359750, v1);
  qword_1EB359750[0] = (uint64_t)&unk_1EE9B3390;
  qword_1EB359768 = (uint64_t)v2;
  qword_1EB359770 = 0;
  return result;
}

void sub_198B24620(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  id v4 = *(const void **)(v2 + 1864);
  *(void *)(v2 + 1864) = 0;
  if (v4) {
    CFRelease(v4);
  }
  _Unwind_Resume(a1);
}

void API::SharedJSContext::releaseContextIfNecessary(API::SharedJSContext *this)
{
  WTF::MonotonicTime::now(this);
  if (v2 - *((double *)this + 5) >= 10.0)
  {
    BOOL v3 = *(const void **)this;
    *(void *)this = 0;
    if (v3)
    {
      CFRelease(v3);
    }
  }
  else
  {
    WTF::RunLoop::TimerBase::start();
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (API::SharedJSContext::*&)(void),API::SharedJSContext*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  double v2 = (uint64_t (*)(void *))a1[1];
  BOOL v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

BOOL API::validateObject(API *this, objc_object *a2)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 1;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 1;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 1;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 1;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v7 = 0;
    uint64_t v8 = &v7;
    uint64_t v9 = 0x2020000000;
    char v10 = 1;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = ___ZN3APIL14validateObjectEP11objc_object_block_invoke;
    v6[3] = &unk_1E5812108;
    void v6[4] = &v7;
    [(API *)this enumerateObjectsUsingBlock:v6];
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      return 0;
    }
    uint64_t v7 = 0;
    uint64_t v8 = &v7;
    uint64_t v9 = 0x2020000000;
    char v10 = 1;
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = ___ZN3APIL14validateObjectEP11objc_object_block_invoke_2;
    v5[3] = &unk_1E5812130;
    void v5[4] = &v7;
    [(API *)this enumerateKeysAndObjectsUsingBlock:v5];
  }
  BOOL v3 = *((unsigned char *)v8 + 24) != 0;
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_198B24914(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3APIL14validateObjectEP11objc_object_block_invoke(uint64_t a1, API *this, uint64_t a3, unsigned char *a4)
{
  uint64_t result = API::validateObject(this, (objc_object *)this);
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    *a4 = 1;
  }
  return result;
}

uint64_t ___ZN3APIL14validateObjectEP11objc_object_block_invoke_2(uint64_t a1, API *this, API *a3, unsigned char *a4)
{
  uint64_t result = API::validateObject(this, (objc_object *)this);
  if (!result || (uint64_t result = API::validateObject(a3, v8), (result & 1) == 0))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    *a4 = 1;
  }
  return result;
}

uint64_t WTF::ThreadSafeRefCounted<WTF::Box<WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>::Data,(WTF::DestructionThread)0>::deref(uint64_t result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = (WTF *)result;
    atomic_store(1u, (unsigned int *)result);
    std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(result + 8), 0);
    return WTF::fastFree(v1, v2);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ58___WKAttributedStringWebViewCache_retrieveOrCreateWebView_EUb_E3__2vJNS_8CriticalENS_11SynchronousEEE4callES3_S4_(uint64_t a1)
{
  return [*(id *)(a1 + 8) purgeAllWebViews];
}

uint64_t WebKit::RemoteAudioSourceProviderProxy::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v6 + 16) = 1;
  *(void *)(v6 + 8) = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 8), v6);
  *(void *)uint64_t v6 = &unk_1EE9C2380;
  *(void *)(v6 + 24) = a1;
  uint64_t v7 = *a2;
  *a2 = 0;
  *(void *)(v6 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v7;
  *a3 = v6;
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v8 = &unk_1EE9C26D8;
  v8[1] = v6;
  uint64_t v12 = v8;
  WebCore::AudioSourceProviderAVFObjC::setConfigureAudioStorageCallback();
  if (v12) {
    (*(void (**)(void *))(*v12 + 8))(v12);
  }
  uint64_t v9 = *a3;
  atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 1u);
  char v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v10 = &unk_1EE9C2700;
  v10[1] = v9;
  uint64_t v13 = v10;
  WebCore::AudioSourceProviderAVFObjC::setAudioCallback();
  uint64_t result = (uint64_t)v13;
  if (v13) {
    return (*(uint64_t (**)(void *))(*v13 + 8))(v13);
  }
  return result;
}

void WebKit::RemoteAudioSourceProviderProxy::~RemoteAudioSourceProviderProxy(atomic_uchar *volatile **this)
{
  *this = (atomic_uchar *volatile *)&unk_1EE9C2380;
  uint64_t v1 = (unsigned int **)(this + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 4);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v1, v2);
}

{
  unsigned int **v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *this = (atomic_uchar *volatile *)&unk_1EE9C2380;
  double v2 = (unsigned int **)(this + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 4);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, v3);

  WTF::fastFree((WTF *)this, v4);
}

WebKit::RemoteImageDecoderAVFProxy *WebKit::RemoteImageDecoderAVFProxy::RemoteImageDecoderAVFProxy(WebKit::RemoteImageDecoderAVFProxy *this, WebKit::GPUConnectionToWebProcess *a2)
{
  *(void *)this = &unk_1EE9BE378;
  *((void *)this + 1) = 0;
  id v4 = (atomic_uchar *)*((void *)a2 + 2);
  if (v4) {
    id v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  }
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v4;
  *((void *)this + 3) = a2;
  *((void *)this + 4) = 0;
  WTF::MachSendRight::MachSendRight((WebKit::RemoteImageDecoderAVFProxy *)((char *)this + 40), (WebKit::GPUConnectionToWebProcess *)((char *)a2 + 96));
  return this;
}

unsigned int *WebKit::RemoteImageDecoderAVFProxy::createDecoder(uint64_t a1, IPC::SharedBufferReference *this, uint64_t a3, uint64_t *a4)
{
  if (*(void *)this || *((void *)this + 1))
  {
    IPC::SharedBufferReference::unsafeBuffer((unsigned int *)this, (uint64_t *)&v33);
    uint64_t v6 = v33;
  }
  else
  {
    uint64_t v6 = (WebCore::SharedBuffer *)WTF::fastMalloc((WTF *)0x38);
    WebCore::SharedBuffer::SharedBuffer(v6);
  }
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v35, (const WTF::MachSendRight *)(a1 + 40));
  WebCore::ImageDecoderAVFObjC::create();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v35);
  WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v6, v7);
  LOBYTE(v33) = 0;
  char v34 = 0;
  if (!v36) {
    goto LABEL_39;
  }
  uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  uint64_t v9 = (uint64_t *)(a1 + 32);
  char v10 = v36;
  if (v36) {
    atomic_fetch_add((atomic_uint *volatile)v36 + 2, 1u);
  }
  uint64_t v11 = *v9;
  if (*v9
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)(a1 + 32), 0), (uint64_t v11 = *v9) != 0))
  {
    int v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    int v12 = 0;
  }
  unint64_t v13 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                               + ~(IdentifierInternal << 32)) >> 22);
  unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
  int v17 = (uint64_t *)(v11 + 16 * v16);
  uint64_t v18 = *v17;
  if (*v17)
  {
    CFTypeRef v19 = 0;
    int v20 = 1;
    while (v18 != IdentifierInternal)
    {
      if (v18 == -1) {
        CFTypeRef v19 = v17;
      }
      unsigned int v16 = (v16 + v20) & v12;
      int v17 = (uint64_t *)(v11 + 16 * v16);
      uint64_t v18 = *v17;
      ++v20;
      if (!*v17)
      {
        if (v19)
        {
          uint64_t *v19 = 0;
          v19[1] = 0;
          --*(_DWORD *)(*v9 - 16);
          int v17 = v19;
        }
        goto LABEL_17;
      }
    }
    if (v10 && atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(void *)v10 + 8))(v10);
    }
    goto LABEL_32;
  }
LABEL_17:
  uint64_t v21 = (unsigned int *)v17[1];
  uint64_t *v17 = IdentifierInternal;
  v17[1] = (uint64_t)v10;
  if (v21 && atomic_fetch_add((atomic_uint *volatile)v21 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v21 + 2);
    (*(void (**)(unsigned int *))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *v9;
  if (*v9) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v23;
  uint64_t v24 = *v9;
  if (*v9) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (3 * v27 <= 4 * v26) {
LABEL_31:
  }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)(a1 + 32), (uint64_t)v17);
LABEL_32:
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  char v28 = *(atomic_uint **)(a1 + 8);
  if (v28) {
    atomic_fetch_add(v28, 1u);
  }
  long long v29 = (void *)WTF::fastMalloc((WTF *)0x18);
  *long long v29 = &unk_1EE9C2728;
  v29[1] = v28;
  uint64_t v29[2] = IdentifierInternal;
  char v32 = v29;
  WebCore::ImageDecoderAVFObjC::setEncodedDataStatusChangeCallback();
  if (v32) {
    (*(void (**)(void *))(*v32 + 8))(v32);
  }
  if (!v34) {
    char v34 = 1;
  }
  size_t v33 = (WebCore::SharedBuffer *)IdentifierInternal;
LABEL_39:
  uint64_t v30 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WebCore::SharedBuffer **))(*(void *)v30 + 16))(v30, &v33);
  (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  uint64_t result = v36;
  int v36 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void WebKit::RemoteImageDecoderAVFProxy::deleteDecoder(void *a1, uint64_t a2)
{
  uint64_t v10 = a2;
  BOOL v3 = a1 + 4;
  if (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1 + 4, &v10))
  {
    id v4 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3, &v10);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::take(v3, v4, &v9);
    uint64_t v5 = v9;
    uint64_t v9 = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = (atomic_uchar *)a1[2];
    if (v6)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v6, a1[3], &v8);
      uint64_t v7 = v8;
      if (v8)
      {
        if (*v3 && *(_DWORD *)(*v3 - 12))
        {
          uint64_t v8 = 0;
LABEL_12:
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v7 + 16));
          return;
        }
        WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure(*(WebKit::GPUProcess **)(v8 + 80));
        uint64_t v7 = v8;
        uint64_t v8 = 0;
        if (v7) {
          goto LABEL_12;
        }
      }
    }
  }
}

uint64_t WebKit::RemoteImageDecoderAVFProxy::setExpectedContentSize(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  double v2 = (uint64_t *)(a1 + 32);
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)(a1 + 32), &v5);
  if (result)
  {
    id v4 = (WebCore::ImageDecoderAVFObjC *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v2, &v5);
    return WebCore::ImageDecoderAVFObjC::setExpectedContentSize(v4);
  }
  return result;
}

WTF *WebKit::RemoteImageDecoderAVFProxy::setData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v20 = a2;
  uint64_t v7 = (uint64_t *)(a1 + 32);
  if (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)(a1 + 32), &v20))
  {
    uint64_t v8 = (WebCore::ImageDecoderAVFObjC *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v7, &v20);
    if (*(void *)a3 || *(void *)(a3 + 8))
    {
      IPC::SharedBufferReference::unsafeBuffer((unsigned int *)a3, (uint64_t *)&v17);
      uint64_t v9 = v17;
    }
    else
    {
      uint64_t v9 = (WebCore::SharedBuffer *)WTF::fastMalloc((WTF *)0x38);
      WebCore::SharedBuffer::SharedBuffer(v9);
    }
    WebCore::ImageDecoderAVFObjC::setData();
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v9, v10);
    uint64_t v11 = WebCore::ImageDecoderAVFObjC::frameCount(v8);
    LOBYTE(v17) = 0;
    char v19 = 0;
    if (v11)
    {
      WebCore::ImageDecoderAVFObjC::frameInfos(v16, v8);
      int v17 = (WTF *)v16[0];
      uint64_t v18 = v16[1];
      char v19 = 1;
    }
    v16[0] = WebCore::ImageDecoderAVFObjC::size(v8);
    BOOL v12 = *((void *)v8 + 5) != 0;
    uint64_t v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, BOOL, WTF **))(*(void *)v13 + 16))(v13, v11, v16, v12, &v17);
  }
  else
  {
    v16[0] = 0;
    LOBYTE(v17) = 0;
    char v19 = 0;
    uint64_t v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void, uint64_t *, void, WTF **))(*(void *)v13 + 16))(v13, 0, v16, 0, &v17);
  }
  uint64_t result = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
  if (v19)
  {
    uint64_t result = v17;
    if (v17)
    {
      int v17 = 0;
      LODWORD(v18) = 0;
      return (WTF *)WTF::fastFree(result, v15);
    }
  }
  return result;
}

WTF::MachSendRight *WebKit::RemoteImageDecoderAVFProxy::createFrameImageAtIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v36 = a2;
  v35[0] = 0;
  v35[64] = 0;
  uint64_t v5 = (uint64_t *)(a1 + 32);
  if (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)(a1 + 32), &v36))
  {
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v5, &v36);
    v25[0] = 1;
    v25[4] = 0;
    BYTE4(v26) = 0;
    WebCore::ImageDecoderAVFObjC::createFrameImageAtIndex();
    WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    WebCore::NativeImage::createTransient();
    CFTypeRef v6 = v28[0];
    v28[0] = 0;
    if (v6) {
      CFRelease(v6);
    }
    if (v34)
    {
      int32x2_t v33 = (int32x2_t)WebCore::NativeImage::size(v34);
      WebCore::NativeImage::colorSpace((uint64_t *)v28, v34);
      CFTypeRef v7 = v28[0];
      v28[0] = 0;
      CFTypeRef cf = v7;
      char v31 = 1;
      MEMORY[0x199738D60](v25, &v33, &cf, 0);
      WebCore::ShareableBitmap::create();
      if (v27)
      {
        uint64_t v9 = v26;
        uint64_t v26 = 0;
        if (v9) {
          CFRelease(v9);
        }
      }
      if (v31)
      {
        CFTypeRef v10 = cf;
        CFTypeRef cf = 0;
        if (v10) {
          CFRelease(v10);
        }
      }
      CFTypeRef v11 = v28[0];
      v28[0] = 0;
      if (v11) {
        CFRelease(v11);
      }
      if (v32)
      {
        WebCore::ShareableBitmap::createGraphicsContext(&v29, v32);
        if (v29)
        {
          v28[0] = 0;
          v28[1] = (CFTypeRef)vcvt_f32_s32(v33);
          WebCore::GraphicsContext::drawNativeImage();
          WebCore::ShareableBitmap::createHandle();
          std::__optional_storage_base<WebCore::ShareableBitmapHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ShareableBitmapHandle,false>>((WTF::MachSendRight *)v35, (uint64_t)v25);
          std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v25);
          uint64_t v12 = v29;
          uint64_t v29 = 0;
          if (v12) {
            (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
          }
        }
        uint64_t v13 = v32;
        char v32 = 0;
        if (v13) {
          WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v13, v8);
        }
      }
      unint64_t v14 = v34;
      char v34 = 0;
      if (v14)
      {
        char v15 = 0;
        uint64_t v16 = *((void *)v14 + 1);
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v16, (unsigned __int8 *)&v15, 1u, memory_order_acquire, memory_order_acquire);
        if (v15) {
          MEMORY[0x19972E8D0](v16);
        }
        uint64_t v17 = *(void *)(v16 + 8);
        int v18 = 1;
        uint64_t v19 = v17 - 1;
        *(void *)(v16 + 8) = v17 - 1;
        if (v17 == 1)
        {
          uint64_t v24 = *(void *)(v16 + 16);
          uint64_t v20 = *(void *)(v16 + 24);
          *(void *)(v16 + 24) = 0;
          BOOL v21 = v24 != 0;
        }
        else
        {
          uint64_t v20 = 0;
          BOOL v21 = 1;
        }
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v16, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
        if (v18 == 1)
        {
          if (v19) {
            goto LABEL_30;
          }
        }
        else
        {
          WTF::Lock::unlockSlow((WTF::Lock *)v16);
          if (v19) {
            goto LABEL_30;
          }
        }
        if (v20) {
          (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
        }
        if (!v21) {
          WTF::fastFree((WTF *)v16, v8);
        }
      }
    }
  }
LABEL_30:
  uint64_t v22 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v22 + 16))(v22, v35);
  (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v35);
}

WebCore::ImageDecoderAVFObjC *WebKit::RemoteImageDecoderAVFProxy::clearFrameBufferCache(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t result = (WebCore::ImageDecoderAVFObjC *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), &v4);
  if (result)
  {
    BOOL v3 = result;
    WebCore::ImageDecoderAVFObjC::frameCount(result);
    return (WebCore::ImageDecoderAVFObjC *)WebCore::ImageDecoderAVFObjC::clearFrameBufferCache(v3);
  }
  return result;
}

WebKit::RemoteMediaSessionHelperProxy *WebKit::RemoteMediaSessionHelperProxy::RemoteMediaSessionHelperProxy(WebKit::RemoteMediaSessionHelperProxy *this, WebKit::GPUConnectionToWebProcess *a2)
{
  *(void *)this = &unk_1EE9C23A8;
  *((void *)this + 1) = 0;
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = &unk_1EE9C2418;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  uint64_t v4 = (atomic_uchar *)*((void *)a2 + 2);
  if (v4) {
    uint64_t v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  }
  *((void *)this + 5) = v4;
  *((void *)this + 6) = a2;
  *((unsigned char *)this + 56) = 0;
  *((unsigned char *)this + 60) = 0;
  WebCore::MediaSessionHelper::sharedHelper((WebCore::MediaSessionHelper *)v4);
  WebCore::MediaSessionHelper::addClient();
  return this;
}

void WebKit::RemoteMediaSessionHelperProxy::~RemoteMediaSessionHelperProxy(WebKit::RemoteMediaSessionHelperProxy *this)
{
  *(void *)this = &unk_1EE9C23A8;
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = &unk_1EE9C2418;
  double v2 = WebKit::RemoteMediaSessionHelperProxy::stopMonitoringWirelessRoutes(this);
  WebCore::MediaSessionHelper::sharedHelper(v2);
  WebCore::MediaSessionHelper::removeClient();
  uint64_t v4 = (atomic_uchar *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v3);
  }
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v3);
  uint64_t v6 = *((void *)this + 1);
  if (v6)
  {
    *(void *)(v6 + 8) = 0;
    CFTypeRef v7 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v7)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v5);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteMediaSessionHelperProxy::~RemoteMediaSessionHelperProxy(this);

  WTF::fastFree(v1, v2);
}

WebCore::MediaSessionHelper *WebKit::RemoteMediaSessionHelperProxy::stopMonitoringWirelessRoutes(WebCore::MediaSessionHelper *this)
{
  if (*((unsigned char *)this + 32))
  {
    *((unsigned char *)this + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
    uint64_t v1 = WebCore::MediaSessionHelper::sharedHelper(this);
    return (WebCore::MediaSessionHelper *)MEMORY[0x1F416F1F8](v1);
  }
  return this;
}

void non-virtual thunk to'WebKit::RemoteMediaSessionHelperProxy::~RemoteMediaSessionHelperProxy(WebKit::RemoteMediaSessionHelperProxy *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteMediaSessionHelperProxy::~RemoteMediaSessionHelperProxy((WebKit::RemoteMediaSessionHelperProxy *)((char *)this - 16));

  WTF::fastFree(v1, v2);
}

WebCore::MediaSessionHelper *WebKit::RemoteMediaSessionHelperProxy::startMonitoringWirelessRoutes(WebCore::MediaSessionHelper *this)
{
  if (!*((unsigned char *)this + 32))
  {
    *((unsigned char *)this + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 1;
    uint64_t v1 = WebCore::MediaSessionHelper::sharedHelper(this);
    return (WebCore::MediaSessionHelper *)MEMORY[0x1F416F210](v1);
  }
  return this;
}

unsigned char *WebKit::RemoteMediaSessionHelperProxy::overridePresentingApplicationPIDIfNeeded(unsigned char *this)
{
  if (this[60])
  {
    uint64_t v1 = this;
    this = (unsigned char *)WebCore::MediaSessionHelper::sharedHelper((WebCore::MediaSessionHelper *)this);
    if (v1[60])
    {
      double v2 = *(uint64_t (**)(void))(*(void *)this + 16);
      return (unsigned char *)v2();
    }
    else
    {
      __break(1u);
    }
  }
  return this;
}

atomic_uchar *WebKit::RemoteMediaSessionHelperProxy::applicationWillEnterForeground(uint64_t a1, char a2)
{
  uint64_t result = *(atomic_uchar **)(a1 + 40);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(void *)(a1 + 48), &v11);
    if (v11)
    {
      uint64_t v5 = *(void *)(v11 + 56);
      uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v6 = 1246;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 66) = (char *)v6 + 16;
      *((void *)v6 + 67) = 512;
      *((void *)v6 + 68) = 0;
      *((void *)v6 + 70) = 0;
      *((void *)v6 + 69) = 0;
      IPC::Encoder::encodeHeader(v6);
      uint64_t v12 = v6;
      IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v6, a2);
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
      uint64_t result = (atomic_uchar *)v12;
      uint64_t v12 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v7);
        uint64_t result = (atomic_uchar *)WTF::fastFree(v9, v10);
      }
      uint64_t v8 = v11;
      uint64_t v11 = 0;
      if (v8) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v8 + 16));
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::RemoteMediaSessionHelperProxy::applicationDidEnterBackground(uint64_t a1, char a2)
{
  uint64_t result = *(atomic_uchar **)(a1 + 40);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(void *)(a1 + 48), &v11);
    if (v11)
    {
      uint64_t v5 = *(void *)(v11 + 56);
      uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v6 = 1244;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 66) = (char *)v6 + 16;
      *((void *)v6 + 67) = 512;
      *((void *)v6 + 68) = 0;
      *((void *)v6 + 70) = 0;
      *((void *)v6 + 69) = 0;
      IPC::Encoder::encodeHeader(v6);
      uint64_t v12 = v6;
      IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v6, a2);
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
      uint64_t result = (atomic_uchar *)v12;
      uint64_t v12 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v7);
        uint64_t result = (atomic_uchar *)WTF::fastFree(v9, v10);
      }
      uint64_t v8 = v11;
      uint64_t v11 = 0;
      if (v8) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v8 + 16));
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::RemoteMediaSessionHelperProxy::applicationWillBecomeInactive(WebKit::RemoteMediaSessionHelperProxy *this)
{
  uint64_t result = (atomic_uchar *)*((void *)this + 5);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((void *)this + 6), &v9);
    if (v9)
    {
      uint64_t v3 = *(void *)(v9 + 56);
      uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v4 = 1245;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 66) = (char *)v4 + 16;
      *((void *)v4 + 67) = 512;
      *((void *)v4 + 68) = 0;
      *((void *)v4 + 70) = 0;
      *((void *)v4 + 69) = 0;
      IPC::Encoder::encodeHeader(v4);
      CFTypeRef v10 = v4;
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v10, 0, 0);
      uint64_t result = (atomic_uchar *)v10;
      CFTypeRef v10 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v5);
        uint64_t result = (atomic_uchar *)WTF::fastFree(v7, v8);
      }
      uint64_t v6 = v9;
      uint64_t v9 = 0;
      if (v6) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v6 + 16));
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::RemoteMediaSessionHelperProxy::applicationDidBecomeActive(WebKit::RemoteMediaSessionHelperProxy *this)
{
  uint64_t result = (atomic_uchar *)*((void *)this + 5);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((void *)this + 6), &v9);
    if (v9)
    {
      uint64_t v3 = *(void *)(v9 + 56);
      uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v4 = 1243;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 66) = (char *)v4 + 16;
      *((void *)v4 + 67) = 512;
      *((void *)v4 + 68) = 0;
      *((void *)v4 + 70) = 0;
      *((void *)v4 + 69) = 0;
      IPC::Encoder::encodeHeader(v4);
      CFTypeRef v10 = v4;
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v10, 0, 0);
      uint64_t result = (atomic_uchar *)v10;
      CFTypeRef v10 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v5);
        uint64_t result = (atomic_uchar *)WTF::fastFree(v7, v8);
      }
      uint64_t v6 = v9;
      uint64_t v9 = 0;
      if (v6) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v6 + 16));
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaSessionHelperProxy::externalOutputDeviceAvailableDidChange(uint64_t a1, char a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)result, *(void *)(a1 + 48), &v13);
    if (v13)
    {
      uint64_t v5 = *(void *)(v13 + 56);
      uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v6 = 1247;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 66) = (char *)v6 + 16;
      *((void *)v6 + 67) = 512;
      *((void *)v6 + 68) = 0;
      *((void *)v6 + 70) = 0;
      *((void *)v6 + 69) = 0;
      IPC::Encoder::encodeHeader(v6);
      unint64_t v14 = v6;
      CFTypeRef v7 = (unsigned char *)IPC::Encoder::grow(v6, 1uLL, 1);
      if (v8)
      {
        *CFTypeRef v7 = a2;
        IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v14, 0, 0);
        uint64_t result = (uint64_t)v14;
        unint64_t v14 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
          uint64_t result = WTF::fastFree(v11, v12);
        }
        uint64_t v10 = v13;
        uint64_t v13 = 0;
        if (v10) {
          return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v10 + 16));
        }
      }
      else
      {
        uint64_t result = 831;
        __break(0xC471u);
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaSessionHelperProxy::isPlayingToAutomotiveHeadUnitDidChange(uint64_t a1, char a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)result, *(void *)(a1 + 48), &v13);
    if (v13)
    {
      uint64_t v5 = *(void *)(v13 + 56);
      uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v6 = 1248;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 66) = (char *)v6 + 16;
      *((void *)v6 + 67) = 512;
      *((void *)v6 + 68) = 0;
      *((void *)v6 + 70) = 0;
      *((void *)v6 + 69) = 0;
      IPC::Encoder::encodeHeader(v6);
      unint64_t v14 = v6;
      CFTypeRef v7 = (unsigned char *)IPC::Encoder::grow(v6, 1uLL, 1);
      if (v8)
      {
        *CFTypeRef v7 = a2;
        IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v14, 0, 0);
        uint64_t result = (uint64_t)v14;
        unint64_t v14 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
          uint64_t result = WTF::fastFree(v11, v12);
        }
        uint64_t v10 = v13;
        uint64_t v13 = 0;
        if (v10) {
          return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v10 + 16));
        }
      }
      else
      {
        uint64_t result = 831;
        __break(0xC471u);
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaSessionHelperProxy::activeAudioRouteDidChange(uint64_t a1, char a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)result, *(void *)(a1 + 48), &v13);
    if (v13)
    {
      uint64_t v5 = *(void *)(v13 + 56);
      uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v6 = 1240;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 66) = (char *)v6 + 16;
      *((void *)v6 + 67) = 512;
      *((void *)v6 + 68) = 0;
      *((void *)v6 + 70) = 0;
      *((void *)v6 + 69) = 0;
      IPC::Encoder::encodeHeader(v6);
      unint64_t v14 = v6;
      CFTypeRef v7 = (unsigned char *)IPC::Encoder::grow(v6, 1uLL, 1);
      if (v8)
      {
        *CFTypeRef v7 = a2;
        IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v14, 0, 0);
        uint64_t result = (uint64_t)v14;
        unint64_t v14 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
          uint64_t result = WTF::fastFree(v11, v12);
        }
        uint64_t v10 = v13;
        uint64_t v13 = 0;
        if (v10) {
          return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v10 + 16));
        }
      }
      else
      {
        uint64_t result = 831;
        __break(0xC471u);
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaSessionHelperProxy::activeVideoRouteDidChange(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)result, *(void *)(a1 + 48), &v23);
    if (v23)
    {
      uint64_t v7 = *(void *)(v23 + 56);
      uint64_t v8 = (WebCore::MediaPlaybackTargetContextCocoa *)(*(uint64_t (**)(void))(**(void **)a3 + 24))();
      WebKit::MediaPlaybackTargetContextSerialized::MediaPlaybackTargetContextSerialized((uint64_t)v19, v8);
      uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v9 = 1242;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 66) = (char *)v9 + 16;
      *((void *)v9 + 67) = 512;
      *((void *)v9 + 68) = 0;
      *((void *)v9 + 70) = 0;
      *((void *)v9 + 69) = 0;
      IPC::Encoder::encodeHeader(v9);
      uint64_t v24 = v9;
      uint64_t v10 = (unsigned char *)IPC::Encoder::grow(v9, 1uLL, 1);
      if (v11)
      {
        *uint64_t v10 = a2;
        IPC::ArgumentCoder<WebKit::MediaPlaybackTargetContextSerialized,void>::encode(v9, (uint64_t)v19);
        IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v24, 0, 0);
        uint64_t v13 = v24;
        uint64_t v24 = 0;
        if (v13)
        {
          IPC::Encoder::~Encoder(v13, v12);
          WTF::fastFree(v17, v18);
        }
        unint64_t v14 = v22;
        uint64_t v22 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
        char v15 = v21;
        BOOL v21 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v12);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
        uint64_t result = (uint64_t)v20;
        uint64_t v20 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v12);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        uint64_t v16 = v23;
        uint64_t v23 = 0;
        if (v16) {
          return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v16 + 16));
        }
      }
      else
      {
        uint64_t result = 831;
        __break(0xC471u);
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaSessionHelperProxy::activeAudioRouteSupportsSpatialPlaybackDidChange(uint64_t a1, char a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)result, *(void *)(a1 + 48), &v13);
    if (v13)
    {
      uint64_t v5 = *(void *)(v13 + 56);
      uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v6 = 1241;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 66) = (char *)v6 + 16;
      *((void *)v6 + 67) = 512;
      *((void *)v6 + 68) = 0;
      *((void *)v6 + 70) = 0;
      *((void *)v6 + 69) = 0;
      IPC::Encoder::encodeHeader(v6);
      unint64_t v14 = v6;
      uint64_t v7 = (unsigned char *)IPC::Encoder::grow(v6, 1uLL, 1);
      if (v8)
      {
        *uint64_t v7 = a2;
        IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v14, 0, 0);
        uint64_t result = (uint64_t)v14;
        unint64_t v14 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
          uint64_t result = WTF::fastFree(v11, v12);
        }
        uint64_t v10 = v13;
        uint64_t v13 = 0;
        if (v10) {
          return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v10 + 16));
        }
      }
      else
      {
        uint64_t result = 831;
        __break(0xC471u);
      }
    }
  }
  return result;
}

void WebKit::RemoteMediaRecorder::~RemoteMediaRecorder(WebKit::RemoteMediaRecorder *this)
{
  *(void *)this = &unk_1EE9C2450;
  WebCore::MediaRecorderPrivateWriter::close(*((WebCore::MediaRecorderPrivateWriter **)this + 5));
  WebKit::SharedVideoFrameReader::~SharedVideoFrameReader((WebKit::RemoteMediaRecorder *)((char *)this + 160));
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((WebCore::WebAudioBufferList **)this + 18, 0);
  double v2 = (WebCore::CARingBuffer *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v2) {
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](this + 136, v2);
  }
  if (*((unsigned char *)this + 128)) {
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebKit::RemoteMediaRecorder *)((char *)this + 48));
  }
  uint64_t v3 = (atomic_uchar **)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v3);
  }
  uint64_t v4 = (atomic_uchar *)*((void *)this + 2);
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteMediaRecorder::~RemoteMediaRecorder(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *WebKit::RemoteMediaRecorder::connection(WebKit::RemoteMediaRecorder *this, uint64_t a2)
{
  uint64_t result = *(atomic_uchar **)(a2 + 16);
  if (result
    && (uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(void *)(a2 + 24), &v11), v11))
  {
    char v4 = 0;
    uint64_t v5 = *(atomic_uchar *volatile **)(v11 + 56);
    uint64_t result = *v5;
    int v6 = 1;
    atomic_compare_exchange_strong_explicit(*v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4)
    {
      uint64_t v8 = result;
      uint64_t v9 = v5;
      MEMORY[0x19972E8D0]();
      int v6 = 1;
      uint64_t result = v8;
      uint64_t v5 = v9;
    }
    ++*((void *)result + 1);
    atomic_compare_exchange_strong_explicit(result, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1)
    {
      uint64_t v10 = v5;
      uint64_t result = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)result);
      uint64_t v5 = v10;
    }
    uint64_t v7 = v11;
    *(void *)this = v5;
    uint64_t v11 = 0;
    if (v7) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v7 + 16));
    }
  }
  else
  {
    *(void *)this = 0;
  }
  return result;
}

void WebKit::RemoteMediaRecorder::audioSamplesStorageChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v5 = (WebCore::WebAudioBufferList **)(a1 + 144);
    std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((WebCore::WebAudioBufferList **)(a1 + 144), 0);
    WebKit::ConsumerSharedCARingBuffer::map((WebCore::CAAudioStreamDescription *)a3, (WebCore::CARingBuffer **)buf);
    int v6 = *(WebCore::CARingBuffer **)(a1 + 136);
    uint64_t v7 = *(void *)buf;
    *(void *)long long buf = 0;
    *(void *)(a1 + 136) = v7;
    if (v6)
    {
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](a1 + 136, v6);
      uint64_t v8 = *(WebCore::CARingBuffer **)buf;
      *(void *)long long buf = 0;
      if (v8) {
        std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)buf, v8);
      }
      uint64_t v7 = *(void *)(a1 + 136);
    }
    if (v7)
    {
      uint64_t v9 = a1 + 48;
      if (*(unsigned char *)(a1 + 128))
      {
        long long v10 = *(_OWORD *)(a3 + 8);
        long long v11 = *(_OWORD *)(a3 + 24);
        *(void *)(a1 + 88) = *(void *)(a3 + 40);
        *(_OWORD *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v11;
        *(_OWORD *)(a1 + 56) = v10;
        long long v12 = *(_OWORD *)(a3 + 48);
        *(void *)(a1 + 11WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = *(void *)(a3 + 64);
        *(_OWORD *)(a1 + 96) = v12;
        *(_DWORD *)(a1 + 120) = *(_DWORD *)(a3 + 72);
      }
      else
      {
        *(void *)(a1 + 48) = MEMORY[0x1E4FB6B98] + 16;
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a3 + 8);
        long long v13 = *(_OWORD *)(a3 + 24);
        long long v14 = *(_OWORD *)(a3 + 40);
        long long v15 = *(_OWORD *)(a3 + 56);
        *(_DWORD *)(a1 + 120) = *(_DWORD *)(a3 + 72);
        *(_OWORD *)(a1 + 104) = v15;
        *(_OWORD *)(a1 + 88) = v14;
        *(_OWORD *)(a1 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v13;
        *(unsigned char *)(a1 + 128) = 1;
      }
      uint64_t v16 = (WebCore::WebAudioBufferList *)WTF::fastMalloc((WTF *)0x48);
      MEMORY[0x1997346F0](v16, v9);
      std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100](v5, v16);
    }
  }
  else
  {
    uint64_t v17 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::RemoteMediaRecorder::audioSamplesStorageChanged(ConsumerSharedCARingBuffer::Hand"
                           "le &&, const WebCore::CAAudioStreamDescription &)";
      _os_log_fault_impl(&dword_1985F2000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/webrtc/RemoteMediaRecorder.cpp 81: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    WebKit::RemoteMediaRecorder::connection((WebKit::RemoteMediaRecorder *)&v29, a1);
    int v18 = (atomic_uchar *volatile *)v29;
    if (v29)
    {
      char v19 = 0;
      *(unsigned char *)(v29 + 98) = 1;
      uint64_t v29 = 0;
      atomic_uchar *volatile v20 = *v18;
      atomic_compare_exchange_strong_explicit(*v18, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
      if (v19) {
        MEMORY[0x19972E8D0](v20);
      }
      uint64_t v21 = *((void *)v20 + 1);
      uint64_t v22 = v21 - 1;
      *((void *)v20 + 1) = v21 - 1;
      if (v21 == 1)
      {
        uint64_t v28 = *((void *)v20 + 2);
        uint64_t v24 = *((void *)v20 + 3);
        *((void *)v20 + 3) = 0;
        BOOL v23 = v28 == 0;
      }
      else
      {
        BOOL v23 = 0;
        uint64_t v24 = 0;
      }
      int v25 = 1;
      atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
      if (v25 == 1)
      {
        if (v22) {
          return;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v20);
        if (v22) {
          return;
        }
      }
      uint64_t v26 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v26 = &unk_1EE9B37E8;
      *(void *)(v26 + 8) = v20;
      *(void *)(v26 + 16) = v24;
      *(unsigned char *)(v26 + 24) = v23;
      *(void *)long long buf = v26;
      WTF::ensureOnMainRunLoop();
      uint64_t v27 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
  }
}

void WebKit::ConsumerSharedCARingBuffer::map(WebCore::CAAudioStreamDescription *a1@<X0>, WebCore::CARingBuffer **a2@<X8>)
{
  char v4 = (WebCore::CARingBuffer *)WebCore::CAAudioStreamDescription::bytesPerFrame(a1);
  WebCore::CAAudioStreamDescription::numberOfChannelStreams(a1);

  WebKit::ConsumerSharedCARingBuffer::map(v4, a2);
}

atomic_uchar *WebKit::RemoteMediaRecorder::audioSamplesAvailable(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  buf[3] = *MEMORY[0x1E4F143B8];
  v18[1] = a2;
  uint64_t v18[2] = a3;
  if (!*(void *)(a1 + 136))
  {
    a4 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_13;
    }
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = "void WebKit::RemoteMediaRecorder::audioSamplesAvailable(MediaTime, uint64_t)";
    uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/webrtc/RemoteMediaRecorder.cpp 92: Invali"
         "d message dispatched %{public}s";
    goto LABEL_24;
  }
  if (*(void *)(a1 + 144))
  {
    if (!*(unsigned char *)(a1 + 128) || (WebCore::WebAudioBufferList::isSupportedDescription() & 1) == 0)
    {
      a4 = off_1EB358938;
      if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
        goto LABEL_13;
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = "void WebKit::RemoteMediaRecorder::audioSamplesAvailable(MediaTime, uint64_t)";
      uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/webrtc/RemoteMediaRecorder.cpp 94: Inva"
           "lid message dispatched %{public}s";
      goto LABEL_24;
    }
    WebCore::WebAudioBufferList::setSampleCount(*(WebCore::WebAudioBufferList **)(a1 + 144));
    WebCore::CARingBuffer::fetch();
    if (*(unsigned char *)(a1 + 128)) {
      return (atomic_uchar *)WebCore::MediaRecorderPrivateWriter::appendAudioSampleBuffer();
    }
    __break(1u);
  }
  else
  {
    a4 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_13;
    }
  }
  LODWORD(buf[0]) = 136446210;
  *(void *)((char *)buf + 4) = "void WebKit::RemoteMediaRecorder::audioSamplesAvailable(MediaTime, uint64_t)";
  uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/webrtc/RemoteMediaRecorder.cpp 93: Invalid "
       "message dispatched %{public}s";
LABEL_24:
  _os_log_fault_impl(&dword_1985F2000, a4, OS_LOG_TYPE_FAULT, v7, (uint8_t *)buf, 0xCu);
LABEL_13:
  uint64_t result = WebKit::RemoteMediaRecorder::connection((WebKit::RemoteMediaRecorder *)v18, a1);
  uint64_t v8 = (atomic_uchar *volatile *)v18[0];
  if (!v18[0]) {
    return result;
  }
  char v9 = 0;
  *(unsigned char *)(v18[0] + 98) = 1;
  v18[0] = 0;
  atomic_uchar *volatile v10 = *v8;
  atomic_compare_exchange_strong_explicit(*v8, (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
  if (v9) {
    uint64_t result = (atomic_uchar *)MEMORY[0x19972E8D0](v10);
  }
  uint64_t v11 = *((void *)v10 + 1);
  uint64_t v12 = v11 - 1;
  *((void *)v10 + 1) = v11 - 1;
  if (v11 == 1)
  {
    uint64_t v17 = *((void *)v10 + 2);
    uint64_t v14 = *((void *)v10 + 3);
    *((void *)v10 + 3) = 0;
    BOOL v13 = v17 == 0;
  }
  else
  {
    BOOL v13 = 0;
    uint64_t v14 = 0;
  }
  int v15 = 1;
  atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
  if (v15 == 1)
  {
    if (v12) {
      return result;
    }
  }
  else
  {
    uint64_t result = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v12) {
      return result;
    }
  }
  uint64_t v16 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v16 = &unk_1EE9B37E8;
  *(void *)(v16 + 8) = v10;
  *(void *)(v16 + 16) = v14;
  *(unsigned char *)(v16 + 24) = v13;
  buf[0] = v16;
  WTF::ensureOnMainRunLoop();
  uint64_t result = (atomic_uchar *)buf[0];
  buf[0] = 0;
  if (result) {
    return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 8))(result);
  }
  return result;
}

void WebKit::RemoteMediaRecorder::videoFrameAvailable(uint64_t a1, uint64_t a2)
{
  WebKit::SharedVideoFrameReader::read(a1 + 160, a2, &v5);
  uint64_t v3 = (unsigned int *)v5;
  if (v5)
  {
    WebCore::MediaRecorderPrivateWriter::appendVideoFrame(*(WebCore::MediaRecorderPrivateWriter **)(a1 + 40), v5);
    uint64_t v5 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      char v4 = *(void (**)(unsigned int *))(*(void *)v3 + 8);
      v4(v3);
    }
  }
}

uint64_t WebKit::RemoteMediaRecorder::fetchData(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EE9C2778;
  v3[1] = v2;
  uint64_t v5 = v3;
  WebCore::MediaRecorderPrivateWriter::fetchData();
  uint64_t result = (uint64_t)v5;
  if (v5) {
    return (*(uint64_t (**)(void *))(*v5 + 8))(v5);
  }
  return result;
}

uint64_t WebKit::RemoteMediaRecorder::stopRecording(uint64_t a1, uint64_t *a2)
{
  WebCore::MediaRecorderPrivateWriter::stopRecording(*(WebCore::MediaRecorderPrivateWriter **)(a1 + 40));
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  char v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

uint64_t WebKit::RemoteMediaRecorder::pause(uint64_t a1, uint64_t *a2)
{
  WebCore::MediaRecorderPrivateWriter::pause(*(WebCore::MediaRecorderPrivateWriter **)(a1 + 40));
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  char v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

uint64_t WebKit::RemoteMediaRecorder::resume(uint64_t a1, uint64_t *a2)
{
  WebCore::MediaRecorderPrivateWriter::resume(*(WebCore::MediaRecorderPrivateWriter **)(a1 + 40));
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  char v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

IPC::Semaphore *WebKit::RemoteMediaRecorder::setSharedVideoFrameSemaphore(uint64_t a1, IPC::Semaphore *a2)
{
  return std::optional<IPC::Semaphore>::operator=[abi:sn180100]<IPC::Semaphore,void>((IPC::Semaphore *)(a1 + 176), a2);
}

BOOL WebKit::RemoteMediaRecorder::setSharedVideoFrameMemory(uint64_t a1)
{
  return WebKit::SharedVideoFrameReader::setSharedMemory(a1 + 160);
}

void WebKit::RemoteMediaRecorderManager::~RemoteMediaRecorderManager(WebKit::RemoteMediaRecorderManager *this, void *a2)
{
  *(void *)this = &unk_1EE9C2488;
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (uint64_t *)(v3 + 8);
      do
      {
        if (*(v5 - 1) != -1)
        {
          uint64_t v6 = *v5;
          *uint64_t v5 = 0;
          if (v6) {
            (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v7 = (atomic_uchar *)*((void *)this + 2);
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v7) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v7, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteMediaRecorderManager::~RemoteMediaRecorderManager(this, a2);

  WTF::fastFree(v2, v3);
}

void WebKit::RemoteMediaRecorderManager::didReceiveRemoteMediaRecorderMessage(WebKit::RemoteMediaRecorderManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a3 + 8);
  if ((unint64_t)(v4 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v14 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v15 = 136446210;
      uint64_t v16 = "void WebKit::RemoteMediaRecorderManager::didReceiveRemoteMediaRecorderMessage(IPC::Connection &, IPC::Decoder &)";
      _os_log_fault_impl(&dword_1985F2000, v14, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/webrtc/RemoteMediaRecorderManager.cpp 55: Invalid message dispatched %{public}s", (uint8_t *)&v15, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
  }
  else
  {
    uint64_t v5 = *((void *)this + 4);
    if (v5)
    {
      unsigned int v6 = *(_DWORD *)(v5 - 8);
      unint64_t v7 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
      unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      uint64_t v10 = v6 & ((v9 >> 31) ^ v9);
      uint64_t v11 = *(void *)(v5 + 16 * v10);
      if (v11 == v4)
      {
LABEL_7:
        BOOL v13 = *(WebKit::RemoteMediaRecorder **)(v5 + 16 * v10 + 8);
        if (v13)
        {
          WebKit::RemoteMediaRecorder::didReceiveMessage(v13, (atomic_uchar *volatile *)a2, a3);
        }
      }
      else
      {
        int v12 = 1;
        while (v11)
        {
          uint64_t v10 = (v10 + v12) & v6;
          uint64_t v11 = *(void *)(v5 + 16 * v10);
          ++v12;
          if (v11 == v4) {
            goto LABEL_7;
          }
        }
      }
    }
  }
}

WTF::StringImpl *WebKit::RemoteMediaRecorderManager::createRecorder(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v8 = (atomic_uchar *)a1[2];
  if (!v8)
  {
    uint64_t v50 = 0;
LABEL_3:
    LOBYTE(v47) = 0;
    char v49 = 0;
    goto LABEL_4;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v8, a1[3], &v50);
  int v15 = v50;
  if (!v50) {
    goto LABEL_3;
  }
  WebCore::MediaRecorderPrivateWriter::create();
  if (v47)
  {
    uint64_t v16 = WTF::fastMalloc((WTF *)0xF0);
    uint64_t v17 = v47;
    uint64_t v47 = 0;
    *(void *)uint64_t v16 = &unk_1EE9C2450;
    *(void *)(v16 + 8) = 0;
    int v18 = (atomic_uchar *)v15[2];
    if (v18) {
      int v18 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v18);
    }
    *(void *)(v16 + 16) = v18;
    *(void *)(v16 + 24) = v15;
    *(void *)(v16 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = a2;
    *(void *)(v16 + 40) = v17;
    *(unsigned char *)(v16 + 48) = 0;
    *(unsigned char *)(v16 + 128) = 0;
    *(void *)(v16 + 136) = 0;
    *(void *)(v16 + 144) = 0;
    *(unsigned char *)(v16 + 15WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = a3;
    uint64_t v19 = v15[25];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v19 + 16));
    *(void *)(v16 + 160) = v19;
    WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(v16 + 168), (const WTF::MachSendRight *)(v15 + 12));
    *(unsigned char *)(v16 + 17WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 1;
    *(unsigned char *)(v16 + 176) = 0;
    *(unsigned char *)(v16 + 184) = 0;
    *(void *)(v16 + 23WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
    *(_OWORD *)(v16 + 19WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0u;
    *(_OWORD *)(v16 + 208) = 0u;
    *(_DWORD *)(v16 + 224) = 0;
    atomic_uchar *volatile v20 = (atomic_uchar **)v47;
    uint64_t v47 = 0;
    if (v20) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v20);
    }
    LOBYTE(v47) = 0;
    char v49 = 0;
    uint64_t v21 = *(WTF::StringImpl **)WebCore::MediaRecorderPrivateWriter::mimeType(*(WebCore::MediaRecorderPrivateWriter **)(v16 + 40));
    if (v21) {
      *(_DWORD *)v21 += 2;
    }
    uint64_t v46 = v21;
    uint64_t v22 = WebCore::MediaRecorderPrivateWriter::audioBitRate(*(WebCore::MediaRecorderPrivateWriter **)(v16 + 40));
    uint64_t v23 = WebCore::MediaRecorderPrivateWriter::videoBitRate(*(WebCore::MediaRecorderPrivateWriter **)(v16 + 40));
    uint64_t v24 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **, uint64_t, uint64_t))(*(void *)v24 + 16))(v24, &v47, &v46, v22, v23);
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    uint64_t v26 = v46;
    uint64_t v46 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v25);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v49)
    {
      uint64_t v27 = v48;
      uint64_t v48 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, v25);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
    }
    uint64_t v30 = a1[4];
    uint64_t v29 = a1 + 4;
    uint64_t v28 = v30;
    if (v30
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v29, 0), (uint64_t v28 = *v29) != 0))
    {
      int v31 = *(_DWORD *)(v28 - 8);
    }
    else
    {
      int v31 = 0;
    }
    unint64_t v32 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
    unint64_t v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
    unsigned int v35 = v31 & ((v34 >> 31) ^ v34);
    uint64_t v36 = (uint64_t *)(v28 + 16 * v35);
    uint64_t v37 = *v36;
    if (*v36)
    {
      int v38 = 0;
      int v39 = 1;
      do
      {
        if (v37 == a2)
        {
          uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 8))(v16);
          goto LABEL_13;
        }
        if (v37 == -1) {
          int v38 = v36;
        }
        unsigned int v35 = (v35 + v39) & v31;
        uint64_t v36 = (uint64_t *)(v28 + 16 * v35);
        uint64_t v37 = *v36;
        ++v39;
      }
      while (*v36);
      if (v38)
      {
        *int v38 = 0;
        v38[1] = 0;
        --*(_DWORD *)(*v29 - 16);
        uint64_t v36 = v38;
      }
    }
    uint64_t result = (WTF::StringImpl *)v36[1];
    *uint64_t v36 = a2;
    v36[1] = v16;
    if (result) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
    uint64_t v40 = *v29;
    if (*v29) {
      int v41 = *(_DWORD *)(v40 - 12) + 1;
    }
    else {
      int v41 = 1;
    }
    *(_DWORD *)(v40 - 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v41;
    uint64_t v42 = *v29;
    if (*v29) {
      int v43 = *(_DWORD *)(v42 - 12);
    }
    else {
      int v43 = 0;
    }
    uint64_t v44 = (*(_DWORD *)(v42 - 16) + v43);
    unint64_t v45 = *(unsigned int *)(v42 - 4);
    if (v45 > 0x400)
    {
      if (v45 > 2 * v44) {
        goto LABEL_13;
      }
    }
    else if (3 * v45 > 4 * v44)
    {
      goto LABEL_13;
    }
    uint64_t result = (WTF::StringImpl *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v29, v36);
    goto LABEL_13;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v47 = 6;
  char v49 = 1;
LABEL_4:
  uint64_t v46 = 0;
  uint64_t v9 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **, void, void))(*(void *)v9 + 16))(v9, &v47, &v46, 0, 0);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  uint64_t result = v46;
  uint64_t v46 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v49)
  {
    uint64_t result = v48;
    uint64_t v48 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_13:
  int v12 = v50;
  uint64_t v50 = 0;
  if (v12) {
    return (WTF::StringImpl *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>((atomic_uchar *)v12[2]);
  }
  return result;
}

void WebKit::RemoteMediaRecorderManager::releaseRecorder(void *a1, uint64_t a2)
{
  uint64_t v10 = a2;
  uint64_t v3 = a1 + 4;
  uint64_t v4 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 4, &v10);
  uint64_t v5 = a1[4];
  if (v5)
  {
    unsigned int v6 = (void *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == v4) {
      goto LABEL_9;
    }
  }
  else
  {
    if (!v4) {
      goto LABEL_10;
    }
    unsigned int v6 = 0;
  }
  if (v6 != v4)
  {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, v4);
    uint64_t v5 = *v3;
  }
  if (v5)
  {
LABEL_9:
    if (*(_DWORD *)(v5 - 12)) {
      return;
    }
  }
LABEL_10:
  unint64_t v7 = (atomic_uchar *)a1[2];
  if (v7)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v7, a1[3], &v9);
    if (v9)
    {
      WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure(*(WebKit::GPUProcess **)(v9 + 80));
      uint64_t v8 = v9;
      uint64_t v9 = 0;
      if (v8) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v8 + 16));
      }
    }
  }
}

uint64_t *WebKit::RemoteSampleBufferDisplayLayer::setLogIdentifier(uint64_t a1, uint64_t *a2)
{
  return WTF::String::operator=((uint64_t *)(*(void *)(a1 + 80) + 160), a2);
}

void WebKit::RemoteSampleBufferDisplayLayer::~RemoteSampleBufferDisplayLayer(WebKit::RemoteSampleBufferDisplayLayer *this)
{
  *(void *)this = &unk_1EE9C24C0;
  *((void *)this + 3) = &unk_1EE9C2518;
  *((void *)this + 5) = &unk_1EE9C2550;
  WebKit::SharedVideoFrameReader::~SharedVideoFrameReader((WebKit::RemoteSampleBufferDisplayLayer *)((char *)this + 96));
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)this + 11, 0);
  uint64_t v2 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(atomic_uchar **)(v2 + 8));
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)this + 9);
  uint64_t v4 = (atomic_uchar *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v3);
  }
  *((void *)this + 3) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 4, v3);
  uint64_t v6 = *((void *)this + 1);
  if (v6)
  {
    *(void *)(v6 + 8) = 0;
    unint64_t v7 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v7)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v5);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteSampleBufferDisplayLayer::~RemoteSampleBufferDisplayLayer(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::RemoteSampleBufferDisplayLayer::~RemoteSampleBufferDisplayLayer(WebKit::RemoteSampleBufferDisplayLayer *this)
{
}

{
  WebKit::RemoteSampleBufferDisplayLayer::~RemoteSampleBufferDisplayLayer((WebKit::RemoteSampleBufferDisplayLayer *)((char *)this - 40));
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteSampleBufferDisplayLayer::~RemoteSampleBufferDisplayLayer((WebKit::RemoteSampleBufferDisplayLayer *)((char *)this - 24));

  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteSampleBufferDisplayLayer::~RemoteSampleBufferDisplayLayer((WebKit::RemoteSampleBufferDisplayLayer *)((char *)this - 40));

  WTF::fastFree(v1, v2);
}

void WebKit::RemoteSampleBufferDisplayLayer::updateBoundsAndPosition(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 4) && *(_DWORD *)a2) {
    objc_msgSend(*(id *)(*(void *)(a1 + 88) + 8), "setFencePort:");
  }
  WebCore::LocalSampleBufferDisplayLayer::updateBoundsAndPosition();
}

void WebKit::RemoteSampleBufferDisplayLayer::enqueueVideoFrame(uint64_t a1, uint64_t a2)
{
  WebKit::SharedVideoFrameReader::read(a1 + 96, a2, &v5);
  uint64_t v3 = (unsigned int *)v5;
  if (v5)
  {
    WebCore::LocalSampleBufferDisplayLayer::enqueueVideoFrame(*(WebCore::LocalSampleBufferDisplayLayer **)(a1 + 80), v5);
    uint64_t v5 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      uint64_t v4 = *(void (**)(unsigned int *))(*(void *)v3 + 8);
      v4(v3);
    }
  }
}

uint64_t WebKit::RemoteSampleBufferDisplayLayer::messageSenderConnection(WebKit::RemoteSampleBufferDisplayLayer *this)
{
  return *((void *)this + 9);
}

uint64_t non-virtual thunk to'WebKit::RemoteSampleBufferDisplayLayer::messageSenderConnection(WebKit::RemoteSampleBufferDisplayLayer *this)
{
  return *((void *)this + 4);
}

IPC::Encoder *WebKit::RemoteSampleBufferDisplayLayer::sampleBufferDisplayLayerStatusDidFail(WebCore::LocalSampleBufferDisplayLayer **this)
{
  uint64_t v1 = this;
  char v9 = WebCore::LocalSampleBufferDisplayLayer::didFail(this[10]);
  uint64_t v2 = v1[5];
  v1 += 5;
  uint64_t v3 = (*((uint64_t (**)(WebCore::LocalSampleBufferDisplayLayer **))v2 + 7))(v1);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1453;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v4, &v9);
  (*((void (**)(WebCore::LocalSampleBufferDisplayLayer **, IPC::Encoder **, void))*v1 + 4))(v1, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::RemoteSampleBufferDisplayLayer::setShouldMaintainAspectRatio(WebKit::RemoteSampleBufferDisplayLayer *this)
{
  return MEMORY[0x1F4171C88](*((void *)this + 10));
}

void WebKit::RemoteSampleBufferDisplayLayerManager::~RemoteSampleBufferDisplayLayerManager(WebKit::RemoteSampleBufferDisplayLayerManager *this, void *a2)
{
  uint64_t v3 = *((void *)this + 8);
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)this + 5);
  uint64_t v6 = (atomic_uchar *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v5);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteSampleBufferDisplayLayerManager::~RemoteSampleBufferDisplayLayerManager(this, a2);

  WTF::fastFree(v2, v3);
}

atomic_uchar *WebKit::RemoteSampleBufferDisplayLayerManager::close(WebKit::RemoteSampleBufferDisplayLayerManager *this)
{
  uint64_t result = (atomic_uchar *)*((void *)this + 3);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((void *)this + 4), &v7);
    if (v7)
    {
      IPC::Connection::removeWorkQueueMessageReceiver(*(void *)(v7 + 56), 0x77u, 0);
      IPC::Connection::removeWorkQueueMessageReceiver(*(void *)(v7 + 56), 0x78u, 0);
      uint64_t v3 = *((void *)this + 6);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)this + 2);
      uint64_t v4 = (atomic_uchar *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v4 = &unk_1EE9C27C8;
      *((void *)v4 + 1) = this;
      *((void *)v4 + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = this;
      uint64_t v6 = v4;
      (*(void (**)(uint64_t, atomic_uchar **))(*(void *)v3 + 32))(v3, &v6);
      uint64_t result = v6;
      uint64_t v6 = 0;
      if (result) {
        uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 8))(result);
      }
      uint64_t v5 = v7;
      uint64_t v7 = 0;
      if (v5) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v5 + 16));
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteSampleBufferDisplayLayerManager::dispatchMessage(WebKit::RemoteSampleBufferDisplayLayerManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3 = *((void *)a3 + 8);
  if (!v3) {
    return v3 != 0;
  }
  uint64_t v12 = *((void *)a3 + 8);
  if (v3 != -1)
  {
    char v7 = 0;
    uint64_t v8 = (char *)this + 56;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 56, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      MEMORY[0x19972E8D0]((char *)this + 56);
    }
    char v9 = (WebKit::RemoteSampleBufferDisplayLayer *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 8, &v12);
    if (v9) {
      WebKit::RemoteSampleBufferDisplayLayer::didReceiveMessage(v9, a2, a3);
    }
    int v10 = 1;
    atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v8);
    }
    return v3 != 0;
  }
  uint64_t result = 151;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::RemoteSampleBufferDisplayLayerManager::createLayer(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t *a7)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v14 = *a7;
  *a7 = 0;
  uint64_t v15 = WTF::fastMalloc((WTF *)0x38);
  *(void *)uint64_t v15 = &unk_1EE9C2818;
  *(void *)(v15 + 8) = a1;
  *(void *)(v15 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  *(unsigned char *)(v15 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = a3;
  *(void *)(v15 + 36) = a4;
  *(unsigned char *)(v15 + 44) = a5;
  *(unsigned char *)(v15 + 45) = a6;
  *(void *)(v15 + 48) = v14;
  uint64_t v17 = v15;
  WTF::callOnMainRunLoop();
  uint64_t result = v17;
  if (v17) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  return result;
}

uint64_t WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer(uint64_t a1, uint64_t a2)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v4 = &unk_1EE9C2890;
  v4[1] = a1;
  void v4[2] = a1;
  v4[3] = a2;
  uint64_t v6 = v4;
  WTF::callOnMainRunLoop();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
  }
  return result;
}

BOOL WebKit::RemoteSampleBufferDisplayLayerManager::allowsExitUnderMemoryPressure(atomic_uchar *this)
{
  char v2 = 0;
  uint64_t v3 = this + 56;
  atomic_compare_exchange_strong_explicit(this + 56, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this + 56);
  }
  uint64_t v4 = *((void *)this + 8);
  int v5 = 1;
  if (v4) {
    BOOL v6 = *(_DWORD *)(v4 - 12) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v6;
}

void WebKit::RemoteSampleBufferDisplayLayerManager::updateSampleBufferDisplayLayerBoundsAndPosition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = 0;
  uint64_t v10 = a2;
  BOOL v6 = (atomic_uchar *)(a1 + 56);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 56), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 56);
  }
  uint64_t v7 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 64), &v10);
  if (v7)
  {
    uint64_t v8 = v7;
    WebCore::FloatRect::operator CGRect();
    WebKit::RemoteSampleBufferDisplayLayer::updateBoundsAndPosition(v8, a3);
  }
  int v9 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
}

void WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::~RemoteAudioMediaStreamTrackRendererInternalUnitManager(WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager *this, void *a2)
{
  *(void *)this = &unk_1EE9C25D8;
  uint64_t v3 = (atomic_uchar *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      BOOL v6 = (uint64_t *)(v4 + 8);
      do
      {
        if (*(v6 - 1) != -1)
        {
          uint64_t v7 = *v6;
          uint64_t *v6 = 0;
          if (v7) {
            (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::~RemoteAudioMediaStreamTrackRendererInternalUnitManager(this, a2);

  WTF::fastFree(v2, v3);
}

atomic_uchar *WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::createUnit(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = *(atomic_uchar **)(a1 + 24);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(void *)(a1 + 32), &v36);
    if (v36)
    {
      uint64_t v7 = *(atomic_uchar *volatile **)(v36 + 56);
      char v8 = *(unsigned char *)(v36 + 160);
      uint64_t v9 = WTF::fastMalloc((WTF *)0xD0);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v37, v7);
      *(void *)(v9 + 24) = 0;
      *(void *)uint64_t v9 = &unk_1EE9C2610;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = &unk_1EE9C2670;
      *(void *)(v9 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = &unk_1EE9C26A8;
      *(void *)(v9 + 40) = a2;
      uint64_t v10 = v37;
      uint64_t v37 = 0;
      *(void *)(v9 + 48) = v10;
      MEMORY[0x199739E00]();
      *(_OWORD *)(v9 + 64) = 0u;
      *(_OWORD *)(v9 + 80) = 0u;
      uint64_t v11 = (WebCore::AudioSession *)semaphore_create(*MEMORY[0x1E4F14960], (semaphore_t *)(v9 + 92), 0, 0);
      *(void *)(v9 + 96) = 0;
      *(unsigned char *)(v9 + 104) = 0;
      *(unsigned char *)(v9 + 11WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
      *(unsigned char *)(v9 + 19WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
      *(unsigned char *)(v9 + 200) = v8;
      *(unsigned char *)(v9 + 201) = 1;
      uint64_t v12 = WebCore::AudioSession::sharedSession(v11);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 208))(v12, v9 + 16);
      uint64_t v13 = *(void *)(v9 + 56);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v9 + 24), v9 + 16);
      uint64_t v14 = *(atomic_uint **)(v9 + 24);
      if (v14) {
        atomic_fetch_add(v14, 1u);
      }
      uint64_t v15 = (uint64_t *)(a1 + 16);
      uint64_t v16 = *a3;
      *a3 = 0;
      uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x20);
      void *v17 = &unk_1EE9C2908;
      v17[1] = v14;
      v17[2] = v9;
      void v17[3] = v16;
      int v38 = v17;
      (*(void (**)(uint64_t, void **))(*(void *)v13 + 32))(v13, &v38);
      int v18 = v38;
      int v38 = 0;
      if (v18) {
        (*(void (**)(void *))(*v18 + 8))(v18);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v37);
      uint64_t v19 = *v15;
      if (*v15
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v15, 0), (uint64_t v19 = *v15) != 0))
      {
        int v20 = *(_DWORD *)(v19 - 8);
      }
      else
      {
        int v20 = 0;
      }
      unint64_t v21 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      unint64_t v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
      unint64_t v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
      unsigned int v24 = v20 & ((v23 >> 31) ^ v23);
      int v25 = (uint64_t *)(v19 + 16 * v24);
      uint64_t v26 = *v25;
      if (*v25)
      {
        uint64_t v27 = 0;
        int v28 = 1;
        do
        {
          if (v26 == a2)
          {
            uint64_t result = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
            goto LABEL_31;
          }
          if (v26 == -1) {
            uint64_t v27 = v25;
          }
          unsigned int v24 = (v24 + v28) & v20;
          int v25 = (uint64_t *)(v19 + 16 * v24);
          uint64_t v26 = *v25;
          ++v28;
        }
        while (*v25);
        if (v27)
        {
          *uint64_t v27 = 0;
          v27[1] = 0;
          --*(_DWORD *)(*v15 - 16);
          int v25 = v27;
        }
      }
      uint64_t result = (atomic_uchar *)v25[1];
      *int v25 = a2;
      v25[1] = v9;
      if (result) {
        uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 8))(result);
      }
      uint64_t v29 = *v15;
      if (*v15) {
        int v30 = *(_DWORD *)(v29 - 12) + 1;
      }
      else {
        int v30 = 1;
      }
      *(_DWORD *)(v29 - 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v30;
      uint64_t v31 = *v15;
      if (*v15) {
        int v32 = *(_DWORD *)(v31 - 12);
      }
      else {
        int v32 = 0;
      }
      uint64_t v33 = (*(_DWORD *)(v31 - 16) + v32);
      unint64_t v34 = *(unsigned int *)(v31 - 4);
      if (v34 > 0x400)
      {
        if (v34 > 2 * v33)
        {
LABEL_31:
          uint64_t v35 = v36;
          uint64_t v36 = 0;
          if (v35) {
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v35 + 16));
          }
          return result;
        }
      }
      else if (3 * v34 > 4 * v33)
      {
        goto LABEL_31;
      }
      uint64_t result = (atomic_uchar *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v15, v25);
      goto LABEL_31;
    }
  }
  return result;
}

void WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::deleteUnit(uint64_t *a1, uint64_t a2)
{
  uint64_t v10 = a2;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 2, &v10);
  uint64_t v5 = a1[2];
  if (v5)
  {
    BOOL v6 = (void *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == v4) {
      return;
    }
  }
  else
  {
    if (!v4) {
      return;
    }
    BOOL v6 = 0;
  }
  if (v6 != v4)
  {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, v4);
    uint64_t v5 = *v3;
  }
  if (!v5 || !*(_DWORD *)(v5 - 12))
  {
    uint64_t v7 = (atomic_uchar *)a1[3];
    if (v7)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v7, a1[4], &v9);
      if (v9)
      {
        WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure(*(WebKit::GPUProcess **)(v9 + 80));
        uint64_t v8 = v9;
        uint64_t v9 = 0;
        if (v8) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v8 + 16));
        }
      }
    }
  }
}

void WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::startUnit(uint64_t a1, uint64_t a2, uint64_t a3, IPC::Semaphore *a4)
{
  uint64_t v14 = a2;
  uint64_t v5 = (WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 16), &v14);
  if (v5)
  {
    BOOL v6 = v5;
    if (*((unsigned char *)v5 + 104)) {
      WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::stop(v5);
    }
    if (*((unsigned char *)v6 + 192))
    {
      WebKit::ConsumerSharedCARingBuffer::map((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)v6 + 112), &v15);
      uint64_t v7 = (WebCore::CARingBuffer *)*((void *)v6 + 12);
      uint64_t v8 = v15;
      uint64_t v15 = 0;
      *((void *)v6 + 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v8;
      if (v7)
      {
        std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](v6 + 96, v7);
        uint64_t v9 = v15;
        uint64_t v15 = 0;
        if (v9) {
          std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)&v15, v9);
        }
        uint64_t v8 = (WebCore::CARingBuffer *)*((void *)v6 + 12);
      }
      if (v8)
      {
        *((void *)v6 + 8) = 0;
        *((void *)v6 + 9) = 0;
        *((unsigned char *)v6 + 104) = 1;
        *((unsigned char *)v6 + 201) = 1;
        uint64_t v10 = IPC::Semaphore::operator=((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)v6 + 88), a4);
        if (!*((unsigned char *)v6 + 200)
          || (WebCore::CoreAudioCaptureSourceFactory::singleton(v10),
              uint64_t v11 = (WebCore::CoreAudioCaptureSourceFactory *)WebCore::CoreAudioCaptureSourceFactory::registerSpeakerSamplesProducer(),
              uint64_t v12 = (WebCore::CoreAudioCaptureSourceFactory *)WebCore::CoreAudioCaptureSourceFactory::singleton(v11),
              shouldAudioCaptureUnitRenderAudio = (WebCore::AudioSession *)WebCore::CoreAudioCaptureSourceFactory::shouldAudioCaptureUnitRenderAudio(v12),
              (shouldAudioCaptureUnitRenderAudio & 1) == 0)
          && !*(unsigned char *)(WebCore::AudioSession::sharedSession(shouldAudioCaptureUnitRenderAudio) + 42))
        {
          (*(void (**)(void))(**((void **)v6 + 7) + 16))(*((void *)v6 + 7));
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
}

WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::stopUnit(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t result = (WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 16), &v3);
  if (result) {
    return (WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::stop(result);
  }
  return result;
}

uint64_t WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::stop(WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *this)
{
  *((unsigned char *)this + 104) = 0;
  WebCore::CoreAudioCaptureSourceFactory::singleton(this);
  WebCore::CoreAudioCaptureSourceFactory::unregisterSpeakerSamplesProducer();
  char v2 = *(uint64_t (**)(void))(**((void **)this + 7) + 24);

  return v2();
}

uint64_t WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::setAudioOutputDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2;
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 16), &v5);
  if (result) {
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(result + 56) + 40))(*(void *)(result + 56), a3);
  }
  return result;
}

atomic_uchar *WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::notifyLastToCaptureAudioChanged(WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager *this)
{
  uint64_t result = (atomic_uchar *)*((void *)this + 3);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((void *)this + 4), &v9);
    if (v9)
    {
      uint64_t result = (atomic_uchar *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 2);
      uint64_t v3 = result;
      uint64_t v5 = v4;
      uint64_t v6 = *((void *)this + 2);
      if (v6) {
        uint64_t v7 = (atomic_uchar *)(v6 + 16 * *(unsigned int *)(v6 - 4));
      }
      else {
        uint64_t v7 = 0;
      }
      if (v7 != result)
      {
        do
        {
          uint64_t result = (atomic_uchar *)WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::setShouldRegisterAsSpeakerSamplesProducer(*((WebCore::CoreAudioCaptureSourceFactory **)v3 + 1), *(unsigned __int8 *)(v9 + 160));
          while (1)
          {
            v3 += 16;
            if (v3 == v5) {
              break;
            }
            if ((unint64_t)(*(void *)v3 + 1) > 1) {
              goto LABEL_13;
            }
          }
          uint64_t v3 = v5;
LABEL_13:
          ;
        }
        while (v3 != v7);
      }
      uint64_t v8 = v9;
      uint64_t v9 = 0;
      if (v8) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v8 + 16));
      }
    }
  }
  return result;
}

WebCore::CoreAudioCaptureSourceFactory *WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::setShouldRegisterAsSpeakerSamplesProducer(WebCore::CoreAudioCaptureSourceFactory *this, int a2)
{
  if (*((unsigned __int8 *)this + 200) != a2)
  {
    *((unsigned char *)this + 200) = a2;
    if (*((unsigned char *)this + 104)) {
      BOOL v2 = a2 == 0;
    }
    else {
      BOOL v2 = 1;
    }
    if (!v2)
    {
      WebCore::CoreAudioCaptureSourceFactory::singleton(this);
      return (WebCore::CoreAudioCaptureSourceFactory *)WebCore::CoreAudioCaptureSourceFactory::registerSpeakerSamplesProducer();
    }
  }
  return this;
}

void WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::~RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit(WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *this)
{
  *(void *)this = &unk_1EE9C2610;
  BOOL v2 = (char *)this + 16;
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = &unk_1EE9C2670;
  *((void *)this + 4) = &unk_1EE9C26A8;
  uint64_t v3 = WebCore::AudioSession::sharedSession(this);
  (*(void (**)(uint64_t, char *))(*(void *)v3 + 216))(v3, v2);
  WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::stop(this);
  if (*((unsigned char *)this + 192)) {
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)this + 112));
  }
  uint64_t v4 = (WebCore::CARingBuffer *)*((void *)this + 12);
  *((void *)this + 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v4) {
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](this + 96, v4);
  }
  IPC::Semaphore::destroy((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)this + 88));
  WTF::MachSendRight::~MachSendRight((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)this + 88));
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)this + 6);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v6);
  uint64_t v8 = *((void *)this + 1);
  if (v8)
  {
    *(void *)(v8 + 8) = 0;
    uint64_t v9 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v9)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v7);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::~RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::~RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit(WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *this)
{
}

{
  WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::~RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)this - 32));
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::~RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)this - 16));

  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::~RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)this - 32));

  WTF::fastFree(v1, v2);
}

IPC::Encoder *WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::reset(IPC::Encoder *this)
{
  if (*((unsigned char *)this + 201))
  {
    *((unsigned char *)this + 201) = 0;
    uint64_t v1 = *((void *)this + 6);
    BOOL v2 = (uint64_t *)((char *)this + 40);
    uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v3 = 59;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 66) = (char *)v3 + 16;
    *((void *)v3 + 67) = 512;
    *((void *)v3 + 68) = 0;
    *((void *)v3 + 70) = 0;
    *((void *)v3 + 69) = 0;
    IPC::Encoder::encodeHeader(v3);
    uint64_t v7 = v3;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v3, v2);
    IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
    this = v7;
    uint64_t v7 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v4);
      return (IPC::Encoder *)WTF::fastFree(v5, v6);
    }
  }
  return this;
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::reset(WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *this)
{
  return WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::reset((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)this - 32));
}

uint64_t WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::render(WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *this, unint64_t a2, AudioBufferList *a3, unint64_t a4, double a5, unsigned int *a6)
{
  uint64_t result = WebCore::CARingBuffer::fetchIfHasEnoughData();
  if (result)
  {
    uint64_t v11 = 0;
    *((void *)this + 8) += a2;
  }
  else
  {
    if (!*((unsigned char *)this + 192))
    {
      __break(1u);
      return result;
    }
    unsigned int v12 = WebCore::CAAudioStreamDescription::bytesPerFrame((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)this + 112));
    WebCore::AudioSampleBufferList::zeroABL((WebCore::AudioSampleBufferList *)a3, (AudioBufferList *)(v12 * a2));
    *a6 = 16;
    uint64_t v11 = 0xFFFFFFFFLL;
  }
  for (unint64_t i = *((void *)this + 9); i < a2; i += *((void *)this + 10))
    MEMORY[0x1997420B0](*((unsigned int *)this + 23));
  *((void *)this + 9) = i - a2;
  return v11;
}

uint64_t non-virtual thunk to'WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::render(WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *this, unint64_t a2, AudioBufferList *a3, unint64_t a4, double a5, unsigned int *a6)
{
  return WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::render((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)this - 32), a2, a3, a4, a5, a6);
}

unsigned char *WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::captureUnitIsStarting(unsigned char *this)
{
  if (this[104])
  {
    uint64_t v1 = this;
    BOOL v2 = (WebCore::CoreAudioCaptureSourceFactory *)WebCore::CoreAudioCaptureSourceFactory::singleton((WebCore::CoreAudioCaptureSourceFactory *)this);
    this = (unsigned char *)WebCore::CoreAudioCaptureSourceFactory::shouldAudioCaptureUnitRenderAudio(v2);
    if (this)
    {
      uint64_t v3 = *(uint64_t (**)(void))(**((void **)v1 + 7) + 24);
      return (unsigned char *)v3();
    }
  }
  return this;
}

unsigned char *WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::captureUnitHasStopped(unsigned char *this)
{
  if (this[104])
  {
    uint64_t v1 = this;
    this = (unsigned char *)WebCore::CoreAudioSharedUnit::unit((WebCore::CoreAudioSharedUnit *)this);
    if (!this[36])
    {
      BOOL v2 = *(uint64_t (**)(void))(**((void **)v1 + 7) + 16);
      return (unsigned char *)v2();
    }
  }
  return this;
}

uint64_t WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::beginAudioSessionInterruption(uint64_t this)
{
  if (*(unsigned char *)(this + 104)) {
    return (*(uint64_t (**)(void))(**(void **)(this + 56) + 24))();
  }
  return this;
}

uint64_t non-virtual thunk to'WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::beginAudioSessionInterruption(uint64_t this)
{
  if (*(unsigned char *)(this + 88)) {
    return (*(uint64_t (**)(void))(**(void **)(this + 40) + 24))();
  }
  return this;
}

WebCore::CoreAudioSharedUnit *WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::endAudioSessionInterruption(WebCore::CoreAudioSharedUnit *result)
{
  if (*((unsigned char *)result + 104))
  {
    uint64_t v1 = result;
    if (!*((unsigned char *)result + 200)
      || (uint64_t result = (WebCore::CoreAudioSharedUnit *)WebCore::CoreAudioSharedUnit::unit(result), !*((unsigned char *)result + 441))
      && (uint64_t result = (WebCore::CoreAudioSharedUnit *)WebCore::CoreAudioSharedUnit::unit(result), !*((unsigned char *)result + 36)))
    {
      BOOL v2 = *(uint64_t (**)(void))(**((void **)v1 + 7) + 16);
      return (WebCore::CoreAudioSharedUnit *)v2();
    }
  }
  return result;
}

WebCore::CoreAudioSharedUnit *non-virtual thunk to'WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::endAudioSessionInterruption(uint64_t a1)
{
  return WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::endAudioSessionInterruption((WebCore::CoreAudioSharedUnit *)(a1 - 16));
}

uint64_t WebKit::RemoteSampleBufferDisplayLayer::ref(uint64_t this)
{
  return this;
}

_DWORD *WebKit::RemoteSampleBufferDisplayLayer::deref(_DWORD *this)
{
  if (this[4] == 1) {
    return (_DWORD *)(*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  --this[4];
  return this;
}

uint64_t WebKit::RemoteSampleBufferDisplayLayer::canShowWhileLocked(WebKit::RemoteSampleBufferDisplayLayer *this)
{
  return 0;
}

uint64_t WebKit::RemoteSampleBufferDisplayLayer::messageSenderDestinationID(WebKit::RemoteSampleBufferDisplayLayer *this)
{
  return *((void *)this + 8);
}

uint64_t non-virtual thunk to'WebKit::RemoteSampleBufferDisplayLayer::messageSenderDestinationID(WebKit::RemoteSampleBufferDisplayLayer *this)
{
  return *((void *)this + 3);
}

uint64_t WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::format(uint64_t this)
{
  if (*(unsigned char *)(this + 192)) {
    this += 112;
  }
  else {
    __break(1u);
  }
  return this;
}

uint64_t std::__optional_destruct_base<WebKit::ProducerSharedCARingBuffer::Pair,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 8));
    BOOL v2 = *(WebCore::CARingBuffer **)a1;
    *(void *)a1 = 0;
    if (v2) {
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](a1, v2);
    }
  }
  return a1;
}

void std::__optional_storage_base<WebCore::ShareableBitmapHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ShareableBitmapHandle,false>>(WTF::MachSendRight *a1, uint64_t a2)
{
  if (*((unsigned __int8 *)a1 + 64) == *(unsigned __int8 *)(a2 + 64))
  {
    if (*((unsigned char *)a1 + 64))
    {
      WebCore::ShareableBitmapHandle::operator=((uint64_t)a1, a2);
    }
  }
  else if (*((unsigned char *)a1 + 64))
  {
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::reset[abi:sn180100](a1);
  }
  else
  {
    WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)a1, a2);
    *(unsigned char *)(v2 + 64) = 1;
  }
}

void std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::reset[abi:sn180100](WTF::MachSendRight *this)
{
  if (*((unsigned char *)this + 64))
  {
    if (*((unsigned char *)this + 32))
    {
      uint64_t v2 = (const void *)*((void *)this + 3);
      *((void *)this + 3) = 0;
      if (v2) {
        CFRelease(v2);
      }
    }
    WTF::MachSendRight::~MachSendRight(this);
    *((unsigned char *)this + 64) = 0;
  }
}

WebCore::WebAudioBufferList *std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100](WebCore::WebAudioBufferList **a1, WebCore::WebAudioBufferList *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebCore::WebAudioBufferList::~WebAudioBufferList(result);
    return (WebCore::WebAudioBufferList *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (_DWORD **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (_DWORD *)-1)
      {
        uint64_t v5 = *v4;
        WTF *v4 = 0;
        if (v5)
        {
          if (v5[4] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
          }
          else {
            --v5[4];
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderProxy::create(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WebCore::AudioSourceProviderAVFObjC &)::$_0,std::unique_ptr<WebCore::CARingBuffer,WebKit::RemoteAudioSourceProviderProxy::create(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WebCore::AudioSourceProviderAVFObjC &)::$_0::default_delete<std::unique_ptr>>,WebCore::CAAudioStreamDescription const&,unsigned long>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C26D8;
  a1[1] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 4);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderProxy::create(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WebCore::AudioSourceProviderAVFObjC &)::$_0,std::unique_ptr<WebCore::CARingBuffer,WebKit::RemoteAudioSourceProviderProxy::create(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WebCore::AudioSourceProviderAVFObjC &)::$_0::default_delete<std::unique_ptr>>,WebCore::CAAudioStreamDescription const&,unsigned long>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C26D8;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 4);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderProxy::create(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WebCore::AudioSourceProviderAVFObjC &)::$_0,std::unique_ptr<WebCore::CARingBuffer,WebKit::RemoteAudioSourceProviderProxy::create(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WebCore::AudioSourceProviderAVFObjC &)::$_0::default_delete<std::unique_ptr>>,WebCore::CAAudioStreamDescription const&,unsigned long>::call@<X0>(WebKit::ProducerSharedCARingBuffer *this@<X1>, WebCore::CAAudioStreamDescription *a2@<X2>, uint64_t a3@<X0>, WebCore::CARingBuffer **a4@<X8>)
{
  uint64_t v6 = *(void *)(a3 + 8);
  WebKit::ProducerSharedCARingBuffer::allocate(this, a2, (uint64_t)v20);
  if (v22)
  {
    uint64_t v7 = (WebCore::CARingBuffer *)v20[0];
    v20[0] = 0;
    int v18 = v7;
    WTF::MachSendRight::MachSendRight();
    *(_OWORD *)&v19[8] = v21;
    uint64_t v8 = *(void *)(v6 + 32);
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 726;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    unint64_t v23 = v9;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, (uint64_t *)(v6 + 24));
    IPC::ArgumentCoder<WebKit::ConsumerSharedCARingBufferHandle,void>::encode(v9, (unint64_t)v19);
    uint64_t v10 = WebCore::CAAudioStreamDescription::streamDescription(this);
    IPC::ArgumentCoder<AudioStreamBasicDescription,void>::encode(v9, v10);
    IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v23, 0, 0);
    unsigned int v12 = v23;
    unint64_t v23 = 0;
    if (v12)
    {
      IPC::Encoder::~Encoder(v12, v11);
      WTF::fastFree(v16, v17);
    }
    uint64_t v13 = v18;
    int v18 = 0;
    *a4 = v13;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v19);
    uint64_t v14 = v18;
    int v18 = 0;
    if (v14) {
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)&v18, v14);
    }
    return std::__optional_destruct_base<WebKit::ProducerSharedCARingBuffer::Pair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20);
  }
  else
  {
    uint64_t result = 61;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderProxy::create(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WebCore::AudioSourceProviderAVFObjC &)::$_1,void,unsigned long long,unsigned long long>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C2700;
  a1[1] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 4);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderProxy::create(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WebCore::AudioSourceProviderAVFObjC &)::$_1,void,unsigned long long,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C2700;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 4);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderProxy::create(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WebCore::AudioSourceProviderAVFObjC &)::$_1,void,unsigned long long,unsigned long long>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = (uint64_t *)(v5 + 24);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 725;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v17 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, v7);
  uint64_t v9 = (void *)IPC::Encoder::grow(v8, 8uLL, 8);
  if (v10 <= 7 || (*uint64_t v9 = a2, v11 = (void *)IPC::Encoder::grow(v8, 8uLL, 8), v12 <= 7))
  {
    __break(0xC471u);
    JUMPOUT(0x198B29464);
  }
  void *v11 = a3;
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v17, 0, 0);
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v5 - 4);
    int v8 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v7;
    uint64_t v13 = a3;
    do
    {
      uint64_t v14 = (uint64_t *)(v5 + 16 * v11);
      uint64_t v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          uint64_t v19 = *a1;
          if (*a1) {
            int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            int v20 = 0;
          }
          unint64_t v21 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          unint64_t v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          unint64_t v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          unsigned int v24 = v20 & ((v23 >> 31) ^ v23);
          int v25 = 1;
          do
          {
            unsigned int v26 = v24;
            uint64_t v27 = *(void *)(v19 + 16 * v24);
            unsigned int v24 = (v24 + v25++) & v20;
          }
          while (v27);
          int v28 = (uint64_t *)(v19 + 16 * v26);
          uint64_t v29 = (unsigned int *)v28[1];
          v28[1] = 0;
          if (v29 && atomic_fetch_add((atomic_uint *volatile)v29 + 2, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v29 + 2);
            uint64_t v34 = v13;
            (*(void (**)(unsigned int *))(*(void *)v29 + 8))(v29);
            uint64_t v13 = v34;
          }
          *int v28 = *v14;
          uint64_t v30 = v5 + 16 * v11;
          uint64_t v31 = *(void *)(v30 + 8);
          *(void *)(v30 + 8) = 0;
          v28[1] = v31;
          int v32 = *(unsigned int **)(v30 + 8);
          *(void *)(v30 + 8) = 0;
          if (v32 && atomic_fetch_add((atomic_uint *volatile)v32 + 2, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v32 + 2);
            uint64_t v33 = v13;
            (*(void (**)(unsigned int *))(*(void *)v32 + 8))(v32);
            uint64_t v13 = v33;
          }
        }
        else
        {
          uint64_t v16 = v5 + 16 * v11;
          uint64_t v17 = *(unsigned int **)(v16 + 8);
          *(void *)(v16 + 8) = 0;
          if (v17 && atomic_fetch_add((atomic_uint *volatile)v17 + 2, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v17 + 2);
            uint64_t v18 = v13;
            (*(void (**)(unsigned int *))(*(void *)v17 + 8))(v17);
            uint64_t v13 = v18;
          }
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  else if (!v5)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v5 - 16), v10);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteImageDecoderAVFProxy::createDecoder(IPC::SharedBufferReference const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> &&)> &&)::$_0,void,WebCore::EncodedDataStatus>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C2728;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteImageDecoderAVFProxy::createDecoder(IPC::SharedBufferReference const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> &&)> &&)::$_0,void,WebCore::EncodedDataStatus>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C2728;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteImageDecoderAVFProxy::createDecoder(IPC::SharedBufferReference const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> &&)> &&)::$_0,void,WebCore::EncodedDataStatus>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    uint64_t v2 = *(uint64_t **)(v1 + 8);
    if (v2)
    {
      uint64_t v17 = *(void *)(result + 16);
      uint64_t result = v2[2];
      if (result)
      {
        uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((atomic_uchar *)result, v2[3], &v16);
        if (v16)
        {
          uint64_t v3 = v2 + 4;
          uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v3, &v17);
          if (result)
          {
            int v4 = (WebCore::ImageDecoderAVFObjC *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3, &v17);
            uint64_t v5 = *(void *)(v16 + 56);
            uint64_t v6 = WebCore::ImageDecoderAVFObjC::frameCount(v4);
            uint64_t v15 = WebCore::ImageDecoderAVFObjC::size(v4);
            uint64_t v7 = *((void *)v4 + 5);
            int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)int v8 = 1125;
            *((void *)v8 + 1) = 0;
            *((void *)v8 + 66) = (char *)v8 + 16;
            *((void *)v8 + 67) = 512;
            *((void *)v8 + 68) = 0;
            *((void *)v8 + 70) = 0;
            *((void *)v8 + 69) = 0;
            IPC::Encoder::encodeHeader(v8);
            uint64_t v18 = v8;
            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, &v17);
            IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v8, v6);
            IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v8, (int *)&v15);
            uint64_t v9 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
            if (!v10)
            {
              uint64_t result = 831;
              __break(0xC471u);
              return result;
            }
            *uint64_t v9 = v7 != 0;
            IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v18, 0, 0);
            uint64_t result = (uint64_t)v18;
            uint64_t v18 = 0;
            if (result)
            {
              IPC::Encoder::~Encoder((IPC::Encoder *)result, v11);
              uint64_t result = WTF::fastFree(v13, v14);
            }
          }
          uint64_t v12 = v16;
          uint64_t v16 = 0;
          if (v12) {
            return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v12 + 16));
          }
        }
      }
    }
  }
  return result;
}

BOOL WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = *a2 + ~(*a2 << 32);
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  unsigned int v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  uint64_t v8 = *(void *)(v2 + 16 * v7);
  if (v8 == *a2) {
    return 1;
  }
  int v10 = 1;
  do
  {
    BOOL result = v8 != 0;
    if (!v8) {
      break;
    }
    unsigned int v7 = (v7 + v10) & v3;
    uint64_t v8 = *(void *)(v2 + 16 * v7);
    ++v10;
  }
  while (v8 != *a2);
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  int v3 = (void *)*a1;
  if (*a1) {
    v3 += 2 * *((unsigned int *)v3 - 1);
  }
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  uint64_t v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    unint64_t v5 = (void *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    unint64_t v5 = 0;
  }
  if (v5 != a2) {
    return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(a1, a2);
  }
  return a1;
}

unsigned int *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(uint64_t *a1, void *a2)
{
  BOOL result = (unsigned int *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    BOOL result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(atomic_uchar *this)
{
  uint64_t v1 = this;
  char v2 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = v3 - 1;
  *((void *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    uint64_t v9 = *((void *)v1 + 2);
    uint64_t v6 = *((void *)v1 + 3);
    *((void *)v1 + 3) = 0;
    BOOL v5 = v9 == 0;
  }
  else
  {
    BOOL v5 = 0;
    uint64_t v6 = 0;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 == 1)
  {
    if (v4) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4) {
      return this;
    }
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v8 = &unk_1EE9C2750;
  *(void *)(v8 + 8) = v1;
  *(void *)(v8 + ++*(_DWORD *)(this + 16) = v6;
  *(unsigned char *)(v8 + 24) = v5;
  int v10 = (atomic_uchar *)v8;
  WTF::ensureOnMainThread();
  this = v10;
  if (v10) {
    return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v10 + 8))(v10);
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t v4 = *(WTF **)(a1 + 8);
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    BOOL v5 = (WTF *)MEMORY[0x1997384E0]();
    uint64_t result = WTF::fastFree(v5, v6);
  }
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v7 = v4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    return WTF::fastFree(v4, a2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteMediaRecorder::fetchData(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>,double)> &&)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,double>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C2778;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaRecorder::fetchData(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>,double)> &&)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,double>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C2778;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::RemoteMediaRecorder::fetchData(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>,double)> &&)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,double>::call(uint64_t a1, WebCore::FragmentedSharedBuffer **a2, double a3)
{
  BOOL v5 = *a2;
  if (*a2)
  {
    WebCore::FragmentedSharedBuffer::makeContiguous((uint64_t *)&v12, *a2);
    uint64_t v6 = v12;
    uint64_t v7 = WebCore::SharedBuffer::data(v12);
    uint64_t v8 = *((void *)v6 + 6);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v9 + 16))(v9, v7, v8, a3);
  uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  if (v5)
  {
    uint64_t result = (unsigned int *)v12;
    uint64_t v12 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v11);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          unsigned int v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = v26[1];
          v26[1] = 0;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
          *unsigned int v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
          if (v13 == a3) {
            uint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(void *)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteMediaRecorder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteMediaRecorder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(atomic_uchar *this)
{
  uint64_t v1 = this;
  char v2 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = v3 - 1;
  *((void *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    uint64_t v9 = *((void *)v1 + 2);
    uint64_t v6 = *((void *)v1 + 3);
    *((void *)v1 + 3) = 0;
    BOOL v5 = v9 == 0;
  }
  else
  {
    BOOL v5 = 0;
    uint64_t v6 = 0;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 == 1)
  {
    if (v4) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4) {
      return this;
    }
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v8 = &unk_1EE9C2930;
  *(void *)(v8 + 8) = v1;
  *(void *)(v8 + ++*(_DWORD *)(this + 16) = v6;
  *(unsigned char *)(v8 + 24) = v5;
  int v10 = (atomic_uchar *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10) {
    return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v10 + 8))(v10);
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t v4 = *(WTF **)(a1 + 8);
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    return WTF::fastFree(v4, a2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,BOOL,WTF::CompletionHandler<void ()(std::optional<unsigned int>)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C27A0;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,BOOL,WTF::CompletionHandler<void ()(std::optional<unsigned int>)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C27A0;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,BOOL,WTF::CompletionHandler<void ()(std::optional<unsigned int>)> &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 && *(void *)(v3 + 8) && (a2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    WebKit::LayerHostingContext::createForExternalHostingProcess((unsigned __int8 *)(a1 + 24), (uint64_t *)&v17);
    BOOL v5 = (id *)v17;
    uint64_t v17 = 0;
    std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)(v4 + 88), v5);
    uint64_t v6 = (id *)v17;
    uint64_t v17 = 0;
    if (v6)
    {
      WebKit::LayerHostingContext::~LayerHostingContext(v6);
      WTF::fastFree(v7, v8);
    }
    uint64_t v9 = *(void *)(v4 + 88);
    uint64_t v10 = WebCore::LocalSampleBufferDisplayLayer::rootLayer(*(WebCore::LocalSampleBufferDisplayLayer **)(v4 + 80));
    uint64_t v11 = *(void **)(v9 + 16);
    if (!v11) {
      uint64_t v11 = *(void **)(v9 + 8);
    }
    [v11 setLayer:v10];
    unsigned int v12 = WebKit::LayerHostingContext::contextID(*(WebKit::LayerHostingContext **)(v4 + 88));
    uint64_t v13 = *(void *)(a1 + 32);
    *(void *)(a1 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v12 | 0x100000000);
    return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 32);
    *(void *)(a1 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v15 + 16))(v15, 0);
    uint64_t v16 = *(uint64_t (**)(uint64_t))(*(void *)v15 + 8);
    return v16(v15);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::close(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C27C8;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::close(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C27C8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::close(void)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 56), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x19972E8D0](v2 + 56);
  }
  uint64_t v3 = *(void *)(v2 + 64);
  *(void *)(v2 + 64) = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9C27F0;
  v4[1] = v3;
  int v7 = v4;
  WTF::callOnMainRunLoop();
  uint64_t result = (uint64_t)v7;
  if (v7) {
    uint64_t result = (*(uint64_t (**)(void *))(*v7 + 8))(v7);
  }
  int v6 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 56), (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 56));
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::close(void)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C27F0;
  uint64_t v3 = a1[1];
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::close(void)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C27F0;
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::createLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,WebCore::IntSize,BOOL,BOOL,WTF::CompletionHandler<void ()(std::optional<unsigned int>)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C2818;
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::createLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,WebCore::IntSize,BOOL,BOOL,WTF::CompletionHandler<void ()(std::optional<unsigned int>)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C2818;
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::createLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,WebCore::IntSize,BOOL,BOOL,WTF::CompletionHandler<void ()(std::optional<unsigned int>)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(atomic_uchar **)(v2 + 24);
  if (!v3)
  {
    unint64_t v19 = 0;
LABEL_3:
    uint64_t v4 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
    goto LABEL_4;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v3, *(void *)(v2 + 32), &v19);
  int v7 = v19;
  if (!v19) {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v20, *(atomic_uchar *volatile **)(v2 + 40));
  uint64_t v9 = WTF::fastMalloc((WTF *)0xB0);
  *(_DWORD *)(v9 + ++*(_DWORD *)(this + 16) = 1;
  *(void *)(v9 + 8) = 0;
  *(void *)uint64_t v9 = &unk_1EE9C24C0;
  *(void *)(v9 + 24) = &unk_1EE9C2518;
  *(void *)(v9 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  *(void *)(v9 + 40) = &unk_1EE9C2550;
  uint64_t v10 = (atomic_uchar *)v7[2];
  if (v10) {
    uint64_t v10 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v10);
  }
  *(void *)(v9 + 48) = v10;
  *(void *)(v9 + 56) = v7;
  uint64_t v11 = v20;
  unint64_t v20 = 0;
  *(void *)(v9 + 64) = v8;
  *(void *)(v9 + 7WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v11;
  WebCore::LocalSampleBufferDisplayLayer::create();
  *(void *)(v9 + 88) = 0;
  uint64_t v12 = v7[25];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v12 + 16));
  *(void *)(v9 + 96) = v12;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(v9 + 104), (const WTF::MachSendRight *)(v7 + 12));
  *(unsigned char *)(v9 + 108) = 1;
  *(unsigned char *)(v9 + 11WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  *(unsigned char *)(v9 + 120) = 0;
  *(void *)(v9 + 168) = 0;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_DWORD *)(v9 + 160) = 0;
  if (!*(void *)(v9 + 80))
  {
    if (*(_DWORD *)(v9 + 16) == 1) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    else {
      --*(_DWORD *)(v9 + 16);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v20);
    goto LABEL_3;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v20);
  __int16 v13 = *(unsigned __int8 *)(a1 + 45);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v2 + 16));
  uint64_t v14 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x30);
  void *v16 = &unk_1EE9C2840;
  v16[1] = v2;
  uint64_t v16[2] = v2;
  void v16[3] = v14;
  void v16[4] = v15;
  v16[5] = v9;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v9 + 8), v9);
  uint64_t v17 = *(atomic_uint **)(v9 + 8);
  if (v17) {
    atomic_fetch_add(v17, 1u);
  }
  uint64_t v18 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v18 = &unk_1EE9C27A0;
  *(void *)(v18 + 8) = v9;
  *(void *)(v18 + ++*(_DWORD *)(this + 16) = v17;
  *(_WORD *)(v18 + 24) = v13;
  *(void *)(v18 + 3WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v16;
  unint64_t v20 = (atomic_uchar *volatile *)v18;
  WebCore::LocalSampleBufferDisplayLayer::initialize();
  uint64_t result = (atomic_uchar *)v20;
  unint64_t v20 = 0;
  if (result) {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 8))(result);
  }
LABEL_4:
  int v6 = v19;
  unint64_t v19 = 0;
  if (v6) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>((atomic_uchar *)v6[2]);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit37RemoteSampleBufferDisplayLayerManager11createLayerENS_23ObjectIdentifierGenericINS2_38SampleBufferDisplayLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEbN7WebCore7IntSizeEbbONS_17CompletionHandlerIFvNSt3__18optionalIjEEEEEEN3__0clEvEUlT_E_vJSF_EED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9C2840;
  uint64_t v3 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit37RemoteSampleBufferDisplayLayerManager11createLayerENS_23ObjectIdentifierGenericINS2_38SampleBufferDisplayLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEbN7WebCore7IntSizeEbbONS_17CompletionHandlerIFvNSt3__18optionalIjEEEEEEN3__0clEvEUlT_E_vJSF_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C2840;
  uint64_t v3 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit37RemoteSampleBufferDisplayLayerManager11createLayerENS_23ObjectIdentifierGenericINS2_38SampleBufferDisplayLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEbN7WebCore7IntSizeEbbONS_17CompletionHandlerIFvNSt3__18optionalIjEEEEEEN3__0clEvEUlT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = a2 & 0xFFFFFFFFFFLL;
  long long v7 = *(_OWORD *)(a1 + 8);
  long long v8 = *(_OWORD *)(a1 + 24);
  uint64_t v4 = *(void *)(v7 + 48);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x38);
  *(void *)uint64_t v5 = &unk_1EE9C2868;
  *(_OWORD *)(v5 + 8) = v7;
  *(_OWORD *)(v5 + 24) = v8;
  *(void *)(v5 + 40) = v2;
  *(void *)(v5 + 48) = v3;
  uint64_t v9 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 32))(v4, &v9);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit37RemoteSampleBufferDisplayLayerManager11createLayerENS_23ObjectIdentifierGenericINS2_38SampleBufferDisplayLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEbN7WebCore7IntSizeEbbONS_17CompletionHandlerIFvNSt3__18optionalIjEEEEEEN3__0clEvENUlT_E_clISF_EEDaSK_EUlvE_vJEED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9C2868;
  uint64_t v3 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit37RemoteSampleBufferDisplayLayerManager11createLayerENS_23ObjectIdentifierGenericINS2_38SampleBufferDisplayLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEbN7WebCore7IntSizeEbbONS_17CompletionHandlerIFvNSt3__18optionalIjEEEEEEN3__0clEvENUlT_E_clISF_EEDaSK_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C2868;
  uint64_t v3 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit37RemoteSampleBufferDisplayLayerManager11createLayerENS_23ObjectIdentifierGenericINS2_38SampleBufferDisplayLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEbN7WebCore7IntSizeEbbONS_17CompletionHandlerIFvNSt3__18optionalIjEEEEEEN3__0clEvENUlT_E_clISF_EEDaSK_EUlvE_vJEE4callEv(void *a1)
{
  char v2 = 0;
  uint64_t v3 = a1[1];
  uint64_t v4 = (atomic_uchar *)(v3 + 56);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 56), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](v3 + 56);
  }
  uint64_t v7 = *(void *)(v3 + 64);
  int v6 = (uint64_t *)(v3 + 64);
  uint64_t v5 = v7;
  if (v7
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6),
        (uint64_t v5 = *v6) != 0))
  {
    int v8 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    int v8 = 0;
  }
  uint64_t v9 = a1[4];
  unint64_t v10 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
  unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  uint64_t v14 = (void *)(v5 + 16 * v13);
  uint64_t v15 = *v14;
  if (!*v14)
  {
LABEL_14:
    *uint64_t v14 = v9;
    uint64_t v18 = a1[5];
    a1[5] = 0;
    unint64_t v19 = (_DWORD *)v14[1];
    v14[1] = v18;
    if (v19)
    {
      if (v19[4] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v19 + 8))(v19);
      }
      else {
        --v19[4];
      }
    }
    uint64_t v20 = *v6;
    if (*v6) {
      int v21 = *(_DWORD *)(v20 - 12) + 1;
    }
    else {
      int v21 = 1;
    }
    *(_DWORD *)(v20 - 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v21;
    uint64_t v22 = *v6;
    if (*v6) {
      int v23 = *(_DWORD *)(v22 - 12);
    }
    else {
      int v23 = 0;
    }
    uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
    unint64_t v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24) {
        goto LABEL_27;
      }
    }
    else if (3 * v25 > 4 * v24)
    {
      goto LABEL_27;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6);
    goto LABEL_27;
  }
  uint64_t v16 = 0;
  int v17 = 1;
  while (v15 != v9)
  {
    if (v15 == -1) {
      uint64_t v16 = v14;
    }
    unsigned int v13 = (v13 + v17) & v8;
    uint64_t v14 = (void *)(v5 + 16 * v13);
    uint64_t v15 = *v14;
    ++v17;
    if (!*v14)
    {
      if (v16)
      {
        void *v16 = 0;
        v16[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        uint64_t v9 = a1[4];
        uint64_t v14 = v16;
      }
      goto LABEL_14;
    }
  }
LABEL_27:
  uint64_t v26 = a1[6];
  uint64_t v27 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v26);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 8))(v27);
  int v29 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v29, 0, memory_order_release, memory_order_relaxed);
  if (v29 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      unint64_t v10 = (uint64_t *)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          int v23 = (uint64_t *)(v14 + 16 * v21);
          uint64_t v24 = (_DWORD *)v23[1];
          v23[1] = 0;
          if (v24)
          {
            if (v24[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v24 + 8))(v24);
            }
            else {
              --v24[4];
            }
          }
          *int v23 = *v10;
          uint64_t v25 = v4 + 16 * v9;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          v23[1] = v26;
          unsigned int v13 = *(_DWORD **)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (!v13) {
            goto LABEL_25;
          }
          if (v13[4] == 1)
          {
LABEL_24:
            (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
            goto LABEL_25;
          }
          --v13[4];
        }
        else
        {
          uint64_t v12 = v4 + 16 * v9;
          unsigned int v13 = *(_DWORD **)(v12 + 8);
          *(void *)(v12 + 8) = 0;
          if (v13)
          {
            if (v13[4] == 1) {
              goto LABEL_24;
            }
            --v13[4];
          }
        }
      }
LABEL_25:
      if (++v9 == v5) {
        goto LABEL_28;
      }
    }
  }
  if (v4)
  {
LABEL_28:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C2890;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C2890;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  long long v5 = *(_OWORD *)(a1 + 8);
  uint64_t v2 = *(void *)(v5 + 48);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  uint64_t v3 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v3 = &unk_1EE9C28B8;
  *(_OWORD *)(v3 + 8) = v5;
  *(void *)(v3 + 24) = v1;
  uint64_t v6 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 32))(v2, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C28B8;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C28B8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = (atomic_uchar *)(v3 + 56);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 56), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](v3 + 56);
  }
  uint64_t v7 = *(void *)(v3 + 64);
  uint64_t v6 = (uint64_t *)(v3 + 64);
  uint64_t v5 = v7;
  if (!v7) {
    goto LABEL_11;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  unsigned int v9 = *(_DWORD *)(v5 - 8);
  unint64_t v10 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
  unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  uint64_t v13 = v9 & ((v12 >> 31) ^ v12);
  uint64_t v14 = *(void *)(v5 + 16 * v13);
  if (v14 != v8)
  {
    int v15 = 1;
    while (v14)
    {
      uint64_t v13 = (v13 + v15) & v9;
      uint64_t v14 = *(void *)(v5 + 16 * v13);
      ++v15;
      if (v14 == v8) {
        goto LABEL_10;
      }
    }
    uint64_t v13 = *(unsigned int *)(v5 - 4);
  }
LABEL_10:
  if (v13 != *(_DWORD *)(v5 - 4))
  {
    int v20 = (void *)(v5 + 16 * v13);
    unsigned int v21 = v20 + 1;
    uint64_t v16 = v20[1];
    if (v16 && (*v21 = 0, (uint64_t v5 = *v6) == 0) || (v5 += 16 * *(unsigned int *)(v5 - 4), (void *)v5 != v20))
    {
      if ((void *)v5 != v20)
      {
        void *v20 = -1;
        void *v21 = 0;
        ++*(_DWORD *)(*v6 - 16);
        uint64_t v22 = *v6;
        int v23 = *v6 ? *(_DWORD *)(v22 - 12) - 1 : -1;
        *(_DWORD *)(v22 - 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v23;
        uint64_t v24 = *v6;
        if (*v6)
        {
          unsigned int v25 = 6 * *(_DWORD *)(v24 - 12);
          unsigned int v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9) {
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v6, v26 >> 1);
          }
        }
      }
    }
  }
  else
  {
LABEL_11:
    uint64_t v16 = 0;
  }
  unint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v17 = &unk_1EE9C28E0;
  v17[1] = v16;
  uint64_t v28 = v17;
  WTF::callOnMainRunLoop();
  uint64_t result = (uint64_t)v28;
  if (v28) {
    uint64_t result = (*(uint64_t (**)(void *))(*v28 + 8))(v28);
  }
  int v19 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
  if (v19 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0::operator()(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  char v2 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9C28E0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0::operator()(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C28E0;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          unsigned int v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = v26[1];
          v26[1] = 0;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
          *unsigned int v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
          if (v13 == a3) {
            unint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(void *)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit(WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,BOOL,WTF::CompletionHandler<void ()(std::optional<WebCore::CAAudioStreamDescription>,unsigned long)> &&)::$_0,void,WebCore::CAAudioStreamDescription>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C2908;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit(WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,BOOL,WTF::CompletionHandler<void ()(std::optional<WebCore::CAAudioStreamDescription>,unsigned long)> &&)::$_0,void,WebCore::CAAudioStreamDescription>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C2908;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit(WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,BOOL,WTF::CompletionHandler<void ()(std::optional<WebCore::CAAudioStreamDescription>,unsigned long)> &&)::$_0,void,WebCore::CAAudioStreamDescription>::call(void *a1, WebCore::CAAudioStreamDescription *this)
{
  uint64_t v4 = a1[1];
  if (v4 && *(void *)(v4 + 8) && *((unsigned char *)this + 80))
  {
    uint64_t v5 = a1[2];
    WebCore::CAAudioStreamDescription::sampleRate(this);
    if (!*((unsigned char *)this + 80)) {
      goto LABEL_19;
    }
    unint64_t v7 = (unint64_t)(v6 * 10.0 / 1000.0);
    if (*(unsigned char *)(v5 + 192))
    {
      long long v8 = *(_OWORD *)((char *)this + 8);
      long long v9 = *(_OWORD *)((char *)this + 24);
      *(void *)(v5 + 15WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = *((void *)this + 5);
      *(_OWORD *)(v5 + 136) = v9;
      *(_OWORD *)(v5 + 120) = v8;
      long long v10 = *((_OWORD *)this + 3);
      *(void *)(v5 + 176) = *((void *)this + 8);
      *(_OWORD *)(v5 + 160) = v10;
      *(_DWORD *)(v5 + 184) = *((_DWORD *)this + 18);
    }
    else
    {
      *(void *)(v5 + 11WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = MEMORY[0x1E4FB6B98] + 16;
      *(_OWORD *)(v5 + 120) = *(_OWORD *)((char *)this + 8);
      long long v12 = *(_OWORD *)((char *)this + 24);
      long long v13 = *(_OWORD *)((char *)this + 40);
      long long v14 = *(_OWORD *)((char *)this + 56);
      *(_DWORD *)(v5 + 184) = *((_DWORD *)this + 18);
      *(_OWORD *)(v5 + 168) = v14;
      *(_OWORD *)(v5 + 15WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = v13;
      *(_OWORD *)(v5 + 136) = v12;
      *(unsigned char *)(v5 + 19WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 1;
    }
    uint64_t v15 = v7 <= 0x80 ? 128 : v7;
    *(void *)(v5 + 80) = v15;
    if (*((unsigned char *)this + 80))
    {
      uint64_t v16 = MEMORY[0x1E4FB6B98] + 16;
      long long v18 = *(_OWORD *)((char *)this + 24);
      long long v19 = *(_OWORD *)((char *)this + 40);
      long long v20 = *(_OWORD *)((char *)this + 56);
      int v21 = *((_DWORD *)this + 18);
      long long v17 = *(_OWORD *)((char *)this + 8);
      char v22 = 1;
      WTF::CompletionHandler<void ()(std::optional<WebCore::CAAudioStreamDescription>,unsigned long)>::operator()(a1 + 3, (uint64_t)&v16);
      if (v22) {
        WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v16);
      }
    }
    else
    {
LABEL_19:
      __break(1u);
    }
  }
  else
  {
    if (!*((unsigned char *)this + 80))
    {
      uint64_t v11 = qword_1EB358820;
      if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v++*(_DWORD *)(this + 16) = 0;
        _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit unable to get format description", (uint8_t *)&v16, 2u);
      }
    }
    LOBYTE(v++*(_DWORD *)(this + 16) = 0;
    char v22 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::CAAudioStreamDescription>,unsigned long)>::operator()(a1 + 3, (uint64_t)&v16);
  }
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebCore::CAAudioStreamDescription>,unsigned long)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  LOBYTE(v5) = 0;
  char v11 = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    uint64_t v5 = MEMORY[0x1E4FB6B98] + 16;
    long long v7 = *(_OWORD *)(a2 + 24);
    long long v8 = *(_OWORD *)(a2 + 40);
    long long v9 = *(_OWORD *)(a2 + 56);
    int v10 = *(_DWORD *)(a2 + 72);
    long long v6 = *(_OWORD *)(a2 + 8);
    char v11 = 1;
    uint64_t v12 = MEMORY[0x1E4FB6B98] + 16;
    long long v3 = *(_OWORD *)(a2 + 24);
    long long v15 = *(_OWORD *)(a2 + 40);
    long long v16 = *(_OWORD *)(a2 + 56);
    int v17 = *(_DWORD *)(a2 + 72);
    long long v13 = *(_OWORD *)(a2 + 8);
    long long v14 = v3;
    char v18 = 1;
  }
  else
  {
    LOBYTE(v1WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2) = 0;
    char v18 = 0;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v12);
  if (v18) {
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v12);
  }
  if (v11) {
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

void sub_198B2C5C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B2C7AC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B2C958(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, a2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, a2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  if (a11) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B2CB00(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  int v17 = *(WTF::StringImpl **)(v15 - 56);
  *(void *)(v15 - 56) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, a2);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  char v18 = *(unsigned int **)(v15 - 40);
  *(void *)(v15 - 40) = 0;
  if (v18) {
    WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref(v18, a2);
  }
  long long v19 = *(const void **)(v15 - 48);
  *(void *)(v15 - 48) = 0;
  if (v19) {
    CFRelease(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B2CCE0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, unsigned int *a12)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a12, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B2CEA4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B2D14C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B2D28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B2D840(_Unwind_Exception *exception_object, void *a2)
{
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B2DD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B2DFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  _Block_release(v12);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v14);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v14);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198B2E104(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B2E1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198B2E394(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B2E4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198B2E6D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198B2E9B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B2EB50(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B2EEA0(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_198B2F00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  _Block_release(v10);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

__CFString *localizedDescriptionForErrorCode(WKErrorCode a1, const __CFString *a2)
{
  switch(a1)
  {
    case WKErrorUnknown:
      WebCore::localizedString((uint64_t *)&v6, (WebCore *)@"An unknown error occurred", a2);
      if (!v6) {
        goto LABEL_40;
      }
      goto LABEL_35;
    case WKErrorWebContentProcessTerminated:
      WebCore::localizedString((uint64_t *)&v6, (WebCore *)@"The Web Content process was terminated", a2);
      if (v6) {
        goto LABEL_35;
      }
      goto LABEL_40;
    case WKErrorWebViewInvalidated:
      WebCore::localizedString((uint64_t *)&v6, (WebCore *)@"The WKWebView was invalidated", a2);
      if (v6) {
        goto LABEL_35;
      }
      goto LABEL_40;
    case WKErrorJavaScriptExceptionOccurred:
      WebCore::localizedString((uint64_t *)&v6, (WebCore *)@"A JavaScript exception occurred", a2);
      if (v6) {
        goto LABEL_35;
      }
      goto LABEL_40;
    case WKErrorJavaScriptResultTypeIsUnsupported:
      WebCore::localizedString((uint64_t *)&v6, (WebCore *)@"JavaScript execution returned a result of an unsupported type", a2);
      if (v6) {
        goto LABEL_35;
      }
      goto LABEL_40;
    case WKErrorContentRuleListStoreCompileFailed:
      WebCore::localizedString((uint64_t *)&v6, (WebCore *)@"Compiling a WKContentRuleList failed", a2);
      if (v6) {
        goto LABEL_35;
      }
      goto LABEL_40;
    case WKErrorContentRuleListStoreLookUpFailed:
      WebCore::localizedString((uint64_t *)&v6, (WebCore *)@"Looking up a WKContentRuleList failed", a2);
      if (v6) {
        goto LABEL_35;
      }
      goto LABEL_40;
    case WKErrorContentRuleListStoreRemoveFailed:
      WebCore::localizedString((uint64_t *)&v6, (WebCore *)@"Removing a WKContentRuleList failed", a2);
      if (v6) {
        goto LABEL_35;
      }
      goto LABEL_40;
    case WKErrorContentRuleListStoreVersionMismatch:
      WebCore::localizedString((uint64_t *)&v6, (WebCore *)@"Looking up a WKContentRuleList found a binary that is incompatible", a2);
      if (v6) {
        goto LABEL_35;
      }
      goto LABEL_40;
    case WKErrorAttributedStringContentFailedToLoad:
      WebCore::localizedString((uint64_t *)&v6, (WebCore *)@"Attributed string content failed to load", a2);
      if (v6) {
        goto LABEL_35;
      }
      goto LABEL_40;
    case WKErrorAttributedStringContentLoadTimedOut:
      WebCore::localizedString((uint64_t *)&v6, (WebCore *)@"Timed out while loading attributed string content", a2);
      if (v6) {
        goto LABEL_35;
      }
      goto LABEL_40;
    case WKErrorJavaScriptInvalidFrameTarget:
      WebCore::localizedString((uint64_t *)&v6, (WebCore *)@"JavaScript execution targeted an invalid frame", a2);
      if (v6) {
        goto LABEL_35;
      }
      goto LABEL_40;
    case WKErrorNavigationAppBoundDomain:
      WebCore::localizedString((uint64_t *)&v6, (WebCore *)@"Attempted to navigate away from an app-bound domain or navigate after using restricted APIs", a2);
      if (v6) {
        goto LABEL_35;
      }
      goto LABEL_40;
    case WKErrorJavaScriptAppBoundDomain:
      WebCore::localizedString((uint64_t *)&v6, (WebCore *)@"JavaScript execution targeted a frame that is not in an app-bound domain", a2);
      if (v6) {
        goto LABEL_35;
      }
      goto LABEL_40;
    case WKErrorDuplicateCredential:
      WebCore::localizedString((uint64_t *)&v6, (WebCore *)@"This credential is already present", a2);
      if (v6) {
        goto LABEL_35;
      }
      goto LABEL_40;
    case WKErrorMalformedCredential:
      WebCore::localizedString((uint64_t *)&v6, (WebCore *)@"This credential is malformed", a2);
      if (v6) {
        goto LABEL_35;
      }
      goto LABEL_40;
    case WKErrorCredentialNotFound:
      WebCore::localizedString((uint64_t *)&v6, (WebCore *)@"Credential could not be found", a2);
      if (v6)
      {
LABEL_35:
        uint64_t v2 = (__CFString *)WTF::StringImpl::operator NSString *();
        uint64_t v4 = v6;
        long long v6 = 0;
        if (v4)
        {
          if (*(_DWORD *)v4 == 2) {
            WTF::StringImpl::destroy(v4, v3);
          }
          else {
            *(_DWORD *)v4 -= 2;
          }
        }
      }
      else
      {
LABEL_40:
        uint64_t v2 = &stru_1EEA10550;
      }
      break;
    default:
      return v2;
  }
  return v2;
}

void sub_198B2F384(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t createNSError@<X0>(WKErrorCode a1@<X0>, const __CFString *a2@<X1>, void *a3@<X8>)
{
  uint64_t v16[2] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    v15[0] = *MEMORY[0x1E4F28568];
    long long v6 = localizedDescriptionForErrorCode(a1, a2);
    v15[1] = *MEMORY[0x1E4F28A50];
    v16[0] = v6;
    v16[1] = a2;
    long long v7 = (void *)MEMORY[0x1E4F1C9E8];
    long long v8 = (__CFString **)v16;
    long long v9 = v15;
    uint64_t v10 = 2;
  }
  else
  {
    uint64_t v13 = *MEMORY[0x1E4F28568];
    long long v14 = localizedDescriptionForErrorCode(a1, 0);
    long long v7 = (void *)MEMORY[0x1E4F1C9E8];
    long long v8 = &v14;
    long long v9 = &v13;
    uint64_t v10 = 1;
  }
  uint64_t v11 = [v7 dictionaryWithObjects:v8 forKeys:v9 count:v10];
  uint64_t result = [objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"WKErrorDomain" code:a1 userInfo:v11];
  *a3 = result;
  return result;
}

void didStartProvisionalNavigation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a4 + 32));
  if (objc_opt_respondsToSelector()) {
    [WeakRetained browsingContextControllerDidStartProvisionalLoad:a4];
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B2F750(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didReceiveServerRedirectForProvisionalNavigation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a4 + 32));
  if (objc_opt_respondsToSelector()) {
    [WeakRetained browsingContextControllerDidReceiveServerRedirectForProvisionalLoad:a4];
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B2F7D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didFailProvisionalNavigation(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a5 + 32));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "browsingContextController:didFailProvisionalLoadWithError:", a5, *(void *)(objc_msgSend(a3, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B2F874(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didCommitNavigation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a4 + 32));
  if (objc_opt_respondsToSelector()) {
    [WeakRetained browsingContextControllerDidCommitLoad:a4];
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B2F8F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didFinishNavigation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a4 + 32));
  if (objc_opt_respondsToSelector()) {
    [WeakRetained browsingContextControllerDidFinishLoad:a4];
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B2F97C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didFailNavigation(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a5 + 32));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "browsingContextController:didFailLoadWithError:", a5, *(void *)(objc_msgSend(a3, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B2FA1C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t canAuthenticateAgainstProtectionSpace(uint64_t a1, void *a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a3 + 32));
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    uint64_t v7 = 0;
    if (!WeakRetained) {
      return v7;
    }
LABEL_7:
    CFRelease(WeakRetained);
    return v7;
  }
  if (a2) {
    uint64_t v6 = [a2 _apiObject];
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = [WeakRetained browsingContextController:a3 canAuthenticateAgainstProtectionSpace:WebCore::ProtectionSpace::nsSpace((WebCore::ProtectionSpace *)(v6 + 16))];
  if (WeakRetained) {
    goto LABEL_7;
  }
  return v7;
}

void sub_198B2FAC8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didReceiveAuthenticationChallenge(uint64_t a1, void *a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a3 + 32));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "browsingContextController:didReceiveAuthenticationChallenge:", a3, *(void *)(objc_msgSend(a2, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B2FB68(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void processDidCrash(const OpaqueWKPage *a1, id *a2)
{
  id WeakRetained = objc_loadWeakRetained(a2 + 4);
  if (objc_opt_respondsToSelector()) {
    [WeakRetained browsingContextControllerWebProcessDidCrash:a2];
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198B2FBEC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void setUpPagePolicyClient(WKBrowsingContextController *,WebKit::WebPageProxy &)::$_0::__invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, void *a9, uint64_t a10, uint64_t a11)
{
  v29[6] = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a11 + 40));
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (a9) {
      uint64_t v24 = [a9 _apiObject];
    }
    else {
      uint64_t v24 = 0;
    }
    WebKit::WebFramePolicyListenerProxy::use(v24, 0, 0);
    goto LABEL_22;
  }
  v28[0] = @"WKActionIsMainFrameKey";
  v29[0] = objc_msgSend(NSNumber, "numberWithBool:", *(unsigned __int8 *)(objc_msgSend(a2, "_apiObject") + 441));
  v28[1] = @"WKActionNavigationTypeKey";
  v29[1] = [NSNumber numberWithUnsignedInt:a3];
  CFTypeRef v28[2] = @"WKActionModifierFlagsKey";
  uint64_t v29[2] = [NSNumber numberWithUnsignedInt:a4];
  v28[3] = @"WKActionMouseButtonKey";
  v29[3] = [NSNumber numberWithInt:a5];
  v28[4] = @"WKActionOriginalURLRequestKey";
  if (a7) {
    [a7 _apiObject];
  }
  long long v19 = (const void *)[(id)WebCore::ResourceRequest::nsURLRequest() copy];
  v29[4] = v19;
  v28[5] = @"WKActionURLRequestKey";
  if (a8) {
    [a8 _apiObject];
  }
  long long v20 = (const void *)[(id)WebCore::ResourceRequest::nsURLRequest() copy];
  v29[5] = v20;
  int v21 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v29 forKeys:v28 count:6];
  char v22 = v21;
  if (v21) {
    CFRetain(v21);
  }
  if (!v20)
  {
    if (!v19) {
      goto LABEL_10;
    }
LABEL_18:
    CFRelease(v19);
    if (a6) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
  CFRelease(v20);
  if (v19) {
    goto LABEL_18;
  }
LABEL_10:
  if (a6)
  {
LABEL_11:
    int v23 = (void *)[v22 mutableCopy];
    if (v22) {
      CFRelease(v22);
    }
    [a6 _apiObject];
    [v23 setObject:WTF::URL::operator NSURL *() forKey:@"WKActionOriginatingFrameURLKey"];
    goto LABEL_20;
  }
LABEL_19:
  int v23 = v22;
LABEL_20:
  double PolicyDecisionBlock = makePolicyDecisionBlock(&v27, a9);
  unsigned int v26 = v27;
  objc_msgSend(WeakRetained, "browsingContextController:decidePolicyForNavigationAction:decisionHandler:", a11, v23, v27, PolicyDecisionBlock);
  _Block_release(v26);
  if (v23) {
    CFRelease(v23);
  }
LABEL_22:
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
}

void sub_198B2FEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (v10) {
    CFRelease(v10);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

double makePolicyDecisionBlock(void *a1, void *a2)
{
  if (a2) {
    CFRetain(*(CFTypeRef *)([a2 _apiObject] + 8));
  }
  uint64_t v4 = malloc_type_malloc(0x28uLL, 0x10E0040F6AAF7C3uLL);
  void *v4 = MEMORY[0x1E4F14398];
  *(void *)&double result = 50331650;
  v4[1] = 50331650;
  void v4[2] = WTF::BlockPtr<void ()(WKPolicyDecision)>::fromCallable<makePolicyDecisionBlock(OpaqueWKFramePolicyListener const*)::$_0>(makePolicyDecisionBlock(OpaqueWKFramePolicyListener const*)::$_0)::{lambda(void *,WKPolicyDecision)#1}::__invoke;
  v4[3] = &WTF::BlockPtr<void ()(WKPolicyDecision)>::fromCallable<makePolicyDecisionBlock(OpaqueWKFramePolicyListener const*)::$_0>(makePolicyDecisionBlock(OpaqueWKFramePolicyListener const*)::$_0)::descriptor;
  v4[4] = a2;
  *a1 = v4;
  return result;
}

void sub_198B2FFD4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)([v1 _apiObject] + 8));
  }
  _Unwind_Resume(exception_object);
}

void WTF::BlockPtr<void ()(WKPolicyDecision)>::fromCallable<makePolicyDecisionBlock(OpaqueWKFramePolicyListener const*)::$_0>(makePolicyDecisionBlock(OpaqueWKFramePolicyListener const*)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(const void **)([v1 _apiObject] + 8);
    CFRelease(v2);
  }
}

void WTF::BlockPtr<void ()(WKPolicyDecision)>::fromCallable<makePolicyDecisionBlock(OpaqueWKFramePolicyListener const*)::$_0>(makePolicyDecisionBlock(OpaqueWKFramePolicyListener const*)::$_0)::{lambda(void *,WKPolicyDecision)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  switch(a2)
  {
    case 2:
      long long v3 = *(void **)(a1 + 32);
      if (v3) {
        long long v3 = (void *)[v3 _apiObject];
      }
      WebKit::WebFramePolicyListenerProxy::download((WTF *)v3);
      break;
    case 1:
      uint64_t v4 = *(void **)(a1 + 32);
      if (v4) {
        uint64_t v4 = (void *)[v4 _apiObject];
      }
      WebKit::WebFramePolicyListenerProxy::use((uint64_t)v4, 0, 0);
      break;
    case 0:
      uint64_t v2 = *(void **)(a1 + 32);
      if (v2) {
        uint64_t v2 = (void *)[v2 _apiObject];
      }
      WebKit::WebFramePolicyListenerProxy::ignore((WTF *)v2, 0);
      break;
  }
}

void setUpPagePolicyClient(WKBrowsingContextController *,WebKit::WebPageProxy &)::$_1::__invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10)
{
  v25[6] = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a10 + 40));
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (a8) {
      uint64_t v22 = [a8 _apiObject];
    }
    else {
      uint64_t v22 = 0;
    }
    WebKit::WebFramePolicyListenerProxy::use(v22, 0, 0);
    if (!WeakRetained) {
      return;
    }
LABEL_11:
    CFRelease(WeakRetained);
    return;
  }
  v24[0] = @"WKActionIsMainFrameKey";
  v25[0] = objc_msgSend(NSNumber, "numberWithBool:", *(unsigned __int8 *)(objc_msgSend(a2, "_apiObject") + 441));
  v24[1] = @"WKActionNavigationTypeKey";
  v25[1] = [NSNumber numberWithUnsignedInt:a3];
  v24[2] = @"WKActionModifierFlagsKey";
  v25[2] = [NSNumber numberWithUnsignedInt:a4];
  v24[3] = @"WKActionMouseButtonKey";
  v25[3] = [NSNumber numberWithInt:a5];
  v24[4] = @"WKActionURLRequestKey";
  if (a6) {
    [a6 _apiObject];
  }
  char v18 = (const void *)[(id)WebCore::ResourceRequest::nsURLRequest() copy];
  v25[4] = v18;
  v24[5] = @"WKActionFrameNameKey";
  v25[5] = *(void *)([a7 _apiObject] + 8);
  uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:v24 count:6];
  if (v18) {
    CFRelease(v18);
  }
  double PolicyDecisionBlock = makePolicyDecisionBlock(&v23, a8);
  int v21 = v23;
  objc_msgSend(WeakRetained, "browsingContextController:decidePolicyForNewWindowAction:decisionHandler:", a10, v19, v23, PolicyDecisionBlock);
  _Block_release(v21);
  if (WeakRetained) {
    goto LABEL_11;
  }
}

void sub_198B302E4(_Unwind_Exception *a1)
{
  _Block_release(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void setUpPagePolicyClient(WKBrowsingContextController *,WebKit::WebPageProxy &)::$_2::__invoke(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  v24[4] = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a8 + 40));
  if (objc_opt_respondsToSelector())
  {
    v23[0] = @"WKActionIsMainFrameKey";
    v24[0] = objc_msgSend(NSNumber, "numberWithBool:", *(unsigned __int8 *)(objc_msgSend(a2, "_apiObject") + 441));
    v23[1] = @"WKActionURLRequestKey";
    if (a4) {
      [a4 _apiObject];
    }
    uint64_t v15 = (const void *)[(id)WebCore::ResourceRequest::nsURLRequest() copy];
    v24[1] = v15;
    void v23[2] = @"WKActionURLResponseKey";
    if (a3) {
      uint64_t v16 = [a3 _apiObject];
    }
    else {
      uint64_t v16 = 0;
    }
    int v17 = (const void *)[(id)WebCore::ResourceResponse::nsURLResponse((WebCore::ResourceResponse *)(v16 + 16)) copy];
    v24[2] = v17;
    v23[3] = @"WKActionCanShowMIMETypeKey";
    v24[3] = [NSNumber numberWithBool:a5];
    uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:4];
    if (v17)
    {
      CFRelease(v17);
      if (!v15) {
        goto LABEL_8;
      }
    }
    else if (!v15)
    {
      goto LABEL_8;
    }
    CFRelease(v15);
LABEL_8:
    double PolicyDecisionBlock = makePolicyDecisionBlock(&v22, a6);
    long long v20 = v22;
    objc_msgSend(WeakRetained, "browsingContextController:decidePolicyForResponseAction:decisionHandler:", a8, v18, v22, PolicyDecisionBlock);
    _Block_release(v20);
    if (!WeakRetained) {
      return;
    }
    goto LABEL_13;
  }
  if (a6) {
    uint64_t v21 = [a6 _apiObject];
  }
  else {
    uint64_t v21 = 0;
  }
  WebKit::WebFramePolicyListenerProxy::use(v21, 0, 0);
  if (WeakRetained) {
LABEL_13:
  }
    CFRelease(WeakRetained);
}

void sub_198B30520(_Unwind_Exception *a1)
{
  _Block_release(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void sub_198B30570()
{
  if (v0) {
    JUMPOUT(0x198B30578);
  }
  JUMPOUT(0x198B30548);
}

void sub_198B30588()
{
  if (!v0) {
    JUMPOUT(0x198B30554);
  }
  JUMPOUT(0x198B3054CLL);
}

void DownloadClient::~DownloadClient(id *this)
{
}

{
  void *v2;
  uint64_t vars8;

  objc_destroyWeak(this + 2);

  WTF::fastFree((WTF *)this, v2);
}

void DownloadClient::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (id *)(a1 + 16);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  if (WeakRetained && (CFRelease(WeakRetained), (*(_WORD *)(a1 + 24) & 2) != 0))
  {
    id Weak = objc_loadWeak(v6);
    uint64_t v13 = *(void *)(a2 + 8);
    long long v14 = *(const void **)(a3 + 8);
    CFRetain(v14);
    uint64_t v15 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained(v6);
    WebKit::CompletionHandlerCallChecker::create(v15, (objc_object *)sel_download_didReceiveAuthenticationChallenge_completionHandler_, (uint64_t *)&v21);
    uint64_t v17 = a3;
    uint64_t v16 = v21;
    uint64_t v18 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    *uint64_t v18 = MEMORY[0x1E4F14398];
    v18[1] = 50331650;
    uint64_t v18[2] = WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<DownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(DownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke;
    void v18[3] = &WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<DownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(DownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::descriptor;
    v18[4] = v17;
    uint64_t v18[5] = v16;
    [Weak download:v13 didReceiveAuthenticationChallenge:v14 completionHandler:v18];
    _Block_release(v18);
    if (v15) {
      CFRelease(v15);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a3 + 464);
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v20);
    CFTypeRef cf = 0;
    WebKit::AuthenticationDecisionListener::completeChallenge(v8);
    CFTypeRef v10 = cf;
    CFTypeRef cf = 0;
    if (v10) {
      CFRelease(v10);
    }
    uint64_t v11 = v21;
    uint64_t v21 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v19 = v20;
    long long v20 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v9);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
}

void sub_198B307B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _Block_release(v10);
  if (v9) {
    CFRelease(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t DownloadClient::didReceiveData(DownloadClient *this, id *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)[a2[1] progress];
  [v7 setTotalUnitCount:a5];

  return [v7 setCompletedUnitCount:a4];
}

void DownloadClient::decidePlaceholderPolicy(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __int16 v4 = *(_WORD *)(a1 + 24);
  if ((v4 & 0x30) != 0)
  {
    id Weak = objc_loadWeak((id *)(a1 + 16));
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = *a3;
    *a3 = 0;
    long long v9 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
    *long long v9 = MEMORY[0x1E4F14398];
    v9[1] = 50331650;
    if ((v4 & 0x10) != 0)
    {
      void v9[2] = WTF::BlockPtr<void ()(_WKPlaceholderPolicy,NSURL *)>::fromCallable<DownloadClient::decidePlaceholderPolicy(WebKit::DownloadProxy &,WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)> &&)::{lambda(_WKPlaceholderPolicy,NSURL *)#1}>(DownloadClient::decidePlaceholderPolicy(WebKit::DownloadProxy &,WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)> &&)::{lambda(_WKPlaceholderPolicy,NSURL *)#1})::{lambda(void *,_WKPlaceholderPolicy,NSURL *)#1}::__invoke;
      void v9[3] = &WTF::BlockPtr<void ()(_WKPlaceholderPolicy,NSURL *)>::fromCallable<DownloadClient::decidePlaceholderPolicy(WebKit::DownloadProxy &,WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)> &&)::{lambda(_WKPlaceholderPolicy,NSURL *)#1}>(DownloadClient::decidePlaceholderPolicy(WebKit::DownloadProxy &,WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)> &&)::{lambda(_WKPlaceholderPolicy,NSURL *)#1})::descriptor;
      v9[4] = v8;
      [Weak _download:v7 decidePlaceholderPolicy:v9];
    }
    else
    {
      void v9[2] = WTF::BlockPtr<void ()(WKDownloadPlaceholderPolicy,NSURL *)>::fromCallable<DownloadClient::decidePlaceholderPolicy(WebKit::DownloadProxy &,WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)> &&)::{lambda(WKDownloadPlaceholderPolicy,NSURL *)#1}>(DownloadClient::decidePlaceholderPolicy(WebKit::DownloadProxy &,WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)> &&)::{lambda(WKDownloadPlaceholderPolicy,NSURL *)#1})::{lambda(void *,WKDownloadPlaceholderPolicy,NSURL *)#1}::__invoke;
      void v9[3] = &WTF::BlockPtr<void ()(WKDownloadPlaceholderPolicy,NSURL *)>::fromCallable<DownloadClient::decidePlaceholderPolicy(WebKit::DownloadProxy &,WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)> &&)::{lambda(WKDownloadPlaceholderPolicy,NSURL *)#1}>(DownloadClient::decidePlaceholderPolicy(WebKit::DownloadProxy &,WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)> &&)::{lambda(WKDownloadPlaceholderPolicy,NSURL *)#1})::descriptor;
      v9[4] = v8;
      [Weak download:v7 decidePlaceholderPolicy:v9];
    }
    _Block_release(v9);
  }
  else
  {
    WTF::URL::URL((WTF::URL *)&v12);
    WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)>::operator()(a3);
    uint64_t v11 = v12;
    uint64_t v12 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
}

void sub_198B30A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Block_release(v10);
  _Unwind_Resume(a1);
}

void DownloadClient::decideDestinationWithSuggestedFilename(uint64_t a1, uint64_t a2, WebCore::ResourceResponse *a3, void *a4, uint64_t *a5)
{
  long long v9 = (id *)(a1 + 16);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
    id Weak = objc_loadWeak(v9);
    uint64_t v12 = *(void *)(a2 + 8);
    uint64_t v13 = WebCore::ResourceResponse::nsURLResponse(a3);
    if (*a4) {
      long long v14 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      long long v14 = &stru_1EEA10550;
    }
    CFRetain(*(CFTypeRef *)(a2 + 8));
    uint64_t v15 = *a5;
    *a5 = 0;
    uint64_t v16 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained(v9);
    WebKit::CompletionHandlerCallChecker::create(v16, (objc_object *)sel_download_decideDestinationUsingResponse_suggestedFilename_completionHandler_, &v23);
    uint64_t v18 = a2;
    uint64_t v17 = v15;
    uint64_t v19 = v23;
    long long v20 = malloc_type_malloc(0x38uLL, 0x10E004099C88F60uLL);
    void *v20 = MEMORY[0x1E4F14398];
    v20[1] = 50331650;
    void v20[2] = WTF::BlockPtr<void ()(NSURL *)>::fromCallable<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}>(DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1})::{lambda(void *,NSURL *)#1}::__invoke;
    v20[3] = &WTF::BlockPtr<void ()(NSURL *)>::fromCallable<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}>(DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1})::descriptor;
    v20[4] = v18;
    v20[5] = v17;
    v20[6] = v19;
    [Weak download:v12 decideDestinationUsingResponse:v13 suggestedFilename:v14 completionHandler:v20];
    _Block_release(v20);
    if (v16) {
      CFRelease(v16);
    }
  }
  else
  {
    uint64_t v24 = 0;
    WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(a5, 0, &v24);
    uint64_t v22 = v24;
    uint64_t v24 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v21);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
}

void sub_198B30C54(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void DownloadClient::didFinish(id *this, WebKit::DownloadProxy *a2)
{
  __int16 v4 = this + 2;
  id WeakRetained = objc_loadWeakRetained(this + 2);
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
    if (((_WORD)this[3] & 4) != 0)
    {
      id Weak = objc_loadWeak(v4);
      uint64_t v7 = *((void *)a2 + 1);
      [Weak downloadDidFinish:v7];
    }
  }
}

void DownloadClient::didFail(id *this, WebKit::DownloadProxy *a2, const WebCore::ResourceError *a3, API::Data *a4)
{
  uint64_t v8 = this + 2;
  id WeakRetained = objc_loadWeakRetained(this + 2);
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
    if (((_WORD)this[3] & 8) != 0)
    {
      id Weak = objc_loadWeak(v8);
      uint64_t v11 = *((void *)a2 + 1);
      uint64_t v12 = WebCore::ResourceError::nsError(a3);
      if (a4) {
        uint64_t v13 = *((void *)a4 + 1);
      }
      else {
        uint64_t v13 = 0;
      }
      [Weak download:v11 didFailWithError:v12 resumeData:v13];
    }
  }
}

void DownloadClient::didReceivePlaceholderURL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11 = (id *)(a1 + 16);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  if (WeakRetained && (CFRelease(WeakRetained), (*(_WORD *)(a1 + 24) & 0xC0) != 0))
  {
    char v26 = 0;
    uint64_t v25 = 0;
    uint64_t v13 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a4 length:a5];
    long long v14 = (const void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initByResolvingBookmarkData:v13 options:0 relativeToURL:0 bookmarkDataIsStale:&v26 error:&v25];
    if (v25 || v26)
    {
      uint64_t v15 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v24 = 0;
        _os_log_error_impl(&dword_1985F2000, v15, OS_LOG_TYPE_ERROR, "Failed to resolve URL from bookmark data", v24, 2u);
      }
    }
    uint64_t v16 = (uint64_t)v14;
    if (!v14) {
      uint64_t v16 = WTF::URL::operator NSURL *();
    }
    if ((*(_WORD *)(a1 + 24) & 0x40) != 0)
    {
      id Weak = objc_loadWeak(v11);
      uint64_t v22 = *(void *)(a2 + 8);
      uint64_t v23 = *a6;
      *a6 = 0;
      long long v20 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
      void *v20 = MEMORY[0x1E4F14398];
      v20[1] = 50331650;
      void v20[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void *)#1}::__invoke;
      v20[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::descriptor;
      v20[4] = v23;
      [Weak _download:v22 didReceivePlaceholderURL:v16 completionHandler:v20];
    }
    else
    {
      id v17 = objc_loadWeak(v11);
      uint64_t v18 = *(void *)(a2 + 8);
      uint64_t v19 = *a6;
      *a6 = 0;
      long long v20 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
      void *v20 = MEMORY[0x1E4F14398];
      v20[1] = 50331650;
      void v20[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void *)#1}::__invoke;
      v20[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::descriptor;
      v20[4] = v19;
      [v17 download:v18 didReceivePlaceholderURL:v16 completionHandler:v20];
    }
    _Block_release(v20);
    if (v14) {
      CFRelease(v14);
    }
    if (v13) {
      CFRelease(v13);
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(void)>::operator()(a6);
  }
}

void sub_198B3111C(_Unwind_Exception *a1)
{
  _Block_release(v3);
  if (v2)
  {
    CFRelease(v2);
    if (!v1) {
LABEL_4:
    }
      _Unwind_Resume(a1);
  }
  else if (!v1)
  {
    goto LABEL_4;
  }
  CFRelease(v1);
  goto LABEL_4;
}

void sub_198B311A0()
{
  if (!v0) {
    JUMPOUT(0x198B31150);
  }
  JUMPOUT(0x198B31148);
}

void DownloadClient::didReceiveFinalURL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v9 = (id *)(a1 + 16);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
    if ((*(_WORD *)(a1 + 24) & 0x300) != 0)
    {
      char v17 = 0;
      uint64_t v16 = 0;
      uint64_t v11 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a4 length:a5];
      uint64_t v12 = (const void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initByResolvingBookmarkData:v11 options:0 relativeToURL:0 bookmarkDataIsStale:&v17 error:&v16];
      if (v16 || v17)
      {
        uint64_t v13 = off_1EB358988;
        if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v15 = 0;
          _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "Failed to resolve URL from bookmark data", v15, 2u);
        }
      }
      uint64_t v14 = (uint64_t)v12;
      if (!v12) {
        uint64_t v14 = WTF::URL::operator NSURL *();
      }
      if ((*(_WORD *)(a1 + 24) & 0x100) != 0) {
        [objc_loadWeak(v9) _download:*(void *)(a2 + 8) didReceiveFinalURL:v14];
      }
      else {
        [objc_loadWeak(v9) download:*(void *)(a2 + 8) didReceiveFinalURL:v14];
      }
      if (v12) {
        CFRelease(v12);
      }
      if (v11) {
        CFRelease(v11);
      }
    }
  }
}

void sub_198B3131C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void DownloadClient::processDidCrash(id *this, WebKit::DownloadProxy *a2)
{
  __int16 v4 = this + 2;
  id WeakRetained = objc_loadWeakRetained(this + 2);
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
    if (((_WORD)this[3] & 8) != 0)
    {
      id Weak = objc_loadWeak(v4);
      uint64_t v7 = *((void *)a2 + 1);
      uint64_t v8 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F289A0] code:-1005 userInfo:0];
      [Weak download:v7 didFailWithError:v8 resumeData:0];
    }
  }
}

void DownloadClient::willSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceResponse *a4, uint64_t *a5)
{
  CFTypeRef v10 = (id *)(a1 + 16);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  if (WeakRetained && (CFRelease(WeakRetained), (*(_WORD *)(a1 + 24) & 1) != 0))
  {
    uint64_t v12 = (const void *)WebCore::ResourceRequest::nsURLRequest();
    uint64_t v13 = v12;
    if (v12) {
      CFRetain(v12);
    }
    id Weak = objc_loadWeak(v10);
    uint64_t v15 = *(void *)(a2 + 8);
    uint64_t v16 = WebCore::ResourceResponse::nsURLResponse(a4);
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v26, a3);
    char v17 = *(const void **)(a3 + 192);
    *(void *)(a3 + 19objc_destroyWeak(this + 2) = 0;
    uint64_t v18 = (const void *)*a5;
    *a5 = 0;
    cf[0] = v17;
    cf[1] = v18;
    uint64_t v19 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained(v10);
    WebKit::CompletionHandlerCallChecker::create(v19, (objc_object *)sel_download_willPerformHTTPRedirection_newRequest_decisionHandler_, (uint64_t *)&v28);
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v29, (uint64_t)v26);
    long long v20 = *(_OWORD *)cf;
    cf[0] = 0;
    cf[1] = 0;
    long long v30 = v20;
    uint64_t v21 = (uint64_t)v28;
    uint64_t v28 = 0;
    uint64_t v31 = v21;
    uint64_t v22 = malloc_type_malloc(0xF8uLL, 0x10E00400E432194uLL);
    void *v22 = MEMORY[0x1E4F14398];
    v22[1] = 50331650;
    uint64_t v22[2] = WTF::BlockPtr<void ()(WKDownloadRedirectPolicy)>::fromCallable<DownloadClient::willSendRequest(WebKit::DownloadProxy &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::{lambda(WKDownloadRedirectPolicy)#1}>(DownloadClient::willSendRequest(WebKit::DownloadProxy &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::{lambda(WKDownloadRedirectPolicy)#1})::{lambda(void *,WKDownloadRedirectPolicy)#1}::__invoke;
    v22[3] = &WTF::BlockPtr<void ()(WKDownloadRedirectPolicy)>::fromCallable<DownloadClient::willSendRequest(WebKit::DownloadProxy &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::{lambda(WKDownloadRedirectPolicy)#1}>(DownloadClient::willSendRequest(WebKit::DownloadProxy &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::{lambda(WKDownloadRedirectPolicy)#1})::descriptor;
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)(v22 + 4), (uint64_t)v29);
    *((_OWORD *)v22 + 14) = v30;
    v22[30] = v31;
    uint64_t v31 = 0;
    long long v30 = 0uLL;
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v29);
    [Weak download:v15 willPerformHTTPRedirection:v16 newRequest:v13 decisionHandler:v22];
    _Block_release(v22);
    uint64_t v23 = v28;
    uint64_t v28 = 0;
    if (v23) {
      WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v23);
    }
    CFTypeRef v24 = cf[1];
    cf[1] = 0;
    if (v24) {
      (*(void (**)(CFTypeRef))(*(void *)v24 + 8))(v24);
    }
    CFTypeRef v25 = cf[0];
    cf[0] = 0;
    if (v25) {
      CFRelease(v25);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v26);
    if (v19) {
      CFRelease(v19);
    }
    if (v13) {
      CFRelease(v13);
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>::operator()(a5);
  }
}

void sub_198B31670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef cf,uint64_t a34,unsigned int *a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,CFTypeRef a60,uint64_t a61,uint64_t a62)
{
  _Block_release(v64);
  uint64_t v66 = a35;
  a35 = 0;
  if (v66) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v66);
  }
  uint64_t v67 = a34;
  a34 = 0;
  if (v67) {
    (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
  }
  CFTypeRef v68 = cf;
  CFTypeRef cf = 0;
  if (v68) {
    CFRelease(v68);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a9);
  if (v63) {
    CFRelease(v63);
  }
  if (v62) {
    CFRelease(v62);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198B3185C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(uint64_t *a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  __int16 v4 = *a3;
  *a3 = 0;
  uint64_t v8 = v4;
  uint64_t v9 = v3;
  WTF::Function<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(&v9, a2, &v8);
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198B31928(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Function<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(uint64_t *a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v3 = *a1;
  __int16 v4 = *a3;
  *a3 = 0;
  uint64_t v7 = v4;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v3 + 16))(v3, a2, &v7);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198B31A08(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<DownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(DownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (v3)
  {
    __int16 v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

uint64_t WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<DownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(DownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 24) = 1;
    switch(a2)
    {
      case 0:
        uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 464);
        if (a3)
        {
          MEMORY[0x19972F4E0](&v13, a3);
        }
        else
        {
          WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v13);
          CFTypeRef cf = 0;
        }
        uint64_t v9 = v7;
        goto LABEL_9;
      case 1:
      case 2:
      case 3:
        uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 464);
        WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v13);
        CFTypeRef cf = 0;
        uint64_t v9 = v8;
LABEL_9:
        WebKit::AuthenticationDecisionListener::completeChallenge(v9);
        CFTypeRef v11 = cf;
        CFTypeRef cf = 0;
        if (v11) {
          CFRelease(v11);
        }
        uint64_t v12 = v14;
        uint64_t v14 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v10);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
        uint64_t result = (uint64_t)v13;
        uint64_t v13 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        break;
      default:
        uint64_t result = objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3C8], @"Invalid NSURLSessionAuthChallengeDisposition (%ld)", a2);
        break;
    }
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    WebKit::CompletionHandlerCallChecker::~CompletionHandlerCallChecker((SEL *)result);
    return (unsigned int *)WTF::fastFree(v1, v2);
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(_WKPlaceholderPolicy,NSURL *)>::fromCallable<DownloadClient::decidePlaceholderPolicy(WebKit::DownloadProxy &,WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)> &&)::{lambda(_WKPlaceholderPolicy,NSURL *)#1}>(DownloadClient::decidePlaceholderPolicy(WebKit::DownloadProxy &,WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)> &&)::{lambda(_WKPlaceholderPolicy,NSURL *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

WTF::StringImpl *WTF::BlockPtr<void ()(_WKPlaceholderPolicy,NSURL *)>::fromCallable<DownloadClient::decidePlaceholderPolicy(WebKit::DownloadProxy &,WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)> &&)::{lambda(_WKPlaceholderPolicy,NSURL *)#1}>(DownloadClient::decidePlaceholderPolicy(WebKit::DownloadProxy &,WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)> &&)::{lambda(_WKPlaceholderPolicy,NSURL *)#1})::{lambda(void *,_WKPlaceholderPolicy,NSURL *)#1}::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t *)(a1 + 32);
  if (a2 > 1) {
    return (WTF::StringImpl *)objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3C8], @"Invalid WKPlaceholderPolicy (%ld)", a2);
  }
  MEMORY[0x19972E8A0](&v6, a3);
  WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)>::operator()(v3);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198B31D7C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(WKDownloadPlaceholderPolicy,NSURL *)>::fromCallable<DownloadClient::decidePlaceholderPolicy(WebKit::DownloadProxy &,WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)> &&)::{lambda(WKDownloadPlaceholderPolicy,NSURL *)#1}>(DownloadClient::decidePlaceholderPolicy(WebKit::DownloadProxy &,WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)> &&)::{lambda(WKDownloadPlaceholderPolicy,NSURL *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

WTF::StringImpl *WTF::BlockPtr<void ()(WKDownloadPlaceholderPolicy,NSURL *)>::fromCallable<DownloadClient::decidePlaceholderPolicy(WebKit::DownloadProxy &,WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)> &&)::{lambda(WKDownloadPlaceholderPolicy,NSURL *)#1}>(DownloadClient::decidePlaceholderPolicy(WebKit::DownloadProxy &,WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)> &&)::{lambda(WKDownloadPlaceholderPolicy,NSURL *)#1})::{lambda(void *,WKDownloadPlaceholderPolicy,NSURL *)#1}::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t *)(a1 + 32);
  if (a2 > 1) {
    return (WTF::StringImpl *)objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3C8], @"Invalid WKDownloadPlaceholderPolicy (%ld)", a2);
  }
  MEMORY[0x19972E8A0](&v6, a3);
  WTF::CompletionHandler<void ()(WebKit::UseDownloadPlaceholder,WTF::URL const&)>::operator()(v3);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198B31EA4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WTF::BlockPtr<void ()(NSURL *)>::fromCallable<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}>(DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1})::{lambda(void const*)#1}::__invoke(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[6];
  a1[6] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[4];
  a1[4] = 0;
  if (v4)
  {
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

uint64_t WTF::BlockPtr<void ()(NSURL *)>::fromCallable<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}>(DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1})::{lambda(void *,NSURL *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 48));
  if (result) {
    return result;
  }
  *(unsigned char *)(*(void *)(a1 + 48) + 24) = 1;
  if (!a2) {
    goto LABEL_8;
  }
  if ([a2 isFileURL])
  {
    uint64_t v5 = (void *)[MEMORY[0x1E4F28CB8] defaultManager];
    uint64_t v6 = (WTF::RunLoop *)objc_msgSend(v5, "fileExistsAtPath:", objc_msgSend((id)objc_msgSend(a2, "URLByDeletingLastPathComponent"), "path"));
    if (v6)
    {
      uint64_t v7 = (WTF::RunLoop *)objc_msgSend(v5, "fileExistsAtPath:", objc_msgSend(a2, "path"));
      if (!v7)
      {
        objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "progress"), "setFileURL:", a2);
        MEMORY[0x19972EAD0](&v17, [a2 path]);
        WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()((uint64_t *)(a1 + 40), 0, &v17);
LABEL_19:
        uint64_t result = (uint64_t)v17;
        char v17 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        return result;
      }
      WTF::RunLoop::main(v7);
      uint64_t v8 = *(void *)(a1 + 32);
      CFRetain(*(CFTypeRef *)(v8 + 8));
      uint64_t v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(void *)uint64_t v9 = &unk_1EE9C2AA8;
      *((void *)v9 + 1) = v8;
      char v17 = v9;
      WTF::RunLoop::dispatch();
      CFTypeRef v10 = v17;
      char v17 = 0;
      if (v10) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v10 + 8))(v10);
      }
    }
    else
    {
      WTF::RunLoop::main(v6);
      uint64_t v14 = *(void *)(a1 + 32);
      CFRetain(*(CFTypeRef *)(v14 + 8));
      uint64_t v15 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(void *)uint64_t v15 = &unk_1EE9C2A80;
      *((void *)v15 + 1) = v14;
      char v17 = v15;
      WTF::RunLoop::dispatch();
      uint64_t v16 = v17;
      char v17 = 0;
      if (v16) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v16 + 8))(v16);
      }
    }
LABEL_8:
    char v17 = 0;
    WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()((uint64_t *)(a1 + 40), 0, &v17);
    goto LABEL_19;
  }
  char v17 = 0;
  WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()((uint64_t *)(a1 + 40), 0, &v17);
  uint64_t v13 = v17;
  char v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  return [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"destination must be a file URL"];
}

void sub_198B32200(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}::operator()(NSURL)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C2A80;
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}::operator()(NSURL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C2A80;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}::operator()(NSURL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  MEMORY[0x199731570](&v7, [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F289A0] code:-3000 userInfo:0]);
  WebKit::DownloadProxy::didFail(v1, (uint64_t)&v7, 0, 0);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = v9;
  uint64_t v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = v8;
  uint64_t v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}::operator()(NSURL)::{lambda(void)#2},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C2AA8;
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}::operator()(NSURL)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C2AA8;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}::operator()(NSURL)::{lambda(void)#2},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  MEMORY[0x199731570](&v7, [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F289A0] code:-3000 userInfo:0]);
  WebKit::DownloadProxy::didFail(v1, (uint64_t)&v7, 0, 0);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = v9;
  uint64_t v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = v8;
  uint64_t v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void DownloadClient::willSendRequest(WebKit::DownloadProxy &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::{lambda(WKDownloadRedirectPolicy)#1}::operator()(uint64_t a1, uint64_t a2)
{
  if (!WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 208)))
  {
    *(unsigned char *)(*(void *)(a1 + 208) + 24) = 1;
    if (a2 == 1)
    {
      WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>::operator()((uint64_t *)(a1 + 200));
    }
    else if (a2)
    {
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3C8], @"Invalid WKDownloadRedirectPolicy (%ld)", a2);
    }
    else
    {
      WebCore::ResourceRequest::ResourceRequest((StringImpl *)v5);
      WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>::operator()((uint64_t *)(a1 + 200));
      CFTypeRef v4 = cf;
      CFTypeRef cf = 0;
      if (v4) {
        CFRelease(v4);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v5);
    }
  }
}

void sub_198B32694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef cf)
{
  CFTypeRef v35 = cf;
  CFTypeRef cf = 0;
  if (v35) {
    CFRelease(v35);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a10);
  _Unwind_Resume(a1);
}

void WTF::BlockPtr<void ()(WKDownloadRedirectPolicy)>::fromCallable<DownloadClient::willSendRequest(WebKit::DownloadProxy &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::{lambda(WKDownloadRedirectPolicy)#1}>(DownloadClient::willSendRequest(WebKit::DownloadProxy &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::{lambda(WKDownloadRedirectPolicy)#1})::{lambda(void const*)#1}::__invoke(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[30];
  a1[30] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  }
  uint64_t v3 = a1[29];
  a1[29] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  CFTypeRef v4 = (const void *)a1[28];
  a1[28] = 0;
  if (v4) {
    CFRelease(v4);
  }

  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 4));
}

void WTF::BlockPtr<void ()(WKDownloadRedirectPolicy)>::fromCallable<DownloadClient::willSendRequest(WebKit::DownloadProxy &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::{lambda(WKDownloadRedirectPolicy)#1}>(DownloadClient::willSendRequest(WebKit::DownloadProxy &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::{lambda(WKDownloadRedirectPolicy)#1})::{lambda(void *,WKDownloadRedirectPolicy)#1}::__invoke(uint64_t a1, uint64_t a2)
{
}

void sub_198B32804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *>>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *,WTF::DefaultHash<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WKBrowsingContextController *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>::rehash(unsigned int a1)
{
  uint64_t v2 = qword_1EB3597D0;
  if (qword_1EB3597D0)
  {
    int v3 = *(_DWORD *)(qword_1EB3597D0 - 4);
    int v4 = *(_DWORD *)(qword_1EB3597D0 - 12);
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  uint64_t result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1EB3597D0 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  _DWORD *result = 0;
  *(_DWORD *)(qword_1EB3597D0 - 1objc_destroyWeak(this + 2) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v8 = (unsigned int **)(v2 + 16 * i);
      uint64_t v9 = *v8;
      if (*v8 != (unsigned int *)-1)
      {
        if (v9)
        {
          if (qword_1EB3597D0) {
            unsigned int v10 = *(_DWORD *)(qword_1EB3597D0 - 8);
          }
          else {
            unsigned int v10 = 0;
          }
          int v11 = 0;
          uint64_t v12 = *((void *)v9 + 1);
          if (v12) {
            uint64_t v13 = v12 - 16;
          }
          else {
            uint64_t v13 = 0;
          }
          unint64_t v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          int v17 = (v16 >> 31) ^ v16;
          do
          {
            uint64_t v18 = v17 & v10;
            int v17 = ++v11 + v18;
          }
          while (*(void *)(qword_1EB3597D0 + 16 * v18));
          uint64_t v19 = (void *)(qword_1EB3597D0 + 16 * v18);
          void *v19 = 0;
          long long v20 = *(_OWORD *)v8;
          WTF::StringImpl *v8 = 0;
          *(_OWORD *)uint64_t v19 = v20;
          uint64_t v21 = *v8;
          WTF::StringImpl *v8 = 0;
          if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v21);
            WTF::fastFree((WTF *)v21, v6);
          }
        }
        else
        {
          WTF::StringImpl *v8 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }

  return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *>>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *,WTF::DefaultHash<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WKBrowsingContextController *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>::expand()
{
  if (qword_1EB3597D0 && (int v0 = *(_DWORD *)(qword_1EB3597D0 - 4)) != 0) {
    return WTF::HashTable<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *>>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *,WTF::DefaultHash<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WKBrowsingContextController *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>::rehash(v0 << (6 * *(_DWORD *)(qword_1EB3597D0 - 12) >= (2 * v0)));
  }
  else {
    return WTF::HashTable<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *>>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *,WTF::DefaultHash<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WKBrowsingContextController *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>::rehash(8u);
  }
}

void sub_198B32F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v16) {
    CFRelease(*(CFTypeRef *)(v16 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_198B3308C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, CFTypeRef cf)
{
  CFTypeRef v13 = cf;
  CFTypeRef cf = 0;
  if (v13) {
    CFRelease(v13);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  _Unwind_Resume(a1);
}

void WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a1 + 12)];
  *a2 = v4;
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  if (v6)
  {
    uint64_t v7 = (void *)v4;
    uint64_t v8 = *(WTF **)a1;
    uint64_t v9 = 8 * v6;
    do
    {
      WTF::makeNSArrayElement((uint64_t *)&cf, v8, v5);
      if (cf)
      {
        objc_msgSend(v7, "addObject:");
        CFTypeRef v10 = cf;
        CFTypeRef cf = 0;
        if (v10) {
          CFRelease(v10);
        }
      }
      uint64_t v8 = (WTF *)((char *)v8 + 8);
      v9 -= 8;
    }
    while (v9);
  }
}

void sub_198B33150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  *CFTypeRef v10 = 0;
  if (v11) {
    CFRelease(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B33380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B334D0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198B3399C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::SecurityOrigin::create@<X0>(void *a1@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)API::Object::newObject(0x30uLL, 18);
  uint64_t v5 = (WebKit *)WebCore::SecurityOriginData::isolatedCopy();
  void *v4 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v5);
  void *v4 = &unk_1EE9C2E10;
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v4 + 2), (uint64_t)v8);
  *a1 = v4;
  if (v9 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9C2C88[v9])(&v7, v8);
  }
  return result;
}

{
  void *v4;
  WebKit *v5;
  uint64_t result;
  char v7;
  unsigned char v8[24];
  int v9;
  uint64_t v10;

  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)API::Object::newObject(0x30uLL, 18);
  uint64_t v5 = (WebKit *)WebCore::SecurityOriginData::isolatedCopy();
  void *v4 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v5);
  void *v4 = &unk_1EE9C2E10;
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v4 + 2), (uint64_t)v8);
  *a1 = v4;
  if (v9 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9CFC18[v9])(&v7, v8);
  }
  return result;
}

void sub_198B33AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, int a16)
{
  if (a16 != -1) {
    ((void (*)(char *, char *))off_1EE9C2C88[a16])(&a12, &a13);
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_198B33BA8(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198B33C38(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198B33CE4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198B33FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B34110(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (v13) {
    CFRelease(v13);
  }
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  WebCore::Cookie::~Cookie((WebCore::Cookie *)&a13, v15);
  _Unwind_Resume(a1);
}

void sub_198B3420C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10) {
    CFRelease(v10);
  }
  WebCore::Cookie::~Cookie((WebCore::Cookie *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_198B3445C(_Unwind_Exception *a1, void *a2)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  WTF::fastFree(v2, v5);
  _Unwind_Resume(a1);
}

void sub_198B3460C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198B34704(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B347BC(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B34950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Block_release(0);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v11);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198B34A8C(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198B34B48(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

uint64_t checkChallenge(NSURLAuthenticationChallenge *a1)
{
  uint64_t v1 = objc_opt_class();
  uint64_t result = objc_opt_class();
  if (v1 != result)
  {
    int v3 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v4 = *MEMORY[0x1E4F1C3C8];
    return [v3 raise:v4 format:@"The challenge was not sent by the receiver."];
  }
  return result;
}

void sub_198B355E4(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v2 + 8));
  CFRelease(*(CFTypeRef *)(v1 + 8));
  CFRelease(*(CFTypeRef *)(v3 + 8));
  _Unwind_Resume(a1);
}

void sub_198B35720(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198B357D0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void API::SecurityOrigin::~SecurityOrigin(API::SecurityOrigin *this)
{
  *(void *)this = &unk_1EE9C2E10;
  uint64_t v2 = *((unsigned int *)this + 10);
  if (v2 != -1) {
    ((void (*)(char *, char *))off_1EE9C2C88[v2])(&v3, (char *)this + 16);
  }
  *((_DWORD *)this + 10) = -1;
}

{
  uint64_t v2;
  char v3;

  *(void *)this = &unk_1EE9C2E10;
  uint64_t v2 = *((unsigned int *)this + 10);
  if (v2 != -1) {
    ((void (*)(char *, char *))off_1EE9C2C88[v2])(&v3, (char *)this + 16);
  }
  *((_DWORD *)this + 10) = -1;
  MEMORY[0x199740C10](this, 0x10E3C40DE8DBC46);
}

uint64_t API::ObjectImpl<(API::Object::Type)18>::type()
{
  return 18;
}

void WKHTTPCookieStoreObserver::~WKHTTPCookieStoreObserver(id *this)
{
  *this = &unk_1EE9C2CA8;
  uint64_t v1 = (unsigned int **)(this + 1);
  objc_destroyWeak(this + 2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v1, v2);
}

{
  unsigned int **v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *this = &unk_1EE9C2CA8;
  uint64_t v2 = (unsigned int **)(this + 1);
  objc_destroyWeak(this + 2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, v3);

  WTF::fastFree((WTF *)this, v4);
}

uint64_t WKHTTPCookieStoreObserver::cookiesDidChange(id *this, API::HTTPCookieStore *a2)
{
  char v3 = this + 2;
  objc_loadWeak(this + 2);
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    id Weak = objc_loadWeak(v3);
    uint64_t v6 = *((void *)a2 + 1);
    return [Weak cookiesDidChangeInCookieStore:v6];
  }
  return result;
}

void API::NavigationAction::~NavigationAction(API::NavigationAction *this)
{
  uint64_t v2 = *((void *)this + 360);
  *((void *)this + 360) = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  WebKit::NavigationActionData::~NavigationActionData((API::NavigationAction *)((char *)this + 304));
  uint64_t v4 = *((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (const void *)*((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::NavigationAction *)((char *)this + 40));
  uint64_t v8 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v10) {
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
}

{
  uint64_t vars8;

  API::NavigationAction::~NavigationAction(this);

  JUMPOUT(0x199740C10);
}

id coreCookiesToNSCookies(uint64_t *a1)
{
  uint64_t v2 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)a1 + 3)];
  uint64_t v3 = *((unsigned int *)a1 + 3);
  if (v3)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = 136 * v3;
    do
    {
      uint64_t v6 = WebCore::Cookie::operator NSHTTPCookie *();
      if (v6) {
        [v2 addObject:v6];
      }
      v4 += 136;
      v5 -= 136;
    }
    while (v5);
  }
  char v7 = (void *)CFMakeCollectable(v2);

  return v7;
}

void sub_198B35C98(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, const WebCore::Cookie *a2, unint64_t a3)
{
  uint64_t v3 = result;
  _DWORD *result = 0;
  result[1] = 0;
  if (!a3) {
    return v3;
  }
  if (a3 < 0x1E1E1E2)
  {
    uint64_t v5 = 136 * a3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(136 * a3));
    *((_DWORD *)v3 + objc_destroyWeak(this + 2) = v5 / 0x88;
    uint64_t *v3 = v6;
    unsigned int v7 = *((_DWORD *)v3 + 3);
    do
    {
      WebCore::Cookie::Cookie((WebCore::Cookie *)(*v3 + 136 * v7), a2);
      unsigned int v7 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v7;
      a2 = (const WebCore::Cookie *)((char *)a2 + 136);
      v5 -= 136;
    }
    while (v5);
    return v3;
  }
  __break(0xC471u);
  return result;
}

void sub_198B35D5C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

WebCore::Cookie *WebCore::Cookie::Cookie(WebCore::Cookie *this, const WebCore::Cookie *a2)
{
  uint64_t v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *(void *)this = v4;
  uint64_t v5 = (_DWORD *)*((void *)a2 + 1);
  if (v5) {
    *v5 += 2;
  }
  *((void *)this + 1) = v5;
  uint64_t v6 = (_DWORD *)*((void *)a2 + 2);
  if (v6) {
    *v6 += 2;
  }
  *((void *)this + objc_destroyWeak(this + 2) = v6;
  unsigned int v7 = (_DWORD *)*((void *)a2 + 3);
  if (v7) {
    *v7 += 2;
  }
  *((void *)this + 3) = v7;
  long long v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 43) = *(_OWORD *)((char *)a2 + 43);
  *((_OWORD *)this + objc_destroyWeak(this + 2) = v8;
  uint64_t v9 = (_DWORD *)*((void *)a2 + 8);
  if (v9) {
    *v9 += 2;
  }
  *((void *)this + 8) = v9;
  uint64_t v10 = (_DWORD *)*((void *)a2 + 9);
  if (v10) {
    *v10 += 2;
  }
  *((void *)this + 9) = v10;
  long long v11 = *((_OWORD *)a2 + 6);
  *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
  *((_OWORD *)this + 6) = v11;
  WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 112, (uint64_t)a2 + 112);
  *((unsigned char *)this + 128) = *((unsigned char *)a2 + 128);
  return this;
}

void sub_198B35E64(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = v2[9];
  v2[9] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = v2[8];
  v2[8] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = v2[3];
  v2[3] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  unsigned int v7 = v2[2];
  v2[2] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  long long v8 = v2[1];
  v2[1] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *v2;
  *uint64_t v2 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<void const*,WTF::KeyValuePair<void const*,std::unique_ptr<WKHTTPCookieStoreObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,std::unique_ptr<WKHTTPCookieStoreObserver>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,std::unique_ptr<WKHTTPCookieStoreObserver>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<std::unique_ptr<WKHTTPCookieStoreObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<void const*,WTF::KeyValuePair<void const*,std::unique_ptr<WKHTTPCookieStoreObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,std::unique_ptr<WKHTTPCookieStoreObserver>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,std::unique_ptr<WKHTTPCookieStoreObserver>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<std::unique_ptr<WKHTTPCookieStoreObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<void const*,WTF::KeyValuePair<void const*,std::unique_ptr<WKHTTPCookieStoreObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,std::unique_ptr<WKHTTPCookieStoreObserver>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,std::unique_ptr<WKHTTPCookieStoreObserver>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<std::unique_ptr<WKHTTPCookieStoreObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      CFTypeRef v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          char v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = v26[1];
          v26[1] = 0;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
          *char v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
          if (v13 == a3) {
            uint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(void *)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WebKit::BackgroundFetchLoad::BackgroundFetchLoad(String *a1, uint64_t a2, StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (uint64_t)&a1[1];
  a1[2].m_impl.uint64_t m_ptr = 0;
  CFTypeRef v13 = (unsigned int *)&a1[2];
  a1->m_impl.uint64_t m_ptr = (StringImpl *)&unk_1EE9C2E38;
  a1[1].m_impl.uint64_t m_ptr = (StringImpl *)&unk_1EE9C2EB0;
  a1[3].m_impl.uint64_t m_ptr = a3;
  uint64_t v14 = *(void *)(a4 + 8);
  if (v14) {
    goto LABEL_6;
  }
  uint64_t v14 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v14 = 1;
  *(void *)(v14 + 8) = a4;
  uint64_t v17 = *(unsigned int **)(a4 + 8);
  *(void *)(a4 + 8) = v14;
  if (!v17) {
    goto LABEL_6;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, v16);
  }
  uint64_t v14 = *(void *)(a4 + 8);
  if (v14) {
LABEL_6:
  }
    atomic_fetch_add((atomic_uint *volatile)v14, 1u);
  a1[4].m_impl.uint64_t m_ptr = (StringImpl *)v14;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&a1[5].m_impl.m_ptr, (const String *)a5);
  a1[30].m_impl.uint64_t m_ptr = 0;
  LODWORD(v81) = *(_DWORD *)(a5 + 208);
  *(_DWORD *)((char *)&v81 + 3) = *(_DWORD *)(a5 + 211);
  int v18 = *(WTF::StringImpl **)(a5 + 216);
  if (v18) {
    *(_DWORD *)v18 += 2;
  }
  uint64_t v82 = v18;
  long long v19 = *(_OWORD *)(a5 + 240);
  v83[0] = *(_OWORD *)(a5 + 224);
  v83[1] = v19;
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v77, (WTF::ASCIILiteral *)(a5 + 264));
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v78, (WTF::ASCIILiteral *)(a5 + 280));
  uint64_t v20 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)&a1[5]);
  unint64_t v21 = *(WTF::StringImpl **)v20;
  if (*(void *)v20) {
    *(_DWORD *)v21 += 2;
  }
  uint64_t v65 = v21;
  long long v22 = *(_OWORD *)(v20 + 24);
  *(_OWORD *)uint64_t v66 = *(_OWORD *)(v20 + 8);
  *(_OWORD *)&v66[16] = v22;
  v76[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v76);
  WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v75, (WebCore::SecurityOriginData *)(a7 + 32));
  WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v74, (WebCore::SecurityOriginData *)a7);
  uint64_t v73 = 0;
  int v23 = *(WTF::StringImpl **)(a5 + 296);
  if (v23) {
    *(_DWORD *)v23 += 2;
  }
  uint64_t v72 = v23;
  uint64_t v24 = WTF::fastMalloc((WTF *)0x490);
  uint64_t m_ptr = (uint64_t)a1[3].m_impl.m_ptr;
  char v26 = v74;
  uint64_t v27 = v75;
  uint64_t v74 = 0;
  v75 = 0;
  int v79 = v26;
  unsigned int v80 = v27;
  a1[31].m_impl.uint64_t m_ptr = (StringImpl *)WebKit::NetworkLoadChecker::NetworkLoadChecker(v24, a2, 0, 0, (int *)&v81, m_ptr, 0, v77, (uint64_t *)&v65, (uint64_t *)v76, (uint64_t *)&v80, (uint64_t *)&v79, (uint64_t *)&v73, 0, (uint64_t *)&v72, 1, v64, 0, 0,
                                        0,
                                        1);
  if (v79) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v79, v28);
  }
  if (v80) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v80, v28);
  }
  if (v72)
  {
    if (*(_DWORD *)v72 == 2) {
      WTF::StringImpl::destroy(v72, v28);
    }
    else {
      *(_DWORD *)v72 -= 2;
    }
  }
  if (v73) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v73, v28);
  }
  uint64_t v29 = v74;
  uint64_t v74 = 0;
  if (v29) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v29, v28);
  }
  uint64_t v30 = v75;
  v75 = 0;
  if (v30) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v30, v28);
  }
  uint64_t v31 = v76[0];
  v76[0] = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, v28);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  int v32 = v65;
  uint64_t v65 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v28);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v78);
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v77);
  if (v82)
  {
    if (*(_DWORD *)v82 == 2) {
      WTF::StringImpl::destroy(v82, v33);
    }
    else {
      *(_DWORD *)v82 -= 2;
    }
  }
  a1[32].m_impl.uint64_t m_ptr = 0;
  a1[33].m_impl.uint64_t m_ptr = 0;
  uint64_t result = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)&a1[5]);
  if ((*(unsigned char *)(result + 8) & 2) == 0)
  {
    uint64_t v35 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)&a1[5]);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v36 = v81;
    uint64_t v65 = 0;
    uint64_t v37 = *(_DWORD **)v35;
    if (*(void *)v35) {
      *v37 += 2;
    }
    *(void *)uint64_t v66 = v37;
    long long v38 = *(_OWORD *)(v35 + 8);
    *(_OWORD *)&v66[24] = *(_OWORD *)(v35 + 24);
    *(_OWORD *)&v66[8] = v38;
    if (v36) {
      *(_DWORD *)v36 += 2;
    }
    uint64_t v67 = v36;
    int v68 = 0;
    __int16 v69 = 3;
    CFTypeRef v70 = 0;
    char v71 = 1;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v81);
    CFTypeRef cf = 0;
    char v87 = 0;
    char v84 = v84 & 0xF1 | 4;
    (*(void (**)(void, WTF::StringImpl **))(**((void **)a1[4].m_impl.m_ptr + 1) + 40))(*((void *)a1[4].m_impl.m_ptr + 1), &v65);
    CFTypeRef v40 = cf;
    CFTypeRef cf = 0;
    if (v40) {
      CFRelease(v40);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v81, v39);
    CFTypeRef v42 = v70;
    CFTypeRef v70 = 0;
    if (v42) {
      CFRelease(v42);
    }
    int v43 = v67;
    uint64_t v67 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2) {
        WTF::StringImpl::destroy(v43, v41);
      }
      else {
        *(_DWORD *)v43 -= 2;
      }
    }
    uint64_t v57 = *(WTF::StringImpl **)v66;
    *(void *)uint64_t v66 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2) {
        WTF::StringImpl::destroy(v57, v41);
      }
      else {
        *(_DWORD *)v57 -= 2;
      }
    }
    uint64_t v58 = v65;
    uint64_t v65 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
      {
        WTF::StringImpl::destroy(v58, v41);
        if (!v36) {
          return (uint64_t)a1;
        }
LABEL_78:
        if (*(_DWORD *)v36 == 2) {
          WTF::StringImpl::destroy(v36, v41);
        }
        else {
          *(_DWORD *)v36 -= 2;
        }
        return (uint64_t)a1;
      }
      *(_DWORD *)v58 -= 2;
    }
    if (!v36) {
      return (uint64_t)a1;
    }
    goto LABEL_78;
  }
  if (!a6)
  {
LABEL_82:
    uint64_t v59 = (uint64_t)a1[31].m_impl.m_ptr;
    *(unsigned char *)(v59 + 528) = 1;
    if (!*(unsigned char *)(a5 + 324))
    {
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v81, (uint64_t *)(a5 + 304));
      LODWORD(v83[0]) = *(_DWORD *)(a5 + 320);
      BYTE4(v83[0]) = *(unsigned char *)(a5 + 324);
      std::optional<WebCore::ContentSecurityPolicyResponseHeaders>::operator=[abi:sn180100]<WebCore::ContentSecurityPolicyResponseHeaders,void>(v59 + 264, (uint64_t)&v81);
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v81, v60);
      uint64_t v59 = (uint64_t)a1[31].m_impl.m_ptr;
    }
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&v81, a1 + 5);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v13, v12);
    int v61 = *(atomic_uint **)v13;
    if (v61) {
      atomic_fetch_add(v61, 1u);
    }
    atomic_fetch_add((atomic_uint *volatile)(a2 + 128), 1u);
    uint64_t v62 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v62 = &unk_1EE9C3250;
    *((void *)v62 + 1) = a1;
    *((void *)v62 + objc_destroyWeak(this + 2) = v61;
    *((void *)v62 + 3) = a2;
    uint64_t v65 = v62;
    WebKit::NetworkLoadChecker::check(v59, (WebCore::ResourceRequestBase *)&v81, 0, &v65);
    if (v65) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v65 + 8))(v65);
    }
    CFTypeRef v63 = v85;
    CFTypeRef v85 = 0;
    if (v63) {
      CFRelease(v63);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v81);
    return (uint64_t)a1;
  }
  int v44 = 0;
  unint64_t v45 = a6;
  do
  {
    ++v44;
    BOOL v46 = v45 > 9;
    v45 /= 0xAuLL;
  }
  while (v46);
  if ((v44 & 0x80000000) == 0)
  {
    BOOL v47 = __OFADD__(v44, 1);
    int v48 = v44 + 1;
    if (!v47)
    {
      uint64_t v49 = (v48 + 6);
      if (!__OFADD__(v48, 6))
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(v49 + 20));
        uint64_t v50 = v81;
        if (v81)
        {
          uint64_t v51 = 0;
          *(_DWORD *)int v81 = 2;
          *((_DWORD *)v50 + 1) = v49;
          *((void *)v50 + 1) = (char *)v50 + 20;
          *((void *)v50 + objc_destroyWeak(this + 2) = 0x6574796200000004;
          unint64_t v52 = a6;
          *((_WORD *)v50 + 1objc_destroyWeak(this + 2) = 15731;
          do
          {
            *((unsigned char *)v83 + v51-- + 8) = (v52 % 0xA) | 0x30;
            BOOL v46 = v52 > 9;
            v52 /= 0xAuLL;
          }
          while (v46);
          if (v51 + 26 <= 25) {
            memcpy((char *)v50 + 26, (char *)v83 + v51 + 9, -v51);
          }
          unsigned int v53 = 0;
          do
          {
            ++v53;
            BOOL v54 = a6 >= 0xA;
            a6 /= 0xAuLL;
          }
          while (v54);
          *((unsigned char *)v50 + v53 + 26) = 45;
          int v81 = v50;
          WebCore::ResourceRequestBase::setHTTPHeaderField();
          int v56 = v81;
          int v81 = 0;
          if (v56)
          {
            if (*(_DWORD *)v56 == 2) {
              WTF::StringImpl::destroy(v56, v55);
            }
            else {
              *(_DWORD *)v56 -= 2;
            }
          }
          goto LABEL_82;
        }
      }
    }
  }
  __break(0xC471u);
  return result;
}

void WebKit::BackgroundFetchLoad::~BackgroundFetchLoad(WebKit::BackgroundFetchLoad *this, void *a2)
{
  WebKit::BackgroundFetchLoad::abort((atomic_uchar *)this, a2);
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 256, v3);
  std::unique_ptr<WebKit::NetworkLoadChecker>::reset[abi:sn180100]((WebKit::NetworkLoadChecker **)this + 31, 0);
  uint64_t v4 = *((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v4 + 8));
  }
  unsigned int v5 = (const void *)*((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::BackgroundFetchLoad *)((char *)this + 40));
  int v7 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v6);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::BackgroundFetchLoad::~BackgroundFetchLoad(this, a2);

  WTF::fastFree(v2, v3);
}

atomic_uchar *WebKit::BackgroundFetchLoad::abort(atomic_uchar *this, void *a2)
{
  uint64_t v2 = *((void *)this + 30);
  if (v2)
  {
    uint64_t v3 = this;
    uint64_t v4 = *(unsigned int **)(v2 + 24);
    *(void *)(v2 + 24) = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
    this = (atomic_uchar *)(*(uint64_t (**)(void))(**((void **)v3 + 30) + 16))(*((void *)v3 + 30));
    uint64_t v5 = *((void *)v3 + 30);
    *((void *)v3 + 30) = 0;
    if (v5)
    {
      uint64_t v6 = *(atomic_uchar **)(v5 + 8);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(v6);
    }
  }
  return this;
}

void non-virtual thunk to'WebKit::BackgroundFetchLoad::~BackgroundFetchLoad(WebKit::BackgroundFetchLoad *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::BackgroundFetchLoad::~BackgroundFetchLoad((WebKit::BackgroundFetchLoad *)((char *)this - 8), a2);

  WTF::fastFree(v2, v3);
}

void WebKit::BackgroundFetchLoad::willPerformHTTPRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 248);
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)v15);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 16), a1 + 8);
  uint64_t v9 = *(atomic_uint **)(a1 + 16);
  if (v9) {
    atomic_fetch_add(v9, 1u);
  }
  uint64_t v10 = *a4;
  *a4 = 0;
  uint64_t v11 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v11 = &unk_1EE9C3278;
  *((void *)v11 + 1) = v9;
  *((void *)v11 + objc_destroyWeak(this + 2) = v10;
  uint64_t v14 = v11;
  WebKit::NetworkLoadChecker::checkRedirection(v8, (uint64_t)v15, a3, a2, 0, &v14);
  uint64_t v12 = v14;
  uint64_t v14 = 0;
  if (v12) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v12 + 8))(v12);
  }
  CFTypeRef v13 = cf;
  CFTypeRef cf = 0;
  if (v13) {
    CFRelease(v13);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v15);
}

void non-virtual thunk to'WebKit::BackgroundFetchLoad::willPerformHTTPRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
}

WTF::StringImpl *WebKit::BackgroundFetchLoad::didReceiveChallenge(uint64_t a1, WebCore::AuthenticationChallengeBase *a2, char a3, uint64_t *a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = a1;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - BackgroundFetchLoad::didReceiveChallenge", (uint8_t *)&buf, 0xCu);
  }
  if (*(unsigned char *)(WebCore::AuthenticationChallengeBase::protectionSpace(a2) + 21) == 8)
  {
    uint64_t v9 = (uint64_t *)(*(void *)(*(void *)(a1 + 248) + 80) + 208);
    *(void *)&long long buf = "AuthenticationManager";
    *((void *)&buf + 1) = 22;
    uint64_t v10 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v9, (WTF::ASCIILiteralHash *)&buf);
    return (WTF::StringImpl *)WebKit::AuthenticationManager::didReceiveAuthenticationChallenge((uint64_t)v10, *(void *)(a1 + 24), 0, 0, a2, a3, a4);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 16), a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12) {
    atomic_fetch_add((atomic_uint *volatile)v12, 1u);
  }
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&buf);
  CFTypeRef v36 = 0;
  uint64_t v13 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v13 + 16))(v13, 2, &buf);
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  CFTypeRef v15 = v36;
  CFTypeRef v36 = 0;
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v16 = (WTF::StringImpl *)*((void *)&buf + 1);
  *((void *)&buf + 1) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v14);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t result = (WTF::StringImpl *)buf;
  *(void *)&long long buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      if (!v12) {
        return result;
      }
      goto LABEL_19;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v12) {
    return result;
  }
LABEL_19:
  if (!*(void *)(v12 + 8)) {
    goto LABEL_45;
  }
  uint64_t v17 = *(void *)(a1 + 248);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  int v18 = (WTF::StringImpl *)buf;
  char v26 = 0;
  long long v19 = *(WTF::StringImpl **)(v17 + 160);
  if (v19) {
    *(_DWORD *)v19 += 2;
  }
  uint64_t v27 = v19;
  long long v20 = *(_OWORD *)(v17 + 184);
  long long v28 = *(_OWORD *)(v17 + 168);
  long long v29 = v20;
  if (v18) {
    *(_DWORD *)v18 += 2;
  }
  uint64_t v30 = v18;
  int v31 = 0;
  __int16 v32 = 2;
  CFTypeRef v33 = 0;
  char v34 = 1;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&buf);
  CFTypeRef cf = 0;
  char v39 = 0;
  char v37 = v37 & 0xF1 | 4;
  (*(void (**)(void, WTF::StringImpl **))(**(void **)(*(void *)(a1 + 32) + 8) + 40))(*(void *)(*(void *)(a1 + 32) + 8), &v26);
  CFTypeRef v22 = cf;
  CFTypeRef cf = 0;
  if (v22) {
    CFRelease(v22);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&buf, v21);
  CFTypeRef v23 = v33;
  CFTypeRef v33 = 0;
  if (v23) {
    CFRelease(v23);
  }
  uint64_t v24 = v30;
  uint64_t v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v14);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  uint64_t v25 = v27;
  uint64_t v27 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v14);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  uint64_t result = v26;
  char v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      if (!v18) {
        goto LABEL_45;
      }
LABEL_42:
      if (*(_DWORD *)v18 == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v18, v14);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
      goto LABEL_45;
    }
    *(_DWORD *)result -= 2;
  }
  if (v18) {
    goto LABEL_42;
  }
LABEL_45:
  if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v12);
    return (WTF::StringImpl *)WTF::fastFree((WTF *)v12, v14);
  }
  return result;
}

WTF::StringImpl *non-virtual thunk to'WebKit::BackgroundFetchLoad::didReceiveChallenge(uint64_t a1, WebCore::AuthenticationChallengeBase *a2, char a3, uint64_t *a4)
{
  return WebKit::BackgroundFetchLoad::didReceiveChallenge(a1 - 8, a2, a3, a4);
}

WTF::StringImpl *WebKit::BackgroundFetchLoad::didReceiveResponse(uint64_t a1, WebCore::ResourceResponseBase *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218240;
    uint64_t v30 = a1;
    __int16 v31 = 1024;
    LODWORD(v3objc_destroyWeak(this + 2) = WebCore::ResourceResponseBase::httpStatusCode(a2);
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - BackgroundFetchLoad::didReceiveResponse - httpStatusCode=%d", buf, 0x12u);
  }
  WebKit::NetworkLoadChecker::validateResponse(*(WebKit::NetworkLoadChecker **)(a1 + 248), (const WebCore::ResourceRequest *)(a1 + 40), (WebCore::AdditionalNetworkLoadMetricsForWebInspector ***)a2, (uint64_t)&v23);
  if (v27)
  {
    uint64_t v9 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      MEMORY[0x19973EC60](&v23);
      WTF::String::utf8();
      uint64_t v10 = v22 ? (uint64_t)v22 + 16 : 0;
      MEMORY[0x19973EC60](&v23);
      *(_DWORD *)long long buf = 134218498;
      uint64_t v30 = a1;
      __int16 v31 = 2082;
      uint64_t v32 = v10;
      __int16 v33 = 1024;
      int v34 = v26;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%p - BackgroundFetchLoad::didReceiveResponse: NetworkLoadChecker::validateResponse returned an error (error.domain=%{public}s, error.code=%d)", buf, 0x1Cu);
      if (v22)
      {
        if (*(_DWORD *)v22 == 1) {
          WTF::fastFree(v22, v11);
        }
        else {
          --*(_DWORD *)v22;
        }
      }
    }
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 16), a1 + 8);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12) {
      atomic_fetch_add((atomic_uint *volatile)v12, 1u);
    }
    uint64_t v15 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, 2);
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    if (v12)
    {
      if (*(void *)(v12 + 8))
      {
        WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
        CFTypeRef cf = 0;
        char v37 = 0;
        char v35 = v35 & 0xF1 | 4;
        (*(void (**)(void, WTF::StringImpl **))(**(void **)(*(void *)(a1 + 32) + 8) + 40))(*(void *)(*(void *)(a1 + 32) + 8), &v23);
        CFTypeRef v17 = cf;
        CFTypeRef cf = 0;
        if (v17) {
          CFRelease(v17);
        }
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v16);
      }
LABEL_24:
      if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v12);
        WTF::fastFree((WTF *)v12, v14);
      }
    }
  }
  else
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 16), a1 + 8);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12) {
      atomic_fetch_add((atomic_uint *volatile)v12, 1u);
    }
    uint64_t v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v13 + 16))(v13, 0);
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    if (v12)
    {
      if (*(void *)(v12 + 8)) {
        (*(void (**)(void, WebCore::ResourceResponseBase *))(**(void **)(*(void *)(a1 + 32) + 8)
      }
                                                                        + 24))(*(void *)(*(void *)(a1 + 32) + 8), a2);
      goto LABEL_24;
    }
  }
  CFTypeRef v18 = v28;
  CFTypeRef v28 = 0;
  if (v18) {
    CFRelease(v18);
  }
  long long v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v14);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  long long v20 = v24;
  uint64_t v24 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v14);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t result = v23;
  CFTypeRef v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *non-virtual thunk to'WebKit::BackgroundFetchLoad::didReceiveResponse(uint64_t a1, WebCore::ResourceResponseBase *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return WebKit::BackgroundFetchLoad::didReceiveResponse(a1 - 8, a2, 0, 0, a5);
}

uint64_t WebKit::BackgroundFetchLoad::didReceiveData(WebKit::BackgroundFetchLoad *this, const WebCore::SharedBuffer *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 134217984;
    int v7 = this;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - BackgroundFetchLoad::didReceiveData", (uint8_t *)&v6, 0xCu);
  }
  return (*(uint64_t (**)(void, const WebCore::SharedBuffer *))(**(void **)(*((void *)this + 4) + 8)
                                                                          + 32))(*(void *)(*((void *)this + 4) + 8), a2);
}

uint64_t non-virtual thunk to'WebKit::BackgroundFetchLoad::didReceiveData(WebKit::BackgroundFetchLoad *this, const WebCore::SharedBuffer *a2)
{
  return WebKit::BackgroundFetchLoad::didReceiveData((WebKit::BackgroundFetchLoad *)((char *)this - 8), a2);
}

void WebKit::BackgroundFetchLoad::didCompleteWithError(WebKit::BackgroundFetchLoad *this, const WebCore::ResourceError *a2, const WebCore::NetworkLoadMetrics *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v5 = *((unsigned __int8 *)a2 + 60);
  int v6 = off_1EB358988;
  BOOL v7 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (!v7) {
      goto LABEL_7;
    }
    MEMORY[0x19973EC60](a2);
    int v8 = *((_DWORD *)a2 + 14);
    int v14 = 134218240;
    uint64_t v15 = this;
    __int16 v16 = 1024;
    int v17 = v8;
    uint64_t v9 = "%p - BackgroundFetchLoad::didCompleteWithError, error_code=%d";
    uint64_t v10 = v6;
    uint32_t v11 = 18;
  }
  else
  {
    if (!v7) {
      goto LABEL_7;
    }
    int v14 = 134217984;
    uint64_t v15 = this;
    uint64_t v9 = "%p - BackgroundFetchLoad::didComplete";
    uint64_t v10 = v6;
    uint32_t v11 = 12;
  }
  _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v14, v11);
LABEL_7:
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v14);
  CFTypeRef cf = 0;
  char v20 = 0;
  char v18 = v18 & 0xF1 | 4;
  (*(void (**)(void, const WebCore::ResourceError *))(**(void **)(*((void *)this + 4) + 8) + 40))(*(void *)(*((void *)this + 4) + 8), a2);
  CFTypeRef v13 = cf;
  CFTypeRef cf = 0;
  if (v13) {
    CFRelease(v13);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v14, v12);
}

void non-virtual thunk to'WebKit::BackgroundFetchLoad::didCompleteWithError(WebKit::BackgroundFetchLoad *this, const WebCore::ResourceError *a2, const WebCore::NetworkLoadMetrics *a3)
{
}

uint64_t WebKit::BackgroundFetchLoad::didSendData(WebKit::BackgroundFetchLoad *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 16))();
}

uint64_t non-virtual thunk to'WebKit::BackgroundFetchLoad::didSendData(WebKit::BackgroundFetchLoad *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 3) + 8) + 16))();
}

void WebKit::BackgroundFetchLoad::wasBlocked(WebKit::BackgroundFetchLoad *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    char v18 = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - BackgroundFetchLoad::wasBlocked", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v11, (const String *)(*((void *)this + 31) + 160), 0);
  CFTypeRef v12 = 0;
  WebKit::blockedError((WebKit *)v11, (uint64_t)&v13);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
  CFTypeRef cf = 0;
  char v21 = 0;
  char v19 = v19 & 0xF1 | 4;
  (*(void (**)(void, WTF::StringImpl **))(**(void **)(*((void *)this + 4) + 8) + 40))(*(void *)(*((void *)this + 4) + 8), &v13);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v3);
  CFTypeRef v6 = v16;
  CFTypeRef v16 = 0;
  if (v6) {
    CFRelease(v6);
  }
  BOOL v7 = v15;
  uint64_t v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  int v8 = v14;
  int v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v13;
  CFTypeRef v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v5);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  CFTypeRef v10 = v12;
  CFTypeRef v12 = 0;
  if (v10) {
    CFRelease(v10);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v11);
}

void non-virtual thunk to'WebKit::BackgroundFetchLoad::wasBlocked(WebKit::BackgroundFetchLoad *this)
{
}

void WebKit::BackgroundFetchLoad::cannotShowURL(WebKit::BackgroundFetchLoad *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    char v18 = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - BackgroundFetchLoad::cannotShowURL", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v11, (const String *)(*((void *)this + 31) + 160), 0);
  CFTypeRef v12 = 0;
  WebKit::cannotShowURLError((WebKit *)v11, (uint64_t)&v13);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
  CFTypeRef cf = 0;
  char v21 = 0;
  char v19 = v19 & 0xF1 | 4;
  (*(void (**)(void, WTF::StringImpl **))(**(void **)(*((void *)this + 4) + 8) + 40))(*(void *)(*((void *)this + 4) + 8), &v13);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v3);
  CFTypeRef v6 = v16;
  CFTypeRef v16 = 0;
  if (v6) {
    CFRelease(v6);
  }
  BOOL v7 = v15;
  uint64_t v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  int v8 = v14;
  int v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v13;
  CFTypeRef v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v5);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  CFTypeRef v10 = v12;
  CFTypeRef v12 = 0;
  if (v10) {
    CFRelease(v10);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v11);
}

void non-virtual thunk to'WebKit::BackgroundFetchLoad::cannotShowURL(WebKit::BackgroundFetchLoad *this)
{
}

void WebKit::BackgroundFetchLoad::wasBlockedByRestrictions(WebKit::BackgroundFetchLoad *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    char v18 = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - BackgroundFetchLoad::wasBlockedByRestrictions", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v11, (const String *)(*((void *)this + 31) + 160), 0);
  CFTypeRef v12 = 0;
  WebKit::wasBlockedByRestrictionsError((WebKit *)v11, (uint64_t)&v13);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
  CFTypeRef cf = 0;
  char v21 = 0;
  char v19 = v19 & 0xF1 | 4;
  (*(void (**)(void, WTF::StringImpl **))(**(void **)(*((void *)this + 4) + 8) + 40))(*(void *)(*((void *)this + 4) + 8), &v13);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v3);
  CFTypeRef v6 = v16;
  CFTypeRef v16 = 0;
  if (v6) {
    CFRelease(v6);
  }
  BOOL v7 = v15;
  uint64_t v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  int v8 = v14;
  int v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v13;
  CFTypeRef v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v5);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  CFTypeRef v10 = v12;
  CFTypeRef v12 = 0;
  if (v10) {
    CFRelease(v10);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v11);
}

void non-virtual thunk to'WebKit::BackgroundFetchLoad::wasBlockedByRestrictions(WebKit::BackgroundFetchLoad *this)
{
}

void WebKit::BackgroundFetchLoad::wasBlockedByDisabledFTP(WebKit::BackgroundFetchLoad *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    char v18 = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - BackgroundFetchLoad::wasBlockedByDisabledFTP", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v11, (const String *)(*((void *)this + 31) + 160), 0);
  CFTypeRef v12 = 0;
  WebKit::ftpDisabledError((WebKit *)v11, (uint64_t)&v13);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
  CFTypeRef cf = 0;
  char v21 = 0;
  char v19 = v19 & 0xF1 | 4;
  (*(void (**)(void, WTF::StringImpl **))(**(void **)(*((void *)this + 4) + 8) + 40))(*(void *)(*((void *)this + 4) + 8), &v13);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v3);
  CFTypeRef v6 = v16;
  CFTypeRef v16 = 0;
  if (v6) {
    CFRelease(v6);
  }
  BOOL v7 = v15;
  uint64_t v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  int v8 = v14;
  int v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v13;
  CFTypeRef v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v5);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  CFTypeRef v10 = v12;
  CFTypeRef v12 = 0;
  if (v10) {
    CFRelease(v10);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v11);
}

void non-virtual thunk to'WebKit::BackgroundFetchLoad::wasBlockedByDisabledFTP(WebKit::BackgroundFetchLoad *this)
{
}

void WebKit::DatabaseUtilities::~DatabaseUtilities(WebKit::DatabaseUtilities *this)
{
  *(void *)this = &unk_1EE9C2F38;
  MEMORY[0x199733E80]((char *)this + 80);
  WebCore::SQLiteDatabase::~SQLiteDatabase((WebKit::DatabaseUtilities *)((char *)this + 16));
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
}

void *WebKit::DatabaseUtilities::beginTransactionIfNecessary@<X0>(WebKit::DatabaseUtilities *this@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)this + 88))
  {
    uint64_t result = (void *)WTF::fastMalloc((WTF *)0x10);
    void *result = &unk_1EE9C32A0;
  }
  else
  {
    WebCore::SQLiteTransaction::begin((WebKit::DatabaseUtilities *)((char *)this + 80));
    uint64_t result = (void *)WTF::fastMalloc((WTF *)0x10);
    void *result = &unk_1EE9C32C8;
    result[1] = this;
  }
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

void WebKit::DatabaseUtilities::enableForeignKeys(WebKit::DatabaseUtilities *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (WebKit::DatabaseUtilities *)((char *)this + 16);
  WebCore::SQLiteDatabase::prepareStatement();
  if (v6 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v5) != 101)
  {
    uint64_t v3 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
      *(_DWORD *)long long buf = 134218243;
      int v8 = this;
      __int16 v9 = 2081;
      uint64_t v10 = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, "%p - DatabaseUtilities::enableForeignKeys failed, error message: %{private}s", buf, 0x16u);
    }
  }
  if (v6 != -1) {
    (*(&off_1EE9C31A0 + v6))((int)buf, (WebCore::SQLiteStatement *)v5);
  }
}

uint64_t WebKit::DatabaseUtilities::close(WebKit::DatabaseUtilities *this)
{
  uint64_t result = (*(uint64_t (**)(WebKit::DatabaseUtilities *))(*(void *)this + 16))(this);
  if (*((void *)this + 3))
  {
    return MEMORY[0x1F416DD08]((char *)this + 16);
  }
  return result;
}

WTF::StringImpl *WebKit::DatabaseUtilities::buildPrivateClickMeasurementFromDatabase@<X0>(WebCore::SQLiteStatement *this@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = WebCore::SQLiteStatement::columnInt(this);
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 24))(&v70, a2, v8);
  uint64_t v9 = WebCore::SQLiteStatement::columnInt(this);
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 24))(&v69, a2, v9);
  char v10 = WebCore::SQLiteStatement::columnInt(this);
  WebCore::SQLiteStatement::columnDouble(this);
  uint64_t v12 = v11;
  WebCore::SQLiteStatement::columnText(this);
  WebCore::SQLiteStatement::columnText(this);
  WebCore::SQLiteStatement::columnText(this);
  WebCore::SQLiteStatement::columnText(this);
  if (!v65 || !*((_DWORD *)v65 + 1))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v14 = v65;
    uint64_t v65 = v52;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v70, &v52);
  uint64_t v15 = v52;
  unint64_t v52 = 0;
  WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v69, &v64);
  int v17 = v64;
  int v64 = 0;
  *(unsigned char *)a4 = v10;
  if (v15) {
    *(_DWORD *)v15 += 2;
  }
  *(void *)(a4 + 8) = v15;
  if (v17) {
    *(_DWORD *)v17 += 2;
  }
  *(unsigned char *)(a4 + 56) = 0;
  *(void *)(a4 + ++*(_DWORD *)(this + 16) = v17;
  *(void *)(a4 + 24) = v12;
  *(unsigned char *)(a4 + 3objc_destroyWeak(this + 2) = 0;
  *(unsigned char *)(a4 + 40) = 0;
  *(unsigned char *)(a4 + 48) = 0;
  *(unsigned char *)(a4 + 184) = 0;
  *(unsigned char *)(a4 + 19objc_destroyWeak(this + 2) = 0;
  *(unsigned char *)(a4 + 200) = 0;
  *(unsigned char *)(a4 + 208) = 0;
  *(unsigned char *)(a4 + 2++*(_DWORD *)(this + 16) = 0;
  *(unsigned char *)(a4 + 224) = 0;
  *(unsigned char *)(a4 + 23objc_destroyWeak(this + 2) = 0;
  *(unsigned char *)(a4 + 296) = 0;
  *(_OWORD *)(a4 + 240) = 0u;
  *(_OWORD *)(a4 + 256) = 0u;
  *(unsigned char *)(a4 + 27objc_destroyWeak(this + 2) = 0;
  char v18 = v65;
  if (v65) {
    *(_DWORD *)v65 += 2;
  }
  *(void *)(a4 + 304) = v18;
  if (v17)
  {
    int v19 = *(_DWORD *)v17 - 2;
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy(v17, v16);
      int v17 = v64;
      int v64 = 0;
      if (!v17) {
        goto LABEL_18;
      }
      int v19 = *(_DWORD *)v17 - 2;
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v16);
        if (!v15) {
          goto LABEL_22;
        }
        goto LABEL_19;
      }
    }
    *(_DWORD *)int v17 = v19;
  }
LABEL_18:
  if (!v15) {
    goto LABEL_22;
  }
LABEL_19:
  if (*(_DWORD *)v15 == 2) {
    WTF::StringImpl::destroy(v15, v16);
  }
  else {
    *(_DWORD *)v15 -= 2;
  }
LABEL_22:
  char v20 = v52;
  unint64_t v52 = 0;
  if (!v20) {
    goto LABEL_25;
  }
  if (*(_DWORD *)v20 != 2)
  {
    *(_DWORD *)v20 -= 2;
LABEL_25:
    if (!a3) {
      goto LABEL_69;
    }
    goto LABEL_28;
  }
  WTF::StringImpl::destroy(v20, v16);
  if (!a3) {
    goto LABEL_69;
  }
LABEL_28:
  int v21 = WebCore::SQLiteStatement::columnInt(this);
  unsigned __int8 v22 = WebCore::SQLiteStatement::columnInt(this);
  WebCore::SQLiteStatement::columnDouble(this);
  double v24 = v23;
  WebCore::SQLiteStatement::columnDouble(this);
  double v26 = v25;
  WebCore::SQLiteStatement::columnText(this);
  WebCore::SQLiteStatement::columnText(this);
  WebCore::SQLiteStatement::columnText(this);
  if (v21 != -1)
  {
    LOBYTE(v5objc_destroyWeak(this + 2) = v21;
    *(_WORD *)((char *)&v52 + 1) = v22;
    LOBYTE(v53) = 0;
    LOBYTE(v54) = 0;
    LOBYTE(v55) = 0;
    char v56 = 0;
    LOBYTE(v57) = 0;
    char v58 = 0;
    LOBYTE(v59[0]) = 0;
    char v60 = 0;
    v61[0] = 0;
    v61[24] = 0;
    if (*(unsigned char *)(a4 + 184))
    {
      *(_WORD *)(a4 + 56) = (_WORD)v52;
      *(unsigned char *)(a4 + 58) = BYTE2(v52);
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>((uint64_t *)(a4 + 64), (uint64_t *)&v53);
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>((uint64_t *)(a4 + 80), (uint64_t *)&v55);
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>((uint64_t *)(a4 + 96), (uint64_t *)&v57);
      std::__optional_storage_base<WebCore::PCM::DestinationUnlinkableToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationUnlinkableToken,false>>(a4 + 112, v59);
      std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationSecretToken,false>>((uint64_t *)(a4 + 152), (uint64_t)v61);
    }
    else
    {
      std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(a4 + 56, (uint64_t)&v52);
      *(unsigned char *)(a4 + 184) = 1;
    }
    std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v61, v27);
    std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v59, v28);
    if (v58)
    {
      uint64_t v50 = v57;
      uint64_t v57 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2) {
          WTF::StringImpl::destroy(v50, v29);
        }
        else {
          *(_DWORD *)v50 -= 2;
        }
      }
    }
    if (v56)
    {
      uint64_t v30 = v55;
      uint64_t v55 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2) {
          WTF::StringImpl::destroy(v30, v29);
        }
        else {
          *(_DWORD *)v30 -= 2;
        }
      }
    }
    if ((_BYTE)v54)
    {
      uint64_t v51 = v53;
      unsigned int v53 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2) {
          WTF::StringImpl::destroy(v51, v29);
        }
        else {
          *(_DWORD *)v51 -= 2;
        }
      }
    }
  }
  unint64_t v52 = 0;
  unsigned int v53 = 0;
  BOOL v54 = 0;
  WTF::String::operator=((uint64_t *)&v52, &v64);
  WTF::String::operator=((uint64_t *)&v53, &v63);
  WTF::String::operator=((uint64_t *)&v54, &v62);
  WebCore::PrivateClickMeasurement::setDestinationSecretToken();
  double v32 = v24;
  if (v24 <= 0.0) {
    double v32 = 0.0;
  }
  double v33 = v26;
  if (v26 <= 0.0) {
    double v33 = 0.0;
  }
  *(double *)(a4 + 19objc_destroyWeak(this + 2) = v32;
  *(unsigned char *)(a4 + 200) = v24 > 0.0;
  *(double *)(a4 + 208) = v33;
  *(unsigned char *)(a4 + 2++*(_DWORD *)(this + 16) = v26 > 0.0;
  int v34 = v54;
  BOOL v54 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, v31);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  char v35 = v53;
  unsigned int v53 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2) {
      WTF::StringImpl::destroy(v35, v31);
    }
    else {
      *(_DWORD *)v35 -= 2;
    }
  }
  CFTypeRef v36 = v52;
  unint64_t v52 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, v31);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
  char v37 = v62;
  uint64_t v62 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2) {
      WTF::StringImpl::destroy(v37, v31);
    }
    else {
      *(_DWORD *)v37 -= 2;
    }
  }
  uint64_t v38 = v63;
  CFTypeRef v63 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, v31);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  char v39 = v64;
  int v64 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2) {
      WTF::StringImpl::destroy(v39, v31);
    }
    else {
      *(_DWORD *)v39 -= 2;
    }
  }
LABEL_69:
  unint64_t v52 = 0;
  unsigned int v53 = 0;
  BOOL v54 = 0;
  WTF::String::operator=((uint64_t *)&v52, &v68);
  WTF::String::operator=((uint64_t *)&v53, &v67);
  WTF::String::operator=((uint64_t *)&v54, &v66);
  WebCore::PrivateClickMeasurement::setSourceSecretToken();
  int v41 = v54;
  BOOL v54 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, v40);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  CFTypeRef v42 = v53;
  unsigned int v53 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, v40);
    }
    else {
      *(_DWORD *)v42 -= 2;
    }
  }
  int v43 = v52;
  unint64_t v52 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2) {
      WTF::StringImpl::destroy(v43, v40);
    }
    else {
      *(_DWORD *)v43 -= 2;
    }
  }
  int v44 = v65;
  uint64_t v65 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2) {
      WTF::StringImpl::destroy(v44, v40);
    }
    else {
      *(_DWORD *)v44 -= 2;
    }
  }
  unint64_t v45 = v66;
  uint64_t v66 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v40);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  BOOL v46 = v67;
  uint64_t v67 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2) {
      WTF::StringImpl::destroy(v46, v40);
    }
    else {
      *(_DWORD *)v46 -= 2;
    }
  }
  BOOL v47 = v68;
  int v68 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2) {
      WTF::StringImpl::destroy(v47, v40);
    }
    else {
      *(_DWORD *)v47 -= 2;
    }
  }
  int v48 = v69;
  __int16 v69 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2) {
      WTF::StringImpl::destroy(v48, v40);
    }
    else {
      *(_DWORD *)v48 -= 2;
    }
  }
  uint64_t result = v70;
  CFTypeRef v70 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v40);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::DatabaseUtilities::addMissingColumnToTable(uint64_t a1, unsigned char *a2, uint64_t a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a3) {
    size_t v5 = a3 - 1;
  }
  else {
    size_t v5 = 0;
  }
  if (v5 >> 31) {
    goto LABEL_43;
  }
  if (a5) {
    size_t v6 = a5 - 1;
  }
  else {
    size_t v6 = 0;
  }
  if (v6 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198B38FB4);
  }
  int v7 = v6 + 12;
  if (__OFADD__(v6, 12)) {
    goto LABEL_43;
  }
  BOOL v8 = __OFADD__(v5, v7);
  int v9 = v5 + v7;
  if (v8) {
    goto LABEL_43;
  }
  uint64_t v10 = (v9 + 12);
  if (__OFADD__(v9, 12)) {
    goto LABEL_43;
  }
  if (v9 == -12)
  {
    uint64_t v14 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_21;
  }
  if ((v10 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v10 + 20)), (uint64_t v14 = v25[0]) == 0))
  {
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x198B38F94);
  }
  *(_DWORD *)v25[0] = 2;
  *(_DWORD *)(v14 + 4) = v10;
  *(void *)(v14 + 20) = *(void *)"ALTER TABLE ";
  *(void *)(v14 + 8) = v14 + 20;
  *(_DWORD *)(v14 + ++*(_DWORD *)(this + 16) = 4;
  *(_DWORD *)(v14 + 28) = 541412418;
  uint64_t v15 = (unsigned char *)(v14 + 32);
  if (v5)
  {
    if (v5 == 1) {
      unsigned char *v15 = *a2;
    }
    else {
      memcpy((void *)(v14 + 32), a2, v5);
    }
  }
  CFTypeRef v16 = &v15[v5];
  *(void *)CFTypeRef v16 = *(void *)" ADD COLUMN ";
  *((_DWORD *)v16 + objc_destroyWeak(this + 2) = 542002517;
  if (v6)
  {
    int v17 = v16 + 12;
    if (v6 == 1) {
      unsigned char *v17 = *a4;
    }
    else {
      memcpy(v17, a4, v6);
    }
  }
LABEL_21:
  WebCore::SQLiteDatabase::prepareStatementSlow();
  if (*(_DWORD *)v14 == 2) {
    WTF::StringImpl::destroy((WTF::StringImpl *)v14, v18);
  }
  else {
    *(_DWORD *)v14 -= 2;
  }
  unsigned int v19 = v26;
  if (v26)
  {
    char v20 = qword_1EB3582F8;
    if (!os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = 0;
      goto LABEL_35;
    }
    *(_DWORD *)long long buf = 134218243;
    uint64_t v28 = a1;
    __int16 v29 = 2081;
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
    double v23 = "%p - Database::addMissingColumnToTable Unable to prepare statement to add missing columns to table, error mess"
          "age: %{private}s";
    goto LABEL_32;
  }
  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v25) != 101)
  {
    char v20 = qword_1EB3582F8;
    if (!os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
LABEL_33:
      uint64_t v21 = 0;
      goto LABEL_34;
    }
    uint64_t v22 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
    *(_DWORD *)long long buf = 134218243;
    uint64_t v28 = a1;
    __int16 v29 = 2081;
    uint64_t ErrorMsg = v22;
    double v23 = "%p - Database::addMissingColumnToTable error executing statement to add missing columns to table, error message: %{private}s";
LABEL_32:
    _os_log_error_impl(&dword_1985F2000, v20, OS_LOG_TYPE_ERROR, v23, buf, 0x16u);
    goto LABEL_33;
  }
  uint64_t v21 = 1;
LABEL_34:
  unsigned int v19 = v26;
LABEL_35:
  if (v19 != -1) {
    (*(&off_1EE9C31A0 + v19))((int)buf, (WebCore::SQLiteStatement *)v25);
  }
  return v21;
}

void WebKit::EarlyHintsResourceLoader::~EarlyHintsResourceLoader(WebKit::EarlyHintsResourceLoader *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C2F80;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::EarlyHintsResourceLoader::~EarlyHintsResourceLoader(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::EarlyHintsResourceLoader::addConsoleMessage(uint64_t result, char a2, char a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      long long v13 = *(_OWORD *)(v5 + 48);
      uint64_t v11 = *(void *)(v5 + 3000);
      char v12 = 1;
      uint64_t v14 = &v13;
      char v15 = a2;
      char v16 = a3;
      uint64_t v17 = a4;
      char v18 = &v11;
      uint64_t v6 = *(void *)(v5 + 40);
      if (v6)
      {
        int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)int v7 = 2135;
        *((void *)v7 + 1) = v6;
        *((void *)v7 + 66) = (char *)v7 + 16;
        *((void *)v7 + 67) = 512;
        *((void *)v7 + 68) = 0;
        *((void *)v7 + 70) = 0;
        *((void *)v7 + 69) = 0;
        IPC::Encoder::encodeHeader(v7);
        unsigned int v19 = v7;
        IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,0ul,1ul,2ul,3ul,4ul>(v7, (uint64_t)&v14);
        (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v5 - 32) + 32))(v5 - 32, &v19, 0);
        uint64_t result = (uint64_t)v19;
        unsigned int v19 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
          return WTF::fastFree(v9, v10);
        }
      }
      else
      {
        uint64_t result = 145;
        __break(0xC471u);
      }
    }
  }
  return result;
}

uint64_t WebKit::EarlyHintsResourceLoader::handleEarlyHintsResponse(uint64_t a1, WebCore::ResourceResponseBase *this)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  uint64_t result = WebCore::ResourceResponseBase::httpStatusCode(this);
  if (result != 103)
  {
    __break(0xC471u);
    goto LABEL_185;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      if (*(unsigned char *)(v6 + 267) == 1 && !*(_DWORD *)(v6 + 3300))
      {
        int v7 = (WTF::URL *)WebCore::ResourceResponseBase::url(this);
        uint64_t result = WTF::URL::protocol(v7);
        if ((char *)result == "https" || v8 != 5)
        {
          if ((char *)result != "https" || v8 != 5) {
            return result;
          }
        }
        else if ((v8 & 0xFF00000000) != 0)
        {
          if (*(unsigned char *)result != 104 || *(_WORD *)(result + 1) != 29812 || *(_WORD *)(result + 3) != 29552) {
            return result;
          }
        }
        else if (*(_WORD *)result != 104 || *(void *)(result + 2) != 0x73007000740074)
        {
          return result;
        }
        uint64_t result = *(void *)WebCore::ResourceResponseBase::httpVersion(this);
        if (!result || (uint64_t result = WTF::StringImpl::startsWith(), (result & 1) == 0))
        {
          if (!*(unsigned char *)(a1 + 16))
          {
            *(unsigned char *)(a1 + ++*(_DWORD *)(this + 16) = 1;
            WebCore::ResourceResponseBase::httpHeaderField();
            uint64_t result = (uint64_t)v81;
            if (v81)
            {
              if (!*((_DWORD *)v81 + 1))
              {
                int v81 = 0;
LABEL_174:
                if (*(_DWORD *)result == 2) {
                  return WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
                }
                *(_DWORD *)result -= 2;
                return result;
              }
              uint64_t v10 = WebCore::ResourceResponseBase::url(this);
              uint64_t v11 = *(WTF::StringImpl **)v10;
              if (*(void *)v10)
              {
                int v12 = *(_DWORD *)v11;
                *(_DWORD *)v11 += 2;
                long long v13 = *(_OWORD *)(v10 + 24);
                long long v79 = *(_OWORD *)(v10 + 8);
                long long v80 = v13;
                *(_DWORD *)uint64_t v11 = v12 + 4;
              }
              else
              {
                long long v73 = *(_OWORD *)(v10 + 24);
                long long v79 = *(_OWORD *)(v10 + 8);
                long long v80 = v73;
              }
              long long v95 = v11;
              *(_OWORD *)long long v96 = v79;
              *(_OWORD *)&v96[16] = v80;
              MEMORY[0x199735820](v78, &v95, a1, 0);
              char v15 = v95;
              long long v95 = 0;
              if (v15)
              {
                if (*(_DWORD *)v15 == 2) {
                  WTF::StringImpl::destroy(v15, v14);
                }
                else {
                  *(_DWORD *)v15 -= 2;
                }
              }
              MEMORY[0x199739C00](&v95, this);
              uint64_t v16 = *(void *)(a1 + 8);
              if (v16)
              {
                uint64_t v17 = *(void *)(v16 + 8);
                if (v17) {
                  uint64_t v16 = v17 - 48;
                }
                else {
                  uint64_t v16 = 0;
                }
              }
              WebCore::ResourceRequestBase::httpReferrer((uint64_t *)v82, (WebCore::ResourceRequestBase *)(v16 + 168));
              WebCore::ContentSecurityPolicy::didReceiveHeaders();
              unsigned int v19 = v82[0];
              v82[0] = 0;
              if (v19)
              {
                if (*(_DWORD *)v19 == 2) {
                  WTF::StringImpl::destroy(v19, v18);
                }
                else {
                  *(_DWORD *)v19 -= 2;
                }
              }
              WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v95, v18);
              MEMORY[0x1997314A0](&v75, &v81);
              uint64_t v21 = v75;
              if (v77)
              {
                uint64_t v22 = 96 * v77;
                while (1)
                {
                  if (*((unsigned char *)v21 + 88))
                  {
                    if (*(void *)v21)
                    {
                      if (*(_DWORD *)(*(void *)v21 + 4))
                      {
                        uint64_t v23 = *((void *)v21 + 1);
                        if (v23)
                        {
                          if (*(_DWORD *)(v23 + 4))
                          {
                            uint64_t v24 = *((void *)v21 + 4);
                            if (!v24 || !*(_DWORD *)(v24 + 4))
                            {
                              uint64_t v25 = *((void *)v21 + 6);
                              if (!v25 || !*(_DWORD *)(v25 + 4))
                              {
                                uint64_t v26 = *((void *)v21 + 7);
                                if (!v26 || !*(_DWORD *)(v26 + 4))
                                {
                                  if (WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>(v23, "preconnect", 0xAuLL))
                                  {
                                    uint64_t v27 = WebCore::ResourceResponseBase::url(this);
                                    uint64_t v28 = *(void *)(a1 + 8);
                                    if (v28)
                                    {
                                      uint64_t v29 = *(void *)(v28 + 8);
                                      if (v29)
                                      {
                                        if (*(unsigned char *)(v29 + 3817)) {
                                          break;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_109:
                  uint64_t v21 = (WTF *)((char *)v21 + 96);
                  v22 -= 96;
                  if (!v22)
                  {
                    uint64_t v21 = v75;
                    if (v77)
                    {
                      uint64_t v60 = 96 * v77;
                      int v61 = (char *)v75 + 40;
                      do
                      {
                        uint64_t v62 = (WTF::StringImpl *)*((void *)v61 + 5);
                        *((void *)v61 + 5) = 0;
                        if (v62)
                        {
                          if (*(_DWORD *)v62 == 2) {
                            WTF::StringImpl::destroy(v62, v20);
                          }
                          else {
                            *(_DWORD *)v62 -= 2;
                          }
                        }
                        CFTypeRef v63 = (WTF::StringImpl *)*((void *)v61 + 4);
                        *((void *)v61 + 4) = 0;
                        if (v63)
                        {
                          if (*(_DWORD *)v63 == 2) {
                            WTF::StringImpl::destroy(v63, v20);
                          }
                          else {
                            *(_DWORD *)v63 -= 2;
                          }
                        }
                        int v64 = (WTF::StringImpl *)*((void *)v61 + 3);
                        *((void *)v61 + 3) = 0;
                        if (v64)
                        {
                          if (*(_DWORD *)v64 == 2) {
                            WTF::StringImpl::destroy(v64, v20);
                          }
                          else {
                            *(_DWORD *)v64 -= 2;
                          }
                        }
                        uint64_t v65 = (WTF::StringImpl *)*((void *)v61 + 2);
                        *((void *)v61 + objc_destroyWeak(this + 2) = 0;
                        if (v65)
                        {
                          if (*(_DWORD *)v65 == 2) {
                            WTF::StringImpl::destroy(v65, v20);
                          }
                          else {
                            *(_DWORD *)v65 -= 2;
                          }
                        }
                        uint64_t v66 = (WTF::StringImpl *)*((void *)v61 + 1);
                        *((void *)v61 + 1) = 0;
                        if (v66)
                        {
                          if (*(_DWORD *)v66 == 2) {
                            WTF::StringImpl::destroy(v66, v20);
                          }
                          else {
                            *(_DWORD *)v66 -= 2;
                          }
                        }
                        uint64_t v67 = *(WTF::StringImpl **)v61;
                        *(void *)int v61 = 0;
                        if (v67)
                        {
                          if (*(_DWORD *)v67 == 2) {
                            WTF::StringImpl::destroy(v67, v20);
                          }
                          else {
                            *(_DWORD *)v67 -= 2;
                          }
                        }
                        int v68 = (WTF::StringImpl *)*((void *)v61 - 1);
                        *((void *)v61 - 1) = 0;
                        if (v68)
                        {
                          if (*(_DWORD *)v68 == 2) {
                            WTF::StringImpl::destroy(v68, v20);
                          }
                          else {
                            *(_DWORD *)v68 -= 2;
                          }
                        }
                        __int16 v69 = (WTF::StringImpl *)*((void *)v61 - 2);
                        *((void *)v61 - objc_destroyWeak(this + 2) = 0;
                        if (v69)
                        {
                          if (*(_DWORD *)v69 == 2) {
                            WTF::StringImpl::destroy(v69, v20);
                          }
                          else {
                            *(_DWORD *)v69 -= 2;
                          }
                        }
                        CFTypeRef v70 = (WTF::StringImpl *)*((void *)v61 - 3);
                        *((void *)v61 - 3) = 0;
                        if (v70)
                        {
                          if (*(_DWORD *)v70 == 2) {
                            WTF::StringImpl::destroy(v70, v20);
                          }
                          else {
                            *(_DWORD *)v70 -= 2;
                          }
                        }
                        char v71 = (WTF::StringImpl *)*((void *)v61 - 4);
                        *((void *)v61 - 4) = 0;
                        if (v71)
                        {
                          if (*(_DWORD *)v71 == 2) {
                            WTF::StringImpl::destroy(v71, v20);
                          }
                          else {
                            *(_DWORD *)v71 -= 2;
                          }
                        }
                        uint64_t v72 = (WTF::StringImpl *)*((void *)v61 - 5);
                        *((void *)v61 - 5) = 0;
                        if (v72)
                        {
                          if (*(_DWORD *)v72 == 2) {
                            WTF::StringImpl::destroy(v72, v20);
                          }
                          else {
                            *(_DWORD *)v72 -= 2;
                          }
                        }
                        v61 += 96;
                        v60 -= 96;
                      }
                      while (v60);
                      uint64_t v21 = v75;
                    }
                    goto LABEL_167;
                  }
                }
                MEMORY[0x19972E8B0](&v89, v27, v21, 0);
                if ((v90 & 1) == 0) {
                  goto LABEL_105;
                }
                uint64_t v30 = WTF::URL::protocol((WTF::URL *)&v89);
                if ((char *)v30 == "https" || v20 != 5)
                {
                  if ((char *)v30 != "https" || v20 != 5) {
                    goto LABEL_105;
                  }
                }
                else
                {
                  if (((unint64_t)v20 & 0xFF00000000) != 0)
                  {
                    if (*(unsigned char *)v30 == 104 && *(_WORD *)(v30 + 1) == 29812 && *(_WORD *)(v30 + 3) == 29552) {
                      goto LABEL_58;
                    }
LABEL_105:
                    char v58 = v89;
                    long long v89 = 0;
                    if (v58)
                    {
                      if (*(_DWORD *)v58 == 2) {
                        WTF::StringImpl::destroy(v58, v20);
                      }
                      else {
                        *(_DWORD *)v58 -= 2;
                      }
                    }
                    goto LABEL_109;
                  }
                  if (*(_WORD *)v30 != 104 || *(void *)(v30 + 2) != 0x73007000740074) {
                    goto LABEL_105;
                  }
                }
LABEL_58:
                uint64_t v31 = *(void *)(a1 + 8);
                if (v31)
                {
                  uint64_t v32 = *(void *)(v31 + 8);
                  if (v32) {
                    uint64_t v31 = v32 - 48;
                  }
                  else {
                    uint64_t v31 = 0;
                  }
                }
                uint64_t v74 = (WebCore::ResourceRequestBase *)(v31 + 168);
                WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v31 + 168));
                if (WebCore::ContentSecurityPolicy::allowConnectToSource())
                {
                  uint64_t v33 = *(void *)(*(void *)(a1 + 8) + 8);
                  uint64_t v34 = v33 ? v33 - 48 : 0;
                  uint64_t v35 = *(void *)(v34 + 3872);
                  uint64_t v36 = *(void *)(v35 + 80);
                  long long v95 = *(WTF::StringImpl **)(v35 + 88);
                  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v36 + 224), &v95))
                  {
                    WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)&v95);
                    uint64_t v37 = *(void *)(a1 + 8);
                    if (v37)
                    {
                      uint64_t v38 = *(void *)(v37 + 8);
                      if (v38) {
                        uint64_t v37 = v38 - 48;
                      }
                      else {
                        uint64_t v37 = 0;
                      }
                    }
                    uint64_t v39 = *(void *)(v37 + 88);
                    if (v39)
                    {
                      long long v95 = *(WTF::StringImpl **)(v37 + 80);
                      *(void *)long long v96 = v39;
                      *(_OWORD *)&v96[8] = *(_OWORD *)(v37 + 96);
                      uint64_t v40 = *((void *)v21 + 5);
                      if (v40) {
                        LOBYTE(v40) = WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>(v40, "anonymous", 9uLL);
                      }
                      char v105 = v40 ^ 1;
                      __int16 v104 = 1;
                      char v106 = 1;
                      WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v82, (const String *)&v89, 0);
                      CFTypeRef v88 = 0;
                      uint64_t PartyForCookies = WebCore::ResourceRequestBase::firstPartyForCookies(v74);
                      CFTypeRef v42 = *(WTF::StringImpl **)PartyForCookies;
                      if (*(void *)PartyForCookies) {
                        *(_DWORD *)v42 += 2;
                      }
                      uint64_t v92 = v42;
                      long long v43 = *(_OWORD *)(PartyForCookies + 24);
                      long long v93 = *(_OWORD *)(PartyForCookies + 8);
                      long long v94 = v43;
                      if (v93) {
                        WebCore::ResourceRequestBase::setFirstPartyForCookies((WebCore::ResourceRequestBase *)v82, (const WTF::URL *)&v92);
                      }
                      WebCore::ResourceRequestBase::httpUserAgent((uint64_t *)&v91, v74);
                      unint64_t v45 = v91;
                      if (v91)
                      {
                        if (*((_DWORD *)v91 + 1))
                        {
                          WebCore::ResourceRequestBase::setHTTPUserAgent((WebCore::ResourceRequestBase *)v82, (const WTF::String *)&v91);
                          unint64_t v45 = v91;
                          uint64_t v91 = 0;
                          if (!v45) {
                            goto LABEL_86;
                          }
                        }
                        else
                        {
                          uint64_t v91 = 0;
                        }
                        if (*(_DWORD *)v45 == 2) {
                          WTF::StringImpl::destroy(v45, v44);
                        }
                        else {
                          *(_DWORD *)v45 -= 2;
                        }
                      }
LABEL_86:
                      BOOL v46 = v92;
                      uint64_t v92 = 0;
                      if (v46)
                      {
                        if (*(_DWORD *)v46 == 2) {
                          WTF::StringImpl::destroy(v46, v44);
                        }
                        else {
                          *(_DWORD *)v46 -= 2;
                        }
                      }
                      WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)&v97, (uint64_t)v82);
                      int v48 = v83;
                      unsigned int v83 = 0;
                      uint64_t v49 = v98;
                      uint64_t v98 = v48;
                      if (v49)
                      {
                        if (*(_DWORD *)v49 == 2) {
                          WTF::StringImpl::destroy(v49, v47);
                        }
                        else {
                          *(_DWORD *)v49 -= 2;
                        }
                      }
                      uint64_t v50 = v84;
                      char v84 = 0;
                      uint64_t v51 = v99;
                      long long v99 = v50;
                      if (v51)
                      {
                        if (*(_DWORD *)v51 == 2) {
                          WTF::StringImpl::destroy(v51, v47);
                        }
                        else {
                          *(_DWORD *)v51 -= 2;
                        }
                      }
                      unint64_t v52 = v85;
                      CFTypeRef v85 = 0;
                      unsigned int v53 = v100;
                      uint64_t v100 = v52;
                      if (v53) {
                        WTF::RefCounted<WebCore::FormData>::deref(v53);
                      }
                      uint64_t v101 = v86;
                      char v102 = v87;
                      CFTypeRef v54 = v88;
                      CFTypeRef v88 = 0;
                      CFTypeRef v55 = cf;
                      CFTypeRef cf = v54;
                      if (v55)
                      {
                        CFRelease(v55);
                        CFTypeRef v59 = v88;
                        CFTypeRef v88 = 0;
                        if (v59) {
                          CFRelease(v59);
                        }
                      }
                      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v82);
                      uint64_t v56 = *(void *)(*(void *)(a1 + 8) + 8);
                      if (v56) {
                        uint64_t v57 = v56 - 48;
                      }
                      else {
                        uint64_t v57 = 0;
                      }
                      __int16 v107 = *(_WORD *)(v57 + 3040);
                      operator new();
                    }
                    __break(0xC471u);
LABEL_185:
                    JUMPOUT(0x198B393A4);
                  }
                }
                goto LABEL_105;
              }
LABEL_167:
              if (v21)
              {
                v75 = 0;
                int v76 = 0;
                WTF::fastFree(v21, v20);
              }
              MEMORY[0x199735830](v78);
              if (v11)
              {
                if (*(_DWORD *)v11 == 2) {
                  WTF::StringImpl::destroy(v11, v9);
                }
                else {
                  *(_DWORD *)v11 -= 2;
                }
              }
              uint64_t result = (uint64_t)v81;
              int v81 = 0;
              if (result) {
                goto LABEL_174;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void WebKit::NetworkBroadcastChannelRegistry::registerChannel(WebKit::NetworkBroadcastChannelRegistry *this, IPC::Connection *a2, const WebCore::ClientOrigin *a3, WTF::StringImpl **a4)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  WebCore::SecurityOriginData::isNull(a3);
  if ((v8 & 1) != 0 || (WebCore::SecurityOriginData::isNull((const WebCore::ClientOrigin *)((char *)a3 + 32)), v9))
  {
    uint64_t v50 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::NetworkBroadcastChannelRegistry::registerChannel(IPC::Connection &, const WebCor"
                           "e::ClientOrigin &, const String &)";
      _os_log_fault_impl(&dword_1985F2000, v50, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkBroadcastChannelRegistry.cpp 56: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
    return;
  }
  uint64_t v12 = *((void *)this + 1);
  uint64_t v10 = (uint64_t *)((char *)this + 8);
  uint64_t v11 = v12;
  unint64_t v52 = a2;
  if (v12
    || (WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(v10, 0), (uint64_t v11 = *v10) != 0))
  {
    int v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    int v13 = 0;
  }
  unsigned int v14 = WTF::computeHash<WebCore::ClientOrigin>((uint64_t)a3) & v13;
  uint64_t v15 = v11 + 72 * v14;
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>()) {
    goto LABEL_20;
  }
  uint64_t v51 = v10;
  uint64_t v16 = 0;
  int v17 = 1;
  while (1)
  {
    int v18 = *(_DWORD *)(v15 + 24);
    if (v18) {
      break;
    }
    if (*(void *)v15 != -1) {
      goto LABEL_10;
    }
    uint64_t v16 = v15;
LABEL_14:
    unsigned int v14 = (v14 + v17) & v13;
    uint64_t v15 = v11 + 72 * v14;
    ++v17;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>()) {
      goto LABEL_18;
    }
  }
  if (v18 == 1)
  {
LABEL_10:
    if WebCore::operator==() && (WebCore::operator==()) {
      goto LABEL_29;
    }
    goto LABEL_14;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
  uint64_t v10 = v51;
  if (v16)
  {
    *(void *)(v16 + 64) = 0;
    *(_OWORD *)(v16 + 3objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)uint64_t v16 = 0u;
    *(_OWORD *)(v16 + ++*(_DWORD *)(this + 16) = 0u;
    --*(_DWORD *)(*v51 - 16);
    uint64_t v15 = v16;
  }
LABEL_20:
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v15, (uint64_t)a3);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v15 + 32, (uint64_t)a3 + 32);
  uint64_t v21 = *(void *)(v15 + 64);
  *(void *)(v15 + 64) = 0;
  if (v21) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v21, v20);
  }
  uint64_t v22 = *v10;
  if (*v10) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 1objc_destroyWeak(this + 2) = v23;
  uint64_t v24 = *v10;
  if (*v10) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26) {
LABEL_28:
    }
      uint64_t v15 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(v10, v15);
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_28;
  }
LABEL_29:
  uint64_t v30 = *(void *)(v15 + 64);
  uint64_t v28 = (uint64_t *)(v15 + 64);
  uint64_t v29 = v30;
  if (v30
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v28, 0), (uint64_t v29 = *v28) != 0))
  {
    int v31 = *(_DWORD *)(v29 - 8);
  }
  else
  {
    int v31 = 0;
  }
  unsigned int v32 = *((_DWORD *)*a4 + 4);
  if (v32 >= 0x100) {
    unsigned int v33 = v32 >> 8;
  }
  else {
    unsigned int v33 = WTF::StringImpl::hashSlowCase(*a4);
  }
  uint64_t v34 = 0;
  int v35 = 1;
  while (2)
  {
    unsigned int v36 = v33 & v31;
    uint64_t v37 = v29 + 24 * (v33 & v31);
    uint64_t v38 = *(WTF **)v37;
    if (*(void *)v37 == -1)
    {
      uint64_t v34 = (void *)(v29 + 24 * v36);
LABEL_41:
      unsigned int v33 = v35 + v36;
      ++v35;
      continue;
    }
    break;
  }
  if (v38)
  {
    if (WTF::equal(v38, *a4, v19)) {
      goto LABEL_55;
    }
    goto LABEL_41;
  }
  if (v34)
  {
    *uint64_t v34 = 0;
    v34[1] = 0;
    void v34[2] = 0;
    --*(_DWORD *)(*v28 - 16);
    uint64_t v37 = (uint64_t)v34;
  }
  WTF::String::operator=((uint64_t *)v37, a4);
  uint64_t v40 = *(WTF **)(v37 + 8);
  if (v40)
  {
    *(void *)(v37 + 8) = 0;
    *(_DWORD *)(v37 + ++*(_DWORD *)(this + 16) = 0;
    WTF::fastFree(v40, v39);
  }
  *(void *)(v37 + 8) = 0;
  *(void *)(v37 + ++*(_DWORD *)(this + 16) = 0;
  uint64_t v41 = *v28;
  if (*v28) {
    int v42 = *(_DWORD *)(v41 - 12) + 1;
  }
  else {
    int v42 = 1;
  }
  *(_DWORD *)(v41 - 1objc_destroyWeak(this + 2) = v42;
  uint64_t v43 = *v28;
  if (*v28) {
    int v44 = *(_DWORD *)(v43 - 12);
  }
  else {
    int v44 = 0;
  }
  uint64_t v45 = (*(_DWORD *)(v43 - 16) + v44);
  unint64_t v46 = *(unsigned int *)(v43 - 4);
  if (v46 > 0x400)
  {
    if (v46 <= 2 * v45) {
LABEL_54:
    }
      uint64_t v37 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v28, (WTF::StringImpl **)v37);
  }
  else if (3 * v46 <= 4 * v45)
  {
    goto LABEL_54;
  }
LABEL_55:
  BOOL v47 = (void *)(v37 + 8);
  uint64_t v48 = *((void *)v52 + 3);
  *(void *)long long buf = v48;
  uint64_t v49 = *(unsigned int *)(v37 + 20);
  if (v49 == *(_DWORD *)(v37 + 16)) {
    *(void *)(*(void *)(v37 + 8) + 8 * *(unsigned int *)(v37 + 20)) = *(void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, v49 + 1, (unint64_t)buf);
  }
  else {
    *(void *)(*v47 + 8 * v49) = v48;
  }
  ++*(_DWORD *)(v37 + 20);
}

void WebKit::NetworkBroadcastChannelRegistry::unregisterChannel(WebKit::NetworkBroadcastChannelRegistry *this, IPC::Connection *a2, const WebCore::ClientOrigin *a3, WTF::StringImpl **a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  WebCore::SecurityOriginData::isNull(a3);
  if ((v8 & 1) != 0 || (WebCore::SecurityOriginData::isNull((const WebCore::ClientOrigin *)((char *)a3 + 32)), v9))
  {
    int v23 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v24 = 136446210;
      int v25 = "void WebKit::NetworkBroadcastChannelRegistry::unregisterChannel(IPC::Connection &, const WebCore::ClientOrig"
            "in &, const String &)";
      _os_log_fault_impl(&dword_1985F2000, v23, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkBroadcastChannelRegistry.cpp 66: Invalid message dispatched %{public}s", (uint8_t *)&v24, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
  }
  else
  {
    uint64_t v10 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)this + 1, (uint64_t)a3);
    uint64_t v12 = v10;
    uint64_t v13 = *((void *)this + 1);
    if (v13) {
      v13 += 72 * *(unsigned int *)(v13 - 4);
    }
    if (v13 != v10)
    {
      uint64_t v14 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v10 + 64), a4, v11);
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)(v12 + 64);
      if (v16) {
        v16 += 24 * *(unsigned int *)(v16 - 4);
      }
      if (v16 != v14)
      {
        uint64_t v17 = *(unsigned int *)(v14 + 20);
        if (v17)
        {
          uint64_t v18 = *((void *)a2 + 3);
          unsigned int v19 = *(void **)(v14 + 8);
          if (*v19 == v18)
          {
            uint64_t v20 = 0;
LABEL_15:
            uint64_t v22 = &v19[v20];
            if (v22 + 1 != &v19[v17])
            {
              memmove(v22, v22 + 1, 8 * (v17 - v20) - 8);
              LODWORD(v17) = *(_DWORD *)(v15 + 20);
            }
            *(_DWORD *)(v15 + 20) = v17 - 1;
          }
          else
          {
            uint64_t v20 = 0;
            while (v17 - 1 != v20)
            {
              uint64_t v21 = v19[++v20];
              if (v21 == v18) {
                goto LABEL_15;
              }
            }
          }
        }
      }
    }
  }
}

unsigned int *WebKit::NetworkBroadcastChannelRegistry::postMessage(uint64_t a1, uint64_t a2, WebCore::SecurityOriginData *this, WTF::StringImpl **a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  WebCore::SecurityOriginData::isNull(this);
  if ((v11 & 1) != 0 || (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)((char *)this + 32)), v12))
  {
    uint64_t v48 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = "void WebKit::NetworkBroadcastChannelRegistry::postMessage(IPC::Connection &, const"
                                      " WebCore::ClientOrigin &, const String &, WebCore::MessageWithMessagePorts &&, Com"
                                      "pletionHandler<void ()> &&)";
      _os_log_fault_impl(&dword_1985F2000, v48, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkBroadcastChannelRegistry.cpp 83: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
    uint64_t v49 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  else
  {
    uint64_t v13 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(a1 + 8), (uint64_t)this);
    uint64_t v15 = v13;
    uint64_t v16 = *(void *)(a1 + 8);
    if (v16) {
      v16 += 72 * *(unsigned int *)(v16 - 4);
    }
    if (v16 == v13) {
      goto LABEL_31;
    }
    uint64_t v17 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v13 + 64), a4, v14);
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)(v15 + 64);
    if (v19) {
      v19 += 24 * *(unsigned int *)(v19 - 4);
    }
    if (v19 == v17)
    {
LABEL_31:
      uint64_t v45 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
      unint64_t v46 = *(uint64_t (**)(uint64_t))(*(void *)v45 + 8);
      return (unsigned int *)v46(v45);
    }
    else
    {
      uint64_t v20 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)uint64_t v20 = 1;
      uint64_t v21 = *a6;
      *a6 = 0;
      *(void *)(v20 + 8) = v21;
      uint64_t v22 = *(unsigned int *)(v18 + 20);
      if (v22)
      {
        int v23 = *(uint64_t **)(v18 + 8);
        for (uint64_t i = 8 * v22; i; i -= 8)
        {
          if (*v23 == *(void *)(a2 + 24)) {
            goto LABEL_26;
          }
          IPC::Connection::connection(*v23, &v51);
          int v25 = v51;
          if (!v51) {
            goto LABEL_26;
          }
          *(void *)&long long buf = this;
          *((void *)&buf + 1) = a4;
          uint64_t v55 = a5;
          atomic_fetch_add((atomic_uint *volatile)v20, 1u);
          uint64_t v26 = (void *)WTF::fastMalloc((WTF *)0x10);
          *uint64_t v26 = &unk_1EE9C3328;
          v26[1] = v20;
          uint64_t v27 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
          uint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v28 = 1577;
          *((void *)v28 + 1) = 0;
          *((void *)v28 + 66) = (char *)v28 + 16;
          *((void *)v28 + 67) = 512;
          *((void *)v28 + 68) = 0;
          *((void *)v28 + 70) = 0;
          *((void *)v28 + 69) = 0;
          IPC::Encoder::encodeHeader(v28);
          unsigned int v53 = v28;
          IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts const&>,0ul,1ul,2ul>(v28, (uint64_t)&buf);
          v52[0] = (uint64_t)v26;
          v52[1] = v27;
          IPC::Connection::sendMessageWithAsyncReply(v25, &v53, v52, 0, 0);
          uint64_t v30 = v52[0];
          v52[0] = 0;
          if (v30) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
          int v31 = v53;
          unsigned int v53 = 0;
          if (v31)
          {
            IPC::Encoder::~Encoder(v31, v29);
            WTF::fastFree(v42, v43);
          }
          unsigned int v32 = (atomic_uchar *volatile *)v51;
          uint64_t v51 = 0;
          if (!v32) {
            goto LABEL_26;
          }
          char v33 = 0;
          atomic_uchar *volatile v34 = *v32;
          atomic_compare_exchange_strong_explicit(*v32, (unsigned __int8 *)&v33, 1u, memory_order_acquire, memory_order_acquire);
          if (v33) {
            MEMORY[0x19972E8D0](v34);
          }
          uint64_t v35 = *((void *)v34 + 1);
          uint64_t v36 = v35 - 1;
          *((void *)v34 + 1) = v35 - 1;
          if (v35 == 1)
          {
            uint64_t v44 = *((void *)v34 + 2);
            uint64_t v38 = *((void *)v34 + 3);
            *((void *)v34 + 3) = 0;
            BOOL v37 = v44 == 0;
          }
          else
          {
            BOOL v37 = 0;
            uint64_t v38 = 0;
          }
          int v39 = 1;
          atomic_compare_exchange_strong_explicit(v34, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
          if (v39 == 1)
          {
            if (!v36) {
              goto LABEL_24;
            }
          }
          else
          {
            WTF::Lock::unlockSlow((WTF::Lock *)v34);
            if (!v36)
            {
LABEL_24:
              uint64_t v40 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v40 = &unk_1EE9B37E8;
              *(void *)(v40 + 8) = v34;
              *(void *)(v40 + ++*(_DWORD *)(this + 16) = v38;
              *(unsigned char *)(v40 + 24) = v37;
              *(void *)&long long buf = v40;
              WTF::ensureOnMainRunLoop();
              uint64_t v41 = buf;
              *(void *)&long long buf = 0;
              if (v41) {
                (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
              }
            }
          }
LABEL_26:
          ++v23;
        }
      }
      return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v20);
    }
  }
}

uint64_t WebKit::NetworkBroadcastChannelRegistry::removeConnection(WebKit::NetworkBroadcastChannelRegistry *this, IPC::Connection *a2)
{
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v3 = (uint64_t *)((char *)this + 8);
  uint64_t v4 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(*((void *)this + 1));
  uint64_t v6 = (uint64_t *)v4;
  int v7 = v5;
  uint64_t v8 = 0;
  if (*v3) {
    uint64_t v8 = *v3 + 72 * *(unsigned int *)(*v3 - 4);
  }
  if (v8 != v4)
  {
    while (1)
    {
      char v33 = 0;
      uint64_t v34 = 0;
      uint64_t v10 = v6 + 8;
      char v11 = (void *)v6[8];
      int v12 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v11);
      unint64_t v15 = (unint64_t)v12;
      uint64_t v16 = v13;
      if (v11) {
        v11 += 3 * *((unsigned int *)v11 - 1);
      }
      if (v11 != v12)
      {
        do
        {
          uint64_t v17 = *(unsigned int *)(v15 + 20);
          if (!v17) {
            goto LABEL_14;
          }
          uint64_t v18 = *((void *)a2 + 3);
          uint64_t v19 = *(void **)(v15 + 8);
          if (*v19 == v18)
          {
            uint64_t v20 = 0;
          }
          else
          {
            uint64_t v20 = 0;
            do
            {
              if (v17 - 1 == v20) {
                goto LABEL_18;
              }
              uint64_t v26 = v19[++v20];
            }
            while (v26 != v18);
          }
          uint64_t v21 = (char *)&v19[v20];
          uint64_t v13 = v21 + 8;
          if (v21 + 8 != (char *)&v19[v17])
          {
            memmove(v21, v13, 8 * (v17 - v20) - 8);
            LODWORD(v17) = *(_DWORD *)(v15 + 20);
          }
          int v22 = v17 - 1;
          *(_DWORD *)(v15 + 20) = v22;
          if (!v22)
          {
LABEL_14:
            uint64_t v23 = HIDWORD(v34);
            if (HIDWORD(v34) == v34)
            {
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v33, v15);
            }
            else
            {
              int v24 = v33;
              int v25 = *(WTF::StringImpl **)v15;
              if (*(void *)v15) {
                *(_DWORD *)v25 += 2;
              }
              v24[v23] = v25;
              HIDWORD(v34) = v23 + 1;
            }
          }
LABEL_18:
          while (1)
          {
            v15 += 24;
            if ((void *)v15 == v16) {
              break;
            }
            if ((unint64_t)(*(void *)v15 + 1) > 1) {
              goto LABEL_22;
            }
          }
          unint64_t v15 = (unint64_t)v16;
LABEL_22:
          ;
        }
        while ((void *)v15 != v11);
        if (HIDWORD(v34)) {
          break;
        }
      }
LABEL_39:
      if (!*v10 || !*(_DWORD *)(*v10 - 12))
      {
        if (HIDWORD(v36) == v36)
        {
          WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ClientOrigin&>((uint64_t)&v35, (unint64_t)v6);
        }
        else
        {
          WebCore::ClientOrigin::ClientOrigin((WebCore::ClientOrigin *)(v35 + ((unint64_t)HIDWORD(v36) << 6)), (const WebCore::ClientOrigin *)v6);
          ++HIDWORD(v36);
        }
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v13);
      while (1)
      {
        v6 += 9;
        if (v6 == v7) {
          break;
        }
        if (!WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket((uint64_t)v6)) {
          goto LABEL_46;
        }
      }
      uint64_t v6 = v7;
LABEL_46:
      if (v6 == (uint64_t *)v8)
      {
        if (HIDWORD(v36))
        {
          uint64_t v31 = v35;
          unint64_t v32 = (unint64_t)HIDWORD(v36) << 6;
          do
          {
            WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove(v3, v31);
            v31 += 64;
            v32 -= 64;
          }
          while (v32);
        }
        return WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v5);
      }
    }
    uint64_t v27 = v33;
    uint64_t v28 = 8 * HIDWORD(v34);
    while (1)
    {
      uint64_t v29 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v6 + 8, v27, v14);
      uint64_t v13 = (void *)v29;
      if (*v10)
      {
        uint64_t v30 = *v10 + 24 * *(unsigned int *)(*v10 - 4);
        if (v30 != v29) {
          goto LABEL_36;
        }
      }
      else if (v29)
      {
        uint64_t v30 = 0;
LABEL_36:
        if (v30 != v29) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v6 + 8, v29);
        }
      }
      ++v27;
      v28 -= 8;
      if (!v28) {
        goto LABEL_39;
      }
    }
  }
  return WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v5);
}

uint64_t WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>(a1, a2);
  uint64_t v5 = result;
  if (*a1)
  {
    uint64_t v6 = *a1 + 72 * *(unsigned int *)(*a1 - 4);
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if (v6 != result)
  {
    uint64_t v7 = *(unsigned int *)(result + 56);
    if (v7 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v7])(&v15, result + 32);
    }
    *(_DWORD *)(v5 + 56) = -1;
    uint64_t v8 = *(unsigned int *)(v5 + 24);
    if (v8 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v8])(&v16, v5);
    }
    *(void *)uint64_t v5 = -1;
    *(void *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + ++*(_DWORD *)(this + 16) = 0;
    *(_DWORD *)(v5 + 24) = 0;
    uint64_t result = *(void *)(v5 + 64);
    if (result) {
      uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v4);
    }
    ++*(_DWORD *)(*a1 - 16);
    uint64_t v9 = *a1;
    if (*a1) {
      int v10 = *(_DWORD *)(v9 - 12) - 1;
    }
    else {
      int v10 = -1;
    }
    *(_DWORD *)(v9 - 1objc_destroyWeak(this + 2) = v10;
    uint64_t v11 = *a1;
    if (*a1)
    {
      unsigned int v12 = 6 * *(_DWORD *)(v11 - 12);
      unsigned int v13 = *(_DWORD *)(v11 - 4);
      if (v12 < v13 && v13 >= 9)
      {
        return WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(a1, v13 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t WebKit::NetworkCORSPreflightChecker::NetworkCORSPreflightChecker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  *(void *)a1 = &unk_1EE9C2FB0;
  *(void *)(a1 + 8) = 0;
  uint64_t v12 = a1 + 16;
  WTF::URL::URL(a1 + 16, (uint64_t *)a4);
  WTF::URL::URL(a1 + 56, (uint64_t *)(a4 + 40));
  *(void *)(a1 + 96) = *(void *)(a4 + 80);
  uint64_t v13 = *(void *)(a4 + 88);
  *(void *)(a4 + 88) = 0;
  *(void *)(a1 + 11objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = v13;
  uint64_t v14 = *(void *)(a4 + 96);
  *(void *)(a4 + 96) = 0;
  *(void *)(a1 + 11objc_destroyWeak(this + 2) = v14;
  LODWORD(v14) = *(_DWORD *)(a4 + 104);
  *(_DWORD *)(a4 + 104) = 0;
  *(_DWORD *)(a1 + 120) = v14;
  LODWORD(v14) = *(_DWORD *)(a4 + 108);
  *(_DWORD *)(a4 + 108) = 0;
  *(_DWORD *)(a1 + 124) = v14;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t v15 = *(void *)(a4 + 112);
  *(void *)(a4 + 11objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 128) = v15;
  LODWORD(v15) = *(_DWORD *)(a4 + 120);
  *(_DWORD *)(a4 + 120) = 0;
  *(_DWORD *)(a1 + 136) = v15;
  LODWORD(v15) = *(_DWORD *)(a4 + 124);
  *(_DWORD *)(a4 + 124) = 0;
  *(_DWORD *)(a1 + 140) = v15;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 15objc_destroyWeak(this + 2) = 0;
  uint64_t v16 = *(void *)(a4 + 128);
  *(void *)(a4 + 128) = 0;
  *(void *)(a1 + 144) = v16;
  LODWORD(v++*(_DWORD *)(this + 16) = *(_DWORD *)(a4 + 136);
  *(_DWORD *)(a4 + 136) = 0;
  *(_DWORD *)(a1 + 15objc_destroyWeak(this + 2) = v16;
  LODWORD(v++*(_DWORD *)(this + 16) = *(_DWORD *)(a4 + 140);
  *(_DWORD *)(a4 + 140) = 0;
  *(_DWORD *)(a1 + 156) = v16;
  LODWORD(v++*(_DWORD *)(this + 16) = *(_DWORD *)(a4 + 144);
  *(unsigned char *)(a1 + 164) = *(unsigned char *)(a4 + 148);
  *(_DWORD *)(a1 + 160) = v16;
  uint64_t v17 = *(void *)(a4 + 152);
  *(void *)(a4 + 15objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 168) = v17;
  uint64_t v18 = *(void *)(a4 + 160);
  *(void *)(a4 + 160) = 0;
  *(void *)(a1 + 176) = v18;
  uint64_t v19 = *(void *)(a4 + 168);
  *(void *)(a4 + 168) = 0;
  *(void *)(a1 + 184) = v19;
  uint64_t v20 = *(void *)(a4 + 176);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a4 + 184);
  *(void *)(a1 + 19objc_destroyWeak(this + 2) = v20;
  uint64_t v21 = *(void *)(a4 + 192);
  *(void *)(a4 + 19objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 208) = v21;
  uint64_t v22 = *(void *)(a4 + 200);
  *(void *)(a4 + 200) = 0;
  *(void *)(a1 + 2++*(_DWORD *)(this + 16) = v22;
  uint64_t v23 = *(void *)(a4 + 208);
  *(void *)(a4 + 208) = 0;
  *(void *)(a1 + 224) = v23;
  uint64_t v24 = *(void *)(a4 + 216);
  *(void *)(a4 + 2++*(_DWORD *)(this + 16) = 0;
  *(void *)(a1 + 23objc_destroyWeak(this + 2) = v24;
  uint64_t v25 = *(void *)(a4 + 224);
  *(void *)(a4 + 224) = 0;
  *(void *)(a1 + 240) = v25;
  long long v26 = *(_OWORD *)(a4 + 232);
  *(void *)(v12 + 245) = *(void *)(a4 + 245);
  *(_OWORD *)(a1 + 248) = v26;
  atomic_fetch_add((atomic_uint *volatile)(a2 + 128), 1u);
  *(void *)(a1 + 27objc_destroyWeak(this + 2) = a2;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 280));
  *(void *)(a1 + 520) = 0;
  *(unsigned char *)(a1 + 528) = 0;
  *(unsigned char *)(a1 + 418) = *(unsigned char *)(a1 + 418) & 0xF1 | 4;
  uint64_t v27 = *a6;
  *a6 = 0;
  *(void *)(a1 + 536) = v27;
  *(void *)(a1 + 544) = 0;
  *(unsigned char *)(a1 + 55objc_destroyWeak(this + 2) = a5;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 568));
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 768));
  *(void *)(a1 + 1008) = 0;
  *(unsigned char *)(a1 + 10++*(_DWORD *)(this + 16) = 0;
  *(unsigned char *)(a1 + 906) = *(unsigned char *)(a1 + 906) & 0xF1 | 4;
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)(a1 + 1024));
  uint64_t v28 = 0;
  if (a3)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 56), a3 + 48);
    uint64_t v28 = *(atomic_uint **)(a3 + 56);
    if (v28) {
      atomic_fetch_add(v28, 1u);
    }
  }
  *(void *)(a1 + 115objc_destroyWeak(this + 2) = v28;
  return a1;
}

void WebKit::NetworkCORSPreflightChecker::~NetworkCORSPreflightChecker(WebKit::NetworkCORSPreflightChecker *this, void *a2)
{
  uint64_t v3 = *((void *)this + 68);
  if (v3)
  {
    uint64_t v4 = *(unsigned int **)(v3 + 24);
    *(void *)(v3 + 24) = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
    (*(void (**)(void))(**((void **)this + 68) + 16))(*((void *)this + 68));
  }
  if (*((void *)this + 67))
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    WTF::URL::invalidate((WTF::URL *)&v23);
    uint64_t v24 = 0;
    int v25 = 0;
    __int16 v26 = 3;
    CFTypeRef cf = 0;
    char v28 = 1;
    uint64_t v5 = *((void *)this + 67);
    *((void *)this + 67) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v5 + 16))(v5, &v22);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    CFTypeRef v6 = cf;
    CFTypeRef cf = 0;
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v7 = v24;
    uint64_t v24 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v8 = v23;
    uint64_t v23 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t v9 = v22;
    uint64_t v22 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  int v10 = (unsigned int *)*((void *)this + 144);
  *((void *)this + 144) = 0;
  if (v10 && atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, a2);
  }
  uint64_t v11 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((void *)this + 143);
  *((void *)this + 143) = 0;
  if (v11) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v11);
  }
  uint64_t v12 = (WTF::StringImpl *)*((void *)this + 139);
  *((void *)this + 139) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = (const void *)*((void *)this + 126);
  *((void *)this + 126) = 0;
  if (v13) {
    CFRelease(v13);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::NetworkCORSPreflightChecker *)((char *)this + 768), (WTF::StringImpl *)a2);
  uint64_t v14 = (const void *)*((void *)this + 95);
  *((void *)this + 95) = 0;
  if (v14) {
    CFRelease(v14);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::NetworkCORSPreflightChecker *)((char *)this + 568));
  uint64_t v16 = *((void *)this + 68);
  *((void *)this + 68) = 0;
  if (v16) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v16 + 8));
  }
  uint64_t v17 = *((void *)this + 67);
  *((void *)this + 67) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = (const void *)*((void *)this + 65);
  *((void *)this + 65) = 0;
  if (v18) {
    CFRelease(v18);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::NetworkCORSPreflightChecker *)((char *)this + 280), v15);
  uint64_t v20 = (unsigned int *)*((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v20 && atomic_fetch_add((atomic_uint *volatile)v20 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v20 + 32);
    (*(void (**)(unsigned int *))(*(void *)v20 + 8))(v20);
  }
  WebKit::NetworkCORSPreflightChecker::Parameters::~Parameters((WebKit::NetworkCORSPreflightChecker *)((char *)this + 16), v19);
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v21);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::NetworkCORSPreflightChecker::~NetworkCORSPreflightChecker(this, a2);

  WTF::fastFree(v2, v3);
}

WTF *WebKit::NetworkCORSPreflightChecker::startPreflight(const WebCore::ResourceRequest **this)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::startPreflight", buf, 0xCu);
  }
  WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)buf);
  WebCore::createAccessControlPreflightRequest((WebCore *)(this + 2), this[27], (WebCore::SecurityOrigin *)(this + 29), (const WTF::String *)*((unsigned __int8 *)this + 268));
  WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v71, (uint64_t)&v49);
  uint64_t v4 = v51;
  uint64_t v51 = 0;
  uint64_t v5 = v72;
  uint64_t v72 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  CFTypeRef v6 = v52;
  unint64_t v52 = 0;
  uint64_t v7 = v73;
  long long v73 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v3);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = v53;
  unsigned int v53 = 0;
  uint64_t v9 = v74;
  uint64_t v74 = v8;
  if (v9) {
    WTF::RefCounted<WebCore::FormData>::deref(v9);
  }
  v75 = v54;
  char v76 = (char)v55;
  CFTypeRef v10 = v56;
  CFTypeRef v56 = 0;
  CFTypeRef v11 = cf;
  CFTypeRef cf = v10;
  if (v11)
  {
    CFRelease(v11);
    CFTypeRef v47 = v56;
    CFTypeRef v56 = 0;
    if (v47) {
      CFRelease(v47);
    }
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v49);
  uint64_t v12 = this[30];
  __int16 v83 = *((_WORD *)this + 133);
  if (v12) {
    WebCore::ResourceRequestBase::setHTTPHeaderField();
  }
  if (*((unsigned char *)this + 552))
  {
    LOBYTE(v49) = 1;
    WebCore::ResourceRequest::ResourceRequest(v50, v71);
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v58);
    CFTypeRef v60 = 0;
    char v61 = 0;
    char v59 = v59 & 0xF1 | 4;
    WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v62);
    *((unsigned char *)this + 560) = (_BYTE)v49;
    WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)(this + 71), (uint64_t)v50);
    uint64_t v14 = v52;
    unint64_t v52 = 0;
    uint64_t v15 = this[90];
    this[90] = v14;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v13);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t v16 = v53;
    unsigned int v53 = 0;
    uint64_t v17 = this[91];
    this[91] = v16;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v13);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t v18 = v54;
    uint64_t v54 = 0;
    uint64_t v19 = this[92];
    this[92] = v18;
    if (v19) {
      WTF::RefCounted<WebCore::FormData>::deref(v19);
    }
    this[93] = v55;
    *((unsigned char *)this + 75objc_destroyWeak(this + 2) = (_BYTE)v56;
    uint64_t v20 = (const WebCore::ResourceRequest *)v57;
    CFTypeRef v57 = 0;
    uint64_t v21 = this[95];
    this[95] = v20;
    if (v21) {
      CFRelease(v21);
    }
    WebCore::ResourceResponseBase::operator=((uint64_t)(this + 96), (uint64_t)v58);
    uint64_t v23 = (const WebCore::ResourceRequest *)v60;
    CFTypeRef v60 = 0;
    uint64_t v24 = this[126];
    this[126] = v23;
    if (v24) {
      CFRelease(v24);
    }
    long long v25 = v62[3];
    *((_OWORD *)this + 66) = v62[2];
    *((_OWORD *)this + 67) = v25;
    *((_OWORD *)this + 68) = v62[4];
    long long v26 = v62[1];
    *((_OWORD *)this + 64) = v62[0];
    *((unsigned char *)this + 10++*(_DWORD *)(this + 16) = v61;
    this[138] = v63;
    *((_OWORD *)this + 65) = v26;
    uint64_t v27 = v64;
    int v64 = 0;
    char v28 = this[139];
    this[139] = v27;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, v22);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
    *((_OWORD *)this + 70) = v65;
    this[142] = v66;
    uint64_t v29 = v67;
    uint64_t v67 = 0;
    uint64_t v30 = this[143];
    this[143] = v29;
    if (v30)
    {
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v30);
      uint64_t v31 = v67;
      uint64_t v67 = 0;
      if (v31) {
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v31);
      }
    }
    unint64_t v32 = v64;
    int v64 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v22);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
    CFTypeRef v33 = v60;
    CFTypeRef v60 = 0;
    if (v33) {
      CFRelease(v33);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v58, v22);
    CFTypeRef v34 = v57;
    CFTypeRef v57 = 0;
    if (v34) {
      CFRelease(v34);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v50);
  }
  uint64_t v35 = this[31];
  *(void *)long long buf = this[32];
  char v82 = *((unsigned char *)this + 265);
  uint64_t v36 = this[34];
  uint64_t v49 = v35;
  uint64_t v37 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v36 + 28, &v49);
  if (v37)
  {
    int v39 = (WebKit::NetworkSession *)v37;
    uint64_t v40 = (WebKit::NetworkDataTaskCocoa *)WTF::fastMalloc((WTF *)0x318);
    uint64_t v41 = WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa(v40, v39, (WebKit::NetworkDataTaskClient *)this, (const WebKit::NetworkLoadParameters *)buf);
    int v42 = this[68];
    this[68] = (const WebCore::ResourceRequest *)v41;
    if (v42)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*((atomic_uchar **)v42 + 1));
      uint64_t v41 = (uint64_t)this[68];
    }
    (*(void (**)(uint64_t))(*(void *)v41 + 24))(v41);
  }
  if (v81)
  {
    CFTypeRef v48 = v80;
    CFTypeRef v80 = 0;
    if (v48) {
      CFRelease(v48);
    }
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v38);
  if (v78[2576]) {
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v78);
  }
  CFTypeRef v43 = cf;
  CFTypeRef cf = 0;
  if (v43) {
    CFRelease(v43);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v71);
  uint64_t v45 = v70;
  CFTypeRef v70 = 0;
  if (v45) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v45, v44);
  }
  uint64_t result = v69;
  __int16 v69 = 0;
  if (result) {
    return (WTF *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)result, v44);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCORSPreflightChecker::willPerformHTTPRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 552))
  {
    WebCore::ResourceResponseBase::operator=(a1 + 768, a2);
    uint64_t v7 = *(void *)(a2 + 240);
    *(void *)(a2 + 240) = 0;
    uint64_t v8 = *(const void **)(a1 + 1008);
    *(void *)(a1 + 1008) = v7;
    if (v8) {
      CFRelease(v8);
    }
    *(unsigned char *)(a1 + 10++*(_DWORD *)(this + 16) = *(unsigned char *)(a2 + 248);
  }
  uint64_t v9 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 134217984;
    *(void *)((char *)buf + 4) = a1;
    _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::willPerformHTTPRedirection", (uint8_t *)buf, 0xCu);
  }
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)buf);
  uint64_t v10 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v10 + 16))(v10, buf);
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  CFTypeRef v11 = cf;
  CFTypeRef cf = 0;
  if (v11) {
    CFRelease(v11);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
  uint64_t v12 = *(void *)(MEMORY[0x1E4FB64F8] + 8);
  if (v12)
  {
    if (v12 == 1)
    {
      uint64_t v13 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v13 = *(WTF::StringImpl **)&buf[0];
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 16));
  unsigned int v15 = WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)a2);
  *(void *)&buf[0] = "Preflight response is not successful. Status code: ";
  *((void *)&buf[0] + 1) = 52;
  unsigned int v27 = v15;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,int>((uint64_t *)buf, &v27, &v26);
  uint64_t v17 = v26;
  if (!v26)
  {
    __break(0xC471u);
    return result;
  }
  if (v13) {
    *(_DWORD *)v13 += 2;
  }
  *(void *)&buf[0] = v13;
  uint64_t v18 = *(_DWORD **)v14;
  if (*(void *)v14) {
    *v18 += 2;
  }
  *((void *)&buf[0] + 1) = v18;
  long long v19 = *(_OWORD *)(v14 + 24);
  buf[1] = *(_OWORD *)(v14 + 8);
  buf[2] = v19;
  *(_DWORD *)v17 += 2;
  uint64_t v29 = v17;
  int v30 = 0;
  __int16 v31 = 2;
  CFTypeRef v32 = 0;
  char v33 = 1;
  uint64_t v20 = *(void *)(a1 + 536);
  *(void *)(a1 + 536) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v20 + 16))(v20, buf);
  (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  CFTypeRef v22 = v32;
  CFTypeRef v32 = 0;
  if (v22) {
    CFRelease(v22);
  }
  uint64_t v23 = v29;
  uint64_t v29 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v21);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  uint64_t v24 = (WTF::StringImpl *)*((void *)&buf[0] + 1);
  *((void *)&buf[0] + 1) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v21);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  long long v25 = *(WTF::StringImpl **)&buf[0];
  *(void *)&buf[0] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v21);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  uint64_t result = v26;
  long long v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
      if (!v13) {
        return result;
      }
      goto LABEL_37;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v13) {
    return result;
  }
LABEL_37:
  if (*(_DWORD *)v13 == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v21);
  }
  *(_DWORD *)v13 -= 2;
  return result;
}

WTF::StringImpl *WebKit::NetworkCORSPreflightChecker::didReceiveChallenge(void *a1, WebCore::AuthenticationChallengeBase *a2, char a3, uint64_t *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *(unsigned __int8 *)(WebCore::AuthenticationChallengeBase::protectionSpace(a2) + 21);
    *(_DWORD *)uint64_t v17 = 134218240;
    *(void *)&uint64_t v17[4] = a1;
    *(_WORD *)&v17[12] = 1024;
    *(_DWORD *)&v17[14] = v9;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::didReceiveChallenge, authentication scheme: %u", v17, 0x12u);
  }
  if (*(unsigned __int8 *)(WebCore::AuthenticationChallengeBase::protectionSpace(a2) + 21) - 7 >= 2)
  {
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)v17);
    CFTypeRef cf = 0;
    uint64_t v13 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void, unsigned char *))(*(void *)v13 + 16))(v13, 0, v17);
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    CFTypeRef v15 = cf;
    CFTypeRef cf = 0;
    if (v15) {
      CFRelease(v15);
    }
    uint64_t v16 = *(WTF::StringImpl **)&v17[8];
    *(void *)&v17[8] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v14);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t result = *(WTF::StringImpl **)v17;
    *(void *)uint64_t v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    uint64_t v10 = (uint64_t *)(a1[34] + 208);
    *(void *)uint64_t v17 = "AuthenticationManager";
    *(void *)&v17[8] = 22;
    CFTypeRef v11 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v10, (WTF::ASCIILiteralHash *)v17);
    return (WTF::StringImpl *)WebKit::AuthenticationManager::didReceiveAuthenticationChallenge((uint64_t)v11, a1[31], a1[32], a1[28] + 8, a2, a3, a4);
  }
  return result;
}

uint64_t WebKit::NetworkCORSPreflightChecker::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 134217984;
    uint64_t v16 = a1;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::didReceiveResponse", (uint8_t *)&v15, 0xCu);
  }
  if (*(unsigned char *)(a1 + 552))
  {
    WebCore::ResourceResponseBase::operator=(a1 + 768, a2);
    uint64_t v9 = *(void *)(a2 + 240);
    if (v9) {
      CFRetain(*(CFTypeRef *)(a2 + 240));
    }
    uint64_t v10 = *(const void **)(a1 + 1008);
    *(void *)(a1 + 1008) = v9;
    if (v10) {
      CFRelease(v10);
    }
    *(unsigned char *)(a1 + 10++*(_DWORD *)(this + 16) = *(unsigned char *)(a2 + 248);
  }
  WebCore::ResourceResponseBase::operator=(a1 + 280, a2);
  uint64_t v11 = *(void *)(a2 + 240);
  *(void *)(a2 + 240) = 0;
  uint64_t v12 = *(const void **)(a1 + 520);
  *(void *)(a1 + 520) = v11;
  if (v12) {
    CFRelease(v12);
  }
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 248);
  uint64_t v13 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v13 + 16))(v13, 0);
  return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
}

void WebKit::NetworkCORSPreflightChecker::didReceiveData(WebKit::NetworkCORSPreflightChecker *this, const WebCore::SharedBuffer *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 134217984;
    uint64_t v5 = this;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::didReceiveData", (uint8_t *)&v4, 0xCu);
  }
}

WTF::StringImpl *WebKit::NetworkCORSPreflightChecker::didCompleteWithError(WebKit::NetworkCORSPreflightChecker *this, const WebCore::ResourceError *a2, const WebCore::NetworkLoadMetrics *a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 552))
  {
    long long v6 = *(_OWORD *)a3;
    *((_OWORD *)this + 65) = *((_OWORD *)a3 + 1);
    *((_OWORD *)this + 64) = v6;
    long long v7 = *((_OWORD *)a3 + 2);
    long long v8 = *((_OWORD *)a3 + 3);
    long long v9 = *((_OWORD *)a3 + 4);
    *((void *)this + 138) = *((void *)a3 + 10);
    *((_OWORD *)this + 68) = v9;
    *((_OWORD *)this + 67) = v8;
    *((_OWORD *)this + 66) = v7;
    WTF::String::operator=((uint64_t *)this + 139, (WTF::StringImpl **)a3 + 11);
    long long v10 = *((_OWORD *)a3 + 6);
    *((void *)this + 14objc_destroyWeak(this + 2) = *((void *)a3 + 14);
    *((_OWORD *)this + 70) = v10;
    uint64_t v11 = (_DWORD *)*((void *)a3 + 15);
    if (v11) {
      ++*v11;
    }
    uint64_t v12 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((void *)this + 143);
    *((void *)this + 143) = v11;
    if (v12) {
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v12);
    }
  }
  int v13 = *((unsigned __int8 *)a2 + 60);
  uint64_t v14 = off_1EB358988;
  BOOL v15 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
  if (!v13)
  {
    if (v15)
    {
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = this;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = WebCore::ResourceResponseBase::httpStatusCode((WebKit::NetworkCORSPreflightChecker *)((char *)this + 280));
      _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::didComplete http_status_code=%d", buf, 0x12u);
    }
    WebCore::validatePreflightResponse();
    if (v45)
    {
      long long v25 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        WTF::String::utf8();
        uint64_t v26 = v43 ? (uint64_t)v43 + 16 : 0;
        *(_DWORD *)long long buf = 134218242;
        *(void *)&uint8_t buf[4] = this;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v26;
        _os_log_impl(&dword_1985F2000, v25, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::didComplete, AccessControl error: %s", buf, 0x16u);
        if (v43)
        {
          if (*(_DWORD *)v43 == 1) {
            WTF::fastFree(v43, v27);
          }
          else {
            --*(_DWORD *)v43;
          }
        }
      }
      uint64_t v33 = *(void *)(MEMORY[0x1E4FB64F8] + 8);
      if (v33)
      {
        if (v33 == 1)
        {
          CFTypeRef v34 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
          *MEMORY[0x1E4F30960] += 2;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          CFTypeRef v34 = *(WTF::StringImpl **)buf;
        }
      }
      else
      {
        CFTypeRef v34 = 0;
      }
      uint64_t v35 = WebCore::ResourceRequestBase::url((WebKit::NetworkCORSPreflightChecker *)((char *)this + 16));
      if (v34) {
        *(_DWORD *)v34 += 2;
      }
      *(void *)long long buf = v34;
      uint64_t v36 = *(_DWORD **)v35;
      if (*(void *)v35) {
        *v36 += 2;
      }
      *(void *)&buf[8] = v36;
      long long v37 = *(_OWORD *)(v35 + 24);
      *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)(v35 + 8);
      long long v47 = v37;
      if (v44) {
        *(_DWORD *)v44 += 2;
      }
      v48[0] = v44;
      LODWORD(v48[1]) = 0;
      WORD2(v48[1]) = 2;
      CFTypeRef cf = 0;
      char v50 = 1;
      uint64_t v38 = *((void *)this + 67);
      *((void *)this + 67) = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v38 + 16))(v38, buf);
      (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
      CFTypeRef v39 = cf;
      CFTypeRef cf = 0;
      if (v39) {
        CFRelease(v39);
      }
      uint64_t v40 = v48[0];
      v48[0] = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2) {
          WTF::StringImpl::destroy(v40, v22);
        }
        else {
          *(_DWORD *)v40 -= 2;
        }
      }
      uint64_t v41 = *(WTF::StringImpl **)&buf[8];
      *(void *)&buf[8] = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2) {
          WTF::StringImpl::destroy(v41, v22);
        }
        else {
          *(_DWORD *)v41 -= 2;
        }
      }
      uint64_t result = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (!result)
      {
LABEL_69:
        if (!v34) {
          goto LABEL_84;
        }
        goto LABEL_72;
      }
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        goto LABEL_69;
      }
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
      if (v34)
      {
LABEL_72:
        if (*(_DWORD *)v34 != 2)
        {
          *(_DWORD *)v34 -= 2;
          goto LABEL_84;
        }
        uint64_t result = v34;
LABEL_83:
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
      }
    }
    else
    {
      *(void *)long long buf = 0;
      *(void *)&buf[8] = 0;
      WTF::URL::invalidate((WTF::URL *)&buf[8]);
      CFTypeRef cf = 0;
      memset(v48, 0, 14);
      char v50 = 1;
      uint64_t v30 = *((void *)this + 67);
      *((void *)this + 67) = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v30 + 16))(v30, buf);
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
      CFTypeRef v31 = cf;
      CFTypeRef cf = 0;
      if (v31) {
        CFRelease(v31);
      }
      CFTypeRef v32 = v48[0];
      v48[0] = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2) {
          WTF::StringImpl::destroy(v32, v22);
        }
        else {
          *(_DWORD *)v32 -= 2;
        }
      }
      int v42 = *(WTF::StringImpl **)&buf[8];
      *(void *)&buf[8] = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2) {
          WTF::StringImpl::destroy(v42, v22);
        }
        else {
          *(_DWORD *)v42 -= 2;
        }
      }
      uint64_t result = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (result)
      {
        if (*(_DWORD *)result != 2)
        {
          *(_DWORD *)result -= 2;
          goto LABEL_84;
        }
        goto LABEL_83;
      }
    }
LABEL_84:
    if (!v45) {
      return result;
    }
    uint64_t result = v44;
    if (!v44) {
      return result;
    }
LABEL_86:
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    }
    *(_DWORD *)result -= 2;
    return result;
  }
  if (v15)
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = this;
    _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::didCompleteWithError", buf, 0xCu);
  }
  uint64_t v16 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v16 += 2;
  }
  *(void *)long long buf = v16;
  uint64_t v17 = (_DWORD *)*((void *)a2 + 1);
  if (v17) {
    *v17 += 2;
  }
  *(void *)&buf[8] = v17;
  long long v18 = *((_OWORD *)a2 + 2);
  *(_OWORD *)&uint8_t buf[16] = *((_OWORD *)a2 + 1);
  long long v47 = v18;
  uint64_t v19 = (WTF::StringImpl *)*((void *)a2 + 6);
  if (v19) {
    *(_DWORD *)v19 += 2;
  }
  v48[0] = v19;
  LODWORD(v48[1]) = *((_DWORD *)a2 + 14);
  WORD2(v48[1]) = *((_WORD *)a2 + 30);
  uint64_t v20 = (const void *)*((void *)a2 + 8);
  CFTypeRef cf = v20;
  if (v20) {
    CFRetain(v20);
  }
  char v50 = *((unsigned char *)a2 + 72);
  if (BYTE4(v48[1]) <= 1u) {
    WebCore::ResourceErrorBase::setType();
  }
  uint64_t v21 = *((void *)this + 67);
  *((void *)this + 67) = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v21 + 16))(v21, buf);
  (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  CFTypeRef v23 = cf;
  CFTypeRef cf = 0;
  if (v23) {
    CFRelease(v23);
  }
  uint64_t v24 = v48[0];
  v48[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v22);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  char v28 = *(WTF::StringImpl **)&buf[8];
  *(void *)&buf[8] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v22);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (result) {
    goto LABEL_86;
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCORSPreflightChecker::wasBlocked(WebKit::NetworkCORSPreflightChecker *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v15[0]) = 134217984;
    *(void *)((char *)v15 + 4) = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::wasBlocked", (uint8_t *)v15, 0xCu);
  }
  uint64_t v3 = *(void *)(MEMORY[0x1E4FB64F8] + 8);
  if (v3)
  {
    if (v3 == 1)
    {
      int v4 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      int v4 = *(WTF::StringImpl **)&v15[0];
    }
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = WebCore::ResourceRequestBase::url((WebKit::NetworkCORSPreflightChecker *)((char *)this + 16));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v6 = *(WTF::StringImpl **)&v15[0];
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
  *(void *)&v15[0] = v4;
  long long v7 = *(_DWORD **)v5;
  if (*(void *)v5) {
    *v7 += 2;
  }
  *((void *)&v15[0] + 1) = v7;
  long long v8 = *(_OWORD *)(v5 + 24);
  v15[1] = *(_OWORD *)(v5 + 8);
  void v15[2] = v8;
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v16 = v6;
  int v17 = 0;
  __int16 v18 = 2;
  CFTypeRef cf = 0;
  char v20 = 1;
  uint64_t v9 = *((void *)this + 67);
  *((void *)this + 67) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v9 + 16))(v9, v15);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  CFTypeRef v11 = cf;
  CFTypeRef cf = 0;
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = v16;
  uint64_t v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = (WTF::StringImpl *)*((void *)&v15[0] + 1);
  *((void *)&v15[0] + 1) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v10);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)&v15[0];
  *(void *)&v15[0] = 0;
  if (!result)
  {
LABEL_25:
    if (!v6) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_25;
  }
  uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
  if (!v6) {
    goto LABEL_30;
  }
LABEL_28:
  if (*(_DWORD *)v6 == 2)
  {
    uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v10);
    if (!v4) {
      return result;
    }
    goto LABEL_33;
  }
  *(_DWORD *)v6 -= 2;
LABEL_30:
  if (!v4) {
    return result;
  }
LABEL_33:
  if (*(_DWORD *)v4 == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v10);
  }
  *(_DWORD *)v4 -= 2;
  return result;
}

WTF::StringImpl *WebKit::NetworkCORSPreflightChecker::cannotShowURL(WebKit::NetworkCORSPreflightChecker *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v15[0]) = 134217984;
    *(void *)((char *)v15 + 4) = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::cannotShowURL", (uint8_t *)v15, 0xCu);
  }
  uint64_t v3 = *(void *)(MEMORY[0x1E4FB64F8] + 8);
  if (v3)
  {
    if (v3 == 1)
    {
      int v4 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      int v4 = *(WTF::StringImpl **)&v15[0];
    }
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = WebCore::ResourceRequestBase::url((WebKit::NetworkCORSPreflightChecker *)((char *)this + 16));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v6 = *(WTF::StringImpl **)&v15[0];
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
  *(void *)&v15[0] = v4;
  long long v7 = *(_DWORD **)v5;
  if (*(void *)v5) {
    *v7 += 2;
  }
  *((void *)&v15[0] + 1) = v7;
  long long v8 = *(_OWORD *)(v5 + 24);
  v15[1] = *(_OWORD *)(v5 + 8);
  void v15[2] = v8;
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v16 = v6;
  int v17 = 0;
  __int16 v18 = 2;
  CFTypeRef cf = 0;
  char v20 = 1;
  uint64_t v9 = *((void *)this + 67);
  *((void *)this + 67) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v9 + 16))(v9, v15);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  CFTypeRef v11 = cf;
  CFTypeRef cf = 0;
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = v16;
  uint64_t v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = (WTF::StringImpl *)*((void *)&v15[0] + 1);
  *((void *)&v15[0] + 1) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v10);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)&v15[0];
  *(void *)&v15[0] = 0;
  if (!result)
  {
LABEL_25:
    if (!v6) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_25;
  }
  uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
  if (!v6) {
    goto LABEL_30;
  }
LABEL_28:
  if (*(_DWORD *)v6 == 2)
  {
    uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v10);
    if (!v4) {
      return result;
    }
    goto LABEL_33;
  }
  *(_DWORD *)v6 -= 2;
LABEL_30:
  if (!v4) {
    return result;
  }
LABEL_33:
  if (*(_DWORD *)v4 == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v10);
  }
  *(_DWORD *)v4 -= 2;
  return result;
}

WTF::StringImpl *WebKit::NetworkCORSPreflightChecker::wasBlockedByRestrictions(WebKit::NetworkCORSPreflightChecker *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v15[0]) = 134217984;
    *(void *)((char *)v15 + 4) = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::wasBlockedByRestrictions", (uint8_t *)v15, 0xCu);
  }
  uint64_t v3 = *(void *)(MEMORY[0x1E4FB64F8] + 8);
  if (v3)
  {
    if (v3 == 1)
    {
      int v4 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      int v4 = *(WTF::StringImpl **)&v15[0];
    }
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = WebCore::ResourceRequestBase::url((WebKit::NetworkCORSPreflightChecker *)((char *)this + 16));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v6 = *(WTF::StringImpl **)&v15[0];
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
  *(void *)&v15[0] = v4;
  long long v7 = *(_DWORD **)v5;
  if (*(void *)v5) {
    *v7 += 2;
  }
  *((void *)&v15[0] + 1) = v7;
  long long v8 = *(_OWORD *)(v5 + 24);
  v15[1] = *(_OWORD *)(v5 + 8);
  void v15[2] = v8;
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v16 = v6;
  int v17 = 0;
  __int16 v18 = 2;
  CFTypeRef cf = 0;
  char v20 = 1;
  uint64_t v9 = *((void *)this + 67);
  *((void *)this + 67) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v9 + 16))(v9, v15);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  CFTypeRef v11 = cf;
  CFTypeRef cf = 0;
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = v16;
  uint64_t v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = (WTF::StringImpl *)*((void *)&v15[0] + 1);
  *((void *)&v15[0] + 1) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v10);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)&v15[0];
  *(void *)&v15[0] = 0;
  if (!result)
  {
LABEL_25:
    if (!v6) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_25;
  }
  uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
  if (!v6) {
    goto LABEL_30;
  }
LABEL_28:
  if (*(_DWORD *)v6 == 2)
  {
    uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v10);
    if (!v4) {
      return result;
    }
    goto LABEL_33;
  }
  *(_DWORD *)v6 -= 2;
LABEL_30:
  if (!v4) {
    return result;
  }
LABEL_33:
  if (*(_DWORD *)v4 == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v10);
  }
  *(_DWORD *)v4 -= 2;
  return result;
}

WTF::StringImpl *WebKit::NetworkCORSPreflightChecker::wasBlockedByDisabledFTP(WebKit::NetworkCORSPreflightChecker *this)
{
  WebKit::ftpDisabledError((WebKit::NetworkCORSPreflightChecker *)((char *)this + 16), (uint64_t)&v8);
  uint64_t v2 = *((void *)this + 67);
  *((void *)this + 67) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v2 + 16))(v2, &v8);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = v10;
  long long v10 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  long long v6 = v9;
  uint64_t v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t result = v8;
  long long v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::NetworkConnectionToWebProcess::~NetworkConnectionToWebProcess(WebKit::NetworkConnectionToWebProcess *this)
{
  *(void *)this = &unk_1EE9C3038;
  *((void *)this + objc_destroyWeak(this + 2) = &unk_1EE9C30F0;
  *((void *)this + 4) = &unk_1EE9C3128;
  uint64_t v2 = (char *)this + 48;
  *((void *)this + 6) = &unk_1EE9C3150;
  uint64_t v3 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v3) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198B3D0DCLL);
  }
  IPC::Connection::invalidate(*((void *)this + 9));
  CFTypeRef v4 = (WebKit::NetworkConnectionToWebProcess *)((char *)this + 104);
  WebKit::NetworkResourceLoadMap::clear((WebKit::NetworkConnectionToWebProcess *)((char *)this + 104), v5);
  long long v6 = (void *)*((void *)this + 34);
  long long v7 = WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::begin(v6);
  long long v8 = v7;
  long long v10 = v9;
  if (v6) {
    v6 += 2 * *((unsigned int *)v6 - 1);
  }
  if (v6 != v7)
  {
    do
    {
      WebCore::MessagePortChannelRegistry::didCloseMessagePort();
      while (1)
      {
        v8 += 2;
        if (v8 == v10) {
          break;
        }
        if (*v8 != -1 && *(_OWORD *)v8 != 0) {
          goto LABEL_14;
        }
      }
      long long v8 = v10;
LABEL_14:
      ;
    }
    while (v8 != v6);
  }
  uint64_t v12 = (void *)*((void *)this + 35);
  *((void *)this + 35) = 0;
  int v13 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::begin(v12);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  if (v12) {
    int v17 = &v12[2 * *((unsigned int *)v12 - 1)];
  }
  else {
    int v17 = 0;
  }
  if (v17 != v13)
  {
    do
    {
      long long v47 = v2;
      uint64_t v48 = v14[1];
      v14[1] = 0;
      (*(void (**)(uint64_t))(*(void *)v48 + 16))(v48);
      (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
      v14 += 2;
      if (v14 == v16)
      {
        uint64_t v14 = v16;
        uint64_t v2 = v47;
        CFTypeRef v4 = (WebKit::NetworkConnectionToWebProcess *)((char *)this + 104);
      }
      else
      {
        uint64_t v2 = v47;
        CFTypeRef v4 = (WebKit::NetworkConnectionToWebProcess *)((char *)this + 104);
        while ((unint64_t)(*v14 + 1) <= 1)
        {
          v14 += 2;
          if (v14 == v16)
          {
            uint64_t v14 = v16;
            break;
          }
        }
      }
    }
    while (v14 != v17);
  }
  uint64_t v18 = *((void *)this + 10);
  uint64_t v49 = *((void *)this + 11);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v18 + 232), &v49))
  {
    WebCore::NetworkStorageSession::stopListeningForCookieChangeNotifications();
  }
  uint64_t v19 = *((void *)this + 10);
  uint64_t v49 = *((void *)this + 11);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v19 + 232), &v49))
  {
    WebCore::NetworkStorageSession::removeCookiesEnabledStateObserver();
  }
  char v20 = (WebKit::NetworkRTCProvider *)*((void *)this + 20);
  if (v20) {
    WebKit::NetworkRTCProvider::close(v20);
  }
  WebKit::NetworkConnectionToWebProcess::unregisterToRTCDataChannelProxy((WebKit::NetworkProcess **)this);
  WebKit::NetworkConnectionToWebProcess::unregisterSWConnection(*((_DWORD **)this + 27));
  WebKit::NetworkConnectionToWebProcess::unregisterSharedWorkerConnection(this);
  if (v12) {
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable((uint64_t)v12, v21);
  }
  uint64_t v22 = *((void *)this + 46);
  if (v22) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v22, v21);
  }
  CFTypeRef v23 = (WTF::StringImpl **)*((void *)this + 45);
  if (v23) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v23, (WTF::StringImpl *)v21);
  }
  uint64_t v24 = (void *)*((void *)this + 39);
  if (v24) {
    WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::deallocateTable(v24, (WTF::StringImpl *)v21);
  }
  uint64_t v25 = *((void *)this + 38);
  if (v25) {
    WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::deallocateTable(v25, (WTF::StringImpl *)v21);
  }
  std::unique_ptr<WebKit::NetworkOriginAccessPatterns>::reset[abi:sn180100]((WTF **)this + 37, v21);
  unsigned int v27 = (WTF::StringImpl ***)*((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v27) {
    WTF::RefCounted<WebKit::NetworkSchemeRegistry>::deref(v27, v26);
  }
  uint64_t v28 = *((void *)this + 35);
  if (v28) {
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v28, v26);
  }
  uint64_t v29 = *((void *)this + 34);
  if (v29) {
    WTF::fastFree((WTF *)(v29 - 16), v26);
  }
  uint64_t v30 = *((void *)this + 32);
  *((void *)this + 3objc_destroyWeak(this + 2) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  std::unique_ptr<WebKit::WebSharedWorkerServerToContextConnection>::reset[abi:sn180100]((WebKit::WebSharedWorkerServerToContextConnection **)this + 30, 0);
  CFTypeRef v32 = (unsigned int *)*((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v32 && atomic_fetch_add((atomic_uint *volatile)v32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v32);
    WTF::fastFree((WTF *)v32, v31);
  }
  uint64_t v33 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  CFTypeRef v34 = (unsigned int *)*((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v34 && atomic_fetch_add((atomic_uint *volatile)v34, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v34);
    WTF::fastFree((WTF *)v34, v31);
  }
  uint64_t v35 = (WTF::StringImpl **)*((void *)this + 25);
  if (v35) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v35, (WTF::StringImpl *)v31);
  }
  WebKit::NetworkMDNSRegister::~NetworkMDNSRegister((WebKit::NetworkConnectionToWebProcess *)((char *)this + 168));
  uint64_t v37 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v37) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v37 + 24));
  }
  uint64_t v38 = *((void *)this + 19);
  if (v38) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v38, v36);
  }
  WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 34, v36);
  uint64_t v40 = *((void *)this + 16);
  if (v40) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v40, v39);
  }
  WebKit::NetworkResourceLoadMap::~NetworkResourceLoadMap(v4);
  uint64_t v42 = *((void *)this + 12);
  if (v42) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v42, v41);
  }
  CFTypeRef v43 = (unsigned int *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v43 && atomic_fetch_add((atomic_uint *volatile)v43 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v43 + 32);
    (*(void (**)(unsigned int *))(*(void *)v43 + 8))(v43);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)this + 9);
  *((void *)this + 6) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 7, v44);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 5, v45);
  WTF::WeakPtrFactory<WebKit::ShapeDetection::ObjectHeap,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v46);
}

void WebKit::NetworkConnectionToWebProcess::unregisterToRTCDataChannelProxy(WebKit::NetworkProcess **this)
{
  if (*((unsigned char *)this + 248))
  {
    uint64_t v2 = WebKit::NetworkProcess::rtcDataChannelProxy(this[10]);
    WebKit::RTCDataChannelRemoteManagerProxy::unregisterConnectionToWebProcess(v2, (WebKit::NetworkConnectionToWebProcess *)this);
  }
}

_DWORD *WebKit::NetworkConnectionToWebProcess::unregisterSWConnection(_DWORD *this)
{
  if (this)
  {
    uint64_t v1 = *((void *)this + 1);
    if (v1)
    {
      uint64_t v2 = *(_DWORD **)(*(void *)(v1 + 24) + 8);
      ++*v2;
      WebCore::SWServer::removeConnection();
      return WTF::RefCounted<WebCore::SWServer>::deref(v2);
    }
  }
  return this;
}

void WebKit::NetworkConnectionToWebProcess::unregisterSharedWorkerConnection(WebKit::NetworkConnectionToWebProcess *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 33);
    int v9 = 134218240;
    long long v10 = this;
    __int16 v11 = 2048;
    uint64_t v12 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::unregisterSharedWorkerConnection:", (uint8_t *)&v9, 0x16u);
  }
  uint64_t v4 = *((void *)this + 29);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      uint64_t v6 = WebKit::WebSharedWorkerServerConnection::server((WebKit::WebSharedWorkerServerConnection *)(v5 - 8));
      uint64_t v7 = *(void *)(*((void *)this + 29) + 8);
      if (v7) {
        uint64_t v8 = v7 - 8;
      }
      else {
        uint64_t v8 = 0;
      }
      WebKit::WebSharedWorkerServer::removeConnection(v6, *(void *)(v8 + 48));
    }
  }
}

void non-virtual thunk to'WebKit::NetworkConnectionToWebProcess::~NetworkConnectionToWebProcess(WebKit::NetworkConnectionToWebProcess *this)
{
}

{
  WebKit::NetworkConnectionToWebProcess::~NetworkConnectionToWebProcess((WebKit::NetworkConnectionToWebProcess *)((char *)this - 32));
}

{
  WebKit::NetworkConnectionToWebProcess::~NetworkConnectionToWebProcess((WebKit::NetworkConnectionToWebProcess *)((char *)this - 48));
}

{
  WebKit::NetworkConnectionToWebProcess::operator delete((WebKit::NetworkConnectionToWebProcess *)((char *)this - 16));
}

{
  WebKit::NetworkConnectionToWebProcess::operator delete((WebKit::NetworkConnectionToWebProcess *)((char *)this - 32));
}

{
  WebKit::NetworkConnectionToWebProcess::operator delete((WebKit::NetworkConnectionToWebProcess *)((char *)this - 48));
}

double WebKit::NetworkConnectionToWebProcess::operator delete(WebKit::NetworkConnectionToWebProcess *a1)
{
  WebKit::NetworkConnectionToWebProcess::~NetworkConnectionToWebProcess(a1);
  if (atomic_load((unsigned int *)(v1 + 64)))
  {
    *(void *)(v1 + 368) = 0;
    double result = 0.0;
    *(_OWORD *)(v1 + 336) = 0u;
    *(_OWORD *)(v1 + 35objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v1 + 304) = 0u;
    *(_OWORD *)(v1 + 320) = 0u;
    *(_OWORD *)(v1 + 27objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v1 + 288) = 0u;
    *(_OWORD *)(v1 + 240) = 0u;
    *(_OWORD *)(v1 + 256) = 0u;
    *(_OWORD *)(v1 + 208) = 0u;
    *(_OWORD *)(v1 + 224) = 0u;
    *(_OWORD *)(v1 + 176) = 0u;
    *(_OWORD *)(v1 + 19objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    *(_OWORD *)(v1 + 11objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v1 + 128) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + ++*(_DWORD *)(this + 16) = 0u;
    *(_OWORD *)(v1 + 3objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)uint64_t v1 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::loadImageForDecoding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v16 = *(void *)(a1 + 88);
  long long v10 = (_DWORD *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 224), &v16);
  if (v10)
  {
    __int16 v11 = v10;
    ++v10[4];
    uint64_t result = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v10 + 144))(v10, a2, a3, a4, a5);
    int v13 = v11[4];
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x198B3D51CLL);
    }
    v11[4] = v13 - 1;
  }
  else
  {
    uint64_t v16 = 0;
    v17[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v17);
    v17[7] = 0;
    memset(&v17[5], 0, 14);
    char v18 = 1;
    int v19 = 0;
    uint64_t v14 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 16))(v14, &v16);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
    if (v19 != -1) {
      return ((uint64_t (*)(char *, uint64_t *))off_1EE9C31B0[v19])(&v15, &v16);
    }
  }
  return result;
}

uint64_t *WebKit::NetworkConnectionToWebProcess::didCleanupResourceLoader(WebKit::NetworkProcess **this, WebKit::NetworkResourceLoader *a2)
{
  if (!*((void *)a2 + 381))
  {
    __break(0xC471u);
    JUMPOUT(0x198B3D59CLL);
  }
  uint64_t v4 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)this);
  if ((WTF::RunLoop::isCurrent(v4) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198B3D5BCLL);
  }
  if (*((unsigned char *)a2 + 4345))
  {
    uint64_t v7 = this[10];
    return WebKit::NetworkProcess::removeKeptAliveLoad(v7, a2);
  }
  else
  {
    uint64_t v5 = *((void *)a2 + 381);
    return (uint64_t *)WebKit::NetworkResourceLoadMap::remove((uint64_t)(this + 13), v5);
  }
}

_DWORD *WebKit::NetworkConnectionToWebProcess::transferKeptAliveLoad(WebKit::NetworkConnectionToWebProcess *this, WebKit::NetworkResourceLoader *a2)
{
  uint64_t v4 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v4) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198B3D674);
  }
  uint64_t result = (_DWORD *)WebKit::NetworkResourceLoadMap::take((uint64_t)this + 104, *((void *)a2 + 381), &v10);
  if (v10)
  {
    uint64_t v6 = *((void *)this + 10);
    uint64_t v9 = v10;
    uint64_t result = WebKit::NetworkProcess::addKeptAliveLoad(v6, (WTF::StringImpl *)&v9);
    uint64_t v8 = v9;
    uint64_t v9 = 0;
    if (v8) {
      return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v8 + 8), v7);
    }
  }
  return result;
}

WebKit::NetworkRTCProvider *WebKit::NetworkConnectionToWebProcess::rtcProvider(WebKit::NetworkConnectionToWebProcess *this)
{
  uint64_t v1 = (WebKit::NetworkRTCProvider *)*((void *)this + 20);
  if (!v1)
  {
    uint64_t v1 = (WebKit::NetworkRTCProvider *)WTF::fastMalloc((WTF *)0xA8);
    uint64_t v3 = *(void *)(*((void *)WebKit::NetworkRTCProvider::NetworkRTCProvider(v1, this) + 7) + 8);
    if (v3) {
      uint64_t v4 = v3 - 48;
    }
    else {
      uint64_t v4 = 0;
    }
    IPC::Connection::addMessageReceiver(*(void *)(v4 + 72), (uint64_t)v1, (uint64_t)v1 + 8, 0x28u, 0);
    uint64_t v5 = *((void *)this + 20);
    *((void *)this + 20) = v1;
    if (v5)
    {
      WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v5 + 24));
      return (WebKit::NetworkRTCProvider *)*((void *)this + 20);
    }
  }
  return v1;
}

uint64_t WebKit::NetworkConnectionToWebProcess::createRTCProvider(WebKit::NetworkConnectionToWebProcess *a1, uint64_t *a2)
{
  WebKit::NetworkConnectionToWebProcess::rtcProvider(a1);
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

IPC::Encoder *WebKit::NetworkConnectionToWebProcess::connectToRTCDataChannelRemoteSource(WebKit::NetworkConnectionToWebProcess *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v8 = *((void *)a1 + 10);
  v27[0] = a4;
  uint64_t v9 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(v8 + 136), v27);
  if (v9)
  {
    uint64_t v10 = v9;
    ++*(_DWORD *)(v9 + 8);
    WebKit::NetworkConnectionToWebProcess::registerToRTCDataChannelProxy(a1);
    WebKit::NetworkConnectionToWebProcess::registerToRTCDataChannelProxy((WebKit::NetworkConnectionToWebProcess *)v10);
    __int16 v11 = *(os_unfair_lock_s **)(v10 + 72);
    uint64_t v12 = *a6;
    *a6 = 0;
    int v13 = (void *)WTF::fastMalloc((WTF *)0x10);
    *int v13 = &unk_1EE9C33C8;
    v13[1] = v12;
    uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    char v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v15 = 303;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 66) = (char *)v15 + 16;
    *((void *)v15 + 67) = 512;
    *((void *)v15 + 68) = 0;
    *((void *)v15 + 70) = 0;
    *((void *)v15 + 69) = 0;
    IPC::Encoder::encodeHeader(v15);
    uint64_t v28 = v15;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v15, &v23);
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v15, &v24);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v15, &v25);
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v15, &v26);
    v27[0] = (uint64_t)v13;
    v27[1] = v14;
    IPC::Connection::sendMessageWithAsyncReply(v11, &v28, v27, 0, 0);
    uint64_t v17 = v27[0];
    v27[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    uint64_t result = v28;
    uint64_t v28 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v16);
      uint64_t result = (IPC::Encoder *)WTF::fastFree(v19, v20);
    }
    if (*(_DWORD *)(v10 + 8) == 1) {
      return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    else {
      --*(_DWORD *)(v10 + 8);
    }
  }
  else
  {
    uint64_t v21 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, 256);
    uint64_t v22 = *(uint64_t (**)(uint64_t))(*(void *)v21 + 8);
    return (IPC::Encoder *)v22(v21);
  }
  return result;
}

void WebKit::NetworkConnectionToWebProcess::registerToRTCDataChannelProxy(WebKit::NetworkConnectionToWebProcess *this)
{
  if (!*((unsigned char *)this + 248))
  {
    *((unsigned char *)this + 248) = 1;
    uint64_t v2 = WebKit::NetworkProcess::rtcDataChannelProxy(*((WebKit::NetworkProcess **)this + 10));
    WebKit::RTCDataChannelRemoteManagerProxy::registerConnectionToWebProcess(v2, this);
  }
}

uint64_t WebKit::NetworkConnectionToWebProcess::didReceiveSyncMessage(WebKit::NetworkConnectionToWebProcess *this, atomic_uchar *volatile *a2, unsigned __int16 *a3, IPC::Encoder **a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = a3[25];
  if (v8 >= 0xEF4) {
    unsigned int v8 = 3828;
  }
  unsigned int v9 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v8 + 2]);
  if (v9 <= 0x2C)
  {
    if (v9 == 33)
    {
      return WebKit::NetworkConnectionToWebProcess::didReceiveSyncNetworkConnectionToWebProcessMessage((uint64_t)this, a2, (IPC::Decoder *)a3, a4);
    }
    if (v9 != 36) {
      goto LABEL_20;
    }
    uint64_t v17 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_22:
      *(unsigned char *)(*((void *)this + 9) + 98) = 1;
      return 0;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "virtual BOOL WebKit::NetworkConnectionToWebProcess::didReceiveSyncMessage(IPC::Connection &, IP"
                         "C::Decoder &, UniqueRef<IPC::Encoder> &)";
    char v18 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 40"
          "5: Invalid message dispatched %{public}s";
LABEL_26:
    _os_log_fault_impl(&dword_1985F2000, v17, OS_LOG_TYPE_FAULT, v18, buf, 0xCu);
    goto LABEL_22;
  }
  switch(v9)
  {
    case 0xC7u:
      return 0;
    case 0x2Du:
      uint64_t v11 = *((void *)this + 10);
      if (!*(unsigned char *)(v11 + 410))
      {
        uint64_t v17 = off_1EB358938;
        if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
          goto LABEL_22;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "virtual BOOL WebKit::NetworkConnectionToWebProcess::didReceiveSyncMessage(IPC::Connection &"
                             ", IPC::Decoder &, UniqueRef<IPC::Encoder> &)";
        char v18 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cp"
              "p 418: Invalid message dispatched %{public}s";
        goto LABEL_26;
      }
      *(void *)long long buf = *((void *)this + 11);
      uint64_t v12 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v11 + 224), buf);
      if (!v12) {
        return 0;
      }
      uint64_t v13 = v12;
      uint64_t v14 = (uint64_t *)(v12 + 1080);
      uint64_t v15 = *(void *)(v13 + 1080);
      break;
    case 0xBCu:
      uint64_t v14 = (uint64_t *)WebKit::NetworkConnectionToWebProcess::paymentCoordinator(this);
      uint64_t v15 = *v14;
      break;
    default:
LABEL_20:
      WTFLogAlways();
      return 0;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t *, atomic_uchar *volatile *, unsigned __int16 *, IPC::Encoder **))(v15 + 32);

  return v16(v14, a2, a3, a4);
}

uint64_t non-virtual thunk to'WebKit::NetworkConnectionToWebProcess::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, unsigned __int16 *a3, IPC::Encoder **a4)
{
  return WebKit::NetworkConnectionToWebProcess::didReceiveSyncMessage((WebKit::NetworkConnectionToWebProcess *)(a1 - 48), a2, a3, a4);
}

uint64_t WebKit::NetworkConnectionToWebProcess::didClose(WebKit::NetworkConnectionToWebProcess *this, IPC::Connection *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  std::unique_ptr<WebKit::WebSharedWorkerServerToContextConnection>::reset[abi:sn180100]((WebKit::WebSharedWorkerServerToContextConnection **)this + 30, 0);
  ++*((_DWORD *)this + 2);
  uint64_t v5 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *((void *)this + 33);
    *(_DWORD *)uint64_t v28 = 134218496;
    *(void *)&v28[4] = this;
    __int16 v29 = 2048;
    uint64_t v30 = v6;
    __int16 v31 = 1024;
    unsigned int v32 = IPC::Connection::remoteProcessID(a2);
    _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::didClose: WebProcess (%d) closed its connection. Aborting related loaders.", v28, 0x1Cu);
  }
  unsigned int v8 = (uint64_t *)((char *)this + 104);
  uint64_t v7 = *((void *)this + 13);
  if (v7)
  {
    do
    {
      if (!*(_DWORD *)(v7 - 12)) {
        break;
      }
      uint64_t v25 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin((void **)this + 13);
      WebKit::NetworkResourceLoader::abort((WebKit::NetworkResourceLoader *)v25[1]);
      uint64_t v7 = *v8;
    }
    while (*v8);
  }
  uint64_t v9 = *((void *)this + 10);
  *(void *)uint64_t v28 = *((void *)this + 11);
  uint64_t v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 224), v28);
  if (v10)
  {
    WebKit::NetworkBroadcastChannelRegistry::removeConnection(*(WebKit::NetworkBroadcastChannelRegistry **)(v10 + 712), a2);
    uint64_t v12 = WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::begin(*((void **)this + 38));
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    uint64_t v16 = *((void *)this + 38);
    if (v16) {
      uint64_t v17 = (void *)(v16 + 80 * *(unsigned int *)(v16 - 4));
    }
    else {
      uint64_t v17 = 0;
    }
    if (v17 != v12)
    {
      do
      {
        WebCore::BlobRegistryImpl::unregisterBlobURL();
        while (1)
        {
          v13 += 10;
          if (v13 == v15) {
            break;
          }
          if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v13) & 1) == 0
            && *v13 != -1)
          {
            goto LABEL_15;
          }
        }
        uint64_t v13 = v15;
LABEL_15:
        ;
      }
      while (v13 != v17);
    }
    char v18 = WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::begin(*((void **)this + 39));
    uint64_t v19 = (uint64_t)v18;
    uint64_t v20 = v11;
    uint64_t v21 = *((void *)this + 39);
    if (v21) {
      uint64_t v22 = (void *)(v21 + 88 * *(unsigned int *)(v21 - 4));
    }
    else {
      uint64_t v22 = 0;
    }
    if (v22 != v18)
    {
      do
      {
        if (*(_DWORD *)(v19 + 80))
        {
          unsigned int v26 = 0;
          do
          {
            WebCore::BlobRegistryImpl::unregisterBlobURLHandle();
            ++v26;
          }
          while (v26 < *(_DWORD *)(v19 + 80));
        }
        while (1)
        {
          v19 += 88;
          if ((void *)v19 == v20) {
            break;
          }
          if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(v19) & 1) == 0
            && *(void *)v19 != -1)
          {
            goto LABEL_37;
          }
        }
        uint64_t v19 = (uint64_t)v20;
LABEL_37:
        ;
      }
      while ((void *)v19 != v22);
    }
  }
  WebKit::NetworkConnectionToWebProcess::stopAllNetworkActivityTracking(this, v11);
  WebKit::NetworkProcess::connectionToWebProcessClosed(*((void *)this + 10), a2, *((void *)this + 11));
  WebKit::NetworkProcess::removeNetworkConnectionToWebProcess(*((WebKit::NetworkProcess **)this + 10), this);
  uint64_t v23 = (WebKit::NetworkRTCProvider *)*((void *)this + 20);
  if (v23)
  {
    WebKit::NetworkRTCProvider::close(v23);
    uint64_t v27 = *((void *)this + 20);
    *((void *)this + 20) = 0;
    if (v27) {
      WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v27 + 24));
    }
  }
  WebKit::NetworkConnectionToWebProcess::unregisterSWConnection(*((_DWORD **)this + 27));
  WebKit::NetworkConnectionToWebProcess::unregisterSharedWorkerConnection(this);
  uint64_t result = *((void *)this + 32);
  *((void *)this + 3objc_destroyWeak(this + 2) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (*((_DWORD *)this + 2) == 1) {
    return (*(uint64_t (**)(WebKit::NetworkConnectionToWebProcess *))(*(void *)this + 8))(this);
  }
  --*((_DWORD *)this + 2);
  return result;
}

WTF *WebKit::NetworkConnectionToWebProcess::stopAllNetworkActivityTracking(WebKit::NetworkConnectionToWebProcess *this, void *a2)
{
  uint64_t v2 = (WebKit::NetworkConnectionToWebProcess *)((char *)this + 136);
  uint64_t v3 = *((unsigned int *)this + 37);
  if (v3)
  {
    uint64_t v5 = 48 * v3;
    uint64_t v6 = *((void *)this + 17) + 24;
    do
    {
      WebKit::NetworkActivityTracker::complete(v6);
      v6 += 48;
      v5 -= 48;
    }
    while (v5);
  }

  return WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v2, a2);
}

uint64_t non-virtual thunk to'WebKit::NetworkConnectionToWebProcess::didClose(WebKit::NetworkConnectionToWebProcess *this, IPC::Connection *a2)
{
  return WebKit::NetworkConnectionToWebProcess::didClose((WebKit::NetworkConnectionToWebProcess *)((char *)this - 48), a2);
}

IPC::Encoder *WebKit::NetworkConnectionToWebProcess::didReceiveInvalidMessage(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    if (a3 >= 0xEF4) {
      unsigned int v12 = 3828;
    }
    else {
      unsigned int v12 = a3;
    }
    uint64_t v13 = (&IPC::Detail::messageDescriptions)[3 * v12];
    uint64_t v14 = *(void *)(a1 + 264);
    *(_DWORD *)uint64_t v15 = 136446466;
    *(void *)&v15[4] = v13;
    __int16 v16 = 2048;
    uint64_t v17 = v14;
    _os_log_fault_impl(&dword_1985F2000, v5, OS_LOG_TYPE_FAULT, "Received an invalid message '%{public}s' from WebContent process %llu, requesting for it to be terminated.", v15, 0x16u);
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 80) + 40);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 358;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  *(void *)uint64_t v15 = v7;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, (uint64_t *)(a1 + 264));
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)v15, 0, 0);
  uint64_t result = *(IPC::Encoder **)v15;
  *(void *)uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::NetworkConnectionToWebProcess::didReceiveInvalidMessage(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return WebKit::NetworkConnectionToWebProcess::didReceiveInvalidMessage(a1 - 48, a2, a3);
}

void WebKit::NetworkConnectionToWebProcess::createSocketChannel(void *a1, WebCore::ResourceRequestBase *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, char a10, char a11, uint64_t a12, char a13, char a14)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = a1[10];
  uint64_t v21 = a1[33];
  uint64_t PartyForCookies = (WTF::URL *)WebCore::ResourceRequestBase::firstPartyForCookies(this);
  if (WebKit::NetworkProcess::allowsFirstPartyForCookies(v20, v21, PartyForCookies) == 2)
  {
    uint64_t v44 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::NetworkConnectionToWebProcess::createSocketChannel(const ResourceRequest &, cons"
                           "t String &, WebSocketIdentifier, WebPageProxyIdentifier, std::optional<FrameIdentifier>, std:"
                           ":optional<PageIdentifier>, const ClientOrigin &, BOOL, BOOL, OptionSet<AdvancedPrivacyProtect"
                           "ions>, ShouldRelaxThirdPartyCookieBlocking, WebCore::StoredCredentialsPolicy)";
      _os_log_fault_impl(&dword_1985F2000, v44, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 506: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a1[9] + 98) = 1;
  }
  else
  {
    uint64_t v23 = a1[11];
    long long v45 = *(_OWORD *)a6;
    uint64_t v46 = *(void *)(a6 + 16);
    WebKit::NetworkSocketChannel::create((uint64_t)a1, v23, (uint64_t)this, a3, a4, a5, &v45, (uint64_t **)buf);
    uint64_t v24 = *(void *)buf;
    if (!*(void *)buf) {
      return;
    }
    uint64_t v27 = a1[12];
    unsigned int v26 = a1 + 12;
    uint64_t v25 = v27;
    if (v27
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v26, 0), (uint64_t v25 = *v26) != 0))
    {
      int v28 = *(_DWORD *)(v25 - 8);
    }
    else
    {
      int v28 = 0;
    }
    unint64_t v29 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
    unint64_t v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
    unint64_t v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
    unsigned int v32 = v28 & ((v31 >> 31) ^ v31);
    uint64_t v33 = (uint64_t *)(v25 + 16 * v32);
    uint64_t v34 = *v33;
    if (*v33)
    {
      uint64_t v35 = 0;
      int v36 = 1;
      do
      {
        if (v34 == a4)
        {
          (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
          return;
        }
        if (v34 == -1) {
          uint64_t v35 = v33;
        }
        unsigned int v32 = (v32 + v36) & v28;
        uint64_t v33 = (uint64_t *)(v25 + 16 * v32);
        uint64_t v34 = *v33;
        ++v36;
      }
      while (*v33);
      if (v35)
      {
        uint64_t *v35 = 0;
        v35[1] = 0;
        --*(_DWORD *)(*v26 - 16);
        uint64_t v33 = v35;
      }
    }
    *uint64_t v33 = a4;
    uint64_t v37 = v33[1];
    v33[1] = *(void *)buf;
    if (v37) {
      (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
    }
    uint64_t v38 = *v26;
    if (*v26) {
      int v39 = *(_DWORD *)(v38 - 12) + 1;
    }
    else {
      int v39 = 1;
    }
    *(_DWORD *)(v38 - 1objc_destroyWeak(this + 2) = v39;
    uint64_t v40 = *v26;
    if (*v26) {
      int v41 = *(_DWORD *)(v40 - 12);
    }
    else {
      int v41 = 0;
    }
    uint64_t v42 = (*(_DWORD *)(v40 - 16) + v41);
    unint64_t v43 = *(unsigned int *)(v40 - 4);
    if (v43 <= 0x400)
    {
      if (3 * v43 > 4 * v42) {
        return;
      }
      goto LABEL_25;
    }
    if (v43 <= 2 * v42) {
LABEL_25:
    }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v26, v33);
  }
}

uint64_t *WebKit::NetworkConnectionToWebProcess::removeSocketChannel(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 96);
  uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 96), &v7);
  uint64_t v5 = *(void *)(a1 + 96);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if (v6 != result) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, result);
  }
  return result;
}

WebCore::FormData *WebKit::NetworkConnectionToWebProcess::resolveBlobReferences@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = a1[33];
    int v8 = *((_DWORD *)a2 + 12);
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    uint64_t v11 = a2[2];
    uint64_t v12 = a2[371];
    *(_DWORD *)long long buf = 134219520;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v30 = 2048;
    uint64_t v31 = v7;
    __int16 v32 = 1024;
    int v33 = v8;
    __int16 v34 = 2048;
    uint64_t v35 = v9;
    __int16 v36 = 2048;
    uint64_t v37 = v10;
    __int16 v38 = 2048;
    uint64_t v39 = v11;
    __int16 v40 = 2048;
    uint64_t v41 = v12;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::resolveBlobReferences: (parentPID=%d, pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu)", buf, 0x44u);
  }
  uint64_t v13 = a1[10];
  *(void *)long long buf = a1[11];
  uint64_t result = (WebCore::FormData *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v13 + 224), buf);
  if (result)
  {
    uint64_t v15 = result;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    WebCore::ResourceRequestBase::httpBody((uint64_t *)&v27, (WebCore::ResourceRequestBase *)(a2 + 11));
    uint64_t result = v27;
    if (v27)
    {
      __int16 v16 = (WebCore::FormData *)((char *)v15 + 632);
      uint64_t v17 = *((unsigned int *)v27 + 5);
      if (v17)
      {
        uint64_t v18 = *((void *)v27 + 1);
        uint64_t v19 = 48 * v17;
        do
        {
          if (v18 && *(_DWORD *)(v18 + 40) == 2)
          {
            buf[0] = 0;
            BYTE2(v35) = 0;
            uint64_t v20 = v16;
            uint64_t v21 = v18;
            WebCore::BlobRegistryImpl::filesInBlob();
            WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((void **)a3, (uint64_t)v26);
            WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v22);
            if (BYTE2(v35) && v33 != -1) {
              ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v33])(&v28, buf);
            }
            __int16 v16 = v20;
            uint64_t v18 = v21;
          }
          v18 += 48;
          v19 -= 48;
        }
        while (v19);
        uint64_t result = v27;
      }
      WebCore::FormData::resolveBlobReferences(v26, result, v16);
      uint64_t v23 = v26[0];
      v26[0] = 0;
      *(void *)long long buf = v23;
      WebCore::ResourceRequestBase::setHTTPBody();
      uint64_t v24 = *(WTF::RefCountedBase **)buf;
      *(void *)long long buf = 0;
      if (v24) {
        WTF::RefCounted<WebCore::FormData>::deref(v24);
      }
      uint64_t v25 = (WTF::RefCountedBase *)v26[0];
      v26[0] = 0;
      if (v25) {
        WTF::RefCounted<WebCore::FormData>::deref(v25);
      }
      uint64_t result = v27;
      uint64_t v27 = 0;
      if (result) {
        return (WebCore::FormData *)WTF::RefCounted<WebCore::FormData>::deref(result);
      }
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  return result;
}

void **WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(void **result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  unint64_t v5 = *((unsigned int *)result + 2);
  unint64_t v6 = v4 + *((unsigned int *)result + 3);
  if (v6 > v5)
  {
    unint64_t v7 = v5 + (v5 >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 <= v6) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t result = WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(result, v9);
    uint64_t v4 = *(unsigned int *)(a2 + 12);
  }
  if (v4)
  {
    uint64_t v10 = *(uint64_t **)a2;
    unsigned int v11 = *((_DWORD *)v3 + 3);
    uint64_t v12 = 8 * v4;
    do
    {
      uint64_t v13 = *v3;
      uint64_t v14 = *v10;
      *v10++ = 0;
      v13[v11++] = v14;
      v12 -= 8;
    }
    while (v12);
    *((_DWORD *)v3 + 3) = v11;
  }
  return result;
}

void WebKit::NetworkConnectionToWebProcess::createFetchTask(WebKit::NetworkConnectionToWebProcess *this@<X0>, WebKit::NetworkResourceLoader *a2@<X1>, const WebCore::ResourceRequest *a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v7 = (WebKit::WebSWServerConnection *)WebKit::NetworkConnectionToWebProcess::swConnection(this);
  if (v7)
  {
    WebKit::WebSWServerConnection::createFetchTask(v7, a2, a3, a4);
  }
  else
  {
    *a4 = 0;
  }
}

uint64_t WebKit::NetworkConnectionToWebProcess::swConnection(WebKit::NetworkConnectionToWebProcess *this)
{
  uint64_t v1 = *((void *)this + 27);
  if (!v1 || (uint64_t v2 = *(void *)(v1 + 8)) == 0)
  {
    WebKit::NetworkConnectionToWebProcess::establishSWServerConnection(this);
    uint64_t v2 = *((void *)this + 27);
    if (v2) {
      return *(void *)(v2 + 8);
    }
  }
  return v2;
}

void WebKit::NetworkConnectionToWebProcess::scheduleResourceLoad(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 264);
  uint64_t v10 = (WebCore::ResourceRequestBase *)(a2 + 88);
  uint64_t PartyForCookies = (WTF::URL *)WebCore::ResourceRequestBase::firstPartyForCookies((WebCore::ResourceRequestBase *)(a2 + 88));
  int v12 = WebKit::NetworkProcess::allowsFirstPartyForCookies(v8, v9, PartyForCookies);
  uint64_t v13 = qword_1EB358050;
  if (v12 != 1)
  {
    int v55 = v12;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_ERROR))
    {
      WebCore::ResourceRequestBase::firstPartyForCookies(v10);
      WTF::String::utf8();
      if (v63) {
        CFTypeRef v56 = (char *)v63 + 16;
      }
      else {
        CFTypeRef v56 = 0;
      }
      WebCore::ResourceRequestBase::url(v10);
      WTF::String::utf8();
      if (v62) {
        CFTypeRef v57 = (char *)v62 + 16;
      }
      else {
        CFTypeRef v57 = 0;
      }
      *(_DWORD *)long long buf = 136643075;
      *(void *)&uint8_t buf[4] = v56;
      *(_WORD *)&unsigned char buf[12] = 2085;
      *(void *)&buf[14] = v57;
      _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "scheduleResourceLoad: Web process does not have cookie access to url %{sensitive}s for request %{sensitive}s", buf, 0x16u);
      char v59 = v62;
      uint64_t v62 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 1) {
          WTF::fastFree(v59, v58);
        }
        else {
          --*(_DWORD *)v59;
        }
      }
      CFTypeRef v60 = v63;
      CFTypeRef v63 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 1) {
          WTF::fastFree(v60, v58);
        }
        else {
          --*(_DWORD *)v60;
        }
      }
    }
    if (v55 == 2)
    {
      char v61 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "void WebKit::NetworkConnectionToWebProcess::scheduleResourceLoad(NetworkResourceLoadParamet"
                             "ers &&, std::optional<NetworkResourceLoadIdentifier>)";
        _os_log_fault_impl(&dword_1985F2000, v61, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 560: Invalid message dispatched %{public}s", buf, 0xCu);
      }
      *(unsigned char *)(*(void *)(a1 + 72) + 98) = 1;
      return;
    }
    uint64_t v13 = qword_1EB358050;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 264);
    int v15 = *(_DWORD *)(a2 + 48);
    uint64_t v17 = *(void *)a2;
    uint64_t v16 = *(void *)(a2 + 8);
    uint64_t v18 = *(void *)(a2 + 16);
    uint64_t v19 = *(void *)(a2 + 2968);
    if (a4) {
      uint64_t v20 = a3;
    }
    else {
      uint64_t v20 = 0;
    }
    *(_DWORD *)long long buf = 134219776;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v14;
    __int16 v65 = 1024;
    int v66 = v15;
    __int16 v67 = 2048;
    uint64_t v68 = v17;
    __int16 v69 = 2048;
    uint64_t v70 = v16;
    __int16 v71 = 2048;
    uint64_t v72 = v18;
    __int16 v73 = 2048;
    uint64_t v74 = v19;
    __int16 v75 = 2048;
    uint64_t v76 = v20;
    _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::scheduleResourceLoad: (parentPID=%d, pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, existingLoaderToResume=%llu)", buf, 0x4Eu);
  }
  uint64_t v21 = *(void *)(a1 + 80);
  *(void *)long long buf = *(void *)(a1 + 88);
  uint64_t v22 = (WTF::RunLoop *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v21 + 224), buf);
  if (!v22 || (uint64_t v22 = (WTF::RunLoop *)WebKit::NetworkSession::ensureSWServer(v22), *((unsigned char *)v22 + 176)))
  {
    uint64_t v23 = *(void *)(a2 + 2968);
    if (!v23)
    {
      __break(0xC471u);
      JUMPOUT(0x198B3EEE8);
    }
    uint64_t v24 = (WTF::RunLoop *)WTF::RunLoop::main(v22);
    if ((WTF::RunLoop::isCurrent(v24) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198B3EF08);
    }
    if (!a4) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(a1 + 80);
    *(void *)long long buf = *(void *)(a1 + 88);
    uint64_t v26 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v25 + 224), buf);
    if (v26)
    {
      WebKit::NetworkSession::takeLoaderAwaitingWebProcessTransfer(v26, a3, &v63);
      uint64_t v27 = v63;
      if (v63)
      {
        char v28 = qword_1EB358050;
        if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v29 = *(void *)(a1 + 264);
          *(_DWORD *)long long buf = 134218240;
          *(void *)&uint8_t buf[4] = a1;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v29;
          _os_log_impl(&dword_1985F2000, v28, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::scheduleResourceLoad: Resuming existing NetworkResourceLoader", buf, 0x16u);
        }
        ++*((_DWORD *)v27 + 2);
        uint64_t v62 = v27;
        WebKit::NetworkResourceLoadMap::add(a1 + 104, v23, (uint64_t *)&v62, (uint64_t)buf);
        uint64_t v31 = v62;
        uint64_t v62 = 0;
        if (v31) {
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v31 + 2, v30);
        }
        WebKit::NetworkResourceLoader::transferToNewWebProcess(v27, (WebKit::NetworkConnectionToWebProcess *)a1, (const WebKit::NetworkResourceLoadParameters *)a2);
        WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v27 + 2, v32);
        return;
      }
      uint64_t v37 = qword_1EB358050;
      if (!os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_ERROR)) {
        goto LABEL_26;
      }
      uint64_t v54 = *(void *)(a1 + 264);
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v54;
      uint64_t v39 = "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::scheduleResourceLoad: Could not find existin"
            "g NetworkResourceLoader to resume, will do a fresh load";
    }
    else
    {
      uint64_t v37 = qword_1EB358050;
      if (!os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_ERROR)) {
        goto LABEL_26;
      }
      uint64_t v38 = *(void *)(a1 + 264);
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v38;
      uint64_t v39 = "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::scheduleResourceLoad: Could not find network"
            " session of existing NetworkResourceLoader to resume, will do a fresh load";
    }
    _os_log_error_impl(&dword_1985F2000, v37, OS_LOG_TYPE_ERROR, v39, buf, 0x16u);
LABEL_26:
    if (*(unsigned char *)(a2 + 3786))
    {
      if (*(unsigned char *)(a2 + 2880))
      {
        uint64_t v40 = *(void *)(a1 + 80);
        *(void *)long long buf = *(void *)(a1 + 88);
        uint64_t v41 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v40 + 224), buf);
        if (v41)
        {
          uint64_t v42 = *(uint64_t **)(v41 + 72);
          if (v42)
          {
            uint64_t v43 = *(void *)a2;
            uint64_t v44 = *(void *)(a2 + 16);
            uint64_t v45 = *(void *)(a2 + 24);
            uint64_t v46 = (const WTF::URL *)WebCore::ResourceRequestBase::url(v10);
            WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)buf, v46);
            WebKit::WebResourceLoadStatisticsStore::recordFrameLoadForStorageAccess(v42, v43, v44, v45, (WTF::StringImpl **)buf);
            uint64_t v48 = *(WTF::StringImpl **)buf;
            *(void *)long long buf = 0;
            if (v48)
            {
              if (*(_DWORD *)v48 == 2) {
                WTF::StringImpl::destroy(v48, v47);
              }
              else {
                *(_DWORD *)v48 -= 2;
              }
            }
          }
        }
      }
    }
    uint64_t v62 = 0;
    uint64_t v49 = WTF::fastMalloc((WTF *)0x1360);
    CFTypeRef v63 = (WTF *)WebKit::NetworkResourceLoader::NetworkResourceLoader(v49, a2, a1, (uint64_t *)&v62);
    WebKit::NetworkResourceLoadMap::add(a1 + 104, v23, (uint64_t *)&v63, (uint64_t)buf);
    uint64_t v51 = v63;
    uint64_t v52 = *(void *)buf;
    CFTypeRef v63 = 0;
    if (v51) {
      WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v51 + 2, v50);
    }
    unsigned int v53 = v62;
    uint64_t v62 = 0;
    if (v53) {
      (*(void (**)(WTF *))(*(void *)v53 + 8))(v53);
    }
    WebKit::NetworkResourceLoader::startWithServiceWorker(*(WebKit::NetworkResourceLoader **)(v52 + 8));
    return;
  }
  ++*(_DWORD *)(a1 + 8);
  *(void *)long long buf = a1;
  *(void *)&buf[8] = a1;
  WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((uint64_t)&buf[16], a2);
  *(void *)&long long v77 = a3;
  BYTE8(v77) = a4;
  int v33 = (_OWORD *)WTF::fastMalloc((WTF *)0xF00);
  *(void *)int v33 = &unk_1EE9C33F0;
  long long v34 = *(_OWORD *)buf;
  *(void *)&buf[8] = 0;
  v33[1] = v34;
  WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((uint64_t)(v33 + 2), (uint64_t)&buf[16]);
  v33[239] = v77;
  WebCore::SWServer::whenImportIsCompleted();
  CFTypeRef v63 = 0;
  if (v33) {
    (*(void (**)(_OWORD *))(*(void *)v33 + 8))(v33);
  }
  WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)&buf[16], v35);
  __int16 v36 = *(_DWORD **)&buf[8];
  *(void *)&buf[8] = 0;
  if (v36)
  {
    if (v36[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v36 + 8))(v36);
    }
    else {
      --v36[2];
    }
  }
}

_DWORD *WebKit::NetworkConnectionToWebProcess::performSynchronousLoad(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = qword_1EB358050;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 264);
    int v9 = *(_DWORD *)(a2 + 48);
    uint64_t v10 = *(void *)a2;
    uint64_t v11 = *(void *)(a2 + 8);
    uint64_t v12 = *(void *)(a2 + 16);
    uint64_t v13 = *(void *)(a2 + 2968);
    *(_DWORD *)long long buf = 134219520;
    uint64_t v23 = a1;
    __int16 v24 = 2048;
    uint64_t v25 = v8;
    __int16 v26 = 1024;
    int v27 = v9;
    __int16 v28 = 2048;
    uint64_t v29 = v10;
    __int16 v30 = 2048;
    uint64_t v31 = v11;
    __int16 v32 = 2048;
    uint64_t v33 = v12;
    __int16 v34 = 2048;
    uint64_t v35 = v13;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::performSynchronousLoad: (parentPID=%d, pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu)", buf, 0x44u);
  }
  uint64_t v14 = *(void *)(a2 + 2968);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198B3F1F0);
  }
  int v15 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v7);
  if ((WTF::RunLoop::isCurrent(v15) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198B3F210);
  }
  uint64_t v16 = WTF::fastMalloc((WTF *)0x1360);
  WebKit::NetworkResourceLoader::NetworkResourceLoader(v16, a2, a1, a3);
  ++*(_DWORD *)(v16 + 8);
  uint64_t v21 = v16;
  WebKit::NetworkResourceLoadMap::add(a1 + 104, v14, &v21, (uint64_t)buf);
  uint64_t v18 = v21;
  uint64_t v21 = 0;
  if (v18) {
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v18 + 8), v17);
  }
  WebKit::NetworkResourceLoader::start((String *)v16);
  return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v16 + 8), v19);
}

uint64_t WebKit::NetworkConnectionToWebProcess::testProcessIncomingSyncMessagesWhenWaitingForSyncReply(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v22 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 80) + 40);
  uint64_t v27 = 0;
  IPC::Connection::createSyncMessageEncoder(3618, 0, &v27, &v26);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v26, &v22);
  IPC::Connection::sendSyncMessage(v4, v27, (uint64_t *)&v26, 0, (uint64_t)&v24, INFINITY);
  if (!v25)
  {
    __int16 v23 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v24, &v23);
    if (!HIBYTE(v23))
    {
      int v5 = 0;
      LOBYTE(v19) = 13;
      int v6 = 1;
      int v21 = 1;
      int v7 = v25;
      if (v25 == -1) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    int v7 = v25;
    if (!v25)
    {
      int v6 = 0;
      int v9 = v24;
      __int16 v24 = 0;
      int v5 = v23;
      uint64_t v19 = v9;
      char v20 = v23;
      int v21 = 0;
      goto LABEL_8;
    }
LABEL_18:
    uint64_t v17 = std::__throw_bad_variant_access[abi:sn180100]();
    WebKit::NetworkConnectionToWebProcess::loadPing(v17, v18);
  }
  if (v25 != 1) {
    goto LABEL_18;
  }
  int v5 = 0;
  LOBYTE(v19) = (_BYTE)v24;
  int v6 = 1;
  int v21 = 1;
  int v7 = 1;
LABEL_8:
  ((void (*)(__int16 *, uint64_t **))off_1EE9C3408[v7])(&v23, &v24);
LABEL_9:
  uint64_t v10 = v26;
  __int16 v26 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v15, v16);
  }
  if (v6) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v5 == 0;
  }
  uint64_t v12 = !v11;
  uint64_t v13 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v12);
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  return ((uint64_t (*)(uint64_t **, uint64_t **))off_1EE9C31D0[v6])(&v24, &v19);
}

void WebKit::NetworkConnectionToWebProcess::loadPing(uint64_t a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 264);
    int v6 = *((_DWORD *)a2 + 12);
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    uint64_t v9 = a2[2];
    uint64_t v10 = a2[371];
    int buf = 134219520;
    *(void *)buf_4 = a1;
    *(_WORD *)&buf_4[8] = 2048;
    *(void *)&buf_4[10] = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    __int16 v15 = 2048;
    uint64_t v16 = v7;
    __int16 v17 = 2048;
    uint64_t v18 = v8;
    __int16 v19 = 2048;
    uint64_t v20 = v9;
    __int16 v21 = 2048;
    uint64_t v22 = v10;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::loadPing: (parentPID=%d, pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu)", (uint8_t *)&buf, 0x44u);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&buf, (uint64_t **)(a1 + 72));
  *(void *)&buf_4[4] = a2[371];
  operator new();
}

uint64_t WebKit::NetworkConnectionToWebProcess::cookieAcceptPolicyChanged(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 304;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  BOOL v11 = v4;
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(v4, 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
    uint64_t result = (uint64_t)v11;
    BOOL v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v7);
      return WTF::fastFree(v9, v10);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

_DWORD *WebKit::NetworkConnectionToWebProcess::removeLoadIdentifier(uint64_t *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198B3F780);
  }
  uint64_t v4 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  if ((WTF::RunLoop::isCurrent(v4) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198B3F7A0);
  }
  *(void *)BOOL v11 = a2;
  uint64_t result = (_DWORD *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 13, v11);
  if (result)
  {
    uint64_t v6 = (WebKit::NetworkResourceLoader *)result;
    uint64_t v7 = result + 2;
    ++result[2];
    uint64_t v8 = qword_1EB358050;
    if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = a1[33];
      *(_DWORD *)BOOL v11 = 134218496;
      *(void *)&v11[4] = a1;
      __int16 v12 = 2048;
      uint64_t v13 = v9;
      __int16 v14 = 2048;
      uint64_t v15 = a2;
      _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::removeLoadIdentifier: Removing identifier %llu and aborting corresponding loader", v11, 0x20u);
    }
    WebKit::NetworkResourceLoader::abort(v6);
    return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v7, v10);
  }
  return result;
}

void WebKit::NetworkConnectionToWebProcess::stopAllNetworkActivityTrackingForPage(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 136);
  uint64_t v4 = *(unsigned int *)(a1 + 148);
  if (v4)
  {
    uint64_t v10 = 48 * v4;
    uint64_t v11 = v3 + 24;
    do
    {
      if (*(void *)(v11 - 24) == a2) {
        WebKit::NetworkActivityTracker::complete(v11);
      }
      v11 += 48;
      v10 -= 48;
    }
    while (v10);
    unint64_t v3 = *(void *)(a1 + 136);
    LODWORD(v4) = *(_DWORD *)(a1 + 148);
    unint64_t v6 = v3 + 48 * v4;
    int v5 = 0;
    if (v4)
    {
      uint64_t v12 = *(void *)(a1 + 136);
      uint64_t v7 = (long long *)(v3 + 48 * v4);
      unint64_t v13 = (unint64_t)v7;
      do
      {
        if (*(void *)v3 == a2)
        {
          unint64_t v14 = v3;
          if (v13 != *(void *)(a1 + 136) + 48 * *(unsigned int *)(a1 + 148))
          {
            if ((long long *)v3 == v7)
            {
              unint64_t v14 = v13;
            }
            else
            {
              WTF::VectorMover<false,WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker>::moveOverlapping(v7, (long long *)v3, v13);
              unint64_t v14 = v13 + v12 - (void)v7;
            }
          }
          uint64_t v15 = *(const void **)(v3 + 40);
          *(void *)(v3 + 40) = 0;
          if (v15) {
            CFRelease(v15);
          }
          uint64_t v7 = (long long *)(v3 + 48);
          ++v5;
          unint64_t v13 = v14;
        }
        v3 += 48;
        v12 += 48;
      }
      while (v3 < v6);
      unint64_t v3 = *(void *)(a1 + 136);
      LODWORD(v4) = *(_DWORD *)(a1 + 148);
      unint64_t v6 = v13;
    }
    else
    {
      uint64_t v7 = *(long long **)(a1 + 136);
    }
  }
  else
  {
    int v5 = 0;
    unint64_t v6 = *(void *)(a1 + 136);
    uint64_t v7 = (long long *)v6;
  }
  uint64_t v8 = (long long *)(v3 + 48 * v4);
  if (v7 != v8)
  {
    WTF::VectorMover<false,WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker>::moveOverlapping(v7, v8, v6);
    LODWORD(v4) = *(_DWORD *)(a1 + 148);
  }
  *(_DWORD *)(a1 + 148) = v4 - v5;
}

void *WebKit::NetworkConnectionToWebProcess::browsingContextRemoved(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 88);
  uint64_t result = (void *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 224), &v11);
  if (result)
  {
    uint64_t result = (void *)result[77];
    if (result)
    {
      return WebKit::NetworkCache::Cache::browsingContextRemoved((uint64_t)result, a2, a3, a4, a5);
    }
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::prefetchDNS(WebKit::NetworkConnectionToWebProcess *this, const WTF::String *a2)
{
  return MEMORY[0x1F416CC38](a2);
}

uint64_t WebKit::NetworkConnectionToWebProcess::sendH2Ping(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 80);
  *(void *)uint64_t v20 = *(void *)(a1 + 88);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 224), v20))
  {
    uint64_t v6 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 88));
    uint64_t v7 = *(_DWORD **)v6;
    if (*(void *)v6) {
      *v7 += 2;
    }
    *(void *)uint64_t v20 = v7;
    long long v8 = *(_OWORD *)(v6 + 24);
    *(_OWORD *)&v20[8] = *(_OWORD *)(v6 + 8);
    *(_OWORD *)&uint8_t v20[24] = v8;
    operator new();
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 88));
  WebCore::createInternalError();
  __int16 v23 = v16;
  int v22 = v15;
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v11;
  *(_OWORD *)&v20[16] = v12;
  *(_OWORD *)&v20[32] = v13;
  __int16 v21 = v14;
  CFTypeRef v24 = cf;
  char v25 = v18;
  int v26 = 1;
  uint64_t v9 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 16))(v9, v20);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  if (v26 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9C31E0[v26])(&v19, v20);
  }
  return 0;
}

WTF::StringImpl *WebKit::NetworkConnectionToWebProcess::preconnectTo(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t *a4)
{
  *(void *)&cf[7] = *MEMORY[0x1E4F143B8];
  long long v8 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 264);
    int v10 = *((_DWORD *)a4 + 12);
    uint64_t v11 = *a4;
    uint64_t v12 = a4[1];
    uint64_t v13 = a4[2];
    uint64_t v14 = a4[371];
    *(_DWORD *)__int16 v30 = 134219520;
    *(void *)&unsigned char v30[4] = a1;
    *(_WORD *)&v30[12] = 2048;
    *(void *)&v30[14] = v9;
    __int16 v31 = 1024;
    int v32 = v10;
    __int16 v33 = 2048;
    uint64_t v34 = v11;
    __int16 v35 = 2048;
    uint64_t v36 = v12;
    *(_WORD *)uint64_t v37 = 2048;
    *(void *)&CFTypeRef v37[2] = v13;
    __int16 v38 = 2048;
    *(void *)CFTypeRef cf = v14;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::preconnectTo: (parentPID=%d, pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu)", v30, 0x44u);
  }
  ++*(_DWORD *)(a1 + 8);
  int v15 = (uint64_t *)(*(void *)(a1 + 80) + 208);
  *(void *)__int16 v30 = "LegacyCustomProtocolManager";
  *(void *)&v30[8] = 28;
  __int16 v16 = (WebKit::LegacyCustomProtocolManager *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v15, (WTF::ASCIILiteralHash *)v30);
  __int16 v17 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a4 + 11));
  WTF::URL::protocol(v17);
  if ((v18 & 0xFF00000000) != 0) {
    WTF::String::String();
  }
  else {
    WTF::String::String();
  }
  int v19 = a3;
  int v21 = WebKit::LegacyCustomProtocolManager::supportsScheme(v16, (WTF::ASCIICaseInsensitiveHash **)v30);
  int v22 = *(WTF::StringImpl **)v30;
  *(void *)__int16 v30 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::destroy(v22, v20);
      if (v21) {
        goto LABEL_14;
      }
      goto LABEL_11;
    }
    *(_DWORD *)v22 -= 2;
  }
  if (v21) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v23 = *(void *)(a1 + 80);
  *(void *)__int16 v30 = *(void *)(a1 + 88);
  uint64_t v24 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v23 + 224), v30);
  if (v24 && *(unsigned char *)(v24 + 724)) {
    operator new();
  }
LABEL_14:
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a4 + 11));
  WebCore::createInternalError();
  if (v19) {
    WebKit::NetworkConnectionToWebProcess::didFinishPreconnection((IPC::Encoder *)a1, a2, (WebCore::ResourceError *)v30);
  }
  int v26 = *(const void **)&cf[1];
  *(void *)&cf[1] = 0;
  if (v26) {
    CFRelease(v26);
  }
  uint64_t v27 = *(WTF::StringImpl **)v37;
  *(void *)uint64_t v37 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v25);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  __int16 v28 = *(WTF::StringImpl **)&v30[8];
  *(void *)&v30[8] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v25);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)v30;
  *(void *)__int16 v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (*(_DWORD *)(a1 + 8) == 1) {
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  }
  --*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::isResourceLoadFinished(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3)
  {
    int v4 = *(_DWORD *)(v3 - 8);
    unint64_t v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    unsigned int v8 = v4 & ((v7 >> 31) ^ v7);
    uint64_t v9 = *(void *)(v3 + 16 * v8);
    if (v9 == a2)
    {
      BOOL v10 = 0;
    }
    else
    {
      int v11 = 1;
      do
      {
        BOOL v10 = v9 == 0;
        if (!v9) {
          break;
        }
        unsigned int v8 = (v8 + v11) & v4;
        uint64_t v9 = *(void *)(v3 + 16 * v8);
        ++v11;
      }
      while (v9 != a2);
    }
  }
  else
  {
    BOOL v10 = 1;
  }
  uint64_t v12 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, BOOL))(*(void *)v12 + 16))(v12, v10);
  uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);

  return v13(v12);
}

IPC::Encoder *WebKit::NetworkConnectionToWebProcess::didFinishPreconnection(IPC::Encoder *result, uint64_t a2, WebCore::ResourceError *a3)
{
  uint64_t v10 = a2;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(*((void *)result + 9) + 33));
  if (v3)
  {
    uint64_t v5 = *((void *)result + 9);
    unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v6 = 309;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    int v11 = v6;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, &v10);
    IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v6, a3);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v11, 0, 0);
    uint64_t result = v11;
    int v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v7);
      return (IPC::Encoder *)WTF::fastFree(v8, v9);
    }
  }
  return result;
}

WTF *WebKit::NetworkConnectionToWebProcess::startDownload(void *a1, uint64_t a2, CFTypeRef *a3, WebCore::SecurityOriginData *a4, __int16 a5, WTF::StringImpl **a6, char a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v13 = (atomic_uint *)a1[10];
  atomic_fetch_add(v13 + 32, 1u);
  uint64_t v14 = a1[11];
  long long v16 = *(_OWORD *)a8;
  uint64_t v17 = *(void *)(a8 + 16);
  uint64_t result = WebKit::DownloadManager::startDownload((uint64_t)(v13 + 40), v14, a2, a3, a4, a5, a6, a7, &v16, a9, a10, a1[33], 1);
  if (v13)
  {
    if (atomic_fetch_add(v13 + 32, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v13 + 32);
      return (WTF *)(*(uint64_t (**)(atomic_uint *))(*(void *)v13 + 8))(v13);
    }
  }
  return result;
}

atomic_uchar *volatile **WebKit::NetworkConnectionToWebProcess::loadCancelledDownloadRedirectRequestInFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v9, (uint64_t **)(a1 + 72));
  v8[0] = a2;
  v8[1] = a3;
  v8[2] = a4;
  IPC::Connection::send<Messages::NetworkProcessConnection::LoadCancelledDownloadRedirectRequestInFrame>((uint64_t)v9, (uint64_t)v8, 0, 0, 0);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v9);
}

uint64_t IPC::Connection::send<Messages::NetworkProcessConnection::LoadCancelledDownloadRedirectRequestInFrame>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 310;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<std::tuple<WebCore::ResourceRequest const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ResourceRequest const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&>,0ul,1ul,2ul>(v10, a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t WebKit::NetworkConnectionToWebProcess::convertMainResourceLoadToDownload(uint64_t *a1, WTF::StringImpl *a2, char a3, uint64_t a4, WebCore::ResourceRequest *a5, WebCore::SecurityOriginData *a6, WebCore::ResourceResponseBase *a7, __int16 a8)
{
  long long v16 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  if (WTF::RunLoop::isCurrent(v16))
  {
    if (a3)
    {
      char v25 = a2;
      uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 13, &v25);
      if (result)
      {
        uint64_t v18 = (_DWORD *)(result + 8);
        ++*(_DWORD *)(result + 8);
        WebKit::NetworkResourceLoader::convertToDownload(result, a4, a5, a7);
        return (uint64_t)WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v18, v19);
      }
    }
    else
    {
      uint64_t v20 = a1[11];
      uint64_t v21 = a1[10] + 160;
      char v25 = 0;
      LOBYTE(v23) = 0;
      char v24 = 0;
      WebKit::DownloadManager::startDownload(v21, v20, a4, (CFTypeRef *)a5, a6, a8, &v25, 0, &v23, 0, 0, 0, 0);
      uint64_t result = (uint64_t)v25;
      char v25 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v22);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    uint64_t result = 765;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkConnectionToWebProcess::cookiesForDOM(void *a1, WTF::URL *a2, unsigned __int8 *a3, const WTF::String **a4, uint64_t a5, uint64_t a6, WTF::String *a7, int a8, char a9, char a10, uint64_t *a11)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  int PartyForCookies = WebKit::NetworkProcess::allowsFirstPartyForCookies(a1[10], a1[33], a2);
  if (PartyForCookies == 1)
  {
    if (*a3 && (WebKit::shouldTreatAsSameSite(a2, (const WTF::URL *)a4, v19) & 1) == 0)
    {
      __int16 v30 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = a1[33];
        *(_DWORD *)int buf = 134218240;
        *(void *)&uint8_t buf[4] = a1;
        __int16 v45 = 2048;
        uint64_t v46 = v31;
        _os_log_error_impl(&dword_1985F2000, v30, OS_LOG_TYPE_ERROR, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::cookiesForDOM: Rejecting cookie access due to invalid sameSiteInfo", buf, 0x16u);
      }
      uint64_t v40 = 0;
      WTF::CompletionHandler<void ()(WTF::String,BOOL)>::operator()(a11, &v40);
      uint64_t result = v40;
      if (!v40) {
        return result;
      }
    }
    else
    {
      uint64_t v23 = a1[10];
      *(void *)int buf = a1[11];
      uint64_t v24 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v23 + 232), buf);
      if (v24)
      {
        int v25 = v24;
        uint64_t v36 = a5;
        uint64_t v37 = a6;
        char v38 = 1;
        WebCore::NetworkStorageSession::cookiesForDOM();
        uint64_t v26 = a1[10];
        uint64_t v43 = a1[11];
        uint64_t v27 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v26 + 224), &v43);
        if (v27 && (*(unsigned int (**)(uint64_t))(*(void *)v27 + 88))(v27))
        {
          v34[0] = a5;
          v34[1] = a6;
          char v35 = 1;
          WebKit::NetworkResourceLoader::logCookieInformation((uint64_t)a1, (uint64_t)"NetworkConnectionToWebProcess::cookiesForDOM", 45, (uint64_t)a1, v25, a2, a3, a4, MEMORY[0x1E4F30980], (uint64_t)v34, a7, 1, 0, 0);
        }
        __int16 v28 = *(WTF::StringImpl **)buf;
        *(void *)int buf = 0;
        __int16 v33 = v28;
        WTF::CompletionHandler<void ()(WTF::String,BOOL)>::operator()(a11, &v33);
        if (v33)
        {
          if (*(_DWORD *)v33 == 2) {
            WTF::StringImpl::destroy(v33, v29);
          }
          else {
            *(_DWORD *)v33 -= 2;
          }
        }
        uint64_t result = *(WTF::StringImpl **)buf;
        *(void *)int buf = 0;
        if (!result) {
          return result;
        }
      }
      else
      {
        uint64_t v39 = 0;
        WTF::CompletionHandler<void ()(WTF::String,BOOL)>::operator()(a11, &v39);
        uint64_t result = v39;
        if (!v39) {
          return result;
        }
      }
    }
LABEL_25:
    int v22 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
    }
    goto LABEL_26;
  }
  if (PartyForCookies != 2)
  {
    uint64_t v41 = 0;
    WTF::CompletionHandler<void ()(WTF::String,BOOL)>::operator()(a11, &v41);
    uint64_t result = v41;
    if (!v41) {
      return result;
    }
    int v22 = *(_DWORD *)v41 - 2;
    if (*(_DWORD *)v41 == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
    }
LABEL_26:
    *(_DWORD *)uint64_t result = v22;
    return result;
  }
  int v32 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::NetworkConnectionToWebProcess::cookiesForDOM(const URL &, const SameSiteInfo &, co"
                         "nst URL &, FrameIdentifier, PageIdentifier, IncludeSecureCookies, ApplyTrackingPrevention, Shou"
                         "ldRelaxThirdPartyCookieBlocking, CompletionHandler<void (String, BOOL)> &&)";
    _os_log_fault_impl(&dword_1985F2000, v32, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 798: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  *(unsigned char *)(a1[9] + 98) = 1;
  uint64_t v42 = 0;
  WTF::CompletionHandler<void ()(WTF::String,BOOL)>::operator()(a11, &v42);
  uint64_t result = v42;
  if (v42) {
    goto LABEL_25;
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WTF::String,BOOL)>::operator()(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  unsigned __int8 v3 = *a2;
  *a2 = 0;
  unint64_t v7 = v3;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v2 + 16))(v2, &v7);
  uint64_t v5 = v7;
  unint64_t v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

uint64_t WebKit::shouldTreatAsSameSite(WebKit *this, const WTF::URL *a2, const WTF::URL *a3)
{
  if (WebCore::SecurityPolicy::shouldInheritSecurityOriginFromOwner(a2, a2)) {
    return 1;
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v12, this);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v11, a2);
  uint64_t v5 = WTF::equal(v12, v11, v6);
  unsigned int v8 = v11;
  int v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v12;
  uint64_t v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  return v5;
}

void WebKit::NetworkConnectionToWebProcess::setCookiesFromDOM(void *a1, WTF::URL *a2, unsigned __int8 *a3, const WTF::String **a4, uint64_t a5, uint64_t a6, WTF::String *a7, int a8, uint64_t a9, char a10)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int PartyForCookies = WebKit::NetworkProcess::allowsFirstPartyForCookies(a1[10], a1[33], a2);
  if (PartyForCookies == 1)
  {
    if (*a3 && (WebKit::shouldTreatAsSameSite(a2, (const WTF::URL *)a4, v18) & 1) == 0)
    {
      int v25 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = a1[33];
        *(_DWORD *)int buf = 134218240;
        *(void *)&uint8_t buf[4] = a1;
        __int16 v33 = 2048;
        uint64_t v34 = v26;
        _os_log_error_impl(&dword_1985F2000, v25, OS_LOG_TYPE_ERROR, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::setCookiesFromDOM: Rejecting cookie access due to invalid sameSiteInfo", buf, 0x16u);
      }
    }
    else
    {
      uint64_t v20 = a1[10];
      *(void *)int buf = a1[11];
      uint64_t v21 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v20 + 232), buf);
      if (v21)
      {
        int v22 = v21;
        uint64_t v29 = a5;
        uint64_t v30 = a6;
        char v31 = 1;
        WebCore::NetworkStorageSession::setCookiesFromDOM();
        uint64_t v23 = a1[10];
        *(void *)int buf = a1[11];
        uint64_t v24 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v23 + 224), buf);
        if (v24)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v24 + 88))(v24))
          {
            v27[0] = a5;
            v27[1] = a6;
            char v28 = 1;
            WebKit::NetworkResourceLoader::logCookieInformation((uint64_t)a1, (uint64_t)"NetworkConnectionToWebProcess::setCookiesFromDOM", 49, (uint64_t)a1, v22, a2, a3, a4, MEMORY[0x1E4F30980], (uint64_t)v27, a7, 1, 0, 0);
          }
        }
      }
    }
  }
  else if (PartyForCookies == 2)
  {
    int v19 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::NetworkConnectionToWebProcess::setCookiesFromDOM(const URL &, const SameSiteInfo"
                           " &, const URL &, WebCore::FrameIdentifier, PageIdentifier, ApplyTrackingPrevention, const Str"
                           "ing &, ShouldRelaxThirdPartyCookieBlocking)";
      _os_log_fault_impl(&dword_1985F2000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 822: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a1[9] + 98) = 1;
  }
}

uint64_t WebKit::NetworkConnectionToWebProcess::cookiesEnabledSync(void *a1, WTF::URL *a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  long long v9 = *a4;
  uint64_t v10 = *((void *)a4 + 2);
  return WebKit::NetworkConnectionToWebProcess::cookiesEnabled(a1, a2, a3, (uint64_t)&v9, a5, a6, a7, a8);
}

uint64_t WebKit::NetworkConnectionToWebProcess::cookiesEnabled(void *a1, WTF::URL *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int PartyForCookies = WebKit::NetworkProcess::allowsFirstPartyForCookies(a1[10], a1[33], a2);
  if (PartyForCookies == 1)
  {
    uint64_t v13 = a1[10];
    *(void *)int buf = a1[11];
    if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v13 + 232), buf))
    {
      WebCore::NetworkStorageSession::addCookiesEnabledStateObserver();
      uint64_t v14 = WebCore::NetworkStorageSession::cookiesEnabled();
      uint64_t v12 = *a8;
      *a8 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v14);
      return (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else if (PartyForCookies == 2)
  {
    int v11 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::NetworkConnectionToWebProcess::cookiesEnabled(const URL &, const URL &, std::opt"
                           "ional<FrameIdentifier>, std::optional<PageIdentifier>, ShouldRelaxThirdPartyCookieBlocking, C"
                           "ompletionHandler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v11, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 850: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a1[9] + 98) = 1;
    uint64_t v12 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
    return (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v16 = *a8;
  *a8 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v16 + 16))(v16, 0);
  uint64_t v17 = *(uint64_t (**)(uint64_t))(*(void *)v16 + 8);

  return v17(v16);
}

WTF::StringImpl *WebKit::NetworkConnectionToWebProcess::cookieRequestHeaderFieldValue(void *a1, WTF::URL *a2, unsigned char *a3, const WTF::URL *a4, long long *a5, int a6, int a7, int a8, char a9, char a10, uint64_t *a11)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  int PartyForCookies = WebKit::NetworkProcess::allowsFirstPartyForCookies(a1[10], a1[33], a2);
  if (PartyForCookies == 1)
  {
    if (*a3 && (WebKit::shouldTreatAsSameSite(a2, a4, v17) & 1) == 0)
    {
      uint64_t v24 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = a1[33];
        *(_DWORD *)int buf = 134218240;
        *(void *)&uint8_t buf[4] = a1;
        __int16 v35 = 2048;
        uint64_t v36 = v25;
        _os_log_error_impl(&dword_1985F2000, v24, OS_LOG_TYPE_ERROR, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::cookieRequestHeaderFieldValue: Rejecting cookie access due to invalid sameSiteInfo", buf, 0x16u);
      }
      char v31 = 0;
      WTF::CompletionHandler<void ()(WTF::String,BOOL)>::operator()(a11, &v31);
      uint64_t result = v31;
      if (!v31) {
        return result;
      }
    }
    else
    {
      uint64_t v21 = a1[10];
      *(void *)int buf = a1[11];
      if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v21 + 232), buf))
      {
        long long v28 = *a5;
        uint64_t v29 = *((void *)a5 + 2);
        WebCore::NetworkStorageSession::cookieRequestHeaderFieldValue();
        int v22 = *(WTF::StringImpl **)buf;
        *(void *)int buf = 0;
        uint64_t v27 = v22;
        WTF::CompletionHandler<void ()(WTF::String,BOOL)>::operator()(a11, &v27);
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v23);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
        uint64_t result = *(WTF::StringImpl **)buf;
        *(void *)int buf = 0;
        if (!result) {
          return result;
        }
      }
      else
      {
        uint64_t v30 = 0;
        WTF::CompletionHandler<void ()(WTF::String,BOOL)>::operator()(a11, &v30);
        uint64_t result = v30;
        if (!v30) {
          return result;
        }
      }
    }
LABEL_22:
    int v20 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
    }
    goto LABEL_23;
  }
  if (PartyForCookies != 2)
  {
    int v32 = 0;
    WTF::CompletionHandler<void ()(WTF::String,BOOL)>::operator()(a11, &v32);
    uint64_t result = v32;
    if (!v32) {
      return result;
    }
    int v20 = *(_DWORD *)v32 - 2;
    if (*(_DWORD *)v32 == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    }
LABEL_23:
    *(_DWORD *)uint64_t result = v20;
    return result;
  }
  uint64_t v26 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::NetworkConnectionToWebProcess::cookieRequestHeaderFieldValue(const URL &, const Sa"
                         "meSiteInfo &, const URL &, std::optional<FrameIdentifier>, std::optional<PageIdentifier>, Inclu"
                         "deSecureCookies, ApplyTrackingPrevention, ShouldRelaxThirdPartyCookieBlocking, CompletionHandle"
                         "r<void (String, BOOL)> &&)";
    _os_log_fault_impl(&dword_1985F2000, v26, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 867: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  *(unsigned char *)(a1[9] + 98) = 1;
  __int16 v33 = 0;
  WTF::CompletionHandler<void ()(WTF::String,BOOL)>::operator()(a11, &v33);
  uint64_t result = v33;
  if (v33) {
    goto LABEL_22;
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::getRawCookies(void *a1, WTF::URL *a2, unsigned char *a3, const WTF::URL *a4, int a5, int a6, int a7, int a8, char a9, uint64_t *a10)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int PartyForCookies = WebKit::NetworkProcess::allowsFirstPartyForCookies(a1[10], a1[33], a2);
  if (PartyForCookies != 1)
  {
    if (PartyForCookies == 2)
    {
      uint64_t v16 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "void WebKit::NetworkConnectionToWebProcess::getRawCookies(const URL &, const SameSiteInfo &"
                             ", const URL &, std::optional<FrameIdentifier>, std::optional<PageIdentifier>, ApplyTracking"
                             "Prevention, ShouldRelaxThirdPartyCookieBlocking, CompletionHandler<void (Vector<WebCore::Cookie> &&)> &&)";
        _os_log_fault_impl(&dword_1985F2000, v16, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 885: Invalid message dispatched %{public}s", buf, 0xCu);
      }
      *(unsigned char *)(a1[9] + 98) = 1;
    }
    goto LABEL_12;
  }
  if (*a3 && (WebKit::shouldTreatAsSameSite(a2, a4, v15) & 1) == 0)
  {
    uint64_t v18 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = a1[33];
      *(_DWORD *)int buf = 134218240;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v22;
      _os_log_error_impl(&dword_1985F2000, v18, OS_LOG_TYPE_ERROR, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::getRawCookies: Rejecting cookie access due to invalid sameSiteInfo", buf, 0x16u);
    }
    goto LABEL_12;
  }
  uint64_t v17 = a1[10];
  *(void *)int buf = a1[11];
  if (!WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v17 + 232), buf))
  {
LABEL_12:
    *(void *)int buf = 0;
    *(void *)&buf[8] = 0;
    goto LABEL_13;
  }
  *(void *)int buf = 0;
  *(void *)&buf[8] = 0;
  WebCore::NetworkStorageSession::getRawCookies();
LABEL_13:
  uint64_t v19 = *a10;
  *a10 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v19 + 16))(v19, buf);
  (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v20);
}

uint64_t WebKit::NetworkConnectionToWebProcess::setRawCookie(WebKit::NetworkConnectionToWebProcess *this, const WebCore::Cookie *a2)
{
  uint64_t v2 = *((void *)this + 10);
  uint64_t v4 = *((void *)this + 11);
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v2 + 232), &v4);
  if (result)
  {
    return WebCore::NetworkStorageSession::setCookie();
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::deleteCookie(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 232), &v9))
  {
    return MEMORY[0x1F41757F0]();
  }
  else
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    unint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::NetworkConnectionToWebProcess::cookiesForDOMAsync(void *a1, WTF::URL *a2, unsigned __int8 *a3, const WTF::URL *a4, long long *a5, WTF::String *a6, uint64_t a7, int a8, char a9, char a10, uint64_t a11, uint64_t *a12)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int PartyForCookies = WebKit::NetworkProcess::allowsFirstPartyForCookies(a1[10], a1[33], a2);
  if (PartyForCookies != 1)
  {
    if (PartyForCookies == 2)
    {
      uint64_t v21 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "void WebKit::NetworkConnectionToWebProcess::cookiesForDOMAsync(const URL &, const SameSiteI"
                             "nfo &, const URL &, std::optional<WebCore::FrameIdentifier>, std::optional<WebCore::PageIde"
                             "ntifier>, IncludeSecureCookies, ApplyTrackingPrevention, ShouldRelaxThirdPartyCookieBlockin"
                             "g, WebCore::CookieStoreGetOptions &&, CompletionHandler<void (std::optional<Vector<WebCore:"
                             ":Cookie>> &&)> &&)";
        _os_log_fault_impl(&dword_1985F2000, v21, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 921: Invalid message dispatched %{public}s", buf, 0xCu);
      }
      *(unsigned char *)(a1[9] + 98) = 1;
    }
    goto LABEL_14;
  }
  if (*a3 && (WebKit::shouldTreatAsSameSite(a2, a4, v20) & 1) == 0)
  {
    uint64_t v27 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = a1[33];
      *(_DWORD *)int buf = 134218240;
      *(void *)&uint8_t buf[4] = a1;
      __int16 v38 = 2048;
      uint64_t v39 = v31;
      _os_log_error_impl(&dword_1985F2000, v27, OS_LOG_TYPE_ERROR, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::cookiesForDOMAsync: Rejecting cookie access due to invalid sameSiteInfo", buf, 0x16u);
    }
    goto LABEL_14;
  }
  uint64_t v22 = a1[10];
  *(void *)int buf = a1[11];
  uint64_t v23 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v22 + 232), buf);
  if (!v23)
  {
LABEL_14:
    buf[0] = 0;
    BYTE2(v39) = 0;
    goto LABEL_15;
  }
  int v24 = v23;
  long long v34 = *a5;
  uint64_t v35 = *((void *)a5 + 2);
  WebCore::NetworkStorageSession::cookiesForDOMAsVector();
  uint64_t v25 = a1[10];
  uint64_t v36 = a1[11];
  uint64_t v26 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v25 + 224), &v36);
  if (v26 && (*(unsigned int (**)(uint64_t))(*(void *)v26 + 88))(v26))
  {
    long long v32 = *a5;
    uint64_t v33 = *((void *)a5 + 2);
    WebKit::NetworkResourceLoader::logCookieInformation((uint64_t)a1, (uint64_t)"NetworkConnectionToWebProcess::cookiesForDOMAsync", 50, (uint64_t)a1, v24, a2, a3, (const WTF::String **)a4, MEMORY[0x1E4F30980], (uint64_t)&v32, a6, a7, 0, 0);
  }
LABEL_15:
  uint64_t v28 = *a12;
  *a12 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v28 + 16))(v28, buf);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 8))(v28);
  if (BYTE2(v39)) {
    return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v30);
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::setCookieFromDOMAsync(void *a1, WTF::URL *a2, unsigned __int8 *a3, const WTF::URL *a4, long long *a5, WTF::String *a6, uint64_t a7, int a8, uint64_t a9, char a10, uint64_t *a11)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int PartyForCookies = WebKit::NetworkProcess::allowsFirstPartyForCookies(a1[10], a1[33], a2);
  if (PartyForCookies == 1)
  {
    if (*a3 && (WebKit::shouldTreatAsSameSite(a2, a4, v19) & 1) == 0)
    {
      uint64_t v31 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR))
      {
        uint64_t v32 = a1[33];
        *(_DWORD *)int buf = 134218240;
        *(void *)&uint8_t buf[4] = a1;
        __int16 v39 = 2048;
        uint64_t v40 = v32;
        _os_log_error_impl(&dword_1985F2000, v31, OS_LOG_TYPE_ERROR, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::setCookieFromDOMAsync: Rejecting cookie access due to invalid sameSiteInfo", buf, 0x16u);
      }
      goto LABEL_18;
    }
    uint64_t v33 = a6;
    uint64_t v21 = a1[10];
    *(void *)int buf = a1[11];
    uint64_t v22 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v21 + 232), buf);
    if (v22)
    {
      int v23 = v22;
      long long v36 = *a5;
      uint64_t v37 = *((void *)a5 + 2);
      uint64_t v24 = WebCore::NetworkStorageSession::setCookieFromDOM();
      uint64_t v25 = a1[10];
      *(void *)int buf = a1[11];
      uint64_t v26 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v25 + 224), buf);
      if (v26 && (*(unsigned int (**)(uint64_t))(*(void *)v26 + 88))(v26))
      {
        long long v34 = *a5;
        uint64_t v35 = *((void *)a5 + 2);
        WebKit::NetworkResourceLoader::logCookieInformation((uint64_t)a1, (uint64_t)"NetworkConnectionToWebProcess::setCookiesFromDOMAsync", 54, (uint64_t)a1, v23, a2, a3, (const WTF::String **)a4, MEMORY[0x1E4F30980], (uint64_t)&v34, v33, a7, 0, 0);
      }
      uint64_t v27 = *a11;
      *a11 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v24);
      return (*(uint64_t (**)(uint64_t))(*(void *)v27 + 8))(v27);
    }
  }
  else if (PartyForCookies == 2)
  {
    int v20 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::NetworkConnectionToWebProcess::setCookieFromDOMAsync(const URL &, const SameSite"
                           "Info &, const URL &, std::optional<WebCore::FrameIdentifier>, std::optional<WebCore::PageIden"
                           "tifier>, ApplyTrackingPrevention, WebCore::Cookie &&, ShouldRelaxThirdPartyCookieBlocking, Co"
                           "mpletionHandler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 945: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a1[9] + 98) = 1;
LABEL_18:
    uint64_t v27 = *a11;
    *a11 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v27 + 16))(v27, 0);
    return (*(uint64_t (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = *a11;
  *a11 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v28 + 16))(v28, 0);
  uint64_t v29 = *(uint64_t (**)(uint64_t))(*(void *)v28 + 8);

  return v29(v28);
}

WTF::StringImpl *WebKit::NetworkConnectionToWebProcess::domCookiesForHost(void *a1, WTF::URL *this, uint64_t *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  WTF::URL::host(this);
  if ((v6 & 0xFF00000000) != 0) {
    WTF::String::String();
  }
  else {
    WTF::String::String();
  }
  if ((unint64_t)v16 + 1 <= 1)
  {
    unint64_t v7 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
      goto LABEL_5;
    }
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::NetworkConnectionToWebProcess::domCookiesForHost(const URL &, CompletionHandler<vo"
                         "id (const Vector<WebCore::Cookie> &)> &&)";
    uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 97"
          "0: Invalid message dispatched %{public}s";
    goto LABEL_19;
  }
  int PartyForCookies = WebKit::NetworkProcess::allowsFirstPartyForCookies(a1[10], a1[33], this);
  if (PartyForCookies != 1)
  {
    if (PartyForCookies != 2) {
      goto LABEL_6;
    }
    unint64_t v7 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_5:
      *(unsigned char *)(a1[9] + 98) = 1;
LABEL_6:
      *(_OWORD *)int buf = 0uLL;
      goto LABEL_7;
    }
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::NetworkConnectionToWebProcess::domCookiesForHost(const URL &, CompletionHandler<vo"
                         "id (const Vector<WebCore::Cookie> &)> &&)";
    uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 97"
          "2: Invalid message dispatched %{public}s";
LABEL_19:
    _os_log_fault_impl(&dword_1985F2000, v7, OS_LOG_TYPE_FAULT, v13, buf, 0xCu);
    goto LABEL_5;
  }
  uint64_t v14 = a1[10];
  *(void *)int buf = a1[11];
  int v15 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v14 + 232), buf);
  if (!v15) {
    goto LABEL_6;
  }
  WebCore::NetworkStorageSession::domCookiesForHost((uint64_t *)buf, v15, (const WTF::String *)&v16);
LABEL_7:
  uint64_t v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v8 + 16))(v8, buf);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v9);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::subscribeToCookieChangeNotifications(WebKit::NetworkConnectionToWebProcess *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 25, a2, a3, (uint64_t)v6);
  uint64_t v4 = *((void *)this + 10);
  v6[0] = *((void *)this + 11);
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 232), v6);
  if (result) {
    return WebCore::NetworkStorageSession::startListeningForCookieChangeNotifications();
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkConnectionToWebProcess::unsubscribeFromCookieChangeNotifications(WebKit::NetworkConnectionToWebProcess *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  v16[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t *)((char *)this + 200);
  uint64_t v6 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 25, a2, a3);
  uint64_t v7 = *((void *)this + 25);
  if (v7)
  {
    uint64_t v8 = (WTF::StringImpl **)(v7 + 8 * *(unsigned int *)(v7 - 4));
    if (v8 == v6) {
      goto LABEL_5;
    }
  }
  else
  {
    if (!v6) {
      goto LABEL_5;
    }
    uint64_t v8 = 0;
  }
  if (v8 != v6) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(v5, v6);
  }
LABEL_5:
  uint64_t v9 = *((void *)this + 10);
  v15[0] = *((void *)this + 11);
  uint64_t result = (WTF::StringImpl *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 232), v15);
  if (result)
  {
    uint64_t v12 = *a2;
    if (*a2) {
      *(_DWORD *)v12 += 2;
    }
    v16[0] = v12;
    uint64_t v14 = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v14, v16, v11, (uint64_t)v15);
    WebCore::NetworkStorageSession::stopListeningForCookieChangeNotifications();
    if (v14) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, v13);
    }
    uint64_t result = v16[0];
    v16[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

atomic_uchar *volatile **WebKit::NetworkConnectionToWebProcess::cookiesAdded(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, (uint64_t **)(a1 + 72));
  uint64_t v5 = v12;
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 305;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v13 = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, a2);
  IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v6, a3);
  IPC::Connection::sendMessageImpl((uint64_t)v5, (uint64_t *)&v13, 0, 0);
  uint64_t v8 = v13;
  uint64_t v13 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v10, v11);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v12);
}

atomic_uchar *volatile **non-virtual thunk to'WebKit::NetworkConnectionToWebProcess::cookiesAdded(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return WebKit::NetworkConnectionToWebProcess::cookiesAdded(a1 - 16, a2, a3);
}

atomic_uchar *volatile **WebKit::NetworkConnectionToWebProcess::cookiesDeleted(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, (uint64_t **)(a1 + 72));
  uint64_t v5 = v12;
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 306;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v13 = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, a2);
  IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v6, a3);
  IPC::Connection::sendMessageImpl((uint64_t)v5, (uint64_t *)&v13, 0, 0);
  uint64_t v8 = v13;
  uint64_t v13 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v10, v11);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v12);
}

atomic_uchar *volatile **non-virtual thunk to'WebKit::NetworkConnectionToWebProcess::cookiesDeleted(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return WebKit::NetworkConnectionToWebProcess::cookiesDeleted(a1 - 16, a2, a3);
}

atomic_uchar *volatile **WebKit::NetworkConnectionToWebProcess::allCookiesDeleted(uint64_t **this)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v8, this + 9);
  uint64_t v1 = v8;
  uint64_t v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v2 = 301;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 66) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 68) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 69) = 0;
  IPC::Encoder::encodeHeader(v2);
  uint64_t v9 = v2;
  IPC::Connection::sendMessageImpl((uint64_t)v1, (uint64_t *)&v9, 0, 0);
  uint64_t v4 = v9;
  uint64_t v9 = 0;
  if (v4)
  {
    IPC::Encoder::~Encoder(v4, v3);
    WTF::fastFree(v6, v7);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v8);
}

atomic_uchar *volatile **non-virtual thunk to'WebKit::NetworkConnectionToWebProcess::allCookiesDeleted(uint64_t **this)
{
  return WebKit::NetworkConnectionToWebProcess::allCookiesDeleted(this - 2);
}

atomic_uchar *volatile **WebKit::NetworkConnectionToWebProcess::cookieEnabledStateMayHaveChanged(uint64_t **this)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v8, this + 9);
  uint64_t v1 = v8;
  uint64_t v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v2 = 313;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 66) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 68) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 69) = 0;
  IPC::Encoder::encodeHeader(v2);
  uint64_t v9 = v2;
  IPC::Connection::sendMessageImpl((uint64_t)v1, (uint64_t *)&v9, 0, 0);
  uint64_t v4 = v9;
  uint64_t v9 = 0;
  if (v4)
  {
    IPC::Encoder::~Encoder(v4, v3);
    WTF::fastFree(v6, v7);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v8);
}

atomic_uchar *volatile **non-virtual thunk to'WebKit::NetworkConnectionToWebProcess::cookieEnabledStateMayHaveChanged(uint64_t **this)
{
  return WebKit::NetworkConnectionToWebProcess::cookieEnabledStateMayHaveChanged(this - 4);
}

uint64_t WebKit::NetworkConnectionToWebProcess::isFilePathAllowed(uint64_t a1, const WTF::String *a2, WTF::FileSystemImpl *a3)
{
  WTF::FileSystemImpl::lexicallyNormal((uint64_t *)&v32, a3, a2);
  uint64_t v7 = v32;
  uint64_t v32 = 0;
  uint64_t v8 = *(WTF::StringImpl **)a3;
  *(void *)a3 = v7;
  if (v8)
  {
    int v9 = *(_DWORD *)v8 - 2;
    if (*(_DWORD *)v8 != 2) {
      goto LABEL_5;
    }
    WTF::StringImpl::destroy(v8, v6);
    uint64_t v8 = v32;
    uint64_t v32 = 0;
    if (!v8) {
      goto LABEL_6;
    }
    int v9 = *(_DWORD *)v8 - 2;
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
LABEL_5:
    }
      *(_DWORD *)uint64_t v8 = v9;
  }
LABEL_6:
  WTF::FileSystemImpl::parentPath((uint64_t *)&v32, a3, v6);
  if (WTF::equal(v32, *(const WTF::StringImpl **)a3, v10))
  {
LABEL_7:
    uint64_t v13 = 0;
    goto LABEL_28;
  }
  while (1)
  {
    uint64_t v14 = *(void *)(a1 + 360);
    if (v14) {
      break;
    }
LABEL_9:
    if ((WTF::equal(v32, *(const WTF::StringImpl **)(*((void *)a2 + 131) + 64), v12) & 1) != 0
      || (WTF::equal(v32, *(const WTF::StringImpl **)(*((void *)a2 + 131) + 168), v15) & 1) != 0)
    {
      goto LABEL_27;
    }
    WTF::String::operator=((uint64_t *)a3, &v32);
    WTF::FileSystemImpl::parentPath((uint64_t *)&v31, a3, v16);
    int v20 = v31;
    uint64_t v19 = v32;
    uint64_t v31 = 0;
    uint64_t v32 = v20;
    if (v19)
    {
      int v21 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 != 2) {
        goto LABEL_15;
      }
      WTF::StringImpl::destroy(v19, v17);
      uint64_t v19 = v31;
      uint64_t v31 = 0;
      if (v19)
      {
        int v21 = *(_DWORD *)v19 - 2;
        if (*(_DWORD *)v19 == 2)
        {
          WTF::StringImpl::destroy(v19, v22);
          goto LABEL_16;
        }
LABEL_15:
        *(_DWORD *)uint64_t v19 = v21;
      }
    }
LABEL_16:
    if (WTF::equal(v32, *(const WTF::StringImpl **)a3, v18)) {
      goto LABEL_7;
    }
  }
  int v23 = *(_DWORD *)(v14 - 8);
  unsigned int v24 = *(_DWORD *)(*(void *)a3 + 16);
  if (v24 >= 0x100) {
    unsigned int v25 = v24 >> 8;
  }
  else {
    unsigned int v25 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a3);
  }
  for (i = 0; ; unsigned int v25 = i + v27)
  {
    int v27 = v25 & v23;
    uint64_t v28 = *(WTF **)(v14 + 8 * (v25 & v23));
    if (v28 != (WTF *)-1)
    {
      if (!v28) {
        goto LABEL_9;
      }
      if (WTF::equal(v28, *(const WTF::StringImpl **)a3, v12)) {
        break;
      }
    }
    ++i;
  }
LABEL_27:
  uint64_t v13 = 1;
LABEL_28:
  uint64_t v29 = v32;
  uint64_t v32 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v11);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  return v13;
}

void WebKit::NetworkConnectionToWebProcess::registerInternalFileBlobURL(uint64_t a1, uint64_t a2, const WTF::String *a3, const WTF::String *a4, uint64_t *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!*(void *)a2 || !*(_DWORD *)(*(void *)a2 + 4))
  {
    int v20 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::NetworkConnectionToWebProcess::registerInternalFileBlobURL(const URL &, const St"
                           "ring &, const String &, SandboxExtension::Handle &&, const String &)";
      uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp "
            "1049: Invalid message dispatched %{public}s";
      goto LABEL_36;
    }
LABEL_22:
    *(unsigned char *)(*(void *)(a1 + 72) + 98) = 1;
    return;
  }
  uint64_t v10 = *(void *)(a1 + 80);
  *(void *)int buf = *(void *)(a1 + 88);
  uint64_t v11 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v10 + 224), buf);
  if (!v11) {
    return;
  }
  uint64_t v12 = (const WTF::String *)v11;
  if (*(unsigned char *)(a1 + 339) && WTF::linkedOnOrAfterSDKWithBehavior())
  {
    uint64_t v13 = *(WTF::StringImpl **)a3;
    if (*(void *)a3) {
      *(_DWORD *)v13 += 2;
    }
    uint64_t v28 = v13;
    char isFilePathAllowed = WebKit::NetworkConnectionToWebProcess::isFilePathAllowed(a1, v12, (WTF::FileSystemImpl *)&v28);
    uint64_t v16 = v28;
    uint64_t v28 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::destroy(v16, v14);
        if (isFilePathAllowed) {
          goto LABEL_12;
        }
        goto LABEL_33;
      }
      *(_DWORD *)v16 -= 2;
    }
    if (isFilePathAllowed) {
      goto LABEL_12;
    }
LABEL_33:
    int v20 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "void WebKit::NetworkConnectionToWebProcess::registerInternalFileBlobURL(const URL &, const St"
                           "ring &, const String &, SandboxExtension::Handle &&, const String &)";
      uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp "
            "1055: Invalid message dispatched %{public}s";
LABEL_36:
      _os_log_fault_impl(&dword_1985F2000, v20, OS_LOG_TYPE_FAULT, v26, buf, 0xCu);
      goto LABEL_22;
    }
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v17 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v17 += 2;
  }
  *(void *)int buf = v17;
  *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 8);
  long long v30 = *(_OWORD *)(a2 + 24);
  v31[0] = 0;
  char v33 = 0;
  WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::add((uint64_t)v27, (uint64_t *)(a1 + 304), (uint64_t)buf);
  if (v33)
  {
    if (v32 != -1) {
      ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v32])(v27, v31);
    }
    int v32 = -1;
  }
  uint64_t v19 = *(WTF::StringImpl **)buf;
  *(void *)int buf = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v18);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  if (*a5)
  {
    uint64_t v21 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t v21 = 1;
    uint64_t v22 = *a5;
    *a5 = 0;
    *(void *)(v21 + 8) = v22;
    *(void *)(v21 + ++*(_DWORD *)(this + 16) = 0;
  }
  else
  {
    uint64_t v21 = 0;
  }
  int v23 = (WebCore::BlobDataFileReference *)WTF::fastMalloc((WTF *)0x40);
  unsigned int v24 = (void *)WebCore::BlobDataFileReference::BlobDataFileReference(v23, a3, a4);
  *unsigned int v24 = &unk_1EE9CF740;
  v24[7] = v21;
  *(void *)int buf = v24;
  WebCore::BlobRegistryImpl::registerInternalFileBlobURL();
  unsigned int v25 = *(_DWORD **)buf;
  *(void *)int buf = 0;
  if (v25)
  {
    if (v25[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v25 + 8))(v25);
    }
    else {
      --v25[2];
    }
  }
}

uint64_t WebKit::NetworkConnectionToWebProcess::registerInternalBlobURL(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v11 = *(WTF::StringImpl **)(a1 + 88);
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 224), &v11);
  if (result)
  {
    uint64_t v6 = *(WTF::StringImpl **)a2;
    if (*(void *)a2) {
      *(_DWORD *)v6 += 2;
    }
    uint64_t v11 = v6;
    long long v7 = *(_OWORD *)(a2 + 24);
    long long v12 = *(_OWORD *)(a2 + 8);
    long long v13 = v7;
    v14[0] = 0;
    char v16 = 0;
    WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::add((uint64_t)v10, (uint64_t *)(a1 + 304), (uint64_t)&v11);
    if (v16)
    {
      if (v15 != -1) {
        ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v15])(v10, v14);
      }
      int v15 = -1;
    }
    int v9 = v11;
    uint64_t v11 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    return WebCore::BlobRegistryImpl::registerInternalBlobURL();
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::registerBlobURL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 80);
  v13[0] = *(WTF::StringImpl **)(a1 + 88);
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v8 + 224), v13);
  if (result)
  {
    std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>::pair[abi:sn180100]<true,0>((uint64_t)v13, a2, a5);
    WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::add((uint64_t)v12, (uint64_t *)(a1 + 304), (uint64_t)v13);
    if (v16)
    {
      if (v15 != -1) {
        ((void (*)(unsigned char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v15])(v12, &v14);
      }
      int v15 = -1;
    }
    uint64_t v11 = v13[0];
    v13[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    return WebCore::BlobRegistryImpl::registerBlobURL();
  }
  return result;
}

void WebKit::NetworkConnectionToWebProcess::registerInternalBlobURLOptionallyFileBacked(uint64_t a1, uint64_t a2, uint64_t a3, const WTF::String *a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!*(void *)a2
    || !*(_DWORD *)(*(void *)a2 + 4)
    || !*(void *)a3
    || !*(_DWORD *)(*(void *)a3 + 4)
    || !*(void *)a4
    || !*(_DWORD *)(*(void *)a4 + 4))
  {
    uint64_t v17 = off_1EB358938;
    if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
LABEL_26:
      *(unsigned char *)(*(void *)(a1 + 72) + 98) = 1;
      return;
    }
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "void WebKit::NetworkConnectionToWebProcess::registerInternalBlobURLOptionallyFileBacked(URL &&,"
                         " URL &&, const String &, String &&)";
    uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 10"
          "83: Invalid message dispatched %{public}s";
LABEL_54:
    _os_log_fault_impl(&dword_1985F2000, v17, OS_LOG_TYPE_FAULT, v28, buf, 0xCu);
    goto LABEL_26;
  }
  uint64_t v7 = *(void *)(a1 + 80);
  *(void *)int buf = *(void *)(a1 + 88);
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v7 + 224), buf);
  if (!v8) {
    return;
  }
  int v9 = (const WTF::String *)v8;
  if (*(unsigned char *)(a1 + 339) && WTF::linkedOnOrAfterSDKWithBehavior())
  {
    uint64_t v10 = *(WTF::StringImpl **)a4;
    if (*(void *)a4) {
      *(_DWORD *)v10 += 2;
    }
    uint64_t v31 = v10;
    char isFilePathAllowed = WebKit::NetworkConnectionToWebProcess::isFilePathAllowed(a1, v9, (WTF::FileSystemImpl *)&v31);
    long long v13 = v31;
    uint64_t v31 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v11);
        if (isFilePathAllowed) {
          goto LABEL_16;
        }
LABEL_56:
        uint64_t v17 = off_1EB358938;
        if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
          goto LABEL_26;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "void WebKit::NetworkConnectionToWebProcess::registerInternalBlobURLOptionallyFileBacked(URL"
                             " &&, URL &&, const String &, String &&)";
        uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cp"
              "p 1088: Invalid message dispatched %{public}s";
        goto LABEL_54;
      }
      *(_DWORD *)v13 -= 2;
    }
    if (isFilePathAllowed) {
      goto LABEL_16;
    }
    goto LABEL_56;
  }
LABEL_16:
  uint64_t v14 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v14 += 2;
  }
  *(void *)int buf = v14;
  *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 8);
  *(_OWORD *)char v33 = *(_OWORD *)(a2 + 24);
  LOBYTE(v34) = 0;
  char v38 = 0;
  WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::add((uint64_t)v30, (uint64_t *)(a1 + 304), (uint64_t)buf);
  if (v38)
  {
    if (v37 != -1) {
      ((void (*)(void *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v37])(v30, &v34);
    }
    LODWORD(v37) = -1;
  }
  char v16 = *(WTF::StringImpl **)buf;
  *(void *)int buf = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v29 = 0;
  uint64_t v18 = (WebCore::BlobDataFileReference *)WTF::fastMalloc((WTF *)0x40);
  uint64_t v19 = (void *)WebCore::BlobDataFileReference::BlobDataFileReference(v18, a4, (const WTF::String *)&v29);
  void *v19 = &unk_1EE9CF740;
  v19[7] = 0;
  v30[0] = v19;
  memset(buf, 0, sizeof(buf));
  LOWORD(v33[0]) = 0;
  v33[1] = 0;
  uint64_t v34 = 0;
  __int16 v35 = 0;
  long long v36 = 0;
  uint64_t v37 = 0;
  char v38 = 7;
  WebCore::BlobRegistryImpl::registerInternalBlobURLOptionallyFileBacked();
  uint64_t v21 = v37;
  uint64_t v37 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v20);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  uint64_t v22 = v36;
  long long v36 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v20);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  int v23 = v34;
  uint64_t v34 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v20);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  unsigned int v24 = v33[1];
  v33[1] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v20);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v20);
  uint64_t v26 = (_DWORD *)v30[0];
  v30[0] = 0;
  if (v26)
  {
    if (v26[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v26 + 8))(v26);
    }
    else {
      --v26[2];
    }
  }
  int v27 = v29;
  uint64_t v29 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v25);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
}

uint64_t WebKit::NetworkConnectionToWebProcess::registerInternalBlobURLForSlice(WebKit::NetworkConnectionToWebProcess *this, const WTF::URL *a2, const WTF::URL *a3, uint64_t a4, uint64_t a5, const WTF::String *a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *((void *)this + 10);
  int v20 = (WTF::StringImpl *)*((void *)this + 11);
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v12 + 224), &v20);
  if (result)
  {
    uint64_t v14 = result;
    int v15 = *(WTF::StringImpl **)a2;
    if (*(void *)a2) {
      *(_DWORD *)v15 += 2;
    }
    int v20 = v15;
    long long v16 = *(_OWORD *)((char *)a2 + 24);
    long long v21 = *(_OWORD *)((char *)a2 + 8);
    long long v22 = v16;
    v23[0] = 0;
    char v25 = 0;
    WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::add((uint64_t)v19, (uint64_t *)this + 38, (uint64_t)&v20);
    if (v25)
    {
      if (v24 != -1) {
        ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v24])(v19, v23);
      }
      int v24 = -1;
    }
    uint64_t v18 = v20;
    int v20 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v17);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    return WebCore::BlobRegistryImpl::registerInternalBlobURLForSlice((WebCore::BlobRegistryImpl *)(v14 + 632), a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::unregisterBlobURL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 80);
  v25[0] = *(WTF::StringImpl **)(a1 + 88);
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 224), v25);
  if (!result) {
    return result;
  }
  std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>::pair[abi:sn180100]<true,0>((uint64_t)v25, a2, a3);
  uint64_t v9 = *(void *)(a1 + 304);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(a1 + 304);
    int v11 = *(_DWORD *)(v9 - 8);
    unsigned int v12 = WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::hash((uint64_t)v25) & v11;
    long long v13 = (void *)(v9 + 80 * v12);
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v13))
    {
LABEL_8:
      uint64_t v16 = *v10;
      if (!*v10) {
        goto LABEL_21;
      }
      long long v13 = (void *)(v16 + 80 * *(unsigned int *)(v16 - 4));
    }
    else
    {
      int v15 = 1;
      while (*v13 == -1
           || (WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::equal((uint64_t)v13, (uint64_t)v25, v14) & 1) == 0)
      {
        unsigned int v12 = (v12 + v15) & v11;
        long long v13 = (void *)(v9 + 80 * v12);
        ++v15;
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v13)) {
          goto LABEL_8;
        }
      }
      uint64_t v16 = *v10;
      if (!*v10) {
        goto LABEL_12;
      }
    }
    v16 += 80 * *(unsigned int *)(v16 - 4);
    if ((void *)v16 != v13)
    {
LABEL_12:
      if ((void *)v16 != v13)
      {
        WTF::hashTraitsDeleteBucket<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v13, v8);
        ++*(_DWORD *)(*v10 - 16);
        uint64_t v17 = *v10;
        int v18 = *v10 ? *(_DWORD *)(v17 - 12) - 1 : -1;
        *(_DWORD *)(v17 - 1objc_destroyWeak(this + 2) = v18;
        uint64_t v19 = *v10;
        if (*v10)
        {
          unsigned int v20 = 6 * *(_DWORD *)(v19 - 12);
          unsigned int v21 = *(_DWORD *)(v19 - 4);
          if (v20 < v21 && v21 >= 9) {
            WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::rehash(v10, v21 >> 1, 0);
          }
        }
      }
    }
  }
LABEL_21:
  if (v28)
  {
    if (v27 != -1) {
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v27])(&v24, &v26);
    }
    int v27 = -1;
  }
  int v23 = v25[0];
  v25[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v8);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  return WebCore::BlobRegistryImpl::unregisterBlobURL();
}

uint64_t WebKit::NetworkConnectionToWebProcess::registerBlobURLHandle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 80);
  v12[0] = *(WTF::StringImpl **)(a1 + 88);
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 224), v12);
  if (result)
  {
    std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>::pair[abi:sn180100]<true,0>((uint64_t)v12, a2, a3);
    int v11 = 0;
    WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t)v10, (uint64_t *)(a1 + 312), (uint64_t)v12, &v11);
    ++*(_DWORD *)(v10[0] + 80);
    if (v15)
    {
      if (v14 != -1) {
        ((void (*)(void *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v14])(v10, &v13);
      }
      int v14 = -1;
    }
    uint64_t v9 = v12[0];
    v12[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    return WebCore::BlobRegistryImpl::registerBlobURLHandle();
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::unregisterBlobURLHandle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 80);
  v13[0] = *(WTF::StringImpl **)(a1 + 88);
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 224), v13);
  if (result)
  {
    std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>::pair[abi:sn180100]<true,0>((uint64_t)v13, a2, a3);
    uint64_t v8 = (WTF::StringImpl *)WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((void **)(a1 + 312), (uint64_t)v13);
    uint64_t v10 = *(WTF::StringImpl **)(a1 + 312);
    if (v10) {
      uint64_t v10 = (WTF::StringImpl *)((char *)v10 + 88 * *((unsigned int *)v10 - 1));
    }
    if (v10 != v8)
    {
      if (*((_DWORD *)v8 + 20) == 1) {
        WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::remove((uint64_t *)(a1 + 312), v8);
      }
      else {
        --*((_DWORD *)v8 + 20);
      }
    }
    if (v16)
    {
      if (v15 != -1) {
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v15])(&v12, &v14);
      }
      int v15 = -1;
    }
    int v11 = v13[0];
    v13[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    return WebCore::BlobRegistryImpl::unregisterBlobURLHandle();
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkConnectionToWebProcess::blobType(uint64_t a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 88);
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 224), &v11);
  if (v6)
  {
    WebCore::BlobRegistryImpl::blobType((uint64_t *)&v10, (WebCore::BlobRegistryImpl *)(v6 + 632), a2);
  }
  else
  {
    uint64_t v7 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980]) {
      *(_DWORD *)v7 += 2;
    }
    uint64_t v10 = v7;
  }
  WTF::CompletionHandler<void ()(WTF::String)>::operator()(a3, &v10);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::blobSize(uint64_t a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 88);
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 224), &v11);
  if (v6) {
    uint64_t v7 = WebCore::BlobRegistryImpl::blobSize((WebCore::BlobRegistryImpl *)(v6 + 632), a2);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v7);
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);

  return v9(v8);
}

uint64_t WebKit::NetworkConnectionToWebProcess::writeBlobsToTemporaryFilesForIndexedDB(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v39 = *(WTF::StringImpl **)(a1 + 88);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 224), &v39))
  {
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v7 = *((unsigned int *)a2 + 3);
    if (v7)
    {
      uint64_t v8 = *a2;
      uint64_t v9 = *a2 + 8 * v7;
      do
      {
        v38[0] = 0;
        WTF::URL::invalidate((WTF::URL *)v38);
        MEMORY[0x19972E8B0](&v39, v38, v8, 0);
        v47[0] = 0;
        char v49 = 0;
        WebCore::BlobRegistryImpl::filesInBlob();
        uint64_t v11 = v43;
        unint64_t v12 = v43 + (unint64_t)HIDWORD(v45);
        if (v12 > v45)
        {
          unint64_t v13 = v45 + ((unint64_t)v45 >> 2);
          if (v13 >= 0x10) {
            unint64_t v14 = v13 + 1;
          }
          else {
            unint64_t v14 = 16;
          }
          if (v14 <= v12) {
            unint64_t v15 = v43 + (unint64_t)HIDWORD(v45);
          }
          else {
            unint64_t v15 = v14;
          }
          WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)&v44, v15);
          uint64_t v11 = v43;
        }
        if (v11)
        {
          char v16 = v42;
          int v17 = HIDWORD(v45);
          uint64_t v18 = 8 * v11;
          uint64_t v19 = v44;
          do
          {
            uint64_t v20 = *v16;
            *v16++ = 0;
            v19[v17++] = v20;
            v18 -= 8;
          }
          while (v18);
          HIDWORD(v45) = v17;
        }
        WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v10);
        if (v49 && v48 != -1) {
          ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v48])(&v46, v47);
        }
        long long v22 = v39;
        uint64_t v39 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, v21);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
        int v23 = v38[0];
        v38[0] = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2) {
            WTF::StringImpl::destroy(v23, v21);
          }
          else {
            *(_DWORD *)v23 -= 2;
          }
        }
        v8 += 8;
      }
      while (v8 != v9);
      char v24 = (char *)v44;
      int v25 = HIDWORD(v45);
      if (HIDWORD(v45))
      {
        uint64_t v26 = 0;
        uint64_t v27 = 8 * HIDWORD(v45);
        do
        {
          (*(void (**)(void))(**(void **)&v24[v26] + 16))(*(void *)&v24[v26]);
          v26 += 8;
        }
        while (v27 != v26);
      }
    }
    else
    {
      int v25 = 0;
      char v24 = 0;
    }
    uint64_t v39 = (WTF::StringImpl *)a1;
    ++*(_DWORD *)(a1 + 8);
    int v31 = v45;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v32 = *a3;
    *a3 = 0;
    uint64_t v33 = WTF::fastMalloc((WTF *)0x30);
    *(void *)uint64_t v33 = &unk_1EE9C34A0;
    *(void *)(v33 + 8) = a1;
    *(void *)(v33 + ++*(_DWORD *)(this + 16) = a1;
    *(void *)(v33 + 24) = v24;
    uint64_t v40 = 0;
    v41[0] = 0;
    v41[1] = 0;
    *(_DWORD *)(v33 + 3objc_destroyWeak(this + 2) = v31;
    *(_DWORD *)(v33 + 36) = v25;
    *(void *)(v33 + 40) = v32;
    v38[0] = (WTF::StringImpl *)v33;
    WebCore::BlobRegistryImpl::writeBlobsToTemporaryFilesForIndexedDB();
    __int16 v35 = v38[0];
    v38[0] = 0;
    if (v35) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v35 + 8))(v35);
    }
    v41[2] = 0;
    WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v34);
    uint64_t v37 = v40;
    uint64_t v40 = 0;
    if (v37)
    {
      if (v37[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v37 + 8))(v37);
      }
      else {
        --v37[2];
      }
    }
    return WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v36);
  }
  else
  {
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v28 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v28 + 16))(v28, &v39);
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v29);
  }
}

uint64_t WebKit::NetworkConnectionToWebProcess::registerBlobPathForTesting(WebKit::NetworkConnectionToWebProcess *a1, const WTF::String *a2, uint64_t *a3)
{
  if (*((unsigned char *)a1 + 328)) {
    WebKit::NetworkConnectionToWebProcess::allowAccessToFile(a1, a2);
  }
  uint64_t v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

WTF::StringImpl *WebKit::NetworkConnectionToWebProcess::allowAccessToFile(WebKit::NetworkConnectionToWebProcess *this, const WTF::String *a2)
{
  uint64_t v2 = (uint64_t *)((char *)this + 360);
  WTF::FileSystemImpl::lexicallyNormal((uint64_t *)&v7, a2, a2);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v2, &v7, v3, (uint64_t)&v6);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WebKit::NetworkConnectionToWebProcess::setCaptureExtraNetworkLoadMetricsEnabled(void *this, void *a2)
{
  *((unsigned char *)this + 208) = (_BYTE)a2;
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = this;
    uint64_t v3 = this[19];
    if (v3)
    {
      v2[19] = 0;
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
    }
    this = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin((void **)v2 + 13);
    uint64_t v5 = (void *)v2[13];
    if (v5) {
      v5 += 2 * *((unsigned int *)v5 - 1);
    }
    while (this != v5)
    {
      *(unsigned char *)(this[1] + 4344) = 0;
      while (1)
      {
        this += 2;
        if (this == v4) {
          break;
        }
        if ((unint64_t)(*this + 1) > 1) {
          goto LABEL_12;
        }
      }
      this = v4;
LABEL_12:
      ;
    }
  }
  return this;
}

uint64_t WebKit::NetworkConnectionToWebProcess::clearPageSpecificData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 88);
  uint64_t v5 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 224), &v11);
  if (v5)
  {
    Scheduler = WebKit::NetworkSession::networkLoadScheduler(v5);
    uint64_t v11 = a2;
    uint64_t v7 = (uint64_t *)((char *)Scheduler + 8);
    uint64_t v8 = (WTF::StringImpl *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)Scheduler + 1, &v11);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::remove(v7, v8);
  }
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 88);
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 232), &v11);
  if (result)
  {
    return MEMORY[0x1F41701F8]();
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::removeStorageAccessForFrame(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v1 + 232), &v3);
  if (result)
  {
    return MEMORY[0x1F4170148]();
  }
  return result;
}

void *WebKit::NetworkConnectionToWebProcess::logUserInteraction(uint64_t a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v7 = *(void **)(a1 + 88);
  uint64_t result = (void *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v3 + 224), &v7);
  if (result)
  {
    uint64_t v5 = result[9];
    if (v5)
    {
      uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v6 = &unk_1EE9C34C8;
      uint64_t v7 = v6;
      WebKit::WebResourceLoadStatisticsStore::logUserInteraction(v5, a2, (uint64_t *)&v7);
      uint64_t result = v7;
      uint64_t v7 = 0;
      if (result) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::resourceLoadStatisticsUpdated(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 88);
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 224), &v12);
  if (v6
    && ((uint64_t v7 = *(void *)(v6 + 24), (v7 & 0x8000000000000000) == 0) || v7 == -1)
    && (uint64_t v8 = *(atomic_uchar *volatile **)(v6 + 72)) != 0)
  {
    return WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(v8, a2, a3);
  }
  else
  {
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return v11(v10);
  }
}

uint64_t WebKit::NetworkConnectionToWebProcess::hasStorageAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v14 = *(void *)(a1 + 80);
  uint64_t v23 = *(void *)(a1 + 88);
  uint64_t v15 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v14 + 224), &v23);
  if (v15)
  {
    uint64_t v16 = *(void *)(v15 + 72);
    if (v16)
    {
      *(void *)&long long v21 = a4;
      *((void *)&v21 + 1) = a5;
      char v22 = 1;
      return WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(v16, a2, a3, &v21, a6, a7);
    }
    else
    {
      uint64_t v20 = *(void *)(a1 + 80);
      uint64_t v23 = *(void *)(a1 + 88);
      WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v20 + 232), &v23);
      return WebCore::NetworkStorageSession::hasCookies();
    }
  }
  else
  {
    uint64_t v18 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v18 + 16))(v18, 0);
    uint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)v18 + 8);
    return v19(v18);
  }
}

WTF::StringImpl *WebKit::NetworkConnectionToWebProcess::requestStorageAccess(uint64_t a1, WTF **a2, const WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, char a8, uint64_t *a9)
{
  uint64_t v16 = *(void *)(a1 + 80);
  uint64_t v28 = *(void *)(a1 + 88);
  uint64_t v17 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v16 + 224), &v28);
  if (v17 && (uint64_t v18 = *(void *)(v17 + 72)) != 0)
  {
    return (WTF::StringImpl *)WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(v18, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    __int16 v24 = 1;
    char v25 = a8;
    uint64_t v20 = *a3;
    if (*a3) {
      *(_DWORD *)v20 += 2;
    }
    uint64_t v26 = v20;
    long long v21 = *a2;
    if (*a2) {
      *(_DWORD *)v21 += 2;
    }
    uint64_t v27 = v21;
    WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(a9, (uint64_t)&v24);
    uint64_t v23 = v27;
    uint64_t v27 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v22);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    uint64_t result = v26;
    uint64_t v26 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v10 = *a1;
  *a1 = 0;
  __int16 v7 = *(_WORD *)a2;
  char v8 = *(unsigned char *)(a2 + 2);
  long long v2 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + ++*(_DWORD *)(this + 16) = 0;
  *(_OWORD *)uint64_t v9 = v2;
  WTF::Function<void ()(WebCore::RequestStorageAccessResult)>::operator()(&v10, &v7);
  uint64_t v4 = v9[1];
  v9[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = v9[0];
  v9[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::setLoginStatus(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, int a3, uint64_t a4, uint64_t *a5)
{
  if (*(unsigned char *)(a1 + 347)) {
    BOOL v10 = *(unsigned char *)(a4 + 40) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10) {
    goto LABEL_19;
  }
  WebCore::LoginStatus::create();
  int v12 = v25;
  if (v25)
  {
    uint64_t v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  else
  {
    uint64_t v15 = v24[0];
    v24[0] = 0;
    if (*(unsigned char *)(a4 + 40))
    {
      WTF::String::operator=((uint64_t *)a4, (WTF::StringImpl **)v15);
      WTF::String::operator=((uint64_t *)(a4 + 8), (WTF::StringImpl **)(v15 + 8));
      uint64_t v16 = *(void *)(v15 + 32);
      *(_OWORD *)(a4 + ++*(_DWORD *)(this + 16) = *(_OWORD *)(v15 + 16);
      *(void *)(a4 + 3objc_destroyWeak(this + 2) = v16;
    }
    else
    {
      uint64_t v17 = *(WTF::StringImpl **)v15;
      if (*(void *)v15) {
        *(_DWORD *)v17 += 2;
      }
      *(void *)a4 = v17;
      uint64_t v18 = *(_DWORD **)(v15 + 8);
      if (v18) {
        *v18 += 2;
      }
      *(void *)(a4 + 8) = v18;
      long long v19 = *(_OWORD *)(v15 + 16);
      *(void *)(a4 + 3objc_destroyWeak(this + 2) = *(void *)(v15 + 32);
      *(_OWORD *)(a4 + ++*(_DWORD *)(this + 16) = v19;
      *(unsigned char *)(a4 + 40) = 1;
    }
    uint64_t result = std::default_delete<WebCore::LoginStatus>::operator()[abi:sn180100]((bmalloc::api *)v15, v11);
  }
  if (v25 != -1) {
    uint64_t result = ((uint64_t (*)(char *, void *))off_1EE9C31F0[v25])(&v26, v24);
  }
  if (!v12)
  {
LABEL_19:
    uint64_t v20 = *(void *)(a1 + 80);
    v24[0] = *(void *)(a1 + 88);
    uint64_t v21 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v20 + 224), v24);
    if (v21 && (uint64_t v22 = *(void *)(v21 + 72)) != 0)
    {
      return WebKit::WebResourceLoadStatisticsStore::setLoginStatus(v22, a2, a3, (WebCore::LoginStatus *)a4, a5);
    }
    else
    {
      uint64_t v23 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
      return (*(uint64_t (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::isLoggedIn(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 88);
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 224), &v11);
  if (v6 && (uint64_t v7 = *(void *)(v6 + 72)) != 0)
  {
    return WebKit::WebResourceLoadStatisticsStore::isLoggedIn(v7, a2, a3);
  }
  else
  {
    uint64_t v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v9 + 16))(v9, 0);
    BOOL v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 8);
    return v10(v9);
  }
}

uint64_t WebKit::NetworkConnectionToWebProcess::storageAccessQuirkForTopFrameDomain(int a1, WebCore::NetworkStorageSession *this, uint64_t *a3)
{
  WebCore::NetworkStorageSession::storageAccessQuirkForTopFrameDomain(v6, this, this);
  WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a3, v6);
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v4);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  v8[0] = 0;
  v9[0] = v3;
  v8[1] = 0;
  uint64_t v4 = a2[1];
  a2[1] = 0;
  v9[1] = v4;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 16))(v2, v9);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v5);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v6);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

uint64_t WebKit::NetworkConnectionToWebProcess::requestStorageAccessUnderOpener(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v7 + 224), &v9);
  if (result)
  {
    uint64_t result = *(void *)(result + 72);
    if (result)
    {
      return WebKit::WebResourceLoadStatisticsStore::requestStorageAccessUnderOpener(result, a2, a3, a4);
    }
  }
  return result;
}

WebCore::SecurityPolicy *WebKit::NetworkConnectionToWebProcess::addOriginAccessAllowListEntry(WebKit::NetworkConnectionToWebProcess *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4, const WTF::String *a5)
{
  WebCore::SecurityOrigin::createFromString((uint64_t *)&v10, a2, a2);
  WebCore::SecurityPolicy::addOriginAccessAllowlistEntry(v10, a3, a4, a5);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result) {
    return (WebCore::SecurityPolicy *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)result, v8);
  }
  return result;
}

WebCore::SecurityPolicy *WebKit::NetworkConnectionToWebProcess::removeOriginAccessAllowListEntry(WebKit::NetworkConnectionToWebProcess *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4, const WTF::String *a5)
{
  WebCore::SecurityOrigin::createFromString((uint64_t *)&v10, a2, a2);
  WebCore::SecurityPolicy::removeOriginAccessAllowlistEntry(v10, a3, a4, a5);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result) {
    return (WebCore::SecurityPolicy *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)result, v8);
  }
  return result;
}

void *WebKit::NetworkConnectionToWebProcess::startTrackingResourceLoad@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7 = result;
  uint64_t v19 = a3;
  uint64_t v20 = a2;
  uint64_t v9 = result[11];
  if (v9 < 0 && v9 != -1) {
    goto LABEL_4;
  }
  if (a4)
  {
    WebKit::NetworkConnectionToWebProcess::stopAllNetworkActivityTrackingForPage((uint64_t)result, a2);
    unint64_t v12 = *((unsigned int *)v7 + 37);
    if (v12 == *((_DWORD *)v7 + 36))
    {
      WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> &>((uint64_t)(v7 + 17), &v20);
      unsigned int v17 = *((_DWORD *)v7 + 37);
    }
    else
    {
      uint64_t v18 = v7[17] + 48 * v12;
      *(void *)uint64_t v18 = a2;
      *(void *)(v18 + 8) = 0;
      *(unsigned char *)(v18 + ++*(_DWORD *)(this + 16) = 1;
      *(void *)(v18 + 24) = 0x100000010;
      *(unsigned char *)(v18 + 3objc_destroyWeak(this + 2) = 0;
      *(void *)(v18 + 40) = nw_activity_create();
      unsigned int v17 = *((_DWORD *)v7 + 37) + 1;
      *((_DWORD *)v7 + 37) = v17;
    }
    if (v17 <= v12)
    {
      __break(0xC471u);
LABEL_29:
      JUMPOUT(0x198B449A0);
    }
    nw_activity_activate();
    LODWORD(v10) = *((_DWORD *)v7 + 37);
  }
  else
  {
    uint64_t v10 = *((unsigned int *)result + 37);
    if (!v10)
    {
LABEL_4:
      char v11 = 0;
      *(unsigned char *)a5 = 0;
      goto LABEL_5;
    }
    unint64_t v12 = 0;
    uint64_t v13 = (unsigned char *)(result[17] + 16);
    while (!*v13 || *((void *)v13 - 2) != a2)
    {
      ++v12;
      v13 += 48;
      if (v10 == v12) {
        goto LABEL_4;
      }
    }
  }
  if (v10 == *((_DWORD *)v7 + 36))
  {
    WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> &,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> &>((uint64_t)(v7 + 17), &v20, &v19);
    unsigned int v15 = *((_DWORD *)v7 + 37);
  }
  else
  {
    uint64_t v14 = v7[17] + 48 * v10;
    *(void *)uint64_t v14 = a2;
    *(void *)(v14 + 8) = a3;
    *(unsigned char *)(v14 + ++*(_DWORD *)(this + 16) = 0;
    *(void *)(v14 + 24) = 0x200000010;
    *(unsigned char *)(v14 + 3objc_destroyWeak(this + 2) = 0;
    *(void *)(v14 + 40) = nw_activity_create();
    unsigned int v15 = *((_DWORD *)v7 + 37) + 1;
    *((_DWORD *)v7 + 37) = v15;
  }
  if (v15 <= v10)
  {
    __break(0xC471u);
    goto LABEL_29;
  }
  if (v12 >= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198B449A8);
  }
  uint64_t v16 = v7[17] + 48 * v10;
  nw_activity_set_parent_activity();
  nw_activity_activate();
  *(void *)a5 = *(void *)(v16 + 24);
  *(unsigned char *)(a5 + 8) = *(unsigned char *)(v16 + 32);
  uint64_t result = *(void **)(v16 + 40);
  *(void *)(a5 + ++*(_DWORD *)(this + 16) = result;
  if (result) {
    uint64_t result = CFRetain(result);
  }
  char v11 = 1;
LABEL_5:
  *(unsigned char *)(a5 + 24) = v11;
  return result;
}

void WebKit::NetworkConnectionToWebProcess::stopTrackingResourceLoad(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 148);
  if (v2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 136);
    for (uint64_t i = 24; *(void *)(v5 + i - 16) != a2; i += 48)
    {
      if (v2 == ++v4) {
        return;
      }
    }
    if (v4 >= v2)
    {
      __break(0xC471u);
    }
    else
    {
      WebKit::NetworkActivityTracker::complete(v5 + i);
      uint64_t v7 = *(void *)(a1 + 136) + i;
      char v8 = *(const void **)(v7 + 16);
      *(void *)(v7 + ++*(_DWORD *)(this + 16) = 0;
      if (v8) {
        CFRelease(v8);
      }
      WTF::VectorMover<false,WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker>::moveOverlapping((long long *)(v7 + 24), (long long *)(*(void *)(a1 + 136) + 48 * *(unsigned int *)(a1 + 148)), v7 - 24);
      --*(_DWORD *)(a1 + 148);
    }
  }
}

uint64_t WebKit::NetworkConnectionToWebProcess::establishSharedWorkerContextConnection(uint64_t a1, uint64_t a2, const WebCore::RegistrableDomain *a3, uint64_t *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 264);
    *(_DWORD *)unsigned int v15 = 134218240;
    *(void *)&v15[4] = a1;
    __int16 v16 = 2048;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::establishSharedWorkerContextConnection:", v15, 0x16u);
  }
  uint64_t v9 = *(void *)(a1 + 80);
  *(void *)unsigned int v15 = *(void *)(a1 + 88);
  uint64_t v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 224), v15);
  if (v10)
  {
    char v11 = *(WebKit::WebSharedWorkerServer **)(v10 + 800);
    if (v11)
    {
      unint64_t v12 = (WebKit::WebSharedWorkerServerToContextConnection *)WTF::fastMalloc((WTF *)0x78);
      WebKit::WebSharedWorkerServerToContextConnection::WebSharedWorkerServerToContextConnection(v12, (WebKit::NetworkConnectionToWebProcess *)a1, a3, v11);
      std::unique_ptr<WebKit::WebSharedWorkerServerToContextConnection>::reset[abi:sn180100]((WebKit::WebSharedWorkerServerToContextConnection **)(a1 + 240), v12);
    }
  }
  uint64_t v13 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
  return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
}

WebKit::WebSharedWorkerServerToContextConnection *WebKit::NetworkConnectionToWebProcess::closeSharedWorkerContextConnection(WebKit::NetworkConnectionToWebProcess *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 33);
    int v5 = 134218240;
    uint64_t v6 = this;
    __int16 v7 = 2048;
    uint64_t v8 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::closeSharedWorkerContextConnection:", (uint8_t *)&v5, 0x16u);
  }
  return std::unique_ptr<WebKit::WebSharedWorkerServerToContextConnection>::reset[abi:sn180100]((WebKit::WebSharedWorkerServerToContextConnection **)this + 30, 0);
}

WebKit::WebSharedWorkerServerToContextConnection *WebKit::NetworkConnectionToWebProcess::sharedWorkerServerToContextConnectionIsNoLongerNeeded(WebKit::NetworkConnectionToWebProcess *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 33);
    *(_DWORD *)int buf = 134218240;
    *(void *)uint64_t v8 = this;
    *(_WORD *)&v8[8] = 2048;
    *(void *)&v8[10] = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::sharedWorkerServerToContextConnectionIsNoLongerNeeded:", buf, 0x16u);
  }
  uint64_t v4 = *(void *)(*((void *)this + 10) + 40);
  uint64_t v6 = *((void *)this + 33);
  buf[0] = 2;
  *(void *)&void v8[4] = &v6;
  IPC::Connection::send<Messages::NetworkProcessProxy::RemoteWorkerContextConnectionNoLongerNeeded>(v4, (uint64_t)buf);
  return std::unique_ptr<WebKit::WebSharedWorkerServerToContextConnection>::reset[abi:sn180100]((WebKit::WebSharedWorkerServerToContextConnection **)this + 30, 0);
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkProcessProxy::RemoteWorkerContextConnectionNoLongerNeeded>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 343;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::ArgumentCoder<JSC::MessageSource,void>::encode<IPC::Encoder>(v4, *(unsigned char *)a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, *(uint64_t **)(a2 + 8));
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::establishSWContextConnection(void *a1, uint64_t a2, WTF::ASCIICaseInsensitiveHash **a3, _OWORD *a4, uint64_t *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a1[10];
  *(void *)&v18[0] = a1[11];
  uint64_t v11 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v10 + 224), v18);
  if (v11 && *(void *)(v11 + 776))
  {
    if (WebKit::NetworkProcess::allowsFirstPartyForCookies(*(void *)(v11 + 32), a1[33], a3) == 2)
    {
      uint64_t v17 = off_1EB358938;
      if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
      {
        LODWORD(v18[0]) = 136446210;
        *(void *)((char *)v18 + 4) = "void WebKit::NetworkConnectionToWebProcess::establishSWContextConnection(WebPageP"
                                       "roxyIdentifier, RegistrableDomain &&, std::optional<ScriptExecutionContextIdentif"
                                       "ier>, CompletionHandler<void ()> &&)";
        _os_log_fault_impl(&dword_1985F2000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 1500: Invalid message dispatched %{public}s", (uint8_t *)v18, 0xCu);
      }
      *(unsigned char *)(a1[9] + 98) = 1;
    }
    else
    {
      uint64_t v12 = WTF::fastMalloc((WTF *)0xC0);
      long long v13 = a4[1];
      v18[0] = *a4;
      v18[1] = v13;
      uint64_t v18[2] = a4[2];
      WebKit::WebSWServerToContextConnection::WebSWServerToContextConnection(v12, (uint64_t)a1, a2);
      uint64_t v14 = a1[28];
      a1[28] = v12;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
  }
  uint64_t v15 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
  return (*(uint64_t (**)(uint64_t))(*(void *)v15 + 8))(v15);
}

uint64_t WebKit::NetworkConnectionToWebProcess::serviceWorkerServerToContextConnectionNoLongerNeeded(WebKit::NetworkConnectionToWebProcess *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 33);
    *(_DWORD *)int buf = 134218240;
    *(void *)uint64_t v8 = this;
    *(_WORD *)&v8[8] = 2048;
    *(void *)&v8[10] = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::serviceWorkerServerToContextConnectionNoLongerNeeded: WebProcess no longer useful for running service workers", buf, 0x16u);
  }
  uint64_t v4 = *(void *)(*((void *)this + 10) + 40);
  uint64_t v6 = *((void *)this + 33);
  buf[0] = 1;
  *(void *)&void v8[4] = &v6;
  IPC::Connection::send<Messages::NetworkProcessProxy::RemoteWorkerContextConnectionNoLongerNeeded>(v4, (uint64_t)buf);
  uint64_t result = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::createNewMessagePortChannel(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = (uint64_t *)(a1 + 272);
  WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::add((uint64_t *)(a1 + 272), a2, (uint64_t)v6);
  WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::add(v4, a3, (uint64_t)v6);
  return WebCore::MessagePortChannelRegistry::didCreateMessagePortChannel();
}

WebCore::MessagePortChannel *WebKit::NetworkConnectionToWebProcess::entangleLocalPortInThisProcessToRemote(uint64_t a1, uint64_t *a2)
{
  WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::add((uint64_t *)(a1 + 272), a2, (uint64_t)v7);
  WebCore::MessagePortChannelRegistry::didEntangleLocalToRemote();
  uint64_t result = (WebCore::MessagePortChannel *)WebCore::MessagePortChannelRegistry::existingChannelContainingPort();
  if (result)
  {
    int v5 = result;
    ++*(_DWORD *)result;
    if (WebCore::MessagePortChannel::hasAnyMessagesPendingOrInFlight(result))
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v7, (uint64_t **)(a1 + 72));
      uint64_t v6 = a2;
      IPC::Connection::send<Messages::NetworkProcessConnection::MessagesAvailableForPort>((uint64_t)v7[0], &v6, 0, 0, 0);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v7);
    }
    return (WebCore::MessagePortChannel *)WTF::RefCounted<WebCore::MessagePortChannel>::deref(v5);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::NetworkProcessConnection::MessagesAvailableForPort>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 311;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v18 = v10;
  uint64_t v11 = *a2;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, *a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v10, v11 + 1);
  uint64_t v13 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v18, a4, a5);
  uint64_t v14 = v18;
  uint64_t v18 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v12);
    WTF::fastFree(v16, v17);
  }
  return v13;
}

uint64_t WebKit::NetworkConnectionToWebProcess::messagePortDisentangled(uint64_t a1, void *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 272);
  int v5 = (void *)WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>((uint64_t *)(a1 + 272), a2);
  uint64_t v6 = *(void *)(a1 + 272);
  if (v6)
  {
    __int16 v7 = (void *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    if (v7 == v5) {
      goto LABEL_5;
    }
  }
  else
  {
    if (!v5) {
      goto LABEL_5;
    }
    __int16 v7 = 0;
  }
  if (v7 != v5) {
    WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::remove(v4, v5);
  }
LABEL_5:
  uint64_t v8 = *(void *)(a1 + 80) + 352;

  return MEMORY[0x1F41716B8](v8, a2);
}

uint64_t WebKit::NetworkConnectionToWebProcess::takeAllMessagesForPort(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  ++*(_DWORD *)(a1 + 8);
  uint64_t v4 = *a3;
  *a3 = 0;
  int v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  *int v5 = &unk_1EE9C34F0;
  v5[1] = a1;
  void v5[2] = a1;
  v5[3] = v4;
  __int16 v7 = v5;
  WebCore::MessagePortChannelRegistry::takeAllMessagesForPort();
  uint64_t result = (uint64_t)v7;
  if (v7) {
    return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
  }
  return result;
}

uint64_t *WebKit::NetworkConnectionToWebProcess::didDeliverMessagePortMessages(WebKit::NetworkConnectionToWebProcess *this, uint64_t a2)
{
  uint64_t v7 = a2;
  unint64_t v2 = (uint64_t *)((char *)this + 280);
  uint64_t v3 = (void *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned long long>>,unsigned long long>((uint64_t *)this + 35, &v7);
  uint64_t result = WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::take(v2, v3, &v6);
  int v5 = v6;
  if (v6)
  {
    uint64_t v6 = 0;
    (*(void (**)(uint64_t *))(*v5 + 16))(v5);
    (*(void (**)(uint64_t *))(*v5 + 8))(v5);
    uint64_t result = v6;
    uint64_t v6 = 0;
    if (result) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    }
  }
  return result;
}

_DWORD *WebKit::NetworkConnectionToWebProcess::postMessageToRemote(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = (_DWORD *)WebCore::MessagePortChannelRegistry::didPostMessageToRemote();
  if (result)
  {
    uint64_t v6 = (_DWORD *)WebCore::MessagePortChannelRegistry::existingChannelContainingPort();
    uint64_t v7 = v6;
    if (v6) {
      ++*v6;
    }
    uint64_t result = (_DWORD *)WebCore::MessagePortChannel::processForPort();
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 80);
      uint64_t v12 = (uint64_t *)result;
      uint64_t result = (_DWORD *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(v9 + 136), &v12);
      if (result)
      {
        uint64_t v10 = result;
        ++result[2];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, (uint64_t **)result + 9);
        uint64_t v11 = a3;
        IPC::Connection::send<Messages::NetworkProcessConnection::MessagesAvailableForPort>((uint64_t)v12, &v11, 0, 0, 0);
        uint64_t result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v12);
        if (v10[2] == 1)
        {
          uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v10 + 8))(v10);
          if (!v7) {
            return result;
          }
          return WTF::RefCounted<WebCore::MessagePortChannel>::deref(v7);
        }
        --v10[2];
      }
    }
    if (!v7) {
      return result;
    }
    return WTF::RefCounted<WebCore::MessagePortChannel>::deref(v7);
  }
  return result;
}

atomic_uchar *volatile **WebKit::NetworkConnectionToWebProcess::broadcastConsoleMessage(uint64_t a1, char a2, char a3, uint64_t a4)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v10, (uint64_t **)(a1 + 72));
  v8[0] = a2;
  v8[1] = a3;
  uint64_t v9 = a4;
  IPC::Connection::send<Messages::NetworkProcessConnection::BroadcastConsoleMessage>((uint64_t)v10, (uint64_t)v8, 0, 0, 0);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v10);
}

uint64_t IPC::Connection::send<Messages::NetworkProcessConnection::BroadcastConsoleMessage>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 302;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<std::tuple<JSC::MessageSource,JSC::MessageLevel,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<JSC::MessageSource,JSC::MessageLevel,WTF::String const&>,0ul,1ul,2ul>(v10, a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

WebKit::NetworkSession *WebKit::NetworkConnectionToWebProcess::setResourceLoadSchedulingMode(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 88);
  uint64_t result = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 224), &v8);
  if (result)
  {
    Scheduler = WebKit::NetworkSession::networkLoadScheduler(result);
    return (WebKit::NetworkSession *)WebKit::NetworkLoadScheduler::setResourceLoadSchedulingMode((uint64_t)Scheduler, a2, a3);
  }
  return result;
}

WTF *WebKit::NetworkConnectionToWebProcess::prioritizeResourceLoads(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v18 = *(WTF **)(a1 + 88);
  uint64_t result = (WTF *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 224), &v18);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v7 = *(unsigned int *)(a2 + 12);
    if (v7)
    {
      uint64_t v8 = *(uint64_t **)a2;
      uint64_t v9 = (uint64_t *)(a1 + 104);
      uint64_t v10 = 8 * v7;
      do
      {
        uint64_t v20 = *v8;
        uint64_t v11 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9, &v20);
        if (v11)
        {
          uint64_t v13 = (_DWORD *)(v11 + 8);
          ++*(_DWORD *)(v11 + 8);
          uint64_t v14 = *(void *)(v11 + 3880);
          if (v14)
          {
            uint64_t v20 = *(void *)(v11 + 3880);
            int v15 = HIDWORD(v19);
            if (HIDWORD(v19) == v19)
            {
              WTF::Vector<WebKit::NetworkLoad *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::NetworkLoad *>((uint64_t)&v18, (unint64_t)&v20);
            }
            else
            {
              *((void *)v18 + HIDWORD(v19)) = v14;
              HIDWORD(v19) = v15 + 1;
            }
          }
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v13, v12);
        }
        ++v8;
        v10 -= 8;
      }
      while (v10);
    }
    Scheduler = (uint64_t *)WebKit::NetworkSession::networkLoadScheduler(v6);
    WebKit::NetworkLoadScheduler::prioritizeLoads(Scheduler, (uint64_t)&v18);
    uint64_t result = v18;
    if (v18)
    {
      uint64_t v18 = 0;
      LODWORD(v19) = 0;
      return (WTF *)WTF::fastFree(result, v17);
    }
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::takeNetworkResourceLoader@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if ((unint64_t)(a2 - 1) < 0xFFFFFFFFFFFFFFFELL) {
    return WebKit::NetworkResourceLoadMap::take(result + 104, a2, a3);
  }
  *a3 = 0;
  return result;
}

uint64_t *WebKit::NetworkConnectionToWebProcess::installMockContentFilter(WebCore::MockContentFilterSettings *a1, uint64_t a2)
{
  uint64_t v3 = WebCore::MockContentFilterSettings::singleton(a1);
  *(_DWORD *)uint64_t v3 = *(_DWORD *)a2;
  WTF::String::operator=((uint64_t *)(v3 + 8), (WTF::StringImpl **)(a2 + 8));

  return WTF::String::operator=((uint64_t *)(v3 + 16), (WTF::StringImpl **)(a2 + 16));
}

void WebKit::NetworkConnectionToWebProcess::logOnBehalfOfWebContent(uint64_t a1, char *subsystem, uint64_t a3, char *category, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, int a9)
{
  *(void *)&uint64_t v18[5] = *MEMORY[0x1E4F143B8];
  if (a6)
  {
    if (a7)
    {
      os_log_type_t v10 = a8;
      if (a8 <= 0x11 && ((0x30007u >> a8) & 1) != 0 && !*(unsigned char *)(a7 + a6 - 1))
      {
        os_log_t v12 = 0;
        uint64_t v13 = MEMORY[0x1E4F14500];
        char v14 = 1;
        if (!subsystem || !a3) {
          goto LABEL_10;
        }
        if (!subsystem[a3 - 1])
        {
          os_log_t v12 = 0;
          if (!category || !a5) {
            goto LABEL_10;
          }
          if (!category[a5 - 1])
          {
            os_log_t v16 = os_log_create(subsystem, category);
            os_log_t v12 = v16;
            if (v16)
            {
              char v14 = 0;
              uint64_t v13 = v16;
            }
            goto LABEL_10;
          }
        }
        os_log_t v12 = 0;
LABEL_10:
        if ((WTFSignpostHandleIndirectLog() & 1) == 0 && os_log_type_enabled(v13, v10))
        {
          int v17 = 67109378;
          v18[0] = a9;
          LOWORD(v18[1]) = 2082;
          *(void *)((char *)&v18[1] + objc_destroyWeak(this + 2) = a6;
          _os_log_impl(&dword_1985F2000, v13, v10, "WebContent[%d]: %{public}s", (uint8_t *)&v17, 0x12u);
        }
        if ((v14 & 1) == 0) {
          os_release(v12);
        }
        return;
      }
    }
  }
  int v15 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    int v17 = 136446210;
    *(void *)uint64_t v18 = "void WebKit::NetworkConnectionToWebProcess::logOnBehalfOfWebContent(std::span<const char>, std::spa"
                     "n<const char>, std::span<const char>, uint8_t, int32_t)";
    _os_log_fault_impl(&dword_1985F2000, v15, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 1650: Invalid message dispatched %{public}s", (uint8_t *)&v17, 0xCu);
  }
  *(unsigned char *)(*(void *)(a1 + 72) + 98) = 1;
}

void WebKit::NetworkConnectionToWebProcess::useRedirectionForCurrentNavigation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2;
  uint64_t v4 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 104), &v5);
  if (v4)
  {
    WebKit::NetworkResourceLoader::useRedirectionForCurrentNavigation(v4, a3);
  }
}

WTF::StringImpl *WebKit::NetworkConnectionToWebProcess::navigatorSubscribeToPushService(uint64_t a1, const WTF::URL *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 80);
  v21[0] = *(WTF::StringImpl **)(a1 + 88);
  uint64_t v9 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v8 + 224), v21);
  if (v9)
  {
    uint64_t v10 = v9;
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)v21, a2);
    uint64_t v11 = v10 + 1080;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 56), a1 + 48);
    os_log_t v12 = *(atomic_uint **)(a1 + 56);
    if (v12) {
      atomic_fetch_add(v12, 1u);
    }
    uint64_t v13 = *a4;
    *a4 = 0;
    char v14 = v21[0];
    v21[0] = 0;
    int v15 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v15 = &unk_1EE9C3518;
    v15[1] = v12;
    void v15[2] = v13;
    void v15[3] = v14;
    uint64_t v20 = v15;
    WebKit::NetworkNotificationManager::subscribeToPushService(v11, (uint64_t)a2, a3, (uint64_t *)&v20);
    uint64_t v17 = (uint64_t)v20;
    uint64_t v20 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    uint64_t result = v21[0];
    v21[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v21[0]) = 8;
    int v22 = 1;
    uint64_t v19 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v19 + 16))(v19, v21);
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 8))(v19);
    if (v22 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(void **, WTF::StringImpl **))off_1EE9C3200[v22])(&v20, v21);
    }
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::navigatorUnsubscribeFromPushService(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = *(void *)(a1 + 80);
  v13[0] = *(void *)(a1 + 88);
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v7 + 224), v13);
  if (v8)
  {
    uint64_t v9 = v8 + 1080;
    uint64_t v10 = *a3;
    return WebKit::NetworkNotificationManager::unsubscribeFromPushService(v9, a2, v10, 1, a4);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v13[0]) = 8;
    int v14 = 1;
    uint64_t v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v12 + 16))(v12, v13);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
    if (v14 != -1) {
      return ((uint64_t (*)(char *, void *))off_1EE9C3210[v14])(&v15, v13);
    }
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::navigatorGetPushSubscription(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 88);
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 224), &v11);
  if (v6)
  {
    uint64_t v7 = v6 + 1080;
    return WebKit::NetworkNotificationManager::getPushSubscription(v7, a2, a3);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12[0] = 8;
    int v13 = 1;
    uint64_t v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 16))(v9, &v11);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
    if (v13 != -1) {
      return ((uint64_t (*)(char *, char *))off_1EE9C3220[v13])(&v10, v12);
    }
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::navigatorGetPushPermissionState(uint64_t a1, WebCore::SecurityOriginData *a2, uint64_t *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 80);
  v16[0] = *(void *)(a1 + 88);
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 224), v16);
  if (!v6)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v16[0]) = 8;
    unsigned int v17 = 1;
    uint64_t v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 16))(v14, v16);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
    uint64_t v12 = v17;
    if (v17 == -1) {
      return result;
    }
    int v13 = off_1EE9C3230;
    return ((uint64_t (*)(void **, uint64_t *))v13[v12])(&v15, v16);
  }
  uint64_t v8 = v6;
  WebCore::SecurityOriginData::fromURL(v16, a2, v7);
  uint64_t v9 = *a3;
  *a3 = 0;
  char v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v10 = &unk_1EE9C3578;
  v10[1] = v9;
  char v15 = v10;
  WebKit::getPushPermissionStateImpl(*(void *)(v8 + 1096), (uint64_t)v16, (uint64_t *)&v15);
  uint64_t result = (uint64_t)v15;
  char v15 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  uint64_t v12 = v18;
  if (v18 != -1)
  {
    int v13 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0;
    return ((uint64_t (*)(void **, uint64_t *))v13[v12])(&v15, v16);
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::initializeWebTransportSession(uint64_t a1, WTF::URL *a2, uint64_t *a3)
{
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 56), a1 + 48);
  uint64_t v6 = *(atomic_uint **)(a1 + 56);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v8 = &unk_1EE9C35A0;
  v8[1] = a1;
  void v8[2] = v6;
  void v8[3] = v7;
  char v10 = v8;
  WebKit::NetworkTransportSession::initialize(a1, a2, (uint64_t *)&v10);
  uint64_t result = (uint64_t)v10;
  char v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t *WebKit::NetworkConnectionToWebProcess::destroyWebTransportSession(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 368);
  uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 368), &v7);
  uint64_t v5 = *(void *)(a1 + 368);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if (v6 != result) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, result);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkConnectionToWebProcess::clearFrameLoadRecordsForStorageAccess(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t result = (WTF::StringImpl *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 224), &v7);
  if (result)
  {
    uint64_t result = (WTF::StringImpl *)*((void *)result + 9);
    if (result)
    {
      return WebKit::WebResourceLoadStatisticsStore::clearFrameLoadRecordsForStorageAccess(result, a2, a3);
    }
  }
  return result;
}

void WebKit::NetworkContentRuleListManager::~NetworkContentRuleListManager(WebKit::NetworkContentRuleListManager *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 - 12))
    {
      unsigned int v17 = 0;
      uint64_t v4 = *(unsigned int *)(v3 - 4);
      uint64_t v5 = v3;
      if (v4)
      {
        uint64_t v6 = 24 * v4;
        uint64_t v5 = v3;
        while ((unint64_t)(*(void *)v5 + 1) <= 1)
        {
          v5 += 24;
          v6 -= 24;
          if (!v6) {
            goto LABEL_17;
          }
        }
      }
      uint64_t v7 = v3 + 24 * v4;
      if (v7 != v5)
      {
LABEL_9:
        uint64_t v8 = *(unsigned int *)(v5 + 20);
        if (v8)
        {
          uint64_t v9 = *(uint64_t **)(v5 + 8);
          uint64_t v10 = 8 * v8;
          do
          {
            uint64_t v11 = *v9;
            *v9++ = 0;
            (*(void (**)(uint64_t, WTF::StringImpl ***))(*(void *)v11 + 16))(v11, &v17);
            (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
            v10 -= 8;
          }
          while (v10);
        }
        while (1)
        {
          v5 += 24;
          if (v5 == v7) {
            break;
          }
          if ((unint64_t)(*(void *)v5 + 1) > 1)
          {
            if (v5 != v7) {
              goto LABEL_9;
            }
            break;
          }
        }
        if (v17) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v17, a2);
        }
      }
    }
LABEL_17:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v3, a2);
  }
  uint64_t v12 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, a2);
  }
  uint64_t v13 = *((void *)this + 1);
  if (v13) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v13, a2);
  }
  uint64_t v14 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v15 = *(unsigned int *)(v14 - 4);
    if (v15)
    {
      os_log_t v16 = (WTF::StringImpl ****)(v14 + 8);
      do
      {
        if (*(v16 - 1) != (WTF::StringImpl ***)-1) {
          std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>::reset[abi:sn180100](v16, 0);
        }
        v16 += 2;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree((WTF *)(v14 - 16), a2);
  }
}

IPC::Encoder *WebKit::NetworkContentRuleListManager::contentExtensionsBackend(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v44 = a2;
  uint64_t v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, &v44);
  uint64_t v7 = *a1;
  if (*a1) {
    v7 += 16 * *(unsigned int *)(v7 - 4);
  }
  if (v7 != v5)
  {
    uint64_t v8 = *(void *)(v5 + 8);
    uint64_t v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v8);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v12 = a1 + 1;
  uint64_t v11 = a1[1];
  if (v11
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a1 + 1, 0), (uint64_t v11 = *v12) != 0))
  {
    int v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    int v13 = 0;
  }
  uint64_t v14 = v44;
  unint64_t v15 = (v44 + ~(v44 << 32)) ^ ((unint64_t)(v44 + ~(v44 << 32)) >> 22);
  unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  unsigned int v18 = v13 & ((v17 >> 31) ^ v17);
  uint64_t v19 = (uint64_t *)(v11 + 24 * v18);
  uint64_t v20 = *v19;
  if (*v19)
  {
    uint64_t v21 = 0;
    int v22 = 1;
    while (v20 != v44)
    {
      if (v20 == -1) {
        uint64_t v21 = v19;
      }
      unsigned int v18 = (v18 + v22) & v13;
      uint64_t v19 = (uint64_t *)(v11 + 24 * v18);
      uint64_t v20 = *v19;
      ++v22;
      if (!*v19)
      {
        if (v21)
        {
          uint64_t *v21 = 0;
          v21[1] = 0;
          void v21[2] = 0;
          --*(_DWORD *)(*v12 - 16);
          uint64_t v14 = v44;
          uint64_t v19 = v21;
        }
        goto LABEL_16;
      }
    }
    goto LABEL_32;
  }
LABEL_16:
  uint64_t *v19 = v14;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v23 = *((unsigned int *)v19 + 5);
  if (v23)
  {
    __int16 v24 = (uint64_t *)v19[1];
    uint64_t v25 = 8 * v23;
    do
    {
      uint64_t v26 = *v24;
      *__int16 v24 = 0;
      if (v26) {
        (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      }
      ++v24;
      v25 -= 8;
    }
    while (v25);
  }
  uint64_t v27 = (WTF *)v19[1];
  if (v27)
  {
    v19[1] = 0;
    *((_DWORD *)v19 + 4) = 0;
    WTF::fastFree(v27, v6);
  }
  uint64_t v45 = 0;
  v19[1] = 0;
  uint64_t v46 = 0;
  void v19[2] = 0;
  WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v6);
  uint64_t v28 = *v12;
  if (*v12) {
    int v29 = *(_DWORD *)(v28 - 12) + 1;
  }
  else {
    int v29 = 1;
  }
  *(_DWORD *)(v28 - 1objc_destroyWeak(this + 2) = v29;
  uint64_t v30 = *v12;
  if (*v12) {
    int v31 = *(_DWORD *)(v30 - 12);
  }
  else {
    int v31 = 0;
  }
  uint64_t v32 = (*(_DWORD *)(v30 - 16) + v31);
  unint64_t v33 = *(unsigned int *)(v30 - 4);
  if (v33 > 0x400)
  {
    if (v33 > 2 * v32) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (3 * v33 <= 4 * v32) {
LABEL_31:
  }
    uint64_t v19 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a1 + 1, v19);
LABEL_32:
  uint64_t v34 = (unsigned int *)(v19 + 1);
  uint64_t v35 = *((unsigned int *)v19 + 5);
  if (v35 == *((_DWORD *)v19 + 4))
  {
    a3 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, v35 + 1, (unint64_t)a3);
    uint64_t v35 = *((unsigned int *)v19 + 5);
    long long v36 = (void *)(v19[1] + 8 * v35);
  }
  else
  {
    long long v36 = (void *)(*(void *)v34 + 8 * v35);
  }
  uint64_t v37 = *a3;
  *a3 = 0;
  *long long v36 = v37;
  *((_DWORD *)v19 + 5) = v35 + 1;
  uint64_t v38 = *(void *)(a1[2] + 8);
  atomic_fetch_add((atomic_uint *volatile)(v38 + 128), 1u);
  uint64_t v39 = *(void *)(v38 + 40);
  uint64_t v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v40 = 314;
  *((void *)v40 + 1) = 0;
  *((void *)v40 + 66) = (char *)v40 + 16;
  *((void *)v40 + 67) = 512;
  *((void *)v40 + 68) = 0;
  *((void *)v40 + 70) = 0;
  *((void *)v40 + 69) = 0;
  IPC::Encoder::encodeHeader(v40);
  uint64_t v45 = v40;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v40, &v44);
  IPC::Connection::sendMessageImpl(v39, (uint64_t *)&v45, 0, 0);
  uint64_t result = v45;
  uint64_t v45 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v41);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v42, v43);
  }
  if (atomic_fetch_add((atomic_uint *volatile)(v38 + 128), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v38 + 128));
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  return result;
}

uint64_t WebKit::NetworkContentRuleListManager::addContentRuleLists(uint64_t *a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unint64_t v8 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
  unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  unsigned int v11 = (v10 >> 31) ^ v10;
  unsigned int v12 = v7 & v11;
  uint64_t v13 = v6 + 16 * (v7 & v11);
  uint64_t v14 = *(void *)v13;
  if (!*(void *)v13)
  {
LABEL_12:
    *(void *)uint64_t v13 = a2;
    unint64_t v17 = (WTF::StringImpl ***)WTF::fastMalloc((WTF *)8);
    void *v17 = 0;
    v56[0] = 0;
    std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>::reset[abi:sn180100]((WTF::StringImpl ****)(v13 + 8), v17);
    std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>::reset[abi:sn180100]((WTF::StringImpl ****)v56, 0);
    uint64_t v18 = *a1;
    if (*a1) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v18 - 1objc_destroyWeak(this + 2) = v19;
    uint64_t v20 = *a1;
    if (*a1) {
      int v21 = *(_DWORD *)(v20 - 12);
    }
    else {
      int v21 = 0;
    }
    uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
    unint64_t v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22) {
        goto LABEL_21;
      }
    }
    else if (3 * v23 > 4 * v22)
    {
      goto LABEL_21;
    }
    uint64_t v13 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a1, (uint64_t *)v13);
    goto LABEL_21;
  }
  unint64_t v15 = 0;
  int v16 = 1;
  while ((WTF::StringImpl *)v14 != a2)
  {
    if (v14 == -1) {
      unint64_t v15 = (void *)v13;
    }
    unsigned int v12 = (v12 + v16) & v7;
    uint64_t v13 = v6 + 16 * v12;
    uint64_t v14 = *(void *)v13;
    ++v16;
    if (!*(void *)v13)
    {
      if (v15)
      {
        void *v15 = 0;
        v15[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        uint64_t v13 = (uint64_t)v15;
      }
      goto LABEL_12;
    }
  }
LABEL_21:
  uint64_t v24 = *(void *)(v13 + 8);
  uint64_t v25 = *(unsigned int *)(a3 + 12);
  if (v25)
  {
    uint64_t v26 = *(uint64_t **)a3;
    uint64_t v27 = 120 * v25;
    do
    {
      uint64_t v28 = (WTF::StringImpl *)*v26;
      if (*v26) {
        *(_DWORD *)v28 += 2;
      }
      v56[0] = v28;
      WebKit::WebCompiledContentRuleList::create(v26, (uint64_t *)&v53);
      uint64_t v29 = (uint64_t)v53;
      if (v53)
      {
        unsigned int v53 = 0;
        int v55 = (unsigned int *)v29;
        WebCore::ContentExtensions::ContentExtensionsBackend::addContentExtension();
        uint64_t v30 = v55;
        int v55 = 0;
        if (v30 && atomic_fetch_add((atomic_uint *volatile)v30 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v30 + 2);
          (*(void (**)(unsigned int *))(*(void *)v30 + 8))(v30);
        }
        int v31 = v53;
        unsigned int v53 = 0;
        if (v31 && atomic_fetch_add((atomic_uint *volatile)v31 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v31 + 2);
          (*(void (**)(unsigned int *))(*(void *)v31 + 8))(v31);
        }
      }
      uint64_t v32 = v56[0];
      v56[0] = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2) {
          WTF::StringImpl::destroy(v32, a2);
        }
        else {
          *(_DWORD *)v32 -= 2;
        }
      }
      v26 += 15;
      v27 -= 120;
    }
    while (v27);
  }
  uint64_t v35 = a1[1];
  uint64_t v34 = a1 + 1;
  uint64_t v33 = v35;
  if (!v35) {
    goto LABEL_51;
  }
  int v36 = *(_DWORD *)(v33 - 8);
  unsigned int v37 = v36 & v11;
  uint64_t v38 = (WTF::StringImpl **)(v33 + 24 * (v36 & v11));
  uint64_t v39 = *v38;
  if (*v38 != a2)
  {
    int v40 = 1;
    while (v39)
    {
      unsigned int v37 = (v37 + v40) & v36;
      uint64_t v38 = (WTF::StringImpl **)(v33 + 24 * v37);
      uint64_t v39 = *v38;
      ++v40;
      if (*v38 == a2) {
        goto LABEL_45;
      }
    }
    uint64_t v38 = (WTF::StringImpl **)(v33 + 24 * *(unsigned int *)(v33 - 4));
  }
LABEL_45:
  if ((WTF::StringImpl **)(v33 + 24 * *(unsigned int *)(v33 - 4)) == v38)
  {
LABEL_51:
    v56[0] = 0;
    unsigned int v53 = 0;
    v56[1] = 0;
    uint64_t v54 = 0;
    WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v56, a2);
  }
  else
  {
    unsigned int v53 = (unsigned int *)v38[1];
    uint64_t v41 = v38[2];
    v38[1] = 0;
    v38[2] = 0;
    uint64_t v54 = v41;
    uint64_t v42 = *v34;
    if (!*v34 || (v42 += 24 * *(unsigned int *)(v42 - 4), (WTF::StringImpl **)v42 != v38))
    {
      if ((WTF::StringImpl **)v42 != v38)
      {
        *uint64_t v38 = (WTF::StringImpl *)-1;
        WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v38 + 1), a2);
        ++*(_DWORD *)(*v34 - 16);
        uint64_t v43 = *v34;
        int v44 = *v34 ? *(_DWORD *)(v43 - 12) - 1 : -1;
        *(_DWORD *)(v43 - 1objc_destroyWeak(this + 2) = v44;
        uint64_t v49 = *v34;
        if (*v34)
        {
          unsigned int v50 = 6 * *(_DWORD *)(v49 - 12);
          unsigned int v51 = *(_DWORD *)(v49 - 4);
          if (v50 < v51 && v51 >= 9) {
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(v34, v51 >> 1, 0);
          }
        }
      }
    }
  }
  if (HIDWORD(v54))
  {
    uint64_t v45 = v53;
    uint64_t v46 = 8 * HIDWORD(v54);
    do
    {
      uint64_t v47 = *(void *)v45;
      *(void *)uint64_t v45 = 0;
      v45 += 2;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v47 + 16))(v47, v24);
      (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
      v46 -= 8;
    }
    while (v46);
  }
  return WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, a2);
}

uint64_t WebKit::NetworkContentRuleListManager::removeContentRuleList(uint64_t *a1, uint64_t a2, const WTF::String *a3)
{
  uint64_t v7 = a2;
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, &v7);
  uint64_t v6 = *a1;
  if (*a1) {
    v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  if (v6 != result) {
    return WebCore::ContentExtensions::ContentExtensionsBackend::removeContentExtension(*(WebCore::ContentExtensions::ContentExtensionsBackend **)(result + 8), a3);
  }
  return result;
}

uint64_t WebKit::NetworkContentRuleListManager::removeAllContentRuleLists(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, &v5);
  uint64_t v4 = *a1;
  if (*a1) {
    v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  if (v4 != result) {
    return WebCore::ContentExtensions::ContentExtensionsBackend::removeAllContentExtensions(*(WebCore::ContentExtensions::ContentExtensionsBackend **)(result + 8));
  }
  return result;
}

WTF::StringImpl ****WebKit::NetworkContentRuleListManager::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t result = (WTF::StringImpl ****)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, &v5);
  if (*a1)
  {
    uint64_t v4 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
    if ((WTF::StringImpl ****)v4 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v4 = 0;
  }
  if ((WTF::StringImpl ****)v4 != result) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(a1, (uint64_t)result);
  }
  return result;
}

uint64_t std::optional<WebCore::ContentSecurityPolicyResponseHeaders>::operator=[abi:sn180100]<WebCore::ContentSecurityPolicyResponseHeaders,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    WebCore::ContentSecurityPolicyResponseHeaders::operator=(a1, a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v3 = *(void *)a2;
    *(void *)a2 = 0;
    *(void *)a1 = v3;
    LODWORD(v3) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a1 + 8) = v3;
    LODWORD(v3) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 1objc_destroyWeak(this + 2) = 0;
    *(_DWORD *)(a1 + 1objc_destroyWeak(this + 2) = v3;
    LODWORD(v3) = *(_DWORD *)(a2 + 16);
    *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 16) = v3;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t WebCore::ContentSecurityPolicyResponseHeaders::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  if (v4) {
    WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 16 * v4));
  }
  WTF::VectorBuffer<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::FastMalloc>::adopt(a1, (_DWORD *)a2);
  int v5 = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + ++*(_DWORD *)(this + 16) = v5;
  return a1;
}

uint64_t WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((unsigned int *)a2 + 3);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 28))
  {
    uint64_t v5 = WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *((unsigned int *)a2 + 3);
    if (v6)
    {
      uint64_t v7 = *a2;
      uint64_t v8 = *a2 + 16 * v6;
      do
      {
        unint64_t v9 = *(_DWORD **)v7;
        if (*(void *)v7) {
          *v9 += 2;
        }
        *(void *)uint64_t v5 = v9;
        *(unsigned char *)(v5 + 8) = *(unsigned char *)(v7 + 8);
        v7 += 16;
        v5 += 16;
      }
      while (v7 != v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

WebKit::NetworkLoadChecker *std::unique_ptr<WebKit::NetworkLoadChecker>::reset[abi:sn180100](WebKit::NetworkLoadChecker **a1, WebKit::NetworkLoadChecker *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkLoadChecker::~NetworkLoadChecker(result, a2);
    return (WebKit::NetworkLoadChecker *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebCore::SQLiteStatement::operator delete(WebCore::SQLiteStatement *a1, size_t a2)
{
  WebCore::SQLiteStatement::~SQLiteStatement(a1);
  if (atomic_load((unsigned int *)v3))
  {
    bzero(v3, a2);
  }
  else
  {
    WTF::fastFree((WTF *)v3, v4);
  }
}

uint64_t *std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>(uint64_t *a1, uint64_t *a2)
{
  if (*((unsigned __int8 *)a1 + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*((unsigned char *)a1 + 8)) {
      return WTF::String::operator=(a1, a2);
    }
  }
  else if (*((unsigned char *)a1 + 8))
  {
    return (uint64_t *)std::__optional_destruct_base<WebCore::RegistrableDomain,false>::reset[abi:sn180100]((WTF::StringImpl *)a1, (WTF::StringImpl *)a2);
  }
  else
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    *a1 = v2;
    *((unsigned char *)a1 + 8) = 1;
  }
  return a1;
}

WTF::StringImpl *std::__optional_destruct_base<WebCore::RegistrableDomain,false>::reset[abi:sn180100](WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (*((unsigned char *)result + 8))
  {
    uint64_t v2 = result;
    uint64_t result = *(WTF::StringImpl **)result;
    *(void *)uint64_t v2 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    *((unsigned char *)v2 + 8) = 0;
  }
  return result;
}

void std::__optional_storage_base<WebCore::PCM::DestinationUnlinkableToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationUnlinkableToken,false>>(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned __int8 *)(a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      uint64_t v4 = *a2;
      *a2 = 0;
      uint64_t v5 = *(const void **)a1;
      *(void *)a1 = v4;
      if (v5) {
        CFRelease(v5);
      }
      uint64_t v6 = a2[1];
      a2[1] = 0;
      uint64_t v7 = *(const void **)(a1 + 8);
      *(void *)(a1 + 8) = v6;
      if (v7) {
        CFRelease(v7);
      }
      uint64_t v8 = a2[2];
      a2[2] = 0;
      unint64_t v9 = *(const void **)(a1 + 16);
      *(void *)(a1 + ++*(_DWORD *)(this + 16) = v8;
      if (v9) {
        CFRelease(v9);
      }
      WTF::String::operator=((uint64_t *)(a1 + 24), a2 + 3);
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    uint64_t v10 = *a2;
    *a2 = 0;
    *(void *)a1 = v10;
    uint64_t v11 = a2[1];
    a2[1] = 0;
    *(void *)(a1 + 8) = v11;
    uint64_t v12 = a2[2];
    a2[2] = 0;
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = v12;
    uint64_t v13 = a2[3];
    a2[3] = 0;
    *(void *)(a1 + 24) = v13;
    *(unsigned char *)(a1 + 3objc_destroyWeak(this + 2) = 1;
  }
}

void std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::reset[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(const void **)(a1 + 16);
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = *(const void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v6 = *(const void **)a1;
    *(void *)a1 = 0;
    if (v6) {
      CFRelease(v6);
    }
    *(unsigned char *)(a1 + 3objc_destroyWeak(this + 2) = 0;
  }
}

uint64_t *std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationSecretToken,false>>(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*((unsigned __int8 *)result + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*((unsigned char *)result + 24))
    {
      WTF::String::operator=(result, (uint64_t *)a2);
      WTF::String::operator=(v3 + 1, (uint64_t *)(a2 + 8));
      return WTF::String::operator=(v3 + 2, (uint64_t *)(a2 + 16));
    }
  }
  else if (*((unsigned char *)result + 24))
  {
    return (uint64_t *)std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::reset[abi:sn180100]((uint64_t)result, (WTF::StringImpl *)a2);
  }
  else
  {
    uint64_t v4 = *(void *)a2;
    *(void *)a2 = 0;
    WebKit::NetworkLoadChecker *result = v4;
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    result[1] = v5;
    uint64_t v6 = *(void *)(a2 + 16);
    *(void *)(a2 + ++*(_DWORD *)(this + 16) = 0;
    result[2] = v6;
    *((unsigned char *)result + 24) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::reset[abi:sn180100](uint64_t result, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(WTF::StringImpl **)(result + 16);
    *(void *)(v2 + ++*(_DWORD *)(this + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t result = *(void *)v2;
    *(void *)uint64_t v2 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    *(unsigned char *)(v2 + 24) = 0;
  }
  return result;
}

void WebKit::NetworkCORSPreflightChecker::Parameters::~Parameters(WebKit::NetworkCORSPreflightChecker::Parameters *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, a2);
  }
  uint64_t v6 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v6) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v6, a2);
  }
  uint64_t v7 = (const void *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v7) {
    CFRelease(v7);
  }

  WebCore::ResourceRequestBase::~ResourceRequestBase(this);
}

uint64_t WebCore::ResourceResponseBase::operator=(uint64_t a1, uint64_t a2)
{
  WTF::URL::operator=(a1, a2);
  WTF::String::operator=((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  WTF::String::operator=((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
  WTF::String::operator=((uint64_t *)(a1 + 64), (uint64_t *)(a2 + 64));
  WTF::String::operator=((uint64_t *)(a1 + 72), (uint64_t *)(a2 + 72));
  uint64_t v4 = *(unsigned int *)(a1 + 92);
  if (v4) {
    WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::CommonHeader>::destruct(*(WebCore::ExceptionData **)(a1 + 80), (WebCore::ExceptionData *)(*(void *)(a1 + 80) + 16 * v4));
  }
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(a1 + 80, (uint64_t *)(a2 + 80));
  uint64_t v5 = *(unsigned int *)(a1 + 108);
  if (v5) {
    WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::UncommonHeader>::destruct(*(WebCore::HTTPHeaderMap::UncommonHeader **)(a1 + 96), (WebCore::HTTPHeaderMap::UncommonHeader *)(*(void *)(a1 + 96) + 16 * v5));
  }
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(a1 + 96, (uint64_t *)(a2 + 96));
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a2 + 11objc_destroyWeak(this + 2) = 0;
  uint64_t v8 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector ***)(a1 + 112);
  *(void *)(a1 + 11objc_destroyWeak(this + 2) = v7;
  if (v8) {
    WTF::ThreadSafeRefCounted<WTF::Box<WebCore::NetworkLoadMetrics>::Data,(WTF::DestructionThread)0>::deref(v8, v6);
  }
  std::__optional_storage_base<WebCore::CertificateInfo,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CertificateInfo,false>>(a1 + 120, (uint64_t *)(a2 + 120));
  long long v9 = *(_OWORD *)(a2 + 136);
  long long v10 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 15objc_destroyWeak(this + 2) = v10;
  *(_OWORD *)(a1 + 136) = v9;
  long long v11 = *(_OWORD *)(a2 + 184);
  long long v12 = *(_OWORD *)(a2 + 200);
  long long v13 = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
  *(_OWORD *)(a1 + 2++*(_DWORD *)(this + 16) = v13;
  *(_OWORD *)(a1 + 200) = v12;
  *(_OWORD *)(a1 + 184) = v11;
  return a1;
}

{
  long long v4;
  WTF::StringImpl *v5;
  atomic_uint *v6;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector **v7;
  __int16 v8;
  long long v9;
  long long v10;
  __int16 v11;

  WTF::String::operator=((uint64_t *)a1, (WTF::StringImpl **)a2);
  uint64_t v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v4;
  WTF::String::operator=((uint64_t *)(a1 + 40), (WTF::StringImpl **)(a2 + 40));
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  WTF::String::operator=((uint64_t *)(a1 + 56), (WTF::StringImpl **)(a2 + 56));
  WTF::String::operator=((uint64_t *)(a1 + 64), (WTF::StringImpl **)(a2 + 64));
  WTF::String::operator=((uint64_t *)(a1 + 72), (WTF::StringImpl **)(a2 + 72));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=(a1 + 80, a2 + 80);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=(a1 + 96, a2 + 96);
  uint64_t v6 = *(atomic_uint **)(a2 + 112);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  uint64_t v7 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector ***)(a1 + 112);
  *(void *)(a1 + 11objc_destroyWeak(this + 2) = v6;
  if (v7) {
    WTF::ThreadSafeRefCounted<WTF::Box<WebCore::NetworkLoadMetrics>::Data,(WTF::DestructionThread)0>::deref(v7, v5);
  }
  std::__optional_storage_base<WebCore::CertificateInfo,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::CertificateInfo,false> const&>((const void **)(a1 + 120), a2 + 120);
  uint64_t v8 = *(_WORD *)(a2 + 136);
  *(unsigned char *)(a1 + 138) = *(unsigned char *)(a2 + 138);
  *(_WORD *)(a1 + 136) = v8;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 15objc_destroyWeak(this + 2) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 19objc_destroyWeak(this + 2) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v9;
  long long v10 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 209) = *(_OWORD *)(a2 + 209);
  *(_OWORD *)(a1 + 200) = v10;
  long long v11 = *(_WORD *)(a2 + 232);
  *(unsigned char *)(a1 + 234) = *(unsigned char *)(a2 + 234);
  *(_WORD *)(a1 + 23objc_destroyWeak(this + 2) = v11;
  return a1;
}

void std::__optional_storage_base<WebCore::CertificateInfo,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CertificateInfo,false>>(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned __int8 *)(a1 + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*(unsigned char *)(a1 + 8))
    {
      uint64_t v3 = *a2;
      *a2 = 0;
      uint64_t v4 = *(const void **)a1;
      *(void *)a1 = v3;
      if (v4)
      {
        CFRelease(v4);
      }
    }
  }
  else if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v5 = *(const void **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      uint64_t v6 = a1;
      CFRelease(v5);
      a1 = v6;
    }
    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    *(void *)a1 = v2;
    *(unsigned char *)(a1 + 8) = 1;
  }
}

const void **std::__optional_storage_base<WebCore::CertificateInfo,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::CertificateInfo,false> const&>(const void **result, uint64_t a2)
{
  if (*((unsigned __int8 *)result + 8) == *(unsigned __int8 *)(a2 + 8))
  {
    if (*((unsigned char *)result + 8))
    {
      return WebCore::CertificateInfo::operator=(result, (const void **)a2);
    }
  }
  else if (*((unsigned char *)result + 8))
  {
    uint64_t v3 = *result;
    WebKit::NetworkLoadChecker *result = 0;
    if (v3)
    {
      uint64_t v5 = result;
      CFRelease(v3);
      uint64_t result = v5;
    }
    *((unsigned char *)result + 8) = 0;
  }
  else
  {
    uint64_t v2 = *(const void **)a2;
    WebKit::NetworkLoadChecker *result = *(const void **)a2;
    if (v2)
    {
      uint64_t v4 = result;
      CFRetain(v2);
      uint64_t result = v4;
    }
    *((unsigned char *)result + 8) = 1;
  }
  return result;
}

const void **WebCore::CertificateInfo::operator=(const void **a1, const void **a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v6 = *a2;
    CFRetain(v3);
    uint64_t v3 = v6;
  }
  uint64_t v4 = *a1;
  *a1 = v3;
  if (v4) {
    CFRelease(v4);
  }
  return a1;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (_DWORD **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (_DWORD *)-1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5)
        {
          if (v5[4] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
          }
          else {
            --v5[4];
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::deallocateTable(void *a1, WTF::StringImpl *a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    do
    {
      if (*a1 != -1) {
        a1 = (void *)WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>::~KeyValuePair((uint64_t)a1, a2);
      }
      a1 += 11;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

uint64_t WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 64);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v3])(&v6, a1 + 40);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  uint64_t v4 = *(WTF::StringImpl **)a1;
  *(void *)a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 40;
    do
    {
      uint64_t v5 = *(WTF::StringImpl **)(v4 - 40);
      if (v5 != (WTF::StringImpl *)-1)
      {
        if (*(unsigned char *)(v4 + 32))
        {
          uint64_t v6 = *(unsigned int *)(v4 + 24);
          if (v6 != -1)
          {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v6])(&v8, v4);
            uint64_t v5 = *(WTF::StringImpl **)(v4 - 40);
          }
          *(_DWORD *)(v4 + 24) = -1;
        }
        *(void *)(v4 - 40) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 80;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF **std::unique_ptr<WebKit::NetworkOriginAccessPatterns>::reset[abi:sn180100](WTF **result, void *a2)
{
  uint64_t v2 = *result;
  WebKit::NetworkLoadChecker *result = 0;
  if (v2)
  {
    WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 8, a2);
    return (WTF **)WTF::fastFree(v2, v3);
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::UserContentURLPattern>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (WTF::StringImpl **)result;
    do
    {
      uint64_t v4 = v3[2];
      v3[2] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      uint64_t v5 = v3[1];
      v3[1] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, a2);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
      uint64_t result = *v3;
      void *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 4;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

WebKit::WebSharedWorkerServerToContextConnection *std::unique_ptr<WebKit::WebSharedWorkerServerToContextConnection>::reset[abi:sn180100](WebKit::WebSharedWorkerServerToContextConnection **a1, WebKit::WebSharedWorkerServerToContextConnection *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::WebSharedWorkerServerToContextConnection::~WebSharedWorkerServerToContextConnection(result);
    return (WebKit::WebSharedWorkerServerToContextConnection *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (void *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        a2 = (void *)*v4;
        void *v4 = 0;
        if (a2) {
          std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100]((uint64_t)v4, a2);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *(WTF::StringImpl **)v4;
      if (*(void *)v4 != -1)
      {
        uint64_t v6 = *(_DWORD **)(v4 + 8);
        *(void *)(v4 + 8) = 0;
        if (v6)
        {
          if (v6[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
            uint64_t v5 = *(WTF::StringImpl **)v4;
          }
          else
          {
            --v6[2];
          }
        }
        *(void *)uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin(void **a1)
{
  uint64_t result = *a1;
  if (!result) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)result - 1);
  uint64_t v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3)) {
    return &result[2 * v2];
  }
  if (v2)
  {
    uint64_t v4 = 16 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v4 -= 16;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages19NetworkProcessProxy54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

uint64_t std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>::pair[abi:sn180100]<true,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *(void *)a1 = v4;
  long long v5 = *(_OWORD *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v7 = a1 + 40;
  *(_OWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 7objc_destroyWeak(this + 2) = 0;
  if (*(unsigned char *)(a3 + 32))
  {
    *(_DWORD *)(a1 + 64) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v7, a3);
    *(unsigned char *)(a1 + 7objc_destroyWeak(this + 2) = 1;
  }
  return a1;
}

uint64_t std::default_delete<WebCore::LoginStatus>::operator()[abi:sn180100](bmalloc::api *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return bmalloc::api::isoDeallocate(this, a2);
}

bmalloc::api *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore11LoginStatusEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(bmalloc::api **)a2;
  *(void *)a2 = 0;
  if (result) {
    return (bmalloc::api *)std::default_delete<WebCore::LoginStatus>::operator()[abi:sn180100](result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore11LoginStatusEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJhN7WebCore13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJhS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      long long v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        long long v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          WTF::RefCounted<WebCore::ContentExtensions::ContentExtension>::deref(v6, a2);
          long long v5 = *v4;
        }
        WTF::StringImpl *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

WebCore::ContentExtensions::ContentExtension *WTF::RefCounted<WebCore::ContentExtensions::ContentExtension>::deref(WebCore::ContentExtensions::ContentExtension *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebCore::ContentExtensions::ContentExtension::~ContentExtension(result, a2);
    return (WebCore::ContentExtensions::ContentExtension *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebCore::ContentExtensions::ContentExtension::~ContentExtension(WebCore::ContentExtensions::ContentExtension *this, void *a2)
{
  uint64_t v3 = (WTF *)*((void *)this + 21);
  if (v3)
  {
    *((void *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *((void *)this + 20);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  long long v5 = (WTF::StringImpl *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *((void *)this + 14);
  if (v6) {
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  char v8 = (_DWORD *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v8) {
    WTF::RefCounted<WebCore::StyleSheetContents>::deref(v8);
  }
  long long v9 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  long long v10 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v10 && atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v10 + 2);
    (*(void (**)(unsigned int *))(*(void *)v10 + 8))(v10);
  }
  long long v11 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
}

_DWORD *WTF::RefCounted<WebCore::StyleSheetContents>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    uint64_t v1 = (WTF *)MEMORY[0x199734690]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 8;
    do
    {
      if (*(void *)(v4 - 8) != -1) {
        uint64_t v4 = WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl ****std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>::reset[abi:sn180100](WTF::StringImpl ****result, WTF::StringImpl ***a2)
{
  uint64_t v2 = *result;
  WTF::StringImpl *result = a2;
  if (v2)
  {
    if (*v2) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*v2, a2);
    }
    return (WTF::StringImpl ****)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchLoad::BackgroundFetchLoad(WebKit::NetworkProcess &,PAL::SessionID,WebCore::BackgroundFetchRecordLoaderClient &,WebCore::BackgroundFetchRequest const&,unsigned long,WebCore::ClientOrigin const&)::$_0,void,std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C3250;
  uint64_t v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 32);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchLoad::BackgroundFetchLoad(WebKit::NetworkProcess &,PAL::SessionID,WebCore::BackgroundFetchRecordLoaderClient &,WebCore::BackgroundFetchRequest const&,unsigned long,WebCore::ClientOrigin const&)::$_0,void,std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C3250;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 32);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::BackgroundFetchLoad::BackgroundFetchLoad(WebKit::NetworkProcess &,PAL::SessionID,WebCore::BackgroundFetchRecordLoaderClient &,WebCore::BackgroundFetchRequest const&,unsigned long,WebCore::ClientOrigin const&)::$_0,void,std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::call(void *a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[2];
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v4 = (void *)a1[1];
    int v5 = *(_DWORD *)(a2 + 656);
    if (v5 == -1) {
      uint64_t v6 = -1;
    }
    else {
      uint64_t v6 = *(unsigned int *)(a2 + 656);
    }
    if (v6 == 2)
    {
      if (v5 != 2) {
        goto LABEL_52;
      }
      WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v35);
      CFTypeRef cf = 0;
      LOBYTE(v41) = 0;
      char v39 = v39 & 0xF1 | 4;
      (*(void (**)(void, uint64_t))(**(void **)(v4[4] + 8) + 40))(*(void *)(v4[4] + 8), a2);
      CFTypeRef v8 = cf;
      CFTypeRef cf = 0;
      if (v8) {
        CFRelease(v8);
      }
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v35, v7);
    }
    else if (v6 == 1)
    {
      if (v5 != 1) {
LABEL_52:
      }
        std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      if (v5) {
        goto LABEL_52;
      }
      uint64_t v9 = a1[3];
      long long v10 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v35 = 134217984;
        *(void *)&unsigned char v35[4] = v4;
        _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - BackgroundFetchLoad::startNetworkLoad", v35, 0xCu);
      }
      *(void *)uint64_t v35 = v4[3];
      uint64_t v11 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 224), v35);
      if (v11)
      {
        long long v12 = (WebKit::NetworkSession *)v11;
        WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)v35);
        WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v38, a2);
        uint64_t v14 = *(const void **)(a2 + 152);
        *(void *)(a2 + 15objc_destroyWeak(this + 2) = 0;
        unint64_t v15 = (WTF::StringImpl *)cf;
        CFTypeRef cf = v14;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v13);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
        int v16 = *(WTF::StringImpl **)(a2 + 160);
        *(void *)(a2 + 160) = 0;
        unint64_t v17 = v41;
        uint64_t v41 = v16;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            WTF::StringImpl::destroy(v17, v13);
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
        uint64_t v18 = *(WTF::RefCountedBase **)(a2 + 168);
        *(void *)(a2 + 168) = 0;
        int v19 = v42;
        uint64_t v42 = v18;
        if (v19) {
          WTF::RefCounted<WebCore::FormData>::deref(v19);
        }
        uint64_t v43 = *(void *)(a2 + 176);
        char v44 = *(unsigned char *)(a2 + 184);
        uint64_t v20 = *(const void **)(a2 + 192);
        *(void *)(a2 + 19objc_destroyWeak(this + 2) = 0;
        CFTypeRef v21 = v45;
        CFTypeRef v45 = v20;
        if (v21) {
          CFRelease(v21);
        }
        uint64_t v22 = *(atomic_uint **)(v4[31] + 248);
        if (v22) {
          atomic_fetch_add(v22, 1u);
        }
        unint64_t v23 = v36;
        int v36 = (WTF *)v22;
        if (v23) {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v23, v13);
        }
        uint64_t v24 = *(atomic_uint **)(v4[31] + 240);
        if (v24) {
          atomic_fetch_add(v24, 1u);
        }
        uint64_t v25 = v37;
        unsigned int v37 = (WTF *)v24;
        if (v25) {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v25, v13);
        }
        BOOL v46 = *(unsigned char *)(v4[31] + 18) == 2;
        char v47 = 0;
        uint64_t v26 = (WebKit::NetworkDataTaskCocoa *)WTF::fastMalloc((WTF *)0x318);
        uint64_t v27 = WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa(v26, v12, (WebKit::NetworkDataTaskClient *)(v4 + 1), (const WebKit::NetworkLoadParameters *)v35);
        uint64_t v28 = v4[30];
        v4[30] = v27;
        if (v28)
        {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v28 + 8));
          uint64_t v27 = v4[30];
        }
        (*(void (**)(uint64_t))(*(void *)v27 + 24))(v27);
        if (v51)
        {
          CFTypeRef v34 = v50;
          CFTypeRef v50 = 0;
          if (v34) {
            CFRelease(v34);
          }
        }
        WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v29);
        if (v48[2576]) {
          WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v48);
        }
        CFTypeRef v30 = v45;
        CFTypeRef v45 = 0;
        if (v30) {
          CFRelease(v30);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v38);
        uint64_t v32 = v37;
        unsigned int v37 = 0;
        if (v32) {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v32, v31);
        }
        uint64_t v33 = v36;
        int v36 = 0;
        if (v33) {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v33, v31);
        }
      }
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchLoad::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C3278;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchLoad::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C3278;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::BackgroundFetchLoad::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::call(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 656);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6) {
        uint64_t v7 = v6 - 8;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    if (v4 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      JUMPOUT(0x198B48E44);
    }
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v65);
    CFTypeRef cf = 0;
    char v69 = 0;
    char v66 = v66 & 0xF1 | 4;
    (*(void (**)(void, uint64_t))(**(void **)(*(void *)(v7 + 32) + 8) + 40))(*(void *)(*(void *)(v7 + 32) + 8), a2);
    CFTypeRef v22 = cf;
    CFTypeRef cf = 0;
    if (v22) {
      CFRelease(v22);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v65, v21);
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)v65);
    uint64_t v23 = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v23 + 16))(v23, v65);
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    CFTypeRef v24 = v67;
    CFTypeRef v67 = 0;
    if (v24) {
      CFRelease(v24);
    }
    uint64_t v25 = (WebCore::ResourceRequestBase *)v65;
    goto LABEL_51;
  }
  WTF::URL::URL((uint64_t)v50, (uint64_t *)(a2 + 200));
  WTF::URL::URL((uint64_t)v51, (uint64_t *)(a2 + 240));
  uint64_t v8 = *(void *)(a2 + 280);
  long long v9 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a2 + 288) = 0u;
  long long v52 = v9;
  *(void *)&long long v9 = *(void *)(a2 + 304);
  *(void *)(a2 + 304) = 0;
  v51[5] = v8;
  uint64_t v53 = v9;
  uint64_t v10 = *(void *)(a2 + 312);
  *(void *)(a2 + 31objc_destroyWeak(this + 2) = 0;
  uint64_t v54 = v10;
  uint64_t v11 = *(void *)(a2 + 320);
  *(void *)(a2 + 320) = 0;
  uint64_t v55 = v11;
  uint64_t v12 = *(void *)(a2 + 328);
  *(void *)(a2 + 328) = 0;
  uint64_t v56 = v12;
  uint64_t v13 = *(void *)(a2 + 336);
  *(void *)(a2 + 336) = 0;
  uint64_t v57 = v13;
  LODWORD(v1objc_destroyWeak(this + 2) = *(_DWORD *)(a2 + 344);
  char v59 = *(unsigned char *)(a2 + 348);
  int v58 = v12;
  long long v14 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a2 + 35objc_destroyWeak(this + 2) = 0u;
  long long v60 = v14;
  uint64_t v15 = *(void *)(a2 + 368);
  uint64_t v16 = *(void *)(a2 + 376);
  *(void *)(a2 + 368) = 0;
  char v63 = *(unsigned char *)(a2 + 384);
  uint64_t v61 = v15;
  uint64_t v62 = v16;
  unint64_t v17 = *(const void **)(a2 + 392);
  *(void *)(a2 + 39objc_destroyWeak(this + 2) = 0;
  CFTypeRef v64 = v17;
  if ((*(unsigned char *)(WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v50) + 8) & 2) == 0)
  {
    uint64_t v18 = *(void *)(a1 + 8);
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 8);
      if (v19) {
        uint64_t v20 = v19 - 8;
      }
      else {
        uint64_t v20 = 0;
      }
    }
    else
    {
      uint64_t v20 = 0;
    }
    uint64_t v27 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v50);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v28 = (WTF::StringImpl *)v65[0];
    uint64_t v41 = 0;
    uint64_t v29 = *(WTF::StringImpl **)v27;
    if (*(void *)v27) {
      *(_DWORD *)v29 += 2;
    }
    uint64_t v42 = v29;
    long long v30 = *(_OWORD *)(v27 + 8);
    long long v44 = *(_OWORD *)(v27 + 24);
    long long v43 = v30;
    if (v28) {
      *(_DWORD *)v28 += 2;
    }
    CFTypeRef v45 = v28;
    int v46 = 0;
    __int16 v47 = 2;
    CFTypeRef v48 = 0;
    char v49 = 1;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v65);
    CFTypeRef cf = 0;
    char v69 = 0;
    char v66 = v66 & 0xF1 | 4;
    (*(void (**)(void, WTF::StringImpl **))(**(void **)(*(void *)(v20 + 32) + 8) + 40))(*(void *)(*(void *)(v20 + 32) + 8), &v41);
    CFTypeRef v32 = cf;
    CFTypeRef cf = 0;
    if (v32) {
      CFRelease(v32);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v65, v31);
    CFTypeRef v34 = v48;
    CFTypeRef v48 = 0;
    if (v34) {
      CFRelease(v34);
    }
    uint64_t v35 = v45;
    CFTypeRef v45 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2) {
        WTF::StringImpl::destroy(v35, v33);
      }
      else {
        *(_DWORD *)v35 -= 2;
      }
    }
    int v36 = v42;
    uint64_t v42 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v33);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
    unsigned int v37 = v41;
    uint64_t v41 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
      {
        WTF::StringImpl::destroy(v37, v33);
        if (!v28)
        {
LABEL_45:
          WebCore::ResourceRequest::ResourceRequest((StringImpl *)v65);
          uint64_t v38 = *(void *)(a1 + 16);
          *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
          (*(void (**)(uint64_t, void *))(*(void *)v38 + 16))(v38, v65);
          (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
          CFTypeRef v39 = v67;
          CFTypeRef v67 = 0;
          if (v39) {
            CFRelease(v39);
          }
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v65);
          goto LABEL_48;
        }
LABEL_42:
        if (*(_DWORD *)v28 == 2) {
          WTF::StringImpl::destroy(v28, v33);
        }
        else {
          *(_DWORD *)v28 -= 2;
        }
        goto LABEL_45;
      }
      *(_DWORD *)v37 -= 2;
    }
    if (!v28) {
      goto LABEL_45;
    }
    goto LABEL_42;
  }
  uint64_t v26 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v26 + 16))(v26, v50);
  (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
LABEL_48:
  CFTypeRef v40 = v64;
  CFTypeRef v64 = 0;
  if (v40) {
    CFRelease(v40);
  }
  uint64_t v25 = (WebCore::ResourceRequestBase *)v50;
LABEL_51:
  WebCore::ResourceRequestBase::~ResourceRequestBase(v25);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DatabaseUtilities::beginTransactionIfNecessary(void)::$_1,void>::call(uint64_t a1)
{
  return WebCore::SQLiteTransaction::commit((WebCore::SQLiteTransaction *)(*(void *)(a1 + 8) + 80));
}

uint64_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, int8x16_t *a5, int a6, uint64_t a7)
{
  uint64_t v10 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    uint64_t v11 = &a1[2 * (a3 & 0xFFFFFFC0)];
    long long v12 = 0uLL;
    do
    {
      v35.val[0] = *a2;
      int8x16_t v13 = a2[1];
      v37.val[0] = a2[2];
      int8x16_t v14 = a2[3];
      a2 += 4;
      int8x16_t v15 = v14;
      v37.val[1] = 0uLL;
      v39.val[0] = v13;
      v35.val[1] = 0uLL;
      uint64_t v16 = a1;
      vst2q_s8(v16, v35);
      v16 += 32;
      v39.val[1] = 0uLL;
      vst2q_s8(v16, v39);
      unint64_t v17 = a1 + 64;
      vst2q_s8(v17, v37);
      uint64_t v18 = a1 + 96;
      vst2q_s8(v18, *(int8x16x2_t *)(&v12 - 1));
      a1 += 128;
    }
    while (a1 != v11);
    a1 = v11;
  }
  while (a1 != v10)
  {
    __int16 v19 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v19;
    a1 += 2;
  }
  uint64_t v33 = a4;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v33, v10);
  uint64_t v20 = v33;
  if (v33) {
    uint64_t v20 = *(unsigned int *)(v33 + 4);
  }
  CFTypeRef v21 = &v10[2 * v20];
  CFTypeRef v22 = &v21[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    uint64_t v23 = &v21[2 * (a6 & 0xFFFFFFC0)];
    long long v24 = 0uLL;
    do
    {
      v36.val[0] = *a5;
      int8x16_t v25 = a5[1];
      v38.val[0] = a5[2];
      int8x16_t v26 = a5[3];
      a5 += 4;
      int8x16_t v27 = v26;
      v38.val[1] = 0uLL;
      v40.val[0] = v25;
      v36.val[1] = 0uLL;
      uint64_t v28 = v21;
      vst2q_s8(v28, v36);
      v28 += 32;
      v40.val[1] = 0uLL;
      vst2q_s8(v28, v40);
      uint64_t v29 = v21 + 64;
      vst2q_s8(v29, v38);
      long long v30 = v21 + 96;
      vst2q_s8(v30, *(int8x16x2_t *)(&v24 - 1));
      v21 += 128;
    }
    while (v21 != v23);
    CFTypeRef v21 = v23;
  }
  while (v21 != v22)
  {
    __int16 v31 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)CFTypeRef v21 = v31;
    v21 += 2;
  }
  uint64_t v34 = a7;
  return WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v34, v22);
}

unsigned char *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<JSC::MessageSource,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 8));
  IPC::ArgumentCoder<JSC::MessageSource,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 9));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 16));
  uint64_t v4 = *(void *)(a2 + 24);

  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, v4);
}

unint64_t IPC::ArgumentCoder<JSC::MessageSource,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198B490FCLL);
    }
    unsigned char *result = 1;
    if (!*(unsigned char *)(a2 + 8))
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      JUMPOUT(0x198B49124);
    }
    return (unsigned char *)IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)a2);
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198B4911CLL);
    }
    unsigned char *result = 0;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(72 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 72 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    while (1)
    {
      uint64_t v14 = v4 + 72 * v11;
      int v15 = *(_DWORD *)(v14 + 24);
      if (v15) {
        break;
      }
      if (*(void *)v14 != -1) {
        goto LABEL_9;
      }
LABEL_36:
      if (++v11 == v13) {
        goto LABEL_41;
      }
    }
    if (v15 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_40;
    }
LABEL_9:
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
    {
      uint64_t v16 = *(void *)(v4 + 72 * v11 + 64);
      if (v16) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v16, v8);
      }
      uint64_t v17 = *(unsigned int *)(v14 + 56);
      if (v17 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v17])(&v41, v14 + 32);
      }
      *(_DWORD *)(v14 + 56) = -1;
      uint64_t v18 = *(unsigned int *)(v14 + 24);
      if (v18 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v18])(&v42, v4 + 72 * v11);
      }
      *(_DWORD *)(v14 + 24) = -1;
    }
    else
    {
      uint64_t v19 = *a1;
      uint64_t v40 = v12;
      if (*a1) {
        int v20 = *(_DWORD *)(v19 - 8);
      }
      else {
        int v20 = 0;
      }
      unsigned int v21 = WTF::computeHash<WebCore::ClientOrigin>(v4 + 72 * v11);
      int v22 = 0;
      do
      {
        unsigned int v23 = v21 & v20;
        uint64_t v12 = v19 + 72 * (v21 & v20);
        int v25 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
        unsigned int v21 = ++v22 + v23;
      }
      while (!v25);
      uint64_t v26 = v19 + 72 * v23;
      uint64_t v29 = *(void *)(v26 + 64);
      uint64_t v28 = (void *)(v26 + 64);
      uint64_t v27 = v29;
      if (v29) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v27, v24);
      }
      uint64_t v30 = *(unsigned int *)(v12 + 56);
      uint64_t v13 = v5;
      if (v30 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v30])(&v43, v12 + 32);
      }
      *(_DWORD *)(v12 + 56) = -1;
      uint64_t v31 = *(unsigned int *)(v12 + 24);
      if (v31 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v31])(&v44, v12);
      }
      *(unsigned char *)uint64_t v12 = 0;
      *(_DWORD *)(v12 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v12, v4 + 72 * v11);
      *(unsigned char *)(v12 + 3objc_destroyWeak(this + 2) = 0;
      *(_DWORD *)(v12 + 56) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v12 + 32, v14 + 32);
      uint64_t v32 = v4 + 72 * v11;
      *uint64_t v28 = 0;
      uint64_t v33 = *(void *)(v32 + 64);
      *(void *)(v32 + 64) = 0;
      *uint64_t v28 = v33;
      uint64_t v34 = *(void *)(v32 + 64);
      if (v34) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v34, v8);
      }
      uint64_t v35 = *(unsigned int *)(v14 + 56);
      if (v35 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v35])(&v45, v14 + 32);
      }
      *(_DWORD *)(v14 + 56) = -1;
      uint64_t v36 = *(unsigned int *)(v14 + 24);
      if (v36 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v36])(&v46, v4 + 72 * v11);
      }
      *(_DWORD *)(v14 + 24) = -1;
      if (v14 != a3) {
        uint64_t v12 = v40;
      }
    }
    goto LABEL_36;
  }
LABEL_40:
  uint64_t v12 = 0;
  uint64_t result = 0;
  if (v4)
  {
LABEL_41:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

uint64_t WTF::computeHash<WebCore::ClientOrigin>(uint64_t a1)
{
  int v3 = -1640531527;
  __int16 v4 = 0;
  char v5 = 0;
  uint64_t v1 = a1 + 32;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v3, a1);
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v3, v1);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v3);
}

uint64_t WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  long long v5 = 0u;
  long long v6 = 0u;
  long long v3 = 0u;
  long long v4 = 0u;
  if (WebCore::operator==()) {
    uint64_t v0 = WebCore::operator==();
  }
  else {
    uint64_t v0 = 0;
  }
  if (DWORD2(v6) != -1) {
    ((void (*)(char *, long long *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[DWORD2(v6)])(&v2, &v5);
  }
  DWORD2(v6) = -1;
  if (DWORD2(v4) != -1) {
    ((void (*)(char *, long long *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[DWORD2(v4)])(&v2, &v3);
  }
  return v0;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 24);
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  if (v3 == -1)
  {
    if (v4 != -1) {
      goto LABEL_3;
    }
  }
  else
  {
    if (v4 != -1)
    {
LABEL_3:
      uint64_t v5 = result;
      return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRSJ_SP_EEEDcmSR_DpOT0____fdiagonal[v4])(&v5, result, a2);
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSC_33SupportsObjectIdentifierNullStateE1EEEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSA_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple const&>(*a1, a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSC_33SupportsObjectIdentifierNullStateE1EEEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSA_SJ_EEERKS10_EEEDcSS_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[1].n128_u32[2];
  if (v5 == 1)
  {
    __n128 result = *a3;
    *a2 = *a3;
  }
  else
  {
    if (v5 != -1) {
      ((void (*)(char *, __n128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v5])(&v7, v4);
    }
    v4[1].n128_u32[2] = -1;
    __n128 result = *a3;
    __n128 *v4 = *a3;
    v4[1].n128_u32[2] = 1;
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 24)) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__emplace[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple const&>(a1, a3);
  }
  else {
    return WebCore::SecurityOriginData::Tuple::operator=(a2, a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__emplace[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v4])(&v8, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  uint64_t v5 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v5 += 2;
  }
  *(void *)a1 = v5;
  char v6 = *(_DWORD **)(a2 + 8);
  if (v6) {
    *v6 += 2;
  }
  *(void *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + ++*(_DWORD *)(this + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v5;
    do
    {
      uint64_t v12 = (WTF::StringImpl **)(v4 + 24 * v9);
      uint64_t v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            unsigned int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            unsigned int v19 = 0;
          }
          unsigned int v20 = *((_DWORD *)v13 + 4);
          if (v20 >= 0x100) {
            int v21 = v20 >> 8;
          }
          else {
            int v21 = WTF::StringImpl::hashSlowCase(v13);
          }
          int v22 = 0;
          do
          {
            unsigned int v23 = v21 & v19;
            long long v24 = (WTF::StringImpl **)(v18 + 24 * (v21 & v19));
            int v21 = ++v22 + (v21 & v19);
          }
          while (*v24);
          uint64_t v25 = v18 + 24 * v23;
          uint64_t v28 = *(WTF **)(v25 + 8);
          uint64_t v27 = (void *)(v25 + 8);
          uint64_t v26 = v28;
          if (v28)
          {
            *uint64_t v27 = 0;
            *(_DWORD *)(v18 + 24 * v23 + ++*(_DWORD *)(this + 16) = 0;
            WTF::fastFree(v26, v8);
            uint64_t v29 = *v24;
            *long long v24 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2) {
                WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v8);
              }
              else {
                *(_DWORD *)v29 -= 2;
              }
            }
          }
          else
          {
            *long long v24 = 0;
          }
          uint64_t v30 = *v12;
          *uint64_t v12 = 0;
          *long long v24 = v30;
          uint64_t v31 = v4 + 24 * v9;
          *uint64_t v27 = 0;
          v27[1] = 0;
          uint64_t v33 = *(void *)(v31 + 8);
          uint64_t v32 = v31 + 8;
          *(void *)uint64_t v32 = 0;
          *uint64_t v27 = v33;
          int v34 = *(_DWORD *)(v32 + 8);
          *(_DWORD *)(v32 + 8) = 0;
          uint64_t v35 = v18 + 24 * v23;
          *(_DWORD *)(v35 + ++*(_DWORD *)(this + 16) = v34;
          int v36 = *(_DWORD *)(v32 + 12);
          *(_DWORD *)(v32 + 1objc_destroyWeak(this + 2) = 0;
          *(_DWORD *)(v35 + 20) = v36;
          int8x16x2_t v37 = *(WTF **)v32;
          if (*(void *)v32)
          {
            *(void *)uint64_t v32 = 0;
            *(_DWORD *)(v32 + 8) = 0;
            WTF::fastFree(v37, v8);
          }
          int8x16x2_t v38 = *v12;
          *uint64_t v12 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2) {
              WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v8);
            }
            else {
              *(_DWORD *)v38 -= 2;
            }
          }
          if (v12 == a3) {
            uint64_t v10 = v18 + 24 * v23;
          }
        }
        else
        {
          uint64_t v14 = v4 + 24 * v9;
          uint64_t v17 = *(WTF **)(v14 + 8);
          uint64_t v16 = (void *)(v14 + 8);
          int v15 = v17;
          if (v17)
          {
            void *v16 = 0;
            *(_DWORD *)(v4 + 24 * v9 + ++*(_DWORD *)(this + 16) = 0;
            WTF::fastFree(v15, v8);
            uint64_t v13 = *v12;
          }
          *uint64_t v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v4 = *(_DWORD *)(v2 - 8);
  unsigned int v5 = WTF::computeHash<WebCore::ClientOrigin>(a2) & v4;
  uint64_t v6 = v2 + 72 * v5;
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
  {
LABEL_3:
    uint64_t v7 = *a1;
    if (*a1) {
      return v7 + 72 * *(unsigned int *)(v7 - 4);
    }
    return 0;
  }
  int v9 = 1;
  while (1)
  {
    int v10 = *(_DWORD *)(v6 + 24);
    if (!v10)
    {
      if (*(void *)v6 == -1) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
    if (v10 != 1) {
      break;
    }
LABEL_9:
    if WebCore::operator==() && (WebCore::operator==()) {
      return v6;
    }
LABEL_11:
    unsigned int v5 = (v5 + v9) & v4;
    uint64_t v6 = v2 + 72 * v5;
    ++v9;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>()) {
      goto LABEL_3;
    }
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  return v7 + 72 * *(unsigned int *)(v7 - 4);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v6 = *(_DWORD *)(v3 - 8);
  unsigned int v7 = *((_DWORD *)*a2 + 4);
  int v8 = v7 >= 0x100 ? v7 >> 8 : WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; int v8 = ++i + v10)
  {
    int v10 = v8 & v6;
    uint64_t v11 = (WTF **)(v3 + 24 * (v8 & v6));
    uint64_t v12 = *v11;
    if (*v11 == (WTF *)-1) {
      continue;
    }
    if (!v12) {
      break;
    }
    if (WTF::equal(v12, *a2, a3)) {
      return (uint64_t)v11;
    }
  }
  if (!*a1) {
    return 0;
  }
  return *a1 + 24 * *(unsigned int *)(*a1 - 4);
}

void *WTF::Detail::CallableWrapper<WebCore::MessageWithMessagePorts &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebBroadcastChannelRegistry::PostMessageToRemote,WebKit::NetworkBroadcastChannelRegistry::postMessage(IPC::Connection&,WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkBroadcastChannelRegistry::postMessage(IPC::Connection&,WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkBroadcastChannelRegistry::postMessage(IPC::Connection&,WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)#1},void,WebKit::NetworkBroadcastChannelRegistry::postMessage(IPC::Connection&,WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C3328;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessageWithMessagePorts &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebBroadcastChannelRegistry::PostMessageToRemote,WebKit::NetworkBroadcastChannelRegistry::postMessage(IPC::Connection&,WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkBroadcastChannelRegistry::postMessage(IPC::Connection&,WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkBroadcastChannelRegistry::postMessage(IPC::Connection&,WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)#1},void,WebKit::NetworkBroadcastChannelRegistry::postMessage(IPC::Connection&,WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C3328;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(a1, *(void *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  int v4 = *(uint64_t **)(a2 + 16);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>(a1, v4);

  return IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v4 + 1));
}

uint64_t WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::ClientOrigin>::destruct(*(void *)a1, *(void *)a1 + (v3 << 6));
  }
  int v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WebCore::ClientOrigin>::destruct(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v11 = v2;
    uint64_t v12 = v3;
    uint64_t v5 = result + 32;
    do
    {
      uint64_t v6 = *(unsigned int *)(v5 + 24);
      if (v6 != -1) {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v6])(&v9, v5);
      }
      *(_DWORD *)(v5 + 24) = -1;
      uint64_t v7 = *(unsigned int *)(v5 - 8);
      if (v7 != -1) {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v7])(&v10, v5 - 32);
      }
      *(_DWORD *)(v5 - 8) = -1;
      uint64_t v8 = v5 + 32;
      v5 += 64;
    }
    while (v8 != a2);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(_DWORD *)(a1 - 12)) {
    return a1 + 72 * *(unsigned int *)(a1 - 4);
  }
  return WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::makeIterator(a1, a1);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::makeIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a1) {
    unsigned int v3 = *(_DWORD *)(a1 - 4);
  }
  else {
    unsigned int v3 = 0;
  }
  uint64_t v4 = a1 + 72 * v3;
  if (v4 != a2)
  {
    while (WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(v2))
    {
      v2 += 72;
      if (v2 == v4) {
        return v4;
      }
    }
  }
  return v2;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::isEmptyOrDeletedBucket(uint64_t a1)
{
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>()) {
    return 1;
  }
  int v3 = *(_DWORD *)(a1 + 24);
  if (!v3) {
    return *(void *)a1 == -1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v4 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
  return (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v4);
}

void *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(void *result)
{
  if (!result) {
    return 0;
  }
  uint64_t v1 = *((unsigned int *)result - 1);
  uint64_t v2 = &result[3 * v1];
  if (!*((_DWORD *)result - 3)) {
    return &result[3 * v1];
  }
  if (v1)
  {
    uint64_t v3 = 24 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 3;
      v3 -= 24;
      if (!v3) {
        return v2;
      }
    }
  }
  return result;
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, uint64_t a2)
{
  WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)a2, (WTF::StringImpl *)a2);
  uint64_t result = *(WTF **)(a2 + 8);
  if (result)
  {
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + ++*(_DWORD *)(this + 16) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, v4);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v6 = *a1;
  if (*a1) {
    int v7 = *(_DWORD *)(v6 - 12) - 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(v6 - 1objc_destroyWeak(this + 2) = v7;
  uint64_t v8 = *a1;
  if (*a1)
  {
    unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
    unsigned int v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
    {
      return (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v10 >> 1, 0);
    }
  }
  return result;
}

WebCore::ClientOrigin *WebCore::ClientOrigin::ClientOrigin(WebCore::ClientOrigin *this, const WebCore::ClientOrigin *a2)
{
  *(unsigned char *)this = 0;
  *((_DWORD *)this + 6) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)this, (uint64_t)a2);
  *((unsigned char *)this + 3objc_destroyWeak(this + 2) = 0;
  *((_DWORD *)this + 14) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)this + 32, (uint64_t)a2 + 32);
  return this;
}

uint64_t WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ClientOrigin&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6);
  *(unsigned char *)uint64_t v4 = 0;
  *(_DWORD *)(v4 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v4, v3);
  *(unsigned char *)(v4 + 3objc_destroyWeak(this + 2) = 0;
  v4 += 32;
  *(_DWORD *)(v4 + 24) = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v4, v3 + 32);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 26)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = *(unsigned int *)(result + 12);
      uint64_t result = WTF::fastMalloc((WTF *)(a2 << 6));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v5)
      {
        uint64_t v7 = result;
        uint64_t v8 = v5 << 6;
        uint64_t v9 = (uint64_t)v4 + 32;
        do
        {
          *(unsigned char *)uint64_t v7 = 0;
          *(_DWORD *)(v7 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v7, v9 - 32);
          *(unsigned char *)(v7 + 3objc_destroyWeak(this + 2) = 0;
          uint64_t v10 = v7 + 32;
          *(_DWORD *)(v10 + 24) = -1;
          uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v10, v9);
          uint64_t v11 = *(unsigned int *)(v9 + 24);
          if (v11 != -1) {
            uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v11])(&v13, v9);
          }
          *(_DWORD *)(v9 + 24) = -1;
          uint64_t v12 = *(unsigned int *)(v9 - 8);
          if (v12 != -1) {
            uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v12])(&v14, v9 - 32);
          }
          *(_DWORD *)(v9 - 8) = -1;
          v9 += 64;
          uint64_t v7 = v10 + 32;
          v8 -= 64;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)uint64_t v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,int>@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a1[1];
  BOOL v4 = v3 != 0;
  unint64_t v5 = v3 - 1;
  if (!v4) {
    unint64_t v5 = 0;
  }
  uint64_t v8 = *a1;
  if (v5 >> 31)
  {
    uint64_t result = 124;
    __break(0xC471u);
  }
  else
  {
    int v9 = v5;
    unsigned int v7 = *a2;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((uint64_t)&v8, &v7, a3);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  int v3 = *(_DWORD *)(result + 8);
  uint64_t v4 = *a2;
  if ((v4 & 0x80000000) != 0)
  {
    unsigned int v11 = -(int)v4;
    int v5 = 1;
    do
    {
      ++v5;
      BOOL v7 = v11 >= 0xA;
      v11 /= 0xAu;
    }
    while (v7);
  }
  else
  {
    int v5 = 0;
    unsigned int v6 = *a2;
    do
    {
      ++v5;
      BOOL v7 = v6 >= 9;
      BOOL v8 = v6 == 9;
      v6 /= 0xAu;
    }
    while (!v8 && v7);
  }
  if (((v5 | v3) & 0x80000000) == 0)
  {
    BOOL v9 = __OFADD__(v3, v5);
    uint64_t v10 = (v3 + v5);
    if (!v9) {
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>(v10, 1, *(_OWORD **)result, *(void *)(result + 8), v4, a3);
    }
  }
  *a3 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  int v9 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        unsigned int v11 = v24;
        if (v24)
        {
          uint64_t v12 = v24 + 5;
          *long long v24 = 2;
          v11[1] = v9;
          *((void *)v11 + 1) = v11 + 5;
          v11[4] = 4;
          if (a4)
          {
            if (a4 == 1) {
              *uint64_t v12 = *(unsigned char *)a3;
            }
            else {
              memcpy(v11 + 5, a3, a4);
            }
          }
          uint64_t result = WTF::writeIntegerToBuffer<unsigned char,int>(a5, &v12[a4]);
        }
        goto LABEL_21;
      }
LABEL_11:
      unsigned int v11 = 0;
      goto LABEL_21;
    }
LABEL_12:
    unsigned int v11 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_21;
  }
  if (!result) {
    goto LABEL_12;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_11;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  unsigned int v11 = v24;
  if (v24)
  {
    char v13 = (char *)(v24 + 5);
    *long long v24 = 2;
    v11[1] = v9;
    *((void *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    char v14 = (char *)v11 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      int v15 = &v13[2 * (a4 & 0xFFFFFFC0)];
      long long v16 = 0uLL;
      do
      {
        v25.val[0] = (int8x16_t)*a3;
        int8x16_t v17 = *((int8x16_t *)a3 + 1);
        v26.val[0] = (int8x16_t)a3[2];
        long long v18 = a3[3];
        a3 += 4;
        long long v19 = v18;
        v26.val[1] = 0uLL;
        v27.val[0] = v17;
        v25.val[1] = 0uLL;
        unsigned int v20 = v13;
        vst2q_s8(v20, v25);
        v20 += 32;
        v27.val[1] = 0uLL;
        vst2q_s8(v20, v27);
        int v21 = v13 + 64;
        vst2q_s8(v21, v26);
        int v22 = v13 + 96;
        vst2q_s8(v22, *(int8x16x2_t *)(&v16 - 1));
        v13 += 128;
      }
      while (v13 != v15);
      char v13 = v15;
    }
    while (v13 != v14)
    {
      __int16 v23 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)char v13 = v23;
      v13 += 2;
    }
    LODWORD(v24) = a5;
    uint64_t result = (uint64_t)WTF::StringTypeAdapter<int,void>::writeTo<char16_t>((unsigned int *)&v24, v14);
  }
LABEL_21:
  *a6 = v11;
  return result;
}

WTF::StringImpl ***WTF::RefCounted<WebKit::NetworkSchemeRegistry>::deref(WTF::StringImpl ***this, WTF::StringImpl *a2)
{
  int v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    int v3 = this[1];
    if (v3) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
    }
    return (WTF::StringImpl ***)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

WTF::StringImpl *WTF::Function<void ()(WebCore::RequestStorageAccessResult)>::operator()(uint64_t *a1, __int16 *a2)
{
  uint64_t v2 = *a1;
  __int16 v7 = *a2;
  char v8 = *((unsigned char *)a2 + 2);
  long long v3 = *(_OWORD *)(a2 + 4);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + objc_destroyWeak(this + 2) = 0;
  *(_OWORD *)int v9 = v3;
  (*(void (**)(uint64_t, __int16 *))(*(void *)v2 + 16))(v2, &v7);
  int v5 = v9[1];
  v9[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v9[0];
  v9[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(WebKit::NetworkProcess &,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,IPC::Connection::Identifier)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = qword_1EB358050;
  if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(v3 + 264);
    *(_DWORD *)char v14 = 134218496;
    *(void *)&v14[4] = v3;
    __int16 v15 = 2048;
    uint64_t v16 = v5;
    __int16 v17 = 1024;
    int v18 = a2;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::hasUploadStateChanged: (hasUpload=%d)", v14, 0x1Cu);
  }
  uint64_t v6 = *(void *)(*(void *)(v3 + 80) + 40);
  __int16 v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v7 = 355;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  *(void *)char v14 = v7;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, (uint64_t *)(v3 + 264));
  char v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x198B4A7A4);
  }
  unsigned char *v8 = a2;
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)v14, 0, 0);
  uint64_t result = *(IPC::Encoder **)v14;
  *(void *)char v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

unsigned int *WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v6 = (const void **)(*(void *)a1 + 40);
    uint64_t v7 = 48 * v3;
    do
    {
      char v8 = *v6;
      void *v6 = 0;
      if (v8) {
        CFRelease(v8);
      }
      v6 += 6;
      v7 -= 48;
    }
    while (v7);
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(WebKit::NetworkProcess &,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,IPC::Connection::Identifier)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C3378;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(WebKit::NetworkProcess &,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,IPC::Connection::Identifier)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C3378;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(WebKit::NetworkProcess &,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,IPC::Connection::Identifier)::$_1,void>::call(uint64_t a1)
{
  uint64_t v1 = *(atomic_uint **)(a1 + 8);
  if (v1) {
    atomic_fetch_add(v1, 1u);
  }
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v2 = &unk_1EE9C33A0;
  v2[1] = v1;
  uint64_t v4 = v2;
  WTF::ensureOnMainRunLoop();
  uint64_t result = (uint64_t)v4;
  if (v4) {
    return (*(uint64_t (**)(void *))(*v4 + 8))(v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(WebKit::NetworkProcess &,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,IPC::Connection::Identifier)::$_1::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C33A0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(WebKit::NetworkProcess &,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,IPC::Connection::Identifier)::$_1::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C33A0;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(WebKit::NetworkProcess &,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,IPC::Connection::Identifier)::$_1::operator() const(void)::{lambda(void)#1},void>::call(IPC::Encoder *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(*(void *)(v2 + 32) + 40);
      uint64_t v4 = (uint64_t *)(v2 + 216);
      uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v5 = 361;
      *((void *)v5 + 1) = 0;
      *((void *)v5 + 66) = (char *)v5 + 16;
      *((void *)v5 + 67) = 512;
      *((void *)v5 + 68) = 0;
      *((void *)v5 + 70) = 0;
      *((void *)v5 + 69) = 0;
      IPC::Encoder::encodeHeader(v5);
      uint64_t v9 = v5;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, v4);
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v9, 0, 0);
      uint64_t result = v9;
      uint64_t v9 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v6);
        return (IPC::Encoder *)WTF::fastFree(v7, v8);
      }
    }
  }
  return result;
}

void *WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::begin(void *a1)
{
  if (!a1) {
    return 0;
  }
  if (*((_DWORD *)a1 - 3)) {
    return WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::makeConstIterator((uint64_t)a1, a1);
  }
  return &a1[2 * *((unsigned int *)a1 - 1)];
}

void *WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::makeConstIterator(uint64_t a1, void *a2)
{
  if (a1) {
    uint64_t v3 = *(unsigned int *)(a1 - 4);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (void *)(a1 + 16 * v3);
  if (v4 != a2)
  {
    while (*a2 == -1 || *(_OWORD *)a2 == 0)
    {
      a2 += 2;
      if (a2 == v4) {
        return (void *)(a1 + 16 * v3);
      }
    }
  }
  return a2;
}

void *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::begin(void *result)
{
  if (!result) {
    return 0;
  }
  uint64_t v1 = *((unsigned int *)result - 1);
  uint64_t v2 = &result[2 * v1];
  if (!*((_DWORD *)result - 3)) {
    return &result[2 * v1];
  }
  if (v1)
  {
    uint64_t v3 = 16 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v3 -= 16;
      if (!v3) {
        return v2;
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessConnection::ConnectToRTCDataChannelRemoteSource,WTF::CompletionHandler<void ()(std::optional<BOOL>)>>(WTF::CompletionHandler<void ()(std::optional<BOOL>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C33C8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessConnection::ConnectToRTCDataChannelRemoteSource,WTF::CompletionHandler<void ()(std::optional<BOOL>)>>(WTF::CompletionHandler<void ()(std::optional<BOOL>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C33C8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessConnection::ConnectToRTCDataChannelRemoteSource,WTF::CompletionHandler<void ()(std::optional<BOOL>)>>(WTF::CompletionHandler<void ()(std::optional<BOOL>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && *(void *)a2 && (uint64_t v3 = IPC::Decoder::decode<std::tuple<std::optional<BOOL>>>(a2), (v3 & 0xFF0000) != 0))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, (unsigned __int16)v3);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

void *WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::begin(void *a1)
{
  if (!a1) {
    return 0;
  }
  if (*((_DWORD *)a1 - 3)) {
    return WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::makeConstIterator((uint64_t)a1, a1);
  }
  return &a1[10 * *((unsigned int *)a1 - 1)];
}

void *WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::makeConstIterator(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  if (a1) {
    unsigned int v3 = *(_DWORD *)(a1 - 4);
  }
  else {
    unsigned int v3 = 0;
  }
  uint64_t v4 = (void *)(a1 + 80 * v3);
  if (v4 != a2)
  {
    while ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v2) & 1) != 0
         || *v2 == -1)
    {
      v2 += 10;
      if (v2 == v4) {
        return v4;
      }
    }
  }
  return v2;
}

uint64_t WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  WTF::PairHashTraits<WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::optional<WebCore::SecurityOriginData>>>::emptyValue((uint64_t)&v9);
  if (WTF::equal(*(WTF **)a1, v9, v2))
  {
    if (*(unsigned char *)(a1 + 72)) {
      BOOL v7 = v12 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      uint64_t v4 = (*(unsigned char *)(a1 + 72) != 0) == (v12 != 0);
    }
    else {
      uint64_t v4 = WebCore::operator==();
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (v12)
  {
    if (v11 != -1) {
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v11])(&v8, &v10);
    }
    int v11 = -1;
  }
  uint64_t v5 = v9;
  uint64_t v9 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v4;
}

WTF::StringImpl *WTF::PairHashTraits<WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::optional<WebCore::SecurityOriginData>>>::emptyValue(uint64_t a1)
{
  v4[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v4);
  WTF::URL::URL(a1, (uint64_t *)v4);
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 7objc_destroyWeak(this + 2) = 0;
  uint64_t result = v4[0];
  v4[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::begin(void *a1)
{
  if (!a1) {
    return 0;
  }
  if (*((_DWORD *)a1 - 3)) {
    return WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::makeIterator((uint64_t)a1, a1);
  }
  return &a1[11 * *((unsigned int *)a1 - 1)];
}

void *WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::makeIterator(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  if (a1) {
    unsigned int v3 = *(_DWORD *)(a1 - 4);
  }
  else {
    unsigned int v3 = 0;
  }
  uint64_t v4 = (void *)(a1 + 88 * v3);
  if (v4 != a2)
  {
    while ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v2) & 1) != 0
         || *v2 == -1)
    {
      v2 += 11;
      if (v2 == v4) {
        return v4;
      }
    }
  }
  return v2;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    char v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          int8x16x2_t v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = v26[1];
          v26[1] = 0;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
          *int8x16x2_t v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
          if (v13 == a3) {
            char v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(void *)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    char v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1objc_destroyWeak(this + 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::NetworkSocketChannel>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSocketChannel>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::scheduleResourceLoad(WebKit::NetworkResourceLoadParameters &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C33F0;
  WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)(a1 + 4), a2);
  uint64_t v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::scheduleResourceLoad(WebKit::NetworkResourceLoadParameters &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C33F0;
  WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)(a1 + 4), a2);
  uint64_t v4 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }

  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::scheduleResourceLoad(WebKit::NetworkResourceLoadParameters &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)::$_0,void>::call(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = *(void *)(v2 + 80);
  uint64_t v6 = *(void *)(v2 + 264);
  if (WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(v3 + 136), &v6))
  {
    uint64_t v4 = a1[478];
    uint64_t v5 = a1[479];
    WebKit::NetworkConnectionToWebProcess::scheduleResourceLoad(v2, (uint64_t)(a1 + 4), v4, v5);
  }
}

uint64_t *IPC::Decoder::operator>><std::tuple<BOOL>>(uint64_t *a1, unsigned char *a2)
{
  unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a1);
  if (v4 <= 0xFFu)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v8 = a1[3];
    if (v8 && v7 != 0)
    {
      unsigned __int16 v10 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
      unsigned __int16 v4 = v10;
    }
  }
  if (a2[1] == (unsigned __int16)(v4 & 0xFF00) >> 8)
  {
    if (a2[1]) {
      *a2 = v4;
    }
  }
  else if (a2[1])
  {
    a2[1] = 0;
  }
  else
  {
    *a2 = v4;
    a2[1] = 1;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::loadPing(WebKit::NetworkResourceLoadParameters &&)::$_0,void,WebCore::ResourceError const&,WebKit::NetworkConnectionToWebProcess::loadPing(WebKit::NetworkResourceLoadParameters &&)::$_0::ResourceResponse const&>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C3428;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::loadPing(WebKit::NetworkResourceLoadParameters &&)::$_0,void,WebCore::ResourceError const&,WebKit::NetworkConnectionToWebProcess::loadPing(WebKit::NetworkResourceLoadParameters &&)::$_0::ResourceResponse const&>::~CallableWrapper(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9C3428;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::loadPing(WebKit::NetworkResourceLoadParameters &&)::$_0,void,WebCore::ResourceError const&,WebKit::NetworkConnectionToWebProcess::loadPing(WebKit::NetworkResourceLoadParameters &&)::$_0::ResourceResponse const&>::call(uint64_t a1, WebCore::ResourceError *a2, WebCore::ResourceResponseBase *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (uint64_t *)(a1 + 16);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 308;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v12 = v7;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v7, v6);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v7, a2);
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v7, a3);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  char v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::preconnectTo(std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::NetworkResourceLoadParameters &&)::$_1,void,WebCore::ResourceError const&,WebCore::NetworkLoadMetrics const&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C3478;
  uint64_t v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::preconnectTo(std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::NetworkResourceLoadParameters &&)::$_1,void,WebCore::ResourceError const&,WebCore::NetworkLoadMetrics const&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C3478;
  uint64_t v3 = (_DWORD *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::preconnectTo(std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::NetworkResourceLoadParameters &&)::$_1,void,WebCore::ResourceError const&,WebCore::NetworkLoadMetrics const&>::call(IPC::Encoder *result, WebCore::ResourceError *a2)
{
  if (*((unsigned char *)result + 32)) {
    return WebKit::NetworkConnectionToWebProcess::didFinishPreconnection(*((IPC::Encoder **)result + 1), *((void *)result + 3), a2);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ResourceRequest const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ResourceRequest const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, *(WebCore::ResourceRequest **)a2);
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, *(uint64_t **)(a2 + 8));
  unsigned __int16 v4 = *(uint64_t **)(a2 + 16);

  return IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, v4);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t result = (WTF::StringImpl **)WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1objc_destroyWeak(this + 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

WTF *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  if (!*a1) {
    return 0;
  }
  uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(a1, a2, a3);
  uint64_t v5 = *a1;
  if (!result)
  {
    if (v5) {
      return (WTF *)(v5 + 8 * *(unsigned int *)(v5 - 4));
    }
    else {
      return 0;
    }
  }
  return result;
}

WTF *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  int v5 = *(_DWORD *)(v3 - 8);
  unsigned int v6 = *((_DWORD *)*a2 + 4);
  if (v6 >= 0x100) {
    unsigned int v7 = v6 >> 8;
  }
  else {
    unsigned int v7 = WTF::StringImpl::hashSlowCase(*a2);
  }
  for (i = 0; ; unsigned int v7 = i + v10)
  {
    uint64_t v10 = v7 & v5;
    uint64_t result = *(WTF **)(v3 + 8 * v10);
    if (result != (WTF *)-1)
    {
      if (!result) {
        return result;
      }
      if (WTF::equal(result, *a2, a3)) {
        break;
      }
    }
    ++i;
  }
  return (WTF *)(v3 + 8 * v10);
}

WTF::StringImpl *WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::add(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  if (*a2
    || (WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::hash(a3) & v7;
  uint64_t v9 = (WTF::StringImpl **)(v6 + 80 * v8);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v9) & 1) == 0)
  {
    uint64_t v11 = 0;
    int v12 = 1;
    do
    {
      if (*v9 == (WTF::StringImpl *)-1)
      {
        uint64_t v11 = (uint64_t)v9;
      }
      else
      {
        uint64_t result = (WTF::StringImpl *)WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::equal((uint64_t)v9, a3, v10);
        if (result)
        {
          uint64_t v23 = *a2;
          if (*a2) {
            unsigned int v24 = *(_DWORD *)(v23 - 4);
          }
          else {
            unsigned int v24 = 0;
          }
          char v22 = 0;
          uint64_t v21 = v23 + 80 * v24;
          goto LABEL_24;
        }
      }
      unsigned int v8 = (v8 + v12) & v7;
      uint64_t v9 = (WTF::StringImpl **)(v6 + 80 * v8);
      ++v12;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v9));
    if (v11)
    {
      WTF::PairHashTraits<WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::optional<WebCore::SecurityOriginData>>>::emptyValue(v11);
      --*(_DWORD *)(*a2 - 16);
      uint64_t v9 = (WTF::StringImpl **)v11;
    }
  }
  std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>::pair[abi:sn180100]((uint64_t)v26, a3);
  WTF::URL::operator=((uint64_t)v9, (uint64_t)v26);
  std::__optional_storage_base<WebCore::SecurityOriginData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SecurityOriginData,false>>((WebCore::SecurityOriginData *)(v9 + 5), (uint64_t)v27);
  if (v29)
  {
    if (v28 != -1) {
      ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v28])(&v25, v27);
    }
    int v28 = -1;
  }
  uint64_t result = v26[0];
  v26[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  uint64_t v15 = *a2;
  if (*a2) {
    int v16 = *(_DWORD *)(v15 - 12) + 1;
  }
  else {
    int v16 = 1;
  }
  *(_DWORD *)(v15 - 1objc_destroyWeak(this + 2) = v16;
  uint64_t v17 = *a2;
  if (*a2) {
    int v18 = *(_DWORD *)(v17 - 12);
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = (*(_DWORD *)(v17 - 16) + v18);
  unint64_t v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19) {
      goto LABEL_23;
    }
LABEL_27:
    uint64_t result = (WTF::StringImpl *)WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::expand(a2, v9);
    uint64_t v9 = (WTF::StringImpl **)result;
    uint64_t v17 = *a2;
    if (*a2) {
      LODWORD(v20) = *(_DWORD *)(v17 - 4);
    }
    else {
      LODWORD(v20) = 0;
    }
    goto LABEL_23;
  }
  if (3 * v20 <= 4 * v19) {
    goto LABEL_27;
  }
LABEL_23:
  uint64_t v21 = v17 + 80 * v20;
  char v22 = 1;
LABEL_24:
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v21;
  *(unsigned char *)(a1 + ++*(_DWORD *)(this + 16) = v22;
  return result;
}

uint64_t WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(80 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2)
  {
    uint64_t v11 = a2;
    uint64_t v12 = v7 + 16;
    do
    {
      WTF::PairHashTraits<WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::optional<WebCore::SecurityOriginData>>>::emptyValue(v12);
      v12 += 80;
      --v11;
    }
    while (v11);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v45 = v5;
    do
    {
      uint64_t v15 = (WTF::StringImpl **)(v4 + 80 * v13);
      if (*v15 != (WTF::StringImpl *)-1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(v4 + 80 * v13))
        {
          uint64_t v36 = v4 + 80 * v13;
          if (*(unsigned char *)(v36 + 72))
          {
            uint64_t v37 = v4 + 80 * v13;
            unsigned int v40 = *(_DWORD *)(v37 + 64);
            int8x16x2_t v39 = (_DWORD *)(v37 + 64);
            uint64_t v38 = v40;
            if (v40 != -1) {
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v38])(&v46, v36 + 40);
            }
            *int8x16x2_t v39 = -1;
          }
          char v41 = *v15;
          char *v15 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2) {
              WTF::StringImpl::destroy(v41, v8);
            }
            else {
              *(_DWORD *)v41 -= 2;
            }
          }
        }
        else
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unsigned int v18 = WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::hash(v4 + 80 * v13);
          int v19 = 0;
          do
          {
            unsigned int v20 = v18 & v17;
            uint64_t v21 = (WTF::StringImpl **)(v16 + 80 * (v18 & v17));
            int v23 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v21);
            unsigned int v18 = ++v19 + v20;
          }
          while (!v23);
          uint64_t v24 = v16 + 80 * v20;
          if (*(unsigned char *)(v24 + 72))
          {
            uint64_t v25 = v16 + 80 * v20;
            unsigned int v28 = *(_DWORD *)(v25 + 64);
            uint64_t v27 = (_DWORD *)(v25 + 64);
            uint64_t v26 = v28;
            if (v28 != -1) {
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v26])(&v47, v24 + 40);
            }
            *uint64_t v27 = -1;
          }
          char v29 = *v21;
          char *v21 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, v22);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>::pair[abi:sn180100](v16 + 80 * v20, v4 + 80 * v13);
          uint64_t v30 = v4 + 80 * v13;
          if (*(unsigned char *)(v30 + 72))
          {
            uint64_t v31 = v4 + 80 * v13;
            unsigned int v34 = *(_DWORD *)(v31 + 64);
            uint64_t v33 = (_DWORD *)(v31 + 64);
            uint64_t v32 = v34;
            if (v34 != -1) {
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v32])(&v48, v30 + 40);
            }
            *uint64_t v33 = -1;
          }
          uint64_t v35 = *v15;
          char *v15 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2) {
              WTF::StringImpl::destroy(v35, v8);
            }
            else {
              *(_DWORD *)v35 -= 2;
            }
          }
          if (v15 == a3) {
            uint64_t v14 = v16 + 80 * v20;
          }
        }
      }
      ++v13;
    }
    while (v13 != v45);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v14;
}

uint64_t std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>::pair[abi:sn180100](uint64_t a1, uint64_t a2)
{
  WTF::URL::URL(a1, (uint64_t *)a2);
  *(unsigned char *)(v4 + 40) = 0;
  uint64_t v5 = v4 + 40;
  *(unsigned char *)(v5 + 3objc_destroyWeak(this + 2) = 0;
  if (*(unsigned char *)(a2 + 72))
  {
    *(_DWORD *)(a1 + 64) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v5, a2 + 40);
    *(unsigned char *)(a1 + 7objc_destroyWeak(this + 2) = 1;
  }
  return a1;
}

unint64_t WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::hash(uint64_t a1)
{
  uint64_t v2 = *(WTF::StringImpl **)a1;
  unsigned int v3 = *((_DWORD *)v2 + 4);
  if (v3 >= 0x100) {
    unsigned int v4 = v3 >> 8;
  }
  else {
    unsigned int v4 = WTF::StringImpl::hashSlowCase(v2);
  }
  __int16 v8 = 0;
  char v9 = 0;
  int v5 = *(unsigned __int8 *)(a1 + 72);
  unsigned int v7 = ((v5 - 1640531527) ^ ((v5 - 1640531527) << 16))
     + (((v5 - 1640531527) ^ ((v5 - 1640531527) << 16)) >> 11);
  if (v5) {
    WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v7, a1 + 40);
  }
  return (0xD7862706ELL
        * (unint64_t)(277951225 * v4
                           + 95187966 * WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v7))) >> 4;
}

uint64_t WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::equal(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result = WTF::equal(*(WTF **)a1, *(const WTF::StringImpl **)a2, a3);
  if (result)
  {
    if (*(unsigned char *)(a1 + 72)) {
      BOOL v6 = *(unsigned char *)(a2 + 72) == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      return (*(unsigned char *)(a1 + 72) != 0) == (*(unsigned char *)(a2 + 72) != 0);
    }
    else
    {
      return WebCore::operator==();
    }
  }
  return result;
}

WTF::StringImpl *WTF::hashTraitsDeleteBucket<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 64);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v3])(&v5, a1 + 40);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  uint64_t result = *(WTF::StringImpl **)a1;
  *(void *)a1 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  *(void *)a1 = -1;
  return result;
}

void WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::hash(a3) & v9;
  uint64_t v11 = v8 + 88 * v10;
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(v11) & 1) == 0)
  {
    uint64_t v25 = a4;
    uint64_t v21 = 0;
    int v22 = 1;
    do
    {
      if (*(void *)v11 == -1)
      {
        uint64_t v21 = v11;
      }
      else if (WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::equal(v11, a3, v12))
      {
        uint64_t v23 = *a2;
        if (*a2) {
          unsigned int v24 = *(_DWORD *)(v23 - 4);
        }
        else {
          unsigned int v24 = 0;
        }
        char v20 = 0;
        uint64_t v19 = v23 + 88 * v24;
        goto LABEL_11;
      }
      unsigned int v10 = (v10 + v22) & v9;
      uint64_t v11 = v8 + 88 * v10;
      ++v22;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(v11));
    a4 = v25;
    if (v21)
    {
      WTF::PairHashTraits<WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::optional<WebCore::SecurityOriginData>>>::emptyValue(v21);
      *(_DWORD *)(v21 + 80) = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v11 = v21;
    }
  }
  WTF::URL::operator=(v11, a3);
  std::__optional_storage_base<WebCore::SecurityOriginData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SecurityOriginData,false>>((WebCore::SecurityOriginData *)(v11 + 40), a3 + 40);
  *(_DWORD *)(v11 + 80) = *a4;
  uint64_t v13 = *a2;
  if (*a2) {
    int v14 = *(_DWORD *)(v13 - 12) + 1;
  }
  else {
    int v14 = 1;
  }
  *(_DWORD *)(v13 - 1objc_destroyWeak(this + 2) = v14;
  uint64_t v15 = *a2;
  if (*a2) {
    int v16 = *(_DWORD *)(v15 - 12);
  }
  else {
    int v16 = 0;
  }
  uint64_t v17 = (*(_DWORD *)(v15 - 16) + v16);
  unint64_t v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17) {
      goto LABEL_10;
    }
LABEL_28:
    uint64_t v11 = WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::expand(a2, (void *)v11);
    uint64_t v15 = *a2;
    if (*a2) {
      LODWORD(v18) = *(_DWORD *)(v15 - 4);
    }
    else {
      LODWORD(v18) = 0;
    }
    goto LABEL_10;
  }
  if (3 * v18 <= 4 * v17) {
    goto LABEL_28;
  }
LABEL_10:
  uint64_t v19 = v15 + 88 * v18;
  char v20 = 1;
LABEL_11:
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v19;
  *(unsigned char *)(a1 + ++*(_DWORD *)(this + 16) = v20;
}

uint64_t WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t Table = WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    uint64_t v13 = (void *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v13))
        {
          WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>::~KeyValuePair((uint64_t)v13, v14);
        }
        else
        {
          uint64_t v15 = WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::reinsert(*a1, (uint64_t)v13);
          WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>::~KeyValuePair((uint64_t)v13, v16);
          if (v13 == a3) {
            uint64_t v11 = v15;
          }
        }
      }
      v13 += 11;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::allocateTable(unsigned int a1)
{
  LODWORD(v1) = a1;
  uint64_t v2 = WTF::fastMalloc((WTF *)(88 * a1 + 16));
  uint64_t v3 = v2 + 16;
  if (v1)
  {
    uint64_t v1 = v1;
    int v4 = (_DWORD *)(v2 + 96);
    do
    {
      WTF::PairHashTraits<WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::optional<WebCore::SecurityOriginData>>>::emptyValue((uint64_t)(v4 - 20));
      _DWORD *v4 = 0;
      v4 += 22;
      --v1;
    }
    while (v1);
  }
  return v3;
}

uint64_t WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::reinsert(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(a1, a2);
  uint64_t v5 = WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>::~KeyValuePair(v3, v4);
  uint64_t result = std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>::pair[abi:sn180100](v5, a2);
  *(_DWORD *)(result + 80) = *(_DWORD *)(a2 + 80);
  return result;
}

uint64_t WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(uint64_t a1, uint64_t a2)
{
  if (a1) {
    int v3 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v3 = 0;
  }
  unsigned int v4 = WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::hash(a2);
  int v5 = 0;
  do
  {
    unsigned int v6 = v4 & v3;
    int v7 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(a1 + 88 * (v4 & v3));
    unsigned int v4 = ++v5 + v6;
  }
  while (!v7);
  return a1 + 88 * v6;
}

uint64_t *WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  if (*a1)
  {
    uint64_t v2 = (WTF::StringImpl *)(*a1 + 88 * *(unsigned int *)(*a1 - 4));
    if (v2 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    uint64_t v2 = 0;
  }
  if (v2 != a2) {
    return (uint64_t *)WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::remove(a1, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t result = WTF::hashTraitsDeleteBucket<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1objc_destroyWeak(this + 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WTF::StringImpl *)WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void *WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(void **a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result)
  {
    uint64_t result = WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)result, a2);
    uint64_t v4 = *a1;
    if (!result)
    {
      if (v4) {
        return &v4[11 * *((unsigned int *)v4 - 1)];
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

void *WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 - 8);
  unsigned int v5 = WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::hash(a2) & v4;
  uint64_t v6 = (void *)(a1 + 88 * v5);
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v6)) {
    return 0;
  }
  int v8 = 1;
  while (*v6 == -1
       || (WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::equal((uint64_t)v6, a2, v7) & 1) == 0)
  {
    unsigned int v5 = (v5 + v8) & v4;
    uint64_t v6 = (void *)(a1 + 88 * v5);
    ++v8;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v6)) {
      return 0;
    }
  }
  return v6;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::writeBlobsToTemporaryFilesForIndexedDB(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&)> &&)::$_0,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C34A0;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  int v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::writeBlobsToTemporaryFilesForIndexedDB(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&)> &&)::$_0,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9C34A0;
  uint64_t v3 = *((void *)a1 + 5);
  *((void *)a1 + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  unsigned int v5 = (_DWORD *)*((void *)a1 + 2);
  *((void *)a1 + objc_destroyWeak(this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::writeBlobsToTemporaryFilesForIndexedDB(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&)> &&)::$_0,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(a1 + 36);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)(a1 + 24);
    uint64_t v7 = 8 * v5;
    do
    {
      uint64_t v8 = *v6++;
      (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
      v7 -= 8;
    }
    while (v7);
  }
  uint64_t v9 = *(void *)(v4 + 80);
  uint64_t v15 = *(uint64_t **)(v4 + 88);
  uint64_t v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 224), &v15);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 1048);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v11 + 16));
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v15, (uint64_t **)(v4 + 72));
    WebKit::NetworkStorageManager::registerTemporaryBlobFilePaths(v11, (uint64_t)v15, a2);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v15);
    if (v11) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 16), v12);
    }
  }
  uint64_t v13 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v13 + 16))(v13, a2);
  return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
}

uint64_t WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> &>(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 <= v4 + 1) {
    unint64_t v7 = v4 + 1;
  }
  else {
    unint64_t v7 = v6;
  }
  WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  uint64_t v8 = *(void *)a1 + 48 * *(unsigned int *)(a1 + 12);
  *(void *)uint64_t v8 = *a2;
  *(void *)(v8 + 8) = 0;
  *(unsigned char *)(v8 + ++*(_DWORD *)(this + 16) = 1;
  *(void *)(v8 + 24) = 0x100000010;
  *(unsigned char *)(v8 + 3objc_destroyWeak(this + 2) = 0;
  uint64_t result = nw_activity_create();
  *(void *)(v8 + 40) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x198B4CC68);
    }
    uint64_t v3 = *(long long **)a1;
    uint64_t v4 = (long long *)(*(void *)a1 + 48 * *(unsigned int *)(a1 + 12));
    int v5 = 48 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker>::move(v3, v4, v6);
    if (v3)
    {
      if (*(long long **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
}

void WTF::VectorMover<false,WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker>::move(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    int v5 = a1;
    do
    {
      long long v6 = *v5;
      *(unsigned char *)(a3 + ++*(_DWORD *)(this + 16) = *((unsigned char *)v5 + 16);
      *(_OWORD *)a3 = v6;
      uint64_t v7 = *((void *)v5 + 3);
      *(unsigned char *)(a3 + 3objc_destroyWeak(this + 2) = *((unsigned char *)v5 + 32);
      *(void *)(a3 + 24) = v7;
      uint64_t v8 = (const void *)*((void *)v5 + 5);
      *(void *)(a3 + 40) = v8;
      if (v8) {
        CFRetain(v8);
      }
      uint64_t v9 = (const void *)*((void *)v5 + 5);
      *((void *)v5 + 5) = 0;
      if (v9) {
        CFRelease(v9);
      }
      v5 += 3;
      a3 += 48;
    }
    while (v5 != a2);
  }
}

uint64_t WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> &,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> &>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v7 >= 0x10) {
    unint64_t v8 = v7 + 1;
  }
  else {
    unint64_t v8 = 16;
  }
  if (v8 <= v6 + 1) {
    unint64_t v9 = v6 + 1;
  }
  else {
    unint64_t v9 = v8;
  }
  WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v9);
  uint64_t v10 = *(void *)a1 + 48 * *(unsigned int *)(a1 + 12);
  uint64_t v11 = *a3;
  *(void *)uint64_t v10 = *a2;
  *(void *)(v10 + 8) = v11;
  *(unsigned char *)(v10 + ++*(_DWORD *)(this + 16) = 0;
  *(void *)(v10 + 24) = 0x200000010;
  *(unsigned char *)(v10 + 3objc_destroyWeak(this + 2) = 0;
  uint64_t result = nw_activity_create();
  *(void *)(v10 + 40) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void WTF::VectorMover<false,WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker>::moveOverlapping(long long *a1, long long *a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if ((unint64_t)a1 <= a3)
  {
    if (a2 != a1)
    {
      uint64_t v5 = a3 + 48 * (((char *)a2 - (char *)a1) / 48) - 24;
      do
      {
        long long v6 = *(v3 - 3);
        *(unsigned char *)(v5 - 8) = *((unsigned char *)v3 - 32);
        *(_OWORD *)(v5 - 24) = v6;
        uint64_t v7 = *((void *)v3 - 3);
        *(unsigned char *)(v5 + 8) = *((unsigned char *)v3 - 16);
        *(void *)uint64_t v5 = v7;
        unint64_t v8 = (const void *)*((void *)v3 - 1);
        *(void *)(v5 + ++*(_DWORD *)(this + 16) = v8;
        if (v8) {
          CFRetain(v8);
        }
        unint64_t v9 = (const void *)*((void *)v3 - 1);
        *((void *)v3 - 1) = 0;
        if (v9) {
          CFRelease(v9);
        }
        v3 -= 3;
        v5 -= 48;
      }
      while (v3 != a1);
    }
  }
  else
  {
    WTF::VectorMover<false,WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker>::move(a1, a2, a3);
  }
}

WTF *WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, void *a2)
{
  if (*((_DWORD *)result + 2))
  {
    uint64_t v2 = result;
    uint64_t v3 = *((unsigned int *)result + 3);
    if (v3)
    {
      uint64_t v4 = (const void **)(*(void *)result + 40);
      uint64_t v5 = 48 * v3;
      do
      {
        long long v6 = *v4;
        long long *v4 = 0;
        if (v6) {
          CFRelease(v6);
        }
        v4 += 6;
        v5 -= 48;
      }
      while (v5);
      *((_DWORD *)v2 + 3) = 0;
    }
    uint64_t result = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *((_DWORD *)v2 + objc_destroyWeak(this + 2) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

_DWORD *WTF::RefCounted<WebCore::SWServer>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    uint64_t v1 = (WTF *)MEMORY[0x19973B690]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::add@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  int v27 = -1640531527;
  __int16 v28 = 0;
  char v29 = 0;
  WTF::add<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PortIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&v27, a2, a2 + 1);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27);
  unsigned int v9 = result & v7;
  uint64_t v10 = (void *)(v6 + 16 * (result & v7));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (*(_OWORD *)v10 != 0)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    do
    {
      if (v11 == v13 && v12 == v14)
      {
        uint64_t v25 = *a1;
        if (*a1) {
          uint64_t v26 = *(unsigned int *)(v25 - 4);
        }
        else {
          uint64_t v26 = 0;
        }
        char v24 = 0;
        uint64_t v23 = v25 + 16 * v26;
        goto LABEL_19;
      }
      if (v11 == -1) {
        uint64_t v15 = v10;
      }
      unsigned int v9 = (v9 + v16) & v7;
      uint64_t v10 = (void *)(v6 + 16 * v9);
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      ++v16;
    }
    while (*(_OWORD *)v10 != 0);
    if (v15)
    {
      void *v15 = 0;
      v15[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v13 = *a2;
      uint64_t v14 = a2[1];
      uint64_t v10 = v15;
    }
  }
  *uint64_t v10 = v13;
  v10[1] = v14;
  uint64_t v17 = *a1;
  if (*a1) {
    int v18 = *(_DWORD *)(v17 - 12) + 1;
  }
  else {
    int v18 = 1;
  }
  *(_DWORD *)(v17 - 1objc_destroyWeak(this + 2) = v18;
  uint64_t v19 = *a1;
  if (*a1) {
    int v20 = *(_DWORD *)(v19 - 12);
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
  unint64_t v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21) {
      goto LABEL_18;
    }
LABEL_23:
    uint64_t result = WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand(a1, (uint64_t)v10);
    uint64_t v10 = (void *)result;
    uint64_t v19 = *a1;
    if (*a1) {
      unint64_t v22 = *(unsigned int *)(v19 - 4);
    }
    else {
      unint64_t v22 = 0;
    }
    goto LABEL_18;
  }
  if (3 * v22 <= 4 * v21) {
    goto LABEL_23;
  }
LABEL_18:
  uint64_t v23 = v19 + 16 * v22;
  char v24 = 1;
LABEL_19:
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v23;
  *(unsigned char *)(a3 + ++*(_DWORD *)(this + 16) = v24;
  return result;
}

uint64_t WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(a1, v5, a2);
}

uint64_t WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::DefaultHash<WebCore::MessagePortIdentifier>>::hash<WebCore::MessagePortIdentifier>(void *a1)
{
  int v2 = -1640531527;
  __int16 v3 = 0;
  char v4 = 0;
  WTF::add<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PortIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&v2, a1, a1 + 1);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v2);
}

uint64_t WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v6 + 16 * v13;
      if (*(void *)v15 != -1 && *(_OWORD *)v15 != 0)
      {
        uint64_t v16 = *a1;
        if (*a1) {
          unsigned int v17 = *(_DWORD *)(v16 - 8);
        }
        else {
          unsigned int v17 = 0;
        }
        int v22 = -1640531527;
        __int16 v23 = 0;
        char v24 = 0;
        WTF::add<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PortIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&v22, (void *)(v6 + 16 * v13), (void *)(v15 + 8));
        int v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v22);
        int v19 = 0;
        do
        {
          uint64_t v20 = v18 & v17;
          int v18 = ++v19 + v20;
        }
        while (*(_OWORD *)(v16 + 16 * v20) != 0);
        *(_OWORD *)(v16 + 16 * v20) = *(_OWORD *)v15;
        if (v15 == a3) {
          uint64_t v14 = v16 + 16 * v20;
        }
      }
      ++v13;
    }
    while (v13 != v7);
    goto LABEL_16;
  }
  uint64_t v14 = 0;
  uint64_t result = 0;
  if (v6)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v14;
  }
  return result;
}

_DWORD *WTF::add<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PortIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(_DWORD *result, void *a2, void *a3)
{
  int v3 = *result + (unsigned __int16)*a2;
  unsigned int v4 = (*a2 >> 5) & 0x7FFF800 ^ (v3 << 16) ^ v3;
  int v5 = v4 + (unsigned __int16)WORD2(*a2) + (v4 >> 11);
  unsigned int v6 = (*a2 >> 37) & 0x7FFF800 ^ (v5 << 16) ^ v5;
  int v7 = v6 + (unsigned __int16)*a3 + (v6 >> 11);
  unsigned int v8 = (*a3 >> 5) & 0x7FFF800 ^ (v7 << 16) ^ v7;
  int v9 = v8 + (unsigned __int16)WORD2(*a3) + (v8 >> 11);
  int v10 = (*a3 >> 37) & 0x7FFF800 ^ (v9 << 16);
  void *result = (v10 ^ v9) + ((v10 ^ v9) >> 11);
  return result;
}

_DWORD *WTF::RefCounted<WebCore::MessagePortChannel>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    uint64_t v1 = (WTF *)MEMORY[0x199734260]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::remove(uint64_t *result, void *a2)
{
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 1objc_destroyWeak(this + 2) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return (uint64_t *)WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  int v6 = WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::DefaultHash<WebCore::MessagePortIdentifier>>::hash<WebCore::MessagePortIdentifier>(a2);
  uint64_t v7 = a2[1];
  uint64_t v8 = v6 & v5;
  int v9 = (uint64_t *)(v2 + 16 * v8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (*v9 == *a2 && v11 == v7) {
    return v2 + 16 * v8;
  }
  int v13 = 1;
  while (v10 | v11)
  {
    uint64_t v8 = (v8 + v13) & v5;
    uint64_t v14 = (uint64_t *)(v2 + 16 * v8);
    uint64_t v10 = *v14;
    uint64_t v11 = v14[1];
    ++v13;
    if (v10 == *a2 && v11 == v7) {
      return v2 + 16 * v8;
    }
  }
  if (*a1) {
    return *a1 + 16 * *(unsigned int *)(*a1 - 4);
  }
  else {
    return 0;
  }
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v7;
    do
    {
      uint64_t v16 = (uint64_t *)(v6 + 16 * v13);
      uint64_t v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          uint64_t v20 = *a1;
          if (*a1) {
            int v21 = *(_DWORD *)(v20 - 8);
          }
          else {
            int v21 = 0;
          }
          unint64_t v22 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          unsigned int v25 = v21 & ((v24 >> 31) ^ v24);
          int v26 = 1;
          do
          {
            unsigned int v27 = v25;
            uint64_t v28 = *(void *)(v20 + 16 * v25);
            unsigned int v25 = (v25 + v26++) & v21;
          }
          while (v28);
          char v29 = (uint64_t *)(v20 + 16 * v27);
          uint64_t v30 = v29[1];
          v29[1] = 0;
          if (v30) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
          *char v29 = *v16;
          uint64_t v31 = v6 + 16 * v13;
          uint64_t v32 = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = 0;
          v29[1] = v32;
          uint64_t v33 = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = 0;
          if (v33) {
            (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
          }
          if (v16 == a3) {
            uint64_t v14 = v29;
          }
        }
        else
        {
          uint64_t v18 = v6 + 16 * v13;
          uint64_t v19 = *(void *)(v18 + 8);
          *(void *)(v18 + 8) = 0;
          if (v19) {
            (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)> &&)::$_0,void,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::CompletionHandler<void ()(void)> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C34F0;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)> &&)::$_0,void,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::CompletionHandler<void ()(void)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C34F0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (_DWORD *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)> &&)::$_0,void,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::CompletionHandler<void ()(void)> &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (uint64_t *)(*(void *)(a1 + 8) + 280);
  ++WebKit::NetworkConnectionToWebProcess::nextMessageBatchIdentifier(WTF::CompletionHandler<void ()(void)> &&)::currentMessageBatchIdentifier;
  uint64_t v7 = *v6;
  if (*v6
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v6, 0), (uint64_t v7 = *v6) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  uint64_t v9 = WebKit::NetworkConnectionToWebProcess::nextMessageBatchIdentifier(WTF::CompletionHandler<void ()(void)> &&)::currentMessageBatchIdentifier;
  unint64_t v10 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
  unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  uint64_t v14 = (uint64_t *)(v7 + 16 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    uint64_t v28 = 0;
    int v29 = 1;
    while (v15 != WebKit::NetworkConnectionToWebProcess::nextMessageBatchIdentifier(WTF::CompletionHandler<void ()(void)> &&)::currentMessageBatchIdentifier)
    {
      if (v15 == -1) {
        uint64_t v28 = v14;
      }
      unsigned int v13 = (v13 + v29) & v8;
      uint64_t v14 = (uint64_t *)(v7 + 16 * v13);
      uint64_t v15 = *v14;
      ++v29;
      if (!*v14)
      {
        if (v28)
        {
          *uint64_t v28 = 0;
          v28[1] = 0;
          --*(_DWORD *)(*v6 - 16);
          uint64_t v14 = v28;
        }
        goto LABEL_4;
      }
    }
  }
  else
  {
LABEL_4:
    uint64_t v16 = *a3;
    *a3 = 0;
    uint64_t v17 = v14[1];
    *uint64_t v14 = v9;
    v14[1] = v16;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    uint64_t v18 = *v6;
    if (*v6) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v18 - 1objc_destroyWeak(this + 2) = v19;
    uint64_t v20 = *v6;
    if (*v6) {
      int v21 = *(_DWORD *)(v20 - 12);
    }
    else {
      int v21 = 0;
    }
    uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
    unint64_t v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22) {
        goto LABEL_12;
      }
    }
    else if (3 * v23 > 4 * v22)
    {
      goto LABEL_12;
    }
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v6, v14);
  }
LABEL_12:
  uint64_t v24 = WebKit::NetworkConnectionToWebProcess::nextMessageBatchIdentifier(WTF::CompletionHandler<void ()(void)> &&)::currentMessageBatchIdentifier;
  uint64_t v25 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v25 + 16))(v25, a2, v24);
  int v26 = *(uint64_t (**)(uint64_t))(*(void *)v25 + 8);

  return v26(v25);
}

uint64_t *WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = (void *)*a1;
  if (*a1) {
    v3 += 2 * *((unsigned int *)v3 - 1);
  }
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  uint64_t v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    unsigned int v5 = (void *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    unsigned int v5 = 0;
  }
  if (v5 != a2) {
    return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(a1, a2);
  }
  return a1;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1objc_destroyWeak(this + 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::tuple<JSC::MessageSource,JSC::MessageLevel,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<JSC::MessageSource,JSC::MessageLevel,WTF::String const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<JSC::MessageSource,void>::encode<IPC::Encoder>(a1, *(unsigned char *)a2);
  IPC::ArgumentCoder<JSC::MessageSource,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 1));
  uint64_t v4 = *(uint64_t **)(a2 + 8);

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Vector<WebKit::NetworkLoad *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::NetworkLoad *>(uint64_t a1, unint64_t a2)
{
  uint64_t result = (void *)WTF::Vector<WebKit::NetworkLoad *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  *(void *)(*(void *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 1objc_destroyWeak(this + 2) = v4 + 1;
  return result;
}

unint64_t WTF::Vector<WebKit::NetworkLoad *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  int v5 = *(void **)a1;
  if (*(void *)a1 <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(a1 + 12) > a3)
  {
    unint64_t v9 = a3 - (void)v5;
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(void *)a1 + v9;
  }
  else
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10) {
      unint64_t v7 = v6 + 1;
    }
    else {
      unint64_t v7 = 16;
    }
    if (v7 > a2) {
      a2 = v7;
    }
    WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  return v3;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::navigatorSubscribeToPushService(WTF::URL &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,std::experimental::fundamentals_v3::ExceptionData> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::ExceptionData>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C3518;
  unint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  int v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::navigatorSubscribeToPushService(WTF::URL &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,std::experimental::fundamentals_v3::ExceptionData> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::ExceptionData>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C3518;
  unint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  int v5 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::navigatorSubscribeToPushService(WTF::URL &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,std::experimental::fundamentals_v3::ExceptionData> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::ExceptionData>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)(v5 + 32);
  v18[0] = *(void *)(v5 + 40);
  if (!WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 224), v18))goto LABEL_16; {
  uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 8);
  }
  uint64_t v8 = v7 ? v7 - 48 : 0;
  uint64_t v9 = *(void *)(v8 + 80);
  v18[0] = *(void *)(v8 + 88);
  uint64_t v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 224), v18);
  if (!*(_DWORD *)(a2 + 80) && (uint64_t v11 = *(void *)(v10 + 72)) != 0)
  {
    LOBYTE(v18[0]) = 0;
    int v19 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>((uint64_t)v18, a2);
    uint64_t v12 = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    uint64_t v20 = v12;
    uint64_t v13 = WTF::fastMalloc((WTF *)0x68);
    *(void *)uint64_t v13 = &unk_1EE9C3550;
    *(unsigned char *)(v13 + 8) = 0;
    *(_DWORD *)(v13 + 88) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(v13 + 8, (uint64_t)v18);
    uint64_t v14 = v20;
    uint64_t v20 = 0;
    *(void *)(v13 + 96) = v14;
    uint64_t v21 = v13;
    WebKit::WebResourceLoadStatisticsStore::setMostRecentWebPushInteractionTime(v11, a1 + 24, &v21);
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    uint64_t result = v20;
    uint64_t v20 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    if (v19 != -1) {
      return ((uint64_t (*)(char *, void *))off_1EE9C3200[v19])(&v22, v18);
    }
  }
  else
  {
LABEL_16:
    uint64_t v16 = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, a2);
    uint64_t v17 = *(uint64_t (**)(uint64_t))(*(void *)v16 + 8);
    return v17(v16);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 80);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9C3200[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 80) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 80);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9C3530[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 80) = v5;
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS8_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  *(void *)&double result = std::__variant_detail::__alt<0ul,WebCore::PushSubscriptionData>::__alt[abi:sn180100]<WebCore::PushSubscriptionData>(a2, a3).n128_u64[0];
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS8_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = *(unsigned char *)a3;
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a2 + 8) = v3;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::navigatorSubscribeToPushService(WTF::URL &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,std::experimental::fundamentals_v3::ExceptionData> &&)> &&)::$_0::operator()(std::experimental::fundamentals_v3::ExceptionData)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9C3550;
  uint64_t v2 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 88);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9C3200[v3])(&v5, a1 + 8);
  }
  *(_DWORD *)(a1 + 88) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::navigatorSubscribeToPushService(WTF::URL &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,std::experimental::fundamentals_v3::ExceptionData> &&)> &&)::$_0::operator()(std::experimental::fundamentals_v3::ExceptionData)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C3550;
  uint64_t v3 = *((void *)this + 12);
  *((void *)this + 1objc_destroyWeak(this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((unsigned int *)this + 22);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1EE9C3200[v4])(&v6, (char *)this + 8);
  }
  *((_DWORD *)this + 2objc_destroyWeak(this + 2) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::navigatorSubscribeToPushService(WTF::URL &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,std::experimental::fundamentals_v3::ExceptionData> &&)> &&)::$_0::operator()(std::experimental::fundamentals_v3::ExceptionData)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 8);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::navigatorGetPushPermissionState(WTF::URL &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected::PushPermissionState>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C3578;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::navigatorGetPushPermissionState(WTF::URL &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected::PushPermissionState>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C3578;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::navigatorGetPushPermissionState(WTF::URL &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected::PushPermissionState>::call(uint64_t a1, char a2)
{
  v4[0] = a2;
  int v5 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v5 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9C3230[v5])(&v6, v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::initializeWebTransportSession(WTF::URL &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_0,void,WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess::initializeWebTransportSession(WTF::URL &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_0>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess::initializeWebTransportSession(WTF::URL &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_0>> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C35A0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::initializeWebTransportSession(WTF::URL &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_0,void,WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess::initializeWebTransportSession(WTF::URL &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_0>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess::initializeWebTransportSession(WTF::URL &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_0>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C35A0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::initializeWebTransportSession(WTF::URL &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_0,void,WTF::RefPtr<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess::initializeWebTransportSession(WTF::URL &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_0>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess::initializeWebTransportSession(WTF::URL &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)::$_0>> &&>::call(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (!*a2 || (uint64_t v4 = a1[2]) == 0 || !*(void *)(v4 + 8))
  {
    uint64_t v18 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t, void, void))(*(void *)v18 + 16))(v18, 0, 0);
    goto LABEL_33;
  }
  uint64_t v5 = *(void *)(v3 + 32);
  char v6 = (uint64_t *)(a1[1] + 368);
  *a2 = 0;
  uint64_t v7 = *v6;
  if (*v6
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, 0), (uint64_t v7 = *v6) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unint64_t v9 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
  unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  unsigned int v12 = v8 & ((v11 >> 31) ^ v11);
  uint64_t v13 = (uint64_t *)(v7 + 16 * v12);
  uint64_t v14 = *v13;
  if (*v13)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    while (v14 != v5)
    {
      if (v14 == -1) {
        uint64_t v15 = v13;
      }
      unsigned int v12 = (v12 + v16) & v8;
      uint64_t v13 = (uint64_t *)(v7 + 16 * v12);
      uint64_t v14 = *v13;
      ++v16;
      if (!*v13)
      {
        if (v15)
        {
          uint64_t *v15 = 0;
          v15[1] = 0;
          --*(_DWORD *)(*v6 - 16);
          uint64_t v13 = v15;
        }
        goto LABEL_15;
      }
    }
    int v19 = (_DWORD *)v13[1];
    v13[1] = v3;
    if (v19)
    {
      if (v19[4] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v19 + 8))(v19);
      }
      else {
        --v19[4];
      }
    }
    goto LABEL_32;
  }
LABEL_15:
  uint64_t v17 = (_DWORD *)v13[1];
  *uint64_t v13 = v5;
  v13[1] = v3;
  if (v17)
  {
    if (v17[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v17 + 8))(v17);
    }
    else {
      --v17[4];
    }
  }
  uint64_t v20 = *v6;
  if (*v6) {
    int v21 = *(_DWORD *)(v20 - 12) + 1;
  }
  else {
    int v21 = 1;
  }
  *(_DWORD *)(v20 - 1objc_destroyWeak(this + 2) = v21;
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
  unint64_t v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (3 * v25 <= 4 * v24) {
LABEL_31:
  }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v13);
LABEL_32:
  uint64_t v18 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v5, 1);
LABEL_33:
  int v26 = *(uint64_t (**)(uint64_t))(*(void *)v18 + 8);

  return v26(v18);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unsigned int v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          int v26 = (uint64_t *)(v17 + 16 * v24);
          unsigned int v27 = (_DWORD *)v26[1];
          v26[1] = 0;
          if (v27)
          {
            if (v27[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v27 + 8))(v27);
            }
            else {
              --v27[4];
            }
          }
          *int v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(_DWORD **)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30)
          {
            if (v30[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v30 + 8))(v30);
            }
            else {
              --v30[4];
            }
          }
          if (v13 == a3) {
            unsigned int v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          int v16 = *(_DWORD **)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16)
          {
            if (v16[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v16 + 8))(v16);
            }
            else {
              --v16[4];
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unsigned int v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (uint64_t *)WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>>::customDeleteBucket(a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1objc_destroyWeak(this + 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

_DWORD *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkTransportSession,WTF::RawPtrTraits<WebKit::NetworkTransportSession>,WTF::DefaultRefDerefTraits<WebKit::NetworkTransportSession>>>>::customDeleteBucket(void *a1)
{
  uint64_t result = (_DWORD *)a1[1];
  *a1 = -1;
  a1[1] = 0;
  if (result)
  {
    if (result[4] == 1) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
    else {
      --result[4];
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)uint64_t v4 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  unsigned int v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v7;
  if (v6)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      unsigned int v12 = (uint64_t *)(v5 + 24 * v10);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            unsigned int v22 = (uint64_t *)(v14 + 24 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (*v22);
          uint64_t v23 = v14 + 24 * v21;
          WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23 + 8, v9);
          uint64_t *v22 = *v12;
          uint64_t v24 = v5 + 24 * v10;
          *(void *)(v23 + 8) = 0;
          *(void *)(v23 + ++*(_DWORD *)(this + 16) = 0;
          uint64_t v25 = *(void *)(v24 + 8);
          v24 += 8;
          *(void *)uint64_t v24 = 0;
          *(void *)(v23 + 8) = v25;
          int v26 = *(_DWORD *)(v24 + 8);
          *(_DWORD *)(v24 + 8) = 0;
          *(_DWORD *)(v23 + ++*(_DWORD *)(this + 16) = v26;
          int v27 = *(_DWORD *)(v24 + 12);
          *(_DWORD *)(v24 + 1objc_destroyWeak(this + 2) = 0;
          *(_DWORD *)(v23 + 20) = v27;
          WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v24, v28);
          if (v12 == a3) {
            uint64_t v11 = v22;
          }
        }
        else
        {
          WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 24 * v10 + 8, v9);
        }
      }
      ++v10;
    }
    while (v10 != v6);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

unint64_t WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      int v4 = *(WTF **)result;
      uint64_t v5 = result[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = v2;
      *(void *)unint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = result;
        uint64_t v8 = 8 * v5;
        unint64_t v9 = (unsigned int **)v4;
        do
        {
          unint64_t v10 = *v9;
          *unint64_t v9 = 0;
          *(void *)unint64_t v7 = v10;
          uint64_t result = *v9;
          *unint64_t v9 = 0;
          if (result) {
            uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
          }
          v7 += 2;
          ++v9;
          v8 -= 8;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)unint64_t v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 16 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          uint64_t v24 = v15 + 16 * v22;
          std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>::reset[abi:sn180100]((WTF::StringImpl ****)(v24 + 8), 0);
          *(void *)uint64_t v24 = *v13;
          uint64_t v25 = v6 + 16 * v11;
          uint64_t v26 = *(void *)(v25 + 8);
          v25 += 8;
          *(void *)uint64_t v25 = 0;
          *(void *)(v24 + 8) = v26;
          std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>::reset[abi:sn180100]((WTF::StringImpl ****)v25, 0);
          if (v13 == a3) {
            uint64_t v12 = v24;
          }
        }
        else
        {
          std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>::reset[abi:sn180100]((WTF::StringImpl ****)(v6 + 16 * v11 + 8), 0);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WTF::StringImpl ****WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(uint64_t *a1, uint64_t a2)
{
  *(void *)a2 = -1;
  uint64_t result = std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>::reset[abi:sn180100]((WTF::StringImpl ****)(a2 + 8), 0);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1objc_destroyWeak(this + 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WTF::StringImpl ****)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void sub_198B4FAAC(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198B50C84(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198B50D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CFRelease(*(CFTypeRef *)(v3 + 8));
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

void sub_198B50E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CFRelease(*(CFTypeRef *)(v3 + 8));
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

void sub_198B52C80(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_198B52E48(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  _Unwind_Resume(exception_object);
}

void didNavigateWithNavigationData(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (*(unsigned char *)([a4 _apiObject] + 441))
  {
    uint64_t v6 = +[WKBrowsingContextController _browsingContextControllerForPageRef:a2];
    id WeakRetained = objc_loadWeakRetained(v6 + 1);
    if (objc_opt_respondsToSelector()) {
      objc_msgSend(WeakRetained, "browsingContextController:didNavigateWithNavigationData:", v6, *(void *)(objc_msgSend(a3, "_apiObject") + 8));
    }
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198B53008(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didPerformClientRedirect(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  if (*(unsigned char *)([a5 _apiObject] + 441))
  {
    unsigned int v8 = +[WKBrowsingContextController _browsingContextControllerForPageRef:a2];
    id WeakRetained = objc_loadWeakRetained(v8 + 1);
    if (objc_opt_respondsToSelector()) {
      objc_msgSend(WeakRetained, "browsingContextController:didPerformClientRedirectFromURL:toURL:", v8, *(void *)(objc_msgSend(a3, "_apiObject") + 8), *(void *)(objc_msgSend(a4, "_apiObject") + 8));
    }
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198B530E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didPerformServerRedirect(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  if (*(unsigned char *)([a5 _apiObject] + 441))
  {
    unsigned int v8 = +[WKBrowsingContextController _browsingContextControllerForPageRef:a2];
    id WeakRetained = objc_loadWeakRetained(v8 + 1);
    if (objc_opt_respondsToSelector()) {
      objc_msgSend(WeakRetained, "browsingContextController:didPerformServerRedirectFromURL:toURL:", v8, *(void *)(objc_msgSend(a3, "_apiObject") + 8), *(void *)(objc_msgSend(a4, "_apiObject") + 8));
    }
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198B531B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didUpdateHistoryTitle(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  if (*(unsigned char *)([a5 _apiObject] + 441))
  {
    unsigned int v8 = +[WKBrowsingContextController _browsingContextControllerForPageRef:a2];
    id WeakRetained = objc_loadWeakRetained(v8 + 1);
    if (objc_opt_respondsToSelector()) {
      objc_msgSend(WeakRetained, "browsingContextController:didUpdateHistoryTitle:forURL:", v8, *(void *)(objc_msgSend(a3, "_apiObject") + 8), *(void *)(objc_msgSend(a4, "_apiObject") + 8));
    }
    if (WeakRetained)
    {
      CFRelease(WeakRetained);
    }
  }
}

void sub_198B53290(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkDataTask::NetworkDataTask(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceRequestBase *a4, char a5, char a6, char a7)
{
  uint64_t v14 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v14 = 0;
  *(_OWORD *)(v14 + 8) = xmmword_1994F5F10;
  *(void *)(v14 + 24) = a1;
  *(void *)a1 = &unk_1EE9C35C8;
  *(void *)(a1 + 8) = v14;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  uint64_t v15 = *(atomic_uint **)(a2 + 8);
  if (v15) {
    atomic_fetch_add(v15, 1u);
  }
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = v15;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  int v16 = *(atomic_uint **)(a3 + 8);
  if (v16) {
    atomic_fetch_add(v16, 1u);
  }
  *(void *)(a1 + 24) = v16;
  *(_OWORD *)(a1 + 3objc_destroyWeak(this + 2) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  unint64_t v17 = (_DWORD *)*((void *)a4 + 20);
  if (v17) {
    *v17 += 2;
  }
  *(void *)(a1 + 64) = v17;
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)(a1 + 72));
  *(void *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = a5;
  unint64_t v18 = *(_DWORD **)WebCore::ResourceRequestBase::httpMethod(a4);
  if (v18) {
    *v18 += 2;
  }
  *(void *)(a1 + 11objc_destroyWeak(this + 2) = v18;
  *(void *)(a1 + 120) = 0;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(a1 + 128), (const String *)a4);
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 328));
  *(unsigned char *)(a1 + 528) = a6;
  *(void *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 544) = a7;
  *(unsigned char *)(a1 + 545) = 0;
  if ((*(unsigned char *)(WebCore::ResourceRequestBase::url(a4) + 8) & 1) == 0)
  {
    uint64_t v26 = a1;
    char v27 = 1;
    goto LABEL_19;
  }
  unint64_t v19 = (WTF *)WebCore::ResourceRequestBase::url(a4);
  if (!WTF::portAllowed(v19, v20)
    || (int v21 = (WebCore *)WebCore::ResourceRequestBase::url(a4), WebCore::isIPAddressDisallowed(v21, v22)))
  {
    uint64_t v26 = a1;
    char v27 = 0;
LABEL_19:
    WebKit::NetworkDataTask::scheduleFailure(v26, v27);
    return a1;
  }
  if (!*(unsigned char *)(*(void *)(a2 + 32) + 409))
  {
    uint64_t v23 = (WTF::URL *)WebCore::ResourceRequestBase::url(a4);
    if (WTF::URL::protocolIsInFTPFamily(v23))
    {
      uint64_t v26 = a1;
      char v27 = 3;
      goto LABEL_19;
    }
  }
  uint64_t v24 = *(void *)(a1 + 16);
  if (v24) {
    uint64_t v24 = *(void *)(v24 + 8);
  }
  WTF::ThreadSafeWeakHashSet<WebKit::NetworkDataTask>::add<WebKit::NetworkDataTask,(void *)0>(v24 + 40, a1);
  return a1;
}

uint64_t WebKit::NetworkDataTask::scheduleFailure(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 545) = 1;
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  uint64_t v4 = *(atomic_uchar **)(a1 + 8);
  if (v4) {
    int v5 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  }
  else {
    int v5 = 0;
  }
  uint64_t v6 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v6 = &unk_1EE9C3A78;
  *(void *)(v6 + 8) = a1;
  *(void *)(v6 + ++*(_DWORD *)(this + 16) = v5;
  *(void *)(v6 + 24) = a1;
  *(unsigned char *)(v6 + 3objc_destroyWeak(this + 2) = a2;
  uint64_t v8 = v6;
  WTF::RunLoop::dispatch();
  uint64_t result = v8;
  if (v8) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return result;
}

uint64_t WTF::URL::protocolIsInFTPFamily(WTF::URL *this)
{
  if (WTF::URL::protocolIs()) {
    return 1;
  }

  return WTF::URL::protocolIs();
}

void WebKit::NetworkDataTask::~NetworkDataTask(WebKit::NetworkDataTask *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9C35C8;
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4) {
      WTF::ThreadSafeWeakHashSet<WebKit::NetworkDataTask>::remove<WebKit::NetworkDataTask,(void *)0>(v4 + 40, this);
    }
  }
  int v5 = (WTF::StringImpl *)*((void *)this + 67);
  *((void *)this + 67) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (const void *)*((void *)this + 65);
  *((void *)this + 65) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::NetworkDataTask *)((char *)this + 328));
  unsigned int v7 = (const void *)*((void *)this + 40);
  *((void *)this + 40) = 0;
  if (v7) {
    CFRelease(v7);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::NetworkDataTask *)((char *)this + 128));
  uint64_t v9 = (WTF::StringImpl *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  unint64_t v10 = (WTF::StringImpl *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = (const void *)*((void *)this + 12);
  *((void *)this + 1objc_destroyWeak(this + 2) = 0;
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = (WTF::StringImpl *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v8);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v8);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v8);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v8);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  int v16 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v8);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  unint64_t v17 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, v8);
  }
  unint64_t v18 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v18 && atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v18);
    WTF::fastFree((WTF *)v18, v8);
  }
  unint64_t v19 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v19)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v8);
    }
  }
}

WTF::StringImpl *WebKit::NetworkDataTask::didReceiveResponse(uint64_t a1, WebCore::ResourceResponseBase *this, uint64_t a3, uint64_t a4, WebCore::IPAddress *a5, uint64_t *a6)
{
  uint64_t v12 = WebCore::ResourceResponseBase::url(this);
  uint64_t v13 = *(WTF::StringImpl **)v12;
  if (*(void *)v12) {
    *(_DWORD *)v13 += 2;
  }
  char v66 = v13;
  long long v14 = *(_OWORD *)(v12 + 24);
  long long v67 = *(_OWORD *)(v12 + 8);
  long long v68 = v14;
  if (WebCore::ResourceResponseBase::isHTTP09(this)
    && (WTF::URL::port((WTF::URL *)&v66) & 0xFF0000) != 0
    && (WTF::URL::protocol((WTF::URL *)&v66), (WTF::isDefaultPortForProtocol() & 1) == 0))
  {
    uint64_t v26 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, 2);
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t v27 = *(void *)(a1 + 24);
    if (v27)
    {
      uint64_t v28 = *(WebKit::NetworkDataTaskClient **)(v27 + 8);
      if (v28)
      {
        WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)&v66);
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Cancelled load from '", 22, (uint64_t *)&v65, (uint64_t)"' because it is using HTTP/0.9.", 32, v45);
        v56[0] = 0;
        uint64_t v29 = v66;
        if (v66) {
          *(_DWORD *)v66 += 2;
        }
        v56[1] = v29;
        long long v57 = v67;
        long long v58 = v68;
        uint64_t v30 = v45[0];
        if (v45[0]) {
          *(_DWORD *)v45[0] += 2;
        }
        char v59 = v30;
        int v60 = 0;
        __int16 v61 = 1;
        uint64_t v62 = 0;
        char v63 = 1;
        WebKit::NetworkDataTaskClient::didCompleteWithError(v28, (const WebCore::ResourceError *)v56);
        WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v56, v31);
        uint64_t v32 = v45[0];
        v45[0] = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2) {
            WTF::StringImpl::destroy(v32, v24);
          }
          else {
            *(_DWORD *)v32 -= 2;
          }
        }
        uint64_t v33 = v65;
        __int16 v65 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2) {
            WTF::StringImpl::destroy(v33, v24);
          }
          else {
            *(_DWORD *)v33 -= 2;
          }
        }
      }
    }
  }
  else
  {
    if (WebCore::ResourceRequestBase::isNull((WebCore::ResourceRequestBase *)(a1 + 328))) {
      uint64_t v15 = (const String *)(a1 + 128);
    }
    else {
      uint64_t v15 = (const String *)(a1 + 328);
    }
    WebCore::ResourceRequest::ResourceRequest(v56, v15);
    uint64_t PartyForCookies = WebCore::ResourceRequestBase::firstPartyForCookies((WebCore::ResourceRequestBase *)v56);
    unint64_t v17 = *(WTF::StringImpl **)PartyForCookies;
    if (*(void *)PartyForCookies) {
      *(_DWORD *)v17 += 2;
    }
    uint64_t v53 = v17;
    long long v18 = *(_OWORD *)(PartyForCookies + 24);
    long long v54 = *(_OWORD *)(PartyForCookies + 8);
    long long v55 = v18;
    if (!*(unsigned char *)(a1 + 544)
      && WTF::URL::protocolIs()
      && (WTF::URL::host((WTF::URL *)&v53), (WebCore::SecurityOrigin::isLocalhostAddress() & 1) == 0)
      && WTF::URL::protocolIs()
      && (WTF::URL::host((WTF::URL *)&v66), WebCore::SecurityOrigin::isLocalhostAddress())
      && *((unsigned char *)a5 + 20)
      && (WebCore::IPAddress::isLoopback(a5) & 1) == 0)
    {
      uint64_t v34 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, 2);
      (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
      (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
      uint64_t v35 = *(void *)(a1 + 24);
      if (v35)
      {
        uint64_t v36 = *(WebKit::NetworkDataTaskClient **)(v35 + 8);
        if (v36)
        {
          WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)&v66);
          WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Cancelled load from '", 22, (uint64_t *)&v43, (uint64_t)"' because localhost did not resolve to a loopback address.", 59, &v44);
          v45[0] = 0;
          uint64_t v37 = v66;
          if (v66) {
            *(_DWORD *)v66 += 2;
          }
          v45[1] = v37;
          long long v46 = v67;
          long long v47 = v68;
          uint64_t v38 = v44;
          if (v44) {
            *(_DWORD *)v44 += 2;
          }
          char v48 = v38;
          int v49 = 0;
          __int16 v50 = 1;
          uint64_t v51 = 0;
          char v52 = 1;
          WebKit::NetworkDataTaskClient::didCompleteWithError(v36, (const WebCore::ResourceError *)v45);
          WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v45, v39);
          unsigned int v40 = v44;
          char v44 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2) {
              WTF::StringImpl::destroy(v40, v21);
            }
            else {
              *(_DWORD *)v40 -= 2;
            }
          }
          char v41 = v43;
          char v43 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2) {
              WTF::StringImpl::destroy(v41, v21);
            }
            else {
              *(_DWORD *)v41 -= 2;
            }
          }
        }
      }
    }
    else
    {
      *((_WORD *)this + 1++*(_DWORD *)(this + 16) = *((_WORD *)this + 116) & 0xC3FF | 0x400;
      if (a3) {
        *((unsigned char *)this + 138) |= 0x10u;
      }
      if (a4) {
        *((unsigned char *)this + 138) |= 0x20u;
      }
      uint64_t v19 = *(void *)(a1 + 24);
      if (v19 && (uint64_t v20 = *(void *)(v19 + 8)) != 0)
      {
        (*(void (**)(uint64_t, WebCore::ResourceResponseBase *, uint64_t, uint64_t, uint64_t *))(*(void *)v20 + 24))(v20, this, a3, a4, a6);
      }
      else
      {
        uint64_t v42 = *a6;
        *a6 = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, 2);
        (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
      }
    }
    unsigned int v22 = v53;
    uint64_t v53 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v21);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    CFTypeRef v23 = cf;
    CFTypeRef cf = 0;
    if (v23) {
      CFRelease(v23);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v56);
  }
  uint64_t result = v66;
  char v66 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkDataTaskClient::didCompleteWithError(WebKit::NetworkDataTaskClient *this, const WebCore::ResourceError *a2)
{
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v7);
  (*(void (**)(WebKit::NetworkDataTaskClient *, const WebCore::ResourceError *, unsigned char *))(*(void *)this + 40))(this, a2, v7);
  int v5 = v9;
  uint64_t v9 = 0;
  if (v5) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v5);
  }
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::NetworkDataTask::description(void *a1@<X8>)
{
  unsigned int v2 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v2 += 2;
  }
  *a1 = v2;
}

uint64_t WebKit::NetworkDataTask::setH2PingCallback(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  WebCore::createInternalError();
  __int16 v18 = v11;
  int v17 = v10;
  v15[0] = *(_OWORD *)v6;
  v15[1] = v7;
  void v15[2] = v8;
  int v16 = v9;
  CFTypeRef v19 = cf;
  char v20 = v13;
  int v21 = 1;
  uint64_t v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v4 + 16))(v4, v15);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  if (v21 != -1) {
    ((void (*)(char *, _OWORD *))off_1EE9C39C0[v21])(&v14, v15);
  }
  return 0;
}

uint64_t WebKit::NetworkDataTask::restrictRequestReferrerToOriginIfNeeded(uint64_t this, WebCore::ResourceRequest *a2)
{
  uint64_t v3 = *(void *)(*(void *)(this + 16) + 8);
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4 < 0 && v4 != -1 || *(void *)(v3 + 72))
  {
    if (*(unsigned char *)(v3 + 97))
    {
      this = WebCore::ResourceRequestBase::isThirdParty(a2);
      if (this)
      {
        return WebCore::ResourceRequestBase::setExistingHTTPReferrerToOriginString(a2);
      }
    }
  }
  return this;
}

unsigned int *WebKit::NetworkDataTask::setPendingDownload(WebKit::NetworkDataTask *this, WebKit::PendingDownload *a2)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 4, (uint64_t)a2);
  int v5 = (atomic_uint *)*((void *)a2 + 2);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  uint64_t result = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = v5;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, v4);
  }
  return result;
}

uint64_t WebKit::NetworkDataTaskBlob::NetworkDataTaskBlob(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceRequestBase *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  __int16 v11 = (void *)WebKit::NetworkDataTask::NetworkDataTask(a1, a2, a3, a4, 0, 0, 0);
  uint64_t v12 = (WebCore::FileStreamClient *)(v11 + 69);
  void *v11 = &unk_1EE9C3638;
  v11[69] = &unk_1EE9C36C0;
  v11[70] = 0;
  char v13 = (WebCore::AsyncFileStream *)WTF::fastMalloc((WTF *)8);
  *(void *)(a1 + 568) = WebCore::AsyncFileStream::AsyncFileStream(v13, v12);
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 59objc_destroyWeak(this + 2) = 0u;
  *(_DWORD *)(a1 + 608) = 1;
  *(unsigned char *)(a1 + 61objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 6++*(_DWORD *)(this + 16) = -1;
  *(void *)(a1 + 624) = -1;
  *(_OWORD *)(a1 + 63objc_destroyWeak(this + 2) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 657) = 0u;
  *(_DWORD *)(a1 + 676) = -1;
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 680, a5);
  *(void *)(a1 + 696) = 0;
  uint64_t v14 = *(void *)(a2 + 32);
  atomic_fetch_add((atomic_uint *volatile)(v14 + 128), 1u);
  *(void *)(a1 + 704) = v14;
  uint64_t v15 = *(unsigned int *)(a1 + 692);
  if (v15)
  {
    uint64_t v25 = *(uint64_t **)(a1 + 680);
    uint64_t v26 = 8 * v15;
    do
    {
      uint64_t v27 = *v25++;
      (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
      v26 -= 8;
    }
    while (v26);
  }
  uint64_t v16 = *a6;
  if (*a6)
  {
    v31[0] = 0;
    int v32 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v31, v16 + 8);
    char v33 = 1;
  }
  else
  {
    v31[0] = 0;
    char v33 = 0;
    uint64_t v17 = *(void *)WebCore::ResourceRequestBase::firstPartyForCookies(a4);
    if (v17
      && *(_DWORD *)(v17 + 4)
      && (*(unsigned char *)(WebCore::ResourceRequestBase::firstPartyForCookies(a4) + 8) & 1) != 0)
    {
      uint64_t v22 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEFAULT, "Got request for blob without topOrigin but request specifies firstPartyForCookies", (uint8_t *)buf, 2u);
      }
      uint64_t PartyForCookies = (WebCore::SecurityOriginData *)WebCore::ResourceRequestBase::firstPartyForCookies(a4);
      WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(buf, PartyForCookies, v24);
      if (v33)
      {
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v31, (uint64_t)buf);
      }
      else
      {
        v31[0] = 0;
        int v32 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v31, (uint64_t)buf);
        char v33 = 1;
      }
      if (v30 != -1) {
        ((void (*)(char *, uint64_t *))off_1EE9C39D0[v30])(&v28, buf);
      }
    }
  }
  WebCore::ResourceRequestBase::url(a4);
  BlobDataFromURL = (atomic_uint *)WebCore::BlobRegistryImpl::getBlobDataFromURL();
  if (BlobDataFromURL) {
    atomic_fetch_add(BlobDataFromURL, 1u);
  }
  char v20 = *(unsigned int **)(a1 + 560);
  *(void *)(a1 + 560) = BlobDataFromURL;
  if (v20) {
    WTF::ThreadSafeRefCounted<WebCore::BlobData,(WTF::DestructionThread)0>::deref(v20, v19);
  }
  if (v33 && v32 != -1) {
    ((void (*)(uint64_t *, unsigned char *))off_1EE9C39D0[v32])(buf, v31);
  }
  return a1;
}

void WebKit::NetworkDataTaskBlob::~NetworkDataTaskBlob(WebKit::NetworkDataTaskBlob *this)
{
  uint64_t v2 = *((unsigned int *)this + 173);
  if (v2)
  {
    __int16 v11 = (uint64_t *)*((void *)this + 85);
    uint64_t v12 = 8 * v2;
    do
    {
      uint64_t v13 = *v11++;
      (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
      v12 -= 8;
    }
    while (v12);
  }
  WebKit::NetworkDataTaskBlob::clearStream(this);
  uint64_t v4 = (unsigned int *)*((void *)this + 88);
  *((void *)this + 88) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 32);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  int v5 = (const char ***)*((void *)this + 87);
  *((void *)this + 87) = 0;
  if (v5) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v5);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 680, v3);
  long long v7 = (WTF *)*((void *)this + 74);
  if (v7)
  {
    *((void *)this + 74) = 0;
    *((_DWORD *)this + 150) = 0;
    WTF::fastFree(v7, v6);
  }
  long long v8 = (WTF *)*((void *)this + 72);
  if (v8)
  {
    *((void *)this + 7objc_destroyWeak(this + 2) = 0;
    *((_DWORD *)this + 146) = 0;
    WTF::fastFree(v8, v6);
  }
  std::unique_ptr<WebCore::AsyncFileStream>::reset[abi:sn180100]((WebCore::AsyncFileStream **)this + 71);
  int v10 = (unsigned int *)*((void *)this + 70);
  *((void *)this + 70) = 0;
  if (v10) {
    WTF::ThreadSafeRefCounted<WebCore::BlobData,(WTF::DestructionThread)0>::deref(v10, v9);
  }

  WebKit::NetworkDataTask::~NetworkDataTask(this, (WTF::StringImpl *)v9);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::NetworkDataTaskBlob::~NetworkDataTaskBlob(this);

  WTF::fastFree(v1, v2);
}

WebCore::AsyncFileStream *WebKit::NetworkDataTaskBlob::clearStream(WebCore::AsyncFileStream *this)
{
  if (*((_DWORD *)this + 152) != 3)
  {
    uint64_t v1 = (uint64_t)this;
    *((_DWORD *)this + 15objc_destroyWeak(this + 2) = 3;
    if (*((unsigned char *)this + 672))
    {
      *((unsigned char *)this + 67objc_destroyWeak(this + 2) = 0;
      WebCore::AsyncFileStream::close(*((WebCore::AsyncFileStream **)this + 71));
    }
    return std::unique_ptr<WebCore::AsyncFileStream>::reset[abi:sn180100]((WebCore::AsyncFileStream **)(v1 + 568));
  }
  return this;
}

void non-virtual thunk to'WebKit::NetworkDataTaskBlob::~NetworkDataTaskBlob(WebKit::NetworkDataTaskBlob *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::NetworkDataTaskBlob::~NetworkDataTaskBlob((WebKit::NetworkDataTaskBlob *)((char *)this - 552));

  WTF::fastFree(v1, v2);
}

atomic_uchar *volatile *WebKit::NetworkDataTaskBlob::resume(atomic_uchar *volatile *this)
{
  if ((this[76] & 0xFFFFFFFE) != 2)
  {
    uint64_t v1 = this;
    *((_DWORD *)this + 15objc_destroyWeak(this + 2) = 0;
    WTF::RunLoop::main((WTF::RunLoop *)this);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 1);
    uint64_t v2 = (atomic_uchar *volatile *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v2 = (atomic_uchar *volatile)&unk_1EE9C3AA0;
    *((void *)v2 + 1) = v1;
    *((void *)v2 + objc_destroyWeak(this + 2) = v1;
    uint64_t v3 = v2;
    WTF::RunLoop::dispatch();
    this = v3;
    if (v3) {
      return (atomic_uchar *volatile *)(*((uint64_t (**)(atomic_uchar *volatile *))*v3 + 1))(v3);
    }
  }
  return this;
}

uint64_t WebKit::NetworkDataTaskBlob::cancel(uint64_t this, int *a2)
{
  if ((*(_DWORD *)(this + 608) & 0xFFFFFFFE) != 2)
  {
    uint64_t v2 = (WebKit::NetworkDataTaskBlob *)this;
    *(_DWORD *)(this + 608) = 2;
    if (*(unsigned char *)(this + 672))
    {
      *(unsigned char *)(this + 67objc_destroyWeak(this + 2) = 0;
      this = WebCore::AsyncFileStream::close(*(WebCore::AsyncFileStream **)(this + 568));
    }
    if (*((void *)v2 + 5))
    {
      return WebKit::NetworkDataTaskBlob::cleanDownloadFiles(v2, a2);
    }
  }
  return this;
}

uint64_t WebKit::NetworkDataTaskBlob::cleanDownloadFiles(WebKit::NetworkDataTaskBlob *this, int *a2)
{
  if (*((_DWORD *)this + 169) != -1)
  {
    WTF::FileSystemImpl::closeFile((WebKit::NetworkDataTaskBlob *)((char *)this + 676), a2);
    *((_DWORD *)this + 169) = -1;
  }

  return WTF::FileSystemImpl::deleteFile((WebKit::NetworkDataTaskBlob *)((char *)this + 120), (const WTF::String *)a2);
}

WebCore::AsyncFileStream *WebKit::NetworkDataTaskBlob::invalidateAndCancel(WebKit::NetworkDataTaskBlob *this, int *a2)
{
  WebKit::NetworkDataTaskBlob::cancel((uint64_t)this, a2);

  return WebKit::NetworkDataTaskBlob::clearStream(this);
}

void WebKit::NetworkDataTaskBlob::getSizeForNext(WebKit::NetworkDataTaskBlob *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = this;
  unsigned int v5 = *((_DWORD *)this + 166);
  uint64_t v6 = *((void *)this + 70);
  uint64_t v7 = *(unsigned int *)(v6 + 108);
  if (v7 > v5)
  {
    uint64_t v8 = *(void *)(v6 + 96);
    uint64_t v9 = (WebCore::BlobDataItem *)(v8 + 40 * v5);
    if (!*(_DWORD *)v9)
    {
      uint64_t v10 = WebCore::BlobDataItem::length(v9);
      WebKit::NetworkDataTaskBlob::didGetSize(v4, v10);
      return;
    }
    if (*(_DWORD *)v9 != 1) {
      return;
    }
    char v28 = (WebKit::NetworkDataTaskBlob *)*((void *)v4 + 71);
    uint64_t v29 = v8 + 40 * v5;
    uint64_t v30 = WebCore::BlobDataFileReference::path(*(WebCore::BlobDataFileReference **)(v29 + 16));
    a3 = WebCore::BlobDataFileReference::expectedModificationTime(*(WebCore::BlobDataFileReference **)(v29 + 16));
    a4 = v31;
    this = v28;
    a2 = v30;
__ZN7WebCore15AsyncFileStream7getSizeERKN3WTF6StringENSt3__18optionalINS1_8WallTimeEEE:
    MEMORY[0x1F416DF90](this, a2, a3, a4);
    return;
  }
  if (!*((unsigned char *)this + 612)) {
    goto LABEL_7;
  }
  uint64_t v32 = *((void *)this + 77);
  uint64_t v33 = *((void *)this + 79);
  if (v32 == -1)
  {
    uint64_t v32 = v33 - *((void *)this + 78);
    *((void *)this + 77) = v32;
LABEL_49:
    uint64_t v34 = v33 - 1;
    *((void *)this + 78) = v33 - 1;
LABEL_50:
    if (v7)
    {
      uint64_t v37 = 0;
      uint64_t v38 = *((unsigned int *)this + 151);
      uint64_t v39 = v32;
      while (v38 != v37)
      {
        uint64_t v40 = *(void *)(*((void *)this + 74) + 8 * v37);
        BOOL v41 = __OFSUB__(v39, v40);
        uint64_t v42 = v39 - v40;
        if (v42 < 0 != v41) {
          goto LABEL_57;
        }
        ++v37;
        uint64_t v39 = v42;
        if (v7 == v37)
        {
          LODWORD(v37) = v7;
          uint64_t v39 = v42;
          goto LABEL_57;
        }
      }
      *((_DWORD *)this + 167) = v38;
      __break(0xC471u);
      goto __ZN7WebCore15AsyncFileStream7getSizeERKN3WTF6StringENSt3__18optionalINS1_8WallTimeEEE;
    }
    LODWORD(v37) = 0;
    uint64_t v39 = v32;
LABEL_57:
    *((_DWORD *)this + 167) = v37;
    *((void *)this + 8objc_destroyWeak(this + 2) = v39;
    uint64_t v43 = v34 - v32 + 1;
    if (*((void *)this + 81) > v43) {
      *((void *)this + 81) = v43;
    }
LABEL_7:
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)this + 1);
    __int16 v11 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebKit::NetworkDataTaskBlob *)((char *)v4 + 128));
    WebCore::extractMIMETypeFromMediaType((uint64_t *)v44, (WebCore *)(*((void *)v4 + 70) + 8), v12);
    uint64_t v13 = *((void *)v4 + 81);
    long long v46 = 0;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v47, v11, (const WTF::String *)v44, v13, (const WTF::String *)&v46);
    CFTypeRef cf = 0;
    char v50 = 0;
    char v48 = v48 & 0xF1 | 4;
    uint64_t v15 = v46;
    long long v46 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t v16 = v44[0];
    v44[0] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v14);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    WebCore::ResourceResponseBase::setHTTPStatusCode((WebCore::ResourceResponseBase *)v47);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::ResourceResponseBase::setHTTPStatusText();
    __int16 v18 = v44[0];
    v44[0] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v17);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    WebCore::ResourceResponseBase::setHTTPHeaderField();
    WebCore::extractCharsetFromMediaType();
    if ((v19 & 0xFF00000000) != 0) {
      WTF::String::String();
    }
    else {
      WTF::String::String();
    }
    WebCore::ResourceResponseBase::setTextEncodingName();
    int v21 = v44[0];
    v44[0] = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v20);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    WTF::String::number(*((WTF::String **)v4 + 81));
    WebCore::ResourceResponseBase::setHTTPHeaderField();
    CFTypeRef v23 = v44[0];
    v44[0] = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v22);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    WebCore::addPolicyContainerHeaders();
    if (*((unsigned char *)v4 + 612))
    {
      WebCore::ParsedContentRange::ParsedContentRange((WebCore::ParsedContentRange *)v44);
      WebCore::ParsedContentRange::headerValue((uint64_t *)&v46, (WebCore::ParsedContentRange *)v44);
      WebCore::ResourceResponseBase::setHTTPHeaderField();
      uint64_t v36 = v46;
      long long v46 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2) {
          WTF::StringImpl::destroy(v36, v35);
        }
        else {
          *(_DWORD *)v36 -= 2;
        }
      }
    }
    LOBYTE(v44[0]) = 0;
    char v45 = 0;
    uint64_t v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v24 = &unk_1EE9C3AC8;
    *((void *)v24 + 1) = v4;
    *((void *)v24 + objc_destroyWeak(this + 2) = v4;
    long long v46 = v24;
    WebKit::NetworkDataTask::didReceiveResponse((uint64_t)v4, (WebCore::ResourceResponseBase *)v47, 0, 0, (WebCore::IPAddress *)v44, (uint64_t *)&v46);
    uint64_t v26 = v46;
    long long v46 = 0;
    if (v26) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v26 + 8))(v26);
    }
    CFTypeRef v27 = cf;
    CFTypeRef cf = 0;
    if (v27) {
      CFRelease(v27);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v47, v25);
    return;
  }
  if (v32 < v33)
  {
    uint64_t v34 = *((void *)this + 78);
    if (v34 != -1 && v34 < v33) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }

  WebKit::NetworkDataTaskBlob::didFail((uint64_t)this, 3);
}

atomic_uchar *WebKit::NetworkDataTaskBlob::didFail(uint64_t a1, int a2)
{
  uint64_t v4 = (atomic_uchar **)(a1 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 8));
  if (*(void *)(a1 + 40))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    unsigned int v5 = v20;
    uint64_t v6 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 128));
    if (v20) {
      *(_DWORD *)v20 += 2;
    }
    char v20 = v5;
    uint64_t v7 = *(WTF::StringImpl **)v6;
    if (*(void *)v6) {
      *(_DWORD *)v7 += 2;
    }
    int v21 = v7;
    long long v8 = *(_OWORD *)(v6 + 24);
    long long v22 = *(_OWORD *)(v6 + 8);
    long long v23 = v8;
    uint64_t v24 = 0;
    int v25 = a2;
    __int16 v26 = 1;
    CFTypeRef cf = 0;
    char v28 = 1;
    WebKit::NetworkDataTaskBlob::didFailDownload((WebKit::NetworkDataTaskBlob *)a1, (const WebCore::ResourceError *)&v20);
  }
  else
  {
    WebKit::NetworkDataTaskBlob::clearStream((WebCore::AsyncFileStream *)a1);
    uint64_t v10 = *(void *)(a1 + 24);
    if (v10) {
      __int16 v11 = *(WebKit::NetworkDataTaskClient **)(v10 + 8);
    }
    else {
      __int16 v11 = 0;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    unsigned int v5 = v20;
    uint64_t v12 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 128));
    if (v20) {
      *(_DWORD *)v20 += 2;
    }
    char v20 = v5;
    uint64_t v13 = *(WTF::StringImpl **)v12;
    if (*(void *)v12) {
      *(_DWORD *)v13 += 2;
    }
    int v21 = v13;
    long long v14 = *(_OWORD *)(v12 + 24);
    long long v22 = *(_OWORD *)(v12 + 8);
    long long v23 = v14;
    uint64_t v24 = 0;
    int v25 = a2;
    __int16 v26 = 1;
    CFTypeRef cf = 0;
    char v28 = 1;
    WebKit::NetworkDataTaskClient::didCompleteWithError(v11, (const WebCore::ResourceError *)&v20);
  }
  CFTypeRef v15 = cf;
  CFTypeRef cf = 0;
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v16 = v24;
  uint64_t v24 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v9);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = v21;
  int v21 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v9);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  __int16 v18 = v20;
  char v20 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v9);
      if (!v5) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*v4);
      }
      goto LABEL_30;
    }
    *(_DWORD *)v18 -= 2;
  }
  if (!v5) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*v4);
  }
LABEL_30:
  if (*(_DWORD *)v5 == 2) {
    WTF::StringImpl::destroy(v5, v9);
  }
  else {
    *(_DWORD *)v5 -= 2;
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*v4);
}

atomic_uchar *WebKit::NetworkDataTaskBlob::didGetSize(atomic_uchar *volatile *this, uint64_t a2)
{
  uint64_t v15 = a2;
  uint64_t v4 = (atomic_uchar **)(this + 1);
  uint64_t result = (atomic_uchar *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 1);
  if ((this[76] & 0xFFFFFFFE) == 2
    || ((uint64_t v6 = *((void *)this + 3)) == 0 || !*(void *)(v6 + 8)) && !*((void *)this + 5))
  {
    WebKit::NetworkDataTaskBlob::clearStream((WebCore::AsyncFileStream *)this);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*v4);
  }
  if (a2 == -1)
  {
    WebKit::NetworkDataTaskBlob::didFail((uint64_t)this, 1);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*v4);
  }
  uint64_t v7 = *((void *)this + 70);
  unsigned int v8 = *((_DWORD *)this + 166);
  if (*(_DWORD *)(v7 + 108) > v8)
  {
    uint64_t v9 = WebCore::BlobDataItem::length((WebCore::BlobDataItem *)(*(void *)(v7 + 96) + 40 * v8));
    uint64_t v15 = v9;
    uint64_t v13 = *((unsigned int *)this + 151);
    if (v13 == *((_DWORD *)this + 150))
    {
      long long v14 = (void *)WTF::Vector<long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(this + 74), v13 + 1, (unint64_t)&v15);
      uint64_t v13 = *((unsigned int *)this + 151);
      *(void *)(*((void *)this + 74) + 8 * v13) = *v14;
      uint64_t v9 = v15;
    }
    else
    {
      *(void *)(*((void *)this + 74) + 8 * v13) = v9;
    }
    *((_DWORD *)this + 151) = v13 + 1;
    *((void *)this + 79) += v9;
    *((void *)this + 81) += v9;
    ++*((_DWORD *)this + 166);
    WebKit::NetworkDataTaskBlob::getSizeForNext((WebKit::NetworkDataTaskBlob *)this, v10, v11, v12);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*v4);
  }
  __break(0xC471u);
  return result;
}

atomic_uchar *non-virtual thunk to'WebKit::NetworkDataTaskBlob::didGetSize(atomic_uchar *volatile *this, uint64_t a2)
{
  return WebKit::NetworkDataTaskBlob::didGetSize(this - 69, a2);
}

WTF::StringImpl *WebKit::NetworkDataTaskBlob::read(WTF::StringImpl *this, int *a2, uint64_t a3)
{
  uint64_t v3 = this;
  if (*((void *)this + 81)
    && (unsigned int v10 = *((_DWORD *)this + 167), v11 = *((void *)this + 70), *(_DWORD *)(v11 + 108) > v10))
  {
    uint64_t v12 = *(void *)(v11 + 96);
    uint64_t v13 = (WebCore::BlobDataFileReference **)(v12 + 40 * v10);
    if (!*(_DWORD *)v13)
    {
      uint64_t v14 = WebCore::BlobDataItem::length((WebCore::BlobDataItem *)(v12 + 40 * v10));
      if (v14 - *((void *)v3 + 82) > *((void *)v3 + 81)) {
        unint64_t v15 = *((void *)v3 + 81);
      }
      else {
        unint64_t v15 = v14 - *((void *)v3 + 82);
      }
      uint64_t v16 = v12 + 40 * v10;
      uint64_t v17 = *(WebCore::DataSegment **)(v16 + 8);
      uint64_t v18 = WebCore::DataSegment::data(v17);
      unint64_t v19 = WebCore::DataSegment::size(v17);
      unint64_t v20 = *((void *)v3 + 82) + *(void *)(v16 + 24);
      if (v19 >= v20)
      {
        if (v15 == -1)
        {
          unint64_t v15 = v19 - v20;
          goto LABEL_25;
        }
        if (v19 - v20 >= v15)
        {
LABEL_25:
          *((void *)v3 + 8objc_destroyWeak(this + 2) = 0;
          return (WTF::StringImpl *)WebKit::NetworkDataTaskBlob::consumeData(v3, v18 + v20, v15);
        }
      }
      __break(1u);
      goto LABEL_39;
    }
    if (*(_DWORD *)v13 == 1)
    {
      return (WTF::StringImpl *)WebKit::NetworkDataTaskBlob::readFile((WebCore::AsyncFileStream **)this, v13, a3);
    }
  }
  else
  {
    if (*((_DWORD *)this + 169) == -1)
    {
      WebKit::NetworkDataTaskBlob::clearStream(this);
      uint64_t v4 = *((void *)v3 + 3);
      if (v4)
      {
        unsigned int v5 = *(WebKit::NetworkDataTaskClient **)(v4 + 8);
LABEL_5:
        int v21 = 0;
        long long v22 = 0;
        WTF::URL::invalidate((WTF::URL *)&v22);
        CFTypeRef cf = 0;
        v23[0] = 0;
        *(void *)((char *)v23 + 6) = 0;
        char v25 = 1;
        WebKit::NetworkDataTaskClient::didCompleteWithError(v5, (const WebCore::ResourceError *)&v21);
        CFTypeRef v7 = cf;
        CFTypeRef cf = 0;
        if (v7) {
          CFRelease(v7);
        }
        unsigned int v8 = (WTF::StringImpl *)v23[0];
        v23[0] = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v6);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
        uint64_t v9 = v22;
        long long v22 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2) {
            WTF::StringImpl::destroy(v9, v6);
          }
          else {
            *(_DWORD *)v9 -= 2;
          }
        }
        this = v21;
        int v21 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v6);
          }
          else {
            *(_DWORD *)this -= 2;
          }
        }
        return this;
      }
LABEL_39:
      unsigned int v5 = 0;
      goto LABEL_5;
    }
    return (WTF::StringImpl *)WebKit::NetworkDataTaskBlob::didFinishDownload(this, a2);
  }
  return this;
}

uint64_t WebKit::NetworkDataTaskBlob::readFile(WebCore::AsyncFileStream **this, WebCore::BlobDataFileReference **a2, uint64_t a3)
{
  uint64_t v3 = (WebKit::NetworkDataTaskBlob *)this;
  if (*((unsigned char *)this + 672))
  {
    this = (WebCore::AsyncFileStream **)this[71];
    a2 = (WebCore::BlobDataFileReference **)*((void *)v3 + 72);
    a3 = *((unsigned int *)v3 + 147);
  }
  else
  {
    if (*((_DWORD *)this + 151) > *((_DWORD *)this + 167))
    {
      uint64_t v4 = this[71];
      unsigned int v5 = (const WTF::String *)WebCore::BlobDataFileReference::path(a2[2]);
      uint64_t result = WebCore::AsyncFileStream::openForRead(v4, v5);
      *((unsigned char *)v3 + 67objc_destroyWeak(this + 2) = 1;
      *((void *)v3 + 8objc_destroyWeak(this + 2) = 0;
      return result;
    }
    __break(0xC471u);
  }
  return MEMORY[0x1F416DF80](this, a2, a3);
}

uint64_t WebKit::NetworkDataTaskBlob::consumeData(WebKit::NetworkDataTaskBlob *this, uint64_t a2, uint64_t a3)
{
  v9[1] = a2;
  uint64_t v10 = a3;
  *((void *)this + 81) -= a3;
  if (!a3) {
    goto LABEL_7;
  }
  if (*((_DWORD *)this + 169) == -1)
  {
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      uint64_t v5 = *(void *)(v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul> &>(v9);
    (*(void (**)(uint64_t, void))(*(void *)v5 + 32))(v5, v9[0]);
    CFTypeRef v7 = (unsigned int *)v9[0];
    v9[0] = 0;
    if (v7) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v6);
    }
LABEL_7:
    if (*((unsigned char *)this + 672))
    {
      if (v10) {
        return WebKit::NetworkDataTaskBlob::read(this);
      }
      *((unsigned char *)this + 67objc_destroyWeak(this + 2) = 0;
      WebCore::AsyncFileStream::close(*((WebCore::AsyncFileStream **)this + 71));
    }
    ++*((_DWORD *)this + 167);
    return WebKit::NetworkDataTaskBlob::read(this);
  }
  uint64_t result = WebKit::NetworkDataTaskBlob::writeDownload((uint64_t)this, a2, a3);
  if (result) {
    goto LABEL_7;
  }
  return result;
}

atomic_uchar *WebKit::NetworkDataTaskBlob::didOpen(atomic_uchar *volatile *this, char a2)
{
  if ((this[76] & 0xFFFFFFFE) != 2
    && ((uint64_t v4 = *((void *)this + 3)) != 0 && *(void *)(v4 + 8) || *((void *)this + 5)))
  {
    if (a2)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 1);
      WebKit::NetworkDataTaskBlob::read((WTF::StringImpl *)this, v5, v6);
      CFTypeRef v7 = (atomic_uchar *)*((void *)this + 1);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(v7);
    }
    else
    {
      return WebKit::NetworkDataTaskBlob::didFail((uint64_t)this, 4);
    }
  }
  else
  {
    return (atomic_uchar *)WebKit::NetworkDataTaskBlob::clearStream((WebCore::AsyncFileStream *)this);
  }
}

atomic_uchar *non-virtual thunk to'WebKit::NetworkDataTaskBlob::didOpen(atomic_uchar *volatile *this, char a2)
{
  return WebKit::NetworkDataTaskBlob::didOpen(this - 69, a2);
}

atomic_uchar *WebKit::NetworkDataTaskBlob::didRead(WebKit::NetworkDataTaskBlob *this, unsigned int a2)
{
  if ((*((_DWORD *)this + 152) & 0xFFFFFFFE) != 2
    && ((uint64_t v5 = *((void *)this + 3)) != 0 && *(void *)(v5 + 8) || *((void *)this + 5)))
  {
    if ((a2 & 0x80000000) != 0)
    {
      return WebKit::NetworkDataTaskBlob::didFail((uint64_t)this, 4);
    }
    else
    {
      uint64_t result = (atomic_uchar *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)this + 1);
      if (*((_DWORD *)this + 147) < a2)
      {
        __break(1u);
      }
      else
      {
        WebKit::NetworkDataTaskBlob::consumeData(this, *((void *)this + 72), a2);
        uint64_t v6 = (atomic_uchar *)*((void *)this + 1);
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(v6);
      }
    }
  }
  else
  {
    return (atomic_uchar *)WebKit::NetworkDataTaskBlob::clearStream(this);
  }
  return result;
}

atomic_uchar *non-virtual thunk to'WebKit::NetworkDataTaskBlob::didRead(WebKit::NetworkDataTaskBlob *this, unsigned int a2)
{
  return WebKit::NetworkDataTaskBlob::didRead((WebKit::NetworkDataTaskBlob *)((char *)this - 552), a2);
}

uint64_t WebKit::NetworkDataTaskBlob::writeDownload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (int)WTF::FileSystemImpl::writeToFile();
  if (v5 != a3)
  {
    WebKit::cancelledError((WebKit *)(a1 + 128), (uint64_t)&v14);
    WebKit::NetworkDataTaskBlob::didFailDownload((WebKit::NetworkDataTaskBlob *)a1, (const WebCore::ResourceError *)&v14);
    CFTypeRef v9 = cf;
    CFTypeRef cf = 0;
    if (v9) {
      CFRelease(v9);
    }
    uint64_t v10 = v16;
    uint64_t v16 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    uint64_t v11 = v15;
    unint64_t v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v8);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = v14;
    uint64_t v14 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v8);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    return v5 == a3;
  }
  *(void *)(a1 + 640) += a3;
  if (*(void *)(a1 + 40))
  {
    uint64_t v6 = (uint64_t *)(*(void *)(a1 + 704) + 192);
    uint64_t v14 = *(WTF::StringImpl **)(a1 + 40);
    CFTypeRef v7 = (WebKit::Download *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v6, &v14);
    WebKit::Download::didReceiveData(v7, a3, *(void *)(a1 + 640), *(void *)(a1 + 632));
    return v5 == a3;
  }
  uint64_t result = 146;
  __break(0xC471u);
  return result;
}

unsigned int *WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul> &>@<X0>(void *a1@<X8>)
{
  WebCore::FragmentedSharedBuffer::create();
  uint64_t v2 = WTF::fastMalloc((WTF *)0x38);
  *a1 = MEMORY[0x199730FA0](v2, &v5);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v3);
  }
  return result;
}

uint64_t WebKit::NetworkDataTaskBlob::setPendingDownloadLocation(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3, int a4)
{
  uint64_t v14 = 0;
  CFTypeRef v7 = (WTF::FileSystemImpl *)(a1 + 120);
  WTF::String::operator=((uint64_t *)(a1 + 120), a2);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v14);
  if (*a3)
  {
    uint64_t result = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t result = 1;
    uint64_t v10 = *a3;
    *a3 = 0;
    *(void *)(result + 8) = v10;
    *(void *)(result + ++*(_DWORD *)(this + 16) = 0;
  }
  else
  {
    uint64_t result = 0;
  }
  uint64_t v11 = *(const char ****)(a1 + 696);
  *(void *)(a1 + 696) = result;
  if (v11)
  {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v11);
    uint64_t result = *(void *)(a1 + 696);
  }
  if (result)
  {
    uint64_t v12 = *(void *)(result + 16);
    *(void *)(result + ++*(_DWORD *)(this + 16) = v12 + 1;
    if (!v12) {
      uint64_t result = WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(result + 8));
    }
  }
  if (a4)
  {
    uint64_t result = WTF::FileSystemImpl::fileExists(v7, v8);
    if (result) {
      return WTF::FileSystemImpl::deleteFile(v7, v13);
    }
  }
  return result;
}

uint64_t *WebKit::NetworkDataTask::setPendingDownloadLocation(uint64_t a1, WTF::StringImpl **a2)
{
  return WTF::String::operator=((uint64_t *)(a1 + 120), a2);
}

uint64_t WebKit::NetworkDataTaskBlob::suggestedFilename@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 536);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

WTF::StringImpl *WebKit::NetworkDataTaskBlob::download(WebKit::NetworkDataTaskBlob *this)
{
  uint64_t v2 = (WebKit::NetworkDataTaskBlob *)((char *)this + 120);
  int v3 = WTF::FileSystemImpl::openFile();
  *((_DWORD *)this + 169) = v3;
  if (v3 == -1)
  {
    WebKit::cancelledError((WebKit::NetworkDataTaskBlob *)((char *)this + 128), (uint64_t)&v22);
    WebKit::NetworkDataTaskBlob::didFailDownload(this, (const WebCore::ResourceError *)&v22);
    CFTypeRef v11 = cf;
    CFTypeRef cf = 0;
    if (v11) {
      CFRelease(v11);
    }
    uint64_t v12 = v24;
    uint64_t v24 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    int v21 = v23;
    long long v23 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v10);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    uint64_t result = v22;
    long long v22 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    if (!*((void *)this + 5))
    {
      __break(0xC471u);
      JUMPOUT(0x198B55A70);
    }
    uint64_t v4 = (uint64_t *)(*((void *)this + 88) + 160);
    uint64_t v5 = *((void *)this + 2);
    if (v5) {
      uint64_t v6 = *(void *)(v5 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    CFTypeRef v7 = (WTF::StringImpl *)*((void *)this + 67);
    if (v7) {
      *(_DWORD *)v7 += 2;
    }
    unsigned int v8 = (WebKit::Download *)WTF::fastMalloc((WTF *)0x1C8);
    long long v22 = (WTF::StringImpl *)WebKit::Download::Download((uint64_t)v8, (uint64_t)v4, *((void *)this + 5), (uint64_t)this, v6);
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v9);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v13 = *((void *)this + 5);
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x198B55A90);
    }
    WebKit::DownloadManager::dataTaskBecameDownloadTask(v4, v13, (uint64_t *)&v22);
    WebKit::Download::didCreateDestination(v8, v2);
    if (!(*((_DWORD *)this + 147) >> 19))
    {
      unint64_t v16 = *((unsigned int *)this + 146);
      if (!(v16 >> 19))
      {
        unint64_t v17 = v16 + (v16 >> 2);
        uint64_t v18 = 0x7FFFFLL;
        if (v17 >= 0x80000) {
          uint64_t v18 = v17;
        }
        if (v17 >= 0x10) {
          uint64_t v19 = v18 + 1;
        }
        else {
          uint64_t v19 = 0x80000;
        }
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WebKit::NetworkDataTaskBlob *)((char *)this + 576), (WTF::FastMalloc *)v19);
      }
    }
    *((_DWORD *)this + 147) = 0x80000;
    WebKit::NetworkDataTaskBlob::read(this, v14, v15);
    uint64_t result = v22;
    long long v22 = 0;
    if (result) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::NetworkDataTaskBlob::didFailDownload(WebKit::NetworkDataTaskBlob *this, const WebCore::ResourceError *a2)
{
  WebKit::NetworkDataTaskBlob::clearStream(this);
  WebKit::NetworkDataTaskBlob::cleanDownloadFiles(this, v4);
  uint64_t v5 = *((void *)this + 87);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 16) - 1;
    *(void *)(v5 + ++*(_DWORD *)(this + 16) = v6;
    if (v6)
    {
      *((void *)this + 87) = 0;
      goto LABEL_4;
    }
    *(void *)(*(void *)(v5 + 8) + 8) = 0;
    sandbox_extension_release();
    uint64_t v5 = *((void *)this + 87);
    *((void *)this + 87) = 0;
    if (v5) {
LABEL_4:
    }
      WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v5);
  }
  uint64_t v7 = *((void *)this + 3);
  if (v7 && (unsigned int v8 = *(WebKit::NetworkDataTaskClient **)(v7 + 8)) != 0)
  {
    return (uint64_t)WebKit::NetworkDataTaskClient::didCompleteWithError(v8, a2);
  }
  else if (*((void *)this + 5))
  {
    uint64_t v10 = (uint64_t *)(*((void *)this + 88) + 192);
    uint64_t v12 = *((void *)this + 5);
    CFTypeRef v11 = (unsigned char *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10, &v12);
    return (uint64_t)WebKit::Download::didFail(v11, (uint64_t)a2, 0, 0);
  }
  else
  {
    uint64_t result = 146;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::NetworkDataTaskBlob::didFinishDownload(WebKit::NetworkDataTaskBlob *this, int *a2)
{
  WTF::FileSystemImpl::closeFile((WebKit::NetworkDataTaskBlob *)((char *)this + 676), a2);
  *((_DWORD *)this + 169) = -1;
  WebKit::NetworkDataTaskBlob::clearStream(this);
  if (*((void *)this + 5))
  {
    int v3 = (uint64_t *)(*((void *)this + 88) + 192);
    uint64_t v9 = *((void *)this + 5);
    uint64_t v4 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3, &v9);
    uint64_t v5 = (WebKit::Download *)v4;
    uint64_t v6 = *((void *)this + 87);
    if (v6)
    {
      *((void *)this + 87) = 0;
      uint64_t v7 = *(const char ****)(v4 + 64);
      *((void *)v5 + 8) = v6;
      if (v7) {
        WTF::RefCounted<WebKit::SandboxExtension>::deref(v7);
      }
    }
    return WebKit::Download::didFinish(v5);
  }
  else
  {
    uint64_t result = 146;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::NetworkLoad::NetworkLoad(uint64_t a1, uint64_t a2, uint64_t a3, WebKit::NetworkSession *a4)
{
  *(void *)a1 = &unk_1EE9C3708;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = a2;
  uint64_t v6 = *((void *)a4 + 4);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 128), 1u);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = (const WebKit::NetworkLoadParameters *)(a1 + 32);
  WebKit::NetworkLoadParameters::NetworkLoadParameters(a1 + 32, a3);
  *(_OWORD *)(a1 + 3008) = 0u;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(a1 + 3024), (const String *)(a1 + 120));
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 120));
  if (WTF::URL::protocolIs())
  {
    uint64_t v12 = WTF::fastMalloc((WTF *)0x2C8);
    uint64_t v9 = WebKit::NetworkDataTaskBlob::NetworkDataTaskBlob(v12, (uint64_t)a4, a1, (WebCore::ResourceRequestBase *)(a1 + 120), a1 + 2936, (uint64_t *)(a1 + 64));
  }
  else
  {
    unsigned int v8 = (WebKit::NetworkDataTaskCocoa *)WTF::fastMalloc((WTF *)0x318);
    uint64_t v9 = (uint64_t)WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa(v8, a4, (WebKit::NetworkDataTaskClient *)a1, v7);
  }
  uint64_t v10 = *(void *)(a1 + 3008);
  *(void *)(a1 + 3008) = v9;
  if (v10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v10 + 8));
  }
  return a1;
}

uint64_t WebKit::NetworkLoad::NetworkLoad(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)a1 = &unk_1EE9C3708;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = a2;
  uint64_t v6 = *(void *)(a3 + 32);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 128), 1u);
  *(void *)(a1 + 24) = v6;
  WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)(a1 + 32));
  (*(void (**)(void, uint64_t))(*(void *)*a4 + 16))(*a4, a1);
  *(void *)(a1 + 30++*(_DWORD *)(this + 16) = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 3024));
  return a1;
}

uint64_t WebKit::NetworkLoad::start(WebKit::NetworkLoad *this)
{
  uint64_t result = *((void *)this + 376);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

unsigned int *WebKit::NetworkLoad::startWithScheduling(unsigned int *this)
{
  uint64_t v1 = *((void *)this + 376);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    if (v2)
    {
      int v3 = this;
      this = *(unsigned int **)(v2 + 8);
      if (this)
      {
        Scheduler = (unsigned int *)WebKit::NetworkSession::networkLoadScheduler((WebKit::NetworkSession *)this);
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(Scheduler, (uint64_t)Scheduler);
        uint64_t v6 = *(void *)Scheduler;
        if (*(void *)Scheduler) {
          atomic_fetch_add((atomic_uint *volatile)v6, 1u);
        }
        uint64_t v7 = (unsigned int *)*((void *)v3 + 377);
        *((void *)v3 + 377) = v6;
        if (v7)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v7);
            WTF::fastFree((WTF *)v7, v5);
          }
          uint64_t v6 = *((void *)v3 + 377);
        }
        if (v6) {
          unsigned int v8 = *(WebKit::NetworkLoadScheduler **)(v6 + 8);
        }
        else {
          unsigned int v8 = 0;
        }
        return WebKit::NetworkLoadScheduler::schedule(v8, (WebKit::NetworkLoad *)v3);
      }
    }
  }
  return this;
}

unsigned int *WebKit::NetworkLoadScheduler::schedule(WebKit::NetworkLoadScheduler *this, WebKit::NetworkLoad *a2)
{
  if (WebCore::ResourceRequestBase::isTopSite((WebKit::NetworkLoad *)((char *)a2 + 3024)))
  {
    return (unsigned int *)WebKit::NetworkLoadScheduler::scheduleMainResourceLoad(this, a2);
  }
  else
  {
    return WebKit::NetworkLoadScheduler::scheduleLoad(this, (unsigned int **)a2);
  }
}

void WebKit::NetworkLoad::~NetworkLoad(WebKit::NetworkLoad *this, void *a2)
{
  uint64_t v3 = *((void *)this + 377);
  if (v3)
  {
    uint64_t v4 = *(WTF ****)(v3 + 8);
    if (v4) {
      WebKit::NetworkLoadScheduler::unschedule(v4, this, 0);
    }
  }
  uint64_t v5 = *((void *)this + 376);
  if (v5)
  {
    uint64_t v6 = *(unsigned int **)(v5 + 24);
    *(void *)(v5 + 24) = 0;
    if (v6)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  uint64_t v7 = (const void *)*((void *)this + 402);
  *((void *)this + 40objc_destroyWeak(this + 2) = 0;
  if (v7) {
    CFRelease(v7);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::NetworkLoad *)((char *)this + 3024));
  uint64_t v9 = (unsigned int *)*((void *)this + 377);
  *((void *)this + 377) = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  uint64_t v10 = *((void *)this + 376);
  *((void *)this + 376) = 0;
  if (v10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v10 + 8));
  }
  if (*((unsigned char *)this + 2984))
  {
    unint64_t v16 = (const void *)*((void *)this + 372);
    *((void *)this + 37objc_destroyWeak(this + 2) = 0;
    if (v16) {
      CFRelease(v16);
    }
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 2936, v8);
  if (*((unsigned char *)this + 2912)) {
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NetworkLoad *)((char *)this + 336));
  }
  CFTypeRef v11 = (const void *)*((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v11) {
    CFRelease(v11);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::NetworkLoad *)((char *)this + 120));
  uint64_t v13 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v13) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v13, v12);
  }
  uint64_t v14 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v14) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v14, v12);
  }
  uint64_t v15 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v15 && atomic_fetch_add((atomic_uint *volatile)v15 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v15 + 32);
    (*(void (**)(unsigned int *))(*(void *)v15 + 8))(v15);
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v12);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::NetworkLoad::~NetworkLoad(this, a2);

  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebKit::NetworkLoadScheduler::unschedule(WTF ***this, WebKit::NetworkLoad *a2, const WTF::String **a3)
{
  if (WebCore::ResourceRequestBase::isTopSite((WebKit::NetworkLoad *)((char *)a2 + 3024)))
  {
    return WebKit::NetworkLoadScheduler::unscheduleMainResourceLoad(this, a2, a3);
  }
  uint64_t result = (WTF::StringImpl *)WebKit::NetworkLoadScheduler::contextForLoad((WebKit::NetworkLoadScheduler *)this, a2);
  if (!result) {
    return result;
  }
  uint64_t v8 = (uint64_t)result;
  unsigned int v9 = *((_DWORD *)result + 3);
  unsigned int v10 = *((_DWORD *)result + 2) + 1;
  *((_DWORD *)result + objc_destroyWeak(this + 2) = v10;
  if (v10 > v9)
  {
    _ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN6WebKit11NetworkLoadES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((unsigned int **)result, v7);
    *(_DWORD *)(v8 + 8) = 0;
    uint64_t v17 = *(void *)v8;
    if (*(void *)v8)
    {
      LODWORD(v17) = *(_DWORD *)(v17 - 12);
      if (v17 > 0x7FFFFFFE) {
        LODWORD(v17) = 0x7FFFFFFF;
      }
    }
    *(_DWORD *)(v8 + 1objc_destroyWeak(this + 2) = 2 * v17;
  }
  uint64_t v11 = *((void *)a2 + 1);
  if (v11 && *(void *)(v11 + 8))
  {
    uint64_t v18 = *((void *)a2 + 1);
    uint64_t v12 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)v8, &v18);
    if (*(void *)v8)
    {
      uint64_t v13 = *(void *)v8 + 8 * *(unsigned int *)(*(void *)v8 - 4);
      if ((unsigned int **)v13 == v12) {
        goto LABEL_11;
      }
    }
    else
    {
      if (!v12) {
        goto LABEL_11;
      }
      uint64_t v13 = 0;
    }
    if ((unsigned int **)v13 != v12) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)v8, v12);
    }
  }
LABEL_11:
  WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::NetworkLoad>(v8 + 16, (uint64_t)a2);
  uint64_t result = (WTF::StringImpl *)WTF::WeakHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(v8, v14);
  if (result <= 1)
  {
    uint64_t v15 = *(void **)(v8 + 24);
    if (v15)
    {
      while (1)
      {
        unint64_t v16 = *(WebKit::NetworkLoad **)(*v15 + 8);
        if (v16) {
          break;
        }
        uint64_t v15 = (void *)v15[2];
        if (!v15) {
          return result;
        }
      }
      WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove(v8 + 16, v8 + 16, v15);
      return (WTF::StringImpl *)WebKit::NetworkLoadScheduler::HostContext::start((WebKit::NetworkLoadScheduler::HostContext *)v8, v16);
    }
  }
  return result;
}

void WebKit::NetworkLoad::updateRequestAfterRedirection(const String *this, WebCore::ResourceRequest *a2)
{
  WebCore::ResourceRequest::ResourceRequest(v15, this + 378);
  uint64_t v3 = WebCore::ResourceRequest::nsURLRequest();
  MEMORY[0x199732A50](v22, v3);
  WebCore::ResourceRequest::updateFromDelegatePreservingOldProperties((WebCore::ResourceRequest *)v15, (const WebCore::ResourceRequest *)v22);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v22);
  WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)a2, (uint64_t)v15);
  uint64_t v6 = v16;
  uint64_t v16 = 0;
  uint64_t v7 = (WTF::StringImpl *)*((void *)a2 + 19);
  *((void *)a2 + 19) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = v17;
  uint64_t v17 = 0;
  unsigned int v9 = (WTF::StringImpl *)*((void *)a2 + 20);
  *((void *)a2 + 20) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v5);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = v18;
  uint64_t v18 = 0;
  uint64_t v11 = (WTF::RefCountedBase *)*((void *)a2 + 21);
  *((void *)a2 + 21) = v10;
  if (v11) {
    WTF::RefCounted<WebCore::FormData>::deref(v11);
  }
  *((void *)a2 + 2objc_destroyWeak(this + 2) = v19;
  *((unsigned char *)a2 + 184) = v20;
  CFTypeRef v12 = v21;
  CFTypeRef v21 = 0;
  uint64_t v13 = (const void *)*((void *)a2 + 24);
  *((void *)a2 + 24) = v12;
  if (v13)
  {
    CFRelease(v13);
    CFTypeRef v14 = v21;
    CFTypeRef v21 = 0;
    if (v14) {
      CFRelease(v14);
    }
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v15);
}

uint64_t WebKit::NetworkLoad::reprioritizeRequest(uint64_t a1)
{
  WebCore::ResourceRequestBase::setPriority();
  uint64_t result = *(void *)(a1 + 3008);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 80);
    return v3();
  }
  return result;
}

uint64_t WebKit::NetworkLoad::shouldCaptureExtraNetworkLoadMetrics(WebKit::NetworkLoad *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 104))();
}

WTF::StringImpl *WebKit::NetworkLoad::convertTaskToDownload(uint64_t a1, WebKit::PendingDownload *a2, uint64_t a3, WebCore::ResourceResponseBase *a4, uint64_t *a5)
{
  if (*(void *)(a1 + 3008))
  {
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = a2;
    WebCore::ResourceRequestBase::operator=(a1 + 3024, a3);
    uint64_t v10 = *(const void **)(a3 + 192);
    if (v10) {
      CFRetain(v10);
    }
    uint64_t v11 = *(const void **)(a1 + 3216);
    *(void *)(a1 + 32++*(_DWORD *)(this + 16) = v10;
    if (v11) {
      CFRelease(v11);
    }
    WebKit::NetworkDataTask::setPendingDownload(*(WebKit::NetworkDataTask **)(a1 + 3008), a2);
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t v13 = *(void *)(a1 + 3008);
    return WebKit::NetworkProcess::findPendingDownloadLocation(v12, v13, a5, a4);
  }
  else
  {
    uint64_t v15 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, 2);
    uint64_t v16 = *(uint64_t (**)(uint64_t))(*(void *)v15 + 8);
    return (WTF::StringImpl *)v16(v15);
  }
}

WTF::StringImpl *WebKit::NetworkProcess::findPendingDownloadLocation(uint64_t a1, uint64_t a2, uint64_t *a3, WebCore::ResourceResponseBase *a4)
{
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(void *)a2 + 56))(&v20, a2);
  uint64_t v8 = *(os_unfair_lock_s **)(a1 + 40);
  atomic_fetch_add((atomic_uint *volatile)(a1 + 128), 1u);
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t result = (WTF::StringImpl *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a2 + 8));
  uint64_t v11 = *(void *)(a2 + 40);
  if (v11)
  {
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x28);
    *uint64_t v12 = &unk_1EE9C4678;
    v12[1] = a1;
    uint64_t v12[2] = a1;
    __n128 v12[3] = v9;
    v12[4] = a2;
    uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    CFTypeRef v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)CFTypeRef v14 = 10;
    *((void *)v14 + 1) = v11;
    *((void *)v14 + 66) = (char *)v14 + 16;
    *((void *)v14 + 67) = 512;
    *((void *)v14 + 68) = 0;
    *((void *)v14 + 70) = 0;
    *((void *)v14 + 69) = 0;
    IPC::Encoder::encodeHeader(v14);
    long long v22 = v14;
    IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v14, a4);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, (uint64_t *)&v20);
    v21[0] = (uint64_t)v12;
    v21[1] = v13;
    IPC::Connection::sendMessageWithAsyncReply(v8, &v22, v21, 0, 0);
    uint64_t v16 = v21[0];
    v21[0] = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t v17 = v22;
    long long v22 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v15);
      WTF::fastFree(v18, v19);
    }
    uint64_t result = v20;
    char v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v15);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void WebKit::NetworkLoad::willPerformHTTPRedirection(uint64_t a1, uint64_t a2, CFTypeRef *this, uint64_t *a4)
{
  if (!*(unsigned char *)(*(void *)(a1 + 24) + 409))
  {
    uint64_t v8 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)this);
    if (WTF::URL::protocolIsInFTPFamily(v8))
    {
      uint64_t v10 = *(void *)(a1 + 3008);
      uint64_t v11 = *(unsigned int **)(v10 + 24);
      *(void *)(v10 + 24) = 0;
      if (v11 && atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v9);
      }
      uint64_t v12 = *(void *)(a1 + 3008);
      *(void *)(a1 + 3008) = 0;
      if (v12) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v12 + 8));
      }
      WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v66);
      uint64_t v13 = *(void *)(MEMORY[0x1E4FB64F8] + 8);
      if (v13)
      {
        if (v13 == 1)
        {
          CFTypeRef v14 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
          *MEMORY[0x1E4F30960] += 2;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          CFTypeRef v14 = v43;
        }
      }
      else
      {
        CFTypeRef v14 = 0;
      }
      uint64_t v15 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 120));
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v16 = v43;
      if (v14) {
        *(_DWORD *)v14 += 2;
      }
      uint64_t v43 = v14;
      uint64_t v17 = *(WTF::StringImpl **)v15;
      if (*(void *)v15) {
        *(_DWORD *)v17 += 2;
      }
      char v44 = v17;
      long long v18 = *(_OWORD *)(v15 + 8);
      long long v46 = *(_OWORD *)(v15 + 24);
      long long v45 = v18;
      if (v16) {
        *(_DWORD *)v16 += 2;
      }
      long long v47 = v16;
      int v48 = 0;
      __int16 v49 = 2;
      CFTypeRef v50 = 0;
      char v51 = 1;
      WebKit::NetworkLoad::didCompleteWithError((WebKit::NetworkLoad *)a1, (const WebCore::ResourceError *)&v43, v66);
      CFTypeRef v20 = v50;
      CFTypeRef v50 = 0;
      if (v20) {
        CFRelease(v20);
      }
      CFTypeRef v21 = v47;
      long long v47 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v19);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      uint64_t v37 = v44;
      char v44 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2) {
          WTF::StringImpl::destroy(v37, v19);
        }
        else {
          *(_DWORD *)v37 -= 2;
        }
      }
      uint64_t v38 = v43;
      uint64_t v43 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
        {
          WTF::StringImpl::destroy(v38, v19);
          if (!v16) {
            goto LABEL_47;
          }
LABEL_45:
          if (*(_DWORD *)v16 == 2)
          {
            WTF::StringImpl::destroy(v16, v19);
            if (!v14)
            {
LABEL_53:
              if (*a4)
              {
                WebCore::ResourceRequest::ResourceRequest((StringImpl *)&v43);
                uint64_t v39 = *a4;
                *a4 = 0;
                (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v39 + 16))(v39, &v43);
                (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
                CFTypeRef v40 = cf;
                CFTypeRef cf = 0;
                if (v40) {
                  CFRelease(v40);
                }
                WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v43);
              }
              BOOL v41 = v68;
              long long v68 = 0;
              if (v41) {
                WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v41);
              }
              uint64_t v42 = v67;
              long long v67 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2) {
                  WTF::StringImpl::destroy(v42, v19);
                }
                else {
                  *(_DWORD *)v42 -= 2;
                }
              }
              return;
            }
LABEL_50:
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v19);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
            goto LABEL_53;
          }
          *(_DWORD *)v16 -= 2;
LABEL_47:
          if (!v14) {
            goto LABEL_53;
          }
          goto LABEL_50;
        }
        *(_DWORD *)v38 -= 2;
      }
      if (!v16) {
        goto LABEL_47;
      }
      goto LABEL_45;
    }
  }
  *(_WORD *)(a2 + 23objc_destroyWeak(this + 2) = *(_WORD *)(a2 + 232) & 0xC3FF | 0x400;
  WTF::URL::URL((uint64_t)&v43, (uint64_t *)(a1 + 3024));
  WTF::URL::URL((uint64_t)&v46 + 8, (uint64_t *)(a1 + 3064));
  uint64_t v52 = *(void *)(a1 + 3104);
  long long v22 = *(_OWORD *)(a1 + 3112);
  *(_OWORD *)(a1 + 311objc_destroyWeak(this + 2) = 0u;
  long long v53 = v22;
  *(void *)&long long v22 = *(void *)(a1 + 3128);
  *(void *)(a1 + 3128) = 0;
  uint64_t v54 = v22;
  uint64_t v23 = *(void *)(a1 + 3136);
  *(void *)(a1 + 3136) = 0;
  uint64_t v55 = v23;
  *(void *)&long long v22 = *(void *)(a1 + 3144);
  *(void *)(a1 + 3144) = 0;
  uint64_t v56 = v22;
  uint64_t v24 = *(void *)(a1 + 3152);
  *(void *)(a1 + 315objc_destroyWeak(this + 2) = 0;
  uint64_t v57 = v24;
  *(void *)&long long v22 = *(void *)(a1 + 3160);
  *(void *)(a1 + 3160) = 0;
  uint64_t v58 = v22;
  LODWORD(v24) = *(_DWORD *)(a1 + 3168);
  char v60 = *(unsigned char *)(a1 + 3172);
  int v59 = v24;
  long long v25 = *(_OWORD *)(a1 + 3176);
  *(_OWORD *)(a1 + 3176) = 0u;
  long long v61 = v25;
  uint64_t v26 = *(void *)(a1 + 3192);
  *(void *)(a1 + 319objc_destroyWeak(this + 2) = 0;
  uint64_t v27 = *(void *)(a1 + 3200);
  char v64 = *(unsigned char *)(a1 + 3208);
  uint64_t v62 = v26;
  uint64_t v63 = v27;
  char v28 = *(const void **)(a1 + 3216);
  *(void *)(a1 + 32++*(_DWORD *)(this + 16) = 0;
  CFTypeRef cf = v28;
  *((unsigned char *)this + 147) = HIBYTE(v59);
  WebCore::ResourceRequestBase::operator=(a1 + 3024, (uint64_t)this);
  CFTypeRef v29 = this[24];
  if (v29) {
    CFRetain(this[24]);
  }
  uint64_t v30 = *(const void **)(a1 + 3216);
  *(void *)(a1 + 32++*(_DWORD *)(this + 16) = v29;
  if (v30) {
    CFRelease(v30);
  }
  uint64_t v31 = *(void *)(a1 + 16);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v32 = *(atomic_uint **)(a1 + 8);
  if (v32) {
    atomic_fetch_add(v32, 1u);
  }
  uint64_t v33 = *a4;
  *a4 = 0;
  uint64_t v34 = (const WTF::String *)WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v34 = &unk_1EE9C3AF0;
  *((void *)v34 + 1) = a1;
  *((void *)v34 + objc_destroyWeak(this + 2) = v32;
  *((void *)v34 + 3) = v33;
  v66[0] = v34;
  (*(void (**)(uint64_t, WTF::StringImpl **, CFTypeRef *, uint64_t, const WTF::String **))(*(void *)v31 + 40))(v31, &v43, this, a2, v66);
  uint64_t v35 = v66[0];
  v66[0] = 0;
  if (v35) {
    (*(void (**)(const WTF::String *))(*(void *)v35 + 8))(v35);
  }
  CFTypeRef v36 = cf;
  CFTypeRef cf = 0;
  if (v36) {
    CFRelease(v36);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v43);
}

uint64_t WebKit::NetworkLoad::didCompleteWithError(WebKit::NetworkLoad *this, const WebCore::ResourceError *a2, const WTF::String **a3)
{
  uint64_t v5 = *((void *)this + 377);
  if (v5)
  {
    uint64_t v6 = *(WTF ****)(v5 + 8);
    if (v6)
    {
      WebKit::NetworkLoadScheduler::unschedule(v6, this, a3);
      uint64_t v8 = (unsigned int *)*((void *)this + 377);
      *((void *)this + 377) = 0;
      if (v8)
      {
        if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, v7);
        }
      }
    }
  }
  uint64_t v9 = **((void **)this + 2);
  if (*((unsigned char *)a2 + 60))
  {
    uint64_t v10 = *(uint64_t (**)(void))(v9 + 80);
  }
  else
  {
    uint64_t v10 = *(uint64_t (**)(void))(v9 + 72);
  }
  return v10();
}

WTF::StringImpl *WebKit::NetworkLoad::didReceiveChallenge(uint64_t a1, WebCore::AuthenticationChallengeBase *a2, char a3, uint64_t *a4)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16));
  int v8 = *(unsigned __int8 *)(WebCore::AuthenticationChallengeBase::protectionSpace(a2) + 21);
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16)) & 1) != 0
    || (v8 - 7) < 2
    || (uint64_t v9 = (WebCore::ProtectionSpaceBase *)WebCore::AuthenticationChallengeBase::protectionSpace(a2),
        (WebCore::ProtectionSpaceBase::isProxy(v9) & 1) != 0))
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 3008) + 32);
    if (v10 && (uint64_t v11 = *(void *)(v10 + 8)) != 0)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(a1 + 24) + 208);
      uint64_t v23 = (WTF::StringImpl *)"AuthenticationManager";
      uint64_t v24 = (WTF::StringImpl *)22;
      uint64_t v13 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v12, (WTF::ASCIILiteralHash *)&v23);
      return (WTF::StringImpl *)WebKit::AuthenticationManager::didReceiveAuthenticationChallenge((uint64_t)v13, v11 + 8, a2, a4);
    }
    else
    {
      uint64_t v15 = (uint64_t *)(*(void *)(a1 + 24) + 208);
      uint64_t v23 = (WTF::StringImpl *)"AuthenticationManager";
      uint64_t v24 = (WTF::StringImpl *)22;
      uint64_t v16 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v15, (WTF::ASCIILiteralHash *)&v23);
      uint64_t v17 = *(void *)(a1 + 64);
      if (v17) {
        uint64_t v18 = v17 + 8;
      }
      else {
        uint64_t v18 = 0;
      }
      return (WTF::StringImpl *)WebKit::AuthenticationManager::didReceiveAuthenticationChallenge((uint64_t)v16, *(void *)(*(void *)(*(void *)(*(void *)(a1 + 3008) + 16) + 8) + 24), *(void *)(a1 + 32), v18, a2, a3, a4);
    }
  }
  else
  {
    (*(void (**)(void))(**(void **)(a1 + 16) + 88))(*(void *)(a1 + 16));
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v23);
    CFTypeRef cf = 0;
    uint64_t v19 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void, WTF::StringImpl **))(*(void *)v19 + 16))(v19, 0, &v23);
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    CFTypeRef v21 = cf;
    CFTypeRef cf = 0;
    if (v21) {
      CFRelease(v21);
    }
    long long v22 = v24;
    uint64_t v24 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v20);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    uint64_t result = v23;
    uint64_t v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::NetworkLoad::didReceiveInformationalResponse(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

WTF::StringImpl *WebKit::NetworkLoad::didReceiveResponse(uint64_t a1, WebCore::ResourceResponseBase *a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = *(void *)(a1 + 3008);
  if (v9 && *(void *)(v9 + 40))
  {
    uint64_t v12 = *(void *)(a1 + 24);
    return WebKit::NetworkProcess::findPendingDownloadLocation(v12, v9, a5, a2);
  }
  else
  {
    if (a3)
    {
      uint64_t v13 = (uint64_t *)(*(void *)(a1 + 24) + 208);
      v15[0] = "AuthenticationManager";
      v15[1] = 22;
      CFTypeRef v14 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v13, (WTF::ASCIILiteralHash *)v15);
      WebKit::AuthenticationManager::negotiatedLegacyTLS((uint64_t)v14, *(void *)(a1 + 32));
    }
    if (*(unsigned char *)(a1 + 325))
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 24) + 40);
      if (v11 && *(void *)(v11 + 352))
      {
        xpc_connection_get_audit_token();
        char v16 = 1;
      }
      else
      {
        LOBYTE(v15[0]) = 0;
        char v16 = 0;
      }
      WebCore::ResourceResponseBase::includeCertificateInfo();
    }
    return (WTF::StringImpl *)(*(uint64_t (**)(void, WebCore::ResourceResponseBase *, uint64_t, uint64_t *))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), a2, a4, a5);
  }
}

uint64_t WebKit::NetworkLoad::didReceiveData(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 16) + 64))(*(void *)(a1 + 16), a2, *(void *)(a2 + 48));
}

uint64_t WebKit::NetworkLoad::didSendData(WebKit::NetworkLoad *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 32))();
}

WTF::StringImpl *WebKit::NetworkLoad::wasBlocked(WebKit::NetworkLoad *this)
{
  uint64_t v1 = *((void *)this + 2);
  WebKit::blockedError((WebKit::NetworkLoad *)((char *)this + 3024), (uint64_t)&v7);
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v1 + 80))(v1, &v7);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
  CFTypeRef v4 = v9;
  uint64_t v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = v8;
  int v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkLoad::cannotShowURL(WebKit::NetworkLoad *this)
{
  uint64_t v1 = *((void *)this + 2);
  WebKit::cannotShowURLError((WebKit::NetworkLoad *)((char *)this + 3024), (uint64_t)&v7);
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v1 + 80))(v1, &v7);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
  CFTypeRef v4 = v9;
  uint64_t v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = v8;
  int v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkLoad::wasBlockedByRestrictions(WebKit::NetworkLoad *this)
{
  uint64_t v1 = *((void *)this + 2);
  WebKit::wasBlockedByRestrictionsError((WebKit::NetworkLoad *)((char *)this + 3024), (uint64_t)&v7);
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v1 + 80))(v1, &v7);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
  CFTypeRef v4 = v9;
  uint64_t v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = v8;
  int v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkLoad::wasBlockedByDisabledFTP(WebKit::NetworkLoad *this)
{
  uint64_t v1 = *((void *)this + 2);
  WebKit::ftpDisabledError((WebKit::NetworkLoad *)((char *)this + 3024), (uint64_t)&v7);
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v1 + 80))(v1, &v7);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
  CFTypeRef v4 = v9;
  uint64_t v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = v8;
  int v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Encoder *WebKit::NetworkLoad::didNegotiateModernTLS(IPC::Encoder *this, const WTF::URL *a2)
{
  uint64_t v2 = (uint64_t *)((char *)this + 32);
  if (*((void *)this + 4))
  {
    CFTypeRef v4 = (void *)*((void *)this + 3);
    uint64_t v5 = v4[3];
    v4 += 3;
    uint64_t v6 = (*(uint64_t (**)(void *))(v5 + 56))(v4);
    uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v7 = 326;
    *((void *)v7 + 1) = v6;
    *((void *)v7 + 66) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    uint64_t v11 = v7;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, v2);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a2);
    (*(void (**)(void *, IPC::Encoder **, void))(*v4 + 32))(v4, &v11, 0);
    this = v11;
    uint64_t v11 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v8);
      return (IPC::Encoder *)WTF::fastFree(v9, v10);
    }
  }
  return this;
}

uint64_t WebKit::NetworkLoad::description@<X0>(WebKit::NetworkLoad *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 376);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  CFTypeRef v3 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v3 += 2;
  }
  *a2 = v3;
  return result;
}

uint64_t WebKit::NetworkLoad::setH2PingCallback(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 3008);
  if (v4)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 72);
    return v5();
  }
  else
  {
    WebCore::createInternalError();
    __int16 v20 = v13;
    int v19 = v12;
    v17[0] = *(_OWORD *)v8;
    v17[1] = v9;
    v17[2] = v10;
    uint64_t v18 = v11;
    CFTypeRef v21 = cf;
    char v22 = v15;
    int v23 = 1;
    uint64_t v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v7 + 16))(v7, v17);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    if (v23 != -1) {
      ((void (*)(char *, _OWORD *))off_1EE9C39C0[v23])(&v16, v17);
    }
    return 0;
  }
}

_DWORD **WebKit::NetworkLoad::attributedBundleIdentifier@<X0>(_DWORD **result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  CFTypeRef v3 = result[376];
  if (v3 && (v4 = *((void *)v3 + 2)) != 0 && (uint64_t v5 = *(void *)(v4 + 8)) != 0)
  {
    uint64_t v6 = a2;
    return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((_DWORD **)(v5 + 1072), &v6, a3);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t WebKit::NetworkLoadChecker::NetworkLoadChecker(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, char a14, uint64_t *a15, char a16, int a17, __int16 a18, int a19, char a20,char a21)
{
  *(void *)a1 = 0;
  int v24 = *a5;
  *(_DWORD *)(a1 + 19) = *(int *)((char *)a5 + 3);
  *(_DWORD *)(a1 + ++*(_DWORD *)(this + 16) = v24;
  uint64_t v25 = *((void *)a5 + 1);
  *((void *)a5 + 1) = 0;
  *(void *)(a1 + 24) = v25;
  long long v26 = *((_OWORD *)a5 + 2);
  *(_OWORD *)(a1 + 3objc_destroyWeak(this + 2) = *((_OWORD *)a5 + 1);
  *(_OWORD *)(a1 + 48) = v26;
  *(unsigned char *)(a1 + 65) = a16;
  *(_WORD *)(a1 + 66) = a18;
  *(void *)(a1 + 7objc_destroyWeak(this + 2) = a6;
  atomic_fetch_add((atomic_uint *volatile)(a2 + 128), 1u);
  *(void *)(a1 + 80) = a2;
  *(void *)(a1 + 88) = a7;
  *(_OWORD *)(a1 + 96) = 0u;
  uint64_t v27 = *a8;
  *a8 = 0;
  *(void *)(a1 + 96) = v27;
  LODWORD(v27) = *((_DWORD *)a8 + 2);
  *((_DWORD *)a8 + objc_destroyWeak(this + 2) = 0;
  *(_DWORD *)(a1 + 104) = v27;
  LODWORD(v27) = *((_DWORD *)a8 + 3);
  *((_DWORD *)a8 + 3) = 0;
  *(_DWORD *)(a1 + 108) = v27;
  *(_OWORD *)(a1 + 11objc_destroyWeak(this + 2) = 0u;
  uint64_t v28 = a8[2];
  a8[2] = 0;
  *(void *)(a1 + 11objc_destroyWeak(this + 2) = v28;
  LODWORD(v28) = *((_DWORD *)a8 + 6);
  *((_DWORD *)a8 + 6) = 0;
  *(_DWORD *)(a1 + 120) = v28;
  LODWORD(v28) = *((_DWORD *)a8 + 7);
  *((_DWORD *)a8 + 7) = 0;
  *(_DWORD *)(a1 + 124) = v28;
  WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::HTTPHeaderMap *)(a1 + 128));
  WTF::URL::URL(a1 + 160, a9);
  WTF::URL::URL(a1 + 200, a10);
  uint64_t v29 = *a11;
  *a11 = 0;
  *(void *)(a1 + 240) = v29;
  uint64_t v30 = *a12;
  *a12 = 0;
  *(void *)(a1 + 248) = v30;
  uint64_t v31 = *a13;
  *a13 = 0;
  *(void *)(a1 + 256) = v31;
  *(unsigned char *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(_WORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_WORD *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  WTF::URL::invalidate((WTF::URL *)(a1 + 344));
  *(void *)(a1 + 384) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 384));
  *(unsigned char *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 43objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 440) = 0;
  *(_WORD *)(a1 + 448) = 257;
  *(void *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  WTF::URL::invalidate((WTF::URL *)(a1 + 472));
  *(unsigned char *)(a1 + 51objc_destroyWeak(this + 2) = a14;
  uint64_t v32 = *a15;
  *a15 = 0;
  *(void *)(a1 + 520) = v32;
  *(unsigned char *)(a1 + 528) = 0;
  *(unsigned char *)(a1 + 529) = a20;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 536));
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 736));
  *(void *)(a1 + 976) = 0;
  *(unsigned char *)(a1 + 984) = 0;
  *(unsigned char *)(a1 + 874) = *(unsigned char *)(a1 + 874) & 0xF1 | 4;
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)(a1 + 992));
  *(_OWORD *)(a1 + 1120) = 0u;
  *(unsigned char *)(a1 + 1136) = a21;
  if (a4) {
    ++*a4;
  }
  *(void *)(a1 + 1144) = a4;
  if (a3)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 56), a3 + 48);
    uint64_t v34 = *(atomic_uint **)(a3 + 56);
    if (v34) {
      atomic_fetch_add(v34, 1u);
    }
  }
  else
  {
    uint64_t v34 = 0;
  }
  *(void *)(a1 + 115objc_destroyWeak(this + 2) = v34;
  *(unsigned char *)(a1 + 1160) = 0;
  if (!*(unsigned char *)(a1 + 1136))
  {
    uint64_t v38 = *(atomic_uint **)(a1 + 248);
    if (v38) {
      atomic_fetch_add(v38, 1u);
    }
    uint64_t v39 = *(void *)(a1 + 240);
    *(void *)(a1 + 240) = v38;
    if (v39) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v39, v33);
    }
  }
  char isSameOrigin = WebKit::NetworkLoadChecker::isSameOrigin((WebKit::NetworkLoadChecker *)a1, (const WTF::URL *)(a1 + 160), *(const WebCore::SecurityOrigin **)(a1 + 240));
  *(unsigned char *)(a1 + 448) = isSameOrigin;
  int v36 = *((unsigned __int8 *)a5 + 2);
  if (v36 == 2)
  {
    char isSameOrigin = 1;
  }
  else if (v36 != 1)
  {
    if (*((unsigned char *)a5 + 2)) {
      return a1;
    }
    char isSameOrigin = 0;
  }
  *(unsigned char *)(a1 + 64) = isSameOrigin;
  return a1;
}

uint64_t WebKit::NetworkLoadChecker::isSameOrigin(WebKit::NetworkLoadChecker *this, const WTF::URL *a2, const WebCore::SecurityOrigin *a3)
{
  if (WTF::URL::protocolIs()) {
    return 1;
  }
  uint64_t v5 = WTF::URL::protocolIs();
  if (!a3 || (v5 & 1) != 0) {
    return 1;
  }
  uint64_t v6 = *((void *)this + 144);
  if (!v6 || !*(void *)(v6 + 8)) {
    WebCore::EmptyOriginAccessPatterns::singleton((WebCore::EmptyOriginAccessPatterns *)v5);
  }

  return WebCore::SecurityOrigin::canRequest();
}

void WebKit::NetworkLoadChecker::~NetworkLoadChecker(WebKit::NetworkLoadChecker *this, void *a2)
{
  CFTypeRef v3 = (unsigned int *)*((void *)this + 144);
  *((void *)this + 144) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (WTF::StringImpl ***)*((void *)this + 143);
  *((void *)this + 143) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::NetworkSchemeRegistry>::deref(v4, (WTF::StringImpl *)a2);
  }
  WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 1120, a2);
  uint64_t v6 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((void *)this + 139);
  *((void *)this + 139) = 0;
  if (v6) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v6);
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 135);
  *((void *)this + 135) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  int v8 = (const void *)*((void *)this + 122);
  *((void *)this + 12objc_destroyWeak(this + 2) = 0;
  if (v8) {
    CFRelease(v8);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::NetworkLoadChecker *)((char *)this + 736), v5);
  long long v9 = (const void *)*((void *)this + 91);
  *((void *)this + 91) = 0;
  if (v9) {
    CFRelease(v9);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::NetworkLoadChecker *)((char *)this + 536));
  uint64_t v11 = (WTF::StringImpl *)*((void *)this + 65);
  *((void *)this + 65) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  int v12 = (WTF::StringImpl *)*((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = *((void *)this + 57);
  *((void *)this + 57) = 0;
  if (v13) {
    WebCore::ContentSecurityPolicy::operator delete(v13, 0xF0uLL);
  }
  std::unique_ptr<WebKit::NetworkCORSPreflightChecker>::reset[abi:sn180100]((WebKit::NetworkCORSPreflightChecker **)this + 55, 0);
  char v15 = (WTF::StringImpl *)*((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  char v16 = (WTF::StringImpl *)*((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v14);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = (WTF::StringImpl *)*((void *)this + 42);
  *((void *)this + 4objc_destroyWeak(this + 2) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v14);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t v18 = (WTF::StringImpl *)*((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v14);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  int v19 = (WTF::StringImpl *)*((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v14);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  __int16 v20 = (WTF::StringImpl *)*((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v14);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  if (*((unsigned char *)this + 288)) {
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 264, v14);
  }
  uint64_t v21 = *((void *)this + 32);
  *((void *)this + 3objc_destroyWeak(this + 2) = 0;
  if (v21) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v21, v14);
  }
  uint64_t v22 = *((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v22) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v22, v14);
  }
  uint64_t v23 = *((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v23) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v23, v14);
  }
  int v24 = (WTF::StringImpl *)*((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v14);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  uint64_t v25 = (WTF::StringImpl *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v14);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WebKit::NetworkLoadChecker *)((char *)this + 144));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WebKit::NetworkLoadChecker *)((char *)this + 128));
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WebKit::NetworkLoadChecker *)((char *)this + 112));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WebKit::NetworkLoadChecker *)((char *)this + 96));
  uint64_t v27 = (unsigned int *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v27 && atomic_fetch_add((atomic_uint *volatile)v27 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v27 + 32);
    (*(void (**)(unsigned int *))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v26);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  if (*(void *)this)
  {
    *(void *)(*(void *)this + 8) = 0;
    uint64_t v29 = *(unsigned int **)this;
    *(void *)this = 0;
    if (v29)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v29);
        WTF::fastFree((WTF *)v29, v26);
      }
    }
  }
  else
  {
    *(void *)this = 0;
  }
}

void WebKit::NetworkLoadChecker::check(uint64_t a1, WebCore::ResourceRequestBase *this, uint64_t a3, WTF **a4)
{
  if (*(unsigned char *)(a1 + 529)) {
    WebCore::ResourceRequest::operator=(a1 + 536, (uint64_t)this);
  }
  uint64_t v8 = WebCore::ResourceRequestBase::httpHeaderFields(this);
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=(a1 + 128, v8);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=(a1 + 144, v8 + 16);

  WebKit::NetworkLoadChecker::checkRequest(a1, (uint64_t)this, a3, a4);
}

void WebKit::NetworkLoadChecker::checkRequest(uint64_t a1, uint64_t a2, uint64_t a3, WTF **a4)
{
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&v97, (const String *)a2);
  uint64_t v8 = WebKit::NetworkLoadChecker::contentSecurityPolicy((WebCore::SecurityOrigin **)a1);
  if (!v8)
  {
LABEL_20:
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
    uint64_t v21 = *(WebCore::SecurityOrigin **)a1;
    if (*(void *)a1) {
      atomic_fetch_add((atomic_uint *volatile)v21, 1u);
    }
    uint64_t v22 = *a4;
    *a4 = 0;
    v71[0] = v21;
    v71[1] = v22;
    uint64_t v23 = v97;
    uint64_t v24 = v100;
    uint64_t v97 = 0;
    uint64_t v72 = v23;
    long long v73 = v98;
    long long v74 = v99;
    LODWORD(v98) = v98 & 0xFFFFFFFE;
    uint64_t v100 = 0;
    uint64_t v75 = v24;
    long long v76 = v101;
    long long v77 = v102;
    LODWORD(v101) = v101 & 0xFFFFFFFE;
    uint64_t v25 = v105;
    uint64_t v78 = v103;
    long long v26 = v104;
    long long v104 = 0u;
    long long v79 = v26;
    uint64_t v105 = 0;
    uint64_t v80 = v25;
    uint64_t v27 = v106;
    uint64_t v106 = 0;
    uint64_t v81 = v27;
    *(void *)&long long v26 = v107;
    uint64_t v107 = 0;
    uint64_t v82 = v26;
    uint64_t v28 = v108;
    uint64_t v108 = 0;
    uint64_t v83 = v28;
    *(void *)&long long v26 = v109;
    uint64_t v109 = 0;
    uint64_t v84 = v26;
    char v86 = v111;
    int v85 = v110;
    long long v29 = v112;
    long long v112 = 0u;
    long long v87 = v29;
    char v90 = v115;
    uint64_t v88 = v113;
    uint64_t v89 = v114;
    CFTypeRef v30 = cf;
    uint64_t v113 = 0;
    CFTypeRef cf = 0;
    CFTypeRef v91 = v30;
    uint64_t v31 = WTF::fastMalloc((WTF *)0xE0);
    *(void *)uint64_t v31 = &unk_1EE9C3B40;
    *(WTF **)(v31 + 8) = v71[0];
    uint64_t v32 = v71[1];
    *(_OWORD *)__int16 v71 = 0u;
    *(void *)(v31 + ++*(_DWORD *)(this + 16) = v32;
    WTF::URL::URL(v31 + 24, &v72);
    WTF::URL::URL(v31 + 64, &v75);
    *(void *)(v31 + 104) = v78;
    *(void *)(v31 + 11objc_destroyWeak(this + 2) = v79;
    uint64_t v33 = *((void *)&v79 + 1);
    long long v79 = 0u;
    *(void *)(v31 + 120) = v33;
    uint64_t v34 = v80;
    uint64_t v80 = 0;
    *(void *)(v31 + 128) = v34;
    uint64_t v35 = v81;
    uint64_t v81 = 0;
    *(void *)(v31 + 136) = v35;
    uint64_t v36 = v82;
    uint64_t v82 = 0;
    *(void *)(v31 + 144) = v36;
    uint64_t v37 = v83;
    uint64_t v83 = 0;
    *(void *)(v31 + 15objc_destroyWeak(this + 2) = v37;
    uint64_t v38 = v84;
    uint64_t v84 = 0;
    *(void *)(v31 + 160) = v38;
    LODWORD(v37) = v85;
    *(unsigned char *)(v31 + 17objc_destroyWeak(this + 2) = v86;
    *(_DWORD *)(v31 + 168) = v37;
    *(void *)(v31 + 176) = v87;
    uint64_t v39 = *((void *)&v87 + 1);
    long long v87 = 0u;
    *(void *)(v31 + 184) = v39;
    *(void *)(v31 + 19objc_destroyWeak(this + 2) = v88;
    uint64_t v40 = v89;
    *(unsigned char *)(v31 + 208) = v90;
    *(void *)(v31 + 200) = v40;
    CFTypeRef v41 = v91;
    uint64_t v88 = 0;
    CFTypeRef v91 = 0;
    *(void *)(v31 + 2++*(_DWORD *)(this + 16) = v41;
    if (*(unsigned char *)(a1 + 528) && *(unsigned char *)(a1 + 432) && *(unsigned char *)(a1 + 17))
    {
      long long v67 = (uint64_t *)(*(void *)(a1 + 80) + 256);
      uint64_t v68 = *(void *)(a1 + 424);
      uint64_t v92 = (WTF::StringImpl *)a1;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
      char v69 = *(WebCore::SecurityOrigin **)a1;
      if (*(void *)a1) {
        atomic_fetch_add((atomic_uint *volatile)v69, 1u);
      }
      *(void *)&v93[0] = v69;
      std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v93 + 8, a2);
      uint64_t v95 = v31;
      WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>::CompletionHandler<WebKit::NetworkLoadChecker::processContentRuleListsForLoad(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebCore::ResourceError> &&)> &&)::$_0,void>(v117, (uint64_t *)&v92);
      WebKit::NetworkContentRuleListManager::contentExtensionsBackend(v67, v68, v117);
      uint64_t v70 = v117[0];
      v117[0] = 0;
      if (v70) {
        (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
      }
      WebKit::NetworkLoadChecker::processContentRuleListsForLoad(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebCore::ResourceError> &&)> &&)::$_0::~$_0(&v92);
    }
    else
    {
      int v133 = 0;
      long long v134 = 0uLL;
      long long v135 = 0uLL;
      long long v136 = 0uLL;
      WTF::URL::URL((uint64_t)v117, (uint64_t *)a2);
      WTF::URL::URL((uint64_t)v118, (uint64_t *)(a2 + 40));
      uint64_t v42 = *(void *)(a2 + 80);
      long long v43 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a2 + 88) = 0u;
      long long v119 = v43;
      *(void *)&long long v43 = *(void *)(a2 + 104);
      *(void *)(a2 + 104) = 0;
      v118[5] = v42;
      uint64_t v120 = v43;
      uint64_t v44 = *(void *)(a2 + 112);
      *(void *)(a2 + 11objc_destroyWeak(this + 2) = 0;
      uint64_t v121 = v44;
      uint64_t v45 = *(void *)(a2 + 120);
      *(void *)(a2 + 120) = 0;
      uint64_t v122 = v45;
      uint64_t v46 = *(void *)(a2 + 128);
      *(void *)(a2 + 128) = 0;
      uint64_t v123 = v46;
      uint64_t v47 = *(void *)(a2 + 136);
      *(void *)(a2 + 136) = 0;
      uint64_t v124 = v47;
      LODWORD(v46) = *(_DWORD *)(a2 + 144);
      char v126 = *(unsigned char *)(a2 + 148);
      int v125 = v46;
      long long v48 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a2 + 15objc_destroyWeak(this + 2) = 0u;
      long long v127 = v48;
      uint64_t v49 = *(void *)(a2 + 168);
      uint64_t v50 = *(void *)(a2 + 176);
      *(void *)(a2 + 168) = 0;
      char v130 = *(unsigned char *)(a2 + 184);
      uint64_t v128 = v49;
      uint64_t v129 = v50;
      char v51 = *(const void **)(a2 + 192);
      *(void *)(a2 + 19objc_destroyWeak(this + 2) = 0;
      CFTypeRef v131 = v51;
      v132 = &v133;
      std::__variant_detail::__alt<0ul,WebKit::NetworkLoadChecker::ContentExtensionResult>::__alt[abi:sn180100]<WebKit::NetworkLoadChecker::ContentExtensionResult>((uint64_t)&v92, (uint64_t)v117);
      unsigned int v94 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v31 + 16))(v31, &v92);
      (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
      if (v94 != -1) {
        (*(&off_1EE9C3A30 + v94))((int)&v137, (WebCore::ResourceRequestBase *)&v92);
      }
      unsigned int v94 = -1;
      CFTypeRef v52 = v131;
      CFTypeRef v131 = 0;
      if (v52) {
        CFRelease(v52);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v117);
      WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v136, v53);
      WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v135, v54);
      WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v134, v55);
    }
    CFTypeRef v56 = v91;
    CFTypeRef v91 = 0;
    if (v56) {
      CFRelease(v56);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v72);
    uint64_t v58 = v71[1];
    v71[1] = 0;
    if (v58) {
      (*(void (**)(WTF *))(*(void *)v58 + 8))(v58);
    }
    int v59 = (unsigned int *)v71[0];
    v71[0] = 0;
    if (v59 && atomic_fetch_add((atomic_uint *volatile)v59, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v59);
      WTF::fastFree((WTF *)v59, v57);
    }
    goto LABEL_35;
  }
  long long v9 = (unsigned int *)v8;
  atomic_fetch_add((atomic_uint *volatile)v8, 1u);
  if (*(void *)(a1 + 464)) {
    WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded();
  }
  long long v10 = WebKit::NetworkLoadChecker::contentSecurityPolicy((WebCore::SecurityOrigin **)a1);
  uint64_t v11 = v10;
  if (v10) {
    atomic_fetch_add((atomic_uint *volatile)v10, 1u);
  }
  *((void *)v10 + objc_destroyWeak(this + 2) = a3;
  uint64_t v12 = *(void *)(a1 + 1152);
  if (v12 && (uint64_t v13 = *(void *)(v12 + 8)) != 0)
  {
    uint64_t v64 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v13 + 120));
    __int16 v65 = *(WTF::StringImpl **)v64;
    if (*(void *)v64) {
      *(_DWORD *)v65 += 2;
    }
    uint64_t v92 = v65;
    long long v66 = *(_OWORD *)(v64 + 24);
    v93[0] = *(_OWORD *)(v64 + 8);
    v93[1] = v66;
  }
  else
  {
    uint64_t v92 = 0;
    WTF::URL::invalidate((WTF::URL *)&v92);
  }
  unsigned int v15 = *(unsigned __int8 *)(a1 + 16);
  BOOL v16 = 1;
  if (v15 <= 0x13)
  {
    if (!*(unsigned char *)(a1 + 16))
    {
      WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
      char v17 = WebCore::ContentSecurityPolicy::allowConnectToSource();
LABEL_12:
      BOOL v16 = v17;
      goto LABEL_13;
    }
    if (v15 == 13)
    {
      BOOL v16 = 1;
      if (*(unsigned char *)(a2 + 147) == 6)
      {
        WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
        if (!WebCore::ContentSecurityPolicy::allowScriptFromSource()) {
          BOOL v16 = 0;
        }
      }
      goto LABEL_13;
    }
    if (((1 << v15) & 0x8C804) != 0)
    {
      WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
      char v17 = WebCore::ContentSecurityPolicy::allowWorkerFromSource();
      goto LABEL_12;
    }
  }
LABEL_13:
  uint64_t v18 = v92;
  uint64_t v92 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v14);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  *((void *)v11 + objc_destroyWeak(this + 2) = 0;
  if (!atomic_load((unsigned int *)v11)) {
    goto LABEL_65;
  }
  atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF);
  unsigned int v20 = atomic_load(v9);
  if (v16)
  {
    if (!v20)
    {
      __break(0xC471u);
      JUMPOUT(0x198B5885CLL);
    }
    atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF);
    goto LABEL_20;
  }
  if (!v20)
  {
LABEL_65:
    __break(0xC471u);
    JUMPOUT(0x198B5883CLL);
  }
  atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v61 = v92;
  WebKit::NetworkLoadChecker::accessControlErrorForValidationHandler((uint64_t)&v92, a1, v92);
  uint64_t v62 = *a4;
  *a4 = 0;
  (*(void (**)(WTF *, WTF::StringImpl **))(*(void *)v62 + 16))(v62, &v92);
  (*(void (**)(WTF *))(*(void *)v62 + 8))(v62);
  if (v96 != -1) {
    (*(&off_1EE9C39F0 + v96))((int)v71, (WebCore::ResourceRequestBase *)&v92);
  }
  unsigned int v96 = -1;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2) {
      WTF::StringImpl::destroy(v61, v63);
    }
    else {
      *(_DWORD *)v61 -= 2;
    }
  }
LABEL_35:
  CFTypeRef v60 = cf;
  CFTypeRef cf = 0;
  if (v60) {
    CFRelease(v60);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v97);
}

WTF::StringImpl *WebKit::NetworkLoadChecker::checkRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, WTF::StringImpl **a6)
{
  WebKit::NetworkLoadChecker::validateResponse((WebKit::NetworkLoadChecker *)a1, (const WebCore::ResourceRequest *)a2, (WebCore::AdditionalNetworkLoadMetricsForWebInspector ***)a4, (uint64_t)&v208);
  if (v211)
  {
    uint64_t v12 = *(WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a3);
    if (v12) {
      *(_DWORD *)v12 += 2;
    }
    v171 = v12;
    MEMORY[0x19973EC60](&v208);
    uint64_t v13 = v210;
    if (v210) {
      *(_DWORD *)v210 += 2;
    }
    v170 = v13;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)"Cross-origin redirection to ", 29, (uint64_t *)&v171, (uint64_t)" denied by Cross-Origin Resource Sharing policy: ", 50, (uint64_t *)&v170, &v120);
    WebKit::redirectionError((uint64_t)&v172, (WebCore::ResourceResponseBase *)a4, (_DWORD **)&v120);
    CFTypeRef v14 = *a6;
    *a6 = 0;
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(void *)v14 + 16))(v14, &v172);
    (*(void (**)(WTF::StringImpl *))(*(void *)v14 + 8))(v14);
    if (v207 != -1) {
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9C39E0[v207])(&v119, &v172);
    }
    int v207 = -1;
    BOOL v16 = v120;
    uint64_t v120 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v22 = v170;
    v170 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v15);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    uint64_t v23 = v171;
    v171 = 0;
    if (!v23) {
      goto LABEL_97;
    }
    goto LABEL_27;
  }
  int v17 = *(unsigned __int8 *)(a1 + 20);
  if (v17 == 2)
  {
    WTF::URL::URL((uint64_t)&v120, (uint64_t *)a2);
    WTF::URL::URL((uint64_t)v123, (uint64_t *)(a2 + 40));
    v123[5] = *(void *)(a2 + 80);
    long long v24 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a2 + 88) = 0u;
    long long v124 = v24;
    *(void *)&long long v24 = *(void *)(a2 + 104);
    *(void *)(a2 + 104) = 0;
    uint64_t v125 = v24;
    uint64_t v25 = *(void *)(a2 + 112);
    *(void *)(a2 + 11objc_destroyWeak(this + 2) = 0;
    uint64_t v126 = v25;
    *(void *)&long long v24 = *(void *)(a2 + 120);
    *(void *)(a2 + 120) = 0;
    uint64_t v127 = v24;
    uint64_t v26 = *(void *)(a2 + 128);
    *(void *)(a2 + 128) = 0;
    uint64_t v128 = v26;
    *(void *)&long long v24 = *(void *)(a2 + 136);
    *(void *)(a2 + 136) = 0;
    uint64_t v129 = v24;
    LODWORD(v26) = *(_DWORD *)(a2 + 144);
    char v131 = *(unsigned char *)(a2 + 148);
    int v130 = v26;
    long long v27 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a2 + 15objc_destroyWeak(this + 2) = 0u;
    long long v132 = v27;
    char v135 = *(unsigned char *)(a2 + 184);
    uint64_t v28 = *(void *)(a2 + 168);
    uint64_t v29 = *(void *)(a2 + 176);
    *(void *)(a2 + 168) = 0;
    uint64_t v133 = v28;
    uint64_t v134 = v29;
    CFTypeRef v30 = *(const void **)(a2 + 192);
    *(void *)(a2 + 19objc_destroyWeak(this + 2) = 0;
    CFTypeRef v136 = v30;
    WTF::URL::URL((uint64_t)v137, (uint64_t *)a3);
    WTF::URL::URL((uint64_t)v138, (uint64_t *)(a3 + 40));
    v138[5] = *(void *)(a3 + 80);
    long long v31 = *(_OWORD *)(a3 + 88);
    *(_OWORD *)(a3 + 88) = 0u;
    long long v139 = v31;
    *(void *)&long long v31 = *(void *)(a3 + 104);
    *(void *)(a3 + 104) = 0;
    uint64_t v140 = v31;
    uint64_t v32 = *(void *)(a3 + 112);
    *(void *)(a3 + 11objc_destroyWeak(this + 2) = 0;
    uint64_t v141 = v32;
    *(void *)&long long v31 = *(void *)(a3 + 120);
    *(void *)(a3 + 120) = 0;
    uint64_t v142 = v31;
    uint64_t v33 = *(void *)(a3 + 128);
    *(void *)(a3 + 128) = 0;
    uint64_t v143 = v33;
    *(void *)&long long v31 = *(void *)(a3 + 136);
    *(void *)(a3 + 136) = 0;
    uint64_t v144 = v31;
    LODWORD(v33) = *(_DWORD *)(a3 + 144);
    char v146 = *(unsigned char *)(a3 + 148);
    int v145 = v33;
    long long v34 = *(_OWORD *)(a3 + 152);
    *(_OWORD *)(a3 + 15objc_destroyWeak(this + 2) = 0u;
    long long v147 = v34;
    char v150 = *(unsigned char *)(a3 + 184);
    uint64_t v35 = *(void *)(a3 + 168);
    uint64_t v36 = *(void *)(a3 + 176);
    *(void *)(a3 + 168) = 0;
    uint64_t v148 = v35;
    uint64_t v149 = v36;
    uint64_t v37 = *(const void **)(a3 + 192);
    *(void *)(a3 + 19objc_destroyWeak(this + 2) = 0;
    CFTypeRef v151 = v37;
    WTF::URL::URL((uint64_t)v152, (uint64_t *)a4);
    long long v38 = *(_OWORD *)(a4 + 56);
    *(_OWORD *)(a4 + 56) = 0u;
    long long v39 = *(_OWORD *)(a4 + 72);
    *(_OWORD *)(a4 + 7objc_destroyWeak(this + 2) = 0u;
    uint64_t v40 = *(void *)(a4 + 40);
    uint64_t v41 = *(void *)(a4 + 48);
    *(void *)(a4 + 40) = 0;
    v152[5] = v40;
    v152[6] = v41;
    long long v153 = v38;
    long long v154 = v39;
    *(void *)&long long v38 = *(void *)(a4 + 88);
    *(void *)(a4 + 88) = 0;
    uint64_t v155 = v38;
    uint64_t v42 = *(void *)(a4 + 96);
    *(void *)(a4 + 96) = 0;
    uint64_t v156 = v42;
    *(void *)&long long v38 = *(void *)(a4 + 104);
    *(void *)(a4 + 104) = 0;
    uint64_t v157 = v38;
    uint64_t v43 = *(void *)(a4 + 112);
    *(void *)(a4 + 11objc_destroyWeak(this + 2) = 0;
    uint64_t v158 = v43;
    LOBYTE(v159) = 0;
    char v160 = 0;
    if (*(unsigned char *)(a4 + 128))
    {
      uint64_t v54 = *(void *)(a4 + 120);
      *(void *)(a4 + 120) = 0;
      uint64_t v159 = v54;
      char v160 = 1;
    }
    long long v164 = *(_OWORD *)(a4 + 184);
    long long v165 = *(_OWORD *)(a4 + 200);
    *(_OWORD *)v166 = *(_OWORD *)(a4 + 216);
    *(_DWORD *)&v166[15] = *(_DWORD *)(a4 + 231);
    long long v161 = *(_OWORD *)(a4 + 136);
    long long v162 = *(_OWORD *)(a4 + 152);
    long long v163 = *(_OWORD *)(a4 + 168);
    uint64_t v44 = *(const void **)(a4 + 240);
    *(void *)(a4 + 240) = 0;
    CFTypeRef cf = v44;
    char v168 = *(unsigned char *)(a4 + 248);
    WebKit::NetworkLoadChecker::RedirectionTriplet::RedirectionTriplet((uint64_t)&v172, (uint64_t)&v120);
    int v207 = 0;
    uint64_t v45 = *a6;
    *a6 = 0;
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(void *)v45 + 16))(v45, &v172);
    (*(void (**)(WTF::StringImpl *))(*(void *)v45 + 8))(v45);
    if (v207 != -1) {
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9C39E0[v207])(&v119, &v172);
    }
    int v207 = -1;
    CFTypeRef v47 = cf;
    CFTypeRef cf = 0;
    if (v47) {
      CFRelease(v47);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v152, v46);
    CFTypeRef v48 = v151;
    CFTypeRef v151 = 0;
    if (v48) {
      CFRelease(v48);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v137);
    CFTypeRef v49 = v136;
    CFTypeRef v136 = 0;
    if (v49) {
      CFRelease(v49);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v120);
    goto LABEL_97;
  }
  if (v17 != 1)
  {
    if (*(unsigned char *)(a1 + 17) == 3)
    {
      if (!*(unsigned char *)(a1 + 448)
        || (uint64_t v50 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2),
            (WebKit::NetworkLoadChecker::isSameOrigin((WebKit::NetworkLoadChecker *)a1, v50, *(const WebCore::SecurityOrigin **)(a1 + 240)) & 1) == 0))
      {
        uint64_t v51 = WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)a4);
        WebCore::ResourceResponseBase::httpHeaderField();
        MEMORY[0x19972E8B0](&v120, v51, &v172, 0);
        long long v53 = v172;
        v172 = 0;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2) {
            WTF::StringImpl::destroy(v53, v52);
          }
          else {
            *(_DWORD *)v53 -= 2;
          }
        }
        uint64_t v55 = *(void *)(a1 + 1144);
        if (v55)
        {
          uint64_t v56 = WTF::URL::protocol((WTF::URL *)&v120);
          if ((WebKit::NetworkSchemeRegistry::shouldTreatURLSchemeAsCORSEnabled(v55, v56, v57) & 1) == 0)
          {
            uint64_t v63 = *(WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a3);
            if (v63) {
              *(_DWORD *)v63 += 2;
            }
            uint64_t v118 = v63;
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Cross-origin redirection to ", 29, (uint64_t *)&v118, (uint64_t)" denied by Cross-Origin Resource Sharing policy: not allowed to follow a cross-origin CORS redirection with non CORS scheme", 124, &v119);
            WebKit::redirectionError((uint64_t)&v172, (WebCore::ResourceResponseBase *)a4, (_DWORD **)&v119);
            uint64_t v64 = *a6;
            *a6 = 0;
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(void *)v64 + 16))(v64, &v172);
            (*(void (**)(WTF::StringImpl *))(*(void *)v64 + 8))(v64);
            if (v207 != -1) {
              ((void (*)(unsigned char *, WTF::StringImpl **))off_1EE9C39E0[v207])(v213, &v172);
            }
            int v207 = -1;
            __int16 v65 = v119;
            long long v119 = 0;
            if (v65)
            {
              if (*(_DWORD *)v65 == 2) {
                WTF::StringImpl::destroy(v65, v15);
              }
              else {
                *(_DWORD *)v65 -= 2;
              }
            }
            char v115 = v118;
            uint64_t v118 = 0;
            if (!v115)
            {
LABEL_120:
              uint64_t v23 = v120;
              uint64_t v120 = 0;
              if (!v23) {
                goto LABEL_97;
              }
LABEL_27:
              if (*(_DWORD *)v23 != 2)
              {
                *(_DWORD *)v23 -= 2;
                goto LABEL_97;
              }
LABEL_96:
              WTF::StringImpl::destroy(v23, v15);
              goto LABEL_97;
            }
LABEL_117:
            if (*(_DWORD *)v115 == 2) {
              WTF::StringImpl::destroy(v115, v15);
            }
            else {
              *(_DWORD *)v115 -= 2;
            }
            goto LABEL_120;
          }
        }
        if (v122 > v121)
        {
          uint64_t v58 = *(WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a3);
          if (v58) {
            *(_DWORD *)v58 += 2;
          }
          uint64_t v117 = v58;
          int v59 = v120;
          if (v120) {
            *(_DWORD *)v120 += 2;
          }
          uint64_t v116 = v59;
          WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Cross-origin redirection to ", 29, (uint64_t *)&v117, (uint64_t)" denied by Cross-Origin Resource Sharing policy: redirection URL ", 66, (uint64_t *)&v116, (uint64_t)" has credentials", 17, &v119);
          WebKit::redirectionError((uint64_t)&v172, (WebCore::ResourceResponseBase *)a4, (_DWORD **)&v119);
          CFTypeRef v60 = *a6;
          *a6 = 0;
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(void *)v60 + 16))(v60, &v172);
          (*(void (**)(WTF::StringImpl *))(*(void *)v60 + 8))(v60);
          if (v207 != -1) {
            ((void (*)(unsigned char *, WTF::StringImpl **))off_1EE9C39E0[v207])(v213, &v172);
          }
          int v207 = -1;
          long long v61 = v119;
          long long v119 = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2) {
              WTF::StringImpl::destroy(v61, v15);
            }
            else {
              *(_DWORD *)v61 -= 2;
            }
          }
          long long v66 = v116;
          uint64_t v116 = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 == 2) {
              WTF::StringImpl::destroy(v66, v15);
            }
            else {
              *(_DWORD *)v66 -= 2;
            }
          }
          char v115 = v117;
          uint64_t v117 = 0;
          if (!v115) {
            goto LABEL_120;
          }
          goto LABEL_117;
        }
        uint64_t v62 = v120;
        uint64_t v120 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2) {
            WTF::StringImpl::destroy(v62, v52);
          }
          else {
            *(_DWORD *)v62 -= 2;
          }
        }
      }
    }
    unint64_t v67 = *(void *)(a1 + 464) + 1;
    *(void *)(a1 + 464) = v67;
    if (v67 < 0x15)
    {
      WTF::URL::operator=(a1 + 472, a1 + 160);
      uint64_t v70 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a3);
      WTF::String::operator=((uint64_t *)(a1 + 160), (WTF::StringImpl **)v70);
      long long v71 = *(_OWORD *)(v70 + 24);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(v70 + 8);
      *(_OWORD *)(a1 + 184) = v71;
      uint64_t v72 = *a6;
      *a6 = 0;
      v172 = v72;
      WTF::URL::URL((uint64_t)v173, (uint64_t *)a2);
      WTF::URL::URL((uint64_t)v174, (uint64_t *)(a2 + 40));
      uint64_t v73 = *(void *)(a2 + 80);
      long long v74 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a2 + 88) = 0u;
      long long v176 = v74;
      *(void *)&long long v74 = *(void *)(a2 + 104);
      *(void *)(a2 + 104) = 0;
      uint64_t v175 = v73;
      uint64_t v177 = v74;
      uint64_t v75 = *(void *)(a2 + 112);
      *(void *)(a2 + 11objc_destroyWeak(this + 2) = 0;
      uint64_t v178 = v75;
      uint64_t v76 = *(void *)(a2 + 120);
      *(void *)(a2 + 120) = 0;
      uint64_t v179 = v76;
      uint64_t v77 = *(void *)(a2 + 128);
      *(void *)(a2 + 128) = 0;
      uint64_t v180 = v77;
      uint64_t v78 = *(void *)(a2 + 136);
      *(void *)(a2 + 136) = 0;
      uint64_t v181 = v78;
      LODWORD(v77) = *(_DWORD *)(a2 + 144);
      char v183 = *(unsigned char *)(a2 + 148);
      int v182 = v77;
      long long v79 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a2 + 15objc_destroyWeak(this + 2) = 0u;
      long long v184 = v79;
      uint64_t v80 = *(void *)(a2 + 168);
      uint64_t v81 = *(void *)(a2 + 176);
      *(void *)(a2 + 168) = 0;
      char v187 = *(unsigned char *)(a2 + 184);
      uint64_t v185 = v80;
      uint64_t v186 = v81;
      uint64_t v82 = *(const void **)(a2 + 192);
      *(void *)(a2 + 19objc_destroyWeak(this + 2) = 0;
      CFTypeRef v188 = v82;
      WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v189, (const WebCore::ResourceResponseBase *)a4);
      uint64_t v83 = *(const void **)(a4 + 240);
      CFTypeRef v205 = v83;
      if (v83) {
        CFRetain(v83);
      }
      char v206 = *(unsigned char *)(a4 + 248);
      uint64_t v84 = WTF::fastMalloc((WTF *)0x1D8);
      *(void *)uint64_t v84 = &unk_1EE9C3B18;
      int v85 = v172;
      v172 = 0;
      *(void *)(v84 + 8) = v85;
      WTF::URL::URL(v84 + 16, v173);
      WTF::URL::URL(v84 + 56, v174);
      *(void *)(v84 + 96) = v175;
      *(void *)(v84 + 104) = v176;
      uint64_t v86 = *((void *)&v176 + 1);
      long long v176 = 0u;
      *(void *)(v84 + 11objc_destroyWeak(this + 2) = v86;
      uint64_t v87 = v177;
      uint64_t v177 = 0;
      *(void *)(v84 + 120) = v87;
      uint64_t v88 = v178;
      uint64_t v178 = 0;
      *(void *)(v84 + 128) = v88;
      uint64_t v89 = v179;
      uint64_t v179 = 0;
      *(void *)(v84 + 136) = v89;
      uint64_t v90 = v180;
      uint64_t v180 = 0;
      *(void *)(v84 + 144) = v90;
      uint64_t v91 = v181;
      uint64_t v181 = 0;
      *(void *)(v84 + 15objc_destroyWeak(this + 2) = v91;
      LODWORD(v90) = v182;
      *(unsigned char *)(v84 + 164) = v183;
      *(_DWORD *)(v84 + 160) = v90;
      *(void *)(v84 + 168) = v184;
      uint64_t v92 = *((void *)&v184 + 1);
      long long v184 = 0u;
      *(void *)(v84 + 176) = v92;
      *(void *)(v84 + 184) = v185;
      uint64_t v93 = v186;
      *(unsigned char *)(v84 + 200) = v187;
      *(void *)(v84 + 19objc_destroyWeak(this + 2) = v93;
      CFTypeRef v94 = v188;
      uint64_t v185 = 0;
      CFTypeRef v188 = 0;
      *(void *)(v84 + 208) = v94;
      WTF::URL::URL(v84 + 216, v189);
      uint64_t v95 = v190;
      uint64_t v190 = 0;
      *(void *)(v84 + 256) = v95;
      *(_OWORD *)(v84 + 264) = *(_OWORD *)v191;
      *(void *)(v84 + 280) = *(void *)&v191[16];
      *(void *)(v84 + 288) = v192;
      uint64_t v96 = *((void *)&v192 + 1);
      *(_OWORD *)&v191[8] = 0u;
      long long v192 = 0u;
      *(void *)(v84 + 296) = v96;
      uint64_t v97 = v193;
      uint64_t v193 = 0;
      *(void *)(v84 + 304) = v97;
      uint64_t v98 = v194;
      uint64_t v194 = 0;
      *(void *)(v84 + 31objc_destroyWeak(this + 2) = v98;
      uint64_t v99 = v195;
      uint64_t v195 = 0;
      *(void *)(v84 + 320) = v99;
      uint64_t v100 = v196;
      uint64_t v196 = 0;
      *(void *)(v84 + 328) = v100;
      *(unsigned char *)(v84 + 336) = 0;
      *(unsigned char *)(v84 + 344) = 0;
      if (v198)
      {
        uint64_t v114 = v197;
        uint64_t v197 = 0;
        *(void *)(v84 + 336) = v114;
        *(unsigned char *)(v84 + 344) = 1;
      }
      long long v101 = v202;
      long long v102 = v203;
      long long v103 = *(_OWORD *)v204;
      *(_DWORD *)(v84 + 447) = *(_DWORD *)&v204[15];
      long long v104 = v200;
      long long v105 = v201;
      *(_OWORD *)(v84 + 35objc_destroyWeak(this + 2) = v199;
      *(_OWORD *)(v84 + 368) = v104;
      *(_OWORD *)(v84 + 4++*(_DWORD *)(this + 16) = v102;
      *(_OWORD *)(v84 + 43objc_destroyWeak(this + 2) = v103;
      *(_OWORD *)(v84 + 384) = v105;
      *(_OWORD *)(v84 + 400) = v101;
      CFTypeRef v106 = v205;
      CFTypeRef v205 = 0;
      *(void *)(v84 + 456) = v106;
      *(unsigned char *)(v84 + 464) = v206;
      uint64_t v120 = (WTF::StringImpl *)v84;
      WebKit::NetworkLoadChecker::checkRequest(a1, a3, a5, &v120);
      if (v120) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v120 + 8))(v120);
      }
      CFTypeRef v108 = v205;
      CFTypeRef v205 = 0;
      if (v108) {
        CFRelease(v108);
      }
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v189, v107);
      CFTypeRef v109 = v188;
      CFTypeRef v188 = 0;
      if (v109) {
        CFRelease(v109);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v173);
      int v110 = v172;
      v172 = 0;
      if (v110) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v110 + 8))(v110);
      }
      goto LABEL_97;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v68 = v172;
    uint64_t v120 = v172;
    WebKit::redirectionError((uint64_t)&v172, (WebCore::ResourceResponseBase *)a4, (_DWORD **)&v120);
    char v69 = *a6;
    *a6 = 0;
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(void *)v69 + 16))(v69, &v172);
    (*(void (**)(WTF::StringImpl *))(*(void *)v69 + 8))(v69);
    if (v207 != -1) {
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9C39E0[v207])(&v119, &v172);
    }
    int v207 = -1;
    if (v68)
    {
      if (*(_DWORD *)v68 != 2)
      {
        *(_DWORD *)v68 -= 2;
        goto LABEL_97;
      }
      uint64_t v23 = v68;
      goto LABEL_96;
    }
    goto LABEL_97;
  }
  uint64_t v18 = *(WTF::StringImpl **)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)a4);
  if (v18) {
    *(_DWORD *)v18 += 2;
  }
  v169 = v18;
  v172 = (WTF::StringImpl *)"Not allowed to follow a redirection while loading ";
  v173[0] = 51;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v172, (uint64_t *)&v169, &v120);
  if (!v120)
  {
    __break(0xC471u);
    return result;
  }
  WebKit::redirectionError((uint64_t)&v172, (WebCore::ResourceResponseBase *)a4, (_DWORD **)&v120);
  unsigned int v20 = *a6;
  *a6 = 0;
  (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(void *)v20 + 16))(v20, &v172);
  (*(void (**)(WTF::StringImpl *))(*(void *)v20 + 8))(v20);
  if (v207 != -1) {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9C39E0[v207])(&v119, &v172);
  }
  int v207 = -1;
  uint64_t v21 = v120;
  uint64_t v120 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v15);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  uint64_t v23 = v169;
  v169 = 0;
  if (v23) {
    goto LABEL_27;
  }
LABEL_97:
  char v111 = v212;
  v212 = 0;
  if (v111) {
    CFRelease(v111);
  }
  long long v112 = v210;
  v210 = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2) {
      WTF::StringImpl::destroy(v112, v15);
    }
    else {
      *(_DWORD *)v112 -= 2;
    }
  }
  uint64_t v113 = v209;
  v209 = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2) {
      WTF::StringImpl::destroy(v113, v15);
    }
    else {
      *(_DWORD *)v113 -= 2;
    }
  }
  uint64_t result = v208;
  v208 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WebCore::AdditionalNetworkLoadMetricsForWebInspector **WebKit::NetworkLoadChecker::validateResponse@<X0>(WebKit::NetworkLoadChecker *this@<X0>, const WebCore::ResourceRequest *a2@<X1>, WebCore::AdditionalNetworkLoadMetricsForWebInspector ***a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (WebCore::EmptyOriginAccessPatterns *)WebCore::ResourceResponseBase::containsInvalidHTTPHeaders((WebCore::ResourceResponseBase *)a3);
  if (v8)
  {
    uint64_t v28 = WebCore::ResourceRequestBase::url(a2);
    return (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)MEMORY[0x1F41710C0](v28);
  }
  if (*((void *)this + 58)) {
    *((_WORD *)a3 + 116) |= 0x40u;
  }
  if ((*((unsigned char *)a3 + 234) & 7) == 5)
  {
    __int16 v17 = *((_WORD *)a3 + 116) | 0x300;
  }
  else if (*((unsigned char *)this + 17) && !*((unsigned char *)this + 448))
  {
    hasHTTPHeaderField = (WebCore::EmptyOriginAccessPatterns *)WebCore::ResourceRequestBase::hasHTTPHeaderField();
    if (hasHTTPHeaderField) {
      *((_WORD *)a3 + 116) |= 0x80u;
    }
    if (*((unsigned char *)this + 17) == 2)
    {
      CFTypeRef v30 = (atomic_uint *)*((void *)this + 30);
      if (v30) {
        atomic_fetch_add(v30, 1u);
      }
      uint64_t v31 = *((void *)this + 144);
      if (v31 && (uint64_t v32 = *(void *)(v31 + 8)) != 0)
      {
        int v34 = *(_DWORD *)(v32 - 40);
        uint64_t v33 = (_DWORD *)(v32 - 40);
        *uint64_t v33 = v34 + 1;
        WebKit::performCORPCheck(&v52, (unsigned char *)this + 320, (uint64_t)v30, (uint64_t)this + 160, (uint64_t)a3, 0, (WebKit::NetworkResourceLoader *)(v33 - 2));
        WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v33, v35);
      }
      else
      {
        WebCore::EmptyOriginAccessPatterns::singleton(hasHTTPHeaderField);
        WebKit::performCORPCheck(&v52, (unsigned char *)this + 320, (uint64_t)v30, (uint64_t)this + 160, (uint64_t)a3, 0, 0);
      }
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v30, v36);
      if (v56)
      {
        WebCore::ResourceError::ResourceError(a4, (uint64_t *)&v52);
        uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v52, v38);
        goto LABEL_17;
      }
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v52, v37);
      __int16 v17 = (_WORD)a3[29] & 0xFCFF | 0x200;
    }
    else
    {
      if (WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)a3) != 304)
      {
        CFTypeRef v48 = (atomic_uint *)*((void *)this + 30);
        if (v48) {
          atomic_fetch_add(v48, 1u);
        }
        WebCore::passesAccessControlCheck();
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v48, v49);
        if ((_BYTE)v53)
        {
          int v59 = 0;
          WebCore::ResourceErrorBase::ResourceErrorBase(a4, (_DWORD **)&v59, 0, (uint64_t)this + 160, (_DWORD **)&v52, 2, 0);
          *(void *)(a4 + 64) = 0;
          *(unsigned char *)(a4 + 7objc_destroyWeak(this + 2) = 1;
          uint64_t v51 = (WTF::StringImpl *)v59;
          int v59 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2) {
              WTF::StringImpl::destroy(v51, v50);
            }
            else {
              *(_DWORD *)v51 -= 2;
            }
          }
        }
        else
        {
          *((_WORD *)a3 + 1++*(_DWORD *)(this + 16) = (_WORD)a3[29] & 0xFCFF | 0x100;
          *(void *)a4 = 0;
          *(void *)(a4 + 8) = 0;
          WTF::URL::invalidate((WTF::URL *)(a4 + 8));
          *(void *)(a4 + 64) = 0;
          *(void *)(a4 + 48) = 0;
          *(void *)(a4 + 54) = 0;
          *(unsigned char *)(a4 + 7objc_destroyWeak(this + 2) = 1;
        }
        uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v52);
        goto LABEL_17;
      }
      __int16 v17 = (_WORD)a3[29] & 0xFCFF | 0x100;
    }
  }
  else
  {
    long long v10 = (atomic_uint *)*((void *)this + 32);
    if (v10)
    {
      atomic_fetch_add(v10, 1u);
      if (!*((unsigned char *)this + 17))
      {
        uint64_t v11 = *((void *)this + 144);
        if (v11 && (uint64_t v12 = *(void *)(v11 + 8)) != 0)
        {
          int v14 = *(_DWORD *)(v12 - 40);
          uint64_t v13 = (_DWORD *)(v12 - 40);
          *uint64_t v13 = v14 + 1;
          WebKit::performCORPCheck(&v52, (unsigned char *)this + 296, (uint64_t)v10, (uint64_t)this + 160, (uint64_t)a3, 1, (WebKit::NetworkResourceLoader *)(v13 - 2));
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v13, v15);
        }
        else
        {
          WebCore::EmptyOriginAccessPatterns::singleton(v8);
          WebKit::performCORPCheck(&v52, (unsigned char *)this + 296, (uint64_t)v10, (uint64_t)this + 160, (uint64_t)a3, 1, 0);
        }
        if (v56)
        {
          WebCore::ResourceError::ResourceError(a4, (uint64_t *)&v52);
          std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v52, v26);
          uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v10, v27);
          goto LABEL_17;
        }
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v52, v16);
      }
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v10, v9);
    }
    __int16 v17 = (_WORD)a3[29] & 0xFCFF;
  }
  *((_WORD *)a3 + 1++*(_DWORD *)(this + 16) = v17;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)WTF::URL::invalidate((WTF::URL *)(a4 + 8));
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 48) = 0;
  *(void *)(a4 + 54) = 0;
  *(unsigned char *)(a4 + 7objc_destroyWeak(this + 2) = 1;
LABEL_17:
  if (*((unsigned char *)this + 1160))
  {
LABEL_35:
    uint64_t v25 = a3[14];
    a3[14] = 0;
    if (v25)
    {
      *((unsigned char *)v25 + 106) |= 0x40u;
      uint64_t result = a3[14];
      a3[14] = v25;
      if (result) {
        return WTF::ThreadSafeRefCounted<WTF::Box<WebCore::NetworkLoadMetrics>::Data,(WTF::DestructionThread)0>::deref(result, v19);
      }
    }
    return result;
  }
  if (!*((void *)this + 30)) {
    goto LABEL_83;
  }
  WebCore::ResourceResponseBase::httpHeaderField();
  if (v63)
  {
    unsigned int v20 = v63[1];
    unint64_t v21 = *((unsigned int *)v63 + 1) | ((unint64_t)((*((_DWORD *)v63 + 4) >> 2) & 1) << 32);
  }
  else
  {
    unsigned int v20 = 0;
    unint64_t v21 = 0x100000000;
  }
  CFTypeRef v52 = v20;
  unint64_t v53 = v21;
  __int16 v54 = 44;
  char v55 = 0;
  int v59 = (const char *)&v52;
  unsigned int v60 = 0;
  BOOL v62 = v21 == 0;
  WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v59);
  int v22 = v53;
  int v19 = (WTF::StringImpl *)v60;
  if (v60 != v53) {
    goto LABEL_84;
  }
  if (v62)
  {
    int v23 = 1;
  }
  else
  {
LABEL_84:
    while (1)
    {
      v58[0] = WTF::StringView::substring(v59, v19, v61);
      v58[1] = v39;
      uint64_t v40 = (unsigned __int8 *)WTF::StringView::trim<BOOL ()(char16_t)>((uint64_t)v58, (uint64_t (*)(void))WTF::isASCIIWhitespaceWithoutFF<char16_t>);
      uint64_t v42 = v41;
      if (WTF::operator==(v40, v41, "*", 2)) {
        break;
      }
      WebCore::SecurityOrigin::toString((uint64_t *)&v57, *((WebCore::SecurityOrigin **)this + 30));
      unint64_t v43 = (unint64_t)v57;
      if (v57)
      {
        uint64_t v44 = (unsigned __int8 *)*((void *)v57 + 1);
        unint64_t v43 = *((unsigned int *)v57 + 1);
        unint64_t v45 = ((unint64_t)*((unsigned int *)v57 + 4) >> 2) & 1;
      }
      else
      {
        uint64_t v44 = 0;
        unint64_t v45 = 1;
      }
      BOOL v46 = WTF::operator==(v40, v42, v44, v43 | (v45 << 32));
      CFTypeRef v47 = v57;
      uint64_t v57 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2) {
          WTF::StringImpl::destroy(v47, v19);
        }
        else {
          *(_DWORD *)v47 -= 2;
        }
      }
      if (!v46)
      {
        WTF::StringView::SplitResult::Iterator::operator++();
        int v19 = (WTF::StringImpl *)v60;
        if (v60 != v22 || !v62) {
          continue;
        }
      }
      int v23 = !v46;
      goto LABEL_24;
    }
    int v23 = 0;
  }
LABEL_24:
  uint64_t result = v63;
  uint64_t v63 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v23)
  {
LABEL_83:
    if (*((unsigned char *)this + 17) || *((unsigned char *)this + 448))
    {
      int v24 = (_WORD)a3[29] & 0x300;
      *((unsigned char *)this + 1160) = ((_WORD)a3[29] & 0x300) != 0;
      if (!v24) {
        return result;
      }
    }
    else
    {
      *((unsigned char *)this + 1160) = 1;
    }
    goto LABEL_35;
  }
  return result;
}

uint64_t WebKit::redirectionError(uint64_t a1, WebCore::ResourceResponseBase *this, _DWORD **a3)
{
  uint64_t v5 = WebCore::ResourceResponseBase::url(this);
  uint64_t v6 = *(WTF::StringImpl **)v5;
  if (*(void *)v5) {
    *(_DWORD *)v6 += 2;
  }
  long long v7 = *(_OWORD *)(v5 + 8);
  long long v8 = *(_OWORD *)(v5 + 24);
  long long v9 = *a3;
  if (*a3) {
    *v9 += 2;
  }
  long long v14 = v7;
  long long v15 = v8;
  BOOL v16 = v9;
  int v17 = 0;
  __int16 v18 = 2;
  uint64_t v19 = 0;
  char v20 = 1;
  uint64_t v13 = v6;
  *(void *)a1 = 0;
  WTF::URL::URL(a1 + 8, (uint64_t *)&v13);
  uint64_t v11 = v13;
  *(void *)(a1 + 48) = v16;
  *(_DWORD *)(a1 + 56) = v17;
  *(_WORD *)(a1 + 60) = v18;
  *(void *)(a1 + 64) = v19;
  *(unsigned char *)(a1 + 7objc_destroyWeak(this + 2) = v20;
  *(_DWORD *)(a1 + 656) = 1;
  uint64_t v19 = 0;
  BOOL v16 = 0;
  uint64_t v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  return 0;
}

void WebKit::NetworkLoadChecker::RedirectionTriplet::~RedirectionTriplet(WebKit::NetworkLoadChecker::RedirectionTriplet *this, WTF::StringImpl *a2)
{
  CFTypeRef v3 = (WebKit::NetworkLoadChecker::RedirectionTriplet *)((char *)this + 400);
  uint64_t v4 = (const void *)*((void *)this + 80);
  *((void *)this + 80) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  uint64_t v5 = (const void *)*((void *)this + 49);
  *((void *)this + 49) = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::NetworkLoadChecker::RedirectionTriplet *)((char *)this + 200));
  uint64_t v6 = (const void *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v6) {
    CFRelease(v6);
  }

  WebCore::ResourceRequestBase::~ResourceRequestBase(this);
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  v13[0] = a1;
  v13[1] = a2;
  v12[0] = a4;
  v12[1] = a5;
  v11[0] = a7;
  v11[1] = a8;
  uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>(v13, a3, v12, a6, v11, a9);
  if (!*a9) {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::performCORPCheck(unsigned char *a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, WebKit::NetworkResourceLoader *a7)
{
  uint64_t result = (WTF::StringImpl *)WebCore::validateCrossOriginResourcePolicy();
  if (a1[80]) {
    return result;
  }
  uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1, v11);
  if (a2[1]) {
    BOOL v12 = a7 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    WebCore::validateCrossOriginResourcePolicy();
    if (v19)
    {
      WebKit::contextURLforCORPViolation((WebKit *)&v17, a7);
      WebCore::sendCOEPCORPViolation();
      BOOL v16 = v17;
      int v17 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v15);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v15);
  }
  if (!*a2)
  {
LABEL_9:
    *a1 = 0;
    a1[80] = 0;
    return result;
  }
  uint64_t result = (WTF::StringImpl *)WebCore::validateCrossOriginResourcePolicy();
  if (!a1[80])
  {
    uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1, v13);
    goto LABEL_9;
  }
  if (a7)
  {
    WebKit::contextURLforCORPViolation((WebKit *)v18, a7);
    WebCore::sendCOEPCORPViolation();
    uint64_t result = v18[0];
    v18[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::ResourceError::ResourceError(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  WTF::URL::URL(a1 + 8, a2 + 1);
  uint64_t v5 = a2[6];
  a2[6] = 0;
  *(void *)(a1 + 48) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 14);
  *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 30);
  *(_DWORD *)(a1 + 56) = v5;
  uint64_t v6 = a2[8];
  a2[8] = 0;
  *(void *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 7objc_destroyWeak(this + 2) = *((unsigned char *)a2 + 72);
  return a1;
}

uint64_t WTF::StringView::trim<BOOL ()(char16_t)>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = *(const char **)a1;
  unint64_t v5 = *(unsigned int *)(a1 + 8);
  if (!*(unsigned char *)(a1 + 12))
  {
    if (v5)
    {
      uint64_t v10 = 0;
      unint64_t v11 = (v5 - 1);
      for (int i = *(const char **)a1; ; i += 2)
      {
        uint64_t result = a2(*(unsigned __int16 *)i);
        if ((result & 1) == 0) {
          break;
        }
        if (v5 == ++v10) {
          return (uint64_t)"";
        }
      }
      if (v5 != 1)
      {
        while (v11 < v5)
        {
          uint64_t result = a2(*(unsigned __int16 *)&v4[2 * v11]);
          if (result)
          {
            if (--v11) {
              continue;
            }
          }
          goto LABEL_25;
        }
        goto LABEL_30;
      }
LABEL_25:
      if (v10 || v11 != *(_DWORD *)(a1 + 8) - 1)
      {
        if (v5 - v10 >= (v11 - v10 + 1)) {
          return (uint64_t)i;
        }
        goto LABEL_30;
      }
      return *(void *)a1;
    }
    return *(void *)a1;
  }
  if (!v5) {
    return *(void *)a1;
  }
  uint64_t v6 = 0;
  unint64_t v7 = (v5 - 1);
  int i = "";
  while (1)
  {
    uint64_t result = a2(v4[v6]);
    if ((result & 1) == 0) {
      break;
    }
    if (v5 == ++v6) {
      return (uint64_t)i;
    }
  }
  if (v5 != 1)
  {
    while (v7 < v5)
    {
      uint64_t result = a2(v4[v7]);
      if (result)
      {
        if (--v7) {
          continue;
        }
      }
      goto LABEL_17;
    }
    goto LABEL_30;
  }
LABEL_17:
  if (!v6 && v7 == *(_DWORD *)(a1 + 8) - 1) {
    return *(void *)a1;
  }
  if (v5 - v6 >= (v7 - v6 + 1)) {
    return (uint64_t)&v4[v6];
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t WTF::isASCIIWhitespaceWithoutFF<char16_t>(unsigned int a1)
{
  return (a1 < 0x21) & (0x100002600uLL >> a1);
}

uint64_t WebKit::NetworkLoadChecker::accessControlErrorForValidationHandler(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = *(WTF::StringImpl **)(a2 + 160);
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
  long long v9 = v4;
  long long v5 = *(_OWORD *)(a2 + 184);
  long long v10 = *(_OWORD *)(a2 + 168);
  long long v11 = v5;
  if (a3) {
    *a3 += 2;
  }
  int v13 = 0;
  __int16 v14 = 2;
  uint64_t v15 = 0;
  char v16 = 1;
  BOOL v12 = a3;
  *(void *)a1 = 0;
  WTF::URL::URL(a1 + 8, (uint64_t *)&v9);
  unint64_t v7 = v9;
  *(void *)(a1 + 48) = v12;
  *(_DWORD *)(a1 + 56) = v13;
  *(_WORD *)(a1 + 60) = v14;
  *(void *)(a1 + 64) = v15;
  *(unsigned char *)(a1 + 7objc_destroyWeak(this + 2) = v16;
  *(_DWORD *)(a1 + 656) = 2;
  uint64_t v15 = 0;
  BOOL v12 = 0;
  long long v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  return 0;
}

uint64_t std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError>::variant[abi:sn180100]<WebCore::ResourceError,0,0,0,WebCore::ResourceError,2ul,0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  WTF::URL::URL(a1 + 8, a2 + 1);
  uint64_t v5 = a2[6];
  a2[6] = 0;
  *(void *)(a1 + 48) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 14);
  *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 30);
  *(_DWORD *)(a1 + 56) = v5;
  uint64_t v6 = a2[8];
  a2[8] = 0;
  *(void *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 7objc_destroyWeak(this + 2) = *((unsigned char *)a2 + 72);
  *(_DWORD *)(a1 + 656) = 2;
  return a1;
}

WebCore::SecurityOrigin *WebKit::NetworkLoadChecker::contentSecurityPolicy(WebCore::SecurityOrigin **this)
{
  if (!this[57] && *((unsigned char *)this + 288))
  {
    WebCore::SecurityOrigin::toRawString((uint64_t *)&v20, this[30]);
    MEMORY[0x19972E890](v21, &v20, 0);
    CFTypeRef v3 = this[144];
    if (!v3) {
      goto LABEL_34;
    }
    uint64_t v4 = *((void *)v3 + 1);
    if (v4) {
      uint64_t v5 = v4 - 48;
    }
    else {
      uint64_t v5 = 0;
    }
    while (1)
    {
      uint64_t v6 = WTF::fastMalloc((WTF *)0xF0);
      unint64_t v7 = (WebCore::SecurityOrigin *)v6;
      if (v5) {
        uint64_t v8 = v5 + 64;
      }
      else {
        uint64_t v8 = 0;
      }
      MEMORY[0x199735820](v6, v21, 0, v8);
      uint64_t v10 = (uint64_t)this[57];
      this[57] = v7;
      if (v10) {
        WebCore::ContentSecurityPolicy::operator delete(v10, 0xF0uLL);
      }
      long long v11 = v21[0];
      v21[0] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v9);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      BOOL v12 = v20;
      char v20 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v9);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
      if (*((unsigned char *)this + 288)) {
        break;
      }
      __break(1u);
LABEL_34:
      uint64_t v5 = 0;
    }
    int v13 = this[65];
    if (v13) {
      *(_DWORD *)v13 += 2;
    }
    v21[0] = v13;
    WebCore::ContentSecurityPolicy::didReceiveHeaders();
    uint64_t v15 = v21[0];
    v21[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    char v16 = this[25];
    if (v16 && *((_DWORD *)v16 + 1))
    {
      int v17 = this[57];
      if (*((unsigned char *)v17 + 112))
      {
        WTF::String::operator=((uint64_t *)v17 + 9, this + 25);
        long long v19 = *((_OWORD *)this + 14);
        *((_OWORD *)v17 + 5) = *((_OWORD *)this + 13);
        *((_OWORD *)v17 + 6) = v19;
      }
      else
      {
        *(_DWORD *)v16 += 2;
        *((void *)v17 + 9) = v16;
        long long v18 = *((_OWORD *)this + 14);
        *((_OWORD *)v17 + 5) = *((_OWORD *)this + 13);
        *((_OWORD *)v17 + 6) = v18;
        *((unsigned char *)v17 + 11objc_destroyWeak(this + 2) = 1;
      }
    }
  }
  return this[57];
}

void WebKit::NetworkLoadChecker::checkCORSRequest(uint64_t a1, WebCore::ResourceRequestBase *this, const void **a3)
{
  int v6 = *(unsigned __int8 *)(a1 + 512);
  if (*(unsigned char *)(a1 + 512))
  {
    if (v6 != 2)
    {
      if (v6 != 1) {
        return;
      }
      goto LABEL_12;
    }
  }
  else if (!*(unsigned char *)(a1 + 449) {
         || (unint64_t v7 = (WebCore *)WebCore::ResourceRequestBase::httpMethod(this),
  }
             (WebCore::isSimpleCrossOriginAccessRequest(v7, (const WTF::String *)(a1 + 96), v8) & 1) == 0))
  {
LABEL_12:
    WebKit::NetworkLoadChecker::checkCORSRequestWithPreflight(a1, (uint64_t)this, a3);
    return;
  }
  long long v9 = *(atomic_uint **)(a1 + 240);
  if (v9) {
    atomic_fetch_add(v9, 1u);
  }
  WebCore::updateRequestForAccessControl();
  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v9, v10);
  std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v12, (uint64_t)this);
  unsigned int v13 = 0;
  long long v11 = *a3;
  *a3 = 0;
  (*(void (**)(const void *, unsigned char *))(*(void *)v11 + 16))(v11, v12);
  (*(void (**)(const void *))(*(void *)v11 + 8))(v11);
  if (v13 != -1) {
    (*(&off_1EE9C39F0 + v13))((int)&v14, (WebCore::ResourceRequestBase *)v12);
  }
}

void WebKit::NetworkLoadChecker::checkCORSRequestWithPreflight(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 449) = 0;
  WebCore::CrossOriginPreflightResultCache::singleton((WebCore::CrossOriginPreflightResultCache *)a1);
  uint64_t v6 = *(void *)(a1 + 248) + 8;
  LOBYTE(buf[0]) = 0;
  LODWORD(v96) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, v6);
  uint64_t v7 = *(void *)(a1 + 240) + 8;
  BYTE8(v96) = 0;
  DWORD2(v98) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v96 + 8, v7);
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
  WebCore::ResourceRequestBase::httpMethod((WebCore::ResourceRequestBase *)a2);
  int canSkipPreflight = WebCore::CrossOriginPreflightResultCache::canSkipPreflight();
  if (DWORD2(v98) != -1) {
    ((void (*)(uint64_t *, char *))off_1EE9C39D0[DWORD2(v98)])(&v54, (char *)&v96 + 8);
  }
  DWORD2(v98) = -1;
  if (v96 != -1) {
    ((void (*)(uint64_t *, void *))off_1EE9C39D0[v96])(&v54, buf);
  }
  if (canSkipPreflight)
  {
    long long v9 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 134217984;
      *(void *)((char *)buf + 4) = a1;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%p - NetworkLoadChecker::checkCORSRequestWithPreflight - preflight can be skipped thanks to cached result", (uint8_t *)buf, 0xCu);
    }
    uint64_t v10 = *(atomic_uint **)(a1 + 240);
    if (v10) {
      atomic_fetch_add(v10, 1u);
    }
    WebCore::updateRequestForAccessControl();
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v10, v11);
    std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)buf, a2);
    unsigned int v120 = 0;
    BOOL v12 = *a3;
    *a3 = 0;
    (*(void (**)(const void *, void *))(*(void *)v12 + 16))(v12, buf);
    (*(void (**)(const void *))(*(void *)v12 + 8))(v12);
    if (v120 != -1) {
      (*(&off_1EE9C39F0 + v120))((int)&v54, (WebCore::ResourceRequestBase *)buf);
    }
  }
  else
  {
    WebCore::ResourceRequest::ResourceRequest(&v74, (const String *)a2);
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v72, (WTF::ASCIILiteral *)(a1 + 96));
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v73, (WTF::ASCIILiteral *)(a1 + 112));
    WebCore::ResourceRequestBase::setHTTPHeaderFields();
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v73);
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v72);
    *(_OWORD *)&buf[1] = v75;
    LODWORD(v75) = v75 & 0xFFFFFFFE;
    CFTypeRef v13 = v74;
    uint64_t v14 = v77;
    CFTypeRef v74 = 0;
    long long v96 = v76;
    uint64_t v77 = 0;
    buf[0] = v13;
    uint64_t v97 = v14;
    long long v98 = v78;
    long long v99 = v79;
    LODWORD(v78) = v78 & 0xFFFFFFFE;
    long long v15 = v81;
    long long v81 = 0u;
    long long v101 = v15;
    uint64_t v16 = v82;
    uint64_t v82 = 0;
    uint64_t v100 = v80;
    uint64_t v102 = v16;
    uint64_t v17 = v83;
    uint64_t v83 = 0;
    uint64_t v103 = v17;
    *(void *)&long long v15 = v84;
    uint64_t v84 = 0;
    uint64_t v104 = v15;
    uint64_t v18 = v85;
    uint64_t v85 = 0;
    uint64_t v105 = v18;
    *(void *)&long long v15 = v86;
    uint64_t v86 = 0;
    uint64_t v106 = v15;
    char v108 = v88;
    int v107 = v87;
    long long v19 = v89;
    long long v89 = 0u;
    long long v109 = v19;
    char v112 = v92;
    uint64_t v110 = v90;
    uint64_t v111 = v91;
    CFTypeRef v20 = v93;
    uint64_t v90 = 0;
    CFTypeRef v93 = 0;
    CFTypeRef v113 = v20;
    unint64_t v21 = *(atomic_uint **)(a1 + 240);
    atomic_fetch_add(v21, 1u);
    uint64_t v114 = v21;
    int v22 = *(atomic_uint **)(a1 + 248);
    atomic_fetch_add(v22, 1u);
    char v115 = v22;
    WebCore::ResourceRequestBase::httpReferrer(&v116, (WebCore::ResourceRequestBase *)a2);
    WebCore::ResourceRequestBase::httpUserAgent(v117, (WebCore::ResourceRequestBase *)a2);
    uint64_t v23 = *(void *)(a1 + 88);
    v117[1] = *(void *)(a1 + 72);
    v117[2] = v23;
    int v118 = *(_DWORD *)(a1 + 64);
    char hasHTTPHeaderField = WebCore::ResourceRequestBase::hasHTTPHeaderField();
    uint64_t v24 = *(void *)(a1 + 80);
    uint64_t v25 = *(void *)(a1 + 1152);
    if (v25)
    {
      uint64_t v26 = *(void *)(v25 + 8);
      if (v26) {
        uint64_t v27 = v26 - 48;
      }
      else {
        uint64_t v27 = 0;
      }
    }
    else
    {
      uint64_t v27 = 0;
    }
    uint64_t v54 = a1;
    WTF::URL::URL((uint64_t)v55, (uint64_t *)a2);
    WTF::URL::URL((uint64_t)v56, (uint64_t *)(a2 + 40));
    uint64_t v57 = *(void *)(a2 + 80);
    long long v28 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a2 + 88) = 0u;
    long long v58 = v28;
    *(void *)&long long v28 = *(void *)(a2 + 104);
    *(void *)(a2 + 104) = 0;
    uint64_t v59 = v28;
    uint64_t v29 = *(void *)(a2 + 112);
    *(void *)(a2 + 11objc_destroyWeak(this + 2) = 0;
    uint64_t v60 = v29;
    *(void *)&long long v28 = *(void *)(a2 + 120);
    *(void *)(a2 + 120) = 0;
    uint64_t v61 = v28;
    uint64_t v30 = *(void *)(a2 + 128);
    *(void *)(a2 + 128) = 0;
    uint64_t v62 = v30;
    *(void *)&long long v28 = *(void *)(a2 + 136);
    *(void *)(a2 + 136) = 0;
    uint64_t v63 = v28;
    LODWORD(v30) = *(_DWORD *)(a2 + 144);
    char v65 = *(unsigned char *)(a2 + 148);
    int v64 = v30;
    long long v31 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a2 + 15objc_destroyWeak(this + 2) = 0u;
    long long v66 = v31;
    char v69 = *(unsigned char *)(a2 + 184);
    uint64_t v32 = *(void *)(a2 + 168);
    uint64_t v33 = *(void *)(a2 + 176);
    *(void *)(a2 + 168) = 0;
    uint64_t v67 = v32;
    uint64_t v68 = v33;
    int v34 = *(const void **)(a2 + 192);
    *(void *)(a2 + 19objc_destroyWeak(this + 2) = 0;
    uint64_t v35 = *a3;
    *a3 = 0;
    cf[0] = v34;
    cf[1] = v35;
    BOOL v71 = *(void *)(a1 + 464) != 0;
    uint64_t v36 = (WebKit::NetworkCORSPreflightChecker *)WTF::fastMalloc((WTF *)0x488);
    char v37 = *(unsigned char *)(a1 + 529);
    uint64_t v38 = WTF::fastMalloc((WTF *)0xE8);
    *(void *)uint64_t v38 = &unk_1EE9C3A18;
    *(void *)(v38 + 8) = v54;
    WTF::URL::URL(v38 + 16, v55);
    WTF::URL::URL(v38 + 56, v56);
    *(void *)(v38 + 96) = v57;
    *(void *)(v38 + 104) = v58;
    uint64_t v39 = *((void *)&v58 + 1);
    long long v58 = 0u;
    *(void *)(v38 + 11objc_destroyWeak(this + 2) = v39;
    uint64_t v40 = v59;
    uint64_t v59 = 0;
    *(void *)(v38 + 120) = v40;
    uint64_t v41 = v60;
    uint64_t v60 = 0;
    *(void *)(v38 + 128) = v41;
    uint64_t v42 = v61;
    uint64_t v61 = 0;
    *(void *)(v38 + 136) = v42;
    uint64_t v43 = v62;
    uint64_t v62 = 0;
    *(void *)(v38 + 144) = v43;
    uint64_t v44 = v63;
    uint64_t v63 = 0;
    *(void *)(v38 + 15objc_destroyWeak(this + 2) = v44;
    LODWORD(v43) = v64;
    *(unsigned char *)(v38 + 164) = v65;
    *(_DWORD *)(v38 + 160) = v43;
    *(void *)(v38 + 168) = v66;
    uint64_t v45 = *((void *)&v66 + 1);
    long long v66 = 0u;
    *(void *)(v38 + 176) = v45;
    uint64_t v46 = v67;
    uint64_t v67 = 0;
    *(void *)(v38 + 184) = v46;
    uint64_t v47 = v68;
    *(unsigned char *)(v38 + 200) = v69;
    *(void *)(v38 + 19objc_destroyWeak(this + 2) = v47;
    *(CFTypeRef *)(v38 + 208) = cf[0];
    CFTypeRef v48 = cf[1];
    *(_OWORD *)CFTypeRef cf = 0u;
    *(void *)(v38 + 2++*(_DWORD *)(this + 16) = v48;
    *(unsigned char *)(v38 + 224) = v71;
    uint64_t v94 = v38;
    WebKit::NetworkCORSPreflightChecker::NetworkCORSPreflightChecker((uint64_t)v36, v24, v27, (uint64_t)buf, v37, &v94);
    if (v94) {
      (*(void (**)(uint64_t))(*(void *)v94 + 8))(v94);
    }
    CFTypeRef v49 = (WebKit::NetworkCORSPreflightChecker **)(a1 + 440);
    std::unique_ptr<WebKit::NetworkCORSPreflightChecker>::reset[abi:sn180100](v49, v36);
    CFTypeRef v50 = cf[1];
    cf[1] = 0;
    if (v50) {
      (*(void (**)(CFTypeRef))(*(void *)v50 + 8))(v50);
    }
    CFTypeRef v51 = cf[0];
    cf[0] = 0;
    if (v51) {
      CFRelease(v51);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v55);
    WebKit::NetworkCORSPreflightChecker::startPreflight((const WebCore::ResourceRequest **)*v49);
    WebKit::NetworkCORSPreflightChecker::Parameters::~Parameters((WebKit::NetworkCORSPreflightChecker::Parameters *)buf, v52);
    CFTypeRef v53 = v93;
    CFTypeRef v93 = 0;
    if (v53) {
      CFRelease(v53);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v74);
  }
}

uint64_t *WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>::CompletionHandler<WebKit::NetworkLoadChecker::processContentRuleListsForLoad(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebCore::ResourceError> &&)> &&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0xE8);
  uint64_t v5 = *a2;
  *(void *)uint64_t v4 = &unk_1EE9C3B68;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = a2[1];
  a2[1] = 0;
  *(void *)(v4 + ++*(_DWORD *)(this + 16) = v6;
  WTF::URL::URL(v4 + 24, a2 + 2);
  WTF::URL::URL(v4 + 64, a2 + 7);
  *(void *)(v4 + 104) = a2[12];
  uint64_t v7 = a2[13];
  a2[13] = 0;
  *(void *)(v4 + 120) = 0;
  *(void *)(v4 + 128) = 0;
  *(void *)(v4 + 11objc_destroyWeak(this + 2) = v7;
  uint64_t v8 = a2[14];
  a2[14] = 0;
  *(void *)(v4 + 120) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = 0;
  *(_DWORD *)(v4 + 128) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = 0;
  *(_DWORD *)(v4 + 13objc_destroyWeak(this + 2) = v8;
  *(void *)(v4 + 136) = 0;
  *(void *)(v4 + 144) = 0;
  uint64_t v9 = a2[16];
  a2[16] = 0;
  *(void *)(v4 + 136) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = 0;
  *(_DWORD *)(v4 + 144) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = 0;
  *(_DWORD *)(v4 + 148) = v9;
  *(void *)(v4 + 15objc_destroyWeak(this + 2) = 0;
  *(void *)(v4 + 160) = 0;
  uint64_t v10 = a2[18];
  a2[18] = 0;
  *(void *)(v4 + 15objc_destroyWeak(this + 2) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = 0;
  *(_DWORD *)(v4 + 160) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = 0;
  *(_DWORD *)(v4 + 164) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 40);
  *(unsigned char *)(v4 + 17objc_destroyWeak(this + 2) = *((unsigned char *)a2 + 164);
  *(_DWORD *)(v4 + 168) = v10;
  uint64_t v11 = a2[21];
  a2[21] = 0;
  *(void *)(v4 + 176) = v11;
  uint64_t v12 = a2[22];
  a2[22] = 0;
  *(void *)(v4 + 184) = v12;
  uint64_t v13 = a2[23];
  a2[23] = 0;
  *(void *)(v4 + 19objc_destroyWeak(this + 2) = v13;
  uint64_t v14 = a2[24];
  *(unsigned char *)(v4 + 208) = *((unsigned char *)a2 + 200);
  *(void *)(v4 + 200) = v14;
  uint64_t v15 = a2[26];
  a2[26] = 0;
  *(void *)(v4 + 2++*(_DWORD *)(this + 16) = v15;
  uint64_t v16 = a2[27];
  a2[27] = 0;
  *(void *)(v4 + 224) = v16;
  *a1 = v4;
  return a1;
}

void *WebKit::NetworkLoadChecker::processContentRuleListsForLoad(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebCore::ResourceError> &&)> &&)::$_0::~$_0(void *a1)
{
  uint64_t v2 = a1[27];
  a1[27] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  CFTypeRef v3 = (const void *)a1[26];
  a1[26] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 2));
  uint64_t v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }
  return a1;
}

void WebKit::NetworkLoadChecker::storeRedirectionIfNeeded(WebKit::NetworkLoadChecker *this, const String *a2, const WebCore::ResourceResponse *a3)
{
  if (*((unsigned char *)this + 529))
  {
    v12[0] = 0;
    WebCore::ResourceRequest::ResourceRequest(v13, a2);
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v15, a3);
    uint64_t v5 = (const void *)*((void *)a3 + 30);
    CFTypeRef cf = v5;
    if (v5) {
      CFRetain(v5);
    }
    char v17 = *((unsigned char *)a3 + 248);
    WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)&v18);
    unsigned int v6 = *((_DWORD *)this + 283);
    if (v6 == *((_DWORD *)this + 282))
    {
      WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NetworkTransactionInformation>((uint64_t)this + 1120, (unint64_t)v12);
    }
    else
    {
      WebCore::NetworkTransactionInformation::NetworkTransactionInformation(*((void *)this + 140) + 592 * v6, (uint64_t)v12);
      ++*((_DWORD *)this + 283);
    }
    uint64_t v8 = v20;
    CFTypeRef v20 = 0;
    if (v8) {
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v8);
    }
    uint64_t v9 = v19;
    long long v19 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v7);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    CFTypeRef v10 = cf;
    CFTypeRef cf = 0;
    if (v10) {
      CFRelease(v10);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v15, v7);
    CFTypeRef v11 = v14;
    CFTypeRef v14 = 0;
    if (v11) {
      CFRelease(v11);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v13);
  }
}

unsigned int *WebKit::NetworkLoadScheduler::HostContext::schedule(WebKit::NetworkLoadScheduler::HostContext *this, WebKit::NetworkLoad *a2)
{
  uint64_t v4 = (WebKit::NetworkLoad *)((char *)a2 + 3024);
  if (WebCore::ResourceRequestBase::priority((WebKit::NetworkLoad *)((char *)a2 + 3024)) <= 1
    && (WebCore::ResourceRequestBase::isConditional(v4) & 1) == 0
    && WTF::WeakHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)this, v6) > 1)
  {
    return WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::NetworkLoad>((uint64_t)this + 16, (uint64_t)a2, (uint64_t)v7);
  }

  return (unsigned int *)WebKit::NetworkLoadScheduler::HostContext::start(this, a2);
}

uint64_t WebKit::NetworkLoadScheduler::HostContext::start(WebKit::NetworkLoadScheduler::HostContext *this, WebKit::NetworkLoad *a2)
{
  WTF::WeakHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::NetworkLoad>((uint64_t)this, (unsigned int *)a2, (uint64_t)v4);
  uint64_t result = *((void *)a2 + 376);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

unsigned int *WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::NetworkLoad>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 28);
  unsigned int v7 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v7;
  if (v7 > v6) {
    WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(a1);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  uint64_t v8 = *(atomic_uint **)(a2 + 8);
  atomic_fetch_add(v8, 1u);
  atomic_fetch_add(v8, 1u);
  CFTypeRef v11 = (WTF *)v8;
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, (uint64_t *)&v11, a3);
  uint64_t result = (unsigned int *)v11;
  CFTypeRef v11 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
  }
  if (v8)
  {
    if (atomic_fetch_add(v8, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v8);
      return (unsigned int *)WTF::fastFree((WTF *)v8, v9);
    }
  }
  return result;
}

uint64_t WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::NetworkLoad>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 28);
  unsigned int v5 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v5;
  if (v5 > v4) {
    WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(a1);
  }
  uint64_t v6 = *(void *)(a2 + 8);
  if (!v6 || !*(void *)(v6 + 8)) {
    return 0;
  }
  CFTypeRef v11 = *(WTF **)(a2 + 8);
  unsigned int v7 = (WTF **)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, (uint64_t *)&v11);
  uint64_t v8 = *(void *)a1;
  if (*(void *)a1) {
    v8 += 8 * *(unsigned int *)(v8 - 4);
  }
  if ((WTF **)v8 == v7) {
    return 0;
  }
  CFTypeRef v10 = *v7;
  if (!*v7) {
    return 0;
  }
  CFTypeRef v11 = *v7;
  WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove((uint64_t *)a1, (void **)&v11);
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::unlinkAndDelete(a1, v10);
  return 1;
}

uint64_t WebKit::NetworkLoadScheduler::HostContext::prioritize(WebKit::NetworkLoadScheduler::HostContext *this, WebKit::NetworkLoad *a2)
{
  WebCore::ResourceRequestBase::priority((WebKit::NetworkLoad *)((char *)a2 + 120));
  WebKit::NetworkLoad::reprioritizeRequest((uint64_t)a2);
  uint64_t result = WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::NetworkLoad>((uint64_t)this + 16, (uint64_t)a2);
  if (result)
  {
    return WebKit::NetworkLoadScheduler::HostContext::start(this, a2);
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::NetworkLoad>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    uint64_t v11 = *(void *)a1;
    if (*(void *)a1)
    {
      int v12 = *(_DWORD *)(v11 - 4);
      if (!v12) {
        goto LABEL_21;
      }
      int v13 = 0;
      unsigned int v14 = v12 - 1;
      do
      {
        uint64_t v15 = (unsigned int **)(v11 + 8 * v14);
        if ((unint64_t)*v15 + 1 >= 2 && !*((void *)*v15 + 1))
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v15, a2);
          ++v13;
        }
      }
      while ((unint64_t)v14--);
      uint64_t v11 = *(void *)a1;
      if (v13)
      {
        *(_DWORD *)(v11 - 16) += v13;
        uint64_t v21 = *(void *)a1;
        if (*(void *)a1) {
          int v22 = *(_DWORD *)(v21 - 12);
        }
        else {
          int v22 = 0;
        }
        *(_DWORD *)(v21 - 1objc_destroyWeak(this + 2) = v22 - v13;
        uint64_t v11 = *(void *)a1;
      }
      if (v11)
      {
        unsigned int v17 = *(_DWORD *)(v11 - 4);
        if (v17 >= 9 && 6 * *(_DWORD *)(v11 - 12) < v17)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v11 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v11)
          {
            unsigned int v19 = 0;
            goto LABEL_27;
          }
LABEL_22:
          unsigned int v19 = *(_DWORD *)(v11 - 12);
          int v20 = 0x7FFFFFFF;
          if (v19 >= 0x7FFFFFFF) {
            goto LABEL_28;
          }
          goto LABEL_27;
        }
LABEL_21:
        *(_DWORD *)(a1 + 8) = 0;
        goto LABEL_22;
      }
    }
    unsigned int v19 = 0;
    *(_DWORD *)(a1 + 8) = 0;
LABEL_27:
    int v20 = v19;
LABEL_28:
    *(_DWORD *)(a1 + 1objc_destroyWeak(this + 2) = 2 * v20;
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 2, (uint64_t)a2);
  uint64_t v8 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v8, 1u);
  atomic_fetch_add(v8, 1u);
  uint64_t v23 = (WTF *)v8;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v23, a3);
  uint64_t result = (unsigned int *)v23;
  uint64_t v23 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
  }
  if (v8)
  {
    if (atomic_fetch_add(v8, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v8);
      return (unsigned int *)WTF::fastFree((WTF *)v8, v9);
    }
  }
  return result;
}

void WebKit::NetworkLoadScheduler::HostContext::~HostContext(WebKit::NetworkLoadScheduler::HostContext *this, WebKit::NetworkLoad *a2)
{
  CFTypeRef v3 = (void *)((char *)this + 16);
  unsigned int v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    while (1)
    {
      a2 = *(WebKit::NetworkLoad **)(*v4 + 8);
      if (a2) {
        break;
      }
      unsigned int v4 = (void *)v4[2];
      if (!v4) {
        goto LABEL_2;
      }
    }
LABEL_6:
    WebKit::NetworkLoadScheduler::HostContext::start(this, a2);
    while (1)
    {
      unsigned int v4 = (void *)v4[2];
      if (!v4) {
        break;
      }
      a2 = *(WebKit::NetworkLoad **)(*v4 + 8);
      if (a2)
      {
        ++*((_DWORD *)this + 10);
        goto LABEL_6;
      }
    }
    ++*((_DWORD *)this + 10);
  }
LABEL_2:
  WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakListHashSet(v3, a2);
  if (*(void *)this) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*(unsigned int ***)this, v5);
  }
}

void *WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakListHashSet(void *a1, void *a2)
{
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes((uint64_t)a1, a2);
  if (*a1) {
    WTF::fastFree((WTF *)(*a1 - 16), v3);
  }
  return a1;
}

double WebKit::NetworkLoadScheduler::NetworkLoadScheduler(WebKit::NetworkLoadScheduler *this)
{
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

void WebKit::NetworkLoadScheduler::~NetworkLoadScheduler(WebKit::NetworkLoadScheduler *this, WTF::StringImpl *a2)
{
  CFTypeRef v3 = (WTF::StringImpl **)*((void *)this + 3);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      unsigned int v6 = (void *)(v4 + 24);
      do
      {
        if (*(v6 - 3) != -1)
        {
          WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes((uint64_t)v6, a2);
          if (*v6) {
            WTF::fastFree((WTF *)(*v6 - 16), a2);
          }
          unsigned int v7 = (WTF::StringImpl *)*(v6 - 2);
          *(v6 - objc_destroyWeak(this + 2) = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2) {
              WTF::StringImpl::destroy(v7, a2);
            }
            else {
              *(_DWORD *)v7 -= 2;
            }
          }
          uint64_t v8 = (WTF::StringImpl *)*(v6 - 3);
          *(v6 - 3) = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2) {
              WTF::StringImpl::destroy(v8, a2);
            }
            else {
              *(_DWORD *)v8 -= 2;
            }
          }
        }
        v6 += 7;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v9 = *((void *)this + 1);
  if (v9)
  {
    uint64_t v10 = *(unsigned int *)(v9 - 4);
    if (v10)
    {
      uint64_t v11 = (WTF **)(v9 + 8);
      do
      {
        if (*(v11 - 1) != (WTF *)-1)
        {
          int v12 = *v11;
          WTF *v11 = 0;
          if (v12) {
            std::default_delete<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>::operator()[abi:sn180100](v12, a2);
          }
        }
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  if (*(void *)this)
  {
    *(void *)(*(void *)this + 8) = 0;
    int v13 = *(unsigned int **)this;
    *(void *)this = 0;
    if (v13)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, a2);
      }
    }
  }
  else
  {
    *(void *)this = 0;
  }
}

WTF::StringImpl *WebKit::NetworkLoadScheduler::scheduleMainResourceLoad(WebKit::NetworkLoadScheduler *this, WebKit::NetworkLoad *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (WebKit::NetworkLoad *)((char *)a2 + 120);
  uint64_t v5 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebKit::NetworkLoad *)((char *)a2 + 120));
  WTF::URL::protocolHostAndPort((uint64_t *)&v25, v5);
  if (!*((void *)this + 3)
    || !WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 3, &v25, v7))
  {
    goto LABEL_2;
  }
  WebCore::ResourceRequestBase::httpUserAgent((uint64_t *)&v24, v4);
  uint64_t v10 = v24;
  uint64_t v11 = v25;
  int v12 = (WTF::StringImpl **)MEMORY[0x1E4F30980];
  int v13 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
  if (!v25) {
    uint64_t v11 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
  }
  if (v11)
  {
    *(_DWORD *)v11 += 2;
    int v13 = *v12;
  }
  unsigned int v14 = (WTF ***)((char *)this + 16);
  *(void *)int buf = v11;
  if (v10) {
    uint64_t v15 = v24;
  }
  else {
    uint64_t v15 = v13;
  }
  if (v15) {
    *(_DWORD *)v15 += 2;
  }
  *(void *)&buf[8] = v15;
  uint64_t v16 = WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>>,std::tuple<WTF::String,WTF::String>>((WTF ***)this + 2, (WTF::StringImpl **)buf);
  WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair((WTF::StringImpl **)buf, v17);
  uint64_t v18 = v24;
  uint64_t v24 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v6);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  unsigned int v19 = *v14;
  if (*v14) {
    v19 += 7 * *((unsigned int *)v19 - 1);
  }
  if (v19 != v16 && (int v20 = *((_DWORD *)v16 + 4)) != 0)
  {
    *((_DWORD *)v16 + 4) = v20 - 1;
    WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::NetworkLoad>((uint64_t)(v16 + 3), (uint64_t)a2, (uint64_t)buf);
    uint64_t v21 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = *((_DWORD *)v16 + 4);
      WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)(v16 + 3));
      uint64_t v23 = v16[3];
      if (v23) {
        LODWORD(v23) = *((_DWORD *)v23 - 3);
      }
      *(_DWORD *)int buf = 134218752;
      *(void *)&uint8_t buf[4] = this;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a2;
      __int16 v27 = 1024;
      int v28 = v22;
      __int16 v29 = 1024;
      int v30 = (int)v23;
      _os_log_impl(&dword_1985F2000, v21, OS_LOG_TYPE_DEFAULT, "%p - NetworkLoadScheduler::scheduleMainResourceLoad deferring load %p; %u pending preconnects; %u pending loads",
        buf,
        0x22u);
    }
  }
  else
  {
LABEL_2:
    uint64_t v8 = *((void *)a2 + 376);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
    }
  }
  double result = v25;
  uint64_t v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WebKit::NetworkLoadScheduler::scheduleLoad(WebKit::NetworkLoadScheduler *this, unsigned int **a2)
{
  CFTypeRef v3 = WebKit::NetworkLoadScheduler::contextForLoad(this, (const WebKit::NetworkLoad *)a2);
  if (v3)
  {
    return WebKit::NetworkLoadScheduler::HostContext::schedule((WebKit::NetworkLoadScheduler::HostContext *)v3, (WebKit::NetworkLoad *)a2);
  }
  else
  {
    double result = a2[376];
    if (result)
    {
      uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 24);
      return (unsigned int *)v5();
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkLoadScheduler::unscheduleMainResourceLoad(WTF ***this, WebKit::NetworkLoad *a2, const WTF::String **a3)
{
  unsigned int v6 = (WebKit::NetworkLoad *)((char *)a2 + 120);
  unsigned int v7 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebKit::NetworkLoad *)((char *)a2 + 120));
  WTF::URL::protocolHostAndPort((uint64_t *)&v23, v7);
  if (a3) {
    WebKit::NetworkLoadScheduler::updateOriginProtocolInfo((WebKit::NetworkLoadScheduler *)this, &v23, a3[11]);
  }
  WebCore::ResourceRequestBase::httpUserAgent((uint64_t *)&v20, v6);
  uint64_t v8 = v23;
  uint64_t v9 = v20;
  uint64_t v10 = (WTF::StringImpl **)MEMORY[0x1E4F30980];
  uint64_t v11 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
  if (!v23) {
    uint64_t v8 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
  }
  if (v8)
  {
    *(_DWORD *)v8 += 2;
    uint64_t v11 = *v10;
  }
  int v12 = this + 2;
  v21[0] = v8;
  if (v9) {
    int v13 = v20;
  }
  else {
    int v13 = v11;
  }
  if (v13) {
    *(_DWORD *)v13 += 2;
  }
  v21[1] = v13;
  unsigned int v14 = WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>>,std::tuple<WTF::String,WTF::String>>(this + 2, v21);
  v22[0] = v14;
  v22[1] = v15;
  WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v21, (WTF::StringImpl *)v15);
  unsigned int v17 = v20;
  int v20 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v16);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t v18 = *v12;
  if (*v12) {
    v18 += 7 * *((unsigned int *)v18 - 1);
  }
  if (v18 != v14
    && WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::NetworkLoad>((uint64_t)(v14 + 3), (uint64_t)a2))
  {
    WebKit::NetworkLoadScheduler::maybePrunePreconnectInfo((uint64_t)this, v22);
  }
  double result = v23;
  uint64_t v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *WebKit::NetworkLoadScheduler::contextForLoad(WebKit::NetworkLoadScheduler *this, const WebKit::NetworkLoad *a2)
{
  uint64_t v4 = (const WebKit::NetworkLoad *)((char *)a2 + 120);
  if ((*(unsigned char *)(WebCore::ResourceRequestBase::url((const WebKit::NetworkLoad *)((char *)a2 + 120)) + 8) & 2) == 0) {
    return 0;
  }
  uint64_t v5 = *((void *)a2 + 5);
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x198B5BFFCLL);
  }
  uint64_t v6 = *((void *)this + 1);
  if (!v6) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(v6 - 8);
  unint64_t v8 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
  unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  uint64_t v11 = v7 & ((v10 >> 31) ^ v10);
  uint64_t v12 = *(void *)(v6 + 16 * v11);
  if (v12 != v5)
  {
    int v13 = 1;
    while (v12)
    {
      uint64_t v11 = (v11 + v13) & v7;
      uint64_t v12 = *(void *)(v6 + 16 * v11);
      ++v13;
      if (v12 == v5) {
        goto LABEL_8;
      }
    }
    return 0;
  }
LABEL_8:
  unsigned int v14 = *(uint64_t **)(v6 + 16 * v11 + 8);
  if (v14)
  {
    uint64_t v15 = (WTF::URL *)WebCore::ResourceRequestBase::url(v4);
    WTF::URL::host(v15);
    if ((v16 & 0xFF00000000) != 0) {
      WTF::String::String();
    }
    else {
      WTF::String::String();
    }
    uint64_t v18 = *v14;
    if (*v14
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v14, 0), (uint64_t v18 = *v14) != 0))
    {
      int v19 = *(_DWORD *)(v18 - 8);
    }
    else
    {
      int v19 = 0;
    }
    unsigned int v20 = *((_DWORD *)v36 + 4);
    if (v20 >= 0x100) {
      unsigned int v21 = v20 >> 8;
    }
    else {
      unsigned int v21 = WTF::StringImpl::hashSlowCase(v36);
    }
    int v22 = 0;
    for (int i = 1; ; ++i)
    {
      unsigned int v24 = v21 & v19;
      uint64_t v25 = (WTF::StringImpl **)(v18 + 16 * (v21 & v19));
      uint64_t v26 = *v25;
      if (!*v25) {
        break;
      }
      if (v26 == (WTF *)-1)
      {
        int v22 = (WTF::StringImpl **)(v18 + 16 * v24);
      }
      else if (WTF::equal(v26, v36, v17))
      {
        goto LABEL_19;
      }
      unsigned int v21 = i + v24;
    }
    if (v22)
    {
      atomic_uint *v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*v14 - 16);
      uint64_t v25 = v22;
    }
    WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WebKit::NetworkLoadScheduler::contextForLoad(WebKit::NetworkLoad const&)::$_0>((uint64_t)v25, &v36);
    uint64_t v30 = *v14;
    if (*v14) {
      int v31 = *(_DWORD *)(v30 - 12) + 1;
    }
    else {
      int v31 = 1;
    }
    *(_DWORD *)(v30 - 1objc_destroyWeak(this + 2) = v31;
    uint64_t v32 = *v14;
    if (*v14) {
      int v33 = *(_DWORD *)(v32 - 12);
    }
    else {
      int v33 = 0;
    }
    uint64_t v34 = (*(_DWORD *)(v32 - 16) + v33);
    unint64_t v35 = *(unsigned int *)(v32 - 4);
    if (v35 > 0x400)
    {
      if (v35 > 2 * v34)
      {
LABEL_19:
        unsigned int v14 = (uint64_t *)v25[1];
        int v28 = v36;
        uint64_t v36 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2) {
            WTF::StringImpl::destroy(v28, v27);
          }
          else {
            *(_DWORD *)v28 -= 2;
          }
        }
        return v14;
      }
    }
    else if (3 * v35 > 4 * v34)
    {
      goto LABEL_19;
    }
    uint64_t v25 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v14, v25);
    goto LABEL_19;
  }
  return v14;
}

const WTF::String **WebKit::mainResourceLoadKey(const WTF::String **this, const WTF::String *a2, const WTF::String **a3)
{
  CFTypeRef v3 = *a3;
  uint64_t v4 = (const WTF::String **)MEMORY[0x1E4F30980];
  uint64_t v5 = (const WTF::String *)*MEMORY[0x1E4F30980];
  if (a2) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = (const WTF::String *)*MEMORY[0x1E4F30980];
  }
  if (v6)
  {
    *(_DWORD *)v6 += 2;
    uint64_t v5 = *v4;
  }
  unsigned int v7 = *a3;
  *this = v6;
  if (v3) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8) {
    *(_DWORD *)v8 += 2;
  }
  this[1] = v8;
  return this;
}

WTF::StringImpl **WebKit::NetworkLoadScheduler::updateOriginProtocolInfo(WebKit::NetworkLoadScheduler *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  uint64_t v5 = (uint64_t *)((char *)this + 24);
  if (MEMORY[0x19972E990](a3, "http/1.1", 8))
  {
    if (*v5)
    {
      if (*(_DWORD *)(*v5 - 12) >= 0x80u)
      {
        unsigned int v7 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::random(v5);
        WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(v5, v7);
      }
    }
    return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v5, a2, v4, (uint64_t)v8);
  }
  else
  {
    return WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(v5, a2, v4);
  }
}

void WebKit::NetworkLoadScheduler::maybePrunePreconnectInfo(uint64_t a1, WTF::StringImpl ***a2)
{
  if (!*((_DWORD *)*a2 + 4)
    && WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(*a2 + 3, a2))
  {
    uint64_t v4 = *a2;
    WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::remove((uint64_t *)(a1 + 16), v4);
  }
}

WTF::StringImpl **WebKit::NetworkLoadScheduler::startedPreconnectForMainResource(WTF ***this, const WTF::URL *a2, const WTF::String **a3)
{
  WTF::URL::protocolHostAndPort((uint64_t *)&v13, a2);
  WebKit::mainResourceLoadKey(v16, v13, a3);
  uint64_t v6 = v13;
  int v13 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  unsigned int v7 = WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>>,std::tuple<WTF::String,WTF::String>>(this + 2, v16);
  unint64_t v9 = this[2];
  if (v9) {
    v9 += 7 * *((unsigned int *)v9 - 1);
  }
  if (v9 == v7)
  {
    LODWORD(v13) = 1;
    long long v14 = 0u;
    long long v15 = 0u;
    WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::add<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>((uint64_t)&v12, (uint64_t *)this + 2, v16, (int *)&v13);
    WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo::~PendingMainResourcePreconnectInfo((WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo *)&v13, v10);
  }
  else
  {
    ++*((_DWORD *)v7 + 4);
  }
  return WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v16, v8);
}

void WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::add<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, int *a4)
{
  __int16 v27 = a4;
  uint64_t v7 = *a2;
  if (*a2
    || (WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::expand(a2, 0), (uint64_t v7 = *a2) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unsigned int v9 = WTF::PairHash<WTF::String,WTF::String>::hash(a3) & v8;
  unint64_t v10 = (WTF **)(v7 + 56 * v9);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v10, v11, v12) & 1) == 0)
  {
    uint64_t v23 = 0;
    int v24 = 1;
    do
    {
      if (*v10 == (WTF *)-1)
      {
        uint64_t v23 = v10;
      }
      else if (WTF::PairHash<WTF::String,WTF::String>::equal(v10, a3, v14))
      {
        uint64_t v25 = *a2;
        if (*a2) {
          unsigned int v26 = *(_DWORD *)(v25 - 4);
        }
        else {
          unsigned int v26 = 0;
        }
        char v22 = 0;
        uint64_t v21 = v25 + 56 * v26;
        goto LABEL_12;
      }
      unsigned int v9 = (v9 + v24) & v8;
      unint64_t v10 = (WTF **)(v7 + 56 * v9);
      ++v24;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v10, v13, v14));
    if (v23)
    {
      *uint64_t v23 = 0;
      v23[1] = 0;
      void v23[2] = (WTF *)1;
      *(_OWORD *)(v23 + 3) = 0u;
      *(_OWORD *)(v23 + 5) = 0u;
      --*(_DWORD *)(*a2 - 16);
      unint64_t v10 = v23;
    }
  }
  WTF::HashMapTranslator<WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>>::translate<std::tuple<WTF::String,WTF::String> const&,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>,std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>> WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::inlineAdd<std::tuple<WTF::String,WTF::String> const&,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>(std::tuple<WTF::String,WTF::String> const&,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo &&)::{lambda(void)#1}>((uint64_t)v10, a3, &v27);
  uint64_t v15 = *a2;
  if (*a2) {
    int v16 = *(_DWORD *)(v15 - 12) + 1;
  }
  else {
    int v16 = 1;
  }
  *(_DWORD *)(v15 - 1objc_destroyWeak(this + 2) = v16;
  uint64_t v17 = *a2;
  if (*a2) {
    int v18 = *(_DWORD *)(v17 - 12);
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = (*(_DWORD *)(v17 - 16) + v18);
  unint64_t v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19) {
      goto LABEL_11;
    }
LABEL_25:
    unint64_t v10 = (WTF **)WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::expand(a2, v10);
    uint64_t v17 = *a2;
    if (*a2) {
      LODWORD(v20) = *(_DWORD *)(v17 - 4);
    }
    else {
      LODWORD(v20) = 0;
    }
    goto LABEL_11;
  }
  if (3 * v20 <= 4 * v19) {
    goto LABEL_25;
  }
LABEL_11:
  uint64_t v21 = v17 + 56 * v20;
  char v22 = 1;
LABEL_12:
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v21;
  *(unsigned char *)(a1 + ++*(_DWORD *)(this + 16) = v22;
}

void WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo::~PendingMainResourcePreconnectInfo(WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo *this, void *a2)
{
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes((uint64_t)this + 8, a2);
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
}

void WebKit::NetworkLoadScheduler::finishedPreconnectForMainResource(WebKit::NetworkLoadScheduler *this, const WTF::URL *a2, const WTF::String **a3, const WebCore::ResourceError *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (WTF ***)((char *)this + 16);
  WTF::URL::protocolHostAndPort((uint64_t *)&v19, a2);
  WebKit::mainResourceLoadKey((const WTF::String **)buf, v19, a3);
  int v8 = WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>>,std::tuple<WTF::String,WTF::String>>(v7, (WTF::StringImpl **)buf);
  v20[0] = v8;
  v20[1] = v9;
  WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair((WTF::StringImpl **)buf, (WTF::StringImpl *)v9);
  uint64_t v11 = v19;
  uint64_t v19 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = *v7;
  if (*v7) {
    v12 += 7 * *((unsigned int *)v12 - 1);
  }
  if (v12 != v8)
  {
    if (WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v8 + 3, v10))
    {
      --*((_DWORD *)v8 + 4);
    }
    else
    {
      uint64_t v13 = WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::takeFirst((uint64_t)(v8 + 3));
      long long v14 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = *((unsigned __int8 *)a4 + 60);
        int v16 = *((_DWORD *)v8 + 4);
        WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)(v8 + 3));
        uint64_t v17 = v8[3];
        if (v17) {
          LODWORD(v17) = *((_DWORD *)v17 - 3);
        }
        *(_DWORD *)int buf = 134219008;
        char v22 = this;
        __int16 v23 = 1024;
        int v24 = v15;
        __int16 v25 = 2048;
        uint64_t v26 = v13;
        __int16 v27 = 1024;
        int v28 = v16;
        __int16 v29 = 1024;
        int v30 = (int)v17;
        _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_DEFAULT, "%p - NetworkLoadScheduler::finishedPreconnectForMainResource (error: %d) starting delayed main resource load %p; %u pending preconnects; %u total pending loads",
          buf,
          0x28u);
      }
      uint64_t v18 = *(void *)(v13 + 3008);
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
      }
    }
    WebKit::NetworkLoadScheduler::maybePrunePreconnectInfo((uint64_t)this, v20);
  }
}

uint64_t WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(void *a1, void *a2)
{
  if (!*a1 || !*(_DWORD *)(*a1 - 12)) {
    return 1;
  }
  CFTypeRef v3 = (void *)a1[1];
  if (!v3)
  {
LABEL_8:
    WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t)a1, a2);
    return 1;
  }
  while (!*(void *)(*v3 + 8))
  {
    CFTypeRef v3 = (void *)v3[2];
    if (!v3) {
      goto LABEL_8;
    }
  }
  return 0;
}

uint64_t WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::takeFirst(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = 0;
    while (!*(void *)(*v1 + 8))
    {
      uint64_t v1 = (void *)v1[2];
      if (!v1) {
        goto LABEL_3;
      }
    }
    uint64_t v2 = v1;
  }
  else
  {
    uint64_t v2 = 0;
  }
LABEL_3:
  uint64_t v3 = *(void *)(*v2 + 8);
  WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove(a1, a1, v2);
  return v3;
}

void WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  if (*a1)
  {
    uint64_t v2 = (WTF::StringImpl **)(*a1 + 56 * *(unsigned int *)(*a1 - 4));
    if (v2 == a2) {
      return;
    }
  }
  else
  {
    if (!a2) {
      return;
    }
    uint64_t v2 = 0;
  }
  if (v2 != a2) {
    WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::remove(a1, a2);
  }
}

WTF::StringImpl **WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  double result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(a1, a2, a3);
  if (*a1)
  {
    uint64_t v5 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
    if ((WTF::StringImpl **)v5 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v5 = 0;
  }
  if ((WTF::StringImpl **)v5 != result)
  {
    return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(a1, result);
  }
  return result;
}

uint64_t WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  if (!*a1)
  {
    if (a2)
    {
      uint64_t v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  uint64_t v2 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
  if ((WTF::StringImpl **)v2 == a2) {
    return 0;
  }
LABEL_3:
  if ((WTF::StringImpl **)v2 != a2) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(a1, a2);
  }
  return 1;
}

uint64_t WebKit::NetworkLoadScheduler::setResourceLoadSchedulingMode(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v6 = a2;
  if (a3)
  {
    if (a3 == 1) {
      return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::ensure<WebKit::NetworkLoadScheduler::setResourceLoadSchedulingMode(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::LoadSchedulingMode)::$_0>((uint64_t)&v5, (uint64_t *)(result + 8), &v6);
    }
  }
  else
  {
    uint64_t v3 = (uint64_t *)(result + 8);
    uint64_t v4 = (WTF::StringImpl *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)(result + 8), &v6);
    return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::remove(v3, v4);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::ensure<WebKit::NetworkLoadScheduler::setResourceLoadSchedulingMode(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::LoadSchedulingMode)::$_0>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3);
  unsigned int v9 = result & v7;
  unint64_t v10 = (void *)(v6 + 16 * (result & v7));
  uint64_t v11 = *v10;
  uint64_t v12 = *a3;
  if (*v10)
  {
    uint64_t v21 = 0;
    int v22 = 1;
    do
    {
      if (v11 == v12)
      {
        uint64_t v23 = *a2;
        if (*a2) {
          uint64_t v24 = *(unsigned int *)(v23 - 4);
        }
        else {
          uint64_t v24 = 0;
        }
        char v20 = 0;
        uint64_t v19 = v23 + 16 * v24;
        goto LABEL_12;
      }
      if (v11 == -1) {
        uint64_t v21 = v10;
      }
      unsigned int v9 = (v9 + v22) & v7;
      unint64_t v10 = (void *)(v6 + 16 * v9);
      uint64_t v11 = *v10;
      ++v22;
    }
    while (*v10);
    if (v21)
    {
      void *v21 = 0;
      v21[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v12 = *a3;
      unint64_t v10 = v21;
    }
  }
  uint64_t result = (uint64_t)WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::translate<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WebKit::NetworkLoadScheduler::setResourceLoadSchedulingMode(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::LoadSchedulingMode)::$_0>(v10, v12);
  uint64_t v13 = *a2;
  if (*a2) {
    int v14 = *(_DWORD *)(v13 - 12) + 1;
  }
  else {
    int v14 = 1;
  }
  *(_DWORD *)(v13 - 1objc_destroyWeak(this + 2) = v14;
  uint64_t v15 = *a2;
  if (*a2) {
    int v16 = *(_DWORD *)(v15 - 12);
  }
  else {
    int v16 = 0;
  }
  uint64_t v17 = (*(_DWORD *)(v15 - 16) + v16);
  unint64_t v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17) {
      goto LABEL_11;
    }
LABEL_23:
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a2, v10);
    unint64_t v10 = (void *)result;
    uint64_t v15 = *a2;
    if (*a2) {
      unint64_t v18 = *(unsigned int *)(v15 - 4);
    }
    else {
      unint64_t v18 = 0;
    }
    goto LABEL_11;
  }
  if (3 * v18 <= 4 * v17) {
    goto LABEL_23;
  }
LABEL_11:
  uint64_t v19 = v15 + 16 * v18;
  char v20 = 1;
LABEL_12:
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v19;
  *(unsigned char *)(a1 + ++*(_DWORD *)(this + 16) = v20;
  return result;
}

uint64_t *WebKit::NetworkLoadScheduler::prioritizeLoads(uint64_t *this, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2)
  {
    uint64_t v3 = (WebKit::NetworkLoadScheduler *)this;
    uint64_t v4 = *(const WebKit::NetworkLoad ***)a2;
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4;
      this = WebKit::NetworkLoadScheduler::contextForLoad(v3, *v4);
      if (this) {
        this = (uint64_t *)WebKit::NetworkLoadScheduler::HostContext::prioritize((WebKit::NetworkLoadScheduler::HostContext *)this, v6);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

uint64_t WebKit::NetworkOriginAccessPatterns::allowAccessTo(WebKit::NetworkOriginAccessPatterns *this, const WebCore::UserContentURLPattern *a2)
{
  uint64_t v3 = *((unsigned int *)this + 5);
  if (v3 == *((_DWORD *)this + 4))
  {
    uint64_t v4 = (char *)this + 8;
    return WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::UserContentURLPattern const&>((uint64_t)v4, (unint64_t)a2);
  }
  else
  {
    uint64_t result = WebCore::UserContentURLPattern::UserContentURLPattern(*((void *)this + 1) + 32 * v3, (uint64_t)a2);
    ++*((_DWORD *)this + 5);
  }
  return result;
}

uint64_t WebKit::NetworkOriginAccessPatterns::anyPatternMatches(WebKit::NetworkOriginAccessPatterns *this, const WTF::URL *a2)
{
  uint64_t v2 = *((unsigned int *)this + 5);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = (WebCore::UserContentURLPattern *)*((void *)this + 1);
  uint64_t v5 = 32 * v2 - 32;
  do
  {
    uint64_t result = WebCore::UserContentURLPattern::matches<WTF::URL>(v4, a2);
    if (result) {
      break;
    }
    uint64_t v4 = (WebCore::UserContentURLPattern *)((char *)v4 + 32);
    uint64_t v7 = v5;
    v5 -= 32;
  }
  while (v7);
  return result;
}

void WebKit::NetworkProcess::~NetworkProcess(WebKit::NetworkProcess *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl **)*((void *)this + 50);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 49);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      uint64_t v6 = (uint64_t *)*((void *)this + 49);
      do
      {
        uint64_t v7 = *v6;
        if (*v6 != -1)
        {
          uint64_t *v6 = 0;
          if (v7) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 16), a2);
          }
        }
        ++v6;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v8 = *((void *)this + 48);
  if (v8)
  {
    uint64_t v9 = *(unsigned int *)(v8 - 4);
    if (v9)
    {
      uint64_t v10 = v8 + 8;
      do
      {
        if (*(void *)(v10 - 8) != -1) {
          uint64_t v10 = WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, a2);
        }
        v10 += 24;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  WebCore::MessagePortChannelRegistry::~MessagePortChannelRegistry((WebKit::NetworkProcess *)((char *)this + 352));
  uint64_t v12 = *((void *)this + 42);
  *((void *)this + 4objc_destroyWeak(this + 2) = 0;
  if (v12) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v12 + 16), v11);
  }
  uint64_t v13 = *((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v13) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v13 + 8), v11);
  }
  WebKit::WebSQLiteDatabaseTracker::~WebSQLiteDatabaseTracker((WebKit::NetworkProcess *)((char *)this + 280), (WebCore::SQLiteDatabaseTrackerClient *)v11);
  WebKit::NetworkContentRuleListManager::~NetworkContentRuleListManager((WebKit::NetworkProcess *)((char *)this + 256), v14);
  int v16 = (void *)*((void *)this + 31);
  if (v16) {
    os_release(v16);
  }
  uint64_t v17 = *((void *)this + 30);
  if (v17)
  {
    uint64_t v18 = *(unsigned int *)(v17 - 4);
    if (v18)
    {
      uint64_t v19 = (WTF::StringImpl ***)(v17 + 16);
      do
      {
        if (*(v19 - 2) != (WTF::StringImpl **)-1 && *v19) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v19, v15);
        }
        v19 += 3;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree((WTF *)(v17 - 16), v15);
  }
  uint64_t v20 = *((void *)this + 29);
  if (v20)
  {
    uint64_t v21 = *(unsigned int *)(v20 - 4);
    if (v21)
    {
      int v22 = (uint64_t *)(v20 + 8);
      do
      {
        if (*(v22 - 1) != -1)
        {
          uint64_t v23 = *v22;
          uint64_t *v22 = 0;
          if (v23) {
            WebCore::NetworkStorageSession::operator delete(v23, 0x128uLL);
          }
        }
        v22 += 2;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree((WTF *)(v20 - 16), v15);
  }
  uint64_t v24 = *((void *)this + 28);
  if (v24)
  {
    uint64_t v25 = *(unsigned int *)(v24 - 4);
    if (v25)
    {
      uint64_t v26 = (uint64_t *)(v24 + 8);
      do
      {
        if (*(v26 - 1) != -1)
        {
          uint64_t v27 = *v26;
          *uint64_t v26 = 0;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
        }
        v26 += 2;
        --v25;
      }
      while (v25);
    }
    WTF::fastFree((WTF *)(v24 - 16), v15);
  }
  uint64_t v28 = *((void *)this + 27);
  if (v28) {
    WTF::fastFree((WTF *)(v28 - 16), v15);
  }
  uint64_t v29 = *((void *)this + 26);
  if (v29)
  {
    uint64_t v30 = *(unsigned int *)(v29 - 4);
    if (v30)
    {
      uint64_t v31 = (uint64_t *)(v29 + 16);
      do
      {
        if (*(v31 - 2) != -1)
        {
          uint64_t v32 = *v31;
          *uint64_t v31 = 0;
          if (v32) {
            (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
          }
        }
        v31 += 3;
        --v30;
      }
      while (v30);
    }
    WTF::fastFree((WTF *)(v29 - 16), v15);
  }
  WebKit::DownloadManager::~DownloadManager((WebKit::NetworkProcess *)((char *)this + 160), v15);
  uint64_t v34 = (WTF::StringImpl *)*((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, v33);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  uint64_t v35 = *((void *)this + 17);
  if (v35)
  {
    uint64_t v36 = *(unsigned int *)(v35 - 4);
    if (v36)
    {
      char v37 = (_DWORD **)(v35 + 8);
      do
      {
        if (*(v37 - 1) != (_DWORD *)-1)
        {
          uint64_t v38 = *v37;
          *char v37 = 0;
          if (v38)
          {
            if (v38[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v38 + 8))(v38);
            }
            else {
              --v38[2];
            }
          }
        }
        v37 += 2;
        --v36;
      }
      while (v36);
    }
    WTF::fastFree((WTF *)(v35 - 16), v33);
  }

  WebKit::AuxiliaryProcess::~AuxiliaryProcess(this);
}

void non-virtual thunk to'WebKit::NetworkProcess::~NetworkProcess(WebKit::NetworkProcess *this, WTF::StringImpl *a2)
{
}

{
  WebKit::NetworkProcess::~NetworkProcess((WebKit::NetworkProcess *)((char *)this - 120), a2);
}

{
  WebKit::NetworkProcess::operator delete((WebKit::NetworkProcess *)((char *)this - 24), a2);
}

{
  WebKit::NetworkProcess::operator delete((WebKit::NetworkProcess *)((char *)this - 120), a2);
}

double WebKit::NetworkProcess::operator delete(WebKit::NetworkProcess *a1, WTF::StringImpl *a2)
{
  WebKit::NetworkProcess::~NetworkProcess(a1, a2);
  if (*(_DWORD *)(v2 + 132))
  {
    *(void *)(v2 + 4++*(_DWORD *)(this + 16) = 0;
    double result = 0.0;
    *(_OWORD *)(v2 + 384) = 0u;
    *(_OWORD *)(v2 + 400) = 0u;
    *(_OWORD *)(v2 + 35objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v2 + 368) = 0u;
    *(_OWORD *)(v2 + 320) = 0u;
    *(_OWORD *)(v2 + 336) = 0u;
    *(_OWORD *)(v2 + 288) = 0u;
    *(_OWORD *)(v2 + 304) = 0u;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 27objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 19objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 11objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 3objc_destroyWeak(this + 2) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + ++*(_DWORD *)(this + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
  return result;
}

uint64_t *WebKit::NetworkProcess::removeNetworkConnectionToWebProcess(WebKit::NetworkProcess *this, WebKit::NetworkConnectionToWebProcess *a2)
{
  uint64_t v3 = (uint64_t *)this;
  uint64_t v4 = (uint64_t *)((char *)this + 136);
  uint64_t v8 = *((void *)a2 + 33);
  uint64_t v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 17, &v8);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::remove(v4, v5);
  v3 += 30;
  uint64_t v8 = *((void *)a2 + 33);
  uint64_t v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3, &v8);
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::remove(v3, (WTF::StringImpl *)v6);
}

uint64_t WebKit::NetworkProcess::shouldTerminate(WebKit::NetworkProcess *this)
{
  return 0;
}

uint64_t WebKit::NetworkProcess::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, uint64_t a3, IPC::Encoder **a4)
{
  if (*(atomic_uchar *volatile **)(a1 + 40) == a2)
  {
    if (IPC::MessageReceiverMap::dispatchSyncMessage((uint64_t *)(a1 + 48), (uint64_t)a2, a3, (uint64_t)a4))
    {
      return 1;
    }
    else
    {
      return WebKit::NetworkProcess::didReceiveSyncNetworkProcessMessage((atomic_uint *)a1, a2, a3, a4);
    }
  }
  else
  {
    WTFLogAlways();
    return 0;
  }
}

uint64_t WebKit::NetworkProcess::stopRunLoopIfNecessary(uint64_t this)
{
  if (*(unsigned char *)(this + 412))
  {
    uint64_t v1 = *(void *)(this + 392);
    if (!v1 || !*(_DWORD *)(v1 - 12)) {
      return WebKit::AuxiliaryProcess::stopRunLoop((WebKit::AuxiliaryProcess *)this);
    }
  }
  return this;
}

unsigned int *WebKit::NetworkProcess::didClose(WebKit::NetworkProcess *this, IPC::Connection *a2)
{
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EE9C3C28;
  v3[1] = this;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v4 = 1;
  *(void *)(v4 + 8) = v3;
  uint64_t v9 = (unsigned int *)v4;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v5 = &unk_1EE9C3C50;
  v5[1] = this;
  void v5[2] = &v9;
  uint64_t v8 = v5;
  WebKit::NetworkProcess::forEachNetworkSession((uint64_t)this, &v8);
  (*(void (**)(void *))(*v5 + 8))(v5);
  int v6 = *((_DWORD *)this + 104);
  if (v6 != -1) {
    notify_cancel(v6);
  }
  double result = v9;
  uint64_t v9 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::didCreateDownload(uint64_t this)
{
  return this;
}

uint64_t non-virtual thunk to'WebKit::NetworkProcess::didCreateDownload(uint64_t this)
{
  return this;
}

uint64_t non-virtual thunk to'WebKit::NetworkProcess::didDestroyDownload(WebKit::NetworkProcess *this)
{
  return WebKit::AuxiliaryProcess::enableTermination((uint64_t)this - 120);
}

uint64_t WebKit::NetworkProcess::downloadProxyConnection(WebKit::NetworkProcess *this)
{
  return *((void *)this + 5);
}

uint64_t non-virtual thunk to'WebKit::NetworkProcess::downloadProxyConnection(WebKit::NetworkProcess *this)
{
  return *((void *)this - 10);
}

const char *WebKit::NetworkProcess::downloadsAuthenticationManager(WebKit::NetworkProcess *this)
{
  v2[0] = "AuthenticationManager";
  v2[1] = 22;
  return WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)this + 26, (WTF::ASCIILiteralHash *)v2);
}

const char *non-virtual thunk to'WebKit::NetworkProcess::downloadsAuthenticationManager(WebKit::NetworkProcess *this)
{
  v2[0] = "AuthenticationManager";
  v2[1] = 22;
  return WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)this + 11, (WTF::ASCIILiteralHash *)v2);
}

uint64_t WebKit::NetworkProcess::lowMemoryHandler(uint64_t result, char a2)
{
  if (!*(unsigned char *)(result + 146))
  {
    uint64_t v3 = result;
    MEMORY[0x19972E730]();
    uint64_t v4 = (unsigned char *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v4 = &unk_1EE9C3CC8;
    v4[8] = a2;
    uint64_t v5 = v4;
    WebKit::NetworkProcess::forEachNetworkSession(v3, &v5);
    return (*(uint64_t (**)(unsigned char *))(*(void *)v4 + 8))(v4);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::addAllowedFirstPartyForCookies(uint64_t a1, uint64_t a2, WTF::ASCIICaseInsensitiveHash **a3, int a4, uint64_t *a5)
{
  v29[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v28 = a2;
  if (*a3 == (WTF::ASCIICaseInsensitiveHash *)-1 || WTF::equal(*a3, 0, (const WTF::StringImpl *)a3))
  {
    uint64_t v20 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
    uint64_t v21 = *(uint64_t (**)(uint64_t))(*(void *)v20 + 8);
    return v21(v20);
  }
  else
  {
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::ensure<WebKit::NetworkProcess::addAllowedFirstPartyForCookies(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain&&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)::$_0>((uint64_t)v26, (uint64_t *)(a1 + 240), &v28);
    uint64_t v9 = v26[0];
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(v26[0] + 16), a3, (uint64_t)v26);
    if (v27)
    {
      uint64_t v10 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 136), &v28);
      uint64_t v11 = *(void *)(a1 + 136);
      if (v11) {
        v11 += 16 * *(unsigned int *)(v11 - 4);
      }
      if (v11 != v10)
      {
        uint64_t v22 = *(void *)(*(void *)(*(void *)(v10 + 8) + 72) + 24);
        uint64_t v12 = *(WTF::StringImpl **)v26[0];
        if (*(void *)v26[0]) {
          *(_DWORD *)v12 += 2;
        }
        v29[0] = v12;
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(&v23, (_DWORD **)v29, 1uLL);
        uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x20);
        *uint64_t v13 = &unk_1EE9C3D40;
        v13[1] = v22;
        uint64_t v13[2] = v23;
        uint64_t v14 = v24;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        _OWORD v13[3] = v14;
        uint64_t v25 = v13;
        WebKit::NetworkProcess::forEachNetworkSession(a1, &v25);
        (*(void (**)(void *))(*v13 + 8))(v13);
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v15);
        uint64_t v17 = v29[0];
        v29[0] = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            WTF::StringImpl::destroy(v17, v16);
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
      }
    }
    if (a4) {
      *(unsigned char *)(v9 + 8) = 1;
    }
    uint64_t v18 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
    return (*(uint64_t (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
}

uint64_t WebKit::NetworkProcess::registerURLSchemeAsLocal(WebKit::NetworkProcess *this, const WTF::String *a2)
{
  return WebCore::LegacySchemeRegistry::registerURLSchemeAsLocal(a2, a2);
}

uint64_t WebKit::NetworkProcess::registerURLSchemeAsNoAccess(WebKit::NetworkProcess *this, const WTF::String *a2)
{
  return WebCore::LegacySchemeRegistry::registerURLSchemeAsNoAccess(a2, a2);
}

uint64_t WebKit::NetworkProcess::updateStorageAccessPromptQuirks()
{
  return WebCore::NetworkStorageSession::updateStorageAccessPromptQuirks();
}

uint64_t WebKit::callExitSoon(WebKit *this, IPC::Connection *a2)
{
  WTF::WorkQueue::create();
  uint64_t v2 = v7;
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EE9C3A50;
  int v6 = v3;
  (*(void (**)(uint64_t, void **, double))(*(void *)v2 + 16))(v2, &v6, 10.0);
  uint64_t v4 = v6;
  int v6 = 0;
  if (v4) {
    (*(void (**)(void *))(*v4 + 8))(v4);
  }
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 56))(result);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::storageSession(WebKit::NetworkProcess *this, SessionID a2)
{
  unint64_t m_identifier = a2.m_identifier;
  return WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)this + 29, &m_identifier);
}

_DWORD **WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>::~Ref(_DWORD **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  return a1;
}

uint64_t WebKit::NetworkProcess::sharedPreferencesForWebProcessDidChange(uint64_t a1, uint64_t a2, long long *a3, uint64_t *a4)
{
  uint64_t v12 = a2;
  uint64_t v6 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 136), &v12);
  if (v6)
  {
    int v7 = *(_DWORD *)(v6 + 8);
    *(_DWORD *)(v6 + 8) = v7 + 1;
    long long v8 = *a3;
    long long v9 = a3[1];
    *(void *)(v6 + 35objc_destroyWeak(this + 2) = *((void *)a3 + 4);
    *(_OWORD *)(v6 + 320) = v8;
    *(_OWORD *)(v6 + 336) = v9;
    if (v7) {
      *(_DWORD *)(v6 + 8) = v7;
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  uint64_t v10 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
  return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::ensure<WebKit::NetworkProcess::addAllowedFirstPartyForCookies(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain&&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)::$_0>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3);
  unsigned int v10 = result & v7;
  uint64_t v11 = v6 + 24 * (result & v7);
  uint64_t v12 = *(void *)v11;
  uint64_t v13 = *a3;
  if (*(void *)v11)
  {
    uint64_t v9 = 0;
    int v22 = 1;
    do
    {
      if (v12 == v13)
      {
        uint64_t v23 = *a2;
        if (*a2) {
          unsigned int v24 = *(_DWORD *)(v23 - 4);
        }
        else {
          unsigned int v24 = 0;
        }
        char v21 = 0;
        uint64_t v20 = v23 + 24 * v24;
        goto LABEL_15;
      }
      if (v12 == -1) {
        uint64_t v9 = v11;
      }
      unsigned int v10 = (v10 + v22) & v7;
      uint64_t v11 = v6 + 24 * v10;
      uint64_t v12 = *(void *)v11;
      ++v22;
    }
    while (*(void *)v11);
    if (!v9) {
      goto LABEL_5;
    }
    *(void *)uint64_t v9 = 0;
    *(unsigned char *)(v9 + 8) = 0;
    *(void *)(v9 + ++*(_DWORD *)(this + 16) = 0;
    --*(_DWORD *)(*a2 - 16);
    *(void *)uint64_t v9 = *a3;
    *(unsigned char *)(v9 + 8) = 0;
    *(void *)(v9 + ++*(_DWORD *)(this + 16) = 0;
  }
  else
  {
LABEL_5:
    uint64_t result = *(void *)(v11 + 16);
    *(void *)uint64_t v11 = v13;
    *(unsigned char *)(v11 + 8) = 0;
    *(void *)(v11 + ++*(_DWORD *)(this + 16) = 0;
    if (result) {
      uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, (WTF::StringImpl *)v9);
    }
    uint64_t v9 = v11;
  }
  uint64_t v14 = *a2;
  if (*a2) {
    int v15 = *(_DWORD *)(v14 - 12) + 1;
  }
  else {
    int v15 = 1;
  }
  *(_DWORD *)(v14 - 1objc_destroyWeak(this + 2) = v15;
  uint64_t v16 = *a2;
  if (*a2) {
    int v17 = *(_DWORD *)(v16 - 12);
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = (*(_DWORD *)(v16 - 16) + v17);
  unint64_t v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 > 2 * v18) {
      goto LABEL_14;
    }
LABEL_26:
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, (void *)v9);
    uint64_t v9 = result;
    uint64_t v16 = *a2;
    if (*a2) {
      LODWORD(v19) = *(_DWORD *)(v16 - 4);
    }
    else {
      LODWORD(v19) = 0;
    }
    goto LABEL_14;
  }
  if (3 * v19 <= 4 * v18) {
    goto LABEL_26;
  }
LABEL_14:
  uint64_t v20 = v16 + 24 * v19;
  char v21 = 1;
  uint64_t v11 = v9;
LABEL_15:
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v20;
  *(unsigned char *)(a1 + ++*(_DWORD *)(this + 16) = v21;
  return result;
}

uint64_t WebKit::NetworkProcess::webProcessWillLoadWebArchive(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (uint64_t *)(result + 240);
  uint64_t v3 = *(void *)(result + 240);
  if (v3
    || (uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(result + 240), 0), (v3 = *v4) != 0))
  {
    int v5 = *(_DWORD *)(v3 - 8);
  }
  else
  {
    int v5 = 0;
  }
  unint64_t v6 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
  unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  unsigned int v9 = v5 & ((v8 >> 31) ^ v8);
  uint64_t v10 = v3 + 24 * v9;
  uint64_t v11 = *(void *)v10;
  if (!*(void *)v10)
  {
LABEL_12:
    uint64_t result = *(void *)(v10 + 16);
    *(void *)uint64_t v10 = v2;
    *(unsigned char *)(v10 + 8) = 1;
    *(void *)(v10 + ++*(_DWORD *)(this + 16) = 0;
    if (result) {
      uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, (WTF::StringImpl *)a2);
    }
    a2 = v10;
LABEL_15:
    uint64_t v13 = *v4;
    if (*v4) {
      int v14 = *(_DWORD *)(v13 - 12) + 1;
    }
    else {
      int v14 = 1;
    }
    *(_DWORD *)(v13 - 1objc_destroyWeak(this + 2) = v14;
    uint64_t v15 = *v4;
    if (*v4) {
      int v16 = *(_DWORD *)(v15 - 12);
    }
    else {
      int v16 = 0;
    }
    uint64_t v17 = (*(_DWORD *)(v15 - 16) + v16);
    unint64_t v18 = *(unsigned int *)(v15 - 4);
    if (v18 > 0x400)
    {
      if (v18 > 2 * v17) {
        goto LABEL_23;
      }
    }
    else if (3 * v18 > 4 * v17)
    {
LABEL_23:
      uint64_t v10 = a2;
      goto LABEL_26;
    }
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v4, (void *)a2);
    uint64_t v10 = result;
    goto LABEL_26;
  }
  a2 = 0;
  int v12 = 1;
  while (v11 != v2)
  {
    if (v11 == -1) {
      a2 = v10;
    }
    unsigned int v9 = (v9 + v12) & v5;
    uint64_t v10 = v3 + 24 * v9;
    uint64_t v11 = *(void *)v10;
    ++v12;
    if (!*(void *)v10)
    {
      if (!a2) {
        goto LABEL_12;
      }
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 0;
      *(void *)(a2 + ++*(_DWORD *)(this + 16) = 0;
      --*(_DWORD *)(*v4 - 16);
      *(void *)a2 = v2;
      *(unsigned char *)(a2 + 8) = 1;
      *(void *)(a2 + ++*(_DWORD *)(this + 16) = 0;
      goto LABEL_15;
    }
  }
LABEL_26:
  *(unsigned char *)(v10 + 8) = 1;
  return result;
}

uint64_t WebKit::NetworkProcess::allowsFirstPartyForCookies(uint64_t a1, uint64_t a2, WTF::URL *a3)
{
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v11, a3);
  uint64_t v7 = WebKit::NetworkProcess::allowsFirstPartyForCookies(a1, a2, &v11);
  unint64_t v8 = v11;
  uint64_t v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  if (v7 != 2) {
    return v7;
  }
  char isAboutBlank = WTF::URL::isAboutBlank(a3);
  uint64_t result = 0;
  if ((isAboutBlank & 1) == 0)
  {
    if (*(void *)a3) {
      return v7;
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcess::allowsFirstPartyForCookies(uint64_t a1, uint64_t a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v12 = a2;
  if (*a3 && *((_DWORD *)*a3 + 1) && !MEMORY[0x19972E990]()) {
    uint64_t v6 = 2;
  }
  else {
    uint64_t v6 = 0;
  }
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v7 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 240), &v12);
    unsigned int v9 = v7;
    uint64_t v10 = *(uint64_t **)(a1 + 240);
    if (v10) {
      v10 += 3 * *((unsigned int *)v10 - 1);
    }
    if (v10 != v7)
    {
      if (*((unsigned char *)v7 + 8))
      {
        return 1;
      }
      else if (*a3 != (WTF::ASCIICaseInsensitiveHash *)-1 && (WTF::equal(*a3, 0, v8) & 1) == 0)
      {
        if (WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(v9 + 2, a3))return 1; {
        else
        }
          return v6;
      }
    }
  }
  return v6;
}

void WebKit::NetworkProcess::newTestingSession(uint64_t *a1, uint64_t a2)
{
  uint64_t v10 = a2;
  v11[0] = "WebKit Test-";
  v11[1] = (CFTypeRef)13;
  LODWORD(cf) = getpid();
  WTF::tryMakeString<WTF::ASCIILiteral,int>((uint64_t *)v11, (unsigned int *)&cf, &v8);
  if (v8)
  {
    WTF::String::createCFString((uint64_t *)&cf, (WTF::String *)&v8);
    WebCore::createPrivateStorageSession();
    CFTypeRef v4 = cf;
    CFTypeRef cf = 0;
    if (v4) {
      CFRelease(v4);
    }
    int v5 = v8;
    unint64_t v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        int v5 = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    CFTypeRef cf = 0;
    if (WebCore::NetworkStorageSession::processMayUseCookieAPI(v5) && v11[0]) {
      CFTypeRef cf = (CFTypeRef)_CFURLStorageSessionCopyCookieStorage();
    }
    std::make_unique[abi:sn180100]<WebCore::NetworkStorageSession,PAL::SessionID &,WTF::RetainPtr<__CFURLStorageSession const*>,WTF::RetainPtr<OpaqueCFHTTPCookieStorage *>>(a1, &v10, (uint64_t)v11, (uint64_t)&cf);
    CFTypeRef v6 = cf;
    CFTypeRef cf = 0;
    if (v6) {
      CFRelease(v6);
    }
    CFTypeRef v7 = v11[0];
    v11[0] = 0;
    if (v7) {
      CFRelease(v7);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WebKit::NetworkProcess::cookieAcceptPolicyChanged(uint64_t a1, char a2)
{
  uint64_t result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 136));
  int v5 = (void *)result;
  CFTypeRef v7 = v6;
  uint64_t v8 = *(void *)(a1 + 136);
  if (v8) {
    unsigned int v9 = (void *)(v8 + 16 * *(unsigned int *)(v8 - 4));
  }
  else {
    unsigned int v9 = 0;
  }
  if (v9 != (void *)result)
  {
    do
    {
      uint64_t result = WebKit::NetworkConnectionToWebProcess::cookieAcceptPolicyChanged(v5[1], a2);
      while (1)
      {
        v5 += 2;
        if (v5 == v7) {
          break;
        }
        if ((unint64_t)(*v5 + 1) > 1) {
          goto LABEL_10;
        }
      }
      int v5 = v7;
LABEL_10:
      ;
    }
    while (v5 != v9);
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::NetworkProcess::networkSession(WebKit::NetworkProcess *this, SessionID a2)
{
  unint64_t m_identifier = a2.m_identifier;
  return WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)this + 13, &m_identifier);
}

void *WebKit::NetworkProcess::destroySession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v63 = a2;
  CFTypeRef v7 = (uint64_t *)(a1 + 224);
  uint64_t v6 = *(void *)(a1 + 224);
  if (v6)
  {
    unsigned int v8 = *(_DWORD *)(v6 - 8);
    uint64_t v9 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2) & v8;
    uint64_t v10 = *(void *)(v6 + 16 * v9);
    if (v10 != v4)
    {
      int v11 = 1;
      while (v10)
      {
        uint64_t v9 = (v9 + v11) & v8;
        uint64_t v10 = *(void *)(v6 + 16 * v9);
        ++v11;
        if (v10 == v4) {
          goto LABEL_8;
        }
      }
      uint64_t v9 = *(unsigned int *)(v6 - 4);
    }
LABEL_8:
    if (v9 != *(_DWORD *)(v6 - 4))
    {
      uint64_t v12 = 0;
      uint64_t v13 = (void *)(v6 + 16 * v9);
      int v14 = (void *)v13[1];
      v13[1] = 0;
      if (!*v7 || (uint64_t v12 = *v7 + 16 * *(unsigned int *)(*v7 - 4), (void *)v12 != v13))
      {
        if ((void *)v12 != v13)
        {
          *uint64_t v13 = -1;
          v13[1] = 0;
          ++*(_DWORD *)(*v7 - 16);
          uint64_t v15 = *v7;
          int v16 = *v7 ? *(_DWORD *)(v15 - 12) - 1 : -1;
          *(_DWORD *)(v15 - 1objc_destroyWeak(this + 2) = v16;
          uint64_t v17 = *v7;
          if (*v7)
          {
            unsigned int v18 = 6 * *(_DWORD *)(v17 - 12);
            unsigned int v19 = *(_DWORD *)(v17 - 4);
            if (v18 < v19 && v19 >= 9) {
              WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(v7, v19 >> 1, 0);
            }
          }
        }
      }
      if (v14)
      {
        (*(void (**)(void *))(*v14 + 80))(v14);
        uint64_t v21 = v14[131];
        int v22 = (atomic_uchar **)(v21 + 16);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v21 + 16));
        uint64_t v23 = (uint64_t *)(a1 + 392);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v21 + 16));
        uint64_t v24 = *(void *)(a1 + 392);
        if (v24
          || (WTF::HashTable<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>>::expand((uint64_t *)(a1 + 392)),
              (uint64_t v24 = *v23) != 0))
        {
          int v25 = *(_DWORD *)(v24 - 8);
        }
        else
        {
          int v25 = 0;
        }
        unint64_t v26 = (~(v21 << 32) + v21) ^ ((unint64_t)(~(v21 << 32) + v21) >> 22);
        unint64_t v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
        unint64_t v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
        unsigned int v29 = v25 & ((v28 >> 31) ^ v28);
        uint64_t v30 = (uint64_t *)(v24 + 8 * v29);
        uint64_t v31 = *v30;
        if (*v30)
        {
          uint64_t v32 = 0;
          int v33 = 1;
          while (v31 != v21)
          {
            if (v31 == -1) {
              uint64_t v32 = v30;
            }
            unsigned int v29 = (v29 + v33) & v25;
            uint64_t v30 = (uint64_t *)(v24 + 8 * v29);
            uint64_t v31 = *v30;
            ++v33;
            if (!*v30)
            {
              if (v32)
              {
                *uint64_t v32 = 0;
                --*(_DWORD *)(*v23 - 16);
                uint64_t v30 = v32;
              }
              goto LABEL_34;
            }
          }
          if (v21) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*v22, v30);
          }
LABEL_43:
          atomic_fetch_add((atomic_uint *volatile)(a1 + 128), 1u);
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v21 + 16));
          uint64_t v40 = *a3;
          *a3 = 0;
          uint64_t v41 = (void *)WTF::fastMalloc((WTF *)0x28);
          *uint64_t v41 = &unk_1EE9C3D90;
          v41[1] = a1;
          v41[2] = a1;
          void v41[3] = v21;
          v41[4] = v40;
          uint64_t v62 = v41;
          WebKit::NetworkStorageManager::close(v21, &v62);
          if (v62)
          {
            (*(void (**)(void *))(*v62 + 8))(v62);
            if (!v21) {
              goto LABEL_46;
            }
          }
          else if (!v21)
          {
LABEL_46:
            (*(void (**)(void *))(*v14 + 8))(v14);
            uint64_t v4 = v63;
            goto LABEL_47;
          }
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*v22, v42);
          goto LABEL_46;
        }
LABEL_34:
        *uint64_t v30 = v21;
        uint64_t v34 = *v23;
        if (*v23) {
          int v35 = *(_DWORD *)(v34 - 12) + 1;
        }
        else {
          int v35 = 1;
        }
        *(_DWORD *)(v34 - 1objc_destroyWeak(this + 2) = v35;
        uint64_t v36 = *v23;
        if (*v23) {
          int v37 = *(_DWORD *)(v36 - 12);
        }
        else {
          int v37 = 0;
        }
        uint64_t v38 = (*(_DWORD *)(v36 - 16) + v37);
        unint64_t v39 = *(unsigned int *)(v36 - 4);
        if (v39 > 0x400)
        {
          if (v39 > 2 * v38) {
            goto LABEL_43;
          }
        }
        else if (3 * v39 > 4 * v38)
        {
          goto LABEL_43;
        }
        WTF::HashTable<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>>::expand((uint64_t *)(a1 + 392));
        goto LABEL_43;
      }
    }
  }
LABEL_47:
  uint64_t v43 = (uint64_t *)(a1 + 232);
  uint64_t v44 = *(void *)(a1 + 232);
  if (v44)
  {
    unsigned int v45 = *(_DWORD *)(v44 - 8);
    uint64_t v46 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4) & v45;
    uint64_t v47 = *(void *)(v44 + 16 * v46);
    if (v47 != v4)
    {
      int v48 = 1;
      while (v47)
      {
        uint64_t v46 = (v46 + v48) & v45;
        uint64_t v47 = *(void *)(v44 + 16 * v46);
        ++v48;
        if (v47 == v4) {
          goto LABEL_54;
        }
      }
      uint64_t v46 = *(unsigned int *)(v44 - 4);
    }
LABEL_54:
    if (v46 != *(_DWORD *)(v44 - 4))
    {
      CFTypeRef v49 = (void *)(v44 + 16 * v46);
      uint64_t v50 = v49[1];
      *CFTypeRef v49 = -1;
      v49[1] = 0;
      if (v50) {
        WebCore::NetworkStorageSession::operator delete(v50, 0x128uLL);
      }
      ++*(_DWORD *)(*v43 - 16);
      uint64_t v51 = *v43;
      if (*v43) {
        int v52 = *(_DWORD *)(v51 - 12) - 1;
      }
      else {
        int v52 = -1;
      }
      *(_DWORD *)(v51 - 1objc_destroyWeak(this + 2) = v52;
      uint64_t v53 = *v43;
      if (*v43)
      {
        unsigned int v54 = 6 * *(_DWORD *)(v53 - 12);
        unsigned int v55 = *(_DWORD *)(v53 - 4);
        if (v54 < v55 && v55 >= 9) {
          WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash((uint64_t *)(a1 + 232), v55 >> 1, 0);
        }
      }
    }
  }
  uint64_t result = (void *)WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), &v63);
  long long v58 = result;
  uint64_t v59 = *(void *)(a1 + 216);
  if (v59)
  {
    uint64_t v60 = (void *)(v59 + 8 * *(unsigned int *)(v59 - 4));
    if (v60 == result) {
      goto LABEL_74;
    }
  }
  else
  {
    if (!result) {
      goto LABEL_74;
    }
    uint64_t v60 = 0;
  }
  if (v60 != result) {
    uint64_t result = WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::remove((uint64_t *)(a1 + 216), result);
  }
LABEL_74:
  uint64_t v61 = *a3;
  if (*a3)
  {
    *a3 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v61 + 16))(v61, v58);
    return (void *)(*(uint64_t (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  return result;
}

WTF::StringImpl **WebKit::NetworkProcess::registrableDomainsWithLastAccessedTime(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 72);
    if (v5) {
      return (WTF::StringImpl **)WebKit::WebResourceLoadStatisticsStore::registrableDomainsWithLastAccessedTime(v5, a3);
    }
  }
  LOBYTE(v8) = 0;
  char v9 = 0;
  uint64_t result = (WTF::StringImpl **)WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)>::operator()(a3, (uint64_t)&v8);
  if (v9)
  {
    uint64_t result = v8;
    if (v8) {
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v7);
    }
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = *a1;
  *a1 = 0;
  LOBYTE(v5) = 0;
  char v6 = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v2 = *(WTF::StringImpl ***)a2;
    *(void *)a2 = 0;
    uint64_t v5 = v2;
    char v6 = 1;
  }
  WTF::Function<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)>::operator()(&v7, (uint64_t)&v5);
  if (v6 && v5) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v5, v3);
  }
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl **WebKit::NetworkProcess::registrableDomainsExemptFromWebsiteDataDeletion(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v11 = (WTF::StringImpl **)a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v11);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 72)) != 0)
  {
    char v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x10);
    void *v6 = (WTF::StringImpl *)&unk_1EE9C3DB8;
    uint64_t v7 = *a3;
    *a3 = 0;
    v6[1] = (WTF::StringImpl *)v7;
    int v11 = v6;
    WebKit::WebResourceLoadStatisticsStore::registrableDomainsExemptFromWebsiteDataDeletion(v5, (uint64_t *)&v11);
    uint64_t result = v11;
    if (v11) {
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*v11 + 1))(v11);
    }
  }
  else
  {
    uint64_t v10 = 0;
    WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)>::operator()(a3, &v10);
    uint64_t result = v10;
    if (v10) {
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v9);
    }
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)>::operator()(uint64_t *a1, WTF::StringImpl ***a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  char v6 = v3;
  uint64_t v7 = v2;
  WTF::Function<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)>::operator()(&v7, &v6);
  if (v6) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v4);
  }
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkProcess::dumpResourceLoadStatistics(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v12 = (WTF::StringImpl *)a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v12);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 72);
    if (v5)
    {
      char v6 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(void *)char v6 = &unk_1EE9C4A18;
      uint64_t v7 = *a3;
      *a3 = 0;
      *((void *)v6 + 1) = v7;
      uint64_t v12 = v6;
      WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(v5, (uint64_t *)&v12);
      uint64_t result = v12;
      if (v12) {
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)v12 + 8))(v12);
      }
      return result;
    }
    int v11 = 0;
    WTF::CompletionHandler<void ()(WTF::String)>::operator()(a3, &v11);
    uint64_t result = v11;
    int v11 = 0;
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t v10 = 0;
    WTF::CompletionHandler<void ()(WTF::String)>::operator()(a3, &v10);
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (!result) {
      return result;
    }
  }
  if (*(_DWORD *)result == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
  }
  *(_DWORD *)result -= 2;
  return result;
}

uint64_t WebKit::NetworkProcess::updatePrevalentDomainsToBlockCookiesFor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = a2;
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 232), &v7))
  {
    WebCore::NetworkStorageSession::setPrevalentDomainsToBlockAndDeleteCookiesFor();
  }
  uint64_t v5 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
}

uint64_t WebKit::NetworkProcess::isGrandfathered(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::isGrandfathered(v7, a3, a4);
    }
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v9 + 16))(v9, 0);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::isPrevalentResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::isPrevalentResource(v7, a3, a4);
    }
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v9 + 16))(v9, 0);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::isVeryPrevalentResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::isVeryPrevalentResource(v7, a3, a4);
    }
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v9 + 16))(v9, 0);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setGrandfathered(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v12 = a2;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v12);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 72);
    if (v9) {
      return WebKit::WebResourceLoadStatisticsStore::setGrandfathered(v9, a3, a4, a5);
    }
  }
  uint64_t v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::setPrevalentResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::setPrevalentResource(v7, a3, a4);
    }
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setPrevalentResourceForDebugMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::setPrevalentResourceForDebugMode(v7, a3, a4);
    }
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setVeryPrevalentResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::setVeryPrevalentResource(v7, a3, a4);
    }
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::clearPrevalentResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::clearPrevalentResource(v7, a3, a4);
    }
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::scheduleCookieBlockingUpdate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v8);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 72);
    if (v5) {
      return WebKit::WebResourceLoadStatisticsStore::scheduleCookieBlockingUpdate(v5, a3);
    }
  }
  uint64_t v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
}

uint64_t WebKit::NetworkProcess::scheduleClearInMemoryAndPersistent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, WTF::StringImpl *a6)
{
  uint64_t v13 = a2;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v13);
  if (v8)
  {
    uint64_t v9 = v8;
    (*(void (**)(uint64_t))(*(void *)v8 + 160))(v8);
    uint64_t v10 = *(void *)(v9 + 72);
    if (v10) {
      return WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(v10, a5, a6);
    }
  }
  uint64_t v12 = *(void *)a6;
  *(void *)a6 = 0;
  (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
  return (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
}

uint64_t WebKit::NetworkProcess::resetParametersToDefaultValues(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = a2;
  uint64_t v4 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v4)
  {
    uint64_t v6 = v4;
    WebKit::NetworkSession::resetFirstPartyDNSData(v4, v5);
    uint64_t v7 = *((void *)v6 + 9);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::resetParametersToDefaultValues(v7, a3);
    }
  }
  uint64_t v9 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::scheduleStatisticsAndDataRecordsProcessing(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v8);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 72);
    if (v5) {
      return WebKit::WebResourceLoadStatisticsStore::scheduleStatisticsAndDataRecordsProcessing(v5, a3);
    }
  }
  uint64_t v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
}

uint64_t WebKit::NetworkProcess::statisticsDatabaseHasAllTables(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v8);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 72);
    if (v5) {
      return WebKit::WebResourceLoadStatisticsStore::statisticsDatabaseHasAllTables(v5, a3);
    }
  }
  uint64_t v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0);
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
}

uint64_t WebKit::NetworkProcess::setResourceLoadStatisticsTimeAdvanceForTesting(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::setTimeAdvanceForTesting(v7, a3, a4);
    }
  }
  uint64_t v9 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setIsRunningResourceLoadStatisticsTest(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::setIsRunningTest(v7, a3, a4);
    }
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setSubframeUnderTopFrameDomain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v12 = a2;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v12);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 72);
    if (v9) {
      return WebKit::WebResourceLoadStatisticsStore::setSubframeUnderTopFrameDomain(v9, a3, a4, a5);
    }
  }
  uint64_t v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::isRegisteredAsRedirectingTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v12 = a2;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v12);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 72);
    if (v9) {
      return WebKit::WebResourceLoadStatisticsStore::isRegisteredAsRedirectingTo(v9, a3, a4, a5);
    }
  }
  uint64_t v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v11 + 16))(v11, 0);
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::isRegisteredAsSubFrameUnder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v12 = a2;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v12);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 72);
    if (v9) {
      return WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubFrameUnder(v9, a3, a4, a5);
    }
  }
  uint64_t v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v11 + 16))(v11, 0);
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::setSubresourceUnderTopFrameDomain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v12 = a2;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v12);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 72);
    if (v9) {
      return WebKit::WebResourceLoadStatisticsStore::setSubresourceUnderTopFrameDomain(v9, a3, a4, a5);
    }
  }
  uint64_t v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::setSubresourceUniqueRedirectTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v12 = a2;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v12);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 72);
    if (v9) {
      return WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectTo(v9, a3, a4, a5);
    }
  }
  uint64_t v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::setSubresourceUniqueRedirectFrom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v12 = a2;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v12);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 72);
    if (v9) {
      return WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectFrom(v9, a3, a4, a5);
    }
  }
  uint64_t v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::isRegisteredAsSubresourceUnder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v12 = a2;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v12);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 72);
    if (v9) {
      return WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubresourceUnder(v9, a3, a4, a5);
    }
  }
  uint64_t v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v11 + 16))(v11, 0);
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::setTopFrameUniqueRedirectTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v12 = a2;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v12);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 72);
    if (v9) {
      return WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectTo(v9, a3, a4, a5);
    }
  }
  uint64_t v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::setTopFrameUniqueRedirectFrom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v12 = a2;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v12);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 72);
    if (v9) {
      return WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectFrom(v9, a3, a4, a5);
    }
  }
  uint64_t v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::setLastSeen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, double a5)
{
  uint64_t v12 = a2;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v12);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 72);
    if (v9) {
      return WebKit::WebResourceLoadStatisticsStore::setLastSeen(v9, a5, a3, a4);
    }
  }
  uint64_t v11 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::domainIDExistsInDatabase(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::domainIDExistsInDatabase(v7, a3, a4);
    }
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v9 + 16))(v9, 0);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::mergeStatisticForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, double a9, double a10, char a11, int a12, int a13, uint64_t *a14)
{
  uint64_t v26 = a2;
  uint64_t v22 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v26);
  if (v22)
  {
    uint64_t v23 = *(void *)(v22 + 72);
    if (v23) {
      return WebKit::WebResourceLoadStatisticsStore::mergeStatisticForTesting(v23, a9, a10, a3, a4, a5, a6, a7, a8, a11, a13, a14);
    }
  }
  uint64_t v25 = *a14;
  *a14 = 0;
  (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
  return (*(uint64_t (**)(uint64_t))(*(void *)v25 + 8))(v25);
}

uint64_t WebKit::NetworkProcess::insertExpiredStatisticForTesting(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, char a6, char a7, uint64_t *a8)
{
  uint64_t v18 = a2;
  uint64_t v14 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v18);
  if (v14)
  {
    uint64_t v15 = *(void *)(v14 + 72);
    if (v15) {
      return WebKit::WebResourceLoadStatisticsStore::insertExpiredStatisticForTesting(v15, a3, a4, a5, a6, a7, a8);
    }
  }
  uint64_t v17 = *a8;
  *a8 = 0;
  (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
  return (*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
}

uint64_t WebKit::NetworkProcess::getAllStorageAccessEntries(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = a2;
  uint64_t v4 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 232), &v10);
  if (v4)
  {
    uint64_t v5 = v9;
    WebCore::NetworkStorageSession::getAllStorageAccessEntries(v9, v4);
  }
  else
  {
    v8[0] = 0;
    v8[1] = 0;
    uint64_t v5 = v8;
  }
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a3, v5);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v6);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  v8[0] = 0;
  v9[0] = v3;
  v8[1] = 0;
  uint64_t v4 = a2[1];
  a2[1] = 0;
  v9[1] = v4;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 16))(v2, v9);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v5);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v6);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

uint64_t WebKit::NetworkProcess::logFrameNavigation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, double a9)
{
  uint64_t v17 = a2;
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v17);
  if (result)
  {
    uint64_t result = *(void *)(result + 72);
    if (result) {
      return WebKit::WebResourceLoadStatisticsStore::logFrameNavigation(result, a9, a3, a4, a5, a6, a7, a8);
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcess::logUserInteraction(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::logUserInteraction(v7, a3, a4);
    }
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::hadUserInteraction(uint64_t a1, uint64_t a2, WTF::ASCIICaseInsensitiveHash **a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::hasHadUserInteraction(v7, a3, a4);
    }
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v9 + 16))(v9, 0);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::isRelationshipOnlyInDatabaseOnce(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v12 = a2;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v12);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 72);
    if (v9) {
      return WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce(v9, a3, a4, a5);
    }
  }
  uint64_t v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v11 + 16))(v11, 0);
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::clearUserInteraction(uint64_t a1, uint64_t a2, WTF::ASCIICaseInsensitiveHash **a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::clearUserInteraction(v7, a3, a4);
    }
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

atomic_uchar *WebKit::NetworkProcess::hasLocalStorage(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v14 = (atomic_uchar *)a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v14);
  if (!v6)
  {
    uint64_t v13 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v13 + 16))(v13, 0);
    return (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v7 = *(void *)(v6 + 1048);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v7 + 16));
  uint64_t v8 = *a3;
  if (v8) {
    *(_DWORD *)v8 += 2;
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  uint64_t v10 = (atomic_uchar *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v10 = &unk_1EE9C3DE0;
  if (v8) {
    *(_DWORD *)v8 += 2;
  }
  *((void *)v10 + 1) = v8;
  *((void *)v10 + objc_destroyWeak(this + 2) = v9;
  uint64_t v14 = v10;
  WebKit::NetworkStorageManager::fetchData(v7, 32, 0, (uint64_t *)&v14);
  uint64_t result = v14;
  if (v14) {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v14 + 8))(v14);
  }
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      uint64_t result = (atomic_uchar *)WTF::StringImpl::destroy(v8, v11);
      if (!v7) {
        return result;
      }
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 16), v11);
    }
    *(_DWORD *)v8 -= 2;
  }
  if (v7) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 16), v11);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::setCacheMaxAgeCapForPrevalentResources(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = a2;
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 232), &v6))
  {
    WebCore::NetworkStorageSession::setCacheMaxAgeCapForPrevalentResources();
  }
  uint64_t v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
}

uint64_t WebKit::NetworkProcess::setGrandfatheringTime(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::setGrandfatheringTime(v7, a3, a4);
    }
  }
  uint64_t v9 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setMaxStatisticsEntries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::setMaxStatisticsEntries(v7, a3, a4);
    }
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setMinimumTimeBetweenDataRecordsRemoval(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::setMinimumTimeBetweenDataRecordsRemoval(v7, a3, a4);
    }
  }
  uint64_t v9 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setPruneEntriesDownTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::setPruneEntriesDownTo(v7, a3, a4);
    }
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setTimeToLiveUserInteraction(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::setTimeToLiveUserInteraction(v7, a3, a4);
    }
  }
  uint64_t v9 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setShouldClassifyResourcesBeforeDataRecordsRemoval(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::setShouldClassifyResourcesBeforeDataRecordsRemoval(v7, a3, a4);
    }
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

WTF::StringImpl **WebKit::NetworkProcess::setTrackingPreventionEnabled(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a2;
  uint64_t result = (WTF::StringImpl **)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v5);
  if (result) {
    return WebKit::NetworkSession::setTrackingPreventionEnabled(result, a3);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::setResourceLoadStatisticsLogTestingEvent(WebKit::NetworkProcess *this, char a2)
{
  uint64_t v4 = (unsigned char *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v4 = &unk_1EE9C3E08;
  v4[8] = a2;
  uint64_t v7 = v4;
  WebKit::NetworkProcess::forEachNetworkSession((uint64_t)this, &v7);
  uint64_t v5 = *(uint64_t (**)(unsigned char *))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t WebKit::NetworkProcess::setResourceLoadStatisticsDebugMode(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::setResourceLoadStatisticsDebugMode(v7, a3, a4);
    }
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::isResourceLoadStatisticsEphemeral(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v9 = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v9);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 72)) != 0)
  {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 72);
    uint64_t v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v6);
  }
  else
  {
    uint64_t v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
}

uint64_t WebKit::NetworkProcess::resetCacheMaxAgeCapForPrevalentResources(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = a2;
  uint64_t v4 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 232), &v7);
  if (v4) {
    WebCore::NetworkStorageSession::resetCacheMaxAgeCapForPrevalentResources(v4);
  }
  uint64_t v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
}

IPC::Encoder *WebKit::NetworkProcess::didCommitCrossSiteLoadWithDataTransfer(void *a1, IPC::Encoder *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v23 = a6;
  uint64_t v24 = a2;
  uint64_t result = (IPC::Encoder *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(a1 + 29, &v24);
  if (result)
  {
    uint64_t result = (IPC::Encoder *)WebCore::NetworkStorageSession::shouldBlockThirdPartyCookies();
    if (!result) {
      return result;
    }
    int v15 = a5 & 2;
    if ((a5 & 2) != 0) {
      uint64_t result = (IPC::Encoder *)WebCore::NetworkStorageSession::didCommitCrossSiteLoadWithDataTransferFromPrevalentResource();
    }
    if ((a5 & 4) != 0)
    {
      uint64_t v16 = a1[5];
      uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v17 = 325;
      *((void *)v17 + 1) = 0;
      *((void *)v17 + 66) = (char *)v17 + 16;
      *((void *)v17 + 67) = 512;
      *((void *)v17 + 68) = 0;
      *((void *)v17 + 70) = 0;
      *((void *)v17 + 69) = 0;
      IPC::Encoder::encodeHeader(v17);
      uint64_t v24 = v17;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v17, &v23);
      IPC::Connection::sendMessageImpl(v16, (uint64_t *)&v24, 0, 0);
      uint64_t result = v24;
      uint64_t v24 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v18);
        uint64_t result = (IPC::Encoder *)WTF::fastFree(v19, v20);
      }
    }
  }
  else
  {
    int v15 = a5 & 2;
  }
  if (v15)
  {
    uint64_t v24 = a2;
    uint64_t result = (IPC::Encoder *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(a1 + 28, &v24);
    if (result)
    {
      uint64_t v21 = *((void *)result + 9);
      if (v21)
      {
        uint64_t v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x10);
        *(void *)uint64_t v22 = &unk_1EE9C3E30;
        uint64_t v24 = v22;
        WebKit::WebResourceLoadStatisticsStore::logCrossSiteLoadWithLinkDecoration(v21, a3, a4, a8, (uint64_t *)&v24);
        uint64_t result = v24;
        uint64_t v24 = 0;
        if (result) {
          return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(void *)result + 8))(result);
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcess::setCrossSiteLoadWithLinkDecorationForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v14 = a2;
  uint64_t v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v14);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 72);
    if (v11) {
      return WebKit::WebResourceLoadStatisticsStore::logCrossSiteLoadWithLinkDecoration(v11, a3, a4, a5, a6);
    }
  }
  uint64_t v13 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
  return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
}

uint64_t WebKit::NetworkProcess::resetCrossSiteLoadsWithLinkDecorationForTesting(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = a2;
  uint64_t v4 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 232), &v7);
  if (v4) {
    WebCore::NetworkStorageSession::resetCrossSiteLoadsWithLinkDecorationForTesting(v4);
  }
  uint64_t v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
}

WTF::StringImpl **WebKit::NetworkProcess::grantStorageAccessForTesting(uint64_t a1, uint64_t a2, uint64_t *a3, WTF::StringImpl **a4, uint64_t *a5)
{
  unsigned char v30[4] = *MEMORY[0x1E4F143B8];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v30[1] = v29[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v30[2] = v29[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v11 = 0;
  void v30[3] = v29[0];
  unint64_t v28 = 0;
  do
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v28, (WTF::StringImpl **)&v30[v11++], v10, (uint64_t)v29);
  while (v11 != 4);
  for (uint64_t i = 3; i != -1; --i)
  {
    uint64_t v14 = (WTF::StringImpl *)v30[i];
    v30[i] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v12);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  int v15 = v28;
  if (v28)
  {
    int v19 = *((_DWORD *)v28 - 2);
    unsigned int v20 = *((_DWORD *)*a4 + 4);
    if (v20 >= 0x100) {
      unsigned int v21 = v20 >> 8;
    }
    else {
      unsigned int v21 = WTF::StringImpl::hashSlowCase(*a4);
    }
    for (j = 0; ; unsigned int v21 = j + v23)
    {
      int v23 = v21 & v19;
      uint64_t v24 = v15[v21 & v19];
      if (v24 != (WTF *)-1)
      {
        if (!v24) {
          goto LABEL_10;
        }
        if (WTF::equal(v24, *a4, v10)) {
          break;
        }
      }
      ++j;
    }
    v30[0] = a2;
    if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 232), v30))
    {
      uint64_t v25 = *((unsigned int *)a3 + 3);
      if (v25)
      {
        uint64_t v26 = *a3;
        uint64_t v27 = 8 * v25;
        do
        {
          WebCore::NetworkStorageSession::grantCrossPageStorageAccess();
          v26 += 8;
          v27 -= 8;
        }
        while (v27);
      }
    }
  }
LABEL_10:
  uint64_t v16 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  uint64_t result = v28;
  if (v28) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v28, v17);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::hasIsolatedSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6) {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 152))(v6, a3);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v7);
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
}

uint64_t WebKit::NetworkProcess::setAppBoundDomainsForResourceLoadStatistics(uint64_t a1, uint64_t a2, uint64_t *a3, const WTF::StringImpl *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::setAppBoundDomains(v7, a3, a4);
    }
  }
  uint64_t v9 = *(void *)a4;
  *(void *)a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setManagedDomainsForResourceLoadStatistics(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v17[0] = a2;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), v17);
  if (v8)
  {
    uint64_t v9 = v8;
    v17[0] = (uint64_t)"WebCookieManager";
    v17[1] = 17;
    uint64_t v10 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(a1 + 208), (WTF::ASCIILiteralHash *)v17);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v9 + 8), v9);
    uint64_t v11 = *(atomic_uint **)(v9 + 8);
    if (v11) {
      atomic_fetch_add(v11, 1u);
    }
    uint64_t v12 = *a3;
    *a3 = 0;
    uint64_t v13 = *a4;
    *a4 = 0;
    uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v14 = &unk_1EE9C3E58;
    v14[1] = v11;
    v14[2] = v12;
    __n128 v14[3] = v13;
    v17[0] = (uint64_t)v14;
    WebKit::WebCookieManager::setHTTPCookieAcceptPolicy((uint64_t)v10, a2, 0, v17);
    uint64_t result = v17[0];
    v17[0] = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    uint64_t v16 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
    return (*(uint64_t (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::setShouldDowngradeReferrerForTesting(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6 = (unsigned char *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v6 = &unk_1EE9C3E80;
  v6[8] = a2;
  uint64_t v10 = v6;
  WebKit::NetworkProcess::forEachNetworkSession(a1, &v10);
  (*(void (**)(unsigned char *))(*(void *)v6 + 8))(v6);
  uint64_t v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);

  return v8(v7);
}

uint64_t WebKit::NetworkProcess::setThirdPartyCookieBlockingMode(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    *(unsigned char *)(v6 + 98) = a3;
    uint64_t v7 = *(void **)(v6 + 72);
    if (v7) {
      WebKit::WebResourceLoadStatisticsStore::setThirdPartyCookieBlockingMode(v7, a3);
    }
  }
  uint64_t v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
}

uint64_t WebKit::NetworkProcess::setShouldEnbleSameSiteStrictEnforcementForTesting(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    *(unsigned char *)(v6 + 99) = a3;
    uint64_t v7 = *(unsigned char **)(v6 + 72);
    if (v7) {
      WebKit::WebResourceLoadStatisticsStore::setSameSiteStrictEnforcementEnabled(v7, a3);
    }
  }
  uint64_t v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
}

uint64_t WebKit::NetworkProcess::setFirstPartyWebsiteDataRemovalModeForTesting(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    if (v7) {
      return WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(v7, a3, a4);
    }
  }
  uint64_t v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setToSameSiteStrictCookiesForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = a2;
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 232), &v7))
  {
    return WebCore::NetworkStorageSession::setAllCookiesToSameSiteStrict();
  }
  uint64_t v6 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
}

uint64_t WebKit::NetworkProcess::setFirstPartyHostCNAMEDomainForTesting(uint64_t a1, uint64_t a2, WTF **a3, const WTF::StringImpl **a4, uint64_t *a5)
{
  uint64_t v11 = a2;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v11);
  if (v8) {
    WebKit::NetworkSession::setFirstPartyHostCNAMEDomain(v8, a3, a4);
  }
  uint64_t v9 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setThirdPartyCNAMEDomainForTesting(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    if (*(unsigned char *)(v6 + 144))
    {
      WTF::String::operator=((uint64_t *)(v6 + 136), a3);
    }
    else
    {
      uint64_t v7 = *a3;
      *a3 = 0;
      *(void *)(v6 + 136) = v7;
      *(unsigned char *)(v6 + 144) = 1;
    }
  }
  uint64_t v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
}

void WebKit::NetworkProcess::notifyMediaStreamingActivity(WebKit::NetworkProcess *this, uint64_t state64)
{
  unsigned int v2 = state64;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)this + 104);
  if (v4 != -1
    || (uint64_t v9 = (int *)((char *)this + 416),
        (uint32_t v10 = notify_register_check("com.apple.WebKit.mediaStreamingActivity", (int *)this + 104)) == 0)
    && (int v4 = *v9, *v9 != -1))
  {
    uint32_t v5 = notify_set_state(v4, v2);
    if (v5)
    {
      uint32_t v6 = v5;
      uint64_t v7 = off_1EB358938;
      if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR)) {
        return;
      }
      int v14 = 136315650;
      int v15 = "com.apple.WebKit.mediaStreamingActivity";
      __int16 v16 = 1024;
      uint32_t v17 = v6;
      __int16 v18 = 1024;
      uint32_t v19 = v6;
      uint64_t v8 = "notify_set_state() for %s failed with status (%d) 0x%X";
    }
    else
    {
      uint32_t v12 = notify_post("com.apple.WebKit.mediaStreamingActivity");
      if (!v12) {
        return;
      }
      uint32_t v13 = v12;
      uint64_t v7 = off_1EB358938;
      if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR)) {
        return;
      }
      int v14 = 136315650;
      int v15 = "com.apple.WebKit.mediaStreamingActivity";
      __int16 v16 = 1024;
      uint32_t v17 = v13;
      __int16 v18 = 1024;
      uint32_t v19 = v13;
      uint64_t v8 = "notify_post() for %s failed with status (%d) 0x%X";
    }
    _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v14, 0x18u);
    return;
  }
  uint64_t v11 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR))
  {
    int v14 = 136315650;
    int v15 = "com.apple.WebKit.mediaStreamingActivity";
    __int16 v16 = 1024;
    uint32_t v17 = v10;
    __int16 v18 = 1024;
    uint32_t v19 = v10;
    _os_log_error_impl(&dword_1985F2000, v11, OS_LOG_TYPE_ERROR, "notify_register_check() for %s failed with status (%d) 0x%X", (uint8_t *)&v14, 0x18u);
  }
  *uint64_t v9 = -1;
}

uint64_t WebKit::NetworkProcess::setPrivateClickMeasurementDebugMode(WebKit::NetworkProcess *this, SessionID a2, uint64_t a3)
{
  unint64_t m_identifier = a2.m_identifier;
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)this + 28, &m_identifier);
  if (result)
  {
    if (*(unsigned __int8 *)(result + 168) != a3)
    {
      *(unsigned char *)(result + 168) = a3;
      return (*(uint64_t (**)(void, uint64_t))(**(void **)(result + 160) + 56))(*(void *)(result + 160), a3);
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkProcess::preconnectTo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x1F4188790](a1, a2, a3);
  __int16 v5 = v4;
  char v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint32_t v13 = v12;
  int v15 = v14;
  uint64_t v16 = v3;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = WebCore::ResourceRequestBase::url(v8);
  __int16 v18 = *(WTF::StringImpl **)v17;
  if (*(void *)v17) {
    *(_DWORD *)v18 += 2;
  }
  uint64_t v31 = v18;
  long long v19 = *(_OWORD *)(v17 + 24);
  long long v32 = *(_OWORD *)(v17 + 8);
  long long v33 = v19;
  WebCore::ResourceRequestBase::httpUserAgent((uint64_t *)&v30, v9);
  uint64_t v34 = "LegacyCustomProtocolManager";
  uint64_t v35 = 28;
  uint64_t v20 = (WebKit::LegacyCustomProtocolManager *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v16 + 208), (WTF::ASCIILiteralHash *)&v34);
  uint64_t v34 = (const char *)WTF::URL::protocol((WTF::URL *)&v31);
  uint64_t v35 = v21;
  WTF::StringView::toString((uint64_t *)v37, (WTF::StringView *)&v34);
  char v23 = WebKit::LegacyCustomProtocolManager::supportsScheme(v20, v37);
  uint64_t v24 = v37[0];
  v37[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v22);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  if ((v23 & 1) == 0)
  {
    uint64_t v34 = v15;
    uint64_t v25 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v16 + 224), &v34);
    if (v25)
    {
      uint64_t v26 = (WebKit::NetworkSession *)v25;
      WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)v37);
      WebCore::ResourceRequest::operator=((uint64_t)v38, (uint64_t)v9);
      v37[0] = v13;
      v37[1] = v11;
      __int16 v39 = v5;
      v38[202] = v7;
      v38[2832] = 1;
      WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)v36, (const WebKit::NetworkLoadParameters *)v37);
      Scheduler = (WTF ***)WebKit::NetworkSession::networkLoadScheduler(v26);
      WebKit::NetworkLoadScheduler::startedPreconnectForMainResource(Scheduler, (const WTF::URL *)&v31, &v30);
      operator new();
    }
  }
  unint64_t v28 = v30;
  uint64_t v30 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v22);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  uint64_t result = v31;
  uint64_t v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WebKit::NetworkLoadParameters *WebKit::NetworkLoadParameters::NetworkLoadParameters(WebKit::NetworkLoadParameters *this, const WebKit::NetworkLoadParameters *a2)
{
  long long v4 = *((_OWORD *)a2 + 1);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = v4;
  __int16 v5 = (atomic_uint *)*((void *)a2 + 4);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  *((void *)this + 4) = v5;
  char v6 = (atomic_uint *)*((void *)a2 + 5);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  *((void *)this + 5) = v6;
  long long v7 = *((_OWORD *)a2 + 3);
  long long v8 = *((_OWORD *)a2 + 4);
  *(void *)((char *)this + 77) = *(void *)((char *)a2 + 77);
  *((_OWORD *)this + 3) = v7;
  *((_OWORD *)this + 4) = v8;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)this + 11, (const String *)a2 + 11);
  int v9 = *((_DWORD *)a2 + 72);
  *(_DWORD *)((char *)this + 291) = *(_DWORD *)((char *)a2 + 291);
  *((_DWORD *)this + 7objc_destroyWeak(this + 2) = v9;
  *((unsigned char *)this + 304) = 0;
  *((unsigned char *)this + 2880) = 0;
  if (*((unsigned char *)a2 + 2880))
  {
    WebKit::NavigationActionData::NavigationActionData((WebKit::NetworkLoadParameters *)((char *)this + 304), (const WebKit::NetworkLoadParameters *)((char *)a2 + 304));
    *((unsigned char *)this + 2880) = 1;
  }
  *((unsigned char *)this + 2896) = *((unsigned char *)a2 + 2896);
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 2904, (uint64_t)a2 + 2904);
  *((unsigned char *)this + 2920) = *((unsigned char *)a2 + 2920);
  std::__optional_move_base<WebKit::NetworkActivityTracker,false>::__optional_move_base[abi:sn180100]((uint64_t)this + 2928, (uint64_t *)a2 + 366);
  int v10 = *((_DWORD *)a2 + 740);
  *((_WORD *)this + 148objc_destroyWeak(this + 2) = *((_WORD *)a2 + 1482);
  *((_DWORD *)this + 740) = v10;
  return this;
}

void *WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WebCore::NetworkLoadMetrics const&)>::CompletionHandler<WebKit::NetworkProcess::preconnectTo(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)::$_0,void>(void *a1, uint64_t *a2)
{
  long long v4 = (void *)WTF::fastMalloc((WTF *)0xBF0);
  void *v4 = &unk_1EE9C3EA8;
  uint64_t v5 = *a2;
  *a2 = 0;
  void v4[2] = v5;
  WTF::URL::URL((uint64_t)(v4 + 3), a2 + 1);
  uint64_t v6 = a2[6];
  a2[6] = 0;
  v4[8] = v6;
  WebKit::NetworkLoadParameters::NetworkLoadParameters((uint64_t)(v4 + 10), (uint64_t)(a2 + 8));
  *a1 = v4;
  return a1;
}

uint64_t WebKit::NetworkProcess::preconnectTo(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)::$_0::~$_0(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 3016))
  {
    uint64_t v11 = *(const void **)(a1 + 3008);
    *(void *)(a1 + 3008) = 0;
    if (v11) {
      CFRelease(v11);
    }
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 2968, a2);
  if (*(unsigned char *)(a1 + 2944)) {
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)(a1 + 368));
  }
  uint64_t v3 = *(const void **)(a1 + 344);
  *(void *)(a1 + 344) = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 152));
  uint64_t v5 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, v4);
  }
  uint64_t v6 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v6) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v6, v4);
  }
  long long v7 = *(WTF::StringImpl **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v4);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  long long v8 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v4);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  int v9 = *(unsigned int **)a1;
  *(void *)a1 = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v4);
  }
  return a1;
}

uint64_t *WebKit::NetworkProcess::setSessionIsControlledByAutomation(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 216);
  if (a3) {
    return WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::add((uint64_t *)(a1 + 216), &v7, (uint64_t)&v6);
  }
  uint64_t result = (uint64_t *)WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), &v7);
  if (*v3)
  {
    uint64_t v5 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
    if ((uint64_t *)v5 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v5 = 0;
  }
  if ((uint64_t *)v5 != result) {
    return WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::remove(v3, result);
  }
  return result;
}

WTF::RunLoop *WebKit::NetworkProcess::fetchWebsiteData(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t *a5)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  int v10 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 134217984;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "NetworkProcess::fetchWebsiteData started to fetch data for session %llu", buf, 0xCu);
  }
  uint64_t v11 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)uint64_t v11 = 1;
  uint64_t v12 = *a5;
  *a5 = 0;
  *(void *)(v11 + 8) = v12;
  *(_OWORD *)(v11 + ++*(_DWORD *)(this + 16) = 0u;
  *(_OWORD *)(v11 + 3objc_destroyWeak(this + 2) = 0u;
  *(void *)(v11 + 48) = 0;
  char v65 = (atomic_uint *)v11;
  *(void *)int buf = a2;
  uint32_t v13 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), buf);
  if (a3)
  {
    *(void *)int buf = a2;
    if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 232), buf))
    {
      WebCore::NetworkStorageSession::getHostnamesWithCookies();
    }
  }
  if ((a3 & 0x2000) != 0)
  {
    *(void *)int buf = a2;
    if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 232), buf))
    {
      *(void *)int buf = a2;
      uint64_t v14 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 232), buf);
      WebCore::CredentialStorage::originsWithCredentials(&v71, (WebCore::CredentialStorage *)(v14 + 96));
      uint64_t v16 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(&v71);
      uint64_t v17 = v15;
      uint64_t v18 = v71;
      if (v71) {
        long long v19 = (WebCore::SecurityOriginData *)(v71 + 32 * *(unsigned int *)(v71 - 4));
      }
      else {
        long long v19 = 0;
      }
      if (v19 != v16)
      {
        char v60 = a4;
        uint64_t v63 = v13;
        do
        {
          uint64_t v20 = v65;
          v74[0] = 0;
          int v75 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v74, (uint64_t)v16);
          buf[0] = 0;
          int v77 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, (uint64_t)v74);
          LODWORD(v78) = 0x2000;
          *((void *)&v78 + 1) = 0;
          unsigned __int32 v21 = v20[7];
          if (v21 == v20[6])
          {
            WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>((uint64_t)(v20 + 4), (unint64_t)buf);
          }
          else
          {
            uint64_t v22 = *((void *)v20 + 2) + 48 * v21;
            *(unsigned char *)uint64_t v22 = 0;
            *(_DWORD *)(v22 + 24) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v22, (uint64_t)buf);
            *(_OWORD *)(v22 + 3objc_destroyWeak(this + 2) = v78;
            ++v20[7];
          }
          if (v77 != -1) {
            ((void (*)(uint64_t *, unsigned char *))off_1EE9C39D0[v77])(&v64, buf);
          }
          int v77 = -1;
          if (v75 != -1) {
            ((void (*)(uint64_t *, unsigned char *))off_1EE9C39D0[v75])(&v64, v74);
          }
          int v75 = -1;
          while (1)
          {
            uint64_t v16 = (WebCore::SecurityOriginData *)((char *)v16 + 32);
            if (v16 == v17) {
              break;
            }
            if (!WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v16)) {
              goto LABEL_24;
            }
          }
          uint64_t v16 = v17;
LABEL_24:
          ;
        }
        while (v16 != v19);
        uint64_t v18 = v71;
        uint32_t v13 = v63;
        a4 = v60;
      }
      if (v18) {
        WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v18, v15);
      }
    }
    if (v13)
    {
      (*(void (**)(uint64_t *__return_ptr, WebKit::NetworkSession *))(*(void *)v13 + 120))(&v64, v13);
      uint64_t v24 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(&v64);
      uint64_t v25 = v23;
      uint64_t v26 = v64;
      if (v64) {
        uint64_t v27 = (WebCore::SecurityOriginData *)(v64 + 32 * *(unsigned int *)(v64 - 4));
      }
      else {
        uint64_t v27 = 0;
      }
      if (v27 != v24)
      {
        uint64_t v59 = a2;
        char v61 = a4;
        do
        {
          LOBYTE(v71) = 0;
          int v73 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v71, (uint64_t)v24);
          unint64_t v28 = v65;
          v69[0] = 0;
          int v70 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v69, (uint64_t)&v71);
          buf[0] = 0;
          int v77 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, (uint64_t)v69);
          LODWORD(v78) = 0x2000;
          *((void *)&v78 + 1) = 0;
          unsigned __int32 v29 = v28[7];
          if (v29 == v28[6])
          {
            WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>((uint64_t)(v28 + 4), (unint64_t)buf);
          }
          else
          {
            uint64_t v30 = *((void *)v28 + 2) + 48 * v29;
            *(unsigned char *)uint64_t v30 = 0;
            *(_DWORD *)(v30 + 24) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v30, (uint64_t)buf);
            *(_OWORD *)(v30 + 3objc_destroyWeak(this + 2) = v78;
            ++v28[7];
          }
          if (v77 != -1) {
            ((void (*)(char *, unsigned char *))off_1EE9C39D0[v77])(&v66, buf);
          }
          int v77 = -1;
          if (v70 != -1) {
            ((void (*)(char *, unsigned char *))off_1EE9C39D0[v70])(&v66, v69);
          }
          int v70 = -1;
          if (v73 != -1) {
            ((void (*)(unsigned char *, uint64_t *))off_1EE9C39D0[v73])(buf, &v71);
          }
          while (1)
          {
            uint64_t v24 = (WebCore::SecurityOriginData *)((char *)v24 + 32);
            if (v24 == v25) {
              break;
            }
            if (!WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v24)) {
              goto LABEL_46;
            }
          }
          uint64_t v24 = v25;
LABEL_46:
          ;
        }
        while (v24 != v27);
        uint64_t v26 = v64;
        a2 = v59;
        a4 = v61;
      }
      if (v26) {
        WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v26, v23);
      }
    }
  }
  if ((a3 & 0x200) != 0)
  {
    WebKit::NetworkProcess::hostNamesWithHSTSCache(a1, a2, (uint64_t *)buf);
    uint64_t v32 = *(void *)buf;
    *(void *)int buf = 0;
    long long v33 = (WTF::StringImpl **)*((void *)v65 + 5);
    *((void *)v65 + 5) = v32;
    if (v33)
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v33, v31);
      if (*(void *)buf) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)buf, v58);
      }
    }
  }
  if ((a3 & 0x4000) != 0)
  {
    if (v13)
    {
      if (*((unsigned char *)v13 + 768))
      {
        uint64_t v34 = *((void *)v13 + 94);
        if (v34)
        {
          if (*(_DWORD *)(v34 + 4))
          {
            WebKit::NetworkSession::ensureSWServer(v13);
            uint64_t v35 = v65;
            atomic_fetch_add(v65, 1u);
            uint64_t v36 = (void *)WTF::fastMalloc((WTF *)0x10);
            *uint64_t v36 = &unk_1EE9C3EF8;
            v36[1] = v35;
            uint64_t v71 = 0;
            *(void *)int buf = v36;
            WebCore::SWServer::getOriginsWithRegistrations();
            uint64_t v37 = *(void *)buf;
            *(void *)int buf = 0;
            if (v37) {
              (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
            }
            WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)&v71);
          }
        }
      }
    }
  }
  char v38 = a4;
  if ((a3 & 2) != 0)
  {
    if (v13)
    {
      __int16 v39 = (_DWORD *)*((void *)v13 + 77);
      if (v39)
      {
        uint64_t v40 = v65;
        atomic_fetch_add(v65, 1u);
        uint64_t v41 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint64_t v41 = &unk_1EE9C3F20;
        v41[1] = v40;
        uint64_t v71 = 0;
        *(void *)int buf = v41;
        WebKit::NetworkCache::Cache::fetchData(v39, a4 & 1, (uint64_t *)buf);
        if (*(void *)buf) {
          (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
        }
        WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)&v71);
      }
    }
  }
  if ((a3 & 0x40000) != 0 && v13)
  {
    int v62 = a3;
    (*(void (**)(uint64_t *__return_ptr, WebKit::NetworkSession *))(*(void *)v13 + 96))(&v71, v13);
    if (v72)
    {
      uint64_t v43 = v71;
      uint64_t v44 = v65;
      unsigned int v45 = v65 + 4;
      uint64_t v46 = 32 * v72;
      do
      {
        v67[0] = 0;
        int v68 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v67, v43);
        buf[0] = 0;
        int v77 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, (uint64_t)v67);
        LODWORD(v78) = 0x40000;
        *((void *)&v78 + 1) = 0;
        unsigned __int32 v47 = v44[7];
        if (v47 == v44[6])
        {
          WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>((uint64_t)v45, (unint64_t)buf);
        }
        else
        {
          uint64_t v48 = *((void *)v44 + 2) + 48 * v47;
          *(unsigned char *)uint64_t v48 = 0;
          *(_DWORD *)(v48 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v48, (uint64_t)buf);
          *(_OWORD *)(v48 + 3objc_destroyWeak(this + 2) = v78;
          ++v44[7];
        }
        if (v77 != -1) {
          ((void (*)(uint64_t *, unsigned char *))off_1EE9C39D0[v77])(&v64, buf);
        }
        int v77 = -1;
        if (v68 != -1) {
          ((void (*)(uint64_t *, unsigned char *))off_1EE9C39D0[v68])(&v64, v67);
        }
        int v68 = -1;
        v43 += 32;
        v46 -= 32;
      }
      while (v46);
    }
    WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v42);
    a3 = v62;
  }
  if ((a3 & 0x1000) != 0)
  {
    if (v13)
    {
      uint64_t v49 = *((void *)v13 + 9);
      if (v49)
      {
        uint64_t v50 = v65;
        atomic_fetch_add(v65, 1u);
        uint64_t v51 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint64_t v51 = &unk_1EE9C3F48;
        v51[1] = v50;
        uint64_t v71 = 0;
        *(void *)int buf = v51;
        WebKit::WebResourceLoadStatisticsStore::registrableDomains(v49, (uint64_t *)buf);
        if (*(void *)buf) {
          (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
        }
        WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)&v71);
      }
    }
  }
  if ((*(void *)&a3 & 0x8C0B0) != 0 && v13)
  {
    int v52 = a3;
    uint64_t v53 = *((void *)v13 + 131);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v53 + 16));
    unsigned int v54 = v65;
    atomic_fetch_add(v65, 1u);
    unsigned int v55 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v55 = &unk_1EE9C3F70;
    v55[1] = v54;
    uint64_t v71 = 0;
    *(void *)int buf = v55;
    WebKit::NetworkStorageManager::fetchData(v53, v52, v38 & 1, (uint64_t *)buf);
    if (*(void *)buf) {
      (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
    }
    WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)&v71);
    if (v53) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v53 + 16), v56);
    }
  }
  return WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)&v65);
}

WTF::RunLoop *WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref(WTF::RunLoop *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v2);
    WTF::RunLoop::main(this);
    uint64_t v4 = *(void *)(v2 + 48);
    *(void *)(v2 + 48) = 0;
    uint64_t v5 = *(void *)(v2 + 24);
    *(void *)(v2 + 24) = 0;
    long long v6 = *(_OWORD *)(v2 + 8);
    *(_OWORD *)(v2 + 8) = 0u;
    long long v16 = v6;
    long long v17 = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v2 + 3objc_destroyWeak(this + 2) = 0u;
    uint64_t v7 = WTF::fastMalloc((WTF *)0x38);
    *(void *)uint64_t v7 = &unk_1EE9C3ED0;
    *(_OWORD *)(v7 + 8) = v16;
    long long v18 = 0u;
    uint64_t v19 = 0;
    *(void *)(v7 + 24) = v5;
    *(_OWORD *)(v7 + 3objc_destroyWeak(this + 2) = v17;
    long long v20 = 0u;
    uint64_t v21 = 0;
    *(void *)(v7 + 48) = v4;
    uint64_t v22 = v7;
    WTF::RunLoop::dispatch();
    uint64_t v9 = v22;
    uint64_t v22 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18 + 8, v8);
    if ((void)v18) {
      (*(void (**)(void))(*(void *)v18 + 8))(v18);
    }
    uint64_t v11 = *(WTF::StringImpl ***)(v2 + 48);
    if (v11) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v10);
    }
    uint64_t v12 = *(WTF::StringImpl ***)(v2 + 40);
    if (v12) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v10);
    }
    uint32_t v13 = *(WTF::StringImpl ***)(v2 + 32);
    if (v13) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v10);
    }
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 16, v10);
    uint64_t v15 = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    WTF::fastFree((WTF *)v2, v14);
  }
  return this;
}

unsigned int *WebKit::NetworkProcess::deleteWebsiteData(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, double a5)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a4;
  *a4 = 0;
  int v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v10 = &unk_1EE9C3F98;
  v10[1] = v9;
  uint64_t v11 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v11 = 1;
  *(void *)(v11 + 8) = v10;
  uint64_t v12 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 134218240;
    *(double *)&uint8_t buf[4] = a5;
    __int16 v41 = 2048;
    uint64_t v42 = a2;
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "NetworkProcess::deleteWebsiteData started to delete data modified since %f for session %llu", buf, 0x16u);
  }
  *(void *)int buf = a2;
  uint32_t v13 = (WebCore::CrossOriginPreflightResultCache *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), buf);
  uint64_t v14 = v13;
  if ((a3 & 0x200) != 0) {
    uint32_t v13 = (WebCore::CrossOriginPreflightResultCache *)WebKit::NetworkProcess::clearHSTSCache(a1, a2);
  }
  if ((a3 & 1) == 0) {
    goto LABEL_8;
  }
  *(void *)int buf = a2;
  uint32_t v13 = (WebCore::CrossOriginPreflightResultCache *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 232), buf);
  if (!v13) {
    goto LABEL_8;
  }
  atomic_fetch_add((atomic_uint *volatile)v11, 1u);
  uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v15 = &unk_1EE9C3FC0;
  v15[1] = v11;
  *(void *)int buf = v15;
  WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince();
  uint32_t v13 = *(WebCore::CrossOriginPreflightResultCache **)buf;
  *(void *)int buf = 0;
  if (v13)
  {
    uint32_t v13 = (WebCore::CrossOriginPreflightResultCache *)(*(uint64_t (**)(WebCore::CrossOriginPreflightResultCache *))(*(void *)v13 + 8))(v13);
    if ((a3 & 0x2000) == 0) {
      goto LABEL_13;
    }
  }
  else
  {
LABEL_8:
    if ((a3 & 0x2000) == 0) {
      goto LABEL_13;
    }
  }
  *(void *)int buf = a2;
  uint32_t v13 = (WebCore::CrossOriginPreflightResultCache *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 232), buf);
  if (v13) {
    uint32_t v13 = (WebCore::CrossOriginPreflightResultCache *)WebCore::CredentialStorage::clearCredentials((WebCore::CrossOriginPreflightResultCache *)((char *)v13 + 96));
  }
  if (v14) {
    uint32_t v13 = (WebCore::CrossOriginPreflightResultCache *)(*(uint64_t (**)(WebKit::NetworkSession *, double))(*(void *)v14 + 136))(v14, a5);
  }
LABEL_13:
  if ((a3 & 0xC000) != 0 && ((a2 & 0x8000000000000000) == 0 || a2 == -1) && v14)
  {
    WebKit::NetworkSession::ensureSWServer(v14);
    atomic_fetch_add((atomic_uint *volatile)v11, 1u);
    long long v16 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v16 = &unk_1EE9C3FE8;
    v16[1] = v11;
    *(void *)int buf = v16;
    WebCore::SWServer::clearAll();
    uint64_t v17 = *(void *)buf;
    *(void *)int buf = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    atomic_fetch_add((atomic_uint *volatile)v11, 1u);
    long long v18 = (void *)WTF::fastMalloc((WTF *)0x10);
    *long long v18 = &unk_1EE9C4010;
    v18[1] = v11;
    *(void *)int buf = v18;
    WebKit::NetworkNotificationManager::removeAllPushSubscriptions((uint64_t)v14 + 1080, (uint64_t *)buf);
    uint32_t v13 = *(WebCore::CrossOriginPreflightResultCache **)buf;
    *(void *)int buf = 0;
    if (v13) {
      uint32_t v13 = (WebCore::CrossOriginPreflightResultCache *)(*(uint64_t (**)(WebCore::CrossOriginPreflightResultCache *))(*(void *)v13 + 8))(v13);
    }
  }
  if ((a3 & 0x1000) != 0)
  {
    if (!v14) {
      goto LABEL_62;
    }
    uint64_t v19 = *((void *)v14 + 9);
    if (v19)
    {
      {
        int v20 = WebKit::WebResourceLoadStatisticsStore::monitoredDataTypes(void)::dataTypes;
      }
      else
      {
        int v20 = 574905;
        WebKit::WebResourceLoadStatisticsStore::monitoredDataTypes(void)::dataTypes = 574905;
      }
      char v21 = (v20 & ~a3) != 0;
      atomic_fetch_add((atomic_uint *volatile)v11, 1u);
      uint64_t v22 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v22 = &unk_1EE9C4038;
      v22[1] = v11;
      *(void *)int buf = v22;
      WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(v19, v21, (WTF::StringImpl *)buf);
      if (*(void *)buf) {
        (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
      }
    }
  }
  else if (!v14)
  {
LABEL_62:
    char v25 = 0;
    if ((a3 & 4) == 0) {
      goto LABEL_36;
    }
LABEL_35:
    uint64_t v26 = (WebCore::CrossOriginPreflightResultCache *)WebCore::CrossOriginPreflightResultCache::singleton(v13);
    WebCore::CrossOriginPreflightResultCache::clear(v26);
    goto LABEL_36;
  }
  buf[0] = 0;
  buf[8] = 0;
  atomic_fetch_add((atomic_uint *volatile)v11, 1u);
  char v23 = (WebCore::CrossOriginPreflightResultCache *)WTF::fastMalloc((WTF *)0x10);
  *(void *)char v23 = &unk_1EE9C4060;
  *((void *)v23 + 1) = v11;
  __int16 v39 = v23;
  (*(void (**)(WebKit::NetworkSession *, void, uint64_t, unsigned char *, WebCore::CrossOriginPreflightResultCache **))(*(void *)v14 + 216))(v14, *(void *)&a5, 1, buf, &v39);
  uint32_t v13 = v39;
  __int16 v39 = 0;
  if (v13) {
    uint32_t v13 = (WebCore::CrossOriginPreflightResultCache *)(*(uint64_t (**)(WebCore::CrossOriginPreflightResultCache *))(*(void *)v13 + 8))(v13);
  }
  if (buf[8])
  {
    uint32_t v13 = *(WebCore::CrossOriginPreflightResultCache **)buf;
    if (*(void *)buf) {
      uint32_t v13 = (WebCore::CrossOriginPreflightResultCache *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)buf, v24);
    }
  }
  char v25 = 1;
  if ((a3 & 4) != 0) {
    goto LABEL_35;
  }
LABEL_36:
  if ((a3 & 2) != 0) {
    char v27 = v25 ^ 1;
  }
  else {
    char v27 = 1;
  }
  if ((v27 & 1) == 0)
  {
    uint64_t v28 = *((void *)v14 + 77);
    if (v28)
    {
      atomic_fetch_add((atomic_uint *volatile)v11, 1u);
      unsigned __int32 v29 = (void *)WTF::fastMalloc((WTF *)0x10);
      *unsigned __int32 v29 = &unk_1EE9C4088;
      v29[1] = v11;
      *(void *)int buf = v29;
      WebKit::NetworkCache::Cache::clear(v28, (uint64_t *)buf, a5);
      if (*(void *)buf) {
        (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
      }
    }
  }
  if ((a3 & 0x20000) != 0) {
    char v30 = v25 ^ 1;
  }
  else {
    char v30 = 1;
  }
  if ((v30 & 1) == 0)
  {
    atomic_fetch_add((atomic_uint *volatile)v11, 1u);
    uint64_t v31 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v31 = &unk_1EE9C40B0;
    v31[1] = v11;
    *(void *)int buf = v31;
    WebKit::NetworkSession::clearPrivateClickMeasurement((uint64_t)v14);
    uint64_t v32 = *(void *)buf;
    *(void *)int buf = 0;
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
    }
  }
  if ((a3 & 0x40000) != 0) {
    char v33 = v25 ^ 1;
  }
  else {
    char v33 = 1;
  }
  if ((v33 & 1) == 0) {
    (*(void (**)(WebKit::NetworkSession *, double))(*(void *)v14 + 112))(v14, a5);
  }
  if ((*(void *)&a3 & 0x8C0B0) != 0) {
    char v34 = v25 ^ 1;
  }
  else {
    char v34 = 1;
  }
  if ((v34 & 1) == 0)
  {
    uint64_t v35 = *((void *)v14 + 131);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v35 + 16));
    atomic_fetch_add((atomic_uint *volatile)v11, 1u);
    uint64_t v36 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v36 = &unk_1EE9C40D8;
    v36[1] = v11;
    *(void *)int buf = v36;
    WebKit::NetworkStorageManager::deleteDataModifiedSince(v35, a3, (uint64_t *)buf, a5);
    if (*(void *)buf)
    {
      (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
      if (!v35) {
        return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v11);
      }
      goto LABEL_60;
    }
    if (v35) {
LABEL_60:
    }
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v35 + 16), v37);
  }
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v11);
}

unsigned int *WebKit::NetworkProcess::deleteWebsiteDataForOrigin(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a5;
  *a5 = 0;
  int v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v10 = &unk_1EE9C4100;
  v10[1] = v9;
  uint64_t v11 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v11 = 1;
  *(void *)(v11 + 8) = v10;
  uint64_t v12 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 134217984;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "NetworkProcess::deleteWebsiteDataForOrigin started to delete data for session %llu", buf, 0xCu);
  }
  *(void *)int buf = a2;
  uint32_t v13 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), buf);
  if ((a3 & 1) == 0) {
    goto LABEL_6;
  }
  *(void *)int buf = a2;
  if (!WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 232), buf))goto LABEL_6; {
  atomic_fetch_add((atomic_uint *volatile)v11, 1u);
  }
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9C4128;
  v14[1] = v11;
  *(void *)int buf = v14;
  WebCore::NetworkStorageSession::deleteCookies();
  uint64_t v15 = *(void *)buf;
  *(void *)int buf = 0;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    if ((a3 & 2) == 0) {
      goto LABEL_35;
    }
  }
  else
  {
LABEL_6:
    if ((a3 & 2) == 0) {
      goto LABEL_35;
    }
  }
  if ((a2 & 0x8000000000000000) == 0 || a2 == -1)
  {
    long long v16 = (WebKit::NetworkCache::Cache *)*((void *)v13 + 77);
    if (v16)
    {
      ++*(_DWORD *)v16;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      if (WebCore::operator==())
      {
        long long v18 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
        if (*MEMORY[0x1E4F30980]) {
          *(_DWORD *)v18 += 2;
        }
        unsigned int v45 = v18;
      }
      else
      {
        int v19 = *(_DWORD *)(a4 + 24);
        if (v19)
        {
          if (v19 != 1) {
            std::__throw_bad_variant_access[abi:sn180100]();
          }
          int v20 = (WebCore::ResourceRequestBase *)MEMORY[0x1E4F30980];
        }
        else
        {
          int v20 = (WebCore::ResourceRequestBase *)(a4 + 8);
        }
        WebCore::ResourceRequestBase::partitionName((uint64_t *)&v45, v20, v17);
      }
      char v21 = WebCore::operator==();
      ++*(_DWORD *)v16;
      *(void *)int buf = v16;
      atomic_fetch_add((atomic_uint *volatile)v11, 1u);
      *(void *)&buf[8] = v11;
      char v50 = v21;
      v51[0] = 0;
      int v52 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v51, a4 + 32);
      uint64_t v22 = v45;
      if (v45) {
        *(_DWORD *)v45 += 2;
      }
      char v23 = v46;
      uint64_t v46 = 0;
      v53[0] = v22;
      v53[1] = v23;
      uint64_t v24 = v47;
      uint64_t v47 = 0;
      uint64_t v54 = v24;
      uint64_t v25 = WTF::fastMalloc((WTF *)0x58);
      *(void *)uint64_t v25 = &unk_1EE9C4150;
      *(void *)(v25 + 8) = *(void *)buf;
      uint64_t v26 = *(void *)&buf[8];
      *(_OWORD *)int buf = 0u;
      *(void *)(v25 + ++*(_DWORD *)(this + 16) = v26;
      *(unsigned char *)(v25 + 24) = v50;
      *(unsigned char *)(v25 + 3objc_destroyWeak(this + 2) = 0;
      *(_DWORD *)(v25 + 56) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v25 + 32, (uint64_t)v51);
      *(WTF::StringImpl **)(v25 + 64) = v53[0];
      char v27 = v53[1];
      *(_OWORD *)uint64_t v53 = 0u;
      *(void *)(v25 + 7objc_destroyWeak(this + 2) = v27;
      uint64_t v28 = v54;
      uint64_t v54 = 0;
      *(void *)(v25 + 80) = v28;
      uint64_t v44 = v25;
      WebKit::NetworkCache::Cache::traverse((uint64_t)v16, (uint64_t)&v45, &v44);
      uint64_t v30 = v44;
      uint64_t v44 = 0;
      if (v30) {
        (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
      }
      WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53[1], v29);
      uint64_t v32 = v53[0];
      v53[0] = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2) {
          WTF::StringImpl::destroy(v32, v31);
        }
        else {
          *(_DWORD *)v32 -= 2;
        }
      }
      if (v52 != -1) {
        ((void (*)(char *, unsigned char *))off_1EE9C39D0[v52])(&v48, v51);
      }
      int v52 = -1;
      char v33 = *(unsigned int **)&buf[8];
      *(void *)&buf[8] = 0;
      if (v33) {
        WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v33);
      }
      char v34 = *(WebKit::NetworkCache::Cache **)buf;
      *(void *)int buf = 0;
      if (v34) {
        WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v34, v31);
      }
      uint64_t v35 = v45;
      unsigned int v45 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2) {
          WTF::StringImpl::destroy(v35, v31);
        }
        else {
          *(_DWORD *)v35 -= 2;
        }
      }
      WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v31);
      WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v16, v36);
    }
  }
LABEL_35:
  if ((*(void *)&a3 & 0x8C0B0) != 0 && v13)
  {
    uint64_t v37 = *((void *)v13 + 131);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v37 + 16));
    atomic_fetch_add((atomic_uint *volatile)v11, 1u);
    char v38 = (void *)WTF::fastMalloc((WTF *)0x10);
    *char v38 = &unk_1EE9C41A0;
    v38[1] = v11;
    *(void *)int buf = v38;
    WebKit::NetworkStorageManager::deleteData(v37, a3, a4, (atomic_uchar **)buf);
    uint64_t v40 = *(void *)buf;
    *(void *)int buf = 0;
    if (v40)
    {
      (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
      if (!v37) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    if (v37) {
LABEL_39:
    }
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v37 + 16), v39);
  }
LABEL_40:
  if ((a3 & 0xC000) != 0 && ((a2 & 0x8000000000000000) == 0 || a2 == -1))
  {
    if (v13)
    {
      WebKit::NetworkSession::ensureSWServer(v13);
      atomic_fetch_add((atomic_uint *volatile)v11, 1u);
      __int16 v41 = (void *)WTF::fastMalloc((WTF *)0x10);
      *__int16 v41 = &unk_1EE9C41C8;
      v41[1] = v11;
      *(void *)int buf = v41;
      WebCore::SWServer::clear();
      uint64_t v42 = *(void *)buf;
      *(void *)int buf = 0;
      if (v42) {
        (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
      }
    }
  }
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v11);
}

unsigned int *WebKit::NetworkProcess::deleteWebsiteDataForOrigins(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = *a8;
  *a8 = 0;
  long long v16 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v16 = &unk_1EE9C41F0;
  v16[1] = v15;
  uint64_t v17 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v17 = 1;
  *(void *)(v17 + 8) = v16;
  long long v18 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 134217984;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "NetworkProcess::deleteWebsiteDataForOrigins started to delete data for session %llu", buf, 0xCu);
  }
  *(void *)int buf = a2;
  uint64_t result = (unsigned int *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), buf);
  int v20 = result;
  if (a3)
  {
    *(void *)int buf = a2;
    uint64_t result = (unsigned int *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 232), buf);
    if (result)
    {
      atomic_fetch_add((atomic_uint *volatile)v17, 1u);
      char v21 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v21 = &unk_1EE9C4218;
      v21[1] = v17;
      *(void *)int buf = v21;
      WebCore::NetworkStorageSession::deleteCookiesForHostnames();
      uint64_t result = *(unsigned int **)buf;
      *(void *)int buf = 0;
      if (result)
      {
        uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
        if ((a3 & 0x200) == 0) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
    }
  }
  if ((a3 & 0x200) != 0) {
LABEL_7:
  }
    uint64_t result = (unsigned int *)WebKit::NetworkProcess::deleteHSTSCacheForHostNames(a1, a2, a6);
LABEL_8:
  if ((a3 & 0x40000) == 0 || !v20)
  {
LABEL_23:
    uint64_t v90 = a5;
    uint64_t v91 = a6;
    if ((a3 & 0x20000) != 0)
    {
      if (v20)
      {
        uint64_t v31 = *(unsigned int *)(a4 + 12);
        if (v31)
        {
          uint64_t v32 = 32 * v31;
          char v33 = (_DWORD *)(*(void *)a4 + 24);
          char v34 = (WebCore::RegistrableDomain *)MEMORY[0x1E4F30980];
          do
          {
            if (*v33)
            {
              uint64_t v35 = v34;
              if (*v33 != 1) {
                goto LABEL_99;
              }
            }
            else
            {
              uint64_t v35 = (WebCore::RegistrableDomain *)(v33 - 4);
            }
            WebCore::RegistrableDomain::uncheckedCreateFromHost(v35, (WTF::StringImpl **)buf);
            atomic_fetch_add((atomic_uint *volatile)v17, 1u);
            uint64_t v36 = WTF::fastMalloc((WTF *)0x10);
            *(void *)uint64_t v36 = &unk_1EE9C4240;
            *(void *)(v36 + 8) = v17;
            uint64_t v94 = (WTF::StringImpl **)v36;
            (*(void (**)(void, uint8_t *, WTF::StringImpl ***))(**((void **)v20 + 20) + 40))(*((void *)v20 + 20), buf, &v94);
            char v38 = v94;
            uint64_t v94 = 0;
            if (v38) {
              (*((void (**)(WTF::StringImpl **))*v38 + 1))(v38);
            }
            uint64_t result = *(unsigned int **)buf;
            *(void *)int buf = 0;
            if (result)
            {
              if (*result == 2) {
                uint64_t result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v37);
              }
              else {
                *result -= 2;
              }
            }
            v33 += 8;
            v32 -= 32;
          }
          while (v32);
        }
      }
    }
    if ((a3 & 0xC000) != 0 && ((a2 & 0x8000000000000000) == 0 || a2 == -1))
    {
      if (v20)
      {
        uint64_t result = (unsigned int *)WebKit::NetworkSession::ensureSWServer((WebKit::NetworkSession *)v20);
        uint64_t v39 = *(unsigned int *)(a4 + 12);
        if (v39)
        {
          uint64_t v40 = *(void *)a4;
          uint64_t v41 = 32 * v39;
          do
          {
            atomic_fetch_add((atomic_uint *volatile)v17, 1u);
            uint64_t v42 = (void *)WTF::fastMalloc((WTF *)0x10);
            *uint64_t v42 = &unk_1EE9C4268;
            v42[1] = v17;
            *(void *)int buf = v42;
            WebCore::SWServer::clear();
            uint64_t v43 = *(void *)buf;
            *(void *)int buf = 0;
            if (v43) {
              (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
            }
            buf[0] = 0;
            int v96 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, v40);
            atomic_fetch_add((atomic_uint *volatile)v17, 1u);
            uint64_t v44 = WTF::fastMalloc((WTF *)0x10);
            *(void *)uint64_t v44 = &unk_1EE9C4290;
            *(void *)(v44 + 8) = v17;
            uint64_t v94 = (WTF::StringImpl **)v44;
            WebKit::NetworkNotificationManager::removePushSubscriptionsForOrigin((uint64_t)(v20 + 270), (uint64_t)buf, (uint64_t *)&v94);
            uint64_t result = (unsigned int *)v94;
            uint64_t v94 = 0;
            if (result) {
              uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
            }
            if (v96 != -1) {
              uint64_t result = (unsigned int *)((uint64_t (*)(WTF::StringImpl ***, uint8_t *))off_1EE9C39D0[v96])(&v94, buf);
            }
            v40 += 32;
            v41 -= 32;
          }
          while (v41);
        }
      }
    }
    if ((a3 & 4) != 0)
    {
      unsigned int v45 = (WebCore::CrossOriginPreflightResultCache *)WebCore::CrossOriginPreflightResultCache::singleton((WebCore::CrossOriginPreflightResultCache *)result);
      WebCore::CrossOriginPreflightResultCache::clear(v45);
    }
    if ((a3 & 2) == 0) {
      goto LABEL_61;
    }
    if (!v20) {
      goto LABEL_61;
    }
    uint64_t v46 = (_DWORD *)*((void *)v20 + 77);
    if (!v46) {
      goto LABEL_61;
    }
    atomic_fetch_add((atomic_uint *volatile)v17, 1u);
    uint64_t v47 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v47 = &unk_1EE9C42B8;
    v47[1] = v17;
    *(void *)int buf = v47;
    WebKit::NetworkCache::Cache::deleteData(v46, a4, (uint64_t *)buf);
    uint64_t v48 = *(void *)buf;
    *(void *)int buf = 0;
    if (v48)
    {
      (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
      if ((a3 & 0x2000) == 0) {
        goto LABEL_68;
      }
    }
    else
    {
LABEL_61:
      if ((a3 & 0x2000) == 0) {
        goto LABEL_68;
      }
    }
    *(void *)int buf = a2;
    uint64_t v49 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 232), buf);
    if (v49)
    {
      uint64_t v50 = *(unsigned int *)(a4 + 12);
      if (v50)
      {
        uint64_t v51 = *(const WebCore::SecurityOriginData **)a4;
        int v52 = (WebCore::CredentialStorage *)(v49 + 96);
        uint64_t v53 = 32 * v50;
        do
        {
          WebCore::CredentialStorage::removeCredentialsWithOrigin(v52, v51);
          uint64_t v51 = (const WebCore::SecurityOriginData *)((char *)v51 + 32);
          v53 -= 32;
        }
        while (v53);
      }
    }
    if (!v20) {
      return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v17);
    }
    (*(void (**)(unsigned int *, uint64_t))(*(void *)v20 + 128))(v20, a4);
LABEL_68:
    if ((a3 & 0x1000) != 0)
    {
      if (v20)
      {
        uint64_t v54 = *(unsigned int *)(a7 + 12);
        if (v54)
        {
          uint64_t v55 = *(WTF::StringImpl ***)a7;
          uint64_t v56 = 8 * v54;
          do
          {
            uint64_t v57 = *((void *)v20 + 9);
            if (v57)
            {
              long long v58 = *v55;
              if (*v55) {
                *(_DWORD *)v58 += 2;
              }
              CFTypeRef v93 = v58;
              atomic_fetch_add((atomic_uint *volatile)v17, 1u);
              uint64_t v59 = (void *)WTF::fastMalloc((WTF *)0x10);
              *uint64_t v59 = &unk_1EE9C42E0;
              v59[1] = v17;
              *(void *)int buf = v59;
              WebKit::WebResourceLoadStatisticsStore::removeDataForDomain(v57, (uint64_t *)&v93, (uint64_t *)buf);
              if (*(void *)buf) {
                (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
              }
              char v61 = v93;
              CFTypeRef v93 = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 2) {
                  WTF::StringImpl::destroy(v61, v60);
                }
                else {
                  *(_DWORD *)v61 -= 2;
                }
              }
            }
            ++v55;
            v56 -= 8;
          }
          while (v56);
        }
      }
    }
    if ((*(void *)&a3 & 0x8C0B0) != 0 && v20)
    {
      uint64_t v62 = *((void *)v20 + 131);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v62 + 16));
      atomic_fetch_add((atomic_uint *volatile)v17, 1u);
      uint64_t v63 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v63 = &unk_1EE9C4308;
      v63[1] = v17;
      *(void *)int buf = v63;
      WebKit::NetworkStorageManager::deleteData(v62, a3, a4, (uint64_t *)buf);
      uint64_t v65 = *(void *)buf;
      *(void *)int buf = 0;
      if (v65)
      {
        (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
        if (!v62) {
          goto LABEL_88;
        }
      }
      else if (!v62)
      {
LABEL_88:
        uint64_t v94 = 0;
        uint64_t v66 = *(unsigned int *)(a4 + 12);
        if (v66)
        {
          uint64_t v67 = 32 * v66;
          int v68 = (_DWORD *)(*(void *)a4 + 24);
          char v69 = (WebCore::RegistrableDomain *)MEMORY[0x1E4F30980];
          do
          {
            if (*v68)
            {
              int v70 = v69;
              if (*v68 != 1) {
                goto LABEL_99;
              }
            }
            else
            {
              int v70 = (WebCore::RegistrableDomain *)(v68 - 4);
            }
            WebCore::RegistrableDomain::uncheckedCreateFromHost(v70, &v92);
            WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v94, &v92, (uint64_t)buf);
            unsigned int v72 = v92;
            char v92 = 0;
            if (v72)
            {
              if (*(_DWORD *)v72 == 2) {
                WTF::StringImpl::destroy(v72, v71);
              }
              else {
                *(_DWORD *)v72 -= 2;
              }
            }
            v68 += 8;
            v67 -= 32;
          }
          while (v67);
        }
LABEL_100:
        uint64_t v73 = *(unsigned int *)(v90 + 12);
        if (v73)
        {
          CFTypeRef v74 = *(WebCore::RegistrableDomain **)v90;
          uint64_t v75 = 8 * v73;
          do
          {
            WebCore::RegistrableDomain::uncheckedCreateFromHost(v74, &v92);
            WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v94, &v92, (uint64_t)buf);
            int v77 = v92;
            char v92 = 0;
            if (v77)
            {
              if (*(_DWORD *)v77 == 2) {
                WTF::StringImpl::destroy(v77, v76);
              }
              else {
                *(_DWORD *)v77 -= 2;
              }
            }
            CFTypeRef v74 = (WebCore::RegistrableDomain *)((char *)v74 + 8);
            v75 -= 8;
          }
          while (v75);
        }
        uint64_t v78 = *(unsigned int *)(v91 + 12);
        if (v78)
        {
          uint64_t v79 = *(WebCore::RegistrableDomain **)v91;
          uint64_t v80 = 8 * v78;
          do
          {
            WebCore::RegistrableDomain::uncheckedCreateFromHost(v79, &v92);
            WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v94, &v92, (uint64_t)buf);
            uint64_t v82 = v92;
            char v92 = 0;
            if (v82)
            {
              if (*(_DWORD *)v82 == 2) {
                WTF::StringImpl::destroy(v82, v81);
              }
              else {
                *(_DWORD *)v82 -= 2;
              }
            }
            uint64_t v79 = (WebCore::RegistrableDomain *)((char *)v79 + 8);
            v80 -= 8;
          }
          while (v80);
        }
        uint64_t v83 = *(unsigned int *)(a7 + 12);
        if (v83)
        {
          uint64_t v84 = *(WTF::StringImpl ***)a7;
          uint64_t v85 = 8 * v83;
          do
          {
            WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v94, v84++, (uint64_t)buf);
            v85 -= 8;
          }
          while (v85);
        }
        uint64_t v86 = v94;
        uint64_t v94 = 0;
        *(void *)int buf = v86;
        buf[8] = 1;
        atomic_fetch_add((atomic_uint *volatile)v17, 1u);
        int v87 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(void *)int v87 = &unk_1EE9C4330;
        *((void *)v87 + 1) = v17;
        char v92 = v87;
        (*(void (**)(unsigned int *, void, void, uint8_t *, WTF::StringImpl **))(*(void *)v20 + 216))(v20, 0, 0, buf, &v92);
        long long v89 = v92;
        char v92 = 0;
        if (v89) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v89 + 8))(v89);
        }
        if (buf[8] && *(void *)buf) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)buf, v88);
        }
        if (v94) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v94, v88);
        }
        return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v17);
      }
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v62 + 16), v64);
      goto LABEL_88;
    }
    if (v20) {
      goto LABEL_88;
    }
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v17);
  }
  *(_OWORD *)int buf = 0uLL;
  uint64_t v22 = *(unsigned int *)(a4 + 12);
  if (!v22)
  {
LABEL_22:
    (*(void (**)(unsigned int *, uint8_t *))(*(void *)v20 + 104))(v20, buf);
    uint64_t result = (unsigned int *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v30);
    goto LABEL_23;
  }
  if (!(v22 >> 29))
  {
    uint64_t v23 = WTF::fastMalloc((WTF *)(8 * v22));
    *(_DWORD *)&buf[8] = v22;
    *(void *)int buf = v23;
    uint64_t v24 = *(unsigned int *)(a4 + 12);
    if (v24)
    {
      uint64_t v25 = 0;
      uint64_t v26 = (_DWORD *)(*(void *)a4 + 24);
      char v27 = (_DWORD **)MEMORY[0x1E4F30980];
      while (1)
      {
        if (*v26)
        {
          uint64_t v28 = v27;
          if (*v26 != 1)
          {
LABEL_99:
            std::__throw_bad_variant_access[abi:sn180100]();
            goto LABEL_100;
          }
        }
        else
        {
          uint64_t v28 = (_DWORD **)(v26 - 4);
        }
        unsigned __int32 v29 = *v28;
        if (v29) {
          *v29 += 2;
        }
        *(void *)(v23 + 8 * v25) = v29;
        *(_DWORD *)&unsigned char buf[12] = v25 + 1;
        v26 += 8;
        if (v24 == ++v25) {
          goto LABEL_22;
        }
      }
    }
    goto LABEL_22;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(void *a1, uint64_t a2, int a3, unsigned int *a4, uint64_t *a5)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  uint64_t v124 = a2;
  int v10 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = a4[3];
    uint64_t v12 = (unsigned int *)a4[7];
    uint64_t v13 = a4[11];
    *(_DWORD *)int buf = 134218752;
    *(void *)&uint8_t buf[4] = a2;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v11;
    *(_WORD *)&unsigned char buf[22] = 2048;
    uint64_t v127 = v12;
    __int16 v128 = 2048;
    uint64_t v129 = v13;
    _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains started to delete and restrict data for session %llu - %zu domainsToDeleteAllCookiesFor, %zu domainsToDeleteAllButHttpOnlyCookiesFor, %zu domainsToDeleteAllScriptWrittenStorageFor", buf, 0x2Au);
  }
  *(void *)int buf = a2;
  uint64_t v14 = (unsigned int *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(a1 + 28, buf);
  char v123 = 2;
  uint64_t v15 = WTF::fastMalloc((WTF *)0x18);
  uint64_t v16 = *a5;
  *a5 = 0;
  uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v17 = &unk_1EE9C4358;
  v17[1] = v16;
  *(_DWORD *)uint64_t v15 = 1;
  *(void *)(v15 + 8) = v17;
  *(void *)(v15 + ++*(_DWORD *)(this + 16) = 0;
  uint64_t v121 = 0;
  unsigned int v122 = (atomic_uint *)v15;
  uint64_t v119 = 0;
  unsigned int v120 = 0;
  uint64_t v117 = 0;
  int v118 = 0;
  uint64_t v116 = 0;
  uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v114, (uint64_t)(a4 + 8));
  if (a3)
  {
    *(void *)int buf = a2;
    uint64_t result = (WTF::StringImpl *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(a1 + 29, buf);
    if (result)
    {
      WebCore::NetworkStorageSession::getHostnamesWithCookies();
      WebKit::filterForRegistrableDomains((uint64_t)buf, (uint64_t)a4, &v121);
      if (HIDWORD(v119)) {
        WTF::VectorDestructor<true,WTF::String>::destruct(v118, (WTF *)((char *)v118 + 8 * HIDWORD(v119)));
      }
      int v20 = v118;
      if (v118)
      {
        int v118 = 0;
        LODWORD(v119) = 0;
        WTF::fastFree(v20, v19);
      }
      int v118 = *(WTF **)buf;
      uint64_t v21 = *(void *)&buf[8];
      *(void *)int buf = 0;
      *(void *)&buf[8] = 0;
      uint64_t v119 = v21;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v19);
      atomic_fetch_add((atomic_uint *volatile)v15, 1u);
      char v112 = (WTF::StringImpl *)v15;
      uint64_t v22 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v22 = &unk_1EE9C43D0;
      uint64_t v23 = v112;
      char v112 = 0;
      v22[1] = v23;
      *(void *)int buf = v22;
      WebCore::NetworkStorageSession::deleteCookiesForHostnames();
      uint64_t v24 = *(void *)buf;
      *(void *)int buf = 0;
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      }
      WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)&v112);
      WebKit::filterForRegistrableDomains((uint64_t)buf, (uint64_t)(a4 + 8), &v121);
      if (HIDWORD(v117)) {
        WTF::VectorDestructor<true,WTF::String>::destruct(v116, (WTF *)((char *)v116 + 8 * HIDWORD(v117)));
      }
      uint64_t v26 = v116;
      if (v116)
      {
        uint64_t v116 = 0;
        LODWORD(v117) = 0;
        WTF::fastFree(v26, v25);
      }
      uint64_t v116 = *(WTF **)buf;
      uint64_t v27 = *(void *)&buf[8];
      *(void *)int buf = 0;
      *(void *)&buf[8] = 0;
      uint64_t v117 = v27;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v25);
      uint64_t v28 = (WTF::StringImpl *)v122;
      atomic_fetch_add(v122, 1u);
      char v112 = v28;
      unsigned __int32 v29 = (void *)WTF::fastMalloc((WTF *)0x10);
      *unsigned __int32 v29 = &unk_1EE9C43F8;
      uint64_t v30 = v112;
      char v112 = 0;
      v29[1] = v30;
      *(void *)int buf = v29;
      WebCore::NetworkStorageSession::deleteCookiesForHostnames();
      uint64_t v31 = *(void *)buf;
      *(void *)int buf = 0;
      if (v31) {
        (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
      }
      WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)&v112);
      if (HIDWORD(v119))
      {
        uint64_t v32 = v118;
        char v33 = (uint64_t *)(v122 + 4);
        uint64_t v34 = 8 * HIDWORD(v119);
        do
        {
          WebCore::RegistrableDomain::uncheckedCreateFromHost(v32, &v112);
          WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v33, &v112, (uint64_t)buf);
          uint64_t v36 = v112;
          char v112 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2) {
              WTF::StringImpl::destroy(v36, v35);
            }
            else {
              *(_DWORD *)v36 -= 2;
            }
          }
          uint64_t v32 = (WTF *)((char *)v32 + 8);
          v34 -= 8;
        }
        while (v34);
      }
      WebKit::filterForRegistrableDomains((uint64_t)buf, (uint64_t)(a4 + 4), &v121);
      if (HIDWORD(v119)) {
        WTF::VectorDestructor<true,WTF::String>::destruct(v118, (WTF *)((char *)v118 + 8 * HIDWORD(v119)));
      }
      char v38 = v118;
      if (v118)
      {
        int v118 = 0;
        LODWORD(v119) = 0;
        WTF::fastFree(v38, v37);
      }
      int v118 = *(WTF **)buf;
      uint64_t v39 = *(void *)&buf[8];
      *(void *)int buf = 0;
      *(void *)&buf[8] = 0;
      uint64_t v119 = v39;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v37);
      uint64_t v40 = (WTF::StringImpl *)v122;
      atomic_fetch_add(v122, 1u);
      char v112 = v40;
      uint64_t v41 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v41 = &unk_1EE9C4420;
      uint64_t v42 = v112;
      char v112 = 0;
      v41[1] = v42;
      *(void *)int buf = v41;
      WebCore::NetworkStorageSession::deleteCookiesForHostnames();
      uint64_t v43 = *(void *)buf;
      *(void *)int buf = 0;
      if (v43) {
        (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
      }
      uint64_t result = WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)&v112);
      if (HIDWORD(v119))
      {
        uint64_t v44 = v118;
        unsigned int v45 = (uint64_t *)(v122 + 4);
        uint64_t v46 = 8 * HIDWORD(v119);
        do
        {
          WebCore::RegistrableDomain::uncheckedCreateFromHost(v44, &v112);
          WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v45, &v112, (uint64_t)buf);
          uint64_t result = v112;
          char v112 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v47);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
          uint64_t v44 = (WTF *)((char *)v44 + 8);
          v46 -= 8;
        }
        while (v46);
      }
    }
  }
  char v112 = 0;
  uint64_t v113 = 0;
  if ((a3 & 0x200) != 0)
  {
    uint64_t v48 = v124;
    WebKit::NetworkProcess::hostNamesWithHSTSCache((uint64_t)a1, v124, (uint64_t *)buf);
    uint64_t v50 = *(WTF::StringImpl ***)buf;
    *(void *)int buf = 0;
    uint64_t v51 = v120;
    unsigned int v120 = v50;
    if (v51)
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v51, v49);
      if (*(void *)buf) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)buf, v110);
      }
    }
    WebKit::filterForRegistrableDomains((uint64_t)buf, (uint64_t)&v114, &v120);
    if (HIDWORD(v113)) {
      WTF::VectorDestructor<true,WTF::String>::destruct(v112, (WTF::StringImpl *)((char *)v112 + 8 * HIDWORD(v113)));
    }
    uint64_t v53 = v112;
    if (v112)
    {
      char v112 = 0;
      LODWORD(v113) = 0;
      WTF::fastFree(v53, v52);
    }
    char v112 = *(WTF::StringImpl **)buf;
    uint64_t v54 = *(void *)&buf[8];
    *(void *)int buf = 0;
    *(void *)&buf[8] = 0;
    uint64_t v113 = v54;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v52);
    if (HIDWORD(v113))
    {
      uint64_t v55 = v112;
      uint64_t v56 = (uint64_t *)(v122 + 4);
      uint64_t v57 = 8 * HIDWORD(v113);
      do
      {
        WebCore::RegistrableDomain::uncheckedCreateFromHost(v55, &v125);
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v56, &v125, (uint64_t)buf);
        uint64_t v59 = v125;
        uint64_t v125 = 0;
        if (v59)
        {
          if (*(_DWORD *)v59 == 2) {
            WTF::StringImpl::destroy(v59, v58);
          }
          else {
            *(_DWORD *)v59 -= 2;
          }
        }
        uint64_t v55 = (WTF::StringImpl *)((char *)v55 + 8);
        v57 -= 8;
      }
      while (v57);
    }
    uint64_t result = (WTF::StringImpl *)WebKit::NetworkProcess::deleteHSTSCacheForHostNames((uint64_t)a1, v48, (uint64_t)&v112);
  }
  if ((a3 & 0x40000) != 0 && v14)
  {
    *(void *)int buf = 0;
    *(void *)&buf[8] = 0;
    unsigned int v60 = v115;
    if (v115)
    {
      if (v115 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      char v61 = (void *)WTF::fastMalloc((WTF *)(8 * v115));
      *(_DWORD *)&buf[8] = v60;
      *(void *)int buf = v61;
      unsigned int v62 = v115;
      if (v115)
      {
        uint64_t v63 = v114;
        uint64_t v64 = v115;
        do
        {
          uint64_t v65 = *v63;
          if (*v63) {
            *v65 += 2;
          }
          *v61++ = v65;
          ++v63;
          --v64;
        }
        while (v64);
        *(_DWORD *)&unsigned char buf[12] = v62;
      }
    }
    (*(void (**)(unsigned int *, unsigned char *))(*(void *)v14 + 104))(v14, buf);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v66);
  }
  if ((a3 & 0x2000) != 0)
  {
    *(void *)int buf = v124;
    uint64_t v67 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(a1 + 29, buf);
    if (v67)
    {
      int v68 = (WebCore::CredentialStorage *)(v67 + 96);
      WebCore::CredentialStorage::originsWithCredentials((uint64_t *)&v125, (WebCore::CredentialStorage *)(v67 + 96));
      WebKit::filterForRegistrableDomains((uint64_t)buf, (uint64_t *)&v125, (uint64_t)&v114, (uint64_t *)v122 + 2);
      if (*(_DWORD *)&buf[12])
      {
        int v70 = *(const WebCore::SecurityOriginData **)buf;
        uint64_t v71 = 32 * *(unsigned int *)&buf[12];
        do
        {
          WebCore::CredentialStorage::removeCredentialsWithOrigin(v68, v70);
          int v70 = (const WebCore::SecurityOriginData *)((char *)v70 + 32);
          v71 -= 32;
        }
        while (v71);
      }
      WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v69);
      if (v125) {
        WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable((uint64_t)v125, v72);
      }
    }
    if (!v14) {
      goto LABEL_101;
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, unsigned int *))(*(void *)v14 + 120))(&v125, v14);
    WebKit::filterForRegistrableDomains((uint64_t)buf, (uint64_t *)&v125, (uint64_t)&v114, (uint64_t *)v122 + 2);
    (*(void (**)(unsigned int *, unsigned char *))(*(void *)v14 + 128))(v14, buf);
    WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v73);
    if (v125) {
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable((uint64_t)v125, v74);
    }
    if ((a3 & 0x8000) != 0) {
      goto LABEL_78;
    }
    goto LABEL_76;
  }
  if ((a3 & 0x8000) == 0)
  {
LABEL_76:
    if ((a3 & 0x4000) == 0 || !v14)
    {
LABEL_89:
      if ((a3 & 2) != 0)
      {
        if (v14)
        {
          uint64_t v85 = (_DWORD *)*((void *)v14 + 77);
          if (v85)
          {
            uint64_t v86 = v122;
            atomic_fetch_add(v122, 1u);
            int v87 = (void *)WTF::fastMalloc((WTF *)0x10);
            *int v87 = &unk_1EE9C44C0;
            v87[1] = v86;
            uint64_t v125 = 0;
            *(void *)int buf = v87;
            WebKit::NetworkCache::Cache::deleteDataForRegistrableDomains(v85, (uint64_t)&v114, (uint64_t *)buf);
            uint64_t v88 = *(void *)buf;
            *(void *)int buf = 0;
            if (v88) {
              (*(void (**)(uint64_t))(*(void *)v88 + 8))(v88);
            }
            WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)&v125);
          }
        }
      }
      int v89 = a3;
      if ((*(void *)&a3 & 0x8C0B0) != 0 && v14)
      {
        uint64_t v90 = *((void *)v14 + 131);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v90 + 16));
        uint64_t v91 = v122;
        atomic_fetch_add(v122, 1u);
        char v92 = (void *)WTF::fastMalloc((WTF *)0x10);
        *char v92 = &unk_1EE9C44E8;
        v92[1] = v91;
        uint64_t v125 = 0;
        *(void *)int buf = v92;
        WebKit::NetworkStorageManager::deleteDataForRegistrableDomains(v90, a3, (uint64_t *)&v114, (uint64_t *)buf);
        uint64_t v93 = *(void *)buf;
        *(void *)int buf = 0;
        if (v93) {
          (*(void (**)(uint64_t))(*(void *)v93 + 8))(v93);
        }
        WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)&v125);
        if (v90) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v90 + 16), v94);
        }
      }
      goto LABEL_102;
    }
LABEL_78:
    if (*((unsigned char *)v14 + 768))
    {
      uint64_t v75 = *((void *)v14 + 94);
      if (v75)
      {
        if (*(_DWORD *)(v75 + 4))
        {
          WebKit::NetworkSession::ensureSWServer((WebKit::NetworkSession *)v14);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)buf, (uint64_t)&v114);
          long long v76 = v122;
          atomic_fetch_add(v122, 1u);
          *(void *)&uint8_t buf[16] = v76;
          WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v14 + 2, (uint64_t)v14);
          int v77 = (atomic_uint *)*((void *)v14 + 1);
          if (v77) {
            atomic_fetch_add(v77, 1u);
          }
          uint64_t v127 = (unsigned int *)v77;
          uint64_t v78 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
          *(void *)uint64_t v78 = &unk_1EE9C4448;
          *((void *)v78 + 1) = *(void *)buf;
          uint64_t v79 = *(void *)&buf[8];
          *(void *)int buf = 0;
          *(void *)&buf[8] = 0;
          *((void *)v78 + objc_destroyWeak(this + 2) = v79;
          *((void *)v78 + 3) = *(void *)&buf[16];
          uint64_t v80 = v127;
          *(void *)&uint8_t buf[16] = 0;
          uint64_t v127 = 0;
          *((void *)v78 + 4) = v80;
          uint64_t v125 = v78;
          WebCore::SWServer::getOriginsWithRegistrations();
          uint64_t v82 = v125;
          uint64_t v125 = 0;
          if (v82) {
            (*(void (**)(WTF::StringImpl *))(*(void *)v82 + 8))(v82);
          }
          uint64_t v83 = v127;
          uint64_t v127 = 0;
          if (v83 && atomic_fetch_add((atomic_uint *volatile)v83, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v83);
            WTF::fastFree((WTF *)v83, v81);
          }
          WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)&buf[16]);
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v84);
        }
      }
    }
    goto LABEL_89;
  }
  if (v14) {
    goto LABEL_78;
  }
LABEL_101:
  int v89 = a3;
LABEL_102:
  int v111 = WebKit::WebsiteData::filter(v89, 1);
  if (v111 && v115)
  {
    int v96 = v122;
    atomic_fetch_add(v122, 1u);
    uint64_t v97 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v97 = &unk_1EE9C4510;
    v97[1] = v96;
    *(void *)int buf = 0;
    WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)buf);
    long long v98 = (os_unfair_lock_s *)a1[5];
    long long v99 = (void *)WTF::fastMalloc((WTF *)0x10);
    *long long v99 = &unk_1EE9C4538;
    v99[1] = v97;
    uint64_t v100 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    long long v101 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)long long v101 = 321;
    *((void *)v101 + 1) = 0;
    *((void *)v101 + 66) = (char *)v101 + 16;
    *((void *)v101 + 67) = 512;
    *((void *)v101 + 68) = 0;
    *((void *)v101 + 70) = 0;
    *((void *)v101 + 69) = 0;
    IPC::Encoder::encodeHeader(v101);
    uint64_t v125 = v101;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v101, &v124);
    IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(v101, &v111);
    IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebsiteDataFetchOption>,void>::encode<IPC::Encoder>(v101, &v123);
    IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v101, (uint64_t)&v114);
    *(void *)int buf = v99;
    *(void *)&buf[8] = v100;
    IPC::Connection::sendMessageWithAsyncReply(v98, &v125, (uint64_t *)buf, 0, 0);
    uint64_t v102 = *(void *)buf;
    *(void *)int buf = 0;
    if (v102) {
      (*(void (**)(uint64_t))(*(void *)v102 + 8))(v102);
    }
    uint64_t v103 = v125;
    uint64_t v125 = 0;
    if (v103)
    {
      IPC::Encoder::~Encoder(v103, v95);
      WTF::fastFree(v108, v109);
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v112, v95);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v114, v104);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v116, v105);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v118, v106);
  if (v120) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v120, v107);
  }
  if (v121) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v121, v107);
  }
  return WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)&v122);
}

WTF::StringImpl *WebKit::filterForRegistrableDomains(uint64_t a1, uint64_t a2, void **a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a3);
  uint64_t v7 = result;
  uint64_t v9 = v8;
  if (*a3) {
    uint64_t v10 = (uint64_t)&(*a3)[*((unsigned int *)*a3 - 1)];
  }
  else {
    uint64_t v10 = 0;
  }
  if ((WTF::StringImpl *)v10 != result)
  {
    do
    {
      WebCore::RegistrableDomain::uncheckedCreateFromHost(v7, &v17);
      long long v18 = &v17;
      uint64_t v13 = WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<unsigned long WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::RegistrableDomain>(WebCore::RegistrableDomain const&)::{lambda(WebCore::RegistrableDomain&)#1}>(a2, &v18, v11);
      uint64_t result = v17;
      uint64_t v17 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      if (v13 != -1)
      {
        uint64_t v14 = *(unsigned int *)(a1 + 12);
        if (v14 == *(_DWORD *)(a1 + 8))
        {
          uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>(a1, (unint64_t)v7);
        }
        else
        {
          uint64_t v15 = *(void *)a1;
          uint64_t v16 = *(_DWORD **)v7;
          if (*(void *)v7) {
            *v16 += 2;
          }
          *(void *)(v15 + 8 * v14) = v16;
          *(_DWORD *)(a1 + 1objc_destroyWeak(this + 2) = v14 + 1;
        }
      }
      while (1)
      {
        uint64_t v7 = (WebCore::RegistrableDomain *)((char *)v7 + 8);
        if (v7 == v9) {
          break;
        }
        if ((unint64_t)(*(void *)v7 + 1) > 1) {
          goto LABEL_18;
        }
      }
      uint64_t v7 = v9;
LABEL_18:
      ;
    }
    while (v7 != (WebCore::RegistrableDomain *)v10);
  }
  return result;
}

WTF::StringImpl *WebKit::filterForRegistrableDomains(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t result = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(a2);
  uint64_t v9 = result;
  uint64_t v11 = v10;
  if (*a2) {
    uint64_t v12 = *a2 + 32 * *(unsigned int *)(*a2 - 4);
  }
  else {
    uint64_t v12 = 0;
  }
  if ((WTF::StringImpl *)v12 != result)
  {
    uint64_t v13 = (WebCore::RegistrableDomain *)MEMORY[0x1E4F30980];
    do
    {
      int v14 = *((_DWORD *)v9 + 6);
      if (v14)
      {
        uint64_t v15 = v13;
        if (v14 != 1) {
          return (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
        }
      }
      else
      {
        uint64_t v15 = (WTF::StringImpl *)((char *)v9 + 8);
      }
      WebCore::RegistrableDomain::uncheckedCreateFromHost(v15, &v21);
      v20[0] = &v21;
      if (WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<unsigned long WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::RegistrableDomain>(WebCore::RegistrableDomain const&)::{lambda(WebCore::RegistrableDomain&)#1}>(a3, v20, v16) != -1)
      {
        uint64_t v18 = *(unsigned int *)(a1 + 12);
        if (v18 == *(_DWORD *)(a1 + 8))
        {
          WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData const&>(a1, (unint64_t)v9);
        }
        else
        {
          uint64_t v19 = *(void *)a1 + 32 * v18;
          *(unsigned char *)uint64_t v19 = 0;
          *(_DWORD *)(v19 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v19, (uint64_t)v9);
          ++*(_DWORD *)(a1 + 12);
        }
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(a4, &v21, (uint64_t)v20);
      }
      uint64_t result = v21;
      uint64_t v21 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      while (1)
      {
        uint64_t v9 = (WTF::StringImpl *)((char *)v9 + 32);
        if (v9 == v11) {
          break;
        }
        uint64_t result = (WTF::StringImpl *)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v9);
        if (!result) {
          goto LABEL_20;
        }
      }
      uint64_t v9 = v11;
LABEL_20:
      ;
    }
    while (v9 != (WTF::StringImpl *)v12);
  }
  return result;
}

WTF::RunLoop *WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref(WTF::RunLoop *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v2);
    WTF::RunLoop::main(this);
    long long v8 = *(_OWORD *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    *(void *)(v2 + ++*(_DWORD *)(this + 16) = 0;
    uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v4 = &unk_1EE9C43A8;
    *(_OWORD *)(v4 + 8) = v8;
    uint64_t v9 = v4;
    WTF::RunLoop::dispatch();
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    long long v6 = *(WTF::StringImpl ***)(v2 + 16);
    if (v6) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v5);
    }
    uint64_t v7 = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    WTF::fastFree((WTF *)v2, v5);
  }
  return this;
}

uint64_t WebKit::NetworkProcess::deleteCookiesForTesting(void *a1, uint64_t a2, unint64_t a3, int a4, uint64_t *a5)
{
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  if (a4) {
    long long v8 = &v17;
  }
  else {
    long long v8 = &v18;
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)v8, a3);
  uint64_t v9 = *a5;
  *a5 = 0;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v10 = &unk_1EE9C4560;
  v10[1] = v9;
  uint64_t v16 = v10;
  WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(a1, a2, 1, (unsigned int *)&v17, (uint64_t *)&v16);
  if (v16) {
    (*(void (**)(void *))(*v16 + 8))(v16);
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v11);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v12);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v13);
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v14);
}

WTF::RunLoop *WebKit::NetworkProcess::registrableDomainsWithWebsiteData(uint64_t a1, WTF::StringImpl **a2, int a3, uint64_t *a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  v54[0] = a2;
  long long v8 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), v54);
  uint64_t v9 = WTF::fastMalloc((WTF *)0x38);
  uint64_t v10 = *a4;
  *a4 = 0;
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v11 = &unk_1EE9C4588;
  v11[1] = v10;
  *(_DWORD *)uint64_t v9 = 1;
  *(void *)(v9 + 8) = v11;
  *(void *)(v9 + 48) = 0;
  *(_OWORD *)(v9 + ++*(_DWORD *)(this + 16) = 0u;
  *(_OWORD *)(v9 + 3objc_destroyWeak(this + 2) = 0u;
  uint64_t v46 = (atomic_uint *)v9;
  if (a3)
  {
    v54[0] = a2;
    if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 232), v54))
    {
      WebCore::NetworkStorageSession::getHostnamesWithCookies();
    }
  }
  if ((a3 & 0x200) != 0)
  {
    WebKit::NetworkProcess::hostNamesWithHSTSCache(a1, (uint64_t)a2, (uint64_t *)v54);
    uint64_t v13 = v54[0];
    v54[0] = 0;
    int v14 = *(WTF::StringImpl ***)(v9 + 40);
    *(void *)(v9 + 40) = v13;
    if (v14)
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, v12);
      if (v54[0]) {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v54[0], v44);
      }
    }
  }
  if ((a3 & 0x2000) != 0)
  {
    v54[0] = a2;
    uint64_t v15 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 232), v54);
    if (v15)
    {
      WebCore::CredentialStorage::originsWithCredentials(v50, (WebCore::CredentialStorage *)(v15 + 96));
      long long v17 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(v50);
      long long v18 = v16;
      uint64_t v19 = v50[0];
      if (v50[0]) {
        uint64_t v20 = v50[0] + 32 * *(unsigned int *)(v50[0] - 4);
      }
      else {
        uint64_t v20 = 0;
      }
      if ((WebCore::SecurityOriginData *)v20 != v17)
      {
        do
        {
          uint64_t v21 = v46;
          v52[0] = 0;
          int v53 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v52, (uint64_t)v17);
          LOBYTE(v54[0]) = 0;
          int v55 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v54, (uint64_t)v52);
          LODWORD(v56) = 0x2000;
          *((void *)&v56 + 1) = 0;
          unsigned __int32 v22 = v21[7];
          if (v22 == v21[6])
          {
            WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>((uint64_t)(v21 + 4), (unint64_t)v54);
          }
          else
          {
            uint64_t v23 = *((void *)v21 + 2) + 48 * v22;
            *(unsigned char *)uint64_t v23 = 0;
            *(_DWORD *)(v23 + 24) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v23, (uint64_t)v54);
            *(_OWORD *)(v23 + 3objc_destroyWeak(this + 2) = v56;
            ++v21[7];
          }
          if (v55 != -1) {
            ((void (*)(uint64_t *, WTF::StringImpl ***))off_1EE9C39D0[v55])(&v45, v54);
          }
          int v55 = -1;
          if (v53 != -1) {
            ((void (*)(uint64_t *, unsigned char *))off_1EE9C39D0[v53])(&v45, v52);
          }
          int v53 = -1;
          while (1)
          {
            long long v17 = (WebCore::SecurityOriginData *)((char *)v17 + 32);
            if (v17 == v18) {
              break;
            }
            if (!WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v17)) {
              goto LABEL_23;
            }
          }
          long long v17 = v18;
LABEL_23:
          ;
        }
        while (v17 != (WebCore::SecurityOriginData *)v20);
        uint64_t v19 = v50[0];
      }
      if (v19) {
        WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v19, v16);
      }
    }
    if (!v8) {
      return WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)&v46);
    }
    (*(void (**)(uint64_t *__return_ptr, WebKit::NetworkSession *))(*(void *)v8 + 120))(&v45, v8);
    uint64_t v25 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(&v45);
    uint64_t v26 = v24;
    uint64_t v27 = v45;
    if (v45) {
      uint64_t v28 = (WebCore::SecurityOriginData *)(v45 + 32 * *(unsigned int *)(v45 - 4));
    }
    else {
      uint64_t v28 = 0;
    }
    if (v28 != v25)
    {
      do
      {
        LOBYTE(v50[0]) = 0;
        int v51 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v50, (uint64_t)v25);
        unsigned __int32 v29 = v46;
        v48[0] = 0;
        int v49 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v48, (uint64_t)v50);
        LOBYTE(v54[0]) = 0;
        int v55 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v54, (uint64_t)v48);
        LODWORD(v56) = 0x2000;
        *((void *)&v56 + 1) = 0;
        unsigned __int32 v30 = v29[7];
        if (v30 == v29[6])
        {
          WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>((uint64_t)(v29 + 4), (unint64_t)v54);
        }
        else
        {
          uint64_t v31 = *((void *)v29 + 2) + 48 * v30;
          *(unsigned char *)uint64_t v31 = 0;
          *(_DWORD *)(v31 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v31, (uint64_t)v54);
          *(_OWORD *)(v31 + 3objc_destroyWeak(this + 2) = v56;
          ++v29[7];
        }
        if (v55 != -1) {
          ((void (*)(char *, WTF::StringImpl ***))off_1EE9C39D0[v55])(&v47, v54);
        }
        int v55 = -1;
        if (v49 != -1) {
          ((void (*)(char *, unsigned char *))off_1EE9C39D0[v49])(&v47, v48);
        }
        int v49 = -1;
        if (v51 != -1) {
          ((void (*)(WTF::StringImpl ***, uint64_t *))off_1EE9C39D0[v51])(v54, v50);
        }
        while (1)
        {
          uint64_t v25 = (WebCore::SecurityOriginData *)((char *)v25 + 32);
          if (v25 == v26) {
            break;
          }
          if (!WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v25)) {
            goto LABEL_44;
          }
        }
        uint64_t v25 = v26;
LABEL_44:
        ;
      }
      while (v25 != v28);
      uint64_t v27 = v45;
    }
    if (v27) {
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v27, v24);
    }
  }
  if ((a3 & 0x4000) != 0)
  {
    if (v8)
    {
      if (*((unsigned char *)v8 + 768))
      {
        uint64_t v32 = *((void *)v8 + 94);
        if (v32)
        {
          if (*(_DWORD *)(v32 + 4))
          {
            WebKit::NetworkSession::ensureSWServer(v8);
            char v33 = v46;
            atomic_fetch_add(v46, 1u);
            uint64_t v34 = WTF::fastMalloc((WTF *)0x10);
            *(void *)uint64_t v34 = &unk_1EE9C4600;
            *(void *)(v34 + 8) = v33;
            v50[0] = 0;
            v54[0] = (WTF::StringImpl **)v34;
            WebCore::SWServer::getOriginsWithRegistrations();
            uint64_t v35 = v54[0];
            v54[0] = 0;
            if (v35) {
              (*((void (**)(WTF::StringImpl **))*v35 + 1))(v35);
            }
            WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)v50);
          }
        }
      }
    }
  }
  if ((a3 & 2) != 0 && v8)
  {
    uint64_t v36 = (_DWORD *)*((void *)v8 + 77);
    if (v36)
    {
      uint64_t v37 = v46;
      atomic_fetch_add(v46, 1u);
      uint64_t v38 = WTF::fastMalloc((WTF *)0x10);
      *(void *)uint64_t v38 = &unk_1EE9C4628;
      *(void *)(v38 + 8) = v37;
      v50[0] = 0;
      v54[0] = (WTF::StringImpl **)v38;
      WebKit::NetworkCache::Cache::fetchData(v36, 0, (uint64_t *)v54);
      if (v54[0]) {
        (*((void (**)(WTF::StringImpl **))*v54[0] + 1))(v54[0]);
      }
      WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)v50);
    }
  }
  else if (!v8)
  {
    return WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)&v46);
  }
  uint64_t v39 = *((void *)v8 + 131);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v39 + 16));
  uint64_t v40 = v46;
  atomic_fetch_add(v46, 1u);
  uint64_t v41 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v41 = &unk_1EE9C4650;
  *(void *)(v41 + 8) = v40;
  v50[0] = 0;
  v54[0] = (WTF::StringImpl **)v41;
  WebKit::NetworkStorageManager::fetchData(v39, a3, 0, (uint64_t *)v54);
  if (v54[0]) {
    (*((void (**)(WTF::StringImpl **))*v54[0] + 1))(v54[0]);
  }
  WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)v50);
  if (v39) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v39 + 16), v42);
  }
  return WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)&v46);
}

WTF::RunLoop *WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref(WTF::RunLoop *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v2);
    WTF::RunLoop::main(this);
    uint64_t v4 = *(void *)(v2 + 48);
    *(void *)(v2 + 48) = 0;
    uint64_t v5 = *(void *)(v2 + 24);
    *(void *)(v2 + 24) = 0;
    long long v6 = *(_OWORD *)(v2 + 8);
    *(_OWORD *)(v2 + 8) = 0u;
    long long v16 = v6;
    long long v17 = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v2 + 3objc_destroyWeak(this + 2) = 0u;
    uint64_t v7 = WTF::fastMalloc((WTF *)0x38);
    *(void *)uint64_t v7 = &unk_1EE9C45D8;
    *(_OWORD *)(v7 + 8) = v16;
    long long v18 = 0u;
    uint64_t v19 = 0;
    *(void *)(v7 + 24) = v5;
    *(_OWORD *)(v7 + 3objc_destroyWeak(this + 2) = v17;
    long long v20 = 0u;
    uint64_t v21 = 0;
    *(void *)(v7 + 48) = v4;
    uint64_t v22 = v7;
    WTF::RunLoop::dispatch();
    uint64_t v9 = v22;
    uint64_t v22 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18 + 8, v8);
    if ((void)v18) {
      (*(void (**)(void))(*(void *)v18 + 8))(v18);
    }
    uint64_t v11 = *(WTF::StringImpl ***)(v2 + 48);
    if (v11) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v10);
    }
    uint64_t v12 = *(WTF::StringImpl ***)(v2 + 40);
    if (v12) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v10);
    }
    uint64_t v13 = *(WTF::StringImpl ***)(v2 + 32);
    if (v13) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v10);
    }
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 16, v10);
    uint64_t v15 = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    WTF::fastFree((WTF *)v2, v14);
  }
  return this;
}

unsigned int *WebKit::NetworkProcess::closeITPDatabase(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v7);
  if (v4) {
    return WebKit::NetworkSession::destroyResourceLoadStatistics(v4, a3);
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
}

WTF *WebKit::NetworkProcess::downloadRequest(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4, WebCore::SecurityOriginData *a5, __int16 a6, WTF::StringImpl **a7)
{
  LOBYTE(v8) = 0;
  char v9 = 0;
  return WebKit::DownloadManager::startDownload(a1 + 160, a2, a3, a4, a5, a6, a7, 0, &v8, 0, 0, 0, 0);
}

uint64_t WebKit::NetworkProcess::resumeDownload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, WTF::FileSystemImpl *a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10)
{
  return WebKit::DownloadManager::resumeDownload(a1 + 160, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

unsigned int *WebKit::NetworkProcess::cancelDownload(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebKit::DownloadManager::cancelDownload(a1 + 160, a2, a3);
}

void WebKit::NetworkProcess::publishDownloadProgress(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF *a5, uint64_t a6, uint64_t a7, WTF *a8)
{
}

uint64_t WebKit::NetworkProcess::dataTaskWithRequest(uint64_t a1, uint64_t a2, WTF::RefCountedBase *a3, uint64_t a4, uint64_t a5, WTF::RefCountedBase **a6, uint64_t a7)
{
  uint64_t v13 = *a6;
  *a6 = 0;
  long long v17 = v13;
  WebCore::ResourceRequestBase::setHTTPBody();
  int v14 = v17;
  long long v17 = 0;
  if (v14) {
    WTF::RefCounted<WebCore::FormData>::deref(v14);
  }
  long long v17 = a3;
  uint64_t v15 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v17);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 224))(v15, a2, a4, a5, a7);
}

uint64_t WebKit::NetworkProcess::cancelDataTask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v9 = a3;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v9);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 232))(v6, a2);
  }
  uint64_t v7 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
}

uint64_t WebKit::NetworkProcess::setCacheModelSynchronouslyForTesting(uint64_t a1, int a2, uint64_t *a3)
{
  WebKit::NetworkProcess::setCacheModel(a1, a2);
  uint64_t v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t WebKit::NetworkProcess::allowTLSCertificateChainForLocalPCMTesting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2;
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v5);
  if (result) {
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(result + 160) + 152))(*(void *)(result + 160), a3);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::logDiagnosticMessage(WTF *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v13 = a2;
  if (!a5 || (uint64_t result = WTF::cryptographicallyRandomUnitInterval(a1), v9 <= 0.05))
  {
    uint64_t v10 = *((void *)a1 + 5);
    v11[0] = &v13;
    v11[1] = a3;
    CFTypeRef v11[2] = a4;
    char v12 = 0;
    return IPC::Connection::send<Messages::NetworkProcessProxy::LogDiagnosticMessage>(v10, (uint64_t)v11, 0, 0, 0);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::NetworkProcessProxy::LogDiagnosticMessage>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 333;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  long long v17 = v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,WTF::String const&,WebCore::ShouldSample>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,WTF::String const&,WebCore::ShouldSample>,0ul,1ul,2ul,3ul>(v10, a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  long long v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t WebKit::NetworkProcess::terminate(WebKit::NetworkProcess *this)
{
  IPC::Connection::invalidate(*((void *)this + 5));
  uint64_t v2 = *(uint64_t (**)(WebKit::NetworkProcess *))(*(void *)this + 120);

  return v2(this);
}

unsigned int *WebKit::NetworkProcess::processWillSuspendImminentlyForTestingSync(WTF::MonotonicTime *a1, uint64_t *a2)
{
  WTF::MonotonicTime::now(a1);

  return WebKit::NetworkProcess::prepareToSuspend((uint64_t)a1, 1, a2, v4);
}

unsigned int *WebKit::NetworkProcess::prepareToSuspend(uint64_t a1, int a2, uint64_t *a3, double a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  double v9 = v8;
  uint64_t v10 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    double v11 = a4 - v9;
    *(_DWORD *)int buf = 134218496;
    if (a4 <= v9) {
      double v11 = 0.0;
    }
    *(void *)&uint8_t buf[4] = a1;
    __int16 v34 = 1024;
    int v35 = a2;
    __int16 v36 = 2048;
    double v37 = v11;
    _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcess::prepareToSuspend(), isSuspensionImminent=%d, remainingRunTime=%fs", buf, 0x1Cu);
  }
  *(unsigned char *)(a1 + 411) = 1;
  WebKit::NetworkProcess::lowMemoryHandler(a1, 1);
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v13 = &unk_1EE9C46C8;
  v13[1] = a1;
  uint64_t v13[2] = v12;
  uint64_t v14 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v14 = 1;
  *(void *)(v14 + 8) = v13;
  *(void *)int buf = v14;
  atomic_fetch_add((atomic_uint *volatile)v14, 1u);
  uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v15 = &unk_1EE9C46F0;
  v15[1] = v14;
  uint64_t v32 = v15;
  WebKit::WebResourceLoadStatisticsStore::suspend();
  uint64_t v16 = (uint64_t)v32;
  uint64_t v32 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *(void *)buf;
  if (*(void *)buf) {
    atomic_fetch_add(*(atomic_uint *volatile *)buf, 1u);
  }
  long long v18 = (void *)WTF::fastMalloc((WTF *)0x10);
  *long long v18 = &unk_1EE9C4718;
  v18[1] = v17;
  uint64_t v32 = v18;
  WebKit::PCM::PersistentStore::prepareForProcessToSuspend();
  uint64_t v19 = (uint64_t)v32;
  uint64_t v32 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  long long v20 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v20 = &unk_1EE9C4740;
  v20[1] = a1;
  void v20[2] = buf;
  uint64_t v32 = v20;
  WebKit::NetworkProcess::forEachNetworkSession(a1, &v32);
  (*(void (**)(void *))(*v20 + 8))(v20);
  uint64_t v21 = *(void **)(a1 + 392);
  uint64_t v22 = WTF::HashTable<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>>::begin(v21);
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if (v21) {
    uint64_t v26 = &v21[*((unsigned int *)v21 - 1)];
  }
  else {
    uint64_t v26 = 0;
  }
  if (v26 != v22)
  {
    do
    {
      uint64_t v27 = *v23;
      uint64_t v28 = *(void *)buf;
      if (*(void *)buf) {
        atomic_fetch_add(*(atomic_uint *volatile *)buf, 1u);
      }
      unsigned __int32 v29 = (void *)WTF::fastMalloc((WTF *)0x10);
      *unsigned __int32 v29 = &unk_1EE9C47B8;
      v29[1] = v28;
      uint64_t v32 = v29;
      WebKit::NetworkStorageManager::suspend(v27, (uint64_t *)&v32);
      uint64_t v30 = (uint64_t)v32;
      uint64_t v32 = 0;
      if (v30) {
        (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
      }
      while (++v23 != v25)
      {
        if ((unint64_t)(*v23 + 1) > 1) {
          goto LABEL_23;
        }
      }
      uint64_t v23 = v25;
LABEL_23:
      ;
    }
    while (v23 != v26);
  }
  uint64_t result = *(unsigned int **)buf;
  *(void *)int buf = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

void WebKit::NetworkProcess::terminateRemoteWorkerContextConnectionWhenPossible(uint64_t a1, int a2, uint64_t a3, WTF::ASCIICaseInsensitiveHash **a4, uint64_t a5)
{
  uint64_t v10 = a3;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v8)
  {
    if (a2 == 2)
    {
      uint64_t v9 = *(void *)(v8 + 800);
      if (v9) {
        WebKit::WebSharedWorkerServer::terminateContextConnectionWhenPossible(v9, a4, a5);
      }
    }
    else if (a2 == 1)
    {
      if (*(void *)(v8 + 776)) {
        WebCore::SWServer::terminateContextConnectionWhenPossible();
      }
    }
  }
}

uint64_t *WebKit::NetworkProcess::processDidResume(WebKit::NetworkProcess *this, int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  double v4 = qword_1EB358348;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    *(_DWORD *)uint64_t v14 = 134218240;
    *(void *)&v14[4] = this;
    __int16 v15 = 1024;
    int v16 = a2;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcess::processDidResume() forForegroundActivity=%d", v14, 0x12u);
  }
  *((unsigned char *)this + 411) = 0;
  uint64_t v6 = (WebKit::PCM::PersistentStore *)WebKit::WebResourceLoadStatisticsStore::resume((WebKit::WebResourceLoadStatisticsStore *)v5);
  WebKit::PCM::PersistentStore::processDidResume(v6);
  uint64_t v7 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v7 = &unk_1EE9C47E0;
  *(void *)uint64_t v14 = v7;
  WebKit::NetworkProcess::forEachNetworkSession((uint64_t)this, v14);
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  uint64_t v8 = (uint64_t *)*((void *)this + 49);
  uint64_t result = WTF::HashTable<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>>::begin(v8);
  uint64_t v10 = result;
  uint64_t v12 = v11;
  if (v8) {
    v8 += *((unsigned int *)v8 - 1);
  }
  if (v8 != result)
  {
    do
    {
      uint64_t v13 = *v10++;
      uint64_t result = (uint64_t *)WebKit::NetworkStorageManager::resume(v13);
      while (v10 != v12)
      {
        if ((unint64_t)(*v10 + 1) > 1) {
          goto LABEL_11;
        }
        ++v10;
      }
      uint64_t v10 = v12;
LABEL_11:
      ;
    }
    while (v10 != v8);
  }
  return result;
}

unsigned int *WebKit::NetworkProcess::syncLocalStorage(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v4 = 1;
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)(v4 + 8) = v5;
  uint64_t v9 = (unsigned int *)v4;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v6 = &unk_1EE9C4808;
  v6[1] = &v9;
  uint64_t v8 = v6;
  WebKit::NetworkProcess::forEachNetworkSession(a1, &v8);
  (*(void (**)(void *))(*v6 + 8))(v6);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::storeServiceWorkerRegistrations(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v7);
  if (v4 && *(void *)(v4 + 776)) {
    return WebCore::SWServer::storeRegistrationsOnDisk();
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
}

atomic_uchar *WebKit::NetworkProcess::resetQuota(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v9 = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v9);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 1048);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v5 + 16));
    uint64_t result = (atomic_uchar *)WebKit::NetworkStorageManager::resetQuotaForTesting(v5, a3);
    if (v5) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), v7);
    }
  }
  else
  {
    uint64_t v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    return (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return result;
}

atomic_uchar *WebKit::NetworkProcess::setOriginQuotaRatioEnabledForTesting(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v11 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v11);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 1048);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v7 + 16));
    uint64_t result = (atomic_uchar *)WebKit::NetworkStorageManager::setOriginQuotaRatioEnabledForTesting(v7, a3, a4);
    if (v7) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 16), v9);
    }
  }
  else
  {
    uint64_t v10 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    return (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return result;
}

atomic_uchar *WebKit::NetworkProcess::resetStoragePersistedState(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v9 = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v9);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 1048);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v5 + 16));
    uint64_t result = (atomic_uchar *)WebKit::NetworkStorageManager::resetStoragePersistedState(v5, a3);
    if (v5) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), v7);
    }
  }
  else
  {
    uint64_t v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    return (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return result;
}

atomic_uchar *WebKit::NetworkProcess::cloneSessionStorageForWebPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a2;
  uint64_t result = (atomic_uchar *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v9);
  if (result)
  {
    uint64_t v7 = *((void *)result + 131);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v7 + 16));
    uint64_t result = (atomic_uchar *)WebKit::NetworkStorageManager::cloneSessionStorageForWebPage(v7, a3, a4);
    if (v7) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 16), v8);
    }
  }
  return result;
}

atomic_uchar *WebKit::NetworkProcess::didIncreaseQuota(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v13 = a2;
  uint64_t result = (atomic_uchar *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v13);
  if (result)
  {
    uint64_t v11 = *((void *)result + 131);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v11 + 16));
    uint64_t result = WebKit::NetworkStorageManager::didIncreaseQuota(v11, a3, a4, a5, a6);
    if (v11) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 16), v12);
    }
  }
  return result;
}

unsigned int *WebKit::NetworkProcess::renameOriginInWebsiteData(uint64_t a1, atomic_uchar *a2, WebCore::SecurityOriginData *a3, WebCore::SecurityOriginData *a4, int a5, uint64_t *a6)
{
  uint64_t v12 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v12 = 1;
  uint64_t v13 = *a6;
  *a6 = 0;
  *(void *)(v12 + 8) = v13;
  WebCore::SecurityOriginData::isNull(a3);
  if ((v14 & 1) == 0)
  {
    WebCore::SecurityOriginData::isNull(a4);
    if ((v15 & 1) == 0)
    {
      uint64_t v22 = a2;
      uint64_t v16 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v22);
      if (v16)
      {
        uint64_t v17 = *(void *)(v16 + 1048);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v17 + 16));
        atomic_fetch_add((atomic_uint *volatile)v12, 1u);
        uint64_t v18 = WTF::fastMalloc((WTF *)0x10);
        *(void *)uint64_t v18 = &unk_1EE9C4858;
        *(void *)(v18 + 8) = v12;
        uint64_t v22 = (atomic_uchar *)v18;
        WebKit::NetworkStorageManager::moveData(v17, a5, (uint64_t)a3, (uint64_t)a4, &v22);
        long long v20 = v22;
        uint64_t v22 = 0;
        if (v20)
        {
          (*(void (**)(atomic_uchar *))(*(void *)v20 + 8))(v20);
          if (!v17) {
            return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v12);
          }
          goto LABEL_6;
        }
        if (v17) {
LABEL_6:
        }
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v17 + 16), v19);
      }
    }
  }
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v12);
}

atomic_uchar *WebKit::NetworkProcess::websiteDataOriginDirectoryForTesting(atomic_uchar *result, WTF::StringImpl *a2, uint64_t a3, unsigned int a4, atomic_uchar **a5)
{
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.i32[0] == 1)
  {
    v16[7] = v5;
    v16[8] = v6;
    v16[0] = a2;
    uint64_t v11 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)result + 28, v16);
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 1048);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v12 + 16));
      uint64_t result = WebKit::NetworkStorageManager::getOriginDirectory(v12, a3, a4, a5);
      if (v12) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v12 + 16), v13);
      }
    }
    else
    {
      v16[0] = 0;
      char v14 = *a5;
      *a5 = 0;
      (*(void (**)(atomic_uchar *, WTF::StringImpl **))(*(void *)v14 + 16))(v14, v16);
      (*(void (**)(atomic_uchar *))(*(void *)v14 + 8))(v14);
      uint64_t result = (atomic_uchar *)v16[0];
      v16[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (atomic_uchar *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v15);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcess::processNotificationEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a2 + 208);
  uint64_t v5 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v8);
  if (v5)
  {
    WebKit::NetworkSession::ensureSWServer(v5);
    return WebCore::SWServer::processNotificationEvent();
  }
  else
  {
    uint64_t v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0);
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
}

uint64_t WebKit::NetworkProcess::getAllBackgroundFetchIdentifiers(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v9[0] = a2;
  uint64_t v4 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), v9);
  if (v4)
  {
    uint64_t Store = WebKit::NetworkSession::ensureBackgroundFetchStore(v4);
    return WebKit::BackgroundFetchStoreImpl::getAllBackgroundFetchIdentifiers(Store, a3);
  }
  else
  {
    v9[0] = 0;
    v9[1] = 0;
    uint64_t v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, v9);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v8);
  }
}

uint64_t WebKit::NetworkProcess::getBackgroundFetchState(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  v11[0] = a2;
  uint64_t v6 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), v11);
  if (v6)
  {
    uint64_t Store = WebKit::NetworkSession::ensureBackgroundFetchStore(v6);
    return WebKit::BackgroundFetchStoreImpl::getBackgroundFetchState(Store, a3, a4);
  }
  else
  {
    LOBYTE(v11[0]) = 0;
    char v12 = 0;
    uint64_t v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v9 + 16))(v9, v11);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    return std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v10);
  }
}

uint64_t WebKit::NetworkProcess::abortBackgroundFetch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t Store = WebKit::NetworkSession::ensureBackgroundFetchStore(v6);
    return WebKit::BackgroundFetchStoreImpl::abortBackgroundFetch(Store, a3, a4);
  }
  else
  {
    uint64_t v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
}

uint64_t WebKit::NetworkProcess::pauseBackgroundFetch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t Store = WebKit::NetworkSession::ensureBackgroundFetchStore(v6);
    return WebKit::BackgroundFetchStoreImpl::pauseBackgroundFetch(Store, a3, a4);
  }
  else
  {
    uint64_t v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
}

uint64_t WebKit::NetworkProcess::resumeBackgroundFetch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t Store = WebKit::NetworkSession::ensureBackgroundFetchStore(v6);
    return WebKit::BackgroundFetchStoreImpl::resumeBackgroundFetch(Store, a3, a4);
  }
  else
  {
    uint64_t v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
}

uint64_t WebKit::NetworkProcess::clickBackgroundFetch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v6 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v10);
  if (v6)
  {
    uint64_t Store = WebKit::NetworkSession::ensureBackgroundFetchStore(v6);
    return WebKit::BackgroundFetchStoreImpl::clickBackgroundFetch(Store, a3, a4);
  }
  else
  {
    uint64_t v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
}

uint64_t WebKit::NetworkProcess::getPendingPushMessage(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *(void *)uint64_t v11 = a2;
  uint64_t v5 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), v11);
  uint64_t v6 = qword_1EB3583C0;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      *(_DWORD *)uint64_t v11 = 134217984;
      *(void *)&v11[4] = a2;
      _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "NetworkProcess getting pending push messages for session ID %llu", v11, 0xCu);
    }
    return WebKit::NetworkNotificationManager::getPendingPushMessage(v5 + 1080, a3);
  }
  else
  {
    if (v7)
    {
      *(_DWORD *)uint64_t v11 = 134217984;
      *(void *)&v11[4] = a2;
      _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "NetworkProcess could not find session for ID %llu to get pending push messages", v11, 0xCu);
    }
    v11[0] = 0;
    char v12 = 0;
    uint64_t v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v9 + 16))(v9, v11);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    return std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v10);
  }
}

uint64_t WebKit::NetworkProcess::getPendingPushMessages(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v8[0] = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), v8);
  if (v4) {
    return WebKit::NetworkNotificationManager::getPendingPushMessages(v4 + 1080, a3);
  }
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v6 + 16))(v6, v8);
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  return WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v7);
}

unsigned int *WebKit::NetworkProcess::processPushMessage(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  *(void *)&long long buf = a2;
  uint64_t v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &buf);
  uint64_t v11 = qword_1EB3583C0;
  if (v10)
  {
    char v12 = (WebKit::NetworkSession *)v10;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = a2;
      _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "Networking process handling a push message from UI process in session %llu", (uint8_t *)&buf, 0xCu);
    }
    char v14 = (WTF::StringImpl **)(a3 + 32);
    WebCore::SecurityOriginData::fromURL(v52, (WebCore::SecurityOriginData *)(a3 + 32), v13);
    if (!a4)
    {
      uint64_t v22 = qword_1EB3583C0;
      if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
      {
        WebCore::SecurityOriginData::toString((uint64_t *)&v42, (WebCore::SecurityOriginData *)v52);
        WTF::String::utf8();
        if (v43) {
          uint64_t v23 = (char *)v43 + 16;
        }
        else {
          uint64_t v23 = 0;
        }
        LODWORD(buf) = 136642819;
        *(void *)((char *)&buf + 4) = v23;
        _os_log_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEFAULT, "Push message from %{sensitive}s won't be processed since permission is in the denied state", (uint8_t *)&buf, 0xCu);
        uint64_t v25 = v43;
        uint64_t v43 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1) {
            WTF::fastFree(v25, v24);
          }
          else {
            --*(_DWORD *)v25;
          }
        }
        __int16 v36 = v42;
        uint64_t v42 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2) {
            WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v24);
          }
          else {
            *(_DWORD *)v36 -= 2;
          }
        }
      }
      LOBYTE(buf) = 0;
      char v51 = 0;
      uint64_t v40 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, void, long long *))(*(void *)v40 + 16))(v40, 0, &buf);
      (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
      uint64_t result = (unsigned int *)std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&buf, v41);
LABEL_55:
      if (v53 == -1) {
        return result;
      }
      return (unsigned int *)((uint64_t (*)(long long *, uint64_t *))off_1EE9C39D0[v53])(&buf, v52);
    }
    if (a4 == 2)
    {
      char v15 = qword_1EB3583C0;
      if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
      {
        WebCore::SecurityOriginData::toString((uint64_t *)&v42, (WebCore::SecurityOriginData *)v52);
        WTF::String::utf8();
        if (v43) {
          uint64_t v16 = (char *)v43 + 16;
        }
        else {
          uint64_t v16 = 0;
        }
        LODWORD(buf) = 136642819;
        *(void *)((char *)&buf + 4) = v16;
        _os_log_impl(&dword_1985F2000, v15, OS_LOG_TYPE_DEFAULT, "Push message from %{sensitive}s won't be processed since permission is in the prompt state; removing push subscription",
          (uint8_t *)&buf,
          0xCu);
        uint64_t v18 = v43;
        uint64_t v43 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 1) {
            WTF::fastFree(v18, v17);
          }
          else {
            --*(_DWORD *)v18;
          }
        }
        int v35 = v42;
        uint64_t v42 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2) {
            WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
          }
          else {
            *(_DWORD *)v35 -= 2;
          }
        }
      }
      uint64_t v37 = (uint64_t)v12 + 1080;
      LOBYTE(buf) = 0;
      v46[0] = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&buf, (uint64_t)v52);
      uint64_t v38 = *a5;
      *a5 = 0;
      uint64_t v39 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(void *)uint64_t v39 = &unk_1EE9C4880;
      *((void *)v39 + 1) = v38;
      uint64_t v43 = v39;
      WebKit::NetworkNotificationManager::removePushSubscriptionsForOrigin(v37, (uint64_t)&buf, (uint64_t *)&v43);
      uint64_t result = (unsigned int *)v43;
      uint64_t v43 = 0;
      if (result) {
        uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
      if (v46[0] != -1) {
        uint64_t result = (unsigned int *)((uint64_t (*)(WTF **, long long *))off_1EE9C39D0[v46[0]])(&v43, &buf);
      }
      goto LABEL_55;
    }
    uint64_t v26 = *v14;
    if (*v14) {
      *(_DWORD *)v26 += 2;
    }
    char v27 = *(unsigned char *)(a3 + 208);
    WebKit::NetworkSession::ensureSWServer(v12);
    *(void *)&long long buf = a1;
    *((void *)&buf + 1) = a1;
    atomic_fetch_add((atomic_uint *volatile)(a1 + 128), 1u);
    uint64_t v45 = a2;
    LOBYTE(v46[0]) = 0;
    int v47 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v46, (uint64_t)v52);
    uint64_t v28 = *a5;
    *a5 = 0;
    uint64_t v48 = v26;
    uint64_t v49 = v28;
    char v50 = v27;
    uint64_t v29 = WTF::fastMalloc((WTF *)0x58);
    *(void *)uint64_t v29 = &unk_1EE9C48A8;
    *(void *)(v29 + 8) = buf;
    uint64_t v30 = *((void *)&buf + 1);
    *((void *)&buf + 1) = 0;
    *(void *)(v29 + ++*(_DWORD *)(this + 16) = v30;
    *(void *)(v29 + 24) = v45;
    *(unsigned char *)(v29 + 3objc_destroyWeak(this + 2) = 0;
    *(_DWORD *)(v29 + 56) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v29 + 32, (uint64_t)v46);
    *(void *)(v29 + 64) = v48;
    uint64_t v31 = v49;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    *(void *)(v29 + 7objc_destroyWeak(this + 2) = v31;
    *(unsigned char *)(v29 + 80) = v50;
    WebCore::SWServer::processPushMessage();
    uint64_t v43 = 0;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
    uint64_t v33 = v49;
    uint64_t v49 = 0;
    if (v33) {
      (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
    }
    __int16 v34 = v48;
    uint64_t v48 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, v32);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
    if (v47 != -1) {
      ((void (*)(WTF::StringImpl **, _DWORD *))off_1EE9C39D0[v47])(&v42, v46);
    }
    int v47 = -1;
    uint64_t result = (unsigned int *)*((void *)&buf + 1);
    *((void *)&buf + 1) = 0;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 32, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 32);
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
    if (v53 != -1) {
      return (unsigned int *)((uint64_t (*)(long long *, uint64_t *))off_1EE9C39D0[v53])(&buf, v52);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = a2;
      _os_log_error_impl(&dword_1985F2000, v11, OS_LOG_TYPE_ERROR, "Networking process asked to handle a push message from UI process in session %llu, but that session doesn't exist", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v19 = a3 + 72;
    uint64_t v20 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v20 + 16))(v20, 0, v19);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkProcess::setPushAndNotificationsEnabledForOrigin(uint64_t a1, uint64_t a2, WebCore::SecurityOriginData *a3, char a4, uint64_t *a5)
{
  uint64_t v11 = a2;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v11);
  if (v8) {
    return WebKit::NetworkNotificationManager::setPushAndNotificationsEnabledForOrigin(v8 + 1080, a3, a4, a5);
  }
  uint64_t v10 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
  return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
}

uint64_t WebKit::NetworkProcess::removePushSubscriptionsForOrigin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  v11[0] = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), v11);
  if (v6)
  {
    uint64_t v7 = v6 + 1080;
    LOBYTE(v11[0]) = 0;
    int v12 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v11, a3);
    uint64_t result = WebKit::NetworkNotificationManager::removePushSubscriptionsForOrigin(v7, (uint64_t)v11, a4);
    if (v12 != -1) {
      return ((uint64_t (*)(char *, void *))off_1EE9C39D0[v12])(&v10, v11);
    }
  }
  else
  {
    uint64_t v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v9 + 16))(v9, 0);
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::hasPushSubscriptionForTesting(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v12 = (void *)a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v12);
  if (v6)
  {
    uint64_t v7 = v6 + 1080;
    uint64_t v8 = *a4;
    *a4 = 0;
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v9 = &unk_1EE9C48F8;
    v9[1] = v8;
    int v12 = v9;
    WebKit::NetworkNotificationManager::getPushSubscription(v7, a3, (uint64_t *)&v12);
    uint64_t result = (uint64_t)v12;
    int v12 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    uint64_t v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v11 + 16))(v11, 0);
    return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::getAppBadgeForTesting(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v7);
  if (v4) {
    return WebKit::NetworkNotificationManager::getAppBadgeForTesting(v4 + 1080, a3);
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, void, void))(*(void *)v6 + 16))(v6, 0, 0);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
}

uint64_t WebKit::NetworkProcess::storePrivateClickMeasurement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2;
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v5);
  if (result) {
    return WebKit::NetworkSession::storePrivateClickMeasurement(result, a3);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkProcess::dumpPrivateClickMeasurement(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v8);
  if (v4) {
    return (WTF::StringImpl *)(*(uint64_t (**)(void, uint64_t *))(**(void **)(v4 + 160) + 64))(*(void *)(v4 + 160), a3);
  }
  uint64_t v7 = 0;
  WTF::CompletionHandler<void ()(WTF::String)>::operator()(a3, &v7);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::NetworkProcess::clearPrivateClickMeasurement(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v6);
  if (v4)
  {
    WebKit::NetworkSession::clearPrivateClickMeasurement(v4);
  }
  else
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
}

uint64_t WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(uint64_t this)
{
  if (this)
  {
    this = *(void *)(this + 352);
    if (this)
    {
      xpc_connection_get_audit_token();
      return WTF::hasEntitlement();
    }
  }
  return this;
}

uint64_t WebKit::NetworkProcess::setPrivateClickMeasurementOverrideTimerForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(void *)(a1 + 40)))
  {
    uint64_t v13 = a2;
    uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v13);
    if (v8) {
      (*(void (**)(void, uint64_t))(**(void **)(v8 + 160) + 72))(*(void *)(v8 + 160), a3);
    }
    uint64_t v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  else
  {
    uint64_t v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
    int v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);
    return v12(v11);
  }
}

uint64_t WebKit::NetworkProcess::closePCMDatabase(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v7);
  if (v4) {
    return (*(uint64_t (**)(void, uint64_t *))(**(void **)(v4 + 160) + 144))(*(void *)(v4 + 160), a3);
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
}

uint64_t WebKit::NetworkProcess::simulatePrivateClickMeasurementSessionRestart(uint64_t a1, void *a2, uint64_t *a3)
{
  if (WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(void *)(a1 + 40)))
  {
    char v15 = a2;
    uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v15);
    if (v6)
    {
      uint64_t v7 = v6;
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 8), v6);
      uint64_t v8 = *(atomic_uint **)(v7 + 8);
      if (v8) {
        atomic_fetch_add(v8, 1u);
      }
      uint64_t v9 = *a3;
      *a3 = 0;
      char v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      *char v10 = &unk_1EE9C4920;
      v10[1] = v8;
      v10[2] = v9;
      char v15 = v10;
      (*(void (**)(void, void **))(**(void **)(v7 + 160) + 144))(*(void *)(v7 + 160), &v15);
      uint64_t result = (uint64_t)v15;
      char v15 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
    else
    {
      uint64_t v14 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
      return (*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  else
  {
    uint64_t v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return v13(v12);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::markAttributedPrivateClickMeasurementsAsExpiredForTesting(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(void *)(a1 + 40)))
  {
    uint64_t v11 = a2;
    uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v11);
    if (v6)
    {
      return (*(uint64_t (**)(void, uint64_t *))(**(void **)(v6 + 160) + 112))(*(void *)(v6 + 160), a3);
    }
    else
    {
      uint64_t v10 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
      return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  else
  {
    uint64_t v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
    return v9(v8);
  }
}

uint64_t WebKit::NetworkProcess::setPrivateClickMeasurementEphemeralMeasurementForTesting(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  if (WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(void *)(a1 + 40)))
  {
    uint64_t v13 = a2;
    uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v13);
    if (v8) {
      *(unsigned char *)(v8 + 496) = a3;
    }
    uint64_t v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  else
  {
    uint64_t v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
    uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);
    return v12(v11);
  }
}

uint64_t WebKit::NetworkProcess::setPrivateClickMeasurementTokenPublicKeyURLForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(void *)(a1 + 40)))
  {
    uint64_t v13 = a2;
    uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v13);
    if (v8) {
      (*(void (**)(void, uint64_t))(**(void **)(v8 + 160) + 80))(*(void *)(v8 + 160), a3);
    }
    uint64_t v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  else
  {
    uint64_t v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
    uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);
    return v12(v11);
  }
}

uint64_t WebKit::NetworkProcess::setPrivateClickMeasurementTokenSignatureURLForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(void *)(a1 + 40)))
  {
    uint64_t v13 = a2;
    uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v13);
    if (v8) {
      (*(void (**)(void, uint64_t))(**(void **)(v8 + 160) + 88))(*(void *)(v8 + 160), a3);
    }
    uint64_t v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  else
  {
    uint64_t v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
    uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);
    return v12(v11);
  }
}

uint64_t WebKit::NetworkProcess::setPrivateClickMeasurementAttributionReportURLsForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(void *)(a1 + 40)))
  {
    uint64_t v15 = a2;
    uint64_t v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v15);
    if (v10) {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v10 + 160) + 96))(*(void *)(v10 + 160), a3, a4);
    }
    uint64_t v11 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
    return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  else
  {
    uint64_t v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
    uint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)v13 + 8);
    return v14(v13);
  }
}

uint64_t WebKit::NetworkProcess::markPrivateClickMeasurementsAsExpiredForTesting(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(void *)(a1 + 40)))
  {
    uint64_t v11 = a2;
    uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v11);
    if (v6) {
      (*(void (**)(void))(**(void **)(v6 + 160) + 104))(*(void *)(v6 + 160));
    }
    uint64_t v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  else
  {
    uint64_t v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 8);
    return v10(v9);
  }
}

uint64_t WebKit::NetworkProcess::setPCMFraudPreventionValuesForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  if (WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(void *)(a1 + 40)))
  {
    uint64_t v19 = a2;
    uint64_t v14 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v19);
    if (v14) {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v14 + 160) + 120))(*(void *)(v14 + 160), a3, a4, a5, a6);
    }
    uint64_t v15 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
    return (*(uint64_t (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  else
  {
    uint64_t v17 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
    uint64_t v18 = *(uint64_t (**)(uint64_t))(*(void *)v17 + 8);
    return v18(v17);
  }
}

uint64_t WebKit::NetworkProcess::setPrivateClickMeasurementAppBundleIDForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(void *)(a1 + 40)))
  {
    uint64_t v13 = a2;
    uint64_t v8 = (WebCore *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v13);
    if (v8) {
      WebKit::NetworkSession::setPrivateClickMeasurementAppBundleIDForTesting(v8, a3);
    }
    uint64_t v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  else
  {
    uint64_t v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
    uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);
    return v12(v11);
  }
}

uint64_t *WebKit::NetworkProcess::addKeptAliveLoad(uint64_t a1, WTF::StringImpl *a2)
{
  v4[0] = *(void *)(*(void *)(*(void *)a2 + 3872) + 88);
  uint64_t result = (uint64_t *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), v4);
  if (result) {
    return WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::add(result + 63, a2, (uint64_t)v4);
  }
  return result;
}

uint64_t *WebKit::NetworkProcess::removeKeptAliveLoad(WebKit::NetworkProcess *this, WebKit::NetworkResourceLoader *a2)
{
  uint64_t v4 = *(void *)(*((void *)a2 + 484) + 88);
  uint64_t result = (uint64_t *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)this + 28, &v4);
  if (result) {
    return WebKit::NetworkSession::removeKeptAliveLoad((WebKit::NetworkSession *)result, a2);
  }
  return result;
}

atomic_uchar *WebKit::NetworkProcess::connectionToWebProcessClosed(uint64_t a1, IPC::Connection *a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t result = (atomic_uchar *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v7);
  if (result)
  {
    uint64_t v5 = (atomic_uchar *volatile *)*((void *)result + 131);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v5 + 2);
    uint64_t result = (atomic_uchar *)WebKit::NetworkStorageManager::stopReceivingMessageFromConnection((WebKit::NetworkStorageManager *)v5, a2);
    if (v5) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*((atomic_uchar **)v5 + 2), v6);
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcess::setServiceWorkerFetchTimeoutForTesting(uint64_t a1, uint64_t *a2, double a3)
{
  *(double *)(a1 + 376) = a3;
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

uint64_t WebKit::NetworkProcess::resetServiceWorkerFetchTimeoutForTesting(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 376) = 0x4051800000000000;
  uint64_t v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

uint64_t WebKit::NetworkProcess::hasAppBoundSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v8);
  if (v4) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 168))(v4);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
}

uint64_t WebKit::NetworkProcess::clearAppBoundSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v7);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 176))(v4);
  }
  uint64_t v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
}

void *WebKit::NetworkProcess::broadcastConsoleMessage(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 136));
  uint64_t v11 = result;
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(a1 + 136);
  if (v14) {
    uint64_t v15 = (void *)(v14 + 16 * *(unsigned int *)(v14 - 4));
  }
  else {
    uint64_t v15 = 0;
  }
  if (v15 != result)
  {
    do
    {
      uint64_t result = (void *)v11[1];
      if (result[11] == a2) {
        uint64_t result = WebKit::NetworkConnectionToWebProcess::broadcastConsoleMessage((uint64_t)result, a3, a4, a5);
      }
      while (1)
      {
        v11 += 2;
        if (v11 == v13) {
          break;
        }
        if ((unint64_t)(*v11 + 1) > 1) {
          goto LABEL_11;
        }
      }
      uint64_t v11 = v13;
LABEL_11:
      ;
    }
    while (v11 != v15);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::updateBundleIdentifier(WebCore *a1, WebCore *a2, uint64_t *a3)
{
  WebCore::clearApplicationBundleIdentifierTestingOverride(a1);
  WebCore::setApplicationBundleIdentifierOverride(a2, v5);
  uint64_t v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);

  return v7(v6);
}

uint64_t WebKit::NetworkProcess::clearBundleIdentifier(WebCore *a1, uint64_t *a2)
{
  WebCore::clearApplicationBundleIdentifierTestingOverride(a1);
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

uint64_t WebKit::NetworkProcess::shouldDisableCORSForRequestTo(uint64_t result, void *a2, const WTF::URL *a3)
{
  uint64_t v3 = *(void *)(result + 384);
  if (!v3)
  {
LABEL_12:
    v21[0] = 0;
    uint64_t v19 = 0;
    v21[1] = 0;
    uint64_t v20 = 0;
    WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, a2);
    goto LABEL_13;
  }
  int v5 = *(_DWORD *)(v3 - 8);
  unint64_t v6 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
  unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  unsigned int v9 = v5 & ((v8 >> 31) ^ v8);
  uint64_t v10 = *(void **)(v3 + 24 * v9);
  if (v10 != a2)
  {
    int v11 = 1;
    while (v10)
    {
      unsigned int v9 = (v9 + v11) & v5;
      uint64_t v10 = *(void **)(v3 + 24 * v9);
      ++v11;
      if (v10 == a2) {
        goto LABEL_6;
      }
    }
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v12 = v3 + 24 * v9;
  uint64_t v13 = *(unsigned int *)(v12 + 20);
  uint64_t v19 = 0;
  LODWORD(v20) = 0;
  HIDWORD(v20) = v13;
  if (!v13)
  {
LABEL_13:
    uint64_t v17 = 0;
LABEL_14:
    WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, a2);
    return v17;
  }
  if (!(v13 >> 27))
  {
    uint64_t v14 = v12 + 8;
    uint64_t v15 = (WebCore::UserContentURLPattern *)WTF::fastMalloc((WTF *)(32 * v13));
    LODWORD(v20) = v13;
    uint64_t v19 = v15;
    WTF::VectorCopier<false,WebCore::UserContentURLPattern>::uninitializedCopy<WebCore::UserContentURLPattern>(*(void *)v14, *(void *)v14 + 32 * *(unsigned int *)(v14 + 12), (uint64_t)v15);
    uint64_t v16 = 32 * v13 - 32;
    do
    {
      uint64_t v17 = WebCore::UserContentURLPattern::matches<WTF::URL>(v15, a3);
      if (v17) {
        break;
      }
      uint64_t v15 = (WebCore::UserContentURLPattern *)((char *)v15 + 32);
      uint64_t v18 = v16;
      v16 -= 32;
    }
    while (v18);
    goto LABEL_14;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::NetworkProcess::appPrivacyReportTestingData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v9 = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v9);
  if (v4)
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v4 + 1064);
  }
  else
  {
    __int16 v7 = 0;
    char v8 = 0;
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, __int16 *))(*(void *)v5 + 16))(v5, &v7);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
}

uint64_t WebKit::NetworkProcess::clearAppPrivacyReportTestingData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v7);
  if (v4)
  {
    *(_WORD *)(v4 + 1064) = 0;
    *(unsigned char *)(v4 + 1066) = 0;
  }
  uint64_t v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
}

WebKit::RTCDataChannelRemoteManagerProxy *WebKit::NetworkProcess::rtcDataChannelProxy(WebKit::NetworkProcess *this)
{
  uint64_t result = (WebKit::RTCDataChannelRemoteManagerProxy *)*((void *)this + 42);
  if (!result)
  {
    uint64_t v3 = (WebKit::RTCDataChannelRemoteManagerProxy *)WTF::fastMalloc((WTF *)0x28);
    uint64_t result = WebKit::RTCDataChannelRemoteManagerProxy::RTCDataChannelRemoteManagerProxy(v3);
    uint64_t v5 = *((void *)this + 42);
    *((void *)this + 4objc_destroyWeak(this + 2) = result;
    if (v5)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), v4);
      return (WebKit::RTCDataChannelRemoteManagerProxy *)*((void *)this + 42);
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcess::addWebPageNetworkParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2;
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v7);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 240))(result, a3, a4);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkProcess::removeWebPageNetworkParameters(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v9 = a2;
  uint64_t result = (WTF::StringImpl *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v9);
  if (result)
  {
    uint64_t v5 = result;
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 248))(result, a3);
    uint64_t v6 = *((void *)v5 + 131);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v6 + 16));
    WebKit::NetworkStorageManager::clearStorageForWebPage(v6, (uint64_t)a3);
    if (v6) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 16), v7);
    }
    uint64_t result = (WTF::StringImpl *)*((void *)v5 + 9);
    if (result) {
      return WebKit::WebResourceLoadStatisticsStore::clearFrameLoadRecordsForStorageAccess(result, a3, v8);
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcess::countNonDefaultSessionSets(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v8);
  if (v4) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 256))(v4);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
}

uint64_t WebKit::NetworkProcess::allowFilesAccessFromWebProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v13 = a2;
  uint64_t v6 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 136), &v13);
  if (v6)
  {
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    if (v7)
    {
      uint64_t v8 = (WebKit::NetworkConnectionToWebProcess *)v6;
      uint64_t v9 = *(const WTF::String **)a3;
      uint64_t v10 = 8 * v7;
      do
      {
        WebKit::NetworkConnectionToWebProcess::allowAccessToFile(v8, v9);
        uint64_t v9 = (const WTF::String *)((char *)v9 + 8);
        v10 -= 8;
      }
      while (v10);
    }
  }
  uint64_t v11 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::allowFileAccessFromWebProcess(uint64_t a1, uint64_t a2, const WTF::String *a3, uint64_t *a4)
{
  uint64_t v9 = a2;
  uint64_t v6 = (WebKit::NetworkConnectionToWebProcess *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 136), &v9);
  if (v6) {
    WebKit::NetworkConnectionToWebProcess::allowAccessToFile(v6, a3);
  }
  uint64_t v7 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
}

uint64_t IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::RequestBackgroundFetchPermission,WTF::CompletionHandler<void ()(BOOL)>>(os_unfair_lock_s *a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v10 = &unk_1EE9C4948;
  v10[1] = v9;
  uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 346;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v21 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v12, *(void *)(a2 + 8));
  v20[0] = (uint64_t)v10;
  v20[1] = v11;
  int v14 = IPC::Connection::sendMessageWithAsyncReply(a1, &v21, v20, a5, 0);
  uint64_t v15 = v20[0];
  v20[0] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v21;
  uint64_t v21 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v13);
    WTF::fastFree(v18, v19);
  }
  if (v14) {
    return 0;
  }
  else {
    return v11;
  }
}

atomic_uchar *WebKit::NetworkProcess::setStorageSiteValidationEnabled(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = a2;
  uint64_t result = (atomic_uchar *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v7);
  if (result)
  {
    uint64_t v5 = (atomic_uchar *volatile *)*((void *)result + 131);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v5 + 2);
    uint64_t result = (atomic_uchar *)WebKit::NetworkStorageManager::setStorageSiteValidationEnabled((WebKit::NetworkStorageManager *)v5, a3);
    if (v5) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*((atomic_uchar **)v5 + 2), v6);
    }
  }
  return result;
}

WTF::StringImpl **WebKit::NetworkProcess::setPersistedDomains(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v6 = a2;
  uint64_t result = (WTF::StringImpl **)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v6);
  if (result) {
    return WebKit::NetworkSession::setPersistedDomains((uint64_t)result, a3, v5);
  }
  return result;
}

uint64_t WebKit::NetworkProcessPlatformStrategies::createLoaderStrategy(WebKit::NetworkProcessPlatformStrategies *this)
{
  return 0;
}

uint64_t WebKit::NetworkProcessPlatformStrategies::createPasteboardStrategy(WebKit::NetworkProcessPlatformStrategies *this)
{
  return 0;
}

uint64_t WebKit::NetworkProcessPlatformStrategies::createMediaStrategy(WebKit::NetworkProcessPlatformStrategies *this)
{
  return 0;
}

void *WebKit::NetworkProcessPlatformStrategies::createBlobRegistry(WebKit::NetworkProcessPlatformStrategies *this)
{
  if ((byte_1EB3597F1 & 1) == 0)
  {
    qword_1EB3597F8 = &unk_1EE9C4970;
    byte_1EB3597F1 = 1;
  }
  return &qword_1EB3597F8;
}

uint64_t WebKit::NetworkProcessPlatformStrategies::createPushStrategy(WebKit::NetworkProcessPlatformStrategies *this)
{
  return 0;
}

void WebKit::NetworkDataTask::suggestedFilename(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::NetworkDataTaskBlob::state(WebKit::NetworkDataTaskBlob *this)
{
  return *((unsigned int *)this + 152);
}

void WebKit::NetworkOriginAccessPatterns::~NetworkOriginAccessPatterns(WebKit::NetworkOriginAccessPatterns *this, void *a2)
{
}

{
  void *v3;
  uint64_t vars8;

  WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 8, a2);

  WTF::fastFree(this, v3);
}

uint64_t WebKit::NetworkProcess::ref(uint64_t this)
{
  return this;
}

unsigned int *WebKit::NetworkProcess::deref(unsigned int *this)
{
  if (atomic_fetch_add((atomic_uint *volatile)this + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, this + 32);
    return (unsigned int *)(*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

uint64_t WebKit::NetworkProcess::ptrCount(WebKit::NetworkProcess *this)
{
  return *((unsigned int *)this + 33);
}

uint64_t WebKit::NetworkProcess::ptrCountWithoutThreadCheck(WebKit::NetworkProcess *this)
{
  return *((unsigned int *)this + 33);
}

uint64_t WebKit::NetworkProcess::incrementPtrCount(uint64_t this)
{
  return this;
}

uint64_t WebKit::NetworkProcess::decrementPtrCount(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 132);
  if (v1)
  {
    *(_DWORD *)(this + 13objc_destroyWeak(this + 2) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebKit::NetworkProcess::parentProcessConnectionForDownloads(WebKit::NetworkProcess *this)
{
  return *((void *)this + 5);
}

uint64_t non-virtual thunk to'WebKit::NetworkProcess::ptrCount(WebKit::NetworkProcess *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t non-virtual thunk to'WebKit::NetworkProcess::ptrCountWithoutThreadCheck(WebKit::NetworkProcess *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t non-virtual thunk to'WebKit::NetworkProcess::decrementPtrCount(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 12);
  if (v1)
  {
    *(_DWORD *)(this + 1objc_destroyWeak(this + 2) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t non-virtual thunk to'WebKit::NetworkProcess::parentProcessConnectionForDownloads(WebKit::NetworkProcess *this)
{
  return *((void *)this - 10);
}

uint64_t non-virtual thunk to'WebKit::NetworkProcess::ref(uint64_t this)
{
  return this;
}

uint64_t non-virtual thunk to'WebKit::NetworkProcess::deref(uint64_t this)
{
  if (atomic_fetch_add((atomic_uint *volatile)(this + 8), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(this + 8));
    return (*(uint64_t (**)(void))(*(void *)(this - 120) + 8))();
  }
  return this;
}

void WebKit::NetworkProcessPlatformStrategies::~NetworkProcessPlatformStrategies(WebKit::NetworkProcessPlatformStrategies *this)
{
}

uint64_t WebCore::ResourceErrorBase::ResourceErrorBase(uint64_t result, _DWORD **a2, int a3, uint64_t a4, _DWORD **a5, char a6, char a7)
{
  uint64_t v7 = *a2;
  if (*a2) {
    *v7 += 2;
  }
  *(void *)uint64_t result = v7;
  uint64_t v8 = *(_DWORD **)a4;
  if (*(void *)a4) {
    *v8 += 2;
  }
  *(void *)(result + 8) = v8;
  long long v9 = *(_OWORD *)(a4 + 24);
  *(_OWORD *)(result + ++*(_DWORD *)(this + 16) = *(_OWORD *)(a4 + 8);
  *(_OWORD *)(result + 3objc_destroyWeak(this + 2) = v9;
  uint64_t v10 = *a5;
  if (*a5) {
    *v10 += 2;
  }
  *(void *)(result + 48) = v10;
  *(_DWORD *)(result + 56) = a3;
  *(unsigned char *)(result + 60) = a6;
  *(unsigned char *)(result + 61) = a7;
  return result;
}

WebCore::AsyncFileStream *std::unique_ptr<WebCore::AsyncFileStream>::reset[abi:sn180100](WebCore::AsyncFileStream **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    WebCore::AsyncFileStream::~AsyncFileStream(result);
    return (WebCore::AsyncFileStream *)WTF::fastFree(v3, v4);
  }
  return result;
}

void WebCore::ContentSecurityPolicy::operator delete(uint64_t a1, size_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x199735830]();
  if (atomic_load((unsigned int *)v3))
  {
    bzero(v3, a2);
  }
  else
  {
    WTF::fastFree((WTF *)v3, v4);
  }
}

WebKit::NetworkCORSPreflightChecker *std::unique_ptr<WebKit::NetworkCORSPreflightChecker>::reset[abi:sn180100](WebKit::NetworkCORSPreflightChecker **a1, WebKit::NetworkCORSPreflightChecker *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkCORSPreflightChecker::~NetworkCORSPreflightChecker(result, a2);
    return (WebKit::NetworkCORSPreflightChecker *)WTF::fastFree(v4, v5);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit18NetworkLoadChecker18RedirectionTripletEN7WebCore13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (WebCore::ResourceResponseBase *)(a2 + 50);
  uint64_t v4 = (const void *)a2[80];
  a2[80] = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, (WTF::StringImpl *)a2);
  uint64_t v5 = (const void *)a2[49];
  a2[49] = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a2 + 25));
  uint64_t v6 = (const void *)a2[24];
  a2[24] = 0;
  if (v6) {
    CFRelease(v6);
  }

  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit18NetworkLoadChecker18RedirectionTripletEN7WebCore13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (const void *)*((void *)a2 + 8);
  *((void *)a2 + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)a2 + 6);
  *((void *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::NetworkLoadChecker::RedirectionTriplet::RedirectionTriplet(uint64_t a1, uint64_t a2)
{
  WTF::URL::URL(a1, (uint64_t *)a2);
  WTF::URL::URL(v4 + 40, (uint64_t *)(a2 + 40));
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a2 + ++*(_DWORD *)(this - 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + ++*(_DWORD *)(this - 88) = v5;
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 96) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 104) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(a1 + 108) = v6;
  *(void *)(a1 + 11objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a2 + 11objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 11objc_destroyWeak(this + 2) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 120) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_DWORD *)(a1 + 124) = v7;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t v8 = *(void *)(a2 + 128);
  *(void *)(a2 + 128) = 0;
  *(void *)(a1 + 128) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 136) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 140) = 0;
  *(_DWORD *)(a1 + 140) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v8;
  uint64_t v9 = *(void *)(a2 + 152);
  *(void *)(a2 + 15objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 15objc_destroyWeak(this + 2) = v9;
  uint64_t v10 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(void *)(a1 + 160) = v10;
  uint64_t v11 = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  *(void *)(a1 + 168) = v11;
  uint64_t v12 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v12;
  uint64_t v13 = *(void *)(a2 + 192);
  *(void *)(a2 + 19objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 19objc_destroyWeak(this + 2) = v13;
  WTF::URL::URL(a1 + 200, (uint64_t *)(a2 + 200));
  WTF::URL::URL(a1 + 240, (uint64_t *)(a2 + 240));
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  uint64_t v14 = *(void *)(a2 + 288);
  *(void *)(a2 + 2++*(_DWORD *)(this - 88) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 2++*(_DWORD *)(this - 88) = v14;
  uint64_t v15 = *(void *)(a2 + 296);
  *(void *)(a2 + 296) = 0;
  *(void *)(a1 + 296) = v15;
  LODWORD(v15) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a2 + 304) = 0;
  *(_DWORD *)(a1 + 304) = v15;
  LODWORD(v15) = *(_DWORD *)(a2 + 308);
  *(_DWORD *)(a2 + 308) = 0;
  *(_DWORD *)(a1 + 308) = v15;
  *(void *)(a1 + 31objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 320) = 0;
  uint64_t v16 = *(void *)(a2 + 312);
  *(void *)(a2 + 31objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 31objc_destroyWeak(this + 2) = v16;
  LODWORD(v++*(_DWORD *)(this + 16) = *(_DWORD *)(a2 + 320);
  *(_DWORD *)(a2 + 320) = 0;
  *(_DWORD *)(a1 + 320) = v16;
  LODWORD(v++*(_DWORD *)(this + 16) = *(_DWORD *)(a2 + 324);
  *(_DWORD *)(a2 + 324) = 0;
  *(_DWORD *)(a1 + 324) = v16;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  uint64_t v17 = *(void *)(a2 + 328);
  *(void *)(a2 + 328) = 0;
  *(void *)(a1 + 328) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 336);
  *(_DWORD *)(a2 + 336) = 0;
  *(_DWORD *)(a1 + 336) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 340);
  *(_DWORD *)(a2 + 340) = 0;
  *(_DWORD *)(a1 + 340) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 344);
  *(unsigned char *)(a1 + 348) = *(unsigned char *)(a2 + 348);
  *(_DWORD *)(a1 + 344) = v17;
  uint64_t v18 = *(void *)(a2 + 352);
  *(void *)(a2 + 35objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 35objc_destroyWeak(this + 2) = v18;
  uint64_t v19 = *(void *)(a2 + 360);
  *(void *)(a2 + 360) = 0;
  *(void *)(a1 + 360) = v19;
  uint64_t v20 = *(void *)(a2 + 368);
  *(void *)(a2 + 368) = 0;
  *(void *)(a1 + 368) = v20;
  uint64_t v21 = *(void *)(a2 + 376);
  *(unsigned char *)(a1 + 384) = *(unsigned char *)(a2 + 384);
  *(void *)(a1 + 376) = v21;
  uint64_t v22 = *(void *)(a2 + 392);
  *(void *)(a2 + 39objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 39objc_destroyWeak(this + 2) = v22;
  WTF::URL::URL(a1 + 400, (uint64_t *)(a2 + 400));
  uint64_t v24 = *(void *)(a2 + 440);
  uint64_t v25 = *(void *)(a2 + 448);
  *(void *)(a2 + 440) = 0;
  *(void *)(a1 + 440) = v24;
  *(void *)(a1 + 448) = v25;
  uint64_t v26 = *(void *)(a2 + 456);
  *(void *)(a2 + 456) = 0;
  *(void *)(a1 + 456) = v26;
  uint64_t v27 = *(void *)(a2 + 464);
  *(void *)(a2 + 464) = 0;
  *(void *)(a1 + 464) = v27;
  uint64_t v28 = *(void *)(a2 + 472);
  *(void *)(a2 + 47objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 4++*(_DWORD *)(this - 88) = 0;
  *(void *)(a1 + 47objc_destroyWeak(this + 2) = v28;
  uint64_t v29 = *(void *)(a2 + 480);
  *(void *)(a2 + 480) = 0;
  *(void *)(a1 + 480) = v29;
  LODWORD(v29) = *(_DWORD *)(a2 + 488);
  *(_DWORD *)(a2 + 4++*(_DWORD *)(this - 88) = 0;
  *(_DWORD *)(a1 + 4++*(_DWORD *)(this - 88) = v29;
  LODWORD(v29) = *(_DWORD *)(a2 + 492);
  *(_DWORD *)(a2 + 49objc_destroyWeak(this + 2) = 0;
  *(_DWORD *)(a1 + 49objc_destroyWeak(this + 2) = v29;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  uint64_t v30 = *(void *)(a2 + 496);
  *(void *)(a2 + 496) = 0;
  *(void *)(a1 + 496) = v30;
  LODWORD(v30) = *(_DWORD *)(a2 + 504);
  *(_DWORD *)(a2 + 504) = 0;
  *(_DWORD *)(a1 + 504) = v30;
  LODWORD(v30) = *(_DWORD *)(a2 + 508);
  *(_DWORD *)(a2 + 508) = 0;
  *(_DWORD *)(a1 + 508) = v30;
  uint64_t v31 = *(void *)(a2 + 512);
  *(void *)(a2 + 51objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 51objc_destroyWeak(this + 2) = v31;
  *(unsigned char *)(a1 + 520) = 0;
  *(unsigned char *)(a1 + 528) = 0;
  if (*(unsigned char *)(a2 + 528))
  {
    uint64_t v39 = *(void *)(a2 + 520);
    *(void *)(a2 + 520) = 0;
    *(void *)(a1 + 520) = v39;
    *(unsigned char *)(a1 + 528) = 1;
  }
  long long v32 = *(_OWORD *)(a2 + 536);
  long long v33 = *(_OWORD *)(a2 + 552);
  *(_OWORD *)(v23 + 168) = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(v23 + 15objc_destroyWeak(this + 2) = v33;
  *(_OWORD *)(v23 + 136) = v32;
  long long v34 = *(_OWORD *)(a2 + 584);
  long long v35 = *(_OWORD *)(a2 + 600);
  long long v36 = *(_OWORD *)(a2 + 616);
  *(_DWORD *)(v23 + 231) = *(_DWORD *)(a2 + 631);
  *(_OWORD *)(v23 + 2++*(_DWORD *)(this + 16) = v36;
  *(_OWORD *)(v23 + 200) = v35;
  *(_OWORD *)(v23 + 184) = v34;
  uint64_t v37 = *(void *)(a2 + 640);
  *(void *)(a2 + 640) = 0;
  *(void *)(a1 + 640) = v37;
  *(unsigned char *)(a1 + 648) = *(unsigned char *)(a2 + 648);
  return a1;
}

__n128 WebKit::contextURLforCORPViolation(WebKit *this, WebKit::NetworkResourceLoader *a2)
{
  if (*((unsigned char *)a2 + 315) == 1) {
    uint64_t v3 = (char *)a2 + 3168;
  }
  else {
    uint64_t v3 = (char *)a2 + 3208;
  }
  if ((v3[8] & 1) == 0) {
    uint64_t v3 = (char *)WTF::aboutBlankURL((WTF *)v3);
  }
  uint64_t v4 = *(_DWORD **)v3;
  if (*(void *)v3) {
    *v4 += 2;
  }
  *(void *)this = v4;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)(v3 + 8);
  __n128 result = *(__n128 *)(v3 + 24);
  *(__n128 *)((char *)this + 24) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15ResourceRequestEN6WebKit18NetworkLoadChecker18RedirectionTripletENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SC_SD_EEEEEEDcSH_DpT0_(int a1, WebCore::ResourceRequestBase *this)
{
  uint64_t v3 = (const void *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v3) {
    CFRelease(v3);
  }

  WebCore::ResourceRequestBase::~ResourceRequestBase(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15ResourceRequestEN6WebKit18NetworkLoadChecker18RedirectionTripletENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (WebCore::ResourceResponseBase *)(a2 + 50);
  uint64_t v4 = (const void *)a2[80];
  a2[80] = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, (WTF::StringImpl *)a2);
  uint64_t v5 = (const void *)a2[49];
  a2[49] = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a2 + 25));
  uint64_t v6 = (const void *)a2[24];
  a2[24] = 0;
  if (v6) {
    CFRelease(v6);
  }

  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15ResourceRequestEN6WebKit18NetworkLoadChecker18RedirectionTripletENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (const void *)*((void *)a2 + 8);
  *((void *)a2 + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)a2 + 6);
  *((void *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  __n128 result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::checkCORSRequestWithPreflight(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&)> &&)::$_0,void,WebKit::NetworkLoadChecker::RedirectionTriplet&&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C3A18;
  uint64_t v2 = a1[27];
  a1[27] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (const void *)a1[26];
  a1[26] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 2));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::checkCORSRequestWithPreflight(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&)> &&)::$_0,void,WebKit::NetworkLoadChecker::RedirectionTriplet&&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C3A18;
  uint64_t v2 = a1[27];
  a1[27] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (const void *)a1[26];
  a1[26] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 2));

  return WTF::fastFree((WTF *)a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::checkCORSRequestWithPreflight(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&)> &&)::$_0,void,WebKit::NetworkLoadChecker::RedirectionTriplet&&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v6 = *((unsigned char *)a2 + 60) == 0;
    int v7 = *(unsigned __int8 *)(a1 + 224);
    *(_DWORD *)long long buf = 134218496;
    *(void *)&uint8_t buf[4] = v4;
    __int16 v29 = 1024;
    BOOL v30 = v6;
    __int16 v31 = 1024;
    int v32 = v7;
    _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "%p - NetworkLoadChecker::checkCORSRequestWithPreflight - makeCrossOriginAccessRequestWithPreflight preflight complete, success=%d forRedirect=%d", buf, 0x18u);
  }
  if (*((unsigned char *)a2 + 60))
  {
    uint64_t v8 = *a2;
    *a2 = 0;
    *(void *)long long buf = v8;
    double v9 = WTF::URL::URL((uint64_t)&buf[8], a2 + 1);
    uint64_t v10 = a2[6];
    a2[6] = 0;
    uint64_t v33 = v10;
    __int16 v35 = *((_WORD *)a2 + 30);
    int v34 = *((_DWORD *)a2 + 14);
    uint64_t v11 = a2[8];
    a2[8] = 0;
    uint64_t v36 = v11;
    char v37 = *((unsigned char *)a2 + 72);
    unsigned int v43 = 2;
    uint64_t v12 = *(void *)(a1 + 216);
    *(void *)(a1 + 2++*(_DWORD *)(this + 16) = 0;
    (*(void (**)(uint64_t, unsigned char *, double))(*(void *)v12 + 16))(v12, buf, v9);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
    if (v43 != -1) {
      return (*(&off_1EE9C39F0 + v43))((int)&v27, (WebCore::ResourceRequestBase *)buf);
    }
  }
  else
  {
    if (*(unsigned char *)(v4 + 529))
    {
      WebCore::NetworkTransactionInformation::NetworkTransactionInformation((uint64_t)buf, *(void *)(v4 + 440) + 560);
      unsigned int v14 = *(_DWORD *)(v4 + 1132);
      if (v14 == *(_DWORD *)(v4 + 1128))
      {
        WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NetworkTransactionInformation>(v4 + 1120, (unint64_t)buf);
      }
      else
      {
        WebCore::NetworkTransactionInformation::NetworkTransactionInformation(*(void *)(v4 + 1120) + 592 * v14, (uint64_t)buf);
        ++*(_DWORD *)(v4 + 1132);
      }
      uint64_t v16 = v42;
      uint64_t v42 = 0;
      if (v16) {
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v16);
      }
      uint64_t v17 = v41;
      uint64_t v41 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v15);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      uint64_t v18 = v40;
      uint64_t v40 = 0;
      if (v18) {
        CFRelease(v18);
      }
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v39, v15);
      uint64_t v19 = v38;
      uint64_t v38 = 0;
      if (v19) {
        CFRelease(v19);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[8]);
    }
    uint64_t v20 = *(WebKit::NetworkCORSPreflightChecker **)(v4 + 440);
    *(void *)(v4 + 440) = 0;
    uint64_t v21 = *(atomic_uint **)(v4 + 240);
    if (v21) {
      atomic_fetch_add(v21, 1u);
    }
    WebCore::updateRequestForAccessControl();
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v21, v22);
    std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)buf, a1 + 16);
    unsigned int v43 = 0;
    uint64_t v23 = *(void *)(a1 + 216);
    *(void *)(a1 + 2++*(_DWORD *)(this + 16) = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v23 + 16))(v23, buf);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 8))(v23);
    if (v43 != -1) {
      uint64_t result = (*(&off_1EE9C39F0 + v43))((int)&v27, (WebCore::ResourceRequestBase *)buf);
    }
    if (v20)
    {
      WebKit::NetworkCORSPreflightChecker::~NetworkCORSPreflightChecker(v20, v24);
      return WTF::fastFree(v25, v26);
    }
  }
  return result;
}

uint64_t std::__variant_detail::__alt<0ul,WebKit::NetworkLoadChecker::ContentExtensionResult>::__alt[abi:sn180100]<WebKit::NetworkLoadChecker::ContentExtensionResult>(uint64_t a1, uint64_t a2)
{
  WTF::URL::URL(a1, (uint64_t *)a2);
  WTF::URL::URL(v4 + 40, (uint64_t *)(a2 + 40));
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a2 + ++*(_DWORD *)(this - 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + ++*(_DWORD *)(this - 88) = v5;
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 96) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 104) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(a1 + 108) = v6;
  *(void *)(a1 + 11objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a2 + 11objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 11objc_destroyWeak(this + 2) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 120) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_DWORD *)(a1 + 124) = v7;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t v8 = *(void *)(a2 + 128);
  *(void *)(a2 + 128) = 0;
  *(void *)(a1 + 128) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 136) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 140) = 0;
  *(_DWORD *)(a1 + 140) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v8;
  uint64_t v9 = *(void *)(a2 + 152);
  *(void *)(a2 + 15objc_destroyWeak(this + 2) = 0;
  *(void *)(a1 + 15objc_destroyWeak(this + 2) = v9;
  uint64_t v10 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(void *)(a1 + 160) = v10;
  uint64_t v11 = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  *(void *)(a1 + 168) = v11;
  uint64_t v12 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v12;
  long long v13 = *(_OWORD *)(a2 + 192);
  *(void *)(a2 + 19objc_destroyWeak(this + 2) = 0;
  *(_OWORD *)(a1 + 19objc_destroyWeak(this + 2) = v13;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit18NetworkLoadChecker22ContentExtensionResultEN7WebCore13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(int a1, WebCore::ResourceRequestBase *this)
{
  uint64_t v3 = (const void *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v3) {
    CFRelease(v3);
  }

  WebCore::ResourceRequestBase::~ResourceRequestBase(this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit18NetworkLoadChecker22ContentExtensionResultEN7WebCore13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (const void *)*((void *)a2 + 8);
  *((void *)a2 + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)a2 + 6);
  *((void *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)a1;
  if (!*(void *)a1) {
    goto LABEL_20;
  }
  int v4 = *(_DWORD *)(v3 - 4);
  if (!v4)
  {
LABEL_15:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_16;
  }
  int v5 = 0;
  unsigned int v6 = v4 - 1;
  do
  {
    uint64_t v7 = (unsigned int **)(v3 + 8 * v6);
    if ((unint64_t)*v7 + 1 >= 2 && !*((void *)*v7 + 1))
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v7, a2);
      ++v5;
    }
  }
  while ((unint64_t)v6--);
  uint64_t v3 = *(void *)a1;
  if (v5)
  {
    *(_DWORD *)(v3 - 16) += v5;
    uint64_t v14 = *(void *)a1;
    if (*(void *)a1) {
      int v15 = *(_DWORD *)(v14 - 12);
    }
    else {
      int v15 = 0;
    }
    *(_DWORD *)(v14 - 1objc_destroyWeak(this + 2) = v15 - v5;
    uint64_t v3 = *(void *)a1;
  }
  if (!v3)
  {
LABEL_20:
    *(_DWORD *)(a1 + 8) = 0;
LABEL_21:
    uint64_t result = 0;
    *(_DWORD *)(a1 + 1objc_destroyWeak(this + 2) = 0;
    return result;
  }
  unsigned int v9 = *(_DWORD *)(v3 - 4);
  if (v9 < 9 || 6 * *(_DWORD *)(v3 - 12) >= v9) {
    goto LABEL_15;
  }
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
  uint64_t v3 = *(void *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v3) {
    goto LABEL_21;
  }
LABEL_16:
  unsigned int v11 = *(_DWORD *)(v3 - 12);
  if (v11 >= 0x7FFFFFFF) {
    int v12 = -2;
  }
  else {
    int v12 = 2 * v11;
  }
  *(_DWORD *)(a1 + 1objc_destroyWeak(this + 2) = v12;
  return *(unsigned int *)(v3 - 12);
}

unsigned int **_ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN6WebKit11NetworkLoadES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(unsigned int **result, void *a2)
{
  uint64_t v2 = *result;
  if (*result)
  {
    int v3 = *(v2 - 1);
    if (v3)
    {
      int v4 = (uint64_t *)result;
      int v5 = 0;
      unsigned int v6 = v3 - 1;
      do
      {
        uint64_t result = (unsigned int **)&v2[2 * v6];
        if ((unint64_t)*result + 1 >= 2 && !*((void *)*result + 1))
        {
          uint64_t result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(result, a2);
          ++v5;
        }
      }
      while ((unint64_t)v6--);
      uint64_t v8 = *v4;
      if (v5)
      {
        *(_DWORD *)(v8 - 16) += v5;
        uint64_t v12 = *v4;
        if (*v4) {
          int v13 = *(_DWORD *)(v12 - 12);
        }
        else {
          int v13 = 0;
        }
        *(_DWORD *)(v12 - 1objc_destroyWeak(this + 2) = v13 - v5;
        uint64_t v8 = *v4;
      }
      if (v8)
      {
        unsigned int v9 = *(_DWORD *)(v8 - 4);
        unsigned int v10 = 6 * *(_DWORD *)(v8 - 12);
        if (v9 >= 9 && v10 < v9)
        {
          return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
        }
      }
    }
  }
  return result;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(unsigned int **result, void *a2)
{
  uint64_t v2 = *result;
  WTF::StringImpl *result = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2);
    int v3 = result;
    WTF::fastFree((WTF *)v2, a2);
    uint64_t result = v3;
  }
  WTF::StringImpl *result = (unsigned int *)-1;
  return result;
}

uint64_t WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes(uint64_t result, void *a2)
{
  for (i = *(WTF **)(result + 8); i; uint64_t result = WTF::fastFree(v3, a2))
  {
    int v3 = i;
    uint64_t i = (WTF *)*((void *)i + 2);
    int v4 = *(unsigned int **)v3;
    *(void *)int v3 = 0;
    if (v4)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v4);
        int v5 = v3;
        WTF::fastFree((WTF *)v4, a2);
        int v3 = v5;
      }
    }
  }
  return result;
}

uint64_t WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>::~KeyValuePair(uint64_t a1, void *a2)
{
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes(a1 + 24, a2);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  int v5 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unsigned int v6 = *(WTF::StringImpl **)a1;
  *(void *)a1 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t std::default_delete<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>::operator()[abi:sn180100](WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)this;
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WebKit::NetworkLoadScheduler::HostContext **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::NetworkLoadScheduler::HostContext *)-1)
      {
        std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>::reset[abi:sn180100](v4, 0);
        int v5 = *(v4 - 1);
        *(v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl **WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>::~KeyValuePair(WTF::StringImpl **a1)
{
  std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>::reset[abi:sn180100](a1 + 1, 0);
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

WebKit::NetworkLoadScheduler::HostContext *std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>::reset[abi:sn180100](WebKit::NetworkLoadScheduler::HostContext **a1, WebKit::NetworkLoad *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkLoadScheduler::HostContext::~HostContext(result, a2);
    return (WebKit::NetworkLoadScheduler::HostContext *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>::~KeyValuePair(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::callExitSoon(IPC::Connection *)::$_0,void>::call()
{
  uint64_t v0 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_error_impl(&dword_1985F2000, v0, OS_LOG_TYPE_ERROR, "Exiting process early due to unacknowledged closed-connection", v3, 2u);
  }
  uint64_t v1 = WTF::terminateProcess((WTF *)1);
  return std::__optional_destruct_base<IPC::Connection::ConnectionIdentifierPair,false>::~__optional_destruct_base[abi:sn180100](v1);
}

uint64_t std::__optional_destruct_base<IPC::Connection::ConnectionIdentifierPair,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 16));
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2) {
      os_release(v2);
    }
  }
  return a1;
}

void WebCore::NetworkStorageSession::operator delete(uint64_t a1, size_t a2)
{
  uint64_t v3 = (_DWORD *)MEMORY[0x199735F40]();
  if (v3[2])
  {
    bzero(v3, a2);
  }
  else
  {
    WTF::fastFree((WTF *)v3, v4);
  }
}

uint64_t std::make_unique[abi:sn180100]<WebCore::NetworkStorageSession,PAL::SessionID &,WTF::RetainPtr<__CFURLStorageSession const*>,WTF::RetainPtr<OpaqueCFHTTPCookieStorage *>>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = WTF::fastMalloc((WTF *)0x128);
  uint64_t result = MEMORY[0x199735F30](v8, *a2, a3, a4, 0);
  *a1 = result;
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData const&,WebCore::PCM::AttributionTriggerData*>(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = a2;
    uint64_t v2 = a1;
    char v4 = *(unsigned char *)(a2 + 2);
    *(_WORD *)a1 = *(_WORD *)a2;
    *(unsigned char *)(a1 + objc_destroyWeak(this + 2) = v4;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    if (!*(unsigned char *)(a2 + 16)) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t v7 = *(_DWORD **)(v3 + 8);
  if (v7) {
    *v7 += 2;
  }
  *(void *)(v2 + 8) = v7;
  *(unsigned char *)(v2 + ++*(_DWORD *)(this + 16) = 1;
LABEL_3:
  *(unsigned char *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 3objc_destroyWeak(this + 2) = 0;
  if (*(unsigned char *)(v3 + 32))
  {
    int v5 = *(_DWORD **)(v3 + 24);
    if (v5) {
      *v5 += 2;
    }
    *(void *)(v2 + 24) = v5;
    *(unsigned char *)(v2 + 3objc_destroyWeak(this + 2) = 1;
  }
  *(unsigned char *)(v2 + 40) = 0;
  *(unsigned char *)(v2 + 48) = 0;
  if (*(unsigned char *)(v3 + 48))
  {
    uint64_t v8 = *(_DWORD **)(v3 + 40);
    if (v8) {
      *v8 += 2;
    }
    *(void *)(v2 + 40) = v8;
    *(unsigned char *)(v2 + 48) = 1;
  }
  *(unsigned char *)(v2 + 56) = 0;
  *(unsigned char *)(v2 + ++*(_DWORD *)(this - 88) = 0;
  if (*(unsigned char *)(v3 + 88))
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::DestinationUnlinkableToken,WebCore::PCM::DestinationUnlinkableToken const&,WebCore::PCM::DestinationUnlinkableToken*>((void *)(v2 + 56), v3 + 56);
    *(unsigned char *)(v2 + ++*(_DWORD *)(this - 88) = 1;
  }
  *(unsigned char *)(v2 + 96) = 0;
  *(unsigned char *)(v2 + 120) = 0;
  if (*(unsigned char *)(v3 + 120))
  {
    std::construct_at[abi:sn180100]<WebCore::PCM::DestinationSecretToken,WebCore::PCM::DestinationSecretToken const&,WebCore::PCM::DestinationSecretToken*>((void *)(v2 + 96), v3 + 96);
    *(unsigned char *)(v2 + 120) = 1;
  }
  return v2;
}

uint64_t std::construct_at[abi:sn180100]<WebKit::FrameInfoData,WebKit::FrameInfoData const&,WebKit::FrameInfoData*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    *(_WORD *)uint64_t result = *(_WORD *)a2;
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(result + 8), (const String *)(a2 + 8));
    *(unsigned char *)(v3 + 208) = 0;
    *(_DWORD *)(v3 + 23objc_destroyWeak(this + 2) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v3 + 208, a2 + 208);
    char v4 = *(_DWORD **)(a2 + 240);
    if (v4) {
      *v4 += 2;
    }
    *(void *)(v3 + 240) = v4;
    long long v5 = *(_OWORD *)(a2 + 248);
    long long v6 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(v3 + 278) = *(_OWORD *)(a2 + 278);
    *(_OWORD *)(v3 + 264) = v6;
    *(_OWORD *)(v3 + 248) = v5;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__optional_move_base<WebKit::NetworkActivityTracker,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v4 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)a1 = v4;
    long long v5 = (const void *)a2[2];
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = v5;
    if (v5) {
      CFRetain(v5);
    }
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<unsigned long WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::RegistrableDomain>(WebCore::RegistrableDomain const&)::{lambda(WebCore::RegistrableDomain&)#1}>(uint64_t a1, const WTF::StringImpl ***a2, const WTF::StringImpl *a3)
{
  if (!*(_DWORD *)(a1 + 12)) {
    return -1;
  }
  uint64_t v5 = 0;
  while ((WTF::equal(*(WTF **)(*(void *)a1 + 8 * v5), **a2, a3) & 1) == 0)
  {
    if (++v5 >= (unint64_t)*(unsigned int *)(a1 + 12)) {
      return -1;
    }
  }
  return v5;
}

uint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData const&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 32 * *(unsigned int *)(a1 + 12);
  *(unsigned char *)uint64_t v4 = 0;
  *(_DWORD *)(v4 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v4, v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 152))
  {
    unint64_t v3 = *(WTF::StringImpl **)(a1 + 96);
    *(void *)(a1 + 96) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 80, a2);
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 72);
    *(void *)(a1 + 7objc_destroyWeak(this + 2) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    long long v6 = *(WTF::StringImpl **)(a1 + 32);
    *(void *)(a1 + 3objc_destroyWeak(this + 2) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v4);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t v7 = *(unsigned int *)(a1 + 24);
    if (v7 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9C39D0[v7])(&v9, a1);
    }
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkDataTask::scheduleFailure(WebKit::NetworkDataTask::FailureType)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C3A78;
  unint64_t v3 = (atomic_uchar *)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkDataTask::scheduleFailure(WebKit::NetworkDataTask::FailureType)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C3A78;
  unint64_t v3 = (atomic_uchar *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::NetworkDataTask::scheduleFailure(WebKit::NetworkDataTask::FailureType)::$_0,void>::call(uint64_t a1)
{
  uint64_t result = *(atomic_uchar **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 24), &v6);
    if (v6)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t result = *(atomic_uchar **)(v4 + 8);
        if (result)
        {
          switch(*(unsigned char *)(a1 + 32))
          {
            case 0:
              uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 56))(result);
              break;
            case 1:
              uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 64))(result);
              break;
            case 2:
              uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 72))(result);
              break;
            case 3:
              uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 80))(result);
              break;
            default:
              break;
          }
        }
      }
      uint64_t v5 = v6;
      uint64_t v6 = 0;
      if (v5) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v5 + 8));
      }
    }
  }
  return result;
}

uint64_t *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, char *a2, unsigned int a3, uint64_t a4, unsigned char *a5, unsigned int a6)
{
  if (a3)
  {
    if (a3 == 1) {
      *__dst = *a2;
    }
    else {
      memcpy(__dst, a2, a3);
    }
  }
  unsigned int v11 = &__dst[a3];
  uint64_t v14 = a4;
  uint64_t result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v14, v11);
  uint64_t v13 = v14;
  if (v14) {
    uint64_t v13 = *(unsigned int *)(v14 + 4);
  }
  if (a6)
  {
    uint64_t result = (uint64_t *)&v11[v13];
    if (a6 == 1) {
      *(unsigned char *)uint64_t result = *a5;
    }
    else {
      return (uint64_t *)memcpy(result, a5, a6);
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 29))
  {
    int v5 = v3;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v5;
    *(void *)uint64_t v2 = v6;
    uint64_t v7 = *(unsigned int *)(a2 + 12);
    if (v7)
    {
      uint64_t v8 = *(uint64_t **)a2;
      uint64_t v9 = 8 * v7;
      do
      {
        uint64_t v10 = *v8;
        if (*v8) {
          ++*(_DWORD *)(v10 + 8);
        }
        *v6++ = v10;
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::BlobData,(WTF::DestructionThread)0>::deref(unsigned int *result, void *a2)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    WebCore::BlobData::~BlobData((WebCore::BlobData *)result, a2);
    return (unsigned int *)WTF::fastFree(v2, v3);
  }
  return result;
}

void WebCore::BlobData::~BlobData(WebCore::BlobData *this, void *a2)
{
  uint64_t v3 = *((unsigned int *)this + 27);
  if (v3)
  {
    uint64_t v4 = 40 * v3;
    int v5 = (_DWORD **)(*((void *)this + 12) + 16);
    do
    {
      uint64_t v6 = *v5;
      *int v5 = 0;
      if (v6)
      {
        if (v6[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
        }
        else {
          --v6[2];
        }
      }
      uint64_t v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7) {
        WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref(v7, a2);
      }
      v5 += 5;
      v4 -= 40;
    }
    while (v4);
  }
  uint64_t v8 = (WTF *)*((void *)this + 12);
  if (v8)
  {
    *((void *)this + 1objc_destroyWeak(this + 2) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v8, a2);
  }
  uint64_t v9 = (WTF::StringImpl *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  unsigned int v11 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  uint64_t v14 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskBlob::resume(void)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C3AA0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskBlob::resume(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C3AA0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

WebCore::AsyncFileStream *WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskBlob::resume(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if ((*(_DWORD *)(v1 + 608) & 0xFFFFFFFE) != 2 && (uint64_t v2 = *(void *)(v1 + 24)) != 0 && *(void *)(v2 + 8))
  {
    uint64_t v3 = *(void *)WebCore::ResourceRequestBase::httpMethod((WebCore::ResourceRequestBase *)(v1 + 128));
    if (v3 && (WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>(v3, "get", 3uLL) & 1) != 0)
    {
      if (*(void *)(v1 + 560))
      {
        WebCore::ResourceRequestBase::httpHeaderField();
        *(unsigned char *)(v1 + 61objc_destroyWeak(this + 2) = v12 != 0;
        if (!v12 || (WebCore::parseRange() & 1) != 0) {
          WebKit::NetworkDataTaskBlob::getSizeForNext((WebKit::NetworkDataTaskBlob *)v1, v4, v5, v6);
        }
        else {
          WebKit::NetworkDataTaskBlob::didFail(v1, 3);
        }
        uint64_t result = v12;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            return (WebCore::AsyncFileStream *)WTF::StringImpl::destroy(v12, v7);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
        return result;
      }
      uint64_t v10 = v1;
      int v11 = 1;
    }
    else
    {
      uint64_t v10 = v1;
      int v11 = 5;
    }
    return (WebCore::AsyncFileStream *)WebKit::NetworkDataTaskBlob::didFail(v10, v11);
  }
  else
  {
    uint64_t v9 = *(WebCore::AsyncFileStream **)(a1 + 8);
    return WebKit::NetworkDataTaskBlob::clearStream(v9);
  }
}

unint64_t WTF::Vector<long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    uint64_t v9 = a3 - v5;
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v9;
  }
  else
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10) {
      unint64_t v7 = v6 + 1;
    }
    else {
      unint64_t v7 = 16;
    }
    if (v7 > a2) {
      a2 = v7;
    }
    WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskBlob::dispatchDidReceiveResponse(void)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C3AC8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskBlob::dispatchDidReceiveResponse(void)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C3AC8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

WebCore::AsyncFileStream *WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskBlob::dispatchDidReceiveResponse(void)::$_0,void,WebCore::PolicyAction>::call(WebCore::AsyncFileStream *result, int *a2, uint64_t a3)
{
  uint64_t v3 = (unsigned int *)*((void *)result + 1);
  if ((v3[152] & 0xFFFFFFFE) == 2)
  {
    uint64_t v8 = (WebCore::AsyncFileStream *)*((void *)result + 1);
    return WebKit::NetworkDataTaskBlob::clearStream(v8);
  }
  else if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v9 = (WebKit::NetworkDataTaskBlob *)*((void *)result + 1);
      return WebKit::NetworkDataTaskBlob::download(v9);
    }
  }
  else
  {
    if (!(v3[147] >> 19))
    {
      unint64_t v4 = v3[146];
      if (!(v4 >> 19))
      {
        unint64_t v5 = v4 + (v4 >> 2);
        uint64_t v6 = 0x7FFFFLL;
        if (v5 >= 0x80000) {
          uint64_t v6 = v5;
        }
        if (v5 >= 0x10) {
          uint64_t v7 = v6 + 1;
        }
        else {
          uint64_t v7 = 0x80000;
        }
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)(v3 + 144), (WTF::FastMalloc *)v7);
      }
    }
    v3[147] = 0x80000;
    return WebKit::NetworkDataTaskBlob::read((WTF::StringImpl *)v3, a2, a3);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkLoad::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,WebCore::ResourceRequest>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C3AF0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkLoad::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,WebCore::ResourceRequest>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C3AF0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkLoad::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,WebCore::ResourceRequest>::call(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = WebCore::ResourceRequest::nsURLRequest();
    MEMORY[0x199732A50](&v21, v4);
    WebCore::ResourceRequest::updateFromDelegatePreservingOldProperties((WebCore::ResourceRequest *)(v3 + 3024), (const WebCore::ResourceRequest *)&v21);
    CFTypeRef v5 = cf;
    CFTypeRef cf = 0;
    if (v5) {
      CFRelease(v5);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v21);
    if (WebCore::ResourceRequestBase::isNull((WebCore::ResourceRequestBase *)(v3 + 3024)))
    {
      WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v18);
      WebKit::cancelledError((WebKit *)(v3 + 3024), (uint64_t)&v21);
      WebKit::NetworkLoad::didCompleteWithError((WebKit::NetworkLoad *)v3, (const WebCore::ResourceError *)&v21, v18);
      CFTypeRef v7 = v24;
      CFTypeRef v24 = 0;
      if (v7) {
        CFRelease(v7);
      }
      uint64_t v8 = v23;
      uint64_t v23 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v6);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      unint64_t v11 = v22;
      uint64_t v22 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v6);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      uint64_t v12 = v21;
      uint64_t v21 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v6);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
      WebCore::ResourceRequest::ResourceRequest((StringImpl *)&v21);
      uint64_t v13 = a1[3];
      a1[3] = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v13 + 16))(v13, &v21);
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      CFTypeRef v14 = cf;
      CFTypeRef cf = 0;
      if (v14) {
        CFRelease(v14);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v21);
      uint64_t v16 = v20;
      uint64_t v20 = 0;
      if (v16) {
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v16);
      }
      uint64_t v17 = v19;
      uint64_t v19 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v15);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      return;
    }
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&v21, (const String *)(v3 + 3024));
  }
  else
  {
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)&v21);
  }
  uint64_t v9 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v9 + 16))(v9, &v21);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  CFTypeRef v10 = cf;
  CFTypeRef cf = 0;
  if (v10) {
    CFRelease(v10);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v21);
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  uint64_t v6 = a1[1];
  BOOL v7 = v6 != 0;
  unint64_t v8 = v6 - 1;
  if (!v7) {
    unint64_t v8 = 0;
  }
  uint64_t v20 = *a1;
  if (v8 >> 31) {
    goto LABEL_13;
  }
  int v21 = v8;
  uint64_t v19 = *a2;
  uint64_t v9 = a3[1];
  BOOL v7 = v9 != 0;
  unint64_t v10 = v9 - 1;
  if (!v7) {
    unint64_t v10 = 0;
  }
  uint64_t v17 = *a3;
  if (v10 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198B6C56CLL);
  }
  int v18 = v10;
  uint64_t v16 = *a4;
  uint64_t v11 = a5[1];
  BOOL v7 = v11 != 0;
  unint64_t v12 = v11 - 1;
  if (!v7) {
    unint64_t v12 = 0;
  }
  uint64_t v14 = *a5;
  if (v12 >> 31)
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x198B6C54CLL);
  }
  int v15 = v12;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)&v20, &v19, (uint64_t)&v17, &v16, (uint64_t)&v14, a6);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v7 = *a2;
  if (*a2) {
    int v8 = *(_DWORD *)(v7 + 4);
  }
  else {
    int v8 = 0;
  }
  uint64_t v9 = *a4;
  if (*a4) {
    int v10 = *(_DWORD *)(v9 + 4);
  }
  else {
    int v10 = 0;
  }
  int v11 = *(_DWORD *)(a5 + 8);
  if ((v11 | v10) < 0) {
    goto LABEL_30;
  }
  int v12 = *(_DWORD *)(a3 + 8);
  BOOL v13 = __OFADD__(v10, v11);
  int v14 = v10 + v11;
  BOOL v15 = v13;
  if (v12 < 0 || v15) {
    goto LABEL_30;
  }
  BOOL v13 = __OFADD__(v12, v14);
  int v16 = v12 + v14;
  BOOL v17 = v13;
  if (v8 < 0
    || v17
    || ((v18 = *(_DWORD *)(result + 8), BOOL v13 = __OFADD__(v8, v16), v19 = v8 + v16, !v13) ? (v20 = 0) : (v20 = 1),
        v18 < 0 || (v20 & 1) != 0 || (BOOL v13 = __OFADD__(v18, v19), v21 = (v18 + v19), v13)))
  {
LABEL_30:
    *a6 = 0;
  }
  else
  {
    BOOL v22 = (!v7 || (*(unsigned char *)(v7 + 16) & 4) != 0) && (!v9 || (*(unsigned char *)(v9 + 16) & 4) != 0);
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v21, v22, *(int8x16_t **)result, *(void *)(result + 8), v7, *(int8x16_t **)a3, *(void *)(a3 + 8), v9, a6, *(int8x16_t **)a5, *(void *)(a5 + 8));
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>, int8x16_t *a10, unsigned int a11)
{
  int v16 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        int v19 = v29;
        if (v29)
        {
          char v20 = a9;
          uint64_t v21 = v29 + 5;
          *__int16 v29 = 2;
          v19[1] = v16;
          *((void *)v19 + 1) = v19 + 5;
          uint64_t v19[4] = 4;
          if (a4)
          {
            if (a4 == 1) {
              unsigned char *v21 = a3->i8[0];
            }
            else {
              memcpy(v19 + 5, a3, a4);
            }
          }
          BOOL v22 = &v21[a4];
          __int16 v29 = (_DWORD *)a5;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v29, v22);
          unint64_t v23 = (unint64_t)v29;
          if (v29) {
            unint64_t v23 = v29[1];
          }
          uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v22[v23], a6->i8, a7, a8, a10, a11);
          a9 = v20;
        }
        goto LABEL_17;
      }
LABEL_13:
      int v19 = 0;
      goto LABEL_17;
    }
LABEL_14:
    int v19 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_17;
  }
  if (!result) {
    goto LABEL_14;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_13;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  int v19 = v29;
  if (v29)
  {
    uint64_t v25 = (char *)(v29 + 5);
    *__int16 v29 = 2;
    v19[1] = v16;
    *((void *)v19 + 1) = v19 + 5;
    uint64_t v19[4] = 0;
    uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v25, a3, a4, a5, a6, a7, a8, v24, a10, a11);
  }
LABEL_17:
  *a9 = v19;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::checkRedirection(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,WebCore::ContentSecurityPolicyClient *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&)> &&)::$_0,void,std::variant<WebCore::ResourceRequest,std::experimental::fundamentals_v3,std::experimental::fundamentals_v3::expected> &&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C3B18;
  uint64_t v3 = (WebCore::ResourceResponseBase *)(a1 + 27);
  uint64_t v4 = (const void *)a1[57];
  a1[57] = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  CFTypeRef v5 = (const void *)a1[26];
  a1[26] = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 2));
  uint64_t v6 = a1[1];
  a1[1] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::checkRedirection(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,WebCore::ContentSecurityPolicyClient *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&)> &&)::$_0,void,std::variant<WebCore::ResourceRequest,std::experimental::fundamentals_v3,std::experimental::fundamentals_v3::expected> &&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9C3B18;
  uint64_t v3 = (WebCore::ResourceResponseBase *)(a1 + 27);
  uint64_t v4 = (const void *)a1[57];
  a1[57] = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  CFTypeRef v5 = (const void *)a1[26];
  a1[26] = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 2));
  uint64_t v7 = a1[1];
  a1[1] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  return WTF::fastFree((WTF *)a1, v6);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::checkRedirection(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,WebCore::ContentSecurityPolicyClient *,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&)> &&)::$_0,void,std::variant<WebCore::ResourceRequest,std::experimental::fundamentals_v3,std::experimental::fundamentals_v3::expected> &&>::call(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 656);
  if (v4 == -1) {
    uint64_t v5 = -1;
  }
  else {
    uint64_t v5 = *(unsigned int *)(a2 + 656);
  }
  if (v5 != 2)
  {
    uint64_t v6 = (uint64_t *)(a1 + 16);
    if (v5 == 1)
    {
      if (v4 == 1)
      {
        WTF::URL::URL((uint64_t)v61, v6);
        WTF::URL::URL((uint64_t)&v63 + 8, (uint64_t *)(a1 + 56));
        uint64_t v69 = *(void *)(a1 + 96);
        long long v7 = *(_OWORD *)(a1 + 104);
        *(_OWORD *)(a1 + 104) = 0u;
        long long v70 = v7;
        *(void *)&long long v7 = *(void *)(a1 + 120);
        *(void *)(a1 + 120) = 0;
        uint64_t v71 = v7;
        uint64_t v8 = *(void *)(a1 + 128);
        *(void *)(a1 + 128) = 0;
        uint64_t v72 = v8;
        *(void *)&long long v7 = *(void *)(a1 + 136);
        *(void *)(a1 + 136) = 0;
        uint64_t v73 = v7;
        uint64_t v9 = *(void *)(a1 + 144);
        *(void *)(a1 + 144) = 0;
        uint64_t v74 = v9;
        *(void *)&long long v7 = *(void *)(a1 + 152);
        *(void *)(a1 + 15objc_destroyWeak(this + 2) = 0;
        uint64_t v75 = v7;
        LODWORD(v9) = *(_DWORD *)(a1 + 160);
        char v77 = *(unsigned char *)(a1 + 164);
        int v76 = v9;
        long long v10 = *(_OWORD *)(a1 + 168);
        *(_OWORD *)(a1 + 168) = 0u;
        long long v78 = v10;
        uint64_t v11 = *(void *)(a1 + 184);
        uint64_t v12 = *(void *)(a1 + 192);
        *(void *)(a1 + 184) = 0;
        char v81 = *(unsigned char *)(a1 + 200);
        uint64_t v79 = v11;
        uint64_t v80 = v12;
        BOOL v13 = *(const void **)(a1 + 208);
        *(void *)(a1 + 208) = 0;
        CFTypeRef v82 = v13;
        WTF::URL::URL((uint64_t)v83, (uint64_t *)(a2 + 200));
        WTF::URL::URL((uint64_t)v84, (uint64_t *)(a2 + 240));
        uint64_t v85 = *(void *)(a2 + 280);
        long long v14 = *(_OWORD *)(a2 + 288);
        *(_OWORD *)(a2 + 2++*(_DWORD *)(this - 88) = 0u;
        long long v86 = v14;
        *(void *)&long long v14 = *(void *)(a2 + 304);
        *(void *)(a2 + 304) = 0;
        uint64_t v87 = v14;
        uint64_t v15 = *(void *)(a2 + 312);
        *(void *)(a2 + 31objc_destroyWeak(this + 2) = 0;
        uint64_t v88 = v15;
        *(void *)&long long v14 = *(void *)(a2 + 320);
        *(void *)(a2 + 320) = 0;
        uint64_t v89 = v14;
        uint64_t v16 = *(void *)(a2 + 328);
        *(void *)(a2 + 328) = 0;
        uint64_t v90 = v16;
        *(void *)&long long v14 = *(void *)(a2 + 336);
        *(void *)(a2 + 336) = 0;
        uint64_t v91 = v14;
        LODWORD(v++*(_DWORD *)(this + 16) = *(_DWORD *)(a2 + 344);
        char v93 = *(unsigned char *)(a2 + 348);
        int v92 = v16;
        long long v17 = *(_OWORD *)(a2 + 352);
        *(_OWORD *)(a2 + 35objc_destroyWeak(this + 2) = 0u;
        long long v94 = v17;
        char v97 = *(unsigned char *)(a2 + 384);
        uint64_t v18 = *(void *)(a2 + 368);
        uint64_t v19 = *(void *)(a2 + 376);
        *(void *)(a2 + 368) = 0;
        uint64_t v95 = v18;
        uint64_t v96 = v19;
        char v20 = *(const void **)(a2 + 392);
        *(void *)(a2 + 39objc_destroyWeak(this + 2) = 0;
LABEL_18:
        CFTypeRef v98 = v20;
        WTF::URL::URL((uint64_t)v99, (uint64_t *)(a1 + 216));
        long long v42 = *(_OWORD *)(a1 + 272);
        long long v43 = *(_OWORD *)(a1 + 288);
        *(_OWORD *)(a1 + 27objc_destroyWeak(this + 2) = 0u;
        *(_OWORD *)(a1 + 2++*(_DWORD *)(this - 88) = 0u;
        uint64_t v44 = *(void *)(a1 + 256);
        uint64_t v45 = *(void *)(a1 + 264);
        *(void *)(a1 + 256) = 0;
        v99[5] = v44;
        v99[6] = v45;
        long long v100 = v42;
        long long v101 = v43;
        *(void *)&long long v42 = *(void *)(a1 + 304);
        *(void *)(a1 + 304) = 0;
        uint64_t v102 = v42;
        uint64_t v46 = *(void *)(a1 + 312);
        *(void *)(a1 + 31objc_destroyWeak(this + 2) = 0;
        uint64_t v103 = v46;
        *(void *)&long long v42 = *(void *)(a1 + 320);
        *(void *)(a1 + 320) = 0;
        uint64_t v104 = v42;
        uint64_t v47 = *(void *)(a1 + 328);
        *(void *)(a1 + 328) = 0;
        uint64_t v105 = v47;
        LOBYTE(v106) = 0;
        char v107 = 0;
        if (*(unsigned char *)(a1 + 344))
        {
          uint64_t v57 = *(void *)(a1 + 336);
          *(void *)(a1 + 336) = 0;
          uint64_t v106 = v57;
          char v107 = 1;
        }
        long long v48 = *(_OWORD *)(a1 + 384);
        long long v111 = *(_OWORD *)(a1 + 400);
        long long v49 = *(_OWORD *)(a1 + 432);
        long long v112 = *(_OWORD *)(a1 + 416);
        *(_OWORD *)uint64_t v113 = v49;
        long long v50 = *(_OWORD *)(a1 + 368);
        long long v108 = *(_OWORD *)(a1 + 352);
        long long v109 = v50;
        long long v110 = v48;
        *(_DWORD *)&v113[15] = *(_DWORD *)(a1 + 447);
        char v51 = *(const void **)(a1 + 456);
        *(void *)(a1 + 456) = 0;
        CFTypeRef cf = v51;
        char v115 = *(unsigned char *)(a1 + 464);
        WebKit::NetworkLoadChecker::RedirectionTriplet::RedirectionTriplet((uint64_t)v116, (uint64_t)v61);
        int v122 = 0;
        uint64_t v52 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = 0;
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v52 + 16))(v52, v116);
        (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
        if (v122 != -1) {
          ((void (*)(char *, _OWORD *))off_1EE9C39E0[v122])(&v123, v116);
        }
        int v122 = -1;
        CFTypeRef v54 = cf;
        CFTypeRef cf = 0;
        if (v54) {
          CFRelease(v54);
        }
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v99, v53);
        CFTypeRef v55 = v98;
        CFTypeRef v98 = 0;
        if (v55) {
          CFRelease(v55);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v83);
        CFTypeRef v56 = v82;
        CFTypeRef v82 = 0;
        if (v56) {
          CFRelease(v56);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v61);
        return;
      }
    }
    else if (!v4)
    {
      WTF::URL::URL((uint64_t)v61, v6);
      WTF::URL::URL((uint64_t)&v63 + 8, (uint64_t *)(a1 + 56));
      uint64_t v69 = *(void *)(a1 + 96);
      long long v29 = *(_OWORD *)(a1 + 104);
      *(_OWORD *)(a1 + 104) = 0u;
      long long v70 = v29;
      *(void *)&long long v29 = *(void *)(a1 + 120);
      *(void *)(a1 + 120) = 0;
      uint64_t v71 = v29;
      uint64_t v30 = *(void *)(a1 + 128);
      *(void *)(a1 + 128) = 0;
      uint64_t v72 = v30;
      *(void *)&long long v29 = *(void *)(a1 + 136);
      *(void *)(a1 + 136) = 0;
      uint64_t v73 = v29;
      uint64_t v31 = *(void *)(a1 + 144);
      *(void *)(a1 + 144) = 0;
      uint64_t v74 = v31;
      *(void *)&long long v29 = *(void *)(a1 + 152);
      *(void *)(a1 + 15objc_destroyWeak(this + 2) = 0;
      uint64_t v75 = v29;
      LODWORD(v31) = *(_DWORD *)(a1 + 160);
      char v77 = *(unsigned char *)(a1 + 164);
      int v76 = v31;
      long long v32 = *(_OWORD *)(a1 + 168);
      *(_OWORD *)(a1 + 168) = 0u;
      long long v78 = v32;
      uint64_t v33 = *(void *)(a1 + 184);
      uint64_t v34 = *(void *)(a1 + 192);
      *(void *)(a1 + 184) = 0;
      char v81 = *(unsigned char *)(a1 + 200);
      uint64_t v79 = v33;
      uint64_t v80 = v34;
      __int16 v35 = *(const void **)(a1 + 208);
      *(void *)(a1 + 208) = 0;
      CFTypeRef v82 = v35;
      WTF::URL::URL((uint64_t)v83, (uint64_t *)a2);
      WTF::URL::URL((uint64_t)v84, (uint64_t *)(a2 + 40));
      uint64_t v85 = *(void *)(a2 + 80);
      long long v36 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a2 + ++*(_DWORD *)(this - 88) = 0u;
      long long v86 = v36;
      *(void *)&long long v36 = *(void *)(a2 + 104);
      *(void *)(a2 + 104) = 0;
      uint64_t v87 = v36;
      uint64_t v37 = *(void *)(a2 + 112);
      *(void *)(a2 + 11objc_destroyWeak(this + 2) = 0;
      uint64_t v88 = v37;
      *(void *)&long long v36 = *(void *)(a2 + 120);
      *(void *)(a2 + 120) = 0;
      uint64_t v89 = v36;
      uint64_t v38 = *(void *)(a2 + 128);
      *(void *)(a2 + 128) = 0;
      uint64_t v90 = v38;
      *(void *)&long long v36 = *(void *)(a2 + 136);
      *(void *)(a2 + 136) = 0;
      uint64_t v91 = v36;
      LODWORD(v38) = *(_DWORD *)(a2 + 144);
      char v93 = *(unsigned char *)(a2 + 148);
      int v92 = v38;
      long long v39 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a2 + 15objc_destroyWeak(this + 2) = 0u;
      long long v94 = v39;
      char v97 = *(unsigned char *)(a2 + 184);
      uint64_t v40 = *(void *)(a2 + 168);
      uint64_t v41 = *(void *)(a2 + 176);
      *(void *)(a2 + 168) = 0;
      uint64_t v95 = v40;
      uint64_t v96 = v41;
      char v20 = *(const void **)(a2 + 192);
      *(void *)(a2 + 19objc_destroyWeak(this + 2) = 0;
      goto LABEL_18;
    }
LABEL_39:
    uint64_t v60 = std::__throw_bad_variant_access[abi:sn180100]();
    WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::checkRequest(WebCore::ResourceRequest &&,WebCore::ContentSecurityPolicyClient *,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebKit::NetworkLoadChecker::RedirectionTriplet> &&>::~CallableWrapper(v60);
    return;
  }
  if (v4 != 2) {
    goto LABEL_39;
  }
  uint64_t v21 = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  v61[0] = v21;
  WTF::URL::URL((uint64_t)&v61[1], (uint64_t *)(a2 + 8));
  uint64_t v22 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  int v65 = *(_DWORD *)(a2 + 56);
  __int16 v66 = *(_WORD *)(a2 + 60);
  uint64_t v23 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  char v68 = *(unsigned char *)(a2 + 72);
  long long v24 = *(_OWORD *)v61;
  v61[0] = 0;
  v61[1] = 0;
  v116[0] = v24;
  v116[1] = v62;
  v116[2] = v63;
  LODWORD(v6objc_destroyWeak(this + 2) = v62 & 0xFFFFFFFE;
  uint64_t v64 = 0;
  uint64_t v117 = v22;
  LODWORD(v2objc_destroyWeak(this + 2) = *(_DWORD *)(a2 + 56);
  __int16 v119 = *(_WORD *)(a2 + 60);
  int v118 = v22;
  CFTypeRef v67 = 0;
  uint64_t v120 = v23;
  char v121 = v68;
  int v122 = 1;
  uint64_t v25 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v25 + 16))(v25, v116);
  (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  if (v122 != -1) {
    ((void (*)(char *, _OWORD *))off_1EE9C39E0[v122])(&v123, v116);
  }
  int v122 = -1;
  CFTypeRef v27 = v67;
  CFTypeRef v67 = 0;
  if (v27) {
    CFRelease(v27);
  }
  uint64_t v28 = v64;
  uint64_t v64 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v26);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  long long v58 = v61[1];
  v61[1] = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2) {
      WTF::StringImpl::destroy(v58, v26);
    }
    else {
      *(_DWORD *)v58 -= 2;
    }
  }
  uint64_t v59 = v61[0];
  v61[0] = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2) {
      WTF::StringImpl::destroy(v59, v26);
    }
    else {
      *(_DWORD *)v59 -= 2;
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::checkRequest(WebCore::ResourceRequest &&,WebCore::ContentSecurityPolicyClient *,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebKit::NetworkLoadChecker::RedirectionTriplet> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C3B40;
  uint64_t v2 = (WebCore::ResourceRequestBase *)(a1 + 3);
  uint64_t v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::checkRequest(WebCore::ResourceRequest &&,WebCore::ContentSecurityPolicyClient *,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebKit::NetworkLoadChecker::RedirectionTriplet> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C3B40;
  uint64_t v2 = (WebCore::ResourceRequestBase *)(a1 + 3);
  uint64_t v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v4);
  }

  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::checkRequest(WebCore::ResourceRequest &&,WebCore::ContentSecurityPolicyClient *,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebKit::NetworkLoadChecker::RedirectionTriplet> &&>::call(uint64_t a1, WebCore::ResourceRequestBase *this)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)this + 52);
  if (v4)
  {
    if (v4 != 1)
    {
      uint64_t v50 = std::__throw_bad_variant_access[abi:sn180100]();
      WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::processContentRuleListsForLoad(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebCore::ResourceError> &&)> &&)::$_0,void,WebCore::ContentExtensions::ContentExtensionsBackend &>::~CallableWrapper(v50);
      return;
    }
    std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError>::variant[abi:sn180100]<WebCore::ResourceError,0,0,0,WebCore::ResourceError,2ul,0>((uint64_t)buf, (uint64_t *)this);
    uint64_t v45 = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v45 + 16))(v45, buf);
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
    goto LABEL_11;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5 || (uint64_t v6 = *(void *)(v5 + 8)) == 0)
  {
    char v51 = 0;
    v52[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v52);
    v52[5] = 0;
    int v53 = 0;
    __int16 v54 = 3;
    uint64_t v55 = 0;
    char v56 = 1;
    std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError>::variant[abi:sn180100]<WebCore::ResourceError,0,0,0,WebCore::ResourceError,2ul,0>((uint64_t)buf, (uint64_t *)&v51);
    uint64_t v46 = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v46 + 16))(v46, buf);
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
    if (v64 != -1) {
      (*(&off_1EE9C39F0 + v64))((int)v59, (WebCore::ResourceRequestBase *)buf);
    }
    unsigned int v64 = -1;
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&v51, v47);
    return;
  }
  if (!**((unsigned char **)this + 25))
  {
    long long v7 = (const void **)(a1 + 16);
    if (!*(unsigned char *)(v6 + 1136))
    {
      __int16 v35 = (WebCore::ResourceRequestBase *)(a1 + 24);
      long long v36 = (WTF **)WebCore::ResourceRequestBase::url(this);
      uint64_t v37 = (const WTF::StringImpl **)WebCore::ResourceRequestBase::url(v35);
      if ((WTF::equal(*v36, *v37, v38) & 1) == 0)
      {
        long long v39 = (WebCore::ResourceResponseBase *)WebCore::ResourceRequestBase::url(v35);
        uint64_t v40 = (const WTF::URL *)WebCore::ResourceRequestBase::url(this);
        WebCore::ResourceResponseBase::syntheticRedirectResponse(v59, v39, v40, v41);
        std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)&v51, (uint64_t)v35);
        std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)&v57, (uint64_t)this);
        std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v58, (uint64_t)v59);
        WebKit::NetworkLoadChecker::RedirectionTriplet::RedirectionTriplet((uint64_t)buf, (uint64_t)&v51);
        unsigned int v64 = 1;
        long long v42 = *v7;
        *long long v7 = 0;
        (*(void (**)(const void *, unsigned char *))(*(void *)v42 + 16))(v42, buf);
        (*(void (**)(const void *))(*(void *)v42 + 8))(v42);
        if (v64 != -1) {
          (*(&off_1EE9C39F0 + v64))((int)&v60, (WebCore::ResourceRequestBase *)buf);
        }
        unsigned int v64 = -1;
        WebKit::NetworkLoadChecker::RedirectionTriplet::~RedirectionTriplet((WebKit::NetworkLoadChecker::RedirectionTriplet *)&v51, v43);
        WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)v59, v44);
        return;
      }
    }
    if (*(unsigned char *)(v6 + 18) == 1)
    {
      if (*(unsigned char *)(v6 + 448))
      {
        uint64_t v21 = (WebCore::EmptyOriginAccessPatterns *)WebCore::ResourceRequestBase::url(this);
        uint64_t v22 = *(void *)(v6 + 1152);
        if (!v22 || !*(void *)(v22 + 8)) {
          WebCore::EmptyOriginAccessPatterns::singleton(v21);
        }
        char canRequest = WebCore::SecurityOrigin::canRequest();
      }
      else
      {
        char canRequest = 0;
      }
      *(unsigned char *)(v6 + 64) = canRequest;
    }
    if (*(unsigned char *)(v6 + 448))
    {
      uint64_t v8 = (const WTF::URL *)WebCore::ResourceRequestBase::url(this);
      char isSameOrigin = WebKit::NetworkLoadChecker::isSameOrigin((WebKit::NetworkLoadChecker *)v6, v8, *(const WebCore::SecurityOrigin **)(v6 + 240));
    }
    else
    {
      char isSameOrigin = 0;
    }
    *(unsigned char *)(v6 + 448) = isSameOrigin;
    long long v10 = (WTF::URL *)WebCore::ResourceRequestBase::url(this);
    if ((*(unsigned __int8 *)(v6 + 17) | 2) != 2)
    {
      uint64_t v12 = *(void *)(v6 + 1144);
      if (!v12
        || (uint64_t v13 = WTF::URL::protocol(v10),
            WebKit::NetworkSchemeRegistry::shouldTreatURLSchemeAsCORSEnabled(v12, v13, v14)))
      {
        if (!*(unsigned char *)(v6 + 448))
        {
          if (*(unsigned char *)(v6 + 17) == 1)
          {
            uint64_t v15 = (WTF::URL *)WebCore::ResourceRequestBase::url(this);
            WTF::URL::stringCenterEllipsizedToLength(v15);
            WebCore::SecurityOrigin::toString((uint64_t *)&v60, *(WebCore::SecurityOrigin **)(v6 + 240));
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Unsafe attempt to load URL ", 28, v59, (uint64_t)" from origin ", 14, (uint64_t *)&v60, (uint64_t)". Domains, protocols and ports must match.\n", 44, &v51);
            WebKit::NetworkLoadChecker::accessControlErrorForValidationHandler((uint64_t)buf, v6, v51);
            uint64_t v16 = *v7;
            *long long v7 = 0;
            (*(void (**)(const void *, unsigned char *))(*(void *)v16 + 16))(v16, buf);
            (*(void (**)(const void *))(*(void *)v16 + 8))(v16);
            if (v64 != -1) {
              (*(&off_1EE9C39F0 + v64))((int)&v61, (WebCore::ResourceRequestBase *)buf);
            }
            unsigned int v64 = -1;
            uint64_t v18 = v51;
            char v51 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2) {
                WTF::StringImpl::destroy(v18, v17);
              }
              else {
                *(_DWORD *)v18 -= 2;
              }
            }
            uint64_t v19 = v60;
            uint64_t v60 = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 2) {
                WTF::StringImpl::destroy(v19, v17);
              }
              else {
                *(_DWORD *)v19 -= 2;
              }
            }
            char v20 = (WTF::StringImpl *)v59[0];
            v59[0] = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 != 2)
              {
                *(_DWORD *)v20 -= 2;
                return;
              }
LABEL_69:
              WTF::StringImpl::destroy(v20, v17);
              return;
            }
          }
          else
          {
            if (*(void *)(v6 + 464))
            {
              long long v24 = off_1EB358988;
              if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 134217984;
                *(void *)&uint8_t buf[4] = v6;
                _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%p - NetworkLoadChecker::checkRequest - Redirect requires CORS checks", buf, 0xCu);
              }
              *(unsigned char *)(v6 + 448) = 0;
              uint64_t v25 = *(void *)(v6 + 1152);
              if (!v25 || !*(void *)(v25 + 8)) {
                WebCore::EmptyOriginAccessPatterns::singleton(*(WebCore::EmptyOriginAccessPatterns **)(v6 + 240));
              }
              if ((WebCore::SecurityOrigin::canRequest() & 1) == 0)
              {
                uint64_t v26 = (const URL *)WebCore::ResourceRequestBase::url(this);
                uint64_t v28 = (WebCore::SecurityOrigin *)WTF::protocolHostAndPortAreEqual((WTF *)(v6 + 472), v26, v27);
                if ((v28 & 1) == 0)
                {
                  uint64_t v29 = *(void *)(v6 + 240);
                  if (!v29 || *(_DWORD *)(v29 + 32) != 1)
                  {
                    WebCore::SecurityOrigin::createOpaque((uint64_t *)buf, v28);
                    uint64_t v31 = *(void *)buf;
                    *(void *)long long buf = 0;
                    uint64_t v32 = *(void *)(v6 + 240);
                    *(void *)(v6 + 240) = v31;
                    if (v32)
                    {
                      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v32, v30);
                      uint64_t v34 = *(void *)buf;
                      *(void *)long long buf = 0;
                      if (v34) {
                        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v34, v33);
                      }
                    }
                  }
                }
              }
              WebCore::ResourceRequestBase::httpHeaderFields(this);
              if ((WebCore::HTTPHeaderMap::contains() & 1) == 0) {
                WebCore::HTTPHeaderMap::remove();
              }
              WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)buf, (WTF::ASCIILiteral *)(v6 + 128));
              WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v63, (WTF::ASCIILiteral *)(v6 + 144));
              WebCore::ResourceRequestBase::setHTTPHeaderFields();
              WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v63);
              WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)buf);
            }
            WebKit::NetworkLoadChecker::checkCORSRequest(v6, this, v7);
          }
          return;
        }
      }
    }
    std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)buf, (uint64_t)this);
    unsigned int v64 = 0;
    uint64_t v11 = *v7;
    *long long v7 = 0;
    (*(void (**)(const void *, unsigned char *))(*(void *)v11 + 16))(v11, buf);
    (*(void (**)(const void *))(*(void *)v11 + 8))(v11);
LABEL_11:
    if (v64 != -1) {
      (*(&off_1EE9C39F0 + v64))((int)&v51, (WebCore::ResourceRequestBase *)buf);
    }
    return;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v48 = *(WTF::StringImpl **)buf;
  WebKit::NetworkLoadChecker::accessControlErrorForValidationHandler((uint64_t)buf, v6, *(_DWORD **)buf);
  uint64_t v49 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v49 + 16))(v49, buf);
  (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  if (v64 != -1) {
    (*(&off_1EE9C39F0 + v64))((int)&v51, (WebCore::ResourceRequestBase *)buf);
  }
  unsigned int v64 = -1;
  if (v48)
  {
    if (*(_DWORD *)v48 != 2)
    {
      *(_DWORD *)v48 -= 2;
      return;
    }
    char v20 = v48;
    goto LABEL_69;
  }
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::processContentRuleListsForLoad(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebCore::ResourceError> &&)> &&)::$_0,void,WebCore::ContentExtensions::ContentExtensionsBackend &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C3B68;
  uint64_t v2 = a1[28];
  a1[28] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 3));
  uint64_t v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::processContentRuleListsForLoad(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebCore::ResourceError> &&)> &&)::$_0,void,WebCore::ContentExtensions::ContentExtensionsBackend &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9C3B68;
  uint64_t v2 = a1[28];
  a1[28] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 3));
  uint64_t v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }

  return WTF::fastFree((WTF *)a1, v4);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::processContentRuleListsForLoad(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebCore::ResourceError> &&)> &&)::$_0,void,WebCore::ContentExtensions::ContentExtensionsBackend &>::call(uint64_t a1, WebCore::ContentExtensions::ContentExtensionsBackend *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 && *(void *)(v3 + 8))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 24));
    WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(&v76, a2, v6, (const WTF::URL *)(v5 + 344), (const WTF::URL *)(v5 + 384));
    LODWORD(v83) = v76;
    *((void *)&v83 + 1) = 0;
    LODWORD(v84) = 0;
    DWORD1(v84) = v78;
    if (v78)
    {
      if (v78 >= 0x5555556)
      {
        __break(0xC471u);
        goto LABEL_49;
      }
      int v7 = 48 * v78;
      uint64_t v8 = WTF::fastMalloc((WTF *)(48 * v78));
      LODWORD(v84) = (v7 & 0xFFFFFFF0) / 0x30;
      *((void *)&v83 + 1) = v8;
      if (v78)
      {
        uint64_t v9 = v77 + 48 * v78;
        uint64_t v10 = v8 + 24;
        uint64_t v11 = v77 + 24;
        do
        {
          *(unsigned char *)(v10 - 24) = *(unsigned char *)(v11 - 24);
          WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v10 - 16, (uint64_t *)(v11 - 16));
          WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v10, (uint64_t *)v11);
          *(_DWORD *)(v10 + ++*(_DWORD *)(this + 16) = *(_DWORD *)(v11 + 16);
          v10 += 48;
          uint64_t v12 = v11 + 24;
          v11 += 48;
        }
        while (v12 != v9);
      }
    }
    *((void *)&v84 + 1) = 0;
    LODWORD(v85) = 0;
    DWORD1(v85) = v80;
    if (v80)
    {
      if (v80 >= 0x1AF286C)
      {
        __break(0xC471u);
        JUMPOUT(0x198B6E0F8);
      }
      unsigned int v13 = 152 * v80;
      uint64_t v14 = WTF::fastMalloc((WTF *)(152 * v80));
      LODWORD(v85) = v13 / 0x98;
      *((void *)&v84 + 1) = v14;
      if (v80)
      {
        uint64_t v15 = v79 + 152 * v80;
        uint64_t v16 = v14 + 104;
        uint64_t v17 = v79 + 8;
        do
        {
          uint64_t v18 = v17 - 8;
          *(unsigned char *)(v16 - 104) = *(unsigned char *)(v17 - 8);
          *(unsigned char *)(v16 - 96) = 0;
          *(_DWORD *)uint64_t v16 = -1;
          uint64_t v19 = *(unsigned int *)(v17 + 96);
          if (v19 != -1)
          {
            ((void (*)(WTF::StringImpl **, uint64_t, uint64_t))off_1EE9C3B98[v19])(v53, v16 - 96, v17);
            *(_DWORD *)uint64_t v16 = v19;
          }
          char v20 = *(_DWORD **)(v17 + 104);
          if (v20) {
            *v20 += 2;
          }
          *(void *)(v16 + 8) = v20;
          long long v21 = *(_OWORD *)(v17 + 128);
          *(_OWORD *)(v16 + ++*(_DWORD *)(this + 16) = *(_OWORD *)(v17 + 112);
          *(_OWORD *)(v16 + 3objc_destroyWeak(this + 2) = v21;
          v16 += 152;
          v17 += 152;
        }
        while (v18 + 152 != v15);
      }
    }
    unsigned int v22 = v82;
    *((void *)&v85 + 1) = 0;
    LODWORD(v86) = 0;
    HIDWORD(v86) = v82;
    if (!v82) {
      goto LABEL_24;
    }
    if (!(v82 >> 27))
    {
      uint64_t v23 = WTF::fastMalloc((WTF *)(32 * v82));
      LODWORD(v86) = v22;
      *((void *)&v85 + 1) = v23;
      if (v82)
      {
        uint64_t v24 = v81 + 32 * v82;
        uint64_t v25 = v23 + 16;
        uint64_t v26 = v81 + 16;
        do
        {
          uint64_t v28 = v26 - 16;
          CFTypeRef v27 = *(_DWORD **)(v26 - 16);
          if (v27) {
            *v27 += 2;
          }
          uint64_t v29 = v25 - 16;
          *(void *)(v25 - ++*(_DWORD *)(this + 16) = v27;
          int v30 = *(_DWORD *)(v26 - 8);
          *(unsigned char *)(v29 + 1objc_destroyWeak(this + 2) = *(unsigned char *)(v26 - 4);
          *(_DWORD *)(v29 + 8) = v30;
          uint64_t v25 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v25, v26) + 32;
          v26 += 32;
        }
        while (v28 + 32 != v24);
      }
LABEL_24:
      WebCore::ContentExtensions::applyResultsToRequest();
      WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v85 + 8, v31);
      WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v84 + 8, v32);
      WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v83 + 8, v33);
      WTF::URL::URL((uint64_t)v53, (uint64_t *)(a1 + 24));
      WTF::URL::URL((uint64_t)&v55 + 8, (uint64_t *)(a1 + 64));
      uint64_t v61 = *(void *)(a1 + 104);
      long long v34 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 11objc_destroyWeak(this + 2) = 0u;
      long long v62 = v34;
      *(void *)&long long v34 = *(void *)(a1 + 128);
      *(void *)(a1 + 128) = 0;
      uint64_t v63 = v34;
      uint64_t v35 = *(void *)(a1 + 136);
      *(void *)(a1 + 136) = 0;
      uint64_t v64 = v35;
      *(void *)&long long v34 = *(void *)(a1 + 144);
      *(void *)(a1 + 144) = 0;
      uint64_t v65 = v34;
      uint64_t v36 = *(void *)(a1 + 152);
      *(void *)(a1 + 15objc_destroyWeak(this + 2) = 0;
      uint64_t v66 = v36;
      *(void *)&long long v34 = *(void *)(a1 + 160);
      *(void *)(a1 + 160) = 0;
      uint64_t v67 = v34;
      LODWORD(v36) = *(_DWORD *)(a1 + 168);
      char v69 = *(unsigned char *)(a1 + 172);
      int v68 = v36;
      long long v37 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 176) = 0u;
      long long v70 = v37;
      char v73 = *(unsigned char *)(a1 + 208);
      uint64_t v38 = *(void *)(a1 + 192);
      uint64_t v39 = *(void *)(a1 + 200);
      *(void *)(a1 + 19objc_destroyWeak(this + 2) = 0;
      uint64_t v71 = v38;
      uint64_t v72 = v39;
      uint64_t v40 = *(const void **)(a1 + 216);
      *(void *)(a1 + 2++*(_DWORD *)(this + 16) = 0;
      CFTypeRef cf = v40;
      uint64_t v75 = &v76;
      std::__variant_detail::__alt<0ul,WebKit::NetworkLoadChecker::ContentExtensionResult>::__alt[abi:sn180100]<WebKit::NetworkLoadChecker::ContentExtensionResult>((uint64_t)&v83, (uint64_t)v53);
      unsigned int v91 = 0;
      uint64_t v41 = *(void *)(a1 + 224);
      *(void *)(a1 + 224) = 0;
      (*(void (**)(uint64_t, long long *))(*(void *)v41 + 16))(v41, &v83);
      (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
      if (v91 != -1) {
        (*(&off_1EE9C3A30 + v91))((int)&v92, (WebCore::ResourceRequestBase *)&v83);
      }
      unsigned int v91 = -1;
      CFTypeRef v42 = cf;
      CFTypeRef cf = 0;
      if (v42) {
        CFRelease(v42);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v53);
      WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v81, v43);
      WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v44);
      return (WTF::StringImpl *)WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v77, v45);
    }
    __break(0xC471u);
LABEL_49:
    JUMPOUT(0x198B6E0F0);
  }
  v53[0] = 0;
  v53[1] = 0;
  WTF::URL::invalidate((WTF::URL *)&v53[1]);
  int v57 = 0;
  __int16 v58 = 3;
  char v60 = 1;
  char v56 = 0;
  __int16 v88 = 3;
  int v87 = 0;
  CFTypeRef v59 = 0;
  long long v47 = *(_OWORD *)v53;
  v53[0] = 0;
  v53[1] = 0;
  long long v83 = v47;
  long long v84 = v54;
  LODWORD(v54) = v54 & 0xFFFFFFFE;
  long long v85 = v55;
  uint64_t v86 = 0;
  uint64_t v89 = 0;
  char v90 = 1;
  unsigned int v91 = 1;
  uint64_t v48 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)v48 + 16))(v48, &v83);
  (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
  if (v91 != -1) {
    (*(&off_1EE9C3A30 + v91))((int)&v76, (WebCore::ResourceRequestBase *)&v83);
  }
  unsigned int v91 = -1;
  CFTypeRef v50 = v59;
  CFTypeRef v59 = 0;
  if (v50) {
    CFRelease(v50);
  }
  char v51 = v56;
  char v56 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2) {
      WTF::StringImpl::destroy(v51, v49);
    }
    else {
      *(_DWORD *)v51 -= 2;
    }
  }
  uint64_t v52 = v53[1];
  v53[1] = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2) {
      WTF::StringImpl::destroy(v52, v49);
    }
    else {
      *(_DWORD *)v52 -= 2;
    }
  }
  uint64_t result = v53[0];
  v53[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v49);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((unsigned int *)a2 + 3);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0xAAAAAAB)
  {
    int v5 = 24 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)uint64_t v2 = v6;
    uint64_t v7 = *((unsigned int *)a2 + 3);
    if (v7)
    {
      uint64_t v8 = v6;
      uint64_t v9 = *a2;
      uint64_t v10 = 24 * v7;
      do
      {
        *(unsigned char *)uint64_t v8 = 0;
        *(_DWORD *)(v8 + ++*(_DWORD *)(this + 16) = -1;
        uint64_t v11 = *(unsigned int *)(v9 + 16);
        if (v11 != -1)
        {
          ((void (*)(char *, uint64_t, uint64_t))off_1EE9C3B80[v11])(&v12, v8, v9);
          *(_DWORD *)(v8 + ++*(_DWORD *)(this + 16) = v11;
        }
        v8 += 24;
        v9 += 24;
        v10 -= 24;
      }
      while (v10);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v3 += 2;
  }
  *a2 = v3;
  int v4 = *(_DWORD **)(a3 + 8);
  if (v4) {
    *v4 += 2;
  }
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v3 += 2;
  }
  *a2 = v3;
  int v4 = *(_DWORD **)(a3 + 8);
  if (v4) {
    *v4 += 2;
  }
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, void *a2, _DWORD **a3)
{
  uint64_t v3 = *a3;
  if (*a3) {
    *v3 += 2;
  }
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, void *a2, _DWORD **a3)
{
  uint64_t v3 = *a3;
  if (*a3) {
    *v3 += 2;
  }
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v3 += 2;
  }
  *a2 = v3;
  int v4 = *(_DWORD **)(a3 + 8);
  if (v4) {
    *v4 += 2;
  }
  a2[1] = v4;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v5 += 2;
  }
  *(void *)a2 = v5;
  uint64_t v6 = *(_DWORD **)(a3 + 8);
  if (v6) {
    *v6 += 2;
  }
  *(void *)(a2 + 8) = v6;
  uint64_t v7 = *(_DWORD **)(a3 + 16);
  if (v7) {
    *v7 += 2;
  }
  *(void *)(a2 + ++*(_DWORD *)(this + 16) = v7;
  uint64_t v8 = *(_DWORD **)(a3 + 24);
  if (v8) {
    *v8 += 2;
  }
  *(void *)(a2 + 24) = v8;
  int v9 = *(_DWORD *)(a3 + 32);
  __int16 v10 = *(_WORD *)(a3 + 36);
  *(unsigned char *)(a2 + 40) = 0;
  *(_WORD *)(a2 + 36) = v10;
  *(_DWORD *)(a2 + 3objc_destroyWeak(this + 2) = v9;
  *(_DWORD *)(a2 + 7objc_destroyWeak(this + 2) = -1;
  uint64_t v11 = *(unsigned int *)(a3 + 72);
  if (v11 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *))*(&off_1EE9C3BB8 + v11))(&v15);
    *(_DWORD *)(a2 + 7objc_destroyWeak(this + 2) = v11;
  }
  unsigned int v13 = *(_DWORD **)(a3 + 80);
  if (v13) {
    *v13 += 2;
  }
  *(void *)(a2 + 80) = v13;
  uint64_t v14 = *(_DWORD **)(a3 + 88);
  if (v14) {
    *v14 += 2;
  }
  *(void *)(a2 + ++*(_DWORD *)(this - 88) = v14;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, void *a2, _DWORD **a3)
{
  uint64_t v3 = *a3;
  if (*a3) {
    *v3 += 2;
  }
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJS9_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, void *a2, _DWORD **a3)
{
  uint64_t v3 = *a3;
  if (*a3) {
    *v3 += 2;
  }
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJS9_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *((unsigned int *)a3 + 3);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 1objc_destroyWeak(this + 2) = v5;
  if (v5)
  {
    if (v5 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      return;
    }
    int v6 = 24 * v5;
    uint64_t v7 = WTF::fastMalloc((WTF *)(24 * v5));
    *(_DWORD *)(a2 + 8) = (v6 & 0xFFFFFFF8) / 0x18;
    *(void *)a2 = v7;
    unsigned int v8 = *((_DWORD *)a3 + 3);
    if (v8)
    {
      uint64_t v9 = *a3;
      uint64_t v10 = *a3 + 24 * v8;
      do
      {
        uint64_t v11 = *(_DWORD **)v9;
        if (*(void *)v9) {
          *v11 += 2;
        }
        *(void *)uint64_t v7 = v11;
        *(unsigned char *)(v7 + 8) = *(unsigned char *)(v9 + 8);
        char v12 = *(_DWORD **)(v9 + 16);
        if (v12) {
          *v12 += 2;
        }
        *(void *)(v7 + ++*(_DWORD *)(this + 16) = v12;
        v9 += 24;
        v7 += 24;
      }
      while (v9 != v10);
    }
  }

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2 + 16, (uint64_t)(a3 + 2));
}

uint64_t WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NetworkTransactionInformation>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WebCore::NetworkTransactionInformation::NetworkTransactionInformation(*(void *)a1 + 592 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 592 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6EB3E5)
    {
      __break(0xC471u);
      JUMPOUT(0x198B6E6BCLL);
    }
    unint64_t v3 = *(WTF **)a1;
    int v4 = (void *)(*(void *)a1 + 592 * *(unsigned int *)(a1 + 12));
    unsigned int v5 = 592 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(592 * a2));
    *(_DWORD *)(a1 + 8) = v5 / 0x250;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::NetworkTransactionInformation>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebCore::NetworkTransactionInformation>::move(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unsigned int v5 = a1;
    do
    {
      WebCore::NetworkTransactionInformation::NetworkTransactionInformation(a3, (uint64_t)v5);
      unint64_t v7 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)v5[73];
      v5[73] = 0;
      if (v7) {
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v7);
      }
      unint64_t v8 = (WTF::StringImpl *)v5[69];
      v5[69] = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v6);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      unint64_t v9 = (const void *)v5[56];
      v5[56] = 0;
      if (v9) {
        CFRelease(v9);
      }
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(v5 + 26), v6);
      unint64_t v10 = (const void *)v5[25];
      v5[25] = 0;
      if (v10) {
        CFRelease(v10);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(v5 + 1));
      a3 += 592;
      v5 += 74;
    }
    while (v5 != a2);
  }
}

uint64_t WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void **)(result + 8);
  if (v2)
  {
    do
    {
      int v4 = (void *)v2[2];
      if (!*(void *)(*v2 + 8)) {
        uint64_t result = WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)v1, v1, v2);
      }
      uint64_t v2 = v4;
    }
    while (v4);
  }
  unsigned int v3 = 0;
  *(_DWORD *)(v1 + 24) = 0;
  if (*(void *)v1)
  {
    unsigned int v3 = *(_DWORD *)(*(void *)v1 - 12);
    if (v3 > 0x7FFFFFFE) {
      unsigned int v3 = 0x7FFFFFFF;
    }
  }
  *(_DWORD *)(v1 + 28) = 2 * v3;
  return result;
}

BOOL WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(uint64_t *a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    uint64_t v6 = a3;
    WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove(a1, &v6);
    WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::unlinkAndDelete((uint64_t)a1, (WTF *)a3);
  }
  return a3 != 0;
}

uint64_t *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove(uint64_t *a1, void **a2)
{
  uint64_t result = (uint64_t *)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>>,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>(a1, a2);
  uint64_t v4 = *a1;
  if (*a1) {
    v4 += 8 * *(unsigned int *)(v4 - 4);
  }
  if ((uint64_t *)v4 != result)
  {
    return WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove(a1, result);
  }
  return result;
}

uint64_t WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::unlinkAndDelete(uint64_t a1, WTF *this)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *((void *)this + 2);
  if (v2)
  {
    *(void *)(v2 + ++*(_DWORD *)(this + 16) = v3;
    uint64_t v3 = *((void *)this + 2);
  }
  else
  {
    *(void *)(a1 + 8) = v3;
  }
  if (v3) {
    uint64_t v4 = (void *)(v3 + 8);
  }
  else {
    uint64_t v4 = (void *)(a1 + 16);
  }
  void *v4 = v2;
  unsigned int v5 = *(unsigned int **)this;
  *(void *)this = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    unint64_t v7 = this;
    WTF::fastFree((WTF *)v5, this);
    this = v7;
  }

  return WTF::fastFree(this, this);
}

uint64_t *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove(uint64_t *result, void *a2)
{
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 1objc_destroyWeak(this + 2) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::lookupForReinsert(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  unint64_t v4 = ~(**a2 << 32) + **a2;
  unint64_t v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  int v8 = 1;
  do
  {
    unsigned int v9 = v7;
    uint64_t v10 = *(void *)(v2 + 8 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 8 * v9;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>>,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>(uint64_t *a1, void **a2)
{
  if (!*a1) {
    return 0;
  }
  uint64_t result = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>>,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>(a1, a2);
  uint64_t v4 = *a1;
  if (!result)
  {
    if (v4) {
      return v4 + 8 * *(unsigned int *)(v4 - 4);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>>,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v2 - 8);
    int v5 = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash(*a2);
    for (i = 0; ; int v5 = i + v7)
    {
      uint64_t v7 = v5 & v4;
      int v8 = *(void **)(v2 + 8 * v7);
      if (!v8) {
        break;
      }
      if (v8 != (void *)-1 && *v8 == **a2) {
        return v2 + 8 * v7;
      }
      ++i;
    }
  }
  return 0;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(uint64_t *a1, uint64_t *a2)
{
  if (!*a1) {
    return 0;
  }
  uint64_t result = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::lookup<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(a1, a2);
  uint64_t v4 = *a1;
  if (!result)
  {
    if (v4) {
      return v4 + 8 * *(unsigned int *)(v4 - 4);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::lookup<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v2 - 8);
    int v5 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*a2);
    for (i = 0; ; int v5 = i + v7)
    {
      uint64_t v7 = v5 & v4;
      int v8 = *(void **)(v2 + 8 * v7);
      if (!v8) {
        break;
      }
      if (v8 != (void *)-1 && *v8 == *a2) {
        return v2 + 8 * v7;
      }
      ++i;
    }
  }
  return 0;
}

uint64_t WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove(uint64_t result, uint64_t a2, void *a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    uint64_t result = WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)result, a2, a3);
    unsigned int v4 = *(_DWORD *)(v3 + 28);
    unsigned int v5 = *(_DWORD *)(v3 + 24) + 1;
    *(_DWORD *)(v3 + 24) = v5;
    if (v5 > v4)
    {
      return WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(v3);
    }
  }
  return result;
}

WTF **WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>>,std::tuple<WTF::String,WTF::String>>(WTF ***a1, WTF::StringImpl **a2)
{
  uint64_t result = *a1;
  if (result)
  {
    uint64_t result = WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>>,std::tuple<WTF::String,WTF::String>>(result, a2);
    unsigned int v4 = *a1;
    if (!result)
    {
      if (v4) {
        return &v4[7 * *((unsigned int *)v4 - 1)];
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

WTF **WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>>,std::tuple<WTF::String,WTF::String>>(WTF **result, WTF::StringImpl **a2)
{
  if (result)
  {
    uint64_t v3 = result;
    int v4 = *((_DWORD *)result - 2);
    unsigned int v5 = WTF::PairHash<WTF::String,WTF::String>::hash(a2) & v4;
    unint64_t v6 = &v3[7 * v5];
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v6, v7, v8))
    {
      return 0;
    }
    else
    {
      int v11 = 1;
      do
      {
        if (*v6 != (WTF *)-1)
        {
          char v13 = WTF::PairHash<WTF::String,WTF::String>::equal(v6, a2, v10);
          uint64_t result = v6;
          if (v13) {
            break;
          }
        }
        unsigned int v5 = (v5 + v11) & v4;
        unint64_t v6 = &v3[7 * v5];
        int v12 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v6, v9, v10);
        uint64_t result = 0;
        ++v11;
      }
      while (!v12);
    }
  }
  return result;
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::expand(uint64_t *a1, WTF **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::rehash(a1, v5, a2);
}

void WTF::HashMapTranslator<WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>>::translate<std::tuple<WTF::String,WTF::String> const&,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>,std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>> WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::inlineAdd<std::tuple<WTF::String,WTF::String> const&,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>(std::tuple<WTF::String,WTF::String> const&,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo &&)::{lambda(void)#1}>(uint64_t a1, WTF::StringImpl **a2, int **a3)
{
  WTF::String::operator=((uint64_t *)a1, a2);
  WTF::String::operator=((uint64_t *)(a1 + 8), a2 + 1);
  unint64_t v6 = *a3;
  int v12 = **a3;
  int v7 = v12;
  long long v8 = *(_OWORD *)(v6 + 2);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + objc_destroyWeak(this + 2) = 0;
  uint64_t v9 = *((void *)v6 + 3);
  uint64_t v10 = *((void *)v6 + 4);
  *((void *)v6 + 3) = 0;
  long long v13 = v8;
  uint64_t v14 = v9;
  uint64_t v15 = v10;
  *(_DWORD *)(a1 + ++*(_DWORD *)(this + 16) = v7;
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::operator=((long long *)(a1 + 24), &v13);
  *(void *)(a1 + 48) = v15;
  WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo::~PendingMainResourcePreconnectInfo((WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo *)&v12, v11);
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t Table = WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v8;
  uint64_t v12 = 0;
  if (v7)
  {
    uint64_t v14 = v7;
    uint64_t v15 = (WTF **)v6;
    do
    {
      if (*v15 != (WTF *)-1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v15, (uint64_t)v10, v11))
        {
          WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>::~KeyValuePair((uint64_t)v15, v16);
        }
        else
        {
          uint64_t v17 = WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::reinsert(*a1, (uint64_t)v15);
          WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>::~KeyValuePair((uint64_t)v15, v18);
          if (v15 == a3) {
            uint64_t v12 = v17;
          }
        }
      }
      v15 += 7;
      --v14;
    }
    while (v14);
    goto LABEL_14;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::allocateTable(unsigned int a1)
{
  uint64_t v2 = WTF::fastMalloc((WTF *)(56 * a1 + 16));
  uint64_t result = v2 + 16;
  if (a1)
  {
    uint64_t v4 = a1;
    unsigned int v5 = (_OWORD *)(v2 + 40);
    do
    {
      *((void *)v5 - 3) = 0;
      *((void *)v5 - objc_destroyWeak(this + 2) = 0;
      *((void *)v5 - 1) = 1;
      *unsigned int v5 = 0uLL;
      v5[1] = 0uLL;
      unsigned int v5 = (_OWORD *)((char *)v5 + 56);
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::reinsert(uint64_t a1, uint64_t a2)
{
  if (a1) {
    int v4 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v4 = 0;
  }
  unsigned int v5 = WTF::PairHash<WTF::String,WTF::String>::hash((WTF::StringImpl **)a2);
  int v8 = 0;
  do
  {
    unsigned int v9 = v5 & v4;
    uint64_t v10 = (WTF **)(a1 + 56 * (v5 & v4));
    int v11 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v10, (uint64_t)v6, v7);
    unsigned int v5 = ++v8 + v9;
  }
  while (!v11);
  uint64_t v12 = (void *)(a1 + 56 * v9 + 24);
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes((uint64_t)v12, v6);
  if (*v12) {
    WTF::fastFree((WTF *)(*v12 - 16), v13);
  }
  uint64_t v14 = v10[1];
  v10[1] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = *v10;
  *uint64_t v10 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  *uint64_t v10 = v16;
  uint64_t v17 = *(WTF **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  v10[1] = v17;
  uint64_t v18 = a1 + 56 * v9;
  *(_DWORD *)(v18 + ++*(_DWORD *)(this + 16) = *(_DWORD *)(a2 + 16);
  *uint64_t v12 = 0;
  uint64_t v19 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *uint64_t v12 = v19;
  uint64_t v20 = *(void *)(a2 + 32);
  *(void *)(a2 + 3objc_destroyWeak(this + 2) = 0;
  *(void *)(v18 + 3objc_destroyWeak(this + 2) = v20;
  uint64_t v21 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(v18 + 40) = v21;
  *(void *)(v18 + 48) = *(void *)(a2 + 48);
  return v18;
}

long long *WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::operator=(long long *a1, void *a2)
{
  uint64_t v3 = a2[2];
  long long v4 = *(_OWORD *)a2;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  long long v5 = *a1;
  *a1 = v4;
  long long v8 = v5;
  uint64_t v6 = *((void *)a1 + 2);
  *((void *)a1 + objc_destroyWeak(this + 2) = v3;
  uint64_t v9 = v6;
  WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakListHashSet(&v8, a2);
  return a1;
}

uint64_t WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear(uint64_t a1, void *a2)
{
  uint64_t result = WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes(a1, a2);
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    uint64_t result = WTF::fastFree((WTF *)(v5 - 16), v4);
    LODWORD(v5) = 0;
    uint64_t v6 = *(void *)a1;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    if (v6)
    {
      LODWORD(v5) = *(_DWORD *)(v6 - 12);
      if (v5 > 0x7FFFFFFE) {
        LODWORD(v5) = 0x7FFFFFFF;
      }
    }
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }
  *(_DWORD *)(a1 + 28) = 2 * v5;
  return result;
}

void WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(a2, (WTF::StringImpl *)a2);
  *a2 = (WTF::StringImpl *)-1;
  WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo::~PendingMainResourcePreconnectInfo((WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo *)(a2 + 2), v4);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v5 = *a1;
  if (*a1) {
    int v6 = *(_DWORD *)(v5 - 12) - 1;
  }
  else {
    int v6 = -1;
  }
  *(_DWORD *)(v5 - 1objc_destroyWeak(this + 2) = v6;
  uint64_t v7 = *a1;
  if (*a1)
  {
    unsigned int v8 = 6 * *(_DWORD *)(v7 - 12);
    unsigned int v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
    {
      WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::rehash(a1, v9 >> 1, 0);
    }
  }
}

void *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::random(void *a1)
{
  uint64_t v1 = (void *)*a1;
  if (!*a1) {
    return 0;
  }
  if (!*((_DWORD *)v1 - 3)) {
    return &v1[*((unsigned int *)v1 - 1)];
  }
  do
  {
    while (1)
    {
      uint64_t v3 = v1;
      unsigned int v4 = WTF::weakRandomNumber<unsigned int>();
      uint64_t v1 = (void *)*a1;
      if (*a1) {
        break;
      }
      if ((unint64_t)(*v3 + 1) >= 2) {
        return v3;
      }
    }
    uint64_t v5 = *(_DWORD *)(v1 - 1) & v4;
  }
  while ((unint64_t)(v3[v5] + 1) < 2);
  v3 += v5;
  return v3;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v5, a2);
}

WTF *WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::translate<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WebKit::NetworkLoadScheduler::setResourceLoadSchedulingMode(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::LoadSchedulingMode)::$_0>(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (void *)WTF::fastMalloc((WTF *)8);
  void *v4 = 0;
  uint64_t result = (WTF *)a1[1];
  a1[1] = v4;
  if (result)
  {
    return (WTF *)std::default_delete<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>::operator()[abi:sn180100](result, v3);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v8;
  int v11 = 0;
  if (v7)
  {
    uint64_t v13 = v7;
    uint64_t v14 = (uint64_t *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          uint64_t v16 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::reinsert(*a1, v14);
          uint64_t v17 = (WTF *)v14[1];
          v14[1] = 0;
          if (v17) {
            std::default_delete<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>::operator()[abi:sn180100](v17, v10);
          }
          if (v14 == a3) {
            int v11 = v16;
          }
        }
        else
        {
          uint64_t v15 = (WTF *)v14[1];
          v14[1] = 0;
          if (v15) {
            std::default_delete<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>::operator()[abi:sn180100](v15, v10);
          }
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_17;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  if (a1) {
    unsigned int v4 = *(_DWORD *)(a1 - 8);
  }
  else {
    unsigned int v4 = 0;
  }
  int v5 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*a2);
  int v7 = 0;
  do
  {
    uint64_t v8 = v5 & v4;
    int v5 = ++v7 + v8;
  }
  while (*(void *)(a1 + 16 * v8));
  uint64_t v9 = (uint64_t *)(a1 + 16 * v8);
  uint64_t v10 = (WTF *)v9[1];
  v9[1] = 0;
  if (v10) {
    std::default_delete<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>::operator()[abi:sn180100](v10, v6);
  }
  *uint64_t v9 = *a2;
  uint64_t v11 = a2[1];
  a2[1] = 0;
  v9[1] = v11;
  return v9;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  if (!*a1)
  {
    if (a2)
    {
      uint64_t v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  uint64_t v2 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
  if ((WTF::StringImpl *)v2 == a2) {
    return 0;
  }
LABEL_3:
  if ((WTF::StringImpl *)v2 != a2) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(a1, a2);
  }
  return 1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t result = (uint64_t *)*((void *)a2 + 1);
  *(void *)a2 = -1;
  *((void *)a2 + 1) = 0;
  if (result) {
    uint64_t result = (uint64_t *)std::default_delete<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>::operator()[abi:sn180100]((WTF *)result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1objc_destroyWeak(this + 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(uint64_t *a1, uint64_t *a2)
{
  if (!*a1) {
    return 0;
  }
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::lookup<WTF::IdentityHashTranslator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1, a2);
  uint64_t v4 = *a1;
  if (!result)
  {
    if (v4) {
      return v4 + 16 * *(unsigned int *)(v4 - 4);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::lookup<WTF::IdentityHashTranslator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 8);
    uint64_t v4 = *a2;
    uint64_t v5 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*a2) & v3;
    uint64_t v6 = *(void *)(v2 + 16 * v5);
    if (v6 == v4) {
      return v2 + 16 * v5;
    }
    int v8 = 1;
    while (v6)
    {
      uint64_t v5 = (v5 + v8) & v3;
      uint64_t v6 = *(void *)(v2 + 16 * v5);
      ++v8;
      if (v6 == v4) {
        return v2 + 16 * v5;
      }
    }
  }
  return 0;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

WebKit::NetworkLoadScheduler::HostContext *WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WebKit::NetworkLoadScheduler::contextForLoad(WebKit::NetworkLoad const&)::$_0>(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::String::operator=((uint64_t *)a1, a2);
  uint64_t v3 = (WebKit::NetworkLoad *)WTF::fastMalloc((WTF *)0x30);
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + objc_destroyWeak(this + 2) = 0u;

  return std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>::reset[abi:sn180100]((WebKit::NetworkLoadScheduler::HostContext **)(a1 + 8), v3);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v13 = v7;
    uint64_t v14 = (WTF::StringImpl **)v6;
    do
    {
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (*v14)
        {
          uint64_t v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(*a1, v14);
          WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>::~KeyValuePair(v14);
          if (v14 == a3) {
            uint64_t v11 = v15;
          }
        }
        else
        {
          WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>::~KeyValuePair(v14);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_13;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t a1, WTF::StringImpl **a2)
{
  int v4 = *a2;
  if (a1) {
    int v5 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v5 = 0;
  }
  unsigned int v6 = *((_DWORD *)v4 + 4);
  if (v6 >= 0x100) {
    unsigned int v7 = v6 >> 8;
  }
  else {
    unsigned int v7 = WTF::StringImpl::hashSlowCase(v4);
  }
  int v8 = 0;
  do
  {
    uint64_t v9 = v7 & v5;
    unsigned int v7 = ++v8 + v9;
  }
  while (*(void *)(a1 + 16 * v9));
  uint64_t v10 = (WTF::StringImpl **)(a1 + 16 * v9);
  std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>::reset[abi:sn180100](v10 + 1, 0);
  uint64_t v12 = *v10;
  *uint64_t v10 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = *a2;
  *a2 = 0;
  *uint64_t v10 = v13;
  uint64_t v14 = a2[1];
  a2[1] = 0;
  v10[1] = v14;
  return v10;
}

uint64_t WebCore::UserContentURLPattern::UserContentURLPattern(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v2 += 2;
  }
  *(void *)uint64_t result = v2;
  uint64_t v3 = *(_DWORD **)(a2 + 8);
  if (v3) {
    *v3 += 2;
  }
  *(void *)(result + 8) = v3;
  int v4 = *(_DWORD **)(a2 + 16);
  if (v4) {
    *v4 += 2;
  }
  *(void *)(result + ++*(_DWORD *)(this + 16) = v4;
  *(_WORD *)(result + 24) = *(_WORD *)(a2 + 24);
  return result;
}

uint64_t WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::UserContentURLPattern const&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t result = WebCore::UserContentURLPattern::UserContentURLPattern(*(void *)a1 + 32 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 <= a3 && v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    uint64_t v9 = a3 - v5;
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v9;
  }
  else
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10) {
      unint64_t v7 = v6 + 1;
    }
    else {
      unint64_t v7 = 16;
    }
    if (v7 > a2) {
      a2 = v7;
    }
    WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x198B6FB68);
    }
    int v4 = *(WTF::StringImpl **)a1;
    uint64_t v5 = (WTF::StringImpl *)(*(void *)a1 + 32 * *(unsigned int *)(a1 + 12));
    uint64_t v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::UserContentURLPattern>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::UserContentURLPattern>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  for (; result != a2; a3 += 32)
  {
    uint64_t v5 = *(void *)result;
    *(void *)uint64_t result = 0;
    *(void *)a3 = v5;
    uint64_t v6 = *((void *)result + 1);
    *((void *)result + 1) = 0;
    *(void *)(a3 + 8) = v6;
    uint64_t v7 = *((void *)result + 2);
    *((void *)result + objc_destroyWeak(this + 2) = 0;
    *(void *)(a3 + ++*(_DWORD *)(this + 16) = v7;
    *(_WORD *)(a3 + 24) = *((_WORD *)result + 12);
    WebCore::UserContentURLPattern::~UserContentURLPattern(result, a2);
    uint64_t result = (WTF::StringImpl *)(v8 + 32);
  }
  return result;
}

void WebCore::UserContentURLPattern::~UserContentURLPattern(WebCore::UserContentURLPattern *this, WTF::StringImpl *a2)
{
  unint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int v4 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
}

uint64_t WebCore::UserContentURLPattern::matches<WTF::URL>(WebCore::UserContentURLPattern *a1, const WTF::URL *a2)
{
  if (*((unsigned char *)a1 + 24)
    || !WebCore::UserContentURLPattern::matchesScheme(a1, a2)
    || !WebCore::UserContentURLPattern::matchesHost(a1, a2))
  {
    return 0;
  }

  return WebCore::UserContentURLPattern::matchesPath(a1, a2);
}

uint64_t WebCore::UserContentURLPattern::matchesHost(WebCore::UserContentURLPattern *this, const WTF::URL *a2)
{
  v8[0] = WTF::URL::host(a2);
  v8[1] = v3;
  WTF::StringView::toStringWithoutCopying((uint64_t)v8, &v9);
  uint64_t v5 = WebCore::UserContentURLPattern::matchesHost(this, (const WTF::String *)&v9);
  uint64_t v6 = v9;
  uint64_t v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return v5;
}

uint64_t WebCore::UserContentURLPattern::matchesPath(WebCore::UserContentURLPattern *this, const WTF::URL *a2)
{
  v8[0] = WTF::URL::path(a2);
  v8[1] = v3;
  WTF::StringView::toStringWithoutCopying((uint64_t)v8, &v9);
  uint64_t v5 = WebCore::UserContentURLPattern::matchesPath(this, (const WTF::String *)&v9);
  uint64_t v6 = v9;
  uint64_t v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return v5;
}

void *WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::reinsert(uint64_t a1, WTF::ASCIILiteralHash *this)
{
  if (a1) {
    unsigned int v4 = *(_DWORD *)(a1 - 8);
  }
  else {
    unsigned int v4 = 0;
  }
  int v5 = WTF::ASCIILiteralHash::hash(this, this);
  int v6 = 0;
  do
  {
    unsigned int v7 = v5 & v4;
    uint64_t v8 = (void *)(a1 + 24 * (v5 & v4));
    int v5 = ++v6 + (v5 & v4);
  }
  while (*v8);
  uint64_t v9 = a1 + 24 * v7;
  uint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = (void *)(v9 + 16);
  uint64_t v10 = v12;
  void *v11 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)this;
  uint64_t v13 = *((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  void *v11 = v13;
  return v8;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::NetworkProcess(WebKit::AuxiliaryProcessInitializationParameters &&)::$_1,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C3C00;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::NetworkProcess(WebKit::AuxiliaryProcessInitializationParameters &&)::$_1,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C3C00;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::remove(uint64_t *a1, uint64_t a2)
{
  if (*a1)
  {
    uint64_t v2 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
    if (v2 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    uint64_t v2 = 0;
  }
  if (v2 != a2) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1, a2);
  }
  return a1;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, uint64_t a2)
{
  *(void *)a2 = -1;
  uint64_t result = WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>::~Ref((_DWORD **)(a2 + 8));
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1objc_destroyWeak(this + 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reinsert(uint64_t a1, void *a2)
{
  if (a1) {
    int v3 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v3 = 0;
  }
  uint64_t v4 = (*a2 + ~(*a2 << 32)) ^ ((*a2 + ~(*a2 << 32)) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((unint64_t)(v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  int v8 = 1;
  do
  {
    unsigned int v9 = v7;
    uint64_t v10 = *(void *)(a1 + 16 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (v10);
  unint64_t v11 = (void *)(a1 + 16 * v9);
  uint64_t v12 = (_DWORD *)v11[1];
  v11[1] = 0;
  if (v12)
  {
    if (v12[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
    }
    else {
      --v12[2];
    }
  }
  void *v11 = *a2;
  uint64_t v13 = a2[1];
  a2[1] = 0;
  v11[1] = v13;
  return v11;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  if (*a1)
  {
    uint64_t v2 = (WTF::StringImpl *)(*a1 + 24 * *(unsigned int *)(*a1 - 4));
    if (v2 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    uint64_t v2 = 0;
  }
  if (v2 != a2) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1, a2);
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  *(void *)a2 = -1;
  uint64_t result = (uint64_t *)*((void *)a2 + 2);
  if (result) {
    uint64_t result = (uint64_t *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1objc_destroyWeak(this + 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t Table = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v8;
  unint64_t v11 = 0;
  if (v7)
  {
    uint64_t v13 = v7;
    uint64_t v14 = (void *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          uint64_t v16 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reinsert(*a1, (uint64_t)v14);
          uint64_t v17 = (WTF::StringImpl **)v14[2];
          if (v17) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v17, v10);
          }
          if (v14 == a3) {
            unint64_t v11 = v16;
          }
        }
        else
        {
          uint64_t v15 = (WTF::StringImpl **)v14[2];
          if (v15) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v15, v10);
          }
        }
      }
      v14 += 3;
      --v13;
    }
    while (v13);
    goto LABEL_16;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::allocateTable(unsigned int a1)
{
  uint64_t v2 = WTF::fastMalloc((WTF *)(24 * a1 + 16));
  uint64_t result = v2 + 16;
  if (a1)
  {
    uint64_t v4 = a1;
    int v5 = (void *)(v2 + 32);
    do
    {
      *(v5 - objc_destroyWeak(this + 2) = 0;
      *((unsigned char *)v5 - 8) = 0;
      *int v5 = 0;
      v5 += 3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reinsert(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  if (a1) {
    unsigned int v5 = *(_DWORD *)(a1 - 8);
  }
  else {
    unsigned int v5 = 0;
  }
  int v6 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)a2);
  int v8 = 0;
  do
  {
    unsigned int v9 = v6 & v5;
    uint64_t v10 = (uint64_t *)(a1 + 24 * (v6 & v5));
    int v6 = ++v8 + (v6 & v5);
  }
  while (*v10);
  uint64_t v11 = a1 + 24 * v9;
  uint64_t v14 = *(WTF::StringImpl ***)(v11 + 16);
  uint64_t v13 = (void *)(v11 + 16);
  uint64_t v12 = v14;
  if (v14)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v7);
    uint64_t v4 = *(void *)a2;
  }
  *uint64_t v10 = v4;
  *(unsigned char *)(a1 + 24 * v9 + 8) = *(unsigned char *)(a2 + 8);
  *uint64_t v13 = 0;
  uint64_t v15 = *(void *)(a2 + 16);
  *(void *)(a2 + ++*(_DWORD *)(this + 16) = 0;
  *uint64_t v13 = v15;
  return v10;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::didClose(IPC::Connection &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(unsigned char *)(v1 + 41objc_destroyWeak(this + 2) = 1;
  return WebKit::NetworkProcess::stopRunLoopIfNecessary(v1);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::didClose(IPC::Connection &)::$_1,void,WebKit::NetworkSession &>::call(uint64_t a1, uint64_t a2)
{
  return WebKit::NetworkProcess::didClose(IPC::Connection &)::$_1::operator()<WebKit::NetworkSession>(a1 + 8, a2);
}

atomic_uchar *WebKit::NetworkProcess::didClose(IPC::Connection &)::$_1::operator()<WebKit::NetworkSession>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  int v6 = **(atomic_uint ***)(a1 + 8);
  atomic_fetch_add(v6, 1u);
  unsigned int v7 = (atomic_uchar *)WTF::fastMalloc((WTF *)0x10);
  *(void *)unsigned int v7 = &unk_1EE9C3C78;
  *((void *)v7 + 1) = v6;
  uint64_t v14 = v7;
  WebKit::NetworkProcess::platformFlushCookies(v5, v4, (uint64_t *)&v14);
  uint64_t v8 = (uint64_t)v14;
  uint64_t v14 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a2 + 1048);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v9 + 16));
  uint64_t v10 = **(atomic_uint ***)(a1 + 8);
  atomic_fetch_add(v10, 1u);
  uint64_t v11 = (atomic_uchar *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v11 = &unk_1EE9C3CA0;
  *((void *)v11 + 1) = v10;
  uint64_t v14 = v11;
  WebKit::NetworkStorageManager::syncLocalStorage(v9, (uint64_t *)&v14);
  uint64_t result = v14;
  if (v14) {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v14 + 8))(v14);
  }
  if (v9) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v9 + 16), v12);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess8didCloseERN3IPC10ConnectionEENK3__1clINS2_14NetworkSessionEEEDaRT_EUlvE_vJEED1Ev(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C3C78;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess8didCloseERN3IPC10ConnectionEENK3__1clINS2_14NetworkSessionEEEDaRT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  int v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C3C78;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess8didCloseERN3IPC10ConnectionEENK3__1clINS2_14NetworkSessionEEEDaRT_EUlvE0_vJEED1Ev(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C3CA0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit14NetworkProcess8didCloseERN3IPC10ConnectionEENK3__1clINS2_14NetworkSessionEEEDaRT_EUlvE0_vJEED0Ev(WTF *this, void *a2)
{
  int v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C3CA0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::lowMemoryHandler(WTF::Critical)::$_0,void,WebKit::NetworkSession &>::call(uint64_t a1, void *a2)
{
  return WebKit::NetworkSession::lowMemoryHandler(a2);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::initializeNetworkProcess(WebKit::NetworkProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Critical,WTF::Synchronous>::~CallableWrapper(void *a1, void *a2)
{
  int v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9C3CF0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::initializeNetworkProcess(WebKit::NetworkProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Critical,WTF::Synchronous>::~CallableWrapper(WTF *this, void *a2)
{
  int v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9C3CF0;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::initializeNetworkProcess(WebKit::NetworkProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Critical,WTF::Synchronous>::call(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2)
  {
    int v3 = *(atomic_uint **)(v2 + 8);
    if (v3)
    {
      atomic_fetch_add(v3 + 32, 1u);
      uint64_t result = WebKit::NetworkProcess::lowMemoryHandler((uint64_t)v3, a2);
      if (atomic_fetch_add(v3 + 32, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v3 + 32);
        uint64_t v4 = *(uint64_t (**)(atomic_uint *))(*(void *)v3 + 8);
        return v4(v3);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>(uint64_t a1, unint64_t a2)
{
  int v3 = (_DWORD **)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  int v6 = *v3;
  if (*v3) {
    *v6 += 2;
  }
  *(void *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 1objc_destroyWeak(this + 2) = v4 + 1;
  return 1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, _DWORD **a2, unint64_t a3)
{
  uint64_t v3 = result;
  atomic_uchar *result = 0;
  result[1] = 0;
  if (!a3) {
    return v3;
  }
  int v4 = a3;
  if (!(a3 >> 29))
  {
    uint64_t v6 = 8 * a3;
    uint64_t v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + objc_destroyWeak(this + 2) = v4;
    uint64_t *v3 = v7;
    unsigned int v8 = *((_DWORD *)v3 + 3);
    do
    {
      uint64_t v9 = *a2;
      if (*a2) {
        *v9 += 2;
      }
      *(void *)(v7 + 8 * v8) = v9;
      ++a2;
      ++v8;
      v6 -= 8;
    }
    while (v6);
    *((_DWORD *)v3 + 3) = v8;
    return v3;
  }
  __break(0xC471u);
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::addAllowedFirstPartyForCookies(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WebKit::NetworkSession &>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C3D40;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::addAllowedFirstPartyForCookies(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WebKit::NetworkSession &>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9C3D40;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);

  return WTF::fastFree(a1, v3);
}

atomic_uchar **WTF::Detail::CallableWrapper<WebKit::NetworkProcess::addAllowedFirstPartyForCookies(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WebKit::NetworkSession &>::call(uint64_t a1, uint64_t a2)
{
  return WebKit::NetworkProcess::addAllowedFirstPartyForCookies(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)::$_1::operator()<WebKit::NetworkSession>((atomic_uchar **)(a1 + 8), *(atomic_uchar ***)(a2 + 1048));
}

atomic_uchar **WebKit::NetworkProcess::addAllowedFirstPartyForCookies(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)::$_1::operator()<WebKit::NetworkSession>(atomic_uchar **a1, atomic_uchar **a2)
{
  int v4 = a2 + 2;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(a2 + 2);
  uint64_t result = WebKit::NetworkStorageManager::addAllowedSitesForConnection(a2, *a1, (uint64_t)(a1 + 1));
  if (a2)
  {
    uint64_t v7 = *v4;
    return (atomic_uchar **)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(v7, v6);
  }
  return result;
}

void *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::reinsert(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (a1) {
    int v4 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v4 = 0;
  }
  unint64_t v5 = (v3 + ~(v3 << 32)) ^ ((unint64_t)(v3 + ~(v3 << 32)) >> 22);
  unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  unsigned int v8 = v4 & ((v7 >> 31) ^ v7);
  int v9 = 1;
  do
  {
    unsigned int v10 = v8;
    uint64_t v11 = *(void *)(a1 + 16 * v8);
    unsigned int v8 = (v8 + v9++) & v4;
  }
  while (v11);
  uint64_t v12 = (void *)(a1 + 16 * v10);
  uint64_t v13 = v12[1];
  v12[1] = 0;
  if (v13)
  {
    WebCore::NetworkStorageSession::operator delete(v13, 0x128uLL);
    uint64_t v3 = *a2;
  }
  *uint64_t v12 = v3;
  uint64_t v14 = a2[1];
  a2[1] = 0;
  v12[1] = v14;
  return v12;
}

uint64_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>(char *__dst, uint64_t a2, char a3, unint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  v13[0] = a2;
  uint64_t result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(v13, __dst);
  if (v13[0]) {
    uint64_t v8 = *(unsigned int *)(v13[0] + 4);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = 0;
  *(_WORD *)&__dst[2 * v8] = a3;
  do
  {
    *((unsigned char *)&v13[4] + v9-- + 7) = (a4 % 0xA) | 0x30;
    BOOL v10 = a4 > 9;
    a4 /= 0xAuLL;
  }
  while (v10);
  if (v9 + 26 <= 25)
  {
    uint64_t v11 = &__dst[2 * v8 + 2];
    do
    {
      *(_WORD *)uint64_t v11 = *((unsigned __int8 *)&v14 + v9);
      v11 += 2;
    }
    while (!__CFADD__(v9++, 1));
  }
  return result;
}

void **WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>(char *__dst, uint64_t a2, int8x16_t *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v24, __dst);
  uint64_t v11 = v24;
  if (v24) {
    uint64_t v11 = *(unsigned int *)(v24 + 4);
  }
  uint64_t v12 = &__dst[2 * v11];
  uint64_t v13 = &v12[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    uint64_t v14 = &v12[2 * (a4 & 0xFFFFFFC0)];
    long long v15 = 0uLL;
    do
    {
      v28.val[0] = *a3;
      int8x16_t v16 = a3[1];
      v29.val[0] = a3[2];
      int8x16_t v17 = a3[3];
      a3 += 4;
      int8x16_t v18 = v17;
      v29.val[1] = 0uLL;
      v30.val[0] = v16;
      v28.val[1] = 0uLL;
      uint64_t v19 = v12;
      vst2q_s8(v19, v28);
      v19 += 32;
      v30.val[1] = 0uLL;
      vst2q_s8(v19, v30);
      uint64_t v20 = v12 + 64;
      vst2q_s8(v20, v29);
      uint64_t v21 = v12 + 96;
      vst2q_s8(v21, *(int8x16x2_t *)(&v15 - 1));
      v12 += 128;
    }
    while (v12 != v14);
    uint64_t v12 = v14;
  }
  while (v12 != v13)
  {
    __int16 v22 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)uint64_t v12 = v22;
    v12 += 2;
  }
  v25[0] = a5;
  v25[1] = a6;
  CFTypeRef v27 = v13;
  uint64_t v26 = &v27;
  return _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIDsEEvPT_EUlDpOT_E_EEDcOS5_((uint64_t)v25, &v26);
}

void **_ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIDsEEvPT_EUlDpOT_E_EEDcOS5_(uint64_t a1, void **a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  WTF::Internal::appendHex();
  int v19 = v3;
  WTF::Internal::appendHex();
  int v17 = v4;
  WTF::Internal::appendHex();
  int v15 = v5;
  WTF::Internal::appendHex();
  int v13 = v6;
  memset(v9, 45, sizeof(v9));
  WTF::Internal::appendHex();
  int v11 = v7;
  return _ZN3WTF18handleWithAdaptersIZNKS_17StringTypeAdapterINS_4UUIDEvE7writeToIDsEEvPT_EUlDpOT_E_JNS_15HexNumberBufferEcSB_cSB_cSB_cSB_EEEDcOS5_DpOT0_(a2, (uint64_t)v18, &v9[3], (uint64_t)v16, &v9[2], (uint64_t)v14, &v9[1], (uint64_t)v12, v9, (uint64_t)v10);
}

void **_ZN3WTF18handleWithAdaptersIZNKS_17StringTypeAdapterINS_4UUIDEvE7writeToIDsEEvPT_EUlDpOT_E_JNS_15HexNumberBufferEcSB_cSB_cSB_cSB_EEEDcOS5_DpOT0_(void **result, uint64_t a2, char *a3, uint64_t a4, char *a5, uint64_t a6, char *a7, uint64_t a8, char *a9, uint64_t a10)
{
  unsigned int v12 = *(_DWORD *)(a2 + 16);
  uint64_t v10 = a2 + 16;
  uint64_t v11 = v12;
  if (v12 >= 0x11) {
    goto LABEL_22;
  }
  __int16 v13 = *a3;
  __int16 v14 = *a5;
  __int16 v15 = *a7;
  __int16 v16 = *a9;
  int v17 = (_WORD *)**result;
  int8x16_t v18 = &v17[v11];
  if (v11)
  {
    int v19 = (unsigned __int8 *)(v10 - v11);
    uint64_t v20 = 2 * v11;
    do
    {
      __int16 v21 = *v19++;
      *v17++ = v21;
      v20 -= 2;
    }
    while (v20);
  }
  *int8x16_t v18 = v13;
  __int16 v22 = v18 + 1;
  unsigned int v25 = *(_DWORD *)(a4 + 16);
  uint64_t v23 = a4 + 16;
  uint64_t v24 = v25;
  if (v25 >= 0x11) {
    goto LABEL_22;
  }
  uint64_t v26 = &v22[v24];
  if (v24)
  {
    CFTypeRef v27 = (unsigned __int8 *)(v23 - v24);
    uint64_t v28 = 2 * v24;
    do
    {
      __int16 v29 = *v27++;
      *v22++ = v29;
      v28 -= 2;
    }
    while (v28);
  }
  *uint64_t v26 = v14;
  int8x16x2_t v30 = v26 + 1;
  unsigned int v33 = *(_DWORD *)(a6 + 16);
  uint64_t v31 = a6 + 16;
  uint64_t v32 = v33;
  if (v33 >= 0x11) {
    goto LABEL_22;
  }
  long long v34 = &v30[v32];
  if (v32)
  {
    uint64_t v35 = (unsigned __int8 *)(v31 - v32);
    uint64_t v36 = 2 * v32;
    do
    {
      __int16 v37 = *v35++;
      *v30++ = v37;
      v36 -= 2;
    }
    while (v36);
  }
  *long long v34 = v15;
  uint64_t v38 = v34 + 1;
  unsigned int v41 = *(_DWORD *)(a8 + 16);
  uint64_t v39 = a8 + 16;
  uint64_t v40 = v41;
  if (v41 >= 0x11) {
    goto LABEL_22;
  }
  CFTypeRef v42 = &v38[v40];
  if (v40)
  {
    long long v43 = (unsigned __int8 *)(v39 - v40);
    uint64_t v44 = 2 * v40;
    do
    {
      __int16 v45 = *v43++;
      *v38++ = v45;
      v44 -= 2;
    }
    while (v44);
  }
  *CFTypeRef v42 = v16;
  uint64_t v46 = v42 + 1;
  uint64_t v47 = *(unsigned int *)(a10 + 16);
  if (*(_DWORD *)(a10 + 16) >= 0x11u)
  {
LABEL_22:
    __break(1u);
  }
  else if (v47)
  {
    uint64_t v48 = (unsigned __int8 *)(a10 + 16 - v47);
    uint64_t v49 = 2 * v47;
    do
    {
      __int16 v50 = *v48++;
      *v46++ = v50;
      v49 -= 2;
    }
    while (v49);
  }
  return result;
}

uint64_t *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::reinsert(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (a1) {
    unsigned int v5 = *(_DWORD *)(a1 - 8);
  }
  else {
    unsigned int v5 = 0;
  }
  int v6 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*a2);
  int v7 = 0;
  do
  {
    uint64_t v8 = v6 & v5;
    int v6 = ++v7 + v8;
  }
  while (*(void *)(a1 + 16 * v8));
  uint64_t v9 = (uint64_t *)(a1 + 16 * v8);
  uint64_t v10 = v9[1];
  v9[1] = 0;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    uint64_t v4 = *a2;
  }
  *uint64_t v9 = v4;
  uint64_t v11 = a2[1];
  a2[1] = 0;
  v9[1] = v11;
  return v9;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 1objc_destroyWeak(this + 2) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 1objc_destroyWeak(this + 2) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = (uint64_t *)(v4 + 8 * i);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v12 = *a1;
          if (*a1) {
            int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            int v13 = 0;
          }
          unint64_t v14 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
          int v18 = 1;
          do
          {
            unsigned int v19 = v17;
            uint64_t v20 = *(void *)(v12 + 8 * v17);
            unsigned int v17 = (v17 + v18++) & v13;
          }
          while (v20);
          __int16 v21 = (void *)(v12 + 8 * v19);
          void *v21 = 0;
          uint64_t v22 = *v10;
          *uint64_t v10 = 0;
          void *v21 = v22;
          uint64_t v23 = *v10;
          *uint64_t v10 = 0;
          if (v23) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v23 + 16), v8);
          }
        }
        else
        {
          *uint64_t v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::destroySession(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9C3D90;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  int v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 32);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::destroySession(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9C3D90;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  int v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + objc_destroyWeak(this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 32);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::destroySession(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = *(void *)(v3 + 392);
  if (v4)
  {
    uint64_t v5 = a1[3];
    unsigned int v6 = *(_DWORD *)(v4 - 8);
    unint64_t v7 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    uint64_t v10 = v6 & ((v9 >> 31) ^ v9);
    uint64_t v11 = *(void *)(v4 + 8 * v10);
    if (v11 != v5)
    {
      int v12 = 1;
      while (v11)
      {
        uint64_t v10 = (v10 + v12) & v6;
        uint64_t v11 = *(void *)(v4 + 8 * v10);
        ++v12;
        if (v11 == v5) {
          goto LABEL_8;
        }
      }
      uint64_t v10 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v10 != *(_DWORD *)(v4 - 4))
    {
      int v13 = (uint64_t *)(v3 + 392);
      uint64_t v14 = *(void *)(v4 + 8 * v10);
      *(void *)(v4 + 8 * v10) = -1;
      if (v14) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v14 + 16), a2);
      }
      ++*(_DWORD *)(*v13 - 16);
      uint64_t v15 = *v13;
      if (*v13) {
        int v16 = *(_DWORD *)(v15 - 12) - 1;
      }
      else {
        int v16 = -1;
      }
      *(_DWORD *)(v15 - 1objc_destroyWeak(this + 2) = v16;
      uint64_t v17 = *v13;
      if (*v13)
      {
        unsigned int v20 = 6 * *(_DWORD *)(v17 - 12);
        unsigned int v21 = *(_DWORD *)(v17 - 4);
        if (v20 < v21 && v21 >= 9) {
          WTF::HashTable<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>>::rehash((uint64_t *)(v3 + 392), v21 >> 1);
        }
      }
    }
  }
  uint64_t v18 = a1[4];
  a1[4] = 0;
  (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);

  return WebKit::NetworkProcess::stopRunLoopIfNecessary(v3);
}

uint64_t *WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::remove(uint64_t *result, void *a2)
{
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 1objc_destroyWeak(this + 2) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::lookupForReinsert(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  unint64_t v4 = *a2 + ~(*a2 << 32);
  unint64_t v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  int v8 = 1;
  do
  {
    unsigned int v9 = v7;
    uint64_t v10 = *(void *)(v2 + 8 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 8 * v9;
}

uint64_t WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = *a2 + ~(*a2 << 32);
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  uint64_t v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  uint64_t v8 = *(void *)(v2 + 8 * v7);
  if (v8 == *a2) {
    return v2 + 8 * v7;
  }
  int v9 = 1;
  while (v8)
  {
    uint64_t v7 = (v7 + v9) & v3;
    uint64_t v8 = *(void *)(v2 + 8 * v7);
    ++v9;
    if (v8 == *a2) {
      return v2 + 8 * v7;
    }
  }
  return v2 + 8 * *(unsigned int *)(v2 - 4);
}

uint64_t WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 8);
    unint64_t v4 = *a2 + ~(*a2 << 32);
    unint64_t v5 = 9
       * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
    unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    uint64_t v7 = v3 & ((v6 >> 31) ^ v6);
    uint64_t v8 = *(void *)(v2 + 8 * v7);
    if (v8 == *a2) {
      return v2 + 8 * v7;
    }
    int v9 = 1;
    while (v8)
    {
      uint64_t v7 = (v7 + v9) & v3;
      uint64_t v8 = *(void *)(v2 + 8 * v7);
      ++v9;
      if (v8 == *a2) {
        return v2 + 8 * v7;
      }
    }
  }
  return 0;
}

WTF::StringImpl **WTF::Function<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  LOBYTE(v6) = 0;
  char v7 = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    unsigned int v3 = *(WTF::StringImpl ***)a2;
    *(void *)a2 = 0;
    unint64_t v6 = v3;
    char v7 = 1;
  }
  uint64_t result = (WTF::StringImpl **)(*(uint64_t (**)(uint64_t, WTF::StringImpl ***))(*(void *)v2 + 16))(v2, &v6);
  if (v7)
  {
    uint64_t result = v6;
    if (v6) {
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v5);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)>,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>&&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C3DB8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)>,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>&&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C3DB8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)>,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>&&>::call(uint64_t a1, WTF::StringImpl ***a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  unint64_t v5 = v2;
  WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)>::operator()((uint64_t *)(a1 + 8), &v5);
  uint64_t result = v5;
  if (v5) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, v3);
  }
  return result;
}

WTF::StringImpl **WTF::Function<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)>::operator()(uint64_t *a1, WTF::StringImpl ***a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  *a2 = 0;
  unint64_t v6 = v3;
  (*(void (**)(uint64_t, WTF::StringImpl ***))(*(void *)v2 + 16))(v2, &v6);
  uint64_t result = v6;
  if (v6) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String)>,void,WTF::String&&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9C4A18;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String)>,void,WTF::String&&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9C4A18;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String)>,void,WTF::String&&>::call(uint64_t a1, WTF::StringImpl **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  unint64_t v5 = v2;
  WTF::CompletionHandler<void ()(WTF::String)>::operator()((uint64_t *)(a1 + 8), &v5);
  uint64_t result = v5;
  unint64_t v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}